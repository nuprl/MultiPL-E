name: HumanEval_58_common
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    sort(l1.begin(),\
    \ l1.end());\n    sort(l2.begin(), l2.end());\n    std::vector<long> tmp;\n  \
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(tmp));\n\
    \    return tmp;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  // TODO\n\
    \  std::vector<long> result;\n  long size1 = l1.size();\n  long size2 = l2.size();\n\
    \  sort(l1.begin(), l1.end());\n  sort(l2.begin(), l2.end());\n  long i = 0, j\
    \ = 0;\n  while(i < size1 && j < size2) {\n    if(l1[i] == l2[j]) {\n      result.push_back(l1[i]);\n\
    \      i++;\n      j++;\n    }\n    else if(l1[i] < l2[j]) {\n      i++;\n   \
    \ }\n    else {\n      j++;\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3,\
    \ 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\t// sort\n\
    \tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\t\n\t\
    // get intersection\n\tstd::vector<long> intersection;\n\tstd::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(),\n\t\tstd::back_inserter(intersection));\n\t\
    return intersection;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ ret;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(ret));\n\
    \    return ret;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ newList;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(newList));\n\
    \    return newList;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ output;\n\tstd::vector<long>::iterator it;\n\tsort(l1.begin(), l1.end());\n\t\
    sort(l2.begin(), l2.end());\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(), std::back_inserter(output));\n\treturn output;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4,\
    \ 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ create a vector for the output\n    std::vector<long> output;\n    // loop through\
    \ the first list\n    for (int i = 0; i < l1.size(); i++) {\n        // loop through\
    \ the second list\n        for (int j = 0; j < l2.size(); j++) {\n           \
    \ // if an element in the first list is in the second list\n            if (l1[i]\
    \ == l2[j]) {\n                // push it to the output vector\n             \
    \   output.push_back(l1[i]);\n            }\n        }\n    }\n    // remove the\
    \ duplicates from the output vector\n    std::sort(output.begin(), output.end());\n\
    \    output.erase(std::unique(output.begin(), output.end()), output.end());\n\
    \    // return the output vector\n    return output;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\t// TODO:\
    \ Write your code here\n\tstd::vector<long> retval;\n\tstd::sort(l1.begin(), l1.end());\n\
    \tstd::sort(l2.begin(), l2.end());\n\tlong num1 = l1.size();\n\tlong num2 = l2.size();\n\
    \tlong i=0, j=0;\n\twhile(i<num1 && j<num2) {\n\t\tif(l1[i] == l2[j]) {\n\t\t\t\
    retval.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t} else if(l1[i] < l2[j])\
    \ {\n\t\t\ti++;\n\t\t} else {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn retval;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ common;\n\t// TODO: Write - Your - Code\n\treturn common;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4,\
    \ 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppx6ap9na: /tmp/tmppx6ap9na.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ ans;\n\t\n\t// One possible implementation\n\t/*\n\tfor (long i = 0; i < l1.size();\
    \ i++) {\n\t\tfor (long j = 0; j < l2.size(); j++) {\n\t\t\tif (l1[i] == l2[j])\
    \ {\n\t\t\t\tbool insert = true;\n\t\t\t\tfor (long k = 0; k < ans.size(); k++)\
    \ {\n\t\t\t\t\tif (ans[k] == l1[i]) {\n\t\t\t\t\t\tinsert = false;\n\t\t\t\t\t\
    \tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (insert) ans.push_back(l1[i]);\n\t\
    \t\t}\n\t\t}\n\t}\n\t*/\n\t\n\tlong i = 0, j = 0;\n\twhile (i < l1.size() && j\
    \ < l2.size()) {\n\t\tif (l1[i] == l2[j]) {\n\t\t\tans.push_back(l1[i]);\n\t\t\
    \ti++;\n\t\t\tj++;\n\t\t} else if (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t} else {\n\
    \t\t\tj++;\n\t\t}\n\t}\n\t\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmcu4tg1h: /tmp/tmpmcu4tg1h.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ common_list;\n\tfor (int i = 0; i < l1.size(); i++) {\n\t\tfor (int j = 0; j\
    \ < l2.size(); j++) {\n\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\tcommon_list.push_back(l1[i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\tstd::sort(common_list.begin(), common_list.end());\n\t\
    std::vector<long> ::iterator it = std::unique(common_list.begin(), common_list.end());\n\
    \tcommon_list.resize(std::distance(common_list.begin(), it));\n\treturn common_list;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ ret;\n  std::vector<long>::iterator it;\n  std::sort(l1.begin(), l1.end());\n\
    \  std::sort(l2.begin(), l2.end());\n  set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), back_inserter(ret));\n  return ret;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4,\
    \ 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::sort(l1.begin(),\
    \ l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tstd::vector<long> v;\n\tstd::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(v));\n\treturn v;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> comm;\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(comm));\n\
    \    comm.erase(std::unique(comm.begin(), comm.end()), comm.end());\n    return\
    \ comm;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ result;\n  if(l1.size()<=0 && l2.size()<=0) return result;\n  if(l1.size()<=0)\
    \ return result;\n  if(l2.size()<=0) return result;\n  std::sort(l1.begin(),l1.end());\n\
    \  std::sort(l2.begin(),l2.end());\n  std::vector<long>::iterator it1=l1.begin();\n\
    \  std::vector<long>::iterator it2=l2.begin();\n  for(;it1!=l1.end() && it2!=l2.end();)\n\
    \  {\n    if(*it1==*it2)\n    {\n      result.push_back(*it1);\n      it1++;\n\
    \      it2++;\n    }\n    else if(*it1<*it2)\n    {\n      it1++;\n    }\n   \
    \ else\n    {\n      it2++;\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3,\
    \ 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ Write your code here\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::vector<long> v;\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), back_inserter(v));\n    return v;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ result;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \  return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tlong\
    \ length1 = l1.size();\n\tlong length2 = l2.size();\n\tif (length1 < 1 && length2\
    \ < 1) {\n\t\treturn {};\n\t}\n\tif (length1 < 1) {\n\t\treturn {};\n\t}\n\tif\
    \ (length2 < 1) {\n\t\treturn {};\n\t}\n\tstd::vector<long> result;\n\tstd::sort(l1.begin(),\
    \ l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tfor (long i = 0; i < length1;\
    \ i++) {\n\t\tfor (long j = 0; j < length2; j++) {\n\t\t\tif (l1[i] == l2[j])\
    \ {\n\t\t\t\tresult.push_back(l1[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ sortedL1 = l1;\n\tstd::vector<long> sortedL2 = l2;\n\t// sort list\n\tstd::sort(sortedL1.begin(),\
    \ sortedL1.end());\n\tstd::sort(sortedL2.begin(), sortedL2.end());\n\t// delete\
    \ duplicates\n\tauto last = std::unique(sortedL1.begin(), sortedL1.end());\n\t\
    sortedL1.erase(last, sortedL1.end());\n\tlast = std::unique(sortedL2.begin(),\
    \ sortedL2.end());\n\tsortedL2.erase(last, sortedL2.end());\n\t// find common\
    \ elements\n\tstd::vector<long> common;\n\tfor (std::vector<long>::iterator it1\
    \ = sortedL1.begin(); it1 != sortedL1.end(); ++it1) {\n\t\tfor (std::vector<long>::iterator\
    \ it2 = sortedL2.begin(); it2 != sortedL2.end(); ++it2) {\n\t\t\tif (*it1 == *it2)\
    \ {\n\t\t\t\tcommon.push_back(*it1);\n\t\t\t}\n\t\t}\n\t}\n\treturn common;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n\
    \        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n       \
    \     i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n          \
    \  i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1ihnn5c4: /tmp/tmp1ihnn5c4.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\t\tstd::vector<long>\
    \ l3;\n\t\tlong i, j, k;\n\t\tk = 0;\n\t\tstd::sort(l1.begin(), l1.end());\n\t\
    \tstd::sort(l2.begin(), l2.end());\n\t\tfor (i = 0; i < l1.size(); i++) {\n\t\t\
    \tfor (j = 0; j < l2.size(); j++) {\n\t\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\t\t\
    l3.push_back(l1[i]);\n\t\t\t\t\tl2.erase(l2.begin() + j);\n\t\t\t\t\tbreak;\n\t\
    \t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn l3;\n}\nint main() {\n    auto candidate =\
    \ common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ temp;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(temp));\n\
    \  return temp;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\t// Write\
    \ code here.\n\tstd::vector<long> common;\n\tif (l1.size() == 0 || l2.size() ==\
    \ 0) {\n\t\treturn common;\n\t}\n\tstd::unordered_map<long, long> m;\n\tfor (long\
    \ i = 0; i < l1.size(); i++) {\n\t\tm[l1[i]]++;\n\t}\n\tfor (long i = 0; i < l2.size();\
    \ i++) {\n\t\tif (m.find(l2[i]) != m.end()) {\n\t\t\tcommon.push_back(l2[i]);\n\
    \t\t}\n\t}\n\tsort(common.begin(), common.end());\n\treturn common;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp890o33ni: /tmp/tmp890o33ni.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>res;\n\
    \    std::sort(l1.begin(),l1.end());\n    std::sort(l2.begin(),l2.end());\n  \
    \  std::set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),std::back_inserter(res));\n\
    \    std::vector<long>::iterator it;\n    it=std::unique(res.begin(),res.end());\n\
    \    res.resize(std::distance(res.begin(),it));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> ans;\n\
    \    int i = 0, j = 0;\n    while(i < l1.size() && j < l2.size()) {\n        if(l1[i]\
    \ == l2[j]) {\n            ans.push_back(l1[i]);\n            i++;\n         \
    \   j++;\n        } else if(l1[i] < l2[j]) i++;\n        else j++;\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ common_elements;\n\tint i = 0, j = 0;\n\tfor (int i = 0; i < l1.size(); i++)\
    \ {\n\t\tfor (int j = 0; j < l2.size(); j++) {\n\t\t\tif (l1[i] == l2[j]) {\n\t\
    \t\t\tcommon_elements.push_back(l1[i]);\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(common_elements.begin(),\
    \ common_elements.end());\n\treturn common_elements;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpv0oifr8j: /tmp/tmpv0oifr8j.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> l3;\n\
    \    int flag = 0;\n    for(int i = 0; i < l1.size(); i++) {\n        for(int\
    \ j = 0; j < l2.size(); j++) {\n            if(l1[i] == l2[j]) {\n           \
    \     for(int k = 0; k < l3.size(); k++) {\n                    if(l3[k] == l1[i])\
    \ {\n                        flag = 1;\n                        break;\n     \
    \               }\n                }\n                if(flag == 0) {\n      \
    \              l3.push_back(l1[i]);\n                }\n                flag =\
    \ 0;\n            }\n        }\n    }\n    return l3;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    std::set<long> s(l1.begin(), l1.end());\n    s.insert(l2.begin(),\
    \ l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n\
    \            std::inserter(result, result.begin()));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpk04x_q2m: /tmp/tmpk04x_q2m.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ ans;\n    for(auto l : l1) {\n        for(auto r : l2) {\n            if(l ==\
    \ r) ans.push_back(l);\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n\
    \    ans.erase(std::unique(ans.begin(), ans.end()), ans.end());\n    return ans;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  int\
    \ i, j, count = 0;\n  std::vector<long> res;\n  for (i = 0; i < l1.size(); i++)\
    \ {\n    for (j = 0; j < l2.size(); j++) {\n      if (l1[i] == l2[j]) {\n    \
    \    res.push_back(l1[i]);\n        count++;\n        break;\n      }\n    }\n\
    \  }\n  std::sort(res.begin(), res.end());\n  std::vector<long> v;\n  for (i =\
    \ 0; i < count; i++) {\n    if (i == 0) {\n      v.push_back(res[i]);\n    } else\
    \ {\n      if (res[i] != res[i - 1]) {\n        v.push_back(res[i]);\n      }\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    return\
    \ {};\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpez8jvc0w: /tmp/tmpez8jvc0w.cpp:13: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::sort(l1.begin(),\
    \ l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tstd::vector<long> l;\n\tfor\
    \ (int i = 0; i < l1.size(); i++) {\n\t\tfor (int j = 0; j < l2.size(); j++) {\n\
    \t\t\tif (l1[i] == l2[j]) {\n\t\t\t\tl.push_back(l1[i]);\n\t\t\t}\n\t\t}\n\t}\n\
    \tstd::sort(l.begin(), l.end());\n\treturn l;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8p3wvwvy: /tmp/tmp8p3wvwvy.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    sort(l1.begin(),\
    \ l1.end());\n    sort(l2.begin(), l2.end());\n    std::vector<long> v(l1.size()\
    \ + l2.size());\n    std::vector<long>::iterator it;\n    it = std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), v.begin());\n    v.resize(it - v.begin());\n\
    \    return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    long sz1 = l1.size();\n    long sz2 = l2.size();\n    long i = 0, j = 0;\n\
    \    while(i < sz1 && j < sz2) {\n        if(l1[i] < l2[j]) i++;\n        else\
    \ if(l1[i] > l2[j]) j++;\n        else {\n            result.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    int i = 0, j = 0;\n    int n = l1.size();\n    int m = l2.size();\n\
    \    while (i < n && j < m) {\n        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n   \
    \         i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjakwb58u: /tmp/tmpjakwb58u.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ common_vec;\n\t// Sort both vector, linear time.\n\tstd::sort(l1.begin(), l1.end());\n\
    \tstd::sort(l2.begin(), l2.end());\n\t// Merge both list into one.\n\tstd::merge(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(common_vec));\n\tstd::vector<long>::iterator\
    \ it;\n\tit = std::unique(common_vec.begin(), common_vec.end());\n\tcommon_vec.resize(std::distance(common_vec.begin(),\
    \ it));\n\treturn common_vec;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpwvh08ru8: /tmp/tmpwvh08ru8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ ret;\n    int i = 0, j = 0;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i]\
    \ == l2[j]) {\n            ret.push_back(l1[i]);\n            while (i < l1.size()\
    \ && l1[i] == l1[i + 1]) {\n                i++;\n            }\n            while\
    \ (j < l2.size() && l2[j] == l2[j + 1]) {\n                j++;\n            }\n\
    \            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n   \
    \         i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n     \
    \   std::vector<long> ret;\n        int n = l1.size();\n        int m = l2.size();\n\
    \        sort(l1.begin(), l1.end());\n        sort(l2.begin(), l2.end());\n  \
    \      int i = 0, j = 0;\n        while(i < n && j < m) {\n                if(l1[i]\
    \ < l2[j]) {\n                        i++;\n                } else if(l1[i] >\
    \ l2[j]) {\n                        j++;\n                } else {\n         \
    \               ret.push_back(l1[i]);\n                        i++;\n        \
    \                j++;\n                }\n        }\n        return ret;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ v;\n\tsort(l1.begin(), l1.end());\n\tsort(l2.begin(), l2.end());\n\tint i =\
    \ 0, j = 0;\n\twhile (i < l1.size() && j < l2.size()) {\n\t\tif (l1[i] == l2[j])\
    \ {\n\t\t\tv.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (l1[i]\
    \ < l2[j]) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn\
    \ v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ l3;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(l3));\n\
    \    return l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ tmp;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(tmp));\n\
    \    tmp.erase(std::unique(tmp.begin(), tmp.end()), tmp.end());\n    return tmp;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ common_elements;\n\tsort(l1.begin(), l1.end());\n\tsort(l2.begin(), l2.end());\n\
    \tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(common_elements));\n\
    \treturn common_elements;\n}\nint main() {\n    auto candidate = common;\n   \
    \ assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  \n \
    \ std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::vector<long>\
    \ v;\n  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(v));\n\
    \  return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ cmn;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n       \
    \                 std::back_inserter(cmn));\n  return cmn;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4,\
    \ 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //remove\
    \ duplicates\n    std::sort(l1.begin(), l1.end());\n    l1.erase(std::unique(l1.begin(),\
    \ l1.end()), l1.end());\n    std::sort(l2.begin(), l2.end());\n    l2.erase(std::unique(l2.begin(),\
    \ l2.end()), l2.end());\n    std::vector<long> result;\n    // compare both lists\
    \ at one iteration\n    for (int i = 0, j = 0; i < l1.size() && j < l2.size();)\
    \ {\n        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n   \
    \         i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n      \
    \      i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tlong\
    \ l1_size = l1.size();\n\tlong l2_size = l2.size();\n\tlong i = 0, j = 0;\n\t\
    std::vector<long> res;\n\twhile (i < l1_size && j < l2_size) {\n\t\tif (l1[i]\
    \ == l2[j]) {\n\t\t\tres.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\t\
    else if (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t\
    }\n\treturn res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpd4h1b4qg: /tmp/tmpd4h1b4qg.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> new_vector;\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(new_vector));\n\
    \    std::sort(new_vector.begin(), new_vector.end());\n    new_vector.erase(std::unique(new_vector.begin(),\
    \ new_vector.end()), new_vector.end());\n    return new_vector;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    // write your code here\n    int i = 0, j = 0;\n    while(i < l1.size()\
    \ && j < l2.size()) {\n        if(l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        }\n        else if(l1[i] < l2[j])\
    \ {\n            i++;\n        }\n        else {\n            j++;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpf4f2okkf: /tmp/tmpf4f2okkf.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ result;\n\tint len1 = l1.size();\n\tint len2 = l2.size();\n\tint i = 0, j =\
    \ 0;\n\twhile (i < len1 && j < len2) {\n\t\tif (l1[i] < l2[j]) {\n\t\t\ti++;\n\
    \t\t} else if (l1[i] > l2[j]) {\n\t\t\tj++;\n\t\t} else {\n\t\t\tresult.push_back(l1[i]);\n\
    \t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmrvml4l6: /tmp/tmpmrvml4l6.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::sort(l1.begin(),\
    \ l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tl1.erase(std::unique(l1.begin(),\
    \ l1.end()), l1.end());\n\tl2.erase(std::unique(l2.begin(), l2.end()), l2.end());\n\
    \tstd::vector<long> v3;\n\tstd::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(),\n\t\t\tstd::back_inserter(v3));\n\treturn v3;\n}\nint main() {\n \
    \   auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3,\
    \ 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  sort(l1.begin(),\
    \ l1.end());\n  sort(l2.begin(), l2.end());\n  std::vector<long> res;\n  std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(),\n            std::back_inserter(res));\n  return\
    \ res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> out;\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(out));\n\
    \    return out;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    int i = 0, j = 0;\n  \
    \  std::vector<long> res;\n    while (i < l1.size() && j < l2.size()) {\n    \
    \    if (l1[i] == l2[j]) {\n            res.push_back(l1[i]);\n            i++;\n\
    \            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n   \
    \     } else {\n            j++;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  //return\
    \ l1;\n  std::vector<long> result;\n  std::vector<long>::iterator it;\n  std::vector<long>::iterator\
    \ it2;\n  if(l1.size()<=l2.size()){\n    for(it=l1.begin();it!=l1.end();it++){\n\
    \      for(it2=l2.begin();it2!=l2.end();it2++){\n        if(*it==*it2){\n    \
    \      result.push_back(*it);\n        }\n      }\n    }\n  }\n  else{\n    for(it=l2.begin();it!=l2.end();it++){\n\
    \      for(it2=l1.begin();it2!=l1.end();it2++){\n        if(*it==*it2){\n    \
    \      result.push_back(*it);\n        }\n      }\n    }\n  }\n  std::sort(result.begin(),result.end());\n\
    \  result.erase(std::unique(result.begin(),result.end()),result.end());\n  return\
    \ result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> a;\n\
    \    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n       \
    \ if (l1[i] == l2[j]) {\n            a.push_back(l1[i]);\n            i++;\n \
    \           j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n    \
    \    } else {\n            j++;\n        }\n    }\n    return a;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::sort(l1.begin(),\
    \ l1.end());\n  std::sort(l2.begin(), l2.end());\n  int i = 0, j = 0;\n  std::vector<long>\
    \ l3;\n  while (i < l1.size() && j < l2.size()) {\n    if (l1[i] == l2[j]) {\n\
    \      l3.push_back(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j])\
    \ {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return l3;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ common = {};\n\t//sort both the lists\n\tstd::sort(l1.begin(), l1.end());\n\t\
    std::sort(l2.begin(), l2.end());\n\tint i = 0, j = 0;\n\twhile (i < l1.size()\
    \ && j < l2.size()) {\n\t\tif (l1[i] == l2[j]) {\n\t\t\tcommon.push_back(l1[i]);\n\
    \t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t\
    }\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn common;\n}\nint main() {\n   \
    \ auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3,\
    \ 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ commonItems;\n  if (l1.size() == 0 || l2.size() == 0) {\n    return commonItems;\n\
    \  }\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  int i = 0, j = 0;\n  int lastItem = -1;\n  while (i < l1.size() && j < l2.size())\
    \ {\n    if (l1[i] == l2[j]) {\n      if (l1[i] != lastItem) {\n        commonItems.push_back(l1[i]);\n\
    \        lastItem = l1[i];\n      }\n      i++;\n      j++;\n    } else if (l1[i]\
    \ < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return commonItems;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ res;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    for (long i = 0, j = 0; i < l1.size() && j < l2.size();) {\n        if (l1[i]\
    \ == l2[j]) {\n            res.push_back(l1[i]);\n            i++;\n         \
    \   j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        } else\
    \ {\n            j++;\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3,\
    \ 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ l3;\n\tint i = 0, j = 0;\n\twhile (i < l1.size() && j < l2.size()) {\n\t\tif\
    \ (l1[i] == l2[j]) {\n\t\t\tl3.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t\
    }\n\t\telse if (l1[i] < l2[j])\n\t\t\ti++;\n\t\telse\n\t\t\tj++;\n\t}\n\treturn\
    \ l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2ohjduf_: /tmp/tmp2ohjduf_.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> output;\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(output));\n\
    \    return output;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ res;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), inserter(res,\
    \ res.begin()));\n    return res;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ result;\n\tint size1 = l1.size();\n\tint size2 = l2.size();\n\tint index1 =\
    \ 0;\n\tint index2 = 0;\n\twhile(index1 < size1 && index2 < size2) {\n\t\tif(l1[index1]\
    \ == l2[index2]) {\n\t\t\tif(result.size() == 0 || result[result.size() - 1] !=\
    \ l1[index1]) {\n\t\t\t\tresult.push_back(l1[index1]);\n\t\t\t}\n\t\t\tindex1++;\n\
    \t\t\tindex2++;\n\t\t} else if(l1[index1] < l2[index2]) {\n\t\t\tindex1++;\n\t\
    \t} else {\n\t\t\tindex2++;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n \
    \   auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3,\
    \ 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn9a2qscc: /tmp/tmpn9a2qscc.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ common;\n    for(int i = 0; i < l1.size(); i++) {\n        for(int j = 0; j\
    \ < l2.size(); j++) {\n            if(l1[i] == l2[j]) {\n                common.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    std::sort(common.begin(), common.end());\n\
    \    common.erase(std::unique(common.begin(), common.end()), common.end());\n\
    \    return common;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ res;\n    for(long i=0;i<l1.size();i++){\n        for(long j=0;j<l2.size();j++){\n\
    \            if(l1[i]==l2[j]){\n                if(find(res.begin(),res.end(),l1[i])!=res.end()){\n\
    \                    continue;\n                }\n                res.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpv9wpk3s3: /tmp/tmpv9wpk3s3.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n   std::vector<long>\
    \ result;\n   sort(l1.begin(), l1.end());\n   sort(l2.begin(), l2.end());\n  \
    \ int i = 0, j = 0;\n   while (i < l1.size() && j < l2.size()) {\n       if (l1[i]\
    \ == l2[j]) {\n           result.push_back(l1[i]);\n           i++;\n        \
    \   j++;\n       } else if (l1[i] < l2[j]) {\n           i++;\n       } else {\n\
    \           j++;\n       }\n   }\n   return result;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ l3;\n  for(auto i:l1){\n    if(std::find(l2.begin(),l2.end(),i)!=l2.end()){\n\
    \      l3.push_back(i);\n    }\n  }\n  std::sort(l3.begin(),l3.end());\n  auto\
    \ it = std::unique(l3.begin(),l3.end());\n  l3.resize(std::distance(l3.begin(),it));\n\
    \  return l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ V;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(V));\n\
    \    return V;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ v;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(v));\n\
    \    return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ commonElements;\n    for(auto i: l1){\n        for(auto j: l2){\n          \
    \  if(i == j){\n                commonElements.push_back(i);\n            }\n\
    \        }\n    }\n    std::sort(commonElements.begin(), commonElements.end());\n\
    \    commonElements.erase(std::unique(commonElements.begin(), commonElements.end()),\
    \ commonElements.end());\n    return commonElements;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> res;\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n     \
    \                    std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ v3;\n  sort(l1.begin(), l1.end());\n  sort(l2.begin(), l2.end());\n  std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), back_inserter(v3));\n  std::vector<long>::iterator\
    \ it;\n  it = std::unique(v3.begin(), v3.end());\n  v3.resize(std::distance(v3.begin(),\
    \ it));\n  return v3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ l3;\n    for(int i=0;i<l1.size();i++){\n        for(int j=0;j<l2.size();j++){\n\
    \            if(l1[i]==l2[j]){\n                l3.push_back(l1[i]);\n       \
    \     }\n        }\n    }\n    std::sort(l3.begin(),l3.end());\n    l3.erase(std::unique(l3.begin(),l3.end()),l3.end());\n\
    \    return l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>::iterator\
    \ it1 = l1.begin();\n    std::vector<long>::iterator it2 = l2.begin();\n    std::vector<long>::iterator\
    \ it3 = l1.begin();\n    std::vector<long> ret;\n    sort(l1.begin(), l1.end());\n\
    \    sort(l2.begin(), l2.end());\n    while (it1 != l1.end() && it2 != l2.end())\
    \ {\n        if (*it1 == *it2) {\n            if (it3 == l1.begin() || *it1 !=\
    \ *it3) {\n                ret.push_back(*it1);\n                it3 = it1;\n\
    \            }\n            it1++;\n            it2++;\n        } else if (*it1\
    \ < *it2) {\n            it1++;\n        } else {\n            it2++;\n      \
    \  }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ res;\n    std::vector<long>::iterator a, b;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ res;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(res));\n\
    \  return res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n\
    \        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n       \
    \     i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n          \
    \  i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp90ce3c_z: /tmp/tmp90ce3c_z.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  sort(l1.begin(),\
    \ l1.end());\n  sort(l2.begin(), l2.end());\n  std::vector<long> res;\n  std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(),\n                        std::back_inserter(res));\n\
    \  return res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ l3;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(l3));\n\
    \  return l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    int\
    \ i = 0, j = 0;\n    int size1 = l1.size();\n    int size2 = l2.size();\n    std::vector<long>\
    \ res;\n    while (i < size1 && j < size2) {\n        if (l1[i] == l2[j]) {\n\
    \            res.push_back(l1[i]);\n            i++;\n            j++;\n     \
    \   } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n        \
    \    j++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpaisqxbd3: /tmp/tmpaisqxbd3.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n\
    \        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n       \
    \     ++i;\n            ++j;\n        } else if (l1[i] < l2[j]) {\n          \
    \  ++i;\n        } else {\n            ++j;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7e6n9ilj: /tmp/tmp7e6n9ilj.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ Implement me!\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::vector<long> result;\n    auto i1 = l1.begin();\n    auto\
    \ i2 = l2.begin();\n    while (i1 != l1.end() && i2 != l2.end()) {\n        if\
    \ (*i1 < *i2) {\n            i1++;\n        } else if (*i1 > *i2) {\n        \
    \    i2++;\n        } else {\n            result.push_back(*i1);\n           \
    \ i1++;\n            i2++;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ Add your code here\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::vector<long> result;\n    int i, j;\n    for(i = 0, j =\
    \ 0; i < l1.size() && j < l2.size();) {\n        if(l1[i] == l2[j]) {\n      \
    \      result.push_back(l1[i]);\n            i++;\n            j++;\n        }\n\
    \        else if(l1[i] < l2[j])\n            i++;\n        else\n            j++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    assert(l1.size()\
    \ > 0);\n    assert(l2.size() > 0);\n    std::vector<long> new_vector;\n    if\
    \ (l1.size() >= l2.size()) {\n        for (auto n : l1) {\n            for (auto\
    \ m : l2) {\n                if (n == m) {\n                    new_vector.push_back(n);\n\
    \                }\n            }\n        }\n    } else {\n        for (auto\
    \ n : l2) {\n            for (auto m : l1) {\n                if (n == m) {\n\
    \                    new_vector.push_back(n);\n                }\n           \
    \ }\n        }\n    }\n    std::sort(new_vector.begin(), new_vector.end());\n\
    \    auto last = std::unique(new_vector.begin(), new_vector.end());\n    new_vector.erase(last,\
    \ new_vector.end());\n    return new_vector;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpeiy6j0ja: /tmp/tmpeiy6j0ja.cpp:10: std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>): Assertion `l2.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ v;\n  long i, j;\n  for (i = 0; i < l1.size(); i++) {\n    if (std::find(l2.begin(),\
    \ l2.end(), l1[i]) != l2.end()) {\n      if (std::find(v.begin(), v.end(), l1[i])\
    \ == v.end()) {\n        v.push_back(l1[i]);\n      }\n    }\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::sort(l1.begin(),\
    \ l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tstd::vector<long> res;\n\t\
    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n\t\t\tstd::back_inserter(res));\n\
    \tstd::unique(res.begin(), res.end());\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ Sort the arrays, then iterate and find common elements.\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> result\
    \ = {};\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n\
    \                          std::back_inserter(result));\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ common_elements;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  for (std::vector<long>::iterator it = l1.begin(); it != l1.end();\
    \ ++it) {\n    std::vector<long>::iterator it2 = std::find(l2.begin(), l2.end(),\
    \ *it);\n    if (it2 != l2.end()) {\n      common_elements.push_back(*it);\n \
    \   }\n  }\n  return common_elements;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ result;\n\tint i, j;\n\tfor (i = 0, j = 0; i < l1.size() && j < l2.size();)\
    \ {\n\t\tif (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t} else if (l1[i] > l2[j]) {\n\t\
    \t\tj++;\n\t\t} else {\n\t\t\tif (result.size() == 0 || result.back() != l1[i])\
    \ {\n\t\t\t\tresult.push_back(l1[i]);\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmptu9m8uss: /tmp/tmptu9m8uss.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ result;\n  std::vector<long> copy_l1;\n  std::vector<long> copy_l2;\n  copy_l1\
    \ = l1;\n  copy_l2 = l2;\n  for (int i = 0; i < copy_l1.size(); i++) {\n    for\
    \ (int j = 0; j < copy_l2.size(); j++) {\n      if (copy_l1[i] == copy_l2[j])\
    \ {\n        result.push_back(copy_l1[i]);\n        copy_l1.erase(copy_l1.begin()\
    \ + i);\n        copy_l2.erase(copy_l2.begin() + j);\n        i = -1;\n      \
    \  break;\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5lj37aco: /tmp/tmp5lj37aco.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ data{};\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(data));\n\
    \    return data;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  // write\
    \ your code here\n  std::vector<long> l;\n  std::sort(l1.begin(),l1.end());\n\
    \  std::sort(l2.begin(),l2.end());\n  std::set_intersection(l1.begin(),l1.end(),l2.begin(),l2.end(),std::back_inserter(l));\n\
    \  l.erase(unique(l.begin(),l.end()),l.end());\n  return l;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4,\
    \ 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ l;\n    for(auto i = l1.begin(); i != l1.end(); i++) {\n        for(auto j =\
    \ l2.begin(); j != l2.end(); j++) {\n            if(*i == *j)\n              \
    \  l.push_back(*i);\n        }\n    }\n    std::sort(l.begin(), l.end());\n  \
    \  l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ v;\n    for(int i=0;i<l1.size();i++){\n        for(int j=0;j<l2.size();j++){\n\
    \            if(l1[i]==l2[j])\n                v.push_back(l1[i]);\n        }\n\
    \    }\n    std::sort(v.begin(),v.end());\n    v.erase(std::unique(v.begin(),v.end()),v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  // write\
    \ your code here\n  int i=0,j=0;\n  std::vector<long> result;\n  while(i<l1.size()\
    \ && j<l2.size())\n  {\n    if(l1[i]==l2[j])\n    {\n      result.push_back(l1[i]);\n\
    \      i++;\n      j++;\n    }\n    else if(l1[i]<l2[j])\n    {\n      i++;\n\
    \    }\n    else\n    {\n      j++;\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_3bu4hvn: /tmp/tmp_3bu4hvn.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    // Your code here\n    int i = 0, j = 0;\n    while(i < l1.size() && j <\
    \ l2.size()) {\n        if(l1[i] < l2[j]) {\n            i++;\n        } else\
    \ if(l1[i] > l2[j]) {\n            j++;\n        } else {\n            result.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ sorted1 = l1;\n  std::vector<long> sorted2 = l2;\n  std::sort(sorted1.begin(),\
    \ sorted1.end());\n  std::sort(sorted2.begin(), sorted2.end());\n  std::vector<long>\
    \ result;\n  std::set_intersection(sorted1.begin(), sorted1.end(), sorted2.begin(),\
    \ sorted2.end(), std::back_inserter(result));\n  return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //edge\
    \ cases\n    if(l1.size() == 0)\n        return l1;\n    if(l2.size() == 0)\n\
    \        return l2;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n\
    \    std::vector<long> unique_list;\n    for(int i = 0; i < l1.size(); i++){\n\
    \        for(int j = 0; j < l2.size(); j++){\n            if(l1[i] == l2[j]){\n\
    \                if(find(unique_list.begin(), unique_list.end(), l1[i]) == unique_list.end()){\n\
    \                    unique_list.push_back(l1[i]);\n                }\n      \
    \      }\n        }\n    }\n    return unique_list;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ TODO\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    assert(false);\n\
    \    return std::vector<long>();\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpf8qoa4e5: /tmp/tmpf8qoa4e5.cpp:9: std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>): Assertion `false' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    sort(l1.begin(),\
    \ l1.end());\n    sort(l2.begin(), l2.end());\n    l1.erase(unique(l1.begin(),\
    \ l1.end()), l1.end());\n    l2.erase(unique(l2.begin(), l2.end()), l2.end());\n\
    \    std::vector<long> l3;\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(),\
    \ l2.end(),\n                          std::back_inserter(l3));\n    return l3;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ common_elements;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n\
    \    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), back_inserter(common_elements));\n\
    \    return common_elements;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> l3;\n\
    \    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n       \
    \ if (l1[i] == l2[j]) {\n            l3.push_back(l1[i]);\n            i++;\n\
    \            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n   \
    \     } else {\n            j++;\n        }\n    }\n    return l3;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::sort(l1.begin(),\
    \ l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tstd::vector<long> result;\n\
    \tint i = 0, j = 0;\n\twhile (i < l1.size() && j < l2.size()) {\n\t\tif (l1[i]\
    \ == l2[j]) {\n\t\t\tresult.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\
    \t\telse if (l1[i] < l2[j])\n\t\t\ti++;\n\t\telse\n\t\t\tj++;\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> out;\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(out));\n\
    \    return out;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    int\
    \ n = l1.size();\n    int m = l2.size();\n    // sanity check\n    assert(n >\
    \ 0 && m > 0);\n    std::vector<long> result;\n    // sort both lists\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    // i for l1, j for l2\n\
    \    int i = 0, j = 0;\n    while (i < n && j < m) {\n        if (l1[i] == l2[j])\
    \ {\n            // common\n            result.push_back(l1[i]);\n           \
    \ i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            //\
    \ l1 is smaller\n            i++;\n        } else {\n            // l2 is smaller\n\
    \            j++;\n        }\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3,\
    \ 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0eyoom05: /tmp/tmp0eyoom05.cpp:12: std::vector<long int> common(std::vector<long\
    \ int>, std::vector<long int>): Assertion `n > 0 && m > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n\
    \        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n       \
    \     i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n          \
    \  i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpir3ynbap: /tmp/tmpir3ynbap.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ v;\n    return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphdc7q8fv: /tmp/tmphdc7q8fv.cpp:14: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n   std::vector<long>\
    \ result;\n   std::sort(l1.begin(), l1.end());\n   std::sort(l2.begin(), l2.end());\n\
    \   std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \   return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> result;\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ v1, v2;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(v1));\n\
    \    return v1;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ vec;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n  std::back_inserter(vec));\n\
    \  return vec;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::sort(l1.begin(),\
    \ l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::vector<long> result;\n\
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n       \
    \                 std::back_inserter(result));\n  return result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ result;\n\tstd::set<long> s(l1.begin(), l1.end());\n\tfor (int i = 0; i < l2.size();\
    \ i++) {\n\t\tif (s.find(l2[i]) != s.end()) {\n\t\t\tresult.push_back(l2[i]);\n\
    \t\t}\n\t}\n\tstd::sort(result.begin(), result.end());\n\treturn result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpr5sc5kw6: /tmp/tmpr5sc5kw6.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ res;\n  for (size_t i = 0; i < l1.size(); i++) {\n    for (size_t j = 0; j <\
    \ l2.size(); j++) {\n      if (l1[i] == l2[j]) {\n        res.push_back(l1[i]);\n\
    \      }\n    }\n  }\n  std::sort(res.begin(), res.end());\n  res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n  return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ ret;\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n\
    \        if (l1[i] == l2[j]) {\n            ret.push_back(l1[i]);\n          \
    \  i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n\
    \        } else {\n            j++;\n        }\n    }\n    return ret;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp4u26fk21: /tmp/tmp4u26fk21.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ ret;\n    int i, j;\n    for (i = 0, j = 0; i < l1.size() && j < l2.size();)\
    \ {\n        if (l1[i] == l2[j]) {\n            ret.push_back(l1[i]);\n      \
    \      i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n         \
    \   i++;\n        } else {\n            j++;\n        }\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8n1smk_j: /tmp/tmp8n1smk_j.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> out;\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(out));\n\
    \    return out;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ Write your code here\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::vector<long> res;\n    auto it1 = l1.begin();\n    auto\
    \ it2 = l2.begin();\n    while(it1 != l1.end() && it2 != l2.end()) {\n       \
    \ if(*it1 == *it2) {\n            res.push_back(*it1);\n            ++it1;\n \
    \           ++it2;\n        } else if(*it1 < *it2) {\n            ++it1;\n   \
    \     } else {\n            ++it2;\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ common;\n    int i = 0, j = 0;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i]\
    \ == l2[j]) {\n            common.push_back(l1[i]);\n            i++;\n      \
    \      j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n        }\
    \ else {\n            j++;\n        }\n    }\n    return common;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  // sort\
    \ both lists\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::vector<long> l3;\n  for (auto i : l1) {\n    for (auto j : l2) {\n   \
    \   if (i == j) {\n        l3.push_back(i);\n      }\n    }\n  }\n  return l3;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpu5c5kgu1: /tmp/tmpu5c5kgu1.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    for(int i=0;i<l1.size();i++){\n        for(int j=0;j<l2.size();j++){\n\
    \            if(l1[i]==l2[j]){\n                result.push_back(l1[i]);\n   \
    \         }\n        }\n    }\n    sort(result.begin(),result.end());\n    result.erase(unique(result.begin(),result.end()),result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ ret;\n    int sz = l1.size();\n    for(int i = 0; i < sz; i++) {\n        if(std::find(l2.begin(),\
    \ l2.end(), l1[i]) != l2.end()) {\n            ret.push_back(l1[i]);\n       \
    \ }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = common;\n \
    \   assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpuhuex3lr: /tmp/tmpuhuex3lr.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ l3;\n\tint i = 0, j = 0;\n\twhile (i < l1.size() && j < l2.size()) {\n\t\tif\
    \ (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t}\n\t\telse if (l1[i] > l2[j]) {\n\t\t\t\
    j++;\n\t\t}\n\t\telse {\n\t\t\tif (l3.size() == 0 || l3[l3.size() - 1] != l1[i])\
    \ {\n\t\t\t\tl3.push_back(l1[i]);\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\
    }\n\treturn l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzjf9sql6: /tmp/tmpzjf9sql6.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> result;\n\
    \    set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ Your Code Here\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::vector<long> ans;\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(ans));\n    return ans;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\t// make\
    \ a copy of the input vector\n\t// https://stackoverflow.com/questions/13694170/can-i-change-elements-of-a-vector-while-iterating-over-it\n\
    \t// this is to prevent sorting of input\n\tstd::vector<long> copy_l1 = l1;\n\t\
    std::vector<long> copy_l2 = l2;\n\t// sort both vectors\n\tstd::sort(copy_l1.begin(),\
    \ copy_l1.end());\n\tstd::sort(copy_l2.begin(), copy_l2.end());\n\t// get common\
    \ elements\n\tstd::vector<long> common_vec;\n\tstd::set_intersection(copy_l1.begin(),\
    \ copy_l1.end(), copy_l2.begin(), copy_l2.end(), std::back_inserter(common_vec));\n\
    \treturn common_vec;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ write your python code here\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(),\
    \ l2.end());\n    int p1 = 0, p2 = 0;\n    std::vector<long> result;\n    while\
    \ (p1 < l1.size() && p2 < l2.size()) {\n        if (l1[p1] == l2[p2]) {\n    \
    \        result.push_back(l1[p1]);\n            p1++;\n            p2++;\n   \
    \     } else if (l1[p1] < l2[p2]) {\n            p1++;\n        } else {\n   \
    \         p2++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    \n\
    \    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::vector<long> result;\n    int i = 0, j = 0;\n    while(i < l1.size()\
    \ && j < l2.size()) {\n        if(l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n\
    \            i++;\n            j++;\n        }\n        else if(l1[i] < l2[j])\
    \ {\n            i++;\n        }\n        else {\n            j++;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = common;\n  \
    \  assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    sort(l1.begin(),\
    \ l1.end());\n    sort(l2.begin(), l2.end());\n    std::vector<long> l3;\n   \
    \ std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(l3));\n\
    \    return l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ res;\n    std::vector<long> l1_sorted = l1;\n    std::vector<long> l2_sorted\
    \ = l2;\n    std::sort(l1_sorted.begin(), l1_sorted.end());\n    std::sort(l2_sorted.begin(),\
    \ l2_sorted.end());\n    std::set_intersection(l1_sorted.begin(), l1_sorted.end(),\
    \ l2_sorted.begin(), l2_sorted.end(), std::back_inserter(res));\n    return res;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::sort(l1.begin(),\
    \ l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tstd::vector<long> result;\n\
    \tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \treturn result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::sort(l1.begin(),\
    \ l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::vector<long> result;\n\
    \  for (std::vector<long>::iterator i = l1.begin(), j = l2.begin(); i != l1.end()\
    \ && j != l2.end(); ) {\n    if (*i == *j) {\n      result.push_back(*i);\n  \
    \    i++;\n      j++;\n    } else if (*i < *j) {\n      i++;\n    } else {\n \
    \     j++;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ v;\n\tif(l1.size()==0||l2.size()==0)\n\t\treturn v;\n\tsort(l1.begin(),l1.end());\n\
    \tsort(l2.begin(),l2.end());\n\tint i=0,j=0;\n\twhile(i<l1.size()&&j<l2.size()){\n\
    \t\tif(l1[i]==l2[j]){\n\t\t\tv.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t\
    }\n\t\telse if(l1[i]<l2[j])\n\t\t\ti++;\n\t\telse\n\t\t\tj++;\n\t}\n\treturn v;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  // TODO:\
    \ Write - Your - Code\n  std::vector<long> res;\n  if(l1.size()==0 || l2.size()==0)\n\
    \    return res;\n  std::sort(l1.begin(),l1.end());\n  std::sort(l2.begin(),l2.end());\n\
    \  for(int i=0;i<l1.size();i++)\n  {\n    for(int j=0;j<l2.size();j++)\n    {\n\
    \      if(l1[i]==l2[j])\n      {\n        res.push_back(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  std::sort(res.begin(),res.end());\n  return res;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ ans;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tint i = 0, j = 0;\n\twhile (i < l1.size() && j < l2.size()) {\n\t\tif (l1[i]\
    \ == l2[j]) {\n\t\t\tans.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\t\
    else if (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t\
    }\n\treturn ans;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n\
    \        if (l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n       \
    \     i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n          \
    \  i++;\n        } else {\n            j++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7bsa03ne: /tmp/tmp7bsa03ne.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tif (l1.size()\
    \ == 0 || l2.size() == 0) {\n\t\treturn {};\n\t}\n\tstd::vector<long> res;\n\t\
    std::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tint i\
    \ = 0, j = 0;\n\twhile (i < l1.size() && j < l2.size()) {\n\t\tif (l1[i] == l2[j])\
    \ {\n\t\t\tres.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if (l1[i]\
    \ < l2[j]) {\n\t\t\ti++;\n\t\t}\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ initialize vector\n    std::vector<long> answer;\n    // check to make sure\
    \ lists aren't empty\n    if(l1.size() == 0 || l2.size() == 0) {\n        return\
    \ answer;\n    }\n    // sort lists\n    std::sort(l1.begin(), l1.end());\n  \
    \  std::sort(l2.begin(), l2.end());\n    // initialize indexes for both lists\n\
    \    int index1 = 0;\n    int index2 = 0;\n    // while loop to iterate through\
    \ both lists\n    while(index1 < l1.size() && index2 < l2.size()) {\n        //\
    \ check if list1 index is greater than list2\n        if(l1[index1] > l2[index2])\
    \ {\n            // if so, increase list2 index\n            index2++;\n     \
    \   }\n        // check if list2 index is greater than list1\n        else if(l2[index2]\
    \ > l1[index1]) {\n            // if so, increase list1 index\n            index1++;\n\
    \        }\n        // otherwise, they must be equal, so push value onto answer\
    \ vector\n        else {\n            answer.push_back(l1[index1]);\n        \
    \    // increase indexes\n            index1++;\n            index2++;\n     \
    \   }\n    }\n    // return answer vector\n    return answer;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4,\
    \ 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ res;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n       \
    \                 std::back_inserter(res));\n  return res;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4,\
    \ 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ result;\n\tfor (auto i = l1.begin(); i != l1.end(); i++) {\n\t\tif (std::find(l2.begin(),\
    \ l2.end(), *i) != l2.end()) {\n\t\t\tif (std::find(result.begin(), result.end(),\
    \ *i) == result.end()) {\n\t\t\t\tresult.push_back(*i);\n\t\t\t}\n\t\t}\n\t}\n\
    \tstd::sort(result.begin(), result.end());\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4,\
    \ 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ result;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \  return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    sort(l1.begin(),\
    \ l1.end());\n    sort(l2.begin(), l2.end());\n    std::vector<long> result;\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ s1, s2;\n\tstd::vector<long> result;\n\tlong i;\n\tlong size1 = l1.size();\n\
    \tlong size2 = l2.size();\n\tfor (i = 0; i < size1; i++) {\n\t\tif (std::find(s1.begin(),\
    \ s1.end(), l1[i]) == s1.end()) {\n\t\t\ts1.push_back(l1[i]);\n\t\t}\n\t}\n\t\
    for (i = 0; i < size2; i++) {\n\t\tif (std::find(s2.begin(), s2.end(), l2[i])\
    \ == s2.end()) {\n\t\t\ts2.push_back(l2[i]);\n\t\t}\n\t}\n\tstd::sort(s1.begin(),\
    \ s1.end());\n\tstd::sort(s2.begin(), s2.end());\n\tlong index1 = 0;\n\tlong index2\
    \ = 0;\n\twhile (index1 < s1.size() && index2 < s2.size()) {\n\t\tif (s1[index1]\
    \ == s2[index2]) {\n\t\t\tresult.push_back(s1[index1]);\n\t\t\tindex1++;\n\t\t\
    \tindex2++;\n\t\t}\n\t\telse if (s1[index1] < s2[index2]) {\n\t\t\tindex1++;\n\
    \t\t}\n\t\telse {\n\t\t\tindex2++;\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ l3;\n\tsort(l1.begin(), l1.end());\n\tsort(l2.begin(), l2.end());\n\tset_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), back_inserter(l3));\n\treturn l3;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ ans;\n  for(long i=0;i<l1.size();i++){\n    for(long j=0;j<l2.size();j++){\n\
    \      if(l1[i]==l2[j]){\n        ans.push_back(l1[i]);\n      }\n    }\n  }\n\
    \  std::sort(ans.begin(),ans.end());\n  ans.erase(std::unique(ans.begin(),ans.end()),ans.end());\n\
    \  return ans;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ output;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(output));\n\
    \    return output;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>result;\n\
    \    if(l1.size()==0 || l2.size()==0) return result;\n    std::sort(l1.begin(),l1.end());\n\
    \    std::sort(l2.begin(),l2.end());\n    int idx1 = 0;\n    int idx2 = 0;\n \
    \   while(idx1<l1.size() && idx2<l2.size()){\n        if(l1[idx1]==l2[idx2]){\n\
    \            result.push_back(l1[idx1]);\n            idx1++;\n            idx2++;\n\
    \        }\n        else if(l1[idx1]>l2[idx2]){\n            idx2++;\n       \
    \ }\n        else{\n            idx1++;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ Your code here.\n    std::vector<long> result;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(result));\n    return result;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ your code here\n    std::vector<long> v;\n    std::sort(l1.begin(), l1.end());\n\
    \    std::sort(l2.begin(), l2.end());\n    std::set_intersection(l1.begin(), l1.end(),\
    \ l2.begin(), l2.end(), std::back_inserter(v));\n    return v;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ res;\n  std::unordered_map<long, int> m;\n  for (auto i : l1) {\n    m[i]++;\n\
    \  }\n  for (auto i : l2) {\n    if (m[i] > 0) {\n      res.push_back(i);\n  \
    \    m[i] = 0;\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp67020_am: /tmp/tmp67020_am.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ c;\n    std::set<long> s1, s2;\n    for (long i = 0; i < l1.size(); i++)\n \
    \       s1.insert(l1[i]);\n    for (long i = 0; i < l2.size(); i++)\n        s2.insert(l2[i]);\n\
    \    std::set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), std::inserter(c,\
    \ c.begin()));\n    return c;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ Sort and remove dupes\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::vector<long>::iterator it;\n    it = std::unique(l1.begin(),\
    \ l1.end());\n    l1.resize(std::distance(l1.begin(), it));\n    it = std::unique(l2.begin(),\
    \ l2.end());\n    l2.resize(std::distance(l2.begin(), it));\n    // Common elements\
    \ between two sorted vectors.\n    std::vector<long> v;\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(v));\n    return v;\n}\n\
    int main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ list_;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n       \
    \                 std::back_inserter(list_));\n  return list_;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ vec;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n   \
    \ std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(vec));\n\
    \    std::sort(vec.begin(), vec.end());\n    vec.erase(std::unique(vec.begin(),\
    \ vec.end()), vec.end());\n    return vec;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ l3;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(l3));\n\
    \    return l3;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ result;\n\tif (l1.size() < l2.size()) {\n\t\tfor (auto l : l1) {\n\t\t\tfor\
    \ (auto r : l2) {\n\t\t\t\tif (l == r) {\n\t\t\t\t\tresult.push_back(l);\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor (auto l : l2) {\n\t\t\tfor (auto\
    \ r : l1) {\n\t\t\t\tif (l == r) {\n\t\t\t\t\tresult.push_back(l);\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\tstd::sort(result.begin(), result.end());\n\tauto it = std::unique(result.begin(),\
    \ result.end());\n\tresult.resize(std::distance(result.begin(), it));\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ For given set of elements find intersection between them.\n    std::vector<long>\
    \ comm_elements;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n\
    \                          std::back_inserter(comm_elements));\n    return comm_elements;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    if(l1.size()==0\
    \ || l2.size()==0) return {};\n    std::vector<long>::iterator it1, it2;\n   \
    \ std::vector<long> res;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    it1 = l1.begin();\n    it2 = l2.begin();\n    while(it1 != l1.end()\
    \ && it2 != l2.end()){\n        if(*it1 == *it2){\n            res.push_back(*it1);\n\
    \            it1++;\n            it2++;\n        }\n        else if(*it1 > *it2){\n\
    \            it2++;\n        }\n        else if(*it1 < *it2){\n            it1++;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\t// TODO:\
    \ Implement me!\n\treturn {};\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpr3k3li7o: /tmp/tmpr3k3li7o.cpp:14: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tsort(l1.begin(),\
    \ l1.end());\n\tsort(l2.begin(), l2.end());\n\tstd::vector<long> l3;\n\tstd::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(),\n\t\t\tstd::back_inserter(l3));\n\treturn l3;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ l;\n\tsort(l1.begin(), l1.end());\n\tsort(l2.begin(), l2.end());\n\tset_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), back_inserter(l));\n\tl.erase(unique(l.begin(),\
    \ l.end()), l.end());\n\treturn l;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ sort l1 and l2\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::vector<long> results;\n    // Move two pointers, if the\
    \ numbers are equal, add the number to the results.\n    int i = 0, j = 0;\n \
    \   while (i < l1.size() && j < l2.size()) {\n        if (l1[i] == l2[j]) {\n\
    \            results.push_back(l1[i]);\n            i++;\n            j++;\n \
    \       } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n    \
    \        j++;\n        }\n    }\n    return results;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ res;\n  for (long i = 0; i < l1.size(); i++) {\n    for (long j = 0; j < l2.size();\
    \ j++) {\n      if (l1[i] == l2[j]) {\n        res.push_back(l1[i]);\n      }\n\
    \    }\n  }\n  std::sort(res.begin(), res.end());\n  std::vector<long> res2;\n\
    \  for (int i = 0; i < res.size(); i++) {\n    if (res[i] != res[i - 1]) {\n \
    \     res2.push_back(res[i]);\n    }\n  }\n  return res2;\n}\nint main() {\n \
    \   auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3,\
    \ 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ res;\n    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n\
    \        if (l1[i] == l2[j]) {\n            res.push_back(l1[i]);\n          \
    \  ++i;\n            ++j;\n        } else if (l1[i] < l2[j]) {\n            ++i;\n\
    \        } else {\n            ++j;\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0cizn0oq: /tmp/tmp0cizn0oq.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ ans;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n   \
    \ int j = 0;\n    for(int i = 0; i < l1.size(); i++) {\n        while(j < l2.size()\
    \ && l2[j] < l1[i])\n            j++;\n        if(j < l2.size() && l2[j] == l1[i])\
    \ {\n            ans.push_back(l2[j]);\n            j++;\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ l;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(l));\n\
    \  return l;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ res;\n    std::vector<long>::iterator ptr1 = l1.begin();\n    std::vector<long>::iterator\
    \ ptr2 = l2.begin();\n    std::vector<long>::iterator it1 = l1.begin();\n    std::vector<long>::iterator\
    \ it2 = l2.begin();\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(),\
    \ l2.end());\n    std::unordered_set<long> s;\n    while (ptr1 != l1.end() &&\
    \ ptr2 != l2.end()) {\n        if (*ptr1 == *ptr2) {\n            if (s.find(*ptr1)\
    \ == s.end()) {\n                res.push_back(*ptr1);\n                s.insert(*ptr1);\n\
    \            }\n            ptr1++;\n            ptr2++;\n        } else if (*ptr1\
    \ < *ptr2) {\n            ptr1++;\n        } else {\n            ptr2++;\n   \
    \     }\n    }\n    return res;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  // Sort\
    \ both lists.\n  sort(l1.begin(), l1.end());\n  sort(l2.begin(), l2.end());\n\
    \  std::vector<long> out;\n  // Initialize both index pointers to start of list.\n\
    \  int i = 0;\n  int j = 0;\n  // Loop until end of one list, then check for common\
    \ elements.\n  while (i < l1.size() && j < l2.size()) {\n    if (l1[i] == l2[j])\
    \ {\n      // Append if element is common, then advance both index pointers.\n\
    \      out.push_back(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j])\
    \ {\n      // Advance index pointers on short list.\n      i++;\n    } else {\n\
    \      j++;\n    }\n  }\n  return out;\n}\nint main() {\n    auto candidate =\
    \ common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::sort(l1.begin(),\
    \ l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::vector<long> ans;\n \
    \ std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(ans));\n\
    \  return ans;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ res;\n\tfor (auto it = l1.begin(); it != l1.end(); it++) {\n\t\tfor (auto it2\
    \ = l2.begin(); it2 != l2.end(); it2++) {\n\t\t\tif (*it == *it2) {\n\t\t\t\t\
    res.push_back(*it);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpstouu0cx: /tmp/tmpstouu0cx.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ new_vec;\n    for(long i = 0; i < l1.size(); i++) {\n        for(long j = 0;\
    \ j < l2.size(); j++) {\n            if(l1[i] == l2[j]) {\n                new_vec.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    return new_vec;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn88rmfrf: /tmp/tmpn88rmfrf.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ v;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(v));\n\
    \tv.erase(std::unique(v.begin(), v.end()), v.end());\n\treturn v;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    for (int i = 0; i < l1.size(); i++) {\n        for (int j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n\
    \                l2.erase(l2.begin() + j);\n                break;\n         \
    \   }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ common;\n  // sort and remove duplicates\n  std::sort(l1.begin(), l1.end());\n\
    \  l1.erase(std::unique(l1.begin(), l1.end()), l1.end());\n  std::sort(l2.begin(),\
    \ l2.end());\n  l2.erase(std::unique(l2.begin(), l2.end()), l2.end());\n  std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(),\n                        std::back_inserter(common));\n\
    \  return common;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ out;\n\t//time complexity O(n^2)\n\t// for (auto it1 = l1.begin(); it1 != l1.end();\
    \ it1++) {\n\t// \tauto it2 = l2.begin();\n\t// \twhile (it2 != l2.end()) {\n\t\
    // \t\tif (*it1 == *it2) {\n\t// \t\t\tout.push_back(*it1);\n\t// \t\t\tl2.erase(it2);\n\
    \t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tit2++;\n\t// \t}\n\t// }\n\t//time complexity\
    \ O(n log n)\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(out));\n\
    \treturn out;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::sort(l1.begin(),\
    \ l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::vector<long> v;\n  std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(v));\n  return v;\n}\nint\
    \ main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ v;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(v));\n\
    \    return v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ res;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n     \
    \                     std::back_inserter(res));\n    return res;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ v;\n\t// std::vector<long> v1;\n\tint n = l1.size();\n\tint m = l2.size();\n\
    \tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\tfor\
    \ (int i = 0; i < n; i++) {\n\t\tint j = 0;\n\t\twhile (j < m) {\n\t\t\tif (l1[i]\
    \ == l2[j]) {\n\t\t\t\tv.push_back(l1[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\
    \t\t}\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ list1 = l1;\n    std::vector<long> list2 = l2;\n    std::vector<long> common_list;\n\
    \    std::sort(list1.begin(), list1.end());\n    std::sort(list2.begin(), list2.end());\n\
    \    std::set_intersection(list1.begin(), list1.end(), list2.begin(), list2.end(),\
    \ std::back_inserter(common_list));\n    return common_list;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4,\
    \ 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::sort(l1.begin(),\
    \ l1.end());\n    std::sort(l2.begin(), l2.end());\n    std::vector<long> res;\n\
    \    int p1 = 0, p2 = 0;\n    while (p1 < l1.size() && p2 < l2.size()) {\n   \
    \     if (l1[p1] == l2[p2]) {\n            res.push_back(l1[p1]);\n          \
    \  p1++;\n            p2++;\n        } else if (l1[p1] < l2[p2]) {\n         \
    \   p1++;\n        } else {\n            p2++;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    //\
    \ your code here\n\n    int i,j;\n    std::vector<long> v;\n    std::vector<long>\
    \ k;\n    for(i=0;i<l1.size();i++)\n    {\n        for(j=0;j<l2.size();j++)\n\
    \        {\n            if(l1[i]==l2[j])\n            {\n                v.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    \n    \n    \n    \n    \n   sort(v.begin(),v.end());\n\
    \   auto it=std::unique(v.begin(),v.end());\n    v.resize(std::distance(v.begin(),it));\n\
    \    \n    \n    \n    \n    \n    \n    return v;\n\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  // your\
    \ code here\n  std::vector<long> res;\n  for(int i=0;i<l1.size();i++){\n    for(int\
    \ j=0;j<l2.size();j++){\n      if(l1[i]==l2[j])\n        res.push_back(l1[i]);\n\
    \    }\n  }\n  std::sort(res.begin(),res.end());\n  std::vector<long>::iterator\
    \ ip;\n  ip = std::unique(res.begin(), res.end());\n  res.resize(std::distance(res.begin(),\
    \ ip));\n  return res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ ans;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    int i = 0, j = 0;\n    while (i < l1.size() && j < l2.size()) {\n       \
    \ if (l1[i] == l2[j]) {\n            ans.push_back(l1[i]);\n            i++;\n\
    \            j++;\n        } else if (l1[i] < l2[j]) {\n            i++;\n   \
    \     } else {\n            j++;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ sorted_common;\n    sort(l1.begin(), l1.end());\n    sort(l2.begin(), l2.end());\n\
    \    for (int i = 0; i < l1.size(); i++) {\n        for (int j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                sorted_common.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    return sorted_common;\n}\nint main() {\n\
    \    auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4,\
    \ 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpt2ibn_j1: /tmp/tmpt2ibn_j1.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ result;\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\
    \    std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  // sort\
    \ 2 vectors\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  // find common elem\n  std::vector<long> res;\n  int i = 0, j = 0;\n  while\
    \ (i < l1.size() && j < l2.size()) {\n    if (l1[i] == l2[j]) {\n      res.push_back(l1[i]);\n\
    \      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else\
    \ {\n      j++;\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tint\
    \ i = 0, j = 0;\n\tstd::vector<long> result;\n\twhile (i < l1.size() && j < l2.size())\
    \ {\n\t\tif (l1[i] < l2[j]) {\n\t\t\ti++;\n\t\t} else if (l1[i] > l2[j]) {\n\t\
    \t\tj++;\n\t\t} else {\n\t\t\tresult.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5y7sxi62: /tmp/tmp5y7sxi62.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>::iterator\
    \ it;\n\tstd::vector<long> commonVector;\n\tstd::sort(l1.begin(), l1.end());\n\
    \tstd::sort(l2.begin(), l2.end());\n\t// create a set of elements of 1 vector\n\
    \tstd::set<long> s1(l1.begin(), l1.end());\n\tfor (it = l2.begin(); it != l2.end();\
    \ it++) {\n\t\tif (s1.find(*it) != s1.end()) {\n\t\t\tcommonVector.push_back(*it);\n\
    \t\t}\n\t}\n\treturn commonVector;\n}\nint main() {\n    auto candidate = common;\n\
    \    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})), (std::vector<long>({5,\
    \ 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5, 653})));\n    assert(candidate((std::vector<long>({5,\
    \ 3, 2, 8})), (std::vector<long>({3, 2}))) == (std::vector<long>({2, 3})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>({3,\
    \ 2, 4}))) == (std::vector<long>({2, 3, 4})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqpfzt9zs: /tmp/tmpqpfzt9zs.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ res;\n  std::vector<long> short_list, long_list;\n  if (l1.size() > l2.size())\
    \ {\n    short_list = l2;\n    long_list = l1;\n  } else {\n    short_list = l1;\n\
    \    long_list = l2;\n  }\n  for (int i = 0; i < short_list.size(); i++) {\n \
    \   int j = 0;\n    while (j < long_list.size()) {\n      if (short_list[i] ==\
    \ long_list[j]) {\n        res.push_back(short_list[i]);\n        break;\n   \
    \   }\n      j++;\n    }\n  }\n  std::sort(res.begin(), res.end());\n  res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n  return res;\n}\nint main() {\n    auto candidate\
    \ = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653, 2, 5})),\
    \ (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1, 5,\
    \ 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ commonEle;\n\tsort(l1.begin(), l1.end());\n\tsort(l2.begin(), l2.end());\n\t\
    int i = 0, j = 0;\n\twhile (i < l1.size() && j < l2.size()) {\n\t\tif (l1[i] ==\
    \ l2[j]) {\n\t\t\tcommonEle.push_back(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\
    \t\telse if (l1[i] < l2[j])\n\t\t\ti++;\n\t\telse\n\t\t\tj++;\n\t}\n\treturn commonEle;\n\
    }\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::sort(l1.begin(),\
    \ l1.end());\n  std::sort(l2.begin(), l2.end());\n  std::vector<long> res;\n \
    \ std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n        \
    \                std::back_inserter(res));\n  return res;\n}\nint main() {\n \
    \   auto candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3,\
    \ 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    std::vector<long>\
    \ res;\n    int j=0;\n    for(int i=0;i<l1.size();i++){\n        if(l1[i]==l2[j]){\n\
    \            res.push_back(l1[i]);\n            j++;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpm497d7ut: /tmp/tmpm497d7ut.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n\tstd::vector<long>\
    \ result;\n\tstd::sort(l1.begin(), l1.end());\n\tstd::sort(l2.begin(), l2.end());\n\
    \tstd::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(), std::back_inserter(result));\n\
    \treturn result;\n}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({1,\
    \ 4, 3, 34, 653, 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
    \ elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\n\
    std::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n  std::vector<long>\
    \ s;\n  std::sort(l1.begin(), l1.end());\n  std::sort(l2.begin(), l2.end());\n\
    \  std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\n       \
    \                 std::back_inserter(s));\n  return s;\n}\nint main() {\n    auto\
    \ candidate = common;\n    assert(candidate((std::vector<long>({1, 4, 3, 34, 653,\
    \ 2, 5})), (std::vector<long>({5, 7, 1, 5, 9, 653, 121}))) == (std::vector<long>({1,\
    \ 5, 653})));\n    assert(candidate((std::vector<long>({5, 3, 2, 8})), (std::vector<long>({3,\
    \ 2}))) == (std::vector<long>({2, 3})));\n    assert(candidate((std::vector<long>({4,\
    \ 3, 2, 8})), (std::vector<long>({3, 2, 4}))) == (std::vector<long>({2, 3, 4})));\n\
    \    assert(candidate((std::vector<long>({4, 3, 2, 8})), (std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
