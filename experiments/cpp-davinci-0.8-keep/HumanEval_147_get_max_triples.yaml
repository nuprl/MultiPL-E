name: HumanEval_147_get_max_triples
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
  \ integer n. You have to create an integer array a of length n.\n// For each i (1\
  \ \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of\
  \ triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is\
  \ a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
  \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
  \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
  \    assert(candidate((100)) == (53361));\n}\n"
completions: ["    if(n < 3)\n        return 0;\n    long count = 0;\n    for(long\
    \ i = 1; i < n - 1; i++) {\n        for(long j = i + 1; j < n; j++) {\n      \
    \      if((i * i - i + 1 + j * j - j + 1) % 3 == 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "\tlong sum = 0;\n\tfor\
    \ (long i = 1; i <= n - 2; i++) {\n\t\tfor (long j = i + 1; j <= n - 1; j++) {\n\
    \t\t\tfor (long k = j + 1; k <= n; k++) {\n\t\t\t\tif ((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) {\n\t\t\t\t\tsum++;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn sum;", "    // Write your code here\n    long ans = 0;\n\
    \    if(n >= 3)\n    {\n        ans = (n-2)*(n-1)*n/6;\n    }\n    return ans;",
  "    // Write your code here\n    // Return the number of triples\n    return -1;",
  "\treturn n > 1 ? ((n * (n - 1) * (n - 2)) / 6) : 0;", "    long result = 0;\n \
    \   std::vector<long> vec(n);\n    for(int i = 0; i < n; i++) {\n        vec[i]\
    \ = i * i - i + 1;\n    }\n    for(int i = 0; i < n - 2; i++) {\n        for(int\
    \ j = i + 1; j < n - 1; j++) {\n            for(int k = j + 1; k < n; k++) {\n\
    \                if((vec[i] + vec[j] + vec[k]) % 3 == 0) {\n                 \
    \   result++;\n                }\n            }\n        }\n    }\n    return\
    \ result;", "    // Write your code here\n    long k = n/3;\n    if(n%3==0)\n\
    \        return (k*(k-1))/2;\n    return k*(k+1)/2;", "\t// Write your code here\n\
    \t// To print results to the standard output you can use printf()\n\t// Example:\
    \ printf(\"%s\", \"Hello world!\");\n\tassert(n > 0);\n\tif (n <= 2) return 0;\n\
    \tlong count = 0;\n\tfor (long i = 1; i < n - 1; i++) {\n\t\tfor (long j = i +\
    \ 1; j < n; j++) {\n\t\t\tlong mod = (i * i - i + 1 + j * j - j + 1) % 3;\n\t\t\
    \tif (mod == 0) {\n\t\t\t\tlong k = 1;\n\t\t\t\twhile (true) {\n\t\t\t\t\tlong\
    \ val = k * k - k + 1;\n\t\t\t\t\tif (val > (i * i - i + 1 + j * j - j + 1) /\
    \ 3) break;\n\t\t\t\t\tif (val < (i * i - i + 1)) {\n\t\t\t\t\t\tk++;\n\t\t\t\t\
    \t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (val == (i * i - i + 1 + j * j - j +\
    \ 1) / 3) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;", "    long result = 0;\n    // Write your\
    \ code here\n    if(n < 3) return 0;\n    result = (n-2) * (n-1) * n;\n    result\
    \ = result/6;\n    return result;", "    long ans = 0;\n    long* countOfZero\
    \ = new long[n + 1];\n    long* countOfOne = new long[n + 1];\n    long* countOfTwo\
    \ = new long[n + 1];\n    long* sumOfCountZero = new long[n + 1];\n    long* sumOfCountOne\
    \ = new long[n + 1];\n    long* sumOfCountTwo = new long[n + 1];\n    long* sumOfCount\
    \ = new long[n + 1];\n    long* sumOfCountZeroTwo = new long[n + 1];\n    long*\
    \ sumOfCountOneTwo = new long[n + 1];\n    long* sumOfCountZeroOne = new long[n\
    \ + 1];\n    long* sumOfCountOneZero = new long[n + 1];\n    countOfZero[0] =\
    \ 0;\n    countOfOne[0] = 0;\n    countOfTwo[0] = 0;\n    sumOfCountZero[0] =\
    \ 0;\n    sumOfCountOne[0] = 0;\n    sumOfCountTwo[0] = 0;\n    sumOfCount[0]\
    \ = 0;\n    sumOfCountZeroTwo[0] = 0;\n    sumOfCountOneTwo[0] = 0;\n    sumOfCountZeroOne[0]\
    \ = 0;\n    sumOfCountOneZero[0] = 0;\n    for(long i = 1; i <= n; i++) {\n  \
    \      countOfZero[i] = (i * i - i + 1) % 3 == 0 ? 1 : 0;\n        countOfOne[i]\
    \ = (i * i - i + 1) % 3 == 1 ? 1 : 0;\n        countOfTwo[i] = (i * i - i + 1)\
    \ % 3 == 2 ? 1 : 0;\n        sumOfCountZero[i] = sumOfCountZero[i - 1] + countOfZero[i];\n\
    \        sumOfCountOne[i] = sumOfCountOne[i - 1] + countOfOne[i];\n        sumOfCountTwo[i]\
    \ = sumOfCountTwo[i - 1] + countOfTwo[i];\n        sumOfCount[i] = sumOfCount[i\
    \ - 1] + countOfZero[", "\tlong ret = 0;\n\tlong* a = new long[n + 1];\n\tfor\
    \ (long i = 1; i <= n; i++) {\n\t\ta[i] = i * i - i + 1;\n\t}\n\tfor (long i =\
    \ 1; i <= n; i++) {\n\t\tfor (long j = i + 1; j <= n; j++) {\n\t\t\tfor (long\
    \ k = j + 1; k <= n; k++) {\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\
    \t\t\tret++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tdelete[] a;\n\treturn ret;", " \
    \   long triple = 0;\n    for(long i = 1; i < n; i++) {\n        for(long j =\
    \ i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n      \
    \          if(((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0)\
    \ {\n                    triple++;\n                }\n            }\n       \
    \ }\n    }\n    return triple;", '    return n*(n-1)*(n-2)/6;', "    if(n < 1)\n\
    \        return 0;\n    long sum = 0;\n    long max_triples = 0;\n    for(long\
    \ i = n - 1; i >= n / 3; i--) {\n        sum += i * i - i + 1;\n        if(sum\
    \ % 3 == 0)\n            max_triples += 1;\n    }\n    return max_triples;", '    return
    (n - 1) * (n - 2) / 6;', "    long max_triples = 0;\n    // Write your code here\n\
    \    return max_triples;", "    long res = 0;\n    for(long i = 1; i < n; i++)\
    \ {\n        for(long j = i + 1; j < n; j++) {\n            long sum = i * i -\
    \ i + 1 + j * j - j + 1;\n            if(sum % 3 != 0) continue;\n           \
    \ long k = n - 1;\n            while(k > j && sum + k * k - k + 1 > 3 * n) k--;\n\
    \            if(k <= j) break;\n            if(sum + k * k - k + 1 == 3 * n) res++;\n\
    \        }\n    }\n    return res;", '    return (n - 1) * (n - 2) / 2;', "  \
    \  long result = 0;\n    std::vector<long> a;\n    for (long i = 1; i <= n; i++)\
    \ {\n        a.push_back(i * i - i + 1);\n    }\n    for (long i = 0; i < n -\
    \ 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    result++;\n                }\n            }\n       \
    \ }\n    }\n    return result;", "    if(n < 3) {\n        return 0;\n    }\n\
    \    if(n == 3) {\n        return 1;\n    }\n    long *arr = new long[n];\n  \
    \  for(long i = 0; i < n; i++) {\n        arr[i] = i * i - i + 1;\n    }\n   \
    \ long i = 0, j = 0, k = 0;\n    long count = 0;\n    for(i = 0; i < n - 2; i++)\
    \ {\n        for(j = i + 1; j < n - 1; j++) {\n            for(k = j + 1; k <\
    \ n; k++) {\n                if((arr[i] + arr[j] + arr[k]) % 3 == 0) {\n     \
    \               count++;\n                }\n            }\n        }\n    }\n\
    \    return count;", '    return (n-1)*(n-2)*(n-3)/6;', "    assert(n >= 1);\n\
    \    std::vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        a[i] =\
    \ i * i - i + 1;\n    }\n    int sum = 0;\n    int max = 0;\n    for (int i =\
    \ 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for\
    \ (int k = j + 1; k < n; k++) {\n                sum = a[i] + a[j] + a[k];\n \
    \               if (sum % 3 == 0) {\n                    max += 1;\n         \
    \       }\n            }\n        }\n    }\n    return max;", "    long num =\
    \ n/3;\n    long ans = (num) * (num - 1) * (num - 2) / 6;\n    long rem = n %\
    \ 3;\n    if(rem == 1) {\n        ans += ((num) * (num - 1) / 2) * (n - 2*num);\n\
    \    } else if(rem == 2) {\n        ans += (num) * ((n - num)*(n - num - 1) /\
    \ 2);\n    }\n    return ans;", "\tint count = 0;\n\tfor(int i = 1; i < n; i++)\
    \ {\n\t\tfor(int j = i + 1; j < n; j++) {\n\t\t\tif((i * i - i + 1 + j * j - j\
    \ + 1) % 3 == 0) {\n\t\t\t\tfor(int k = j + 1; k < n; k++) {\n\t\t\t\t\tif((i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\t\t\t\t\t\tcount++;\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;", "    assert(n >\
    \ 0);\n    // Calculate the number of triples (i, j, k) that:\n    // 1. i + j\
    \ + k < n\n    // 2. (i + j + k) % 3 == 0\n\n    long ans = 0;\n    // Find the\
    \ number of triples where i is fixed to 0\n    for (long j = 1; j < n; j++) {\n\
    \        for (long k = j + 1; k < n; k++) {\n            if ((j + k) % 3 == 0)\
    \ {\n                ans++;\n            }\n        }\n    }\n    // Find the\
    \ number of triples where i is fixed to 1\n    for (long j = 2; j < n; j++) {\n\
    \        for (long k = j + 1; k < n; k++) {\n            if ((j + k) % 3 == 1)\
    \ {\n                ans++;\n            }\n        }\n    }\n    // Find the\
    \ number of triples where i is fixed to 2\n    for (long j = 3; j < n; j++) {\n\
    \        for (long k = j + 1; k < n; k++) {\n            if ((j + k) % 3 == 2)\
    \ {\n                ans++;\n            }\n        }\n    }\n    return ans;",
  "    // If n == 1 or n == 2, the number of valid triples is 0.\n    if (n == 1 ||\
    \ n == 2) {\n        return 0;\n    }\n    // If n == 3, the only valid triple\
    \ is (1, 3, 3).\n    if (n == 3) {\n        return 1;\n    }\n    // If n is greater\
    \ than 3, we can calculate \n    // the number of valid triples.\n    // (1, 3,\
    \ 3) + (1, 3, 7) + (1, 3, 13) + (1, 3, 21) + ...\n    // => (n - 2) * (n - 2)\
    \ / 2\n    return (n - 2) * (n - 2) / 2;", "    long ans = 0;\n    for(long i\
    \ = 1; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            if((i\
    \ * i - i + 1 + j * j - j + 1) % 3 == 0)\n                ans++;\n        }\n\
    \    }\n    return ans;", "    long ret = 0;\n    return ret;", '    return (n
    * (n - 1) * (n - 2)) / 6;', "    long max_triples = 0;\n    for(long i = 1; i\
    \ < n - 1; i++) {\n        for(long j = i + 1; j < n; j++) {\n            if((i\
    \ * i - i + 1 + j * j - j + 1) % 3 == 0) {\n                max_triples += n -\
    \ j;\n            }\n        }\n    }\n    return max_triples;", "    long count\
    \ = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long j = i+1; j <= n;\
    \ j++) {\n            for(long k = j+1; k <= n; k++) {\n                long num\
    \ = i*i - i + 1 + j*j - j + 1 + k*k - k + 1;\n                if(num % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;", "\tlong res = 0;\n\tlong a[n];\n\tfor(long i = 0;\
    \ i < n; i++) {\n\t\ta[i] = i * i - i + 1;\n\t}\n\tfor(long i = 0; i < n; i++)\
    \ {\n\t\tfor(long j = i + 1; j < n; j++) {\n\t\t\tfor(long k = j + 1; k < n; k++)\
    \ {\n\t\t\t\tif((a[i] + a[j] + a[k]) % 3 == 0)\n\t\t\t\t\tres++;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn res;", "    long res = 0;\n    for(long i = 1; i < n; i++) {\n\
    \        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k\
    \ < n; k++) {\n                long ai = i * i - i + 1;\n                long\
    \ aj = j * j - j + 1;\n                long ak = k * k - k + 1;\n            \
    \    long sum = ai + aj + ak;\n                if(sum % 3 == 0)\n            \
    \        res++;\n            }\n        }\n    }\n    return res;", "    long\
    \ i,j,k,counter = 0;\n    for(i=1;i<n;i++){\n        for(j=i+1;j<n;j++){\n   \
    \         for(k=j+1;k<n;k++){\n                if((i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1)%3 == 0){\n                    counter++;\n                }\n \
    \           }\n        }\n    }\n    return counter;", "    long result = 0;\n\
    \    for (long i = 1; i < n; i++) {\n        result += i * (i - 1) / 2;\n    }\n\
    \    return result;", "    if(n==0)\n        return 0;\n    long ans = 0;\n  \
    \  for(long i=1;i<n;i++)\n    {\n        for(long j=i+1;j<n;j++)\n        {\n\
    \            long k = j+1;\n            long sum = (k*k) - k + 1;\n          \
    \  long maxsum = sum;\n            long times = 1;\n            if(sum%3==0)\n\
    \            {\n                ans+=j-i;\n                continue;\n       \
    \     }\n            while(sum%3!=0)\n            {\n                k++;\n  \
    \              sum = (k*k) - k + 1;\n                maxsum+=sum;\n          \
    \      times++;\n            }\n            while(maxsum%3!=0)\n            {\n\
    \                maxsum-=sum;\n                k--;\n                sum = (k*k)\
    \ - k + 1;\n                times--;\n            }\n            if(times>0)\n\
    \                ans+=j-i;\n        }\n    }\n    return ans;", "  // Write your\
    \ code here\n  // array a[i] = i*i - i + 1\n  std::vector<long> a(n);\n  for(int\
    \ i = 0; i < n; i++) {\n    a[i] = i*i - i + 1;\n  }\n  long count = 0;\n  //\
    \ a[i] + a[j] + a[k] is a multiple of 3\n  // a[i] + a[j] = 3 - a[k]\n  // a[i]\
    \ = 3 - a[j] - a[k]\n  // a[i] = (3 - a[j]) - a[k]\n  // a[i] = 3 - a[j] - a[k]\n\
    \  // a[i] = 3 - a[j] - a[k]\n  // a[i] = 3 - a[j] - a[k]\n  // a[i] = 3 - a[j]\
    \ - a[k]\n  // a[i] = 3 - a[j] - a[k]\n  // a[i] = 3 - a[j] - a[k]\n  for(int\
    \ i = 0; i < n; i++) {\n    for(int j = i+1; j < n; j++) {\n      for(int k =\
    \ j+1; k < n; k++) {\n        if((a[i] + a[j] + a[k]) % 3 == 0)\n          count++;\n\
    \      }\n    }\n  }\n  return count;", "    long c=0;\n    for(long i=1;i<n-1;i++)\n\
    \    {\n        for(long j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<=n;k++)\n\
    \            {\n                long sum=((i*i)-i+1)+((j*j)-j+1)+((k*k)-k+1);\n\
    \                if(sum%3==0)\n                {\n                    c++;\n \
    \               }\n            }\n        }\n    }\n    return c;", "    int count\
    \ = 0;\n    for(int i = 1; i <= n; i++) {\n        for(int j = i + 1; j <= n;\
    \ j++) {\n            for(int k = j + 1; k <= n; k++) {\n                if(((i\
    \ * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0) {\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;", "\t// Write your code here\n\tlong result = 0;\n\tstd::vector<long>\
    \ v;\n\tfor (long i = 1; i <= n; i++) {\n\t\tv.push_back(i * i - i + 1);\n\t}\n\
    \tfor (long i = 0; i < n - 2; i++) {\n\t\tfor (long j = i + 1; j < n - 1; j++)\
    \ {\n\t\t\tfor (long k = j + 1; k < n; k++) {\n\t\t\t\tif ((v[i] + v[j] + v[k])\
    \ % 3 == 0) {\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;",
  "  int x[n];\n  for(int i=0;i<n;i++)\n  {\n    x[i]=i*i-i+1;\n  }\n  int ans=0;\n\
    \  for(int i=0;i<n;i++)\n  {\n    for(int j=i+1;j<n;j++)\n    {\n      for(int\
    \ k=j+1;k<n;k++)\n      {\n        if((x[i]+x[j]+x[k])%3==0)\n        {\n    \
    \      ans++;\n        }\n      }\n    }\n  }\n    return ans;", "    int num_triples\
    \ = 0;\n    std::vector<int> nums;\n    for (int i = 1; i <= n; i++) {\n     \
    \   nums.push_back(i * i - i + 1);\n    }\n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k\
    \ < n; k++) {\n                if ((nums[i] + nums[j] + nums[k]) % 3 == 0) {\n\
    \                    num_triples++;\n                }\n            }\n      \
    \  }\n    }\n    return num_triples;", "\tlong count = 0;\n\tlong triplets = 0;\n\
    \tbool first_index_found = false;\n\tbool second_index_found = false;\n\t// Consider\
    \ each and every element as the first element\n\tfor (long i = 0; i < n; i++)\
    \ {\n\t\t// Find the multiples of 3 from 0 to n-1 and store the index in the array\n\
    \t\tif ((i * i - i + 1) % 3 == 0) {\n\t\t\tfirst_index_found = true;\n\t\t\tcount\
    \ = i * i - i + 1;\n\t\t\t// Consider each and every element as the second element\n\
    \t\t\tfor (long j = i + 1; j < n; j++) {\n\t\t\t\tif ((j * j - j + 1) % 3 == 0)\
    \ {\n\t\t\t\t\tsecond_index_found = true;\n\t\t\t\t\tcount += j * j - j + 1;\n\
    \t\t\t\t\t// Consider each and every element as the third element\n\t\t\t\t\t\
    for (long k = j + 1; k < n; k++) {\n\t\t\t\t\t\t// If the sum of the 1st and 2nd\
    \ elements is divisible by 3,\n\t\t\t\t\t\t// then the 3rd element will also be\
    \ divisible by 3\n\t\t\t\t\t\tif (count % 3 == 0) {\n\t\t\t\t\t\t\ttriplets++;\n\
    \t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// If first and\
    \ second elements are not divisible by 3, then there is no triplet\n\tif (!first_index_found\
    \ && !second_index_found) {\n\t\treturn 0;\n\t}\n\t// Return the count of triplets\
    \ that are divisible by 3\n\treturn triplets;", "\tif (n < 3) return 0;\n\tlong\
    \ result = n - 2;\n\tif (n % 3 == 0) result++;\n\treturn result;", "    long m\
    \ = n / 3;\n    if (n % 3 == 0)\n        return m * (m - 1) * (m - 2) / 6;\n \
    \   else if (n % 3 == 1)\n        return m * (m - 1) * (m + 1) / 6;\n    else\n\
    \        return (m + 1) * m * (m + 1) / 6;", "    long count = 0;\n    // Write\
    \ your code here\n    std::vector<long> a(n);\n    for(int i = 0; i < n; i++)\
    \ {\n        a[i] = (i * i) - i + 1;\n    }\n    for(int i = 0; i < n; i++) {\n\
    \        for(int j = i + 1; j < n; j++) {\n            for(int k = j + 1; k <\
    \ n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n           \
    \         count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;", "  long result = 0;\n  for (long i = 1; i < n - 1; i++) {\n    result\
    \ += (n - 1 - i) * i;\n  }\n  return result;", "    if(n < 3)\n    {\n       \
    \ return 0;\n    }\n    else if(n >= 3 && n <= 5)\n    {\n        return 1;\n\
    \    }\n    else\n    {\n        int count = n - 5;\n        int first_remainder\
    \ = (count % 3) - 1;\n        int second_remainder = (count % 6) - 1;\n      \
    \  int third_remainder = (count % 18) - 1;\n        int fourth_remainder = (count\
    \ % 54) - 1;\n        long result = 0;\n        if(first_remainder > 0)\n    \
    \    {\n            result += count - first_remainder;\n        }\n        if(second_remainder\
    \ > 0)\n        {\n            result += count - second_remainder;\n        }\n\
    \        if(third_remainder > 0)\n        {\n            result += count - third_remainder;\n\
    \        }\n        if(fourth_remainder > 0)\n        {\n            result +=\
    \ count - fourth_remainder;\n        }\n        return result / 3;\n    }", " \
    \   if(n<3)\n        return 0;\n    long ans = 0;\n    long sum = (n*(n+1))/2;\n\
    \    ans = (n-2)*(n-1)*n/6;\n    if(sum%3==0)\n        ans+= (n-1)*(n-2)/2;\n\
    \    return ans;", "    long result = 0;\n    long dp[n];\n    memset(dp, 0, sizeof(dp));\n\
    \    for(long i = 0; i < n; i++) {\n        dp[i] = i * i - i + 1;\n    }\n  \
    \  for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n\
    \            for(long k = j + 1; k < n; k++) {\n                long sum = dp[i]\
    \ + dp[j] + dp[k];\n                if(sum % 3 == 0) {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  // Write your code here\n    long ans=0;\n    for(long i=1;i<n-1;i++){\n  \
    \      long a=i*i-i+1;\n        for(long j=i+1;j<n;j++){\n            long b=j*j-j+1;\n\
    \            for(long k=j+1;k<=n;k++){\n                long c=k*k-k+1;\n    \
    \            if((a+b+c)%3==0){\n                    ans++;\n                }\n\
    \            }\n        }\n    }\n    return ans;", "    long count = 0;\n   \
    \ long mod[3] = {0, 0, 0};\n    for(long i = 1; i <= n; i++) {\n        mod[(i\
    \ * i - i + 1) % 3]++;\n    }\n    count += (mod[0] * (mod[0] - 1) * (mod[0] -\
    \ 2)) / 6;\n    count += (mod[1] * (mod[1] - 1) * (mod[2])) / 2;\n    count +=\
    \ (mod[2] * (mod[2] - 1) * (mod[1])) / 2;\n    return count;", "    long i = 0,\
    \ j = 0, k = 0, count = 0;\n    for(i = 1; i < n; i++) {\n        for(j = i +\
    \ 1; j < n; j++) {\n            for(k = j + 1; k < n; k++) {\n               \
    \ if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n             \
    \       count++;\n            }\n        }\n    }\n    return count;", '    return
    (n*(n-1)*(n-2)/6) - ((n-1)*(n-2)*(2*n-3)/6);', '    return n >= 4 ? (n-1) * (n-2)
    * (n-3) / 6 : 0;', "    std::vector<long> a(n);\n    for (long i = 0; i < n; i++)\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long\
    \ i = 0; i < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n \
    \           for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j]\
    \ + a[k]) % 3 == 0) {\n                    count++;\n                }\n     \
    \       }\n        }\n    }\n    return count;", "    // Write your code here\n\
    \    long res = 0;\n    for(long i = 1; i < n - 1; i++){\n        for(long j =\
    \ i + 1; j < n; j++){\n            long k = j + 1;\n            while(k < n){\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0){\n\
    \                    res++;\n                }\n                k++;\n       \
    \     }\n        }\n    }\n    return res;", "    if(n < 3) return 0;\n    long\
    \ rem1 = 0, rem2 = 0;\n    for(long i = 1; i <= n; i++) {\n        if(i % 3 ==\
    \ 1) rem1++;\n        else if(i % 3 == 2) rem2++;\n    }\n    long k = std::min(rem1,\
    \ rem2);\n    rem1 -= k;\n    rem2 -= k;\n    return rem1*rem2 + k*(k - 1)/2;",
  "\t// Since i + j + k = n\n\t// if j = i + d, then k = n - i - j = n - 2i - d\n\t\
    // and a[i] + a[j] + a[k] = i^2 - i + 1 + (i + d)^2 - (i + d) + 1 + (n - 2i -\
    \ d)^2 - (n - 2i - d) + 1\n\t//\t\t\t\t\t\t = n + 2i^2 + 2id + 2i + d^2 - d +\
    \ 1 + n - 4i^2 - 4id - 4i - d^2 + 2d - 1\n\t//\t\t\t\t\t\t = 3n - 6i^2 - 4i -\
    \ 2d^2 - d + 3\n\t// => 3n - 6i^2 - 4i - 2d^2 - d + 3 % 3 == 0, where 0 <= i <\
    \ j < k <= n\n\t// => 3n - 6i^2 - 4i - 2d^2 - d + 3 = 0\n\t// => 6i^2 + 4i + 2d^2\
    \ + d - 3n + 3 = 0\n\t// => (2i + d - 1)^2 - 2n + 4 = 0 => d = 2i + 1 - sqrt(4n\
    \ - 8)\n\t// => k = n - 2i - d = n - 2i - (2i + 1 - sqrt(4n - 8)) = n - 4i - 1\
    \ + sqrt(4n - 8)\n\t// Since j > i and k > j, so sqrt(4n - 8) > 1, that means\
    \ a[i] + a[j] + a[k] % 3 == 0, where\n\t// 0 <= i < j < k <= n, if and only if\
    \ sqrt(4n - 8) is an odd integer.\n\t// So the problem comes down to:\n\t// Count\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\t// and sqrt(4n\
    \ - 8) is an odd integer.\n\t// if sqrt(4n - 8) = 2q + 1, where q is an integer",
  "    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n    }\n\
    \    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long j=i+1;j<n;j++)\n\
    \        {\n            for(long k=j+1;k<n;k++)\n            {\n             \
    \   if((a[i]+a[j]+a[k])%3==0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;", "   \
    \ long max_triples = 0;\n    if(n < 3)\n        return max_triples;\n    long\
    \ dp[n];\n    for(long i = 0; i < n; i++)\n        dp[i] = i * i - i + 1;\n  \
    \  for(long i = 0; i < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++)\
    \ {\n            for(long k = j + 1; k < n; k++) {\n                if((dp[i]\
    \ + dp[j] + dp[k]) % 3 == 0)\n                    max_triples++;\n           \
    \ }\n        }\n    }\n    return max_triples;", '    return n * (n - 1) * (n
    - 2) / 6;', "    // Write your code here\n    return 0;", "\t// Write your code\
    \ here\n\t// By default, return 0.\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\
    \tlong count = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\ta = i * i - i + 1;\n\t\
    \tfor (int j = i + 1; j < n; j++) {\n\t\t\tb = j * j - j + 1;\n\t\t\tfor (int\
    \ k = j + 1; k < n; k++) {\n\t\t\t\tc = k * k - k + 1;\n\t\t\t\tif ((a + b + c)\
    \ % 3 == 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;",
  "    long ans = 0;\n    if(n < 3) {\n        return ans;\n    }\n    long a[n] =\
    \ {0};\n    for(long i = 0; i < n; i++) {\n        a[i] = (i * i) - i + 1;\n \
    \   }\n    for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++)\
    \ {\n            for(long k = j + 1; k < n; k++) {\n                if((a[i] +\
    \ a[j] + a[k]) % 3 == 0) {\n                    ans++;\n                }\n  \
    \          }\n        }\n    }\n    return ans;", "    long count=0;\n    if(n>=3){\n\
    \        count=n*(n-1)*(n-2)/6;\n    }\n    return count;", "    if(n < 3) return\
    \ 0;\n    long res = 0;\n    std::vector<long> dp(n+1, 0);\n    dp[1] = 1;\n \
    \   dp[2] = 3;\n    dp[3] = 5;\n    for(long i = 4; i <= n; i++) {\n        dp[i]\
    \ = 3*dp[i-1] - dp[i-2] + 2;\n    }\n    return dp[n];", "    long res = 0;\n\
    \    if(n > 2) {\n        long dp[n][3] = {0};\n        dp[0][0] = 1; dp[0][1]\
    \ = 1; dp[0][2] = 1;\n        for(long i = 1; i < n; i++) {\n            dp[i][0]\
    \ = dp[i-1][1] + dp[i-1][2];\n            dp[i][1] = dp[i-1][0] + dp[i-1][2];\n\
    \            dp[i][2] = dp[i-1][0] + dp[i-1][1];\n        }\n        res = dp[n-1][0]\
    \ + dp[n-1][1] + dp[n-1][2];\n    }\n    return res;", "    long count = 0;\n\
    \    long arr[n];\n    for(long i = 0; i < n; i++)\n        arr[i] = i * i - i\
    \ + 1;\n    for(long i = 0; i < n; i++)\n        for(long j = i + 1; j < n; j++)\n\
    \            for(long k = j + 1; k < n; k++)\n                if((arr[i] + arr[j]\
    \ + arr[k]) % 3 == 0)\n                    count++;\n    return count;", "\tlong\
    \ number_of_triples = 0;\n\t// Write your code here\n\tfor(long i = 0; i < n;\
    \ i++)\n\t{\n\t\tfor(long j = i+1; j < n; j++)\n\t\t{\n\t\t\tfor(long k = j+1;\
    \ k < n; k++)\n\t\t\t{\n\t\t\t\tif(((i*i - i + 1) + (j*j - j + 1) + (k*k - k +\
    \ 1)) % 3 == 0)\n\t\t\t\t{\n\t\t\t\t\tnumber_of_triples++;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn number_of_triples;", "    long ans = 0;\n    long div\
    \ = n / 3;\n    ans += div * (div - 1) / 2;\n    div = n / 3 + 1;\n    ans +=\
    \ div * (div - 1) / 2;\n    return ans;", "    long sum=0;\n    for(long i=1;i<=n;i++)\n\
    \    {\n        for(long j=i+1;j<=n;j++)\n        {\n            for(long k=j+1;k<=n;k++)\n\
    \            {\n                if((i*i-i+1+j*j-j+1+k*k-k+1)%3==0)\n         \
    \       {\n                    // std::cout<<i<<\" \"<<j<<\" \"<<k<<std::endl;\n\
    \                    sum++;\n                }\n            }\n        }\n   \
    \ }\n    return sum;", "    long num_triples = 0;\n    if (n < 3) return num_triples;\n\
    \    for (long i = 0; i < n - 2; i++) {\n        for (long j = i + 1; j < n -\
    \ 1; j++) {\n            for (long k = j + 1; k < n; k++) {\n                if\
    \ (((i + 1) * (i + 1) - (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1) + 1 + (k + 1)\
    \ * (k + 1) - (k + 1) + 1) % 3 == 0) {\n                    num_triples++;\n \
    \               }\n            }\n        }\n    }\n    return num_triples;",
  "    long res = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long j = i+1;\
    \ j <= n; j++) {\n            for(long k = j+1; k <= n; k++) {\n             \
    \   if((i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0)\n                    res++;\n \
    \           }\n        }\n    }\n    return res;", "    int count = 0;\n    for(int\
    \ i = 1; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n           \
    \ for(int k = j + 1; k < n; k++) {\n                int ai = i * i - i + 1;\n\
    \                int aj = j * j - j + 1;\n                int ak = k * k - k +\
    \ 1;\n                if((ai + aj + ak) % 3 == 0)\n                    count++;\n\
    \            }\n        }\n    }\n    return count;", "    // Write your code\
    \ here\n    int *array = new int[n];\n    for(int i=0;i<n;i++){\n        array[i]\
    \ = (i*i) - i + 1;\n    }\n    int count = 0;\n    for(int i=0;i<n;i++){\n   \
    \     for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n         \
    \       if((array[i] + array[j] + array[k])%3 == 0){\n                    // cout<<array[i]<<\"\
    \ \"<<array[j]<<\" \"<<array[k]<<endl;\n                    count++;\n       \
    \         }\n            }\n        }\n    }\n    return count;", "    long result\
    \ = 0;\n    return result;", "    int a[n];\n    for(int i=0;i<n;i++)\n    {\n\
    \        a[i]=i*i-i+1;\n    }\n    int count=0;\n    for(int i=0;i<n;i++)\n  \
    \  {\n        for(int j=i+1;j<n;j++)\n        {\n            for(int k=j+1;k<n;k++)\n\
    \            {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;", "\tlong res = 0;\n\tfor (long i = 1; i < n - 1; i++)\
    \ {\n\t\tfor (long j = i + 1; j < n; j++) {\n\t\t\tfor (long k = j + 1; k <= n;\
    \ k++) {\n\t\t\t\tif ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n\t\t\t\t\tres++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res;", "    if(n<=0)\n\
    \        return 0;\n    long sum=0;\n    for(long i=1;i<=n;i++)\n    {\n     \
    \   sum=sum+i*i-i+1;\n    }\n    if(sum%3==0)\n        return (n*(n-1)*(n-2))/6;\n\
    \    else\n        return (n*(n-1)*(n-2))/6-1;", "    // Write your code here\n\
    \    int arr[n];\n    long count = 0;\n    for(int i = 0; i < n; i++){\n     \
    \   arr[i] = i*i - i + 1;\n    }\n    for(int i = 0; i < n; i++){\n        for(int\
    \ j = i+1; j < n; j++){\n            for(int k = j+1; k < n; k++){\n         \
    \       if((arr[i] + arr[j] + arr[k]) % 3 == 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    long sum;\n    std::vector<long> v(n);\n    for(long i\
    \ = 0; i < n; i++)\n        v[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j +\
    \ 1; k < n; k++)\n            {\n                sum = v[i] + v[j] + v[k];\n \
    \               if(sum % 3 == 0)\n                    count++;\n            }\n\
    \    return count;", "\t// Write your code here\n\t// To print results to the\
    \ standard output you can use the printf function\n\t// For example: printf(\"\
    %s\", \"Hello world!\");\n    long mod3[3] = {0, 0, 0};\n    long ans = 0;\n \
    \   for(long i = 1; i <= n; i++) {\n        long num = i * i - i + 1;\n      \
    \  mod3[num % 3]++;\n    }\n    ans += mod3[0] * (mod3[0] - 1) * (mod3[0] - 2)\
    \ / 6;\n    ans += mod3[1] * mod3[2] * (mod3[1] - 1) / 2;\n    ans += mod3[1]\
    \ * mod3[2] * (mod3[2] - 1) / 2;\n    return ans;", "    long i = 0, j = 0, k\
    \ = 0, triples = 0;\n    long a[n];\n    for(i = 0; i < n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    for(i = 0; i < n; i++) {\n        for(j = i + 1; j < n;\
    \ j++) {\n            for(k = j + 1; k < n; k++) {\n                if((a[i] +\
    \ a[j] + a[k]) % 3 == 0)\n                    triples++;\n            }\n    \
    \    }\n    }\n    return triples;", "    long ans = 0;\n    for(long i = 0; i\
    \ < n - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n           \
    \ for(long k = j + 1; k < n; k++) {\n                if((i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0) {\n                    ans++;\n         \
    \       }\n            }\n        }\n    }\n    return ans;", "    int c = 0;\n\
    \    if(n >= 1) c++;\n    if(n >= 3) c++;\n    if(n >= 7) c++;\n    if(n >= 13)\
    \ c++;\n    if(n >= 21) c++;\n    return c;", "  long result = 0;\n  std::vector<long>\
    \ a(n);\n  for (long i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  for\
    \ (long i = 0; i < n; i++) {\n    for (long j = i + 1; j < n; j++) {\n      for\
    \ (long k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \          result++;\n        }\n      }\n    }\n  }\n  return result;", "   \
    \ long result = 0;\n    long size = n - 2;\n    std::vector<long> a(size);\n \
    \   for (long i = 0; i < size; i++) {\n        a[i] = i * i - i + 1;\n    }\n\
    \    std::unordered_map<long, long> hm;\n    for (long i = 0; i < size; i++) {\n\
    \        for (long j = i + 1; j < size; j++) {\n            long curr = a[i] +\
    \ a[j];\n            if (curr % 3 == 0) {\n                hm[curr]++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < size; i++) {\n        if\
    \ (hm.find(a[i]) != hm.end()) {\n            result += hm[a[i]];\n        }\n\
    \    }\n    return result;", "    assert(n > 0);\n    return n > 1 ? ((n - 1)\
    \ * (n - 2) * (n - 3)) / 6 : 0;", "    long m;\n    if(n%3 == 0) m = n/3;\n  \
    \  else m = n/3 + 1;\n    return m*(m-1)/2;", "\tstd::vector<long> v(n);\n\tlong\
    \ i = 1;\n\tlong ans = 0;\n\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong\
    \ j = 0;\n\tlong k = 0;\n\tlong r = 0;\n\tlong s = 0;\n\tlong count = 0;\n\tlong\
    \ l = 0;\n\tfor (i = 1; i <= n; i++) {\n\t\tv[i - 1] = i * i - i + 1;\n\t}\n\t\
    for (i = 0; i < n; i++) {\n\t\tfor (j = i + 1; j < n; j++) {\n\t\t\tfor (k = j\
    \ + 1; k < n; k++) {\n\t\t\t\tif ((v[i] + v[j] + v[k]) % 3 == 0) {\n\t\t\t\t\t\
    ans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;", "    long count = 0;\n\
    \    std::vector<long> rem;\n    for(long i = 1; i <= n; i++) {\n        rem.push_back((i\
    \ * i - i + 1) % 3);\n    }\n    // std::cout << \"rem: \";\n    // for(long i\
    \ = 0; i < rem.size(); i++) {\n    //     std::cout << rem[i] << \" \";\n    //\
    \ }\n    // std::cout << std::endl;\n    for(long i = 0; i < rem.size(); i++)\
    \ {\n        if(rem[i] == 0) {\n            count++;\n        }\n        for(long\
    \ j = i + 1; j < rem.size(); j++) {\n            if((rem[i] + rem[j]) % 3 == 0)\
    \ {\n                count++;\n            }\n            for(long k = j + 1;\
    \ k < rem.size(); k++) {\n                if((rem[i] + rem[j] + rem[k]) % 3 ==\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;", "    if(n < 3)\n        return 0;\n    // Take\
    \ the example of n = 5.\n    // a = [1, 3, 7, 13, 21]\n    // We need to find\
    \ i, j, k where i < j < k and\n    // a[i] + a[j] + a[k] is a multiple of 3.\n\
    \    // 2 * (a[i] + a[j] + a[k]) = 6 * a[i] + 6 * a[j] + 6 * a[k]\n    // = 6\
    \ * (a[i] + a[j] + a[k]) = 6 * (a[k] + a[k] + a[k]) = 6 * (3 * a[k])\n    // 3\
    \ * a[k] must be even.\n    // Now, a[k] = 3 * k - k + 1\n    // a[k] % 3 = (3\
    \ * k - k + 1) % 3\n    // = (k - 1) % 3\n    // So, a[k] is a multiple of 3 if\
    \ and only if k - 1 is a multiple of 3.\n    // Therefore, we want all triples\
    \ of (i, j, k - 1) where i < j < k - 1 and\n    // i + j + (k - 1) is a multiple\
    \ of 3.\n    // a[i] + a[j] + a[k - 1] = a[i] + a[j] + (3 * k - 1 - k + 1)\n \
    \   // = a[i] + a[j] + 3 * k - 1\n    // = (3 * i - i + 1) + (3 * j - j + 1) +\
    \ 3 * k - 1\n    // = 3 * (i + j + k) - (i + j + 1)\n    // = 3 * (3 * k) - (i\
    \ + j + 1)\n    // 2 * (3 * k) = 6 * k\n    // 2 * (i + j + 1) = 2 * (i + j +\
    \ 1)\n    // k = (i + j + 1) / 2\n    // a[i] + a[j] + a[k - 1] = 3 * (3 *", " \
    \   long ret = 0;\n    std::vector<int> a;\n    for(int i = 1; i <= n; i++) {\n\
    \        a.push_back(i * i - i + 1);\n    }\n    for(int i = 0; i < n; i++) {\n\
    \        for(int j = i + 1; j < n; j++) {\n            for(int k = j + 1; k <\
    \ n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n           \
    \         ret++;\n                }\n            }\n        }\n    }\n    return\
    \ ret;", "    /*\n     * Write your code here.\n     */\n    vector<long> vec;\n\
    \    vec.push_back(1);\n    for(long i=2;i<=n;i++){\n        vec.push_back(i*i-i+1);\n\
    \    }\n    int count=0;\n    for(long i=0;i<n-2;i++){\n        for(long j=i+1;j<n-1;j++){\n\
    \            for(long k=j+1;k<n;k++){\n                long sum=vec[i]+vec[j]+vec[k];\n\
    \                if(sum%3==0){\n                    cout<<vec[i]<<\",\"<<vec[j]<<\"\
    ,\"<<vec[k]<<endl;\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    return count;", "\tif (n < 3) return 0;\n\tstd::vector<long>\
    \ arr(n);\n\tlong count = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tarr[i] = i\
    \ * i - i + 1;\n\t\tif (arr[i] % 3 == 0) count++;\n\t}\n\tstd::cout << \"Input\
    \ : \" << n << std::endl;\n\tfor (auto elm : arr) std::cout << elm << \" \";\n\
    \tstd::cout << std::endl;\n\t// for (int i = 0; i < n; i++) {\n\t// \tfor (int\
    \ j = i + 1; j < n; j++) {\n\t// \t\tfor (int k = j + 1; k < n; k++) {\n\t// \t\
    \t\tif ((arr[i] + arr[j] + arr[k]) % 3 == 0) {\n\t// \t\t\t\tstd::cout << \"{\"\
    \ << arr[i] << \", \" << arr[j] << \", \" << arr[k] << \"}\" << std::endl;\n\t\
    // \t\t\t\tcount++;\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\treturn count;",
  "    /* Write your code here */\n    return n*(n-1)*(n-2)/6;", "    if(n < 3)\n\
    \        return 0;\n    long sum = 0;\n    for(long i = 1; i < n - 1; i++) {\n\
    \        sum += (n - 1 - i) * i;\n    }\n    return sum;", "    long *a = new\
    \ long[n];\n    for(long i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n \
    \   long count = 0;\n    long i = 0, j = 1, k = 2;\n    while(i < n && j < n &&\
    \ k < n) {\n        long p = a[i] + a[j] + a[k];\n        if(p % 3 == 0) {\n \
    \           count++;\n            i++;\n            j++;\n            k++;\n \
    \       }\n        else if(p < 3)\n            k++;\n        else if(p > 3) {\n\
    \            i++;\n            j++;\n        }\n    }\n    return count;", " \
    \   long a = n - 1;\n    long b = (n - 1) / 2;\n    long c = (n - 1) / 3;\n  \
    \  if ((n - 1) % 3 == 0) {\n        c -= 1;\n    }\n    return a * b * c;", " \
    \   // Write your code here\n    int i =0;\n    long val1 =0, val2 =0, val3 =0;\n\
    \    long count =0;\n    std::vector<long> arr;\n    for(i=1; i<=n; i++){\n  \
    \      val1 = i*i - i +1;\n        arr.push_back(val1);\n    }\n    for(i=0; i<n-2;\
    \ i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int k=j+1; k<n;\
    \ k++){\n                val2 = arr[i] + arr[j] + arr[k];\n                if(val2%3\
    \ == 0){\n                    count++;\n                }\n            }\n   \
    \     }\n    }\n    return count;", "\tlong ans = 0;\n\tfor (long i = 1; i < n\
    \ - 1; i++) {\n\t\tfor (long j = i + 1; j < n; j++) {\n\t\t\tfor (long k = j +\
    \ 1; k <= n; k++) {\n\t\t\t\tif (((i * i - i + 1) + (j * j - j + 1) + (k * k -\
    \ k + 1)) % 3 == 0) {\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ ans;", "    long sum = 0;\n    for(long i = 1; i < n; i++) {\n        sum +=\
    \ (n - i - 1) * (n - i - 2) / 2;\n    }\n    return sum;", "    // Write your\
    \ code here\n    return 0;", "    int max_triples = n > 3 ? n - 3 : 0;\n    long\
    \ sum_rem_triples = 0;\n    long sum_rem_triples_incr = 0;\n    for (int i = 1;\
    \ i <= n - 3; i++) {\n        sum_rem_triples += i;\n        sum_rem_triples_incr\
    \ += i + 1;\n        if (sum_rem_triples % 3 == 0 || sum_rem_triples_incr % 3\
    \ == 0) {\n            max_triples--;\n        }\n    }\n    return max_triples;",
  "\tlong *a,i;\n\ta=(long *)malloc(n*sizeof(long));\n\tfor(i=0;i<n;i++)\n\t\ta[i]=i*i-i+1;\n\
    \tfor(i=0;i<n;i++)\n\t\tprintf(\"%ld \",a[i]);\n\tprintf(\"\\n\");\n\t// Write\
    \ your code here\n\t// Return the number of triplets that are multiple of 3\n\t\
    // Return 0 if n < 3\n\t// Return 0 if given n is a negative number\n\t// Return\
    \ 0 if memory allocation fails", "    long sum = 0;\n    for(long i = 1; i <=\
    \ n - 2; i++) {\n        long k = 2 * i;\n        sum += (n - k) * (n - k - 1)\
    \ / 2;\n    }\n    return sum;", '    return ((n)*(n-1)*(n-2))/6;', "\t// Write\
    \ your code here.\n\tlong count = 0;\n\tlong rem = 0;\n\tfor (long i = 1; i <\
    \ n - 1; i++) {\n\t\trem = (i * i - i + 1) % 3;\n\t\tif (rem == 0) {\n\t\t\tcount\
    \ += (n - i - 1);\n\t\t}\n\t\telse if (rem == 1) {\n\t\t\tcount += (n - i - 1)\
    \ / 3;\n\t\t}\n\t\telse {\n\t\t\tcount += (n - i - 1) / 3;\n\t\t\tcount += (n\
    \ - i - 1) % 3;\n\t\t}\n\t}\n\treturn count;", "    std::vector<long> a(n);\n\
    \    long count = 0;\n    for(long i = 0; i < n; i++) {\n        a[i] = i * i\
    \ - i + 1;\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = i +\
    \ 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n          \
    \      if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count;", "    long\
    \ ans = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long j = i + 1; j\
    \ <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n             \
    \   if(((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0) {\n   \
    \                 ans++;\n                }\n            }\n        }\n    }\n\
    \    return ans;", "    long dp[n];\n    long count = 0;\n    dp[0] = 1;\n   \
    \ dp[1] = 2;\n    dp[2] = 5;\n    for(long i = 3; i < n; i++) {\n        dp[i]\
    \ = dp[i-1] + dp[i-2] + dp[i-3];\n    }\n    return dp[n-1];", "    if(n==0) return\
    \ 0;\n    int ans = 0;\n    int mod = 1;\n    for(int i=1;i<=n;i++){\n       \
    \ mod = (mod*i)%3;\n        if(mod == 0) ans++;\n    }\n    return ans;", "  \
    \  // Write your code here\n    long total = 0;\n    long temp = 0;\n    long\
    \ three_count = 0;\n    long n_count = 0;\n    long pos_count = 0;\n    long sum\
    \ = 0;\n    long left = 0;\n    long right = 0;\n    long mid = 0;\n    long lcount\
    \ = 0;\n    long rcount = 0;\n    long tcount = 0;\n    long n_div = 0;\n    long\
    \ rem = 0;\n    long prev_rem = 0;\n    std::vector<long> a(n);\n    for(long\
    \ i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(long i =\
    \ 0; i < n; i++){\n        if(a[i] % 3 == 0){\n            three_count++;\n  \
    \      }\n        if(a[i] % 3 == 1){\n            pos_count++;\n        }\n  \
    \      if(a[i] % 3 == 2){\n            n_count++;\n        }\n    }\n    n_div\
    \ = n_count / 3;\n    rem = n_count % 3;\n    three_count = (three_count * (three_count\
    \ - 1) * (three_count - 2)) / 6;\n    total = total + three_count;\n    if(rem\
    \ == 0){\n        pos_count = (pos_count * (pos_count - 1) * (pos_count - 2))\
    \ / 6;\n        total = total + pos_count;\n        n_count = (n_count * (n_count\
    \ - 1) * (n_count - 2)) / 6;\n        total = total + n_count;\n    }\n    if(rem\
    \ == 1){\n        lcount = 0;\n        rcount = 0;\n        tcount = 0;\n    \
    \    n_count = n_count - n_div;\n        pos_count = pos_count - n_div;\n    \
    \    for(long i = 0; i < n; i++){\n            if(a[i] % 3 == 1){\n          \
    \      lcount++;\n            }\n            if(a[i] % 3 == 2", "  long count\
    \ = 0;\n  for(long i = 1; i < n; i++) {\n    for(long j = i + 1; j < n; j++) {\n\
    \      for(long k = j + 1; k < n; k++) {\n        long total = i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1;\n        if(total % 3 == 0) {\n          count++;\n\
    \        }\n      }\n    }\n  }\n  return count;", "    long rem1 = (n-1)/3;\n\
    \    long rem2 = (n-2)/3;\n    long rem3 = (n-3)/3;\n    return rem1 * rem2 *\
    \ rem3;", '    return (n*(n-1)*(n-2))/6;', "    long total = 0;\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n          \
    \  for(long k = j + 1; k < n; k++) {\n                if((i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0) {\n                    total++;\n     \
    \           }\n            }\n        }\n    }\n    return total;", "\treturn\
    \ n;", "\treturn (n-2)*(n-1)*n/6;", "    // PUT YOUR CODE HERE\n    // PLEASE\
    \ DO NOT INCLUDE ANY CODE OUTSIDE THIS FUNCTION\n    if(n==0 || n==1 || n==2){\n\
    \        return 0;\n    }\n    if(n==3){\n        return 1;\n    }\n    if(n%3==0){\n\
    \        return (n-1)*(n-2)/6;\n    }\n    if(n%3==1){\n        return (n-2)*(n-2)/6;\n\
    \    }\n    if(n%3==2){\n        return (n-1)*(n-1)/6;\n    }\n    // PUT YOUR\
    \ CODE HERE\n    // PLEASE DO NOT INCLUDE ANY CODE OUTSIDE THIS FUNCTION", "\t\
    return ((n) * (n - 1) * (n - 2)) / 6;", "    long ans=0;\n    std::vector<long>\
    \ a(n);\n    for(long i=0;i<n;i++){\n        a[i]=i*i-i+1;\n    }\n    for(long\
    \ i=0;i<n;i++){\n        for(long j=i+1;j<n;j++){\n            for(long k=j+1;k<n;k++){\n\
    \                if((a[i]+a[j]+a[k])%3==0){\n                    ans++;\n    \
    \            }\n            }\n        }\n    }\n    return ans;", "    long sum\
    \ = 0;\n    for(long i = 1; i < n; i++) {\n        for(long j = i + 1; j < n;\
    \ j++) {\n            for(long k = j + 1; k < n; k++) {\n                long\
    \ a = i * i - i + 1;\n                long b = j * j - j + 1;\n              \
    \  long c = k * k - k + 1;\n                if((a + b + c) % 3 == 0)\n       \
    \             sum++;\n            }\n        }\n    }\n    return sum;", "   \
    \ int ln=log2(n);\n    long sum=0;\n    for(int i=1;i<=ln;i++){\n        long\
    \ x=(n+1)/(1<<i);\n        sum+=x;\n    }\n    // long i=1;\n    // long ans=0;\n\
    \    // long temp=1;\n    // while(temp<=n){\n    //     ans+=(n-temp+1);\n  \
    \  //     temp*=2;\n    // }\n    return sum;", "    int ans = 0;\n    for(int\
    \ i = 1; i <= n; i++) {\n        int num = i * i - i + 1;\n        if(num % 3\
    \ == 0)\n            ans++;\n    }\n    return ans;", "    // Write your code\
    \ here\n    if(n<=0)\n        return 0;\n    if(n==1)\n        return 0;\n   \
    \ std::vector<long> a(n);\n    for(long i=0;i<n;i++)\n        a[i]=i*i-i+1;\n\
    \    long ans=0;\n    for(long i=0;i<n-2;i++)\n    {\n        for(long j=i+1;j<n-1;j++)\n\
    \        {\n            if((a[i]+a[j])%3==0)\n            {\n                for(long\
    \ k=j+1;k<n;k++)\n                {\n                    if((a[i]+a[j]+a[k])%3==0)\n\
    \                        ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;", "    long a[n+1];\n    a[0] = 0;\n    for(long i = 1;\
    \ i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 1; i\
    \ <= n; i++) {\n        for(long j = i+1; j <= n; j++) {\n            for(long\
    \ k = j+1; k <= n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    printf(\"(%ld, %ld, %ld)\\n\", a[i], a[j], a[k]);\n     \
    \           }\n            }\n        }\n    }\n    long count = 0;\n    for(long\
    \ i = 1; i <= n; i++) {\n        for(long j = i+1; j <= n; j++) {\n          \
    \  for(long k = j+1; k <= n; k++) {\n                if((a[i] + a[j] + a[k]) %\
    \ 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;", "    if(n==1) return 0;\n    long ans =\
    \ 0;\n    long c1 = n/3;\n    long c2 = n/3;\n    long c3 = n/3;\n    if(n%3==2)\n\
    \    {\n        c1--;\n        c2--;\n        c3++;\n    }\n    if(n%3==1)\n \
    \   {\n        c1--;\n        c2++;\n        c3++;\n    }\n    if(c1<1) return\
    \ 0;\n    ans = ((c1)*(c2)*(c3));\n    return ans;", "    // Write your code here\n\
    \    long i=0,sum=0,k=0,j=0,m=0;\n    long arr[n];\n    for(i=0;i<n;i++)\n   \
    \ {\n        arr[i]=i*i-i+1;\n        sum=sum+arr[i];\n    }\n    if(sum%3==0)\n\
    \    m=1;\n    else\n    m=0;\n    return m;", "    // Write your code here\n\
    \    long count = 0;\n    for(long i = 1; i < n-1; i++){\n        for(long j =\
    \ i+1; j < n; j++){\n            long sum = i*i - i + 1 + j*j - j + 1;\n     \
    \       long third = sqrt(sum);\n            if(third*third == sum)\n        \
    \        count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    int a[n];\n    for(int i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n\
    \    }\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++)\
    \ {\n            for(int k = j + 1; k < n; k++) {\n                if((a[i] +\
    \ a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;", "    long c=0;\n    for(long\
    \ i=1;i<n-1;i++)\n    {\n        for(long j=i+1;j<n;j++)\n        {\n        \
    \    for(long k=j+1;k<=n;k++)\n            {\n                long a=i*i-i+1;\n\
    \                long b=j*j-j+1;\n                long x=k*k-k+1;\n          \
    \      if((a+b+x)%3==0)\n                {\n                    c++;\n       \
    \         }\n            }\n        }\n    }\n    return c;", "    if(n <= 3)\n\
    \        return 0;\n    long count = 0;\n    for(long i = 0; i < n; i++) {\n \
    \       for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k <\
    \ n; k++) {\n                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1)\
    \ % 3 == 0)\n                    count++;\n            }\n        }\n    }\n \
    \   return count;", "    assert(n >= 3);\n    return (n - 1) * (n - 2) / 2;",
  "    /* Don't write main().\n     * Don't read input, it is passed as function argument.\n\
    \     * Return output and don't print it.\n     * Taking input and printing output\
    \ is handled automatically.\n     */\n    long i=1,j=2,k=3,count=0;\n    while(k<=n){\n\
    \        if((i+j+k)%3==0){\n            count++;\n        }\n        i++;\n  \
    \      j++;\n        k++;\n    }\n    return count;", "    long count = 0;\n \
    \   for(long i = 1; i <= n; i++) {\n        for(long j = i+1; j <= n; j++) {\n\
    \            for(long k = j+1; k <= n; k++) {\n                if((i*i - i + 1\
    \ + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count;", "\tlong\
    \ cnt = 0;\n\tstd::vector<long> a;\n\t// Time Complexity: O(n)\n\tfor (long i\
    \ = 1; i <= n; i++) {\n\t\ta.push_back(i * i - i + 1);\n\t}\n\tfor (long i = 0;\
    \ i < n; i++) {\n\t\tfor (long j = i + 1; j < n; j++) {\n\t\t\tfor (long k = j\
    \ + 1; k < n; k++) {\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\t\
    cnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;", "    // Write your code\
    \ here\n    long count = 0;\n    for(long i = 1; i < n; i++){\n        for(long\
    \ j = i+1; j < n; j++){\n            for(long k = j+1; k < n; k++){\n        \
    \        if(((i*i-i+1)+(j*j-j+1)+(k*k-k+1))%3 == 0){\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;", "  //\
    \ Write your code here\n  // To print results to the standard output you can use\
    \ printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long a[n];\n  for(long\
    \ i=0;i<n;i++) {\n    a[i] = i*i - i + 1;\n  }\n  long triple_count = 0;\n  for(long\
    \ i=0;i<n;i++) {\n    for(long j=i+1;j<n;j++) {\n      for(long k=j+1;k<n;k++)\
    \ {\n        if((a[i] + a[j] + a[k]) % 3 == 0) {\n          triple_count++;\n\
    \        }\n      }\n    }\n  }\n  return triple_count;", "    long *a = new long[n];\n\
    \    long count = 0;\n    for(long i = 0; i < n; i++) {\n        a[i] = i * i\
    \ - i + 1;\n    }\n    for(long i = 0; i < n - 2; i++) {\n        for(long j =\
    \ i + 1; j < n - 1; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n\
    \            }\n        }\n    }\n    return count;", "    long no_of_triples\
    \ = 0;\n    for(long i = 1; i < n; i++) {\n        for(long j = i + 1; j < n;\
    \ j++) {\n            for(long k = j + 1; k < n; k++) {\n                if((i*i\
    \ - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n                    no_of_triples++;\n\
    \                }\n            }\n        }\n    }\n    return no_of_triples;",
  "    long res = 0;\n    std::vector<long> b(n, 0);\n    std::vector<std::vector<int>>\
    \ a(n, std::vector<int>(n, 0));\n    for (int i = 0; i < n; i++) {\n        b[i]\
    \ = i * i - i + 1;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int\
    \ j = i + 1; j < n; j++) {\n            a[i][j] = (b[i] + b[j]) % 3;\n       \
    \ }\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if\
    \ (a[i][j] + a[j][k] + a[i][k] == 0) {\n                    res++;\n         \
    \       }\n            }\n        }\n    }\n    return res;", "\tint a[n], count=0;\n\
    \tfor(int i=0; i<n; i++)\n\t\ta[i] = i*i - i + 1;\n\tfor(int i=0; i<n; i++)\n\t\
    \tfor(int j=i+1; j<n; j++)\n\t\t\tfor(int k=j+1; k<n; k++)\n\t\t\t\tif((a[i] +\
    \ a[j] + a[k])%3 == 0)\n\t\t\t\t\tcount++;\n\treturn count;", "\tlong result=0;\n\
    \tfor(long i=1;i<n-1;i++)\n\t{\n\t\tlong prod=i*i-i+1;\n\t\tfor(long j=i+1;j<n;j++)\n\
    \t\t{\n\t\t\tprod+=j*j-j+1;\n\t\t\tfor(long k=j+1;k<=n;k++)\n\t\t\t{\n\t\t\t\t\
    prod+=k*k-k+1;\n\t\t\t\tif(prod%3==0)\n\t\t\t\t{\n\t\t\t\t\tresult++;\n\t\t\t\t\
    }\n\t\t\t\tprod-=k*k-k+1;\n\t\t\t}\n\t\t\tprod-=j*j-j+1;\n\t\t}\n\t}\n\treturn\
    \ result;", "    long remainder = n % 3;\n    return ((n / 3) * (n - 1)) / 2;",
  "\tlong tot = 0;\n\tlong n1 = n-1;\n\tlong n2 = n-2;\n\tlong n3 = n-3;\n\tlong n1_3\
    \ = n1/3;\n\tlong n2_3 = n2/3;\n\tlong n3_3 = n3/3;\n\tlong sum = n1_3 + n2_3\
    \ + n3_3;\n\ttot = sum*(sum+1)/2;\n\tlong n1_3_mod = n1%3;\n\tlong n2_3_mod =\
    \ n2%3;\n\tlong n3_3_mod = n3%3;\n\tsum = 0;\n\tif(n1_3_mod == 1)\n\t\tsum +=\
    \ n1_3;\n\tif(n2_3_mod == 1)\n\t\tsum += n2_3;\n\tif(n3_3_mod == 1)\n\t\tsum +=\
    \ n3_3;\n\ttot -= sum*(sum+1)/2;\n\tsum = 0;\n\tif(n1_3_mod == 2)\n\t\tsum +=\
    \ n1_3;\n\tif(n2_3_mod == 2)\n\t\tsum += n2_3;\n\tif(n3_3_mod == 2)\n\t\tsum +=\
    \ n3_3;\n\ttot -= sum*(sum+1)/2;\n\treturn tot;", "    if(n<3) return 0;\n   \
    \ long res=0;\n    std::vector<long> a(n);\n    for(int i=0;i<n;i++) a[i]=i*i-i+1;\n\
    \    for(int i=0;i<n-2;i++){\n        for(int j=i+1;j<n-1;j++){\n            for(int\
    \ k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0) res++;\n        \
    \    }\n        }\n    }\n    return res;", "  // Write your code here\n  long\
    \ res = 0;\n  for(long i = 0; i < n; i++)\n  {\n    for(long j = i + 1; j < n;\
    \ j++)\n    {\n      for(long k = j + 1; k < n; k++)\n      {\n        if(((i\
    \ * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0)\n        {\n   \
    \       res++;\n        }\n      }\n    }\n  }\n  return res;", "    long result\
    \ = 0;\n    for (long i = 1; i < n; i++) {\n        for (long j = i + 1; j < n;\
    \ j++) {\n            for (long k = j + 1; k < n; k++) {\n                result\
    \ += ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0;\n       \
    \     }\n        }\n    }\n    return result;", "    long cnt1 = 0, cnt2 = 0,\
    \ cnt3 = 0;\n    for(long i = 1; i <= n; i++) {\n        if(i % 3 == 0) cnt3++;\n\
    \        else if(i % 3 == 1) cnt1++;\n        else cnt2++;\n    }\n    long max\
    \ = 0;\n    max += cnt1 * cnt2 * cnt3;\n    max += cnt1 * cnt1 * cnt3;\n    max\
    \ += cnt2 * cnt2 * cnt3;\n    max += cnt1 * cnt2 * cnt2;\n    max += cnt2 * cnt3\
    \ * cnt3;\n    max += cnt1 * cnt3 * cnt3;\n    return max;", "    long max_i =\
    \ n / 3, max_j = 2 * n / 3;\n    return max_i * max_j * (max_j - 1) / 2;", "\t\
    if (n < 3)\n\t\treturn 0;\n\tif (n % 3 == 0)\n\t\treturn ((n-2) * (n-1) * n) /\
    \ (6 * 3);\n\telse if (n % 3 == 1)\n\t\treturn ((n-2) * (n-1) * (n-3)) / (6 *\
    \ 3);\n\telse\n\t\treturn ((n-1) * (n-2) * (n-3)) / (6 * 3);", '  return std::pow(n,
    2) - std::pow(n, 2)/3;', "    if(n <= 2) return 0;\n    long dp[n+1] = {0};\n\
    \    dp[0] = 0;\n    dp[1] = 0;\n    dp[2] = 0;\n    for(long i = 3; i <= n; i++)\
    \ {\n        dp[i] = (i*i - i + 1 + dp[i-1]) % 3 == 0 ? dp[i-1] + 1 : dp[i-1];\n\
    \    }\n    return dp[n];", "    long res = 0;\n    std::vector<long> a(n);\n\
    \    for (int i = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for (int\
    \ i = 0; i < n - 2; i++)\n        for (int j = i + 1; j < n - 1; j++)\n      \
    \      for (int k = j + 1; k < n; k++)\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0)\n                    res++;\n    return res;", "    // Write your\
    \ code here\n    long j,k,count=0;\n    int ans =0;\n    std::vector<int> a(n);\n\
    \    for(int i=0;i<n;i++)\n    {\n        a[i] = (i+1)*(i+1) - (i+1) + 1;\n  \
    \  }\n    for(int i=0;i<n;i++)\n    {\n        j=i+1;\n        k=j+1;\n      \
    \  for(;j<n;j++)\n        {\n            for(;k<n;k++)\n            {\n      \
    \          if((a[i]+a[j]+a[k])%3==0)\n                {\n                    count++;\n\
    \                }\n            }\n            k=j+1;\n        }\n    }\n    return\
    \ count;", "    // Write your code here\n    return 3*n*(n-1)*(n-2)/6;", "   \
    \ // Write your code here\n    long ans=0;\n    std::vector<long> a(n,0);\n  \
    \  for(long i=0;i<n;i++){\n        a[i]=i*i-i+1;\n    }\n    for(long i=0;i<n;i++){\n\
    \        for(long j=i+1;j<n;j++){\n            for(long k=j+1;k<n;k++){\n    \
    \            if((a[i]+a[j]+a[k])%3==0){\n                    ans++;\n        \
    \        }\n            }\n        }\n    }\n    return ans;", "    long count\
    \ = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long j = i + 1; j <= n;\
    \ j++) {\n            for(long k = j + 1; k <= n; k++) {\n                if((i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                 \
    \   count++;\n                }\n            }\n        }\n    }\n    return count;",
  "    // Write your code here\n    // return 0;\n    long triples = 0;\n    for(long\
    \ i = 1; i < n; i++)\n    {\n        for(long j = i+1; j < n; j++)\n        {\n\
    \            for(long k = j+1; k < n; k++)\n            {\n                //\
    \ std::cout << \"(\" << i << \", \" << j << \", \" << k << \") : \" << i*i - i\
    \ + 1 << \", \" << j*j - j + 1 << \", \" << k*k - k + 1 << \"\\n\";\n        \
    \        if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n            \
    \    {\n                    // std::cout << \"(\" << i << \", \" << j << \", \"\
    \ << k << \") : \" << i*i - i + 1 << \", \" << j*j - j + 1 << \", \" << k*k -\
    \ k + 1 << \"\\n\";\n                    triples++;\n                }\n     \
    \       }\n        }\n    }\n    return triples;", "    long sum;\n    int count\
    \ = 0;\n    for(int i = 1; i < n; i++) {\n        for(int j = i + 1; j < n; j++)\
    \ {\n            for(int k = j + 1; k < n; k++) {\n                sum = i*i -\
    \ i + 1 + j*j - j + 1 + k*k - k + 1;\n                if(sum % 3 == 0)\n     \
    \               count++;\n            }\n        }\n    }\n    return count;",
  "    long max_triples = 0;\n    std::vector<int> a(n);\n    for(int i = 0; i < n;\
    \ i++)\n        a[i] = i * i - i + 1;\n    for(int i = 0; i < n; i++)\n      \
    \  for(int j = i + 1; j < n; j++)\n            for(int k = j + 1; k < n; k++)\n\
    \                if((a[i] + a[j] + a[k]) % 3 == 0)\n                    max_triples++;\n\
    \    return max_triples;", "    // Write your code here\n    long count = 0;\n\
    \    if(n<=2)\n        return 0;\n    for(long i=0;i<n-2;i++)\n    {\n       \
    \ for(long j=i+1;j<n-1;j++)\n        {\n            for(long k=j+1;k<n;k++)\n\
    \            {\n                long sum = i*i-i+1 + j*j-j+1 + k*k-k+1;\n    \
    \            if(sum%3==0)\n                    count++;\n            }\n     \
    \   }\n    }\n    return count;", '  return 0;', "    // Write your code here\n\
    \    long count_3,count_2,count_1,count_1_minus,count_2_minus,count_3_minus;\n\
    \    count_3 = (n/3)*2;\n    count_2 = (n/3);\n    count_1 = (n/3)*2;\n    count_1_minus\
    \ = n%3;\n    count_2_minus = n%3;\n    count_3_minus = n%3;\n    if(count_1_minus\
    \ > 1)\n    {\n        count_1_minus = 2;\n        count_2_minus = 1;\n    }\n\
    \    if(count_1_minus == 2)\n    {\n        count_2 = count_2 + 1;\n    }\n  \
    \  count_1 = count_1 - count_1_minus;\n    count_2 = count_2 - count_2_minus;\n\
    \    count_3 = count_3 - count_3_minus;\n    return count_1*count_2*count_3;",
  "  long res = 0;\n  vector<int>a(n);\n  for(int i=0;i<n;i++){\n    a[i] = i*i -\
    \ i + 1;\n  }\n  for(int i=0;i<n;i++){\n    for(int j=i+1;j<n;j++){\n      for(int\
    \ k=j+1;k<n;k++){\n        if((a[i] + a[j] + a[k])%3 == 0){\n          res++;\n\
    \        }\n      }\n    }\n  }\n  return res;", "    if(n < 3) {\n        return\
    \ 0;\n    }\n    std::vector<long> a(n);\n    for(long i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    std::unordered_map<long, long> um;\n\
    \    for(auto val : a) {\n        um[val]++;\n    }\n    std::vector<long> aa;\n\
    \    std::copy(a.begin(), a.end(), std::back_inserter(aa));\n    std::sort(aa.begin(),\
    \ aa.end());\n    long cnt = 0;\n    for(long i = 0; i < n; i++) {\n        long\
    \ a_i = aa[i];\n        long j = i + 1;\n        while(j < n && aa[j] < a_i *\
    \ 2) {\n            long a_j = aa[j];\n            long k = j + 1;\n         \
    \   while(k < n && aa[k] < a_i * 2) {\n                long a_k = aa[k];\n   \
    \             long sum = a_i + a_j + a_k;\n                if(sum % 3 == 0) {\n\
    \                    long aa_i = a_i / 2;\n                    long aa_j = a_j\
    \ / 2;\n                    long aa_k = a_k / 2;\n                    if(aa_i\
    \ > 0 && aa_j > 0 && aa_k > 0) {\n                        long max_triples = um[aa_i]\
    \ * um[aa_j] * um[aa_k];\n                        if(aa_i == aa_j && aa_j == aa_k)\
    \ {\n                            max_triples = max_triples / 6;\n            \
    \            } else if(aa_i == aa_j || aa_j == aa_k || aa_k == aa_i) {\n     \
    \                       max_triples = max_triples / 2;\n                     \
    \   }\n                        cnt += max_triples;\n                    }\n  \
    \              }\n                k++;\n            }\n            j++;\n", " \
    \ // Write your code here\n  if(n == 1) return 0;\n  std::vector<long> a(n);\n\
    \  for(long i = 0; i < n; i++) {\n    a[i] = (i * i) - i + 1;\n  }\n  long res\
    \ = 0;\n  for(long i = 0; i < n - 2; i++) {\n    for(long j = i + 1; j < n - 1;\
    \ j++) {\n      for(long k = j + 1; k < n; k++) {\n        if((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n          res++;\n        }\n      }\n    }\n  }\n  return res;",
  "    long *arr = new long[n];\n    for(long i = 0; i < n; i++)\n        arr[i] =\
    \ i * i - i + 1;\n    long count = 0;\n    for(long i = 0; i < n; i++)\n     \
    \   for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n\
    \                if((arr[i] + arr[j] + arr[k]) % 3 == 0)\n                   \
    \ count++;\n    return count;", '    // Write your code here', "\tlong ans = 0;\n\
    \tint mod_3[3] = {1, -1, 0};\n\tfor(int i = 0; i < 3; i++) {\n\t\tfor(int j =\
    \ 0; j < 3; j++) {\n\t\t\tint k = mod_3[(i + j) % 3];\n\t\t\tint count = 0;\n\t\
    \t\tfor(int l = 0; l < n; l++) {\n\t\t\t\tif(l * l - l + 1 % 3 == k)\n\t\t\t\t\
    \tcount++;\n\t\t\t}\n\t\t\tans += count * (count - 1) * (count - 2) / 6;\n\t\t\
    }\n\t}\n\treturn ans;", "    long nb_triples = 0;\n    for (long i = 1; i < n;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long k\
    \ = j + 1; k < n; k++) {\n                long elt_i = i * i - i + 1;\n      \
    \          long elt_j = j * j - j + 1;\n                long elt_k = k * k - k\
    \ + 1;\n                if ((elt_i + elt_j + elt_k) % 3 == 0) {\n            \
    \        std::cout << \"[\" << elt_i << \", \" << elt_j << \", \" << elt_k <<\
    \ \"]\" << std::endl;\n                    nb_triples++;\n                }\n\
    \            }\n        }\n    }\n    return nb_triples;", "    long ret = 0;\n\
    \    ret = (n*(n-1)*(n-2))/6;\n    return ret;", "    long sum = 0;\n    for(long\
    \ i = 1; i <= n; i++) {\n        sum += i * i - i + 1;\n    }\n    return sum;",
  "    long count = 0;\n    if(n >= 3) {\n        count = (n-2)*(n-1)*n/6;\n    }\n\
    \    return count;", "    assert(n > 0);\n    long cnt = 0;\n    for (long i =\
    \ 1; i < n - 1; i++) {\n        for (long j = i + 1; j < n; j++) {\n         \
    \   for (long k = j + 1; k <= n; k++) {\n                if ((i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                    cnt++;\n   \
    \             }\n            }\n        }\n    }\n    return cnt;", "    // Write\
    \ your code here\n    long count = 0;\n    for(long i = 1; i < n; i++){\n    \
    \    for(long j = i+1; j < n; j++){\n            for(long k = j+1; k < n; k++){\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0){\n\
    \                    count += 1;\n                }\n            }\n        }\n\
    \    }\n    return count;", "    // long a[n];\n    long a[n] = {0};\n    for(long\
    \ i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    // for(long\
    \ i = 0; i < n; i++) {\n    //     std::cout << a[i] << \" \";\n    // }\n   \
    \ // std::cout << std::endl;\n    long m = 0;\n    for(long i = 0; i < n; i++)\
    \ {\n        for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1;\
    \ k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n       \
    \             m++;\n                }\n            }\n        }\n    }\n    return\
    \ m;", "    long a[n];\n    int ct=0;\n    for(int i=0;i<n;i++){\n        a[i]=i*i-i+1;\n\
    \    }\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n         \
    \   for(int k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n    \
    \                ct++;\n                }\n            }\n        }\n    }\n \
    \   return ct;", "\tif (n < 3) return 0;\n\tlong n0 = 0, n1 = 0, n2 = 0;\n\tfor\
    \ (long i = 1; i <= n; i++) {\n\t\tif ((i * i - i + 1) % 3 == 0) n0++;\n\t\telse\
    \ if ((i * i - i + 1) % 3 == 1) n1++;\n\t\telse n2++;\n\t}\n\treturn n0 * (n0\
    \ - 1) * (n0 - 2) / 6 + n1 * n2 * (n1 - 1) / 2 + n1 * n2 * (n2 - 1) / 2;", " \
    \   if(n<=2)\n    return 0;\n    long long r=0;\n    r=(n-2)*(n-1)*n;\n    r=r/6;\n\
    \    return r;", "    std::vector<long> a(n);\n    for (long i = 0; i < n; i++)\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n         \
    \   for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for(long i =\
    \ 1; i <= n - 2; i++) {\n        for(long j = i + 1; j <= n - 1; j++) {\n    \
    \        for(long k = j + 1; k <= n; k++) {\n                if((i*i - i + 1 +\
    \ j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n                    count++;\n     \
    \           }\n            }\n        }\n    }\n    return count;", "    long\
    \ ans = 0;\n    // Write your code here.\n    // return ans;\n    std::vector<long>\
    \ a(n);\n    for(long i = 0; i < n; i++) {\n        a[i] = (i*i) - i + 1;\n  \
    \  }\n    for(long i = 0; i < n-2; i++) {\n        for(long j = i+1; j < n-1;\
    \ j++) {\n            for(long k = j+1; k < n; k++) {\n                if((a[i]\
    \ + a[j] + a[k]) % 3 == 0) {\n                    ans++;\n                }\n\
    \            }\n        }\n    }\n    return ans;", "  long sum = 0;\n  long count\
    \ = 0;\n  for(long i = 1; i <= n; i++) {\n    sum += i;\n    if(sum % 3 == 0)\n\
    \      count++;\n  }\n  return count;", "    long triples = 0;\n    // The maximum\
    \ number of triples is nCr(n, 3).\n    long max_triples = (n * (n - 1) * (n -\
    \ 2)) / 6;\n    // a[i] = i * i - i + 1.\n    // a[i] % 3 == 0 => i * i - i +\
    \ 1 % 3 == 0\n    // i * i - i + 1 % 3 == 0 => i * i % 3 == i % 3\n    // i *\
    \ i % 3 == i % 3 => (i + 1) * (i + 1) % 3 == (i + 1) % 3\n    // (i + 1) * (i\
    \ + 1) % 3 == (i + 1) % 3 => (i + 2) * (i + 2) % 3 == (i + 2) % 3\n    // (i +\
    \ 2) * (i + 2) % 3 == (i + 2) % 3 => (i + 3) * (i + 3) % 3 == (i + 3) % 3\n  \
    \  // (i + 3) * (i + 3) % 3 == (i + 3) % 3 => (i + 4) * (i + 4) % 3 == (i + 4)\
    \ % 3\n    // (i + 4) * (i + 4) % 3 == (i + 4) % 3 => (i + 5) * (i + 5) % 3 ==\
    \ (i + 5) % 3\n    // (i + 5) * (i + 5) % 3 == (i + 5) % 3 => (i + 6) * (i + 6)\
    \ % 3 == (i + 6) % 3\n    // We can see that whenever i % 3 == 0, a[i], a[i +\
    \ 1], a[i + 2] \n    // may form a triplet and a[i + 3], a[i + 4], a[i + 5] may\
    \ not.\n    // As there are nCr(n, 3) triplets possible, we can say that\n   \
    \ // nCr(n, 3) / 6 number of triples will be formed\n    // in the series a[i],\
    \ a[i + 1], a[i + 2] where i % 3 == 0.\n    long multiples", "    long rem[3]\
    \ = {0};\n    for(long i = 1; i <= n; i++) {\n        rem[(i * i - i + 1) % 3]++;\n\
    \    }\n    long ans = (rem[0] * (rem[0] - 1) * (rem[0] - 2)) / 6;\n    ans +=\
    \ (rem[1] * (rem[1] - 1) * (rem[2])) / 2;\n    ans += (rem[2] * (rem[2] - 1) *\
    \ (rem[1])) / 2;\n    return ans;", "    long result = 0;\n    std::vector<long>\
    \ arr(n);\n    for(int i = 0; i < n; i++) {\n        arr[i] = i * i - i + 1;\n\
    \    }\n    for(int i = 0; i < n - 2; i++) {\n        for(int j = i + 1; j < n\
    \ - 1; j++) {\n            for(int k = j + 1; k < n; k++) {\n                if((arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0) {\n                    result++;\n            \
    \    }\n            }\n        }\n    }\n    return result;", "\tlong int x, y,\
    \ z, i, j, k, sum, count=0;\n\t// n = 5\n\t// i = 0 to 4\n\t// j = i + 1 to 4\n\
    \t// k = j + 1 to 4\n\tfor(i=0; i<n; i++) {\n\t\tx = i*i - i + 1;\n\t\tfor(j=i+1;\
    \ j<n; j++) {\n\t\t\ty = j*j - j + 1;\n\t\t\tfor(k=j+1; k<n; k++) {\n\t\t\t\t\
    z = k*k - k + 1;\n\t\t\t\tsum = x + y + z;\n\t\t\t\tif(sum % 3 == 0)\n\t\t\t\t\
    \tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;", '    //1,3,7,13,21,31,43,57,73,91,111,133,157,183,211,241,273,307,343,381,421,463,507,553,601,651,703,757,813,871,931,993,1057,1123,1191,1261,1333,1407,1483,1561,1641,1723,1807,1893,1981,2071,2163,2257,2353,2451,2551,2653,2757,2863,2971,3081,3193,3307,3423,3541,3661,3783,3907,4033,4161,4291,4423,4557,4693,4831,4971,5113,5257,5403,5551,5701,5853,6007,6163,6321,6481,6643,6807,6973,7141,7311,7483,7657,7833,8011,8191,8373,8557,8743,8931,9121,9313,9507,9703,9901,10101,10303,10507,10713,10921,11131,11343,11557,11773,11991,12211,12433,12657,12883,13111,13340,13570,13801,14033,14267,14503,14741,14981,15224,15468,15713,15960,16209,16459,16711,16965,17221,17478,17737,17997,18259,18523,18788,19055,19323,19593,19864,20137,20411,20687,20965,21245,21526,21809,22093,22379,22667,22956,23247,23539,23833,24128,24425,24723,25023,25324,25626,25930,26235,26541,26849,27158,27468,27779,28092,28406,28722,29039,29357,29677,29998,30321,30644,30970,312',
  "    long count = 0;\n    std::vector<int> a;\n    // 1. Create the array\n    for(int\
    \ i = 1; i <= n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(int\
    \ i = 0; i < n - 2; i++) {\n        for(int j = i + 1; j < n - 1; j++) {\n   \
    \         for(int k = j + 1; k < n; k++) {\n                if((a[i] + a[j] +\
    \ a[k]) % 3 == 0) {\n                    count++;\n                }\n       \
    \     }\n        }\n    }\n    return count;", "    int n_div_3 = n / 3;\n   \
    \ int n_mod_3 = n % 3;\n    return n_div_3 * (n_div_3 - 1) / 2;", "    if(n ==\
    \ 1)\n        return 0;\n    // std::cout << \"n = \" << n << std::endl;\n   \
    \ if(n%3 == 0)\n        return (n-1)*(n-2)*(n-3)/6;\n    if(n%3 == 1)\n      \
    \  return (n-2)*(n-2)*(n-3)/6;\n    return (n-1)*(n-1)*(n-3)/6;", "    long res\
    \ = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long j = i+1; j <= n;\
    \ j++) {\n            for(long k = j+1; k <= n; k++) {\n                if((i*i-i+1\
    \ + j*j-j+1 + k*k-k+1) % 3 == 0) {\n                    res++;\n             \
    \   }\n            }\n        }\n    }\n    return res;", "    if(n == 0) return\
    \ 0;\n    long numTriples = 0;\n    std::vector<long> oddVal;\n    std::vector<long>\
    \ evenVal;\n    for(long i = 1; i <= n; i++) {\n        long currVal = i * i -\
    \ i + 1;\n        if(currVal % 2 == 0) evenVal.push_back(currVal);\n        else\
    \ oddVal.push_back(currVal);\n    }\n    std::sort(oddVal.begin(), oddVal.end());\n\
    \    std::sort(evenVal.begin(), evenVal.end());\n    for(long i = 0; i < evenVal.size();\
    \ i++) {\n        for(long j = i + 1; j < evenVal.size(); j++) {\n           \
    \ if((evenVal[i] + evenVal[j]) % 3 == 0) {\n                numTriples += oddVal.size();\n\
    \            }\n        }\n    }\n    for(long i = 0; i < oddVal.size(); i++)\
    \ {\n        for(long j = i + 1; j < oddVal.size(); j++) {\n            if((oddVal[i]\
    \ + oddVal[j]) % 3 == 0) {\n                numTriples += evenVal.size();\n  \
    \          }\n        }\n    }\n    return numTriples;", "  long count = 0;\n\
    \  long sum = 0;\n  if(n < 3)\n    return 0;\n  else{\n    long i = 1;\n    while(i\
    \ < n - 1){\n      long num = i * i - i + 1;\n      if(num % 3 == 0){\n      \
    \  count++;\n        sum = sum + (n - (i + 1));\n      }\n      i++;\n    }\n\
    \  }\n  return sum;", "    long maxTriples = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        for(long j = i + 1; j <= n; j++) {\n            for(long k = j +\
    \ 1; k <= n; k++) {\n                if(((i * i - i + 1) + (j * j - j + 1) + (k\
    \ * k - k + 1)) % 3 == 0) {\n                    maxTriples++;\n             \
    \   }\n            }\n        }\n    }\n    return maxTriples;", "    /*\n   \
    \  * Write your code here.\n     */\n    return (n-2)*(n-1)*n / 6;", "    // set\
    \ your initial count to 0\n    long count = 0;\n    // for every number in the\
    \ range of 1 to n\n    for(long i = 1; i <= n; i++) {\n        // for every number\
    \ in the range of 1 to n\n        for(long j = 1; j <= n; j++) {\n           \
    \ // for every number in the range of 1 to n\n            for(long k = 1; k <=\
    \ n; k++) {\n                // add 1 to the count if i < j < k, and i + j + k\
    \ is a multiple of 3\n                if(i < j && j < k && (i + j + k) % 3 ==\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    // return the count\n    return count;"]
stop_tokens:
- "\n}"
