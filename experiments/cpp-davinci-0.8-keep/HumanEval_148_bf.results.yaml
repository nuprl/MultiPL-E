name: HumanEval_148_bf
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::map<std::string, int> mp = {{\"Mercury\", 0},\
    \ {\"Venus\", 1}, \n\t{\"Earth\", 2}, {\"Mars\", 3}, {\"Jupiter\", 4}, {\"Saturn\"\
    , 5}, \n\t{\"Uranus\", 6}, {\"Neptune\", 7}};\n\tif (mp.find(planet1) == mp.end()\
    \ || mp.find(planet2) == mp.end())\n\t\treturn std::make_tuple();\n\tint first\
    \ = mp[planet1];\n\tint second = mp[planet2];\n\tif (first > second)\n\t\tstd::swap(first,\
    \ second);\n\tstd::vector<std::string> vc = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\tstd::vector<std::string>\
    \ ans;\n\tfor (int i = first + 1; i < second; i++)\n\t\tans.push_back(vc[i]);\n\
    \treturn std::make_tuple(ans[0], ans[1], ans[2], ans[3], ans[4]);\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpujcls6ov.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpujcls6ov.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpujcls6ov.cpp:21:25: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   21 |   return\
    \ std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n      |            \
    \             |\n      |                         std::tuple<>\n/tmp/tmpujcls6ov.cpp:30:24:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   30 |  return\
    \ std::make_tuple(ans[0], ans[1], ans[2], ans[3], ans[4]);\n      |         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                        |\n      |                        std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujcls6ov.cpp:2:\n/tmp/tmpujcls6ov.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpujcls6ov.cpp:34:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   34 |     assert(candidat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result{};\n    int index1 = -1;\n    int index2\
    \ = -1;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            index1 = i;\n        }\n        if (planets[i] ==\
    \ planet2) {\n            index2 = i;\n        }\n    }\n    if (index1 > index2)\
    \ {\n        index1 = index1 + index2;\n        index2 = index1 - index2;\n  \
    \      index1 = index1 - index2;\n    }\n    if (index1 == -1 || index2 == -1)\
    \ {\n        return {};\n    }\n    for (int i = index1 + 1; i < index2; i++)\
    \ {\n        result.push_back(planets[i]);\n    }\n    return std::make_tuple(result[0],\
    \ result[1], result[2], result[3], result[4]);\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpl_arvis_.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpl_arvis_.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpl_arvis_.cpp:40:27: error: cannot\
    \ convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   40 |     return\
    \ std::make_tuple(result[0], result[1], result[2], result[3], result[4]);\n  \
    \    |            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                           |\n      |                           std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_arvis_.cpp:2:\n/tmp/tmpl_arvis_.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpl_arvis_.cpp:44:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   44 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::map<std::string, int> planets{ {\"Mercury\",\
    \ 1}, {\"Venus\", 2}, {\"Earth\", 3}, {\"Mars\", 4}, {\"Jupiter\", 5}, {\"Saturn\"\
    , 6}, {\"Uranus\", 7}, {\"Neptune\", 8} };\n  std::tuple<std::string, > result;\n\
    \  if (planets.find(planet1) == planets.end() || planets.find(planet2) == planets.end())\
    \ {\n    return result;\n  }\n  if (planets[planet1] < planets[planet2]) {\n \
    \   for (int i = planets[planet1] + 1; i < planets[planet2]; i++) {\n      for\
    \ (auto &p : planets) {\n        if (p.second == i) {\n          std::string s\
    \ = p.first;\n          std::tuple<std::string, > t(s);\n          result = std::tuple_cat(result,\
    \ t);\n        }\n      }\n    }\n  } else {\n    for (int i = planets[planet2]\
    \ + 1; i < planets[planet1]; i++) {\n      for (auto &p : planets) {\n       \
    \ if (p.second == i) {\n          std::string s = p.first;\n          std::tuple<std::string,\
    \ > t(s);\n          result = std::tuple_cat(result, t);\n        }\n      }\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = bf;\n   \
    \ assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpyxvin2rq.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpyxvin2rq.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpyxvin2rq.cpp:18:27: error: template\
    \ argument 2 is invalid\n   18 |   std::tuple<std::string, > result;\n      |\
    \                           ^\n/tmp/tmpyxvin2rq.cpp:27:35: error: template argument\
    \ 2 is invalid\n   27 |           std::tuple<std::string, > t(s);\n      |   \
    \                                ^\n/tmp/tmpyxvin2rq.cpp:27:39: error: cannot\
    \ convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019 in initialization\n   27 |           std::tuple<std::string,\
    \ > t(s);\n      |                                       ^\n      |          \
    \                             |\n      |                                     \
    \  std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmpyxvin2rq.cpp:28:44:\
    \ error: no matching function for call to \u2018tuple_cat(int&, int&)\u2019\n\
    \   28 |           result = std::tuple_cat(result, t);\n      |              \
    \                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpyxvin2rq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1597:5:\
    \ note: candidate: \u2018template<class ... _Tpls, class> constexpr typename std::__tuple_cat_result<_Tpls\
    \ ...>::__type std::tuple_cat(_Tpls&& ...)\u2019\n 1597 |     tuple_cat(_Tpls&&...\
    \ __tpls)\n      |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1597:5:\
    \ note:   template argument deduction/substitution failed:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1594:31:\
    \ error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false,\
    \ void>\u2019\n 1594 |   template<typename... _Tpls, typename = typename\n   \
    \   |                               ^~~~~~~~\n/tmp/tmpyxvin2rq.cpp:37:35: error:\
    \ t"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n    std::vector<std::string>\
    \ planets;\n    planets.push_back(\"Mercury\");\n    planets.push_back(\"Venus\"\
    );\n    planets.push_back(\"Earth\");\n    planets.push_back(\"Mars\");\n    planets.push_back(\"\
    Jupiter\");\n    planets.push_back(\"Saturn\");\n    planets.push_back(\"Uranus\"\
    );\n    planets.push_back(\"Neptune\");\n    int p1 = -1;\n    int p2 = -1;\n\
    \    for(int i = 0; i < planets.size(); i++){\n        if(planets[i] == planet1){\n\
    \            p1 = i;\n        }\n        if(planets[i] == planet2){\n        \
    \    p2 = i;\n        }\n    }\n    if(p1 == -1 || p2 == -1){\n        return\
    \ std::make_tuple();\n    }\n    std::vector<std::string> res;\n    int lower\
    \ = std::min(p1, p2);\n    int upper = std::max(p1, p2);\n    for(int i = lower\
    \ + 1; i < upper; i++){\n        res.push_back(planets[i]);\n    }\n    return\
    \ std::make_tuple(res);\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6vox5owl.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp6vox5owl.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp6vox5owl.cpp:38:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   38 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmp6vox5owl.cpp:46:27: error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   46 |     return std::make_tuple(res);\n      |            ~~~~~~~~~~~~~~~^~~~~\n\
    \      |                           |\n      |                           std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6vox5owl.cpp:2:\n/tmp/tmp6vox5owl.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp6vox5owl.cpp:50:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   50 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /sha"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  // Your Code\n  return {}\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpjpdg7dp3.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpjpdg7dp3.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpjpdg7dp3.cpp:18:12: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   18 |   return {}\n      |     \
    \       ^\n      |            ;\n   19 | }\n      | ~           \nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n     \
    \            from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjpdg7dp3.cpp:2:\n/tmp/tmpjpdg7dp3.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpjpdg7dp3.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpjpdg7dp3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::tuple<std::string, > bf;\n    if (planet1 ==\
    \ \"Mercury\") {\n        if (planet2 == \"Venus\") {\n            bf = std::make_tuple(\"\
    Venus\");\n        }\n        else if (planet2 == \"Earth\") {\n            bf\
    \ = std::make_tuple(\"Venus\", \"Earth\");\n        }\n        else if (planet2\
    \ == \"Mars\") {\n            bf = std::make_tuple(\"Venus\", \"Earth\", \"Mars\"\
    );\n        }\n        else if (planet2 == \"Jupiter\") {\n            bf = std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n        }\n        else if (planet2\
    \ == \"Saturn\") {\n            bf = std::make_tuple(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\");\n        }\n        else if (planet2 == \"Uranus\"\
    ) {\n            bf = std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\");\n        }\n        else if (planet2 == \"Neptune\"\
    ) {\n            bf = std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n        }\n        else if (planet2 ==\
    \ \"Mercury\") {\n            bf = std::make_tuple();\n        }\n    }\n    else\
    \ if (planet1 == \"Venus\") {\n        if (planet2 == \"Mercury\") {\n       \
    \     bf = std::make_tuple();\n        }\n        else if (planet2 == \"Earth\"\
    ) {\n            bf = std::make_tuple(\"Earth\");\n        }\n        else if\
    \ (planet2 == \"Mars\") {\n            bf = std::make_tuple(\"Earth\", \"Mars\"\
    );\n        }\n        else if (planet2 == \"Jupiter\") {\n            bf = std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\");\n        }\n        else if (planet2 == \"Saturn\"\
    ) {\n            bf = std::make_tuple\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpy2wzp5sh.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpy2wzp5sh.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpy2wzp5sh.cpp:17:29: error: template\
    \ argument 2 is invalid\n   17 |     std::tuple<std::string, > bf;\n      |  \
    \                           ^\n/tmp/tmpy2wzp5sh.cpp:20:33: error: cannot convert\
    \ \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in assignment\n   20\
    \ |             bf = std::make_tuple(\"Venus\");\n      |                  ~~~~~~~~~~~~~~~^~~~~~~~~\n\
    \      |                                 |\n      |                          \
    \       std::tuple<const char*>\n/tmp/tmpy2wzp5sh.cpp:23:33: error: cannot convert\
    \ \u2018std::tuple<const char*, const char*>\u2019 to \u2018int\u2019 in assignment\n\
    \   23 |             bf = std::make_tuple(\"Venus\", \"Earth\");\n      |    \
    \              ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                    \
    \             |\n      |                                 std::tuple<const char*,\
    \ const char*>\n/tmp/tmpy2wzp5sh.cpp:26:33: error: cannot convert \u2018std::tuple<const\
    \ char*, const char*, const char*>\u2019 to \u2018int\u2019 in assignment\n  \
    \ 26 |             bf = std::make_tuple(\"Venus\", \"Earth\", \"Mars\");\n   \
    \   |                  ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n      |    \
    \                             |\n      |                                 std::tuple<const\
    \ char*, const char*, const char*>\n/tmp/tmpy2wzp5sh.cpp:29:33: error: cannot\
    \ convert \u2018std::tuple<const char*, const char*, const char*, const char*>\u2019\
    \ to \u2018int\u2019 in assignment\n   29 |             bf = std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n      |                  ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                 |\n      |                          \
    \       std::tuple<const char*, const char*, const char*, const char*>\n/tmp/tmpy2wzp5sh.cpp:32:33:\
    \ error: cannot convert \u2018std::tuple<const char*, const char*, const char*,\
    \ const char*, const char*>\u2019 to \u2018int\u2019 in assignment\n   32 |  \
    \   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // Your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpbe9eynb8.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpbe9eynb8.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpbe9eynb8.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbe9eynb8.cpp:2:\n/tmp/tmpbe9eynb8.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpbe9eynb8.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpbe9eynb8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    return std::make_tuple(\"\");\n}\nint main() {\n\
    \    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"))\
    \ == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9zuipmgu.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp9zuipmgu.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp9zuipmgu.cpp:17:27: error: cannot\
    \ convert \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n \
    \  17 |     return std::make_tuple(\"\");\n      |            ~~~~~~~~~~~~~~~^~~~\n\
    \      |                           |\n      |                           std::tuple<const\
    \ char*>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9zuipmgu.cpp:2:\n/tmp/tmp9zuipmgu.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp9zuipmgu.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp9zuipmgu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::tuple<std::string, > answer = std::make_tuple();\n\
    \    // Write your code here\n    return answer;\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvk4hhw9j.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpvk4hhw9j.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpvk4hhw9j.cpp:17:29: error: template\
    \ argument 2 is invalid\n   17 |     std::tuple<std::string, > answer = std::make_tuple();\n\
    \      |                             ^\n/tmp/tmpvk4hhw9j.cpp:17:55: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in initialization\n   17\
    \ |     std::tuple<std::string, > answer = std::make_tuple();\n      |       \
    \                                 ~~~~~~~~~~~~~~~^~\n      |                 \
    \                                      |\n      |                            \
    \                           std::tuple<>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvk4hhw9j.cpp:2:\n/tmp/tmpvk4hhw9j.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpvk4hhw9j.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpvk4hhw9j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::map<std::string, int> m;\n    m[\"Mercury\"\
    ] = 1;\n    m[\"Venus\"] = 2;\n    m[\"Earth\"] = 3;\n    m[\"Mars\"] = 4;\n \
    \   m[\"Jupiter\"] = 5;\n    m[\"Saturn\"] = 6;\n    m[\"Uranus\"] = 7;\n    m[\"\
    Neptune\"] = 8;\n    std::vector<std::string> v;\n    v.push_back(\"Mercury\"\
    );\n    v.push_back(\"Venus\");\n    v.push_back(\"Earth\");\n    v.push_back(\"\
    Mars\");\n    v.push_back(\"Jupiter\");\n    v.push_back(\"Saturn\");\n    v.push_back(\"\
    Uranus\");\n    v.push_back(\"Neptune\");\n    std::vector<std::string> res;\n\
    \    if (m.find(planet1) == m.end() || m.find(planet2) == m.end())\n        return\
    \ std::make_tuple();\n    else if (m[planet1] > m[planet2]) {\n        int i =\
    \ m[planet2];\n        while (i < m[planet1]) {\n            res.push_back(v[i\
    \ - 1]);\n            i++;\n        }\n    }\n    else {\n        int i = m[planet1];\n\
    \        while (i < m[planet2]) {\n            res.push_back(v[i - 1]);\n    \
    \        i++;\n        }\n    }\n    std::tuple<std::string, std::string, std::string,\
    \ std::string, std::string> t(res[0], res[1], res[2], res[3], res[4]);\n    return\
    \ t;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzed58awd.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpzed58awd.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpzed58awd.cpp:37:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   37 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpzed58awd.cpp:53:12: error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\u2019 to \u2018int\u2019 in\
    \ return\n   53 |     return t;\n      |            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzed58awd.cpp:2:\n/tmp/tmpzed58awd.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpzed58awd.cpp:57:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   57 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \              "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n    // your code here\n    return std::make_tuple();\n}\nint main() {\n\
    \    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"))\
    \ == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0av1ml6h.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp0av1ml6h.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp0av1ml6h.cpp:19:27: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   19 |     return\
    \ std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n      |          \
    \                 |\n      |                           std::tuple<>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n     \
    \            from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0av1ml6h.cpp:2:\n/tmp/tmp0av1ml6h.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp0av1ml6h.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp0av1ml6h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t// variables to store the indices of the planets\n\
    \tint index1, index2;\n\tstd::vector<std::string> planets;\n\tplanets.push_back(\"\
    Mercury\");\n\tplanets.push_back(\"Venus\");\n\tplanets.push_back(\"Earth\");\n\
    \tplanets.push_back(\"Mars\");\n\tplanets.push_back(\"Jupiter\");\n\tplanets.push_back(\"\
    Saturn\");\n\tplanets.push_back(\"Uranus\");\n\tplanets.push_back(\"Neptune\"\
    );\n\t// find the indices of the two planets\n\tfor (int i = 0; i < planets.size();\
    \ i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i]\
    \ == planet2) {\n\t\t\tindex2 = i;\n\t\t}\n\t}\n\tif (index1 > index2) {\n\t\t\
    return std::make_tuple();\n\t}\n\tstd::tuple<std::string, std::string, std::string,\
    \ std::string, std::string, std::string> r_tuple;\n\tif (index1 + 1 == index2)\
    \ {\n\t\treturn std::make_tuple(planets[index1 + 1]);\n\t}\n\tif (index1 + 2 ==\
    \ index2) {\n\t\treturn std::make_tuple(planets[index1 + 1], planets[index1 +\
    \ 2]);\n\t}\n\tif (index1 + 3 == index2) {\n\t\treturn std::make_tuple(planets[index1\
    \ + 1], planets[index1 + 2], planets[index1 + 3]);\n\t}\n\tif (index1 + 4 == index2)\
    \ {\n\t\treturn std::make_tuple(planets[index1 + 1], planets[index1 + 2], planets[index1\
    \ + 3], planets[index1 + 4]);\n\t}\n\tif (index1 + 5 == index2) {\n\t\treturn\
    \ std::make_tuple(planets[index1 + 1], planets[index1 + 2], planets[index1 + 3],\
    \ planets[index1 + 4], planets\n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpoigrc2ln.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpoigrc2ln.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpoigrc2ln.cpp:38:25: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   38 |   return\
    \ std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n      |            \
    \             |\n      |                         std::tuple<>\n/tmp/tmpoigrc2ln.cpp:42:25:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   42 |   return\
    \ std::make_tuple(planets[index1 + 1]);\n      |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    \      |                         |\n      |                         std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\n/tmp/tmpoigrc2ln.cpp:45:25:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   45 |   return\
    \ std::make_tuple(planets[index1 + 1], planets[index1 + 2]);\n      |        \
    \  ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |        \
    \                 |\n      |                         std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\n/tmp/tmpoigrc2ln.cpp:48:25:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   48 |   return\
    \ std::make_tuple(planets[index1 + 1], planets[index1 + 2], planets[index1 + 3]);\n\
    \      |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::tuple<std::string, > ret;\n    //TODO:\n  \
    \  return ret;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyz6tkn57.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpyz6tkn57.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpyz6tkn57.cpp:17:29: error: template\
    \ argument 2 is invalid\n   17 |     std::tuple<std::string, > ret;\n      | \
    \                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyz6tkn57.cpp:2:\n/tmp/tmpyz6tkn57.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpyz6tkn57.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyz6tkn57.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t// 0 Mercury\n\t// 1 Venus\n\t// 2 Earth\n\t// 3 Mars\n\
    \t// 4 Jupiter\n\t// 5 Saturn\n\t// 6 Uranus\n\t// 7 Neptune\n\tstd::string planet_array[8]\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n\t// 0 Venus\n\t// 1 Earth\n\t// 2 Mars\n\t// 3 Jupiter\n\
    \t// 4 Saturn\n\t// 5 Uranus\n\t// 6 Neptune\n\tstd::string planet_array2[7] =\
    \ {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tint planet1_index = 0;\n\tint planet2_index = 0;\n\tfor (int i = 0; i <\
    \ 8; i++) {\n\t\tif (planet_array[i] == planet1) {\n\t\t\tplanet1_index = i;\n\
    \t\t}\n\t\tif (planet_array[i] == planet2) {\n\t\t\tplanet2_index = i;\n\t\t}\n\
    \t}\n\tstd::tuple<std::string, > planets_array;\n\tif (planet1_index == 0 && planet2_index\
    \ == 0) {\n\t\treturn planets_array;\n\t}\n\telse if (planet1_index == 0 && planet2_index\
    \ == 7) {\n\t\tstd::string planets_array[7] = {\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\t\treturn planets_array;\n\
    \t}\n\telse if (planet1_index == 1 && planet2_index == 1) {\n\t\tstd::string planets_array[0]\
    \ = {};\n\t\treturn planets_array;\n\t}\n\telse if (planet1_index == 1 && planet2_index\
    \ == 7) {\n\t\tstd::string planets_array[6] = {\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"};\n\t\treturn planets_array;\n\t}\n\telse\
    \ if (planet1_index == 2 && planet\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpij0z827g.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpij0z827g.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpij0z827g.cpp:44:26: error: template\
    \ argument 2 is invalid\n   44 |  std::tuple<std::string, > planets_array;\n \
    \     |                          ^\n/tmp/tmpij0z827g.cpp:50:10: error: invalid\
    \ conversion from \u2018std::string*\u2019 {aka \u2018std::__cxx11::basic_string<char>*\u2019\
    } to \u2018int\u2019 [-fpermissive]\n   50 |   return planets_array;\n      |\
    \          ^~~~~~~~~~~~~\n      |          |\n      |          std::string* {aka\
    \ std::__cxx11::basic_string<char>*}\n/tmp/tmpij0z827g.cpp:54:10: error: invalid\
    \ conversion from \u2018std::string*\u2019 {aka \u2018std::__cxx11::basic_string<char>*\u2019\
    } to \u2018int\u2019 [-fpermissive]\n   54 |   return planets_array;\n      |\
    \          ^~~~~~~~~~~~~\n      |          |\n      |          std::string* {aka\
    \ std::__cxx11::basic_string<char>*}\n/tmp/tmpij0z827g.cpp:58:10: error: invalid\
    \ conversion from \u2018std::string*\u2019 {aka \u2018std::__cxx11::basic_string<char>*\u2019\
    } to \u2018int\u2019 [-fpermissive]\n   58 |   return planets_array;\n      |\
    \          ^~~~~~~~~~~~~\n      |          |\n      |          std::string* {aka\
    \ std::__cxx11::basic_string<char>*}\n/tmp/tmpij0z827g.cpp:60:33: error: \u2018\
    planet\u2019 was not declared in this scope; did you mean \u2018planet1\u2019\
    ?\n   60 |  else if (planet1_index == 2 && planet\n      |                   \
    \              ^~~~~~\n      |                                 planet1\n/tmp/tmpij0z827g.cpp:60:39:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   60 |  else if (planet1_index\
    \ == 2 && planet\n      |          ~                            ^\n      |   \
    \                                    )\n   61 | }\n      | ~                 \
    \                     \n/tmp/tmpij0z827g.cpp:61:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   61 | }\n      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::unordered_map<std::string, int> map;\n  map[\"\
    Mercury\"] = 1;\n  map[\"Venus\"] = 2;\n  map[\"Earth\"] = 3;\n  map[\"Mars\"\
    ] = 4;\n  map[\"Jupiter\"] = 5;\n  map[\"Saturn\"] = 6;\n  map[\"Uranus\"] = 7;\n\
    \  map[\"Neptune\"] = 8;\n  std::tuple<std::string, > ret;\n  std::vector<std::string>\
    \ arr = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphjxrzcni.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmphjxrzcni.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmphjxrzcni.cpp:26:27: error: template\
    \ argument 2 is invalid\n   26 |   std::tuple<std::string, > ret;\n      |   \
    \                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphjxrzcni.cpp:2:\n/tmp/tmphjxrzcni.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmphjxrzcni.cpp:32:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   32 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmphjxrzcni.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::string planets[] = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> answer;\n    int start = -1, end = -1;\n    for (int\
    \ i = 0; i < 8; i++) {\n        if (planet1 == planets[i]) start = i;\n      \
    \  if (planet2 == planets[i]) end = i;\n    }\n    if (start == -1 || end == -1)\
    \ return std::make_tuple(answer);\n    if (start > end) {\n        int temp =\
    \ start;\n        start = end;\n        end = temp;\n    }\n    for (int i = start\
    \ + 1; i < end; i++) {\n        answer.push_back(planets[i]);\n    }\n    return\
    \ std::make_tuple(answer);\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzzoqm506.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpzzoqm506.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpzzoqm506.cpp:24:57: error: cannot\
    \ convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\u2019 to \u2018int\u2019 in return\n   24 |   \
    \  if (start == -1 || end == -1) return std::make_tuple(answer);\n      |    \
    \                                      ~~~~~~~~~~~~~~~^~~~~~~~\n      |      \
    \                                                   |\n      |               \
    \                                          std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\n/tmp/tmpzzoqm506.cpp:33:27:\
    \ error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   33 |     return std::make_tuple(answer);\n      |            ~~~~~~~~~~~~~~~^~~~~~~~\n\
    \      |                           |\n      |                           std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzzoqm506.cpp:2:\n/tmp/tmpzzoqm506.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpzzoqm506.cpp:37:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::map<std::string, std::string> solar = {\n   \
    \ {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n  };\n  return 0;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpgv8nk9mi.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpgv8nk9mi.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpgv8nk9mi.cpp:19:3: error: could\
    \ not convert \u2018{{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}}\u2019 from \u2018<brace-enclosed initializer\
    \ list>\u2019 to \u2018std::map<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char>\
    \ >\u2019\n   19 |   };\n      |   ^\n      |   |\n      |   <brace-enclosed initializer\
    \ list>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgv8nk9mi.cpp:2:\n/tmp/tmpgv8nk9mi.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpgv8nk9mi.cpp:24:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   24 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgv8nk9mi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\treturn std::make_tuple<std::string, >();\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsz874xmv.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpsz874xmv.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpsz874xmv.cpp:17:14: error: parse\
    \ error in template argument list\n   17 |  return std::make_tuple<std::string,\
    \ >();\n      |              ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsz874xmv.cpp:17:40:\
    \ error: no matching function for call to \u2018make_tuple<std::string, <expression\
    \ error> >()\u2019\n   17 |  return std::make_tuple<std::string, >();\n      |\
    \                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsz874xmv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note: candidate: \u2018template<class ... _Elements> constexpr std::tuple<typename\
    \ std::__decay_and_strip<_Elements>::__type ...> std::make_tuple(_Elements&& ...)\u2019\
    \n 1470 |     make_tuple(_Elements&&... __args)\n      |     ^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpsz874xmv.cpp:17:40:\
    \ error: template argument 2 is invalid\n   17 |  return std::make_tuple<std::string,\
    \ >();\n      |                                        ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsz874xmv.cpp:2:\n/tmp/tmpsz874xmv.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpsz874xmv.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets{\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\t\
    std::vector<std::string> res;\n\tstd::tuple<std::string, > tup;\n\tbool f1 = false,\
    \ f2 = false;\n\tfor (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i]\
    \ == planet1) f1 = true;\n\t\tif (planets[i] == planet2) f2 = true;\n\t}\n\tif\
    \ (!f1 || !f2) return tup;\n\tint ind1 = 0, ind2 = 0;\n\tfor (int i = 0; i < planets.size();\
    \ i++) {\n\t\tif (planets[i] == planet1) ind1 = i;\n\t\tif (planets[i] == planet2)\
    \ ind2 = i;\n\t}\n\tif (ind1 > ind2) {\n\t\tint tmp = ind1;\n\t\tind1 = ind2;\n\
    \t\tind2 = tmp;\n\t}\n\tfor (int i = ind1 + 1; i < ind2; i++) {\n\t\tres.push_back(planets[i]);\n\
    \t}\n\ttup = std::make_tuple(res[0], res[1], res[2], res[3], res[4]);\n\treturn\
    \ tup;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp67wa53oh.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp67wa53oh.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp67wa53oh.cpp:19:26: error: template\
    \ argument 2 is invalid\n   19 |  std::tuple<std::string, > tup;\n      |    \
    \                      ^\n/tmp/tmp67wa53oh.cpp:39:23: error: cannot convert \u2018\
    std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >\u2019 to \u2018int\u2019 in assignment\n   39 |  tup = std::make_tuple(res[0],\
    \ res[1], res[2], res[3], res[4]);\n      |        ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                       |\n      |                       std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp67wa53oh.cpp:2:\n/tmp/tmp67wa53oh.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp67wa53oh.cpp:44:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   44 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    if(planet1 == \"Mercury\") {\n        if(planet2\
    \ == \"Venus\") {\n            return std::make_tuple(\"Mercury\", \"Venus\");\n\
    \        } else if(planet2 == \"Earth\") {\n            return std::make_tuple(\"\
    Mercury\", \"Venus\", \"Earth\");\n        } else if(planet2 == \"Mars\") {\n\
    \            return std::make_tuple(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    );\n        } else if(planet2 == \"Jupiter\") {\n            return std::make_tuple(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n        } else if(planet2\
    \ == \"Saturn\") {\n            return std::make_tuple(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n        } else if(planet2 ==\
    \ \"Uranus\") {\n            return std::make_tuple(\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\");\n        } else if(planet2\
    \ == \"Neptune\") {\n            return std::make_tuple(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \      } else {\n            return std::make_tuple();\n        }\n    } else\
    \ if(planet1 == \"Venus\") {\n        if(planet2 == \"Earth\") {\n           \
    \ return std::make_tuple(\"Venus\", \"Earth\");\n        } else if(planet2 ==\
    \ \"Mars\") {\n            return std::make_tuple(\"Venus\", \"Earth\", \"Mars\"\
    );\n        } else if(planet2 == \"Jupiter\") {\n            return std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n        } else if(planet2 == \"Saturn\"\
    ) {\n            return std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\");\n        } else if(planet2 == \"Uranus\") {\n            return\
    \ std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Sat\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw47ns56q.cpp:45:73: warning: missing terminating \" character\n\
    \   45 |             return std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Sat\n      |                                                    \
    \                     ^\n/tmp/tmpw47ns56q.cpp:45:73: error: missing terminating\
    \ \" character\n   45 |             return std::make_tuple(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Sat\n      |                                      \
    \                                   ^~~~\n/tmp/tmpw47ns56q.cpp:16:25: error: template\
    \ argument 2 is invalid\n   16 | std::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n      |                         ^\n/tmp/tmpw47ns56q.cpp:\
    \ In function \u2018int bf(std::string, std::string)\u2019:\n/tmp/tmpw47ns56q.cpp:19:35:\
    \ error: cannot convert \u2018std::tuple<const char*, const char*>\u2019 to \u2018\
    int\u2019 in return\n   19 |             return std::make_tuple(\"Mercury\", \"\
    Venus\");\n      |                    ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n  \
    \    |                                   |\n      |                          \
    \         std::tuple<const char*, const char*>\n/tmp/tmpw47ns56q.cpp:21:35: error:\
    \ cannot convert \u2018std::tuple<const char*, const char*, const char*>\u2019\
    \ to \u2018int\u2019 in return\n   21 |             return std::make_tuple(\"\
    Mercury\", \"Venus\", \"Earth\");\n      |                    ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                   |\n      |                        \
    \           std::tuple<const char*, const char*, const char*>\n/tmp/tmpw47ns56q.cpp:23:35:\
    \ error: cannot convert \u2018std::tuple<const char*, const char*, const char*,\
    \ const char*>\u2019 to \u2018int\u2019 in return\n   23 |             return\
    \ std::make_tuple(\"Mercury\", \"Venus\", \"Earth\", \"Mars\");\n      |     \
    \               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |\
    \                                   |\n      |                               \
    \    std::tuple<const char*, const char*, const char*, const char*>\n/tmp/tmpw47ns56q.cpp:25:35:\
    \ error: cannot convert \u2018std::tuple<const char*, const char*, const char*,\
    \ const char*, const "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \n      \"Jupiter\", \"Saturn\", \"Uranus\", \"\
    Neptune\" };\n  std::tuple<std::string, > result;\n  return result;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5n405xii.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp5n405xii.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp5n405xii.cpp:19:27: error: template\
    \ argument 2 is invalid\n   19 |   std::tuple<std::string, > result;\n      |\
    \                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5n405xii.cpp:2:\n/tmp/tmp5n405xii.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp5n405xii.cpp:24:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   24 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp5n405xii.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \n        \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n    int i;\n    for (i = 0; i < planets.size(); i++) {\n    \
    \    if (planets[i] == planet1) {\n            break;\n        }\n    }\n    if\
    \ (i == planets.size()) {\n        return {};\n    }\n    std::vector<std::string>\
    \ ret;\n    for (; i < planets.size(); i++) {\n        if (planets[i] == planet2)\
    \ {\n            break;\n        }\n        ret.push_back(planets[i]);\n    }\n\
    \    if (i == planets.size()) {\n        return {};\n    }\n    return {ret[0],\
    \ ret[1]};\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoucku44j.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpoucku44j.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpoucku44j.cpp:38:27: error: cannot\
    \ convert \u2018<brace-enclosed initializer list>\u2019 to \u2018int\u2019 in\
    \ return\n   38 |     return {ret[0], ret[1]};\n      |                      \
    \     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoucku44j.cpp:2:\n/tmp/tmpoucku44j.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpoucku44j.cpp:42:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   42 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpoucku44j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /sh"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::string planets[8] = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \n        \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::map<std::string, int> m;\n    for (int i = 0; i < 8; i++)\n     \
    \   m[planets[i]] = i;\n    int index1 = m[planet1];\n    int index2 = m[planet2];\n\
    \    if (index1 > index2)\n        std::swap(index1, index2);\n    std::vector<std::string>\
    \ v;\n    for (int i = index1+1; i < index2; i++)\n        v.push_back(planets[i]);\n\
    \    return std::make_tuple(v.begin(), v.end());\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1w1i3_qx.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp1w1i3_qx.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp1w1i3_qx.cpp:29:27: error: cannot\
    \ convert \u2018std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\u2019 to \u2018int\u2019\
    \ in return\n   29 |     return std::make_tuple(v.begin(), v.end());\n      |\
    \            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |                    \
    \       |\n      |                           std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1w1i3_qx.cpp:2:\n/tmp/tmp1w1i3_qx.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // TODO: Implement this function\n    return std::make_tuple<std::string,\
    \ >();\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprq52dfip.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmprq52dfip.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmprq52dfip.cpp:18:17: error: parse\
    \ error in template argument list\n   18 |     return std::make_tuple<std::string,\
    \ >();\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprq52dfip.cpp:18:43:\
    \ error: no matching function for call to \u2018make_tuple<std::string, <expression\
    \ error> >()\u2019\n   18 |     return std::make_tuple<std::string, >();\n   \
    \   |                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmprq52dfip.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note: candidate: \u2018template<class ... _Elements> constexpr std::tuple<typename\
    \ std::__decay_and_strip<_Elements>::__type ...> std::make_tuple(_Elements&& ...)\u2019\
    \n 1470 |     make_tuple(_Elements&&... __args)\n      |     ^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmprq52dfip.cpp:18:43:\
    \ error: template argument 2 is invalid\n   18 |     return std::make_tuple<std::string,\
    \ >();\n      |                                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n     \
    \            from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprq52dfip.cpp:2:\n/tmp/tmprq52dfip.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmprq52dfip.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets;\n    for (int\
    \ i = 0; i < 8; i++)\n        planets.push_back(\"\");\n    planets[0] = \"Mercury\"\
    ;\n    planets[1] = \"Venus\";\n    planets[2] = \"Earth\";\n    planets[3] =\
    \ \"Mars\";\n    planets[4] = \"Jupiter\";\n    planets[5] = \"Saturn\";\n   \
    \ planets[6] = \"Uranus\";\n    planets[7] = \"Neptune\";\n    int i = 0;\n  \
    \  for (; planets[i] != planet1; i++);\n    int j = i;\n    for (; planets[j]\
    \ != planet2; j++);\n    std::vector<std::string> res;\n    if (i < j)\n     \
    \   for (int k = i + 1; k < j; k++)\n            res.push_back(planets[k]);\n\
    \    else\n        for (int k = j + 1; k < i; k++)\n            res.push_back(planets[k]);\n\
    \    return std::make_tuple(res);\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplx9wftku.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmplx9wftku.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmplx9wftku.cpp:39:27: error: cannot\
    \ convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\u2019 to \u2018int\u2019 in return\n   39 |   \
    \  return std::make_tuple(res);\n      |            ~~~~~~~~~~~~~~~^~~~~\n   \
    \   |                           |\n      |                           std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplx9wftku.cpp:2:\n/tmp/tmplx9wftku.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmplx9wftku.cpp:43:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   43 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmplx9wftku.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> result;\n    auto first = std::find(planets.begin(),\
    \ planets.end(), planet1);\n    auto second = std::find(planets.begin(), planets.end(),\
    \ planet2);\n    if(first != planets.end() && second != planets.end()){\n    \
    \    if(first > second){\n            std::swap(first, second);\n        }\n \
    \       for(auto it = first; it != second; it++){\n            result.push_back(*it);\n\
    \        }\n    }\n    return std::make_tuple(result);\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp513mc9y6.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp513mc9y6.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp513mc9y6.cpp:29:27: error: cannot\
    \ convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\u2019 to \u2018int\u2019 in return\n   29 |   \
    \  return std::make_tuple(result);\n      |            ~~~~~~~~~~~~~~~^~~~~~~~\n\
    \      |                           |\n      |                           std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp513mc9y6.cpp:2:\n/tmp/tmp513mc9y6.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp513mc9y6.cpp:33:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   33 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp513mc9y6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_fvqqs9m.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp_fvqqs9m.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp_fvqqs9m.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_fvqqs9m.cpp:2:\n/tmp/tmp_fvqqs9m.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp_fvqqs9m.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_fvqqs9m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  // your code here\n  \n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp3dbymofw.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp3dbymofw.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp3dbymofw.cpp:19:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   19 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3dbymofw.cpp:2:\n/tmp/tmp3dbymofw.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp3dbymofw.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp3dbymofw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    // place your code here\n    std::tuple<std::string, > sol;\n    return\
    \ sol;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk6kg9_9i.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpk6kg9_9i.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpk6kg9_9i.cpp:19:29: error: template\
    \ argument 2 is invalid\n   19 |     std::tuple<std::string, > sol;\n      | \
    \                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk6kg9_9i.cpp:2:\n/tmp/tmpk6kg9_9i.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpk6kg9_9i.cpp:24:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   24 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpk6kg9_9i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tauto it1 = std::find(planets.begin(), planets.end(), planet1);\n\tauto it2\
    \ = std::find(planets.begin(), planets.end(), planet2);\n\tif(it1 == planets.end()\
    \ || it2 == planets.end()) return std::make_tuple();\n\treturn std::make_tuple();\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp89uwbs4e.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp89uwbs4e.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp89uwbs4e.cpp:20:73: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   20 |  if(it1\
    \ == planets.end() || it2 == planets.end()) return std::make_tuple();\n      |\
    \                                                          ~~~~~~~~~~~~~~~^~\n\
    \      |                                                                     \
    \    |\n      |                                                              \
    \           std::tuple<>\n/tmp/tmp89uwbs4e.cpp:21:24: error: cannot convert \u2018\
    std::tuple<>\u2019 to \u2018int\u2019 in return\n   21 |  return std::make_tuple();\n\
    \      |         ~~~~~~~~~~~~~~~^~\n      |                        |\n      |\
    \                        std::tuple<>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp89uwbs4e.cpp:2:\n/tmp/tmp89uwbs4e.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp89uwbs4e.cpp:25:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   25 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp89uwbs4e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets;\n  planets.push_back(\"\
    Mercury\");\n  planets.push_back(\"Venus\");\n  planets.push_back(\"Earth\");\n\
    \  planets.push_back(\"Mars\");\n  planets.push_back(\"Jupiter\");\n  planets.push_back(\"\
    Saturn\");\n  planets.push_back(\"Uranus\");\n  planets.push_back(\"Neptune\"\
    );\n  std::vector<std::string> planets_mid;\n  int pos1 = -1;\n  int pos2 = -1;\n\
    \  for (int i = 0; i < planets.size(); i++) {\n    if (planets[i] == planet1)\
    \ pos1 = i;\n    if (planets[i] == planet2) pos2 = i;\n  }\n  if (pos1 == -1 ||\
    \ pos2 == -1) return std::make_tuple();\n  if (pos1 > pos2) {\n    int temp =\
    \ pos1;\n    pos1 = pos2;\n    pos2 = temp;\n  }\n  for (int i = pos1+1; i < pos2;\
    \ i++) {\n    planets_mid.push_back(planets[i]);\n  }\n  return std::make_tuple(planets_mid);\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcx6fjt4i.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpcx6fjt4i.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpcx6fjt4i.cpp:33:55: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   33 |   if\
    \ (pos1 == -1 || pos2 == -1) return std::make_tuple();\n      |              \
    \                          ~~~~~~~~~~~~~~~^~\n      |                        \
    \                               |\n      |                                   \
    \                    std::tuple<>\n/tmp/tmpcx6fjt4i.cpp:42:25: error: cannot convert\
    \ \u2018std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\u2019 to \u2018int\u2019 in return\n   42 |   return\
    \ std::make_tuple(planets_mid);\n      |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n\
    \      |                         |\n      |                         std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcx6fjt4i.cpp:2:\n/tmp/tmpcx6fjt4i.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpcx6fjt4i.cpp:46:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   46 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In fil"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n    return std::make_tuple();\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw7_q9022.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpw7_q9022.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpw7_q9022.cpp:18:27: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   18 |     return\
    \ std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n      |          \
    \                 |\n      |                           std::tuple<>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n     \
    \            from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw7_q9022.cpp:2:\n/tmp/tmpw7_q9022.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpw7_q9022.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpw7_q9022.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string>::iterator first_pos, second_pos;\n    first_pos\
    \ = find(planets.begin(), planets.end(), planet1);\n    second_pos = find(planets.begin(),\
    \ planets.end(), planet2);\n    if(first_pos == planets.end() || second_pos ==\
    \ planets.end()) {\n        return std::make_tuple();\n    }\n    else {\n   \
    \     if(first_pos < second_pos) {\n            planets.erase(first_pos);\n  \
    \          planets.erase(second_pos);\n        }\n        else {\n           \
    \ planets.erase(second_pos);\n            planets.erase(first_pos);\n        }\n\
    \        return std::make_tuple(planets);\n    }\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpk0qccxk2.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpk0qccxk2.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpk0qccxk2.cpp:22:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   22 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpk0qccxk2.cpp:33:31: error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   33 |         return std::make_tuple(planets);\n      |       \
    \         ~~~~~~~~~~~~~~~^~~~~~~~~\n      |                               |\n\
    \      |                               std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk0qccxk2.cpp:2:\n/tmp/tmpk0qccxk2.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpk0qccxk2.cpp:38:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   38 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \  "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t// Write your code here\n\tstd::vector<std::string>\
    \ planets {\n\t\t\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \n\t\t\"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"\n\t};\n\tbool check1 = false, check2 = false;\n\
    \tint index1, index2;\n\tfor (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i]\
    \ == planet1) {\n\t\t\tcheck1 = true;\n\t\t\tindex1 = i;\n\t\t}\n\t\tif (planets[i]\
    \ == planet2) {\n\t\t\tcheck2 = true;\n\t\t\tindex2 = i;\n\t\t}\n\t}\n\tif (!check1\
    \ || !check2) return std::make_tuple();\n\tstd::vector<std::string> res;\n\tif\
    \ (index1 > index2) {\n\t\tint temp = index1;\n\t\tindex1 = index2;\n\t\tindex2\
    \ = temp;\n\t}\n\tfor (int i = index1 + 1; i < index2; i++) res.push_back(planets[i]);\n\
    \treturn std::make_tuple(res);\n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpy437_pds.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpy437_pds.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpy437_pds.cpp:34:48: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   34 |  if (!check1\
    \ || !check2) return std::make_tuple();\n      |                             \
    \    ~~~~~~~~~~~~~~~^~\n      |                                              \
    \  |\n      |                                                std::tuple<>\n/tmp/tmpy437_pds.cpp:42:24:\
    \ error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   42 |  return std::make_tuple(res);\n      |         ~~~~~~~~~~~~~~~^~~~~\n\
    \      |                        |\n      |                        std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy437_pds.cpp:2:\n/tmp/tmpy437_pds.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpy437_pds.cpp:46:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   46 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylak"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t\n\treturn std::make_tuple<std::string, >();\n}\n\
    int main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7xttn4qg.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp7xttn4qg.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp7xttn4qg.cpp:18:14: error: parse\
    \ error in template argument list\n   18 |  return std::make_tuple<std::string,\
    \ >();\n      |              ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7xttn4qg.cpp:18:40:\
    \ error: no matching function for call to \u2018make_tuple<std::string, <expression\
    \ error> >()\u2019\n   18 |  return std::make_tuple<std::string, >();\n      |\
    \                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7xttn4qg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note: candidate: \u2018template<class ... _Elements> constexpr std::tuple<typename\
    \ std::__decay_and_strip<_Elements>::__type ...> std::make_tuple(_Elements&& ...)\u2019\
    \n 1470 |     make_tuple(_Elements&&... __args)\n      |     ^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7xttn4qg.cpp:18:40:\
    \ error: template argument 2 is invalid\n   18 |  return std::make_tuple<std::string,\
    \ >();\n      |                                        ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7xttn4qg.cpp:2:\n/tmp/tmp7xttn4qg.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp7xttn4qg.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    auto it1 = std::find(planets.begin(), planets.end(), planet1);\n    auto\
    \ it2 = std::find(planets.begin(), planets.end(), planet2);\n    if(it1 == planets.end()\
    \ || it2 == planets.end())\n        return std::make_tuple();\n    std::vector<std::string>\
    \ planets_bf(it1, it2);\n    return std::make_tuple(planets_bf.begin(), planets_bf.end());\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5clvqego.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp5clvqego.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp5clvqego.cpp:21:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   21 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmp5clvqego.cpp:23:27: error: cannot convert \u2018std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\u2019 to \u2018int\u2019\
    \ in return\n   23 |     return std::make_tuple(planets_bf.begin(), planets_bf.end());\n\
    \      |            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \
    \    |                           |\n      |                           std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\nIn "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  //your code here\n  \n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpi2v12jo1.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpi2v12jo1.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpi2v12jo1.cpp:19:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   19 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi2v12jo1.cpp:2:\n/tmp/tmpi2v12jo1.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpi2v12jo1.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpi2v12jo1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tassert(planet1 != \"\" || planet2 != \"\");\n\tstd::vector<std::string>\
    \ planets;\n\tplanets.push_back(\"Mercury\");\n\tplanets.push_back(\"Venus\");\n\
    \tplanets.push_back(\"Earth\");\n\tplanets.push_back(\"Mars\");\n\tplanets.push_back(\"\
    Jupiter\");\n\tplanets.push_back(\"Saturn\");\n\tplanets.push_back(\"Uranus\"\
    );\n\tplanets.push_back(\"Neptune\");\n\tstd::vector<std::string>::iterator itr;\n\
    \tstd::vector<std::string>::iterator itr2;\n\tstd::vector<std::string>::iterator\
    \ itr3;\n\tstd::vector<std::string>::iterator itr4;\n\tstd::vector<std::string>::iterator\
    \ itr5;\n\tfor (itr = planets.begin(); itr != planets.end(); itr++) {\n\t\tif\
    \ (*itr == planet1) {\n\t\t\titr2 = itr;\n\t\t}\n\t\tif (*itr == planet2) {\n\t\
    \t\titr3 = itr;\n\t\t}\n\t}\n\tstd::vector<std::string>::iterator itr6;\n\titr6\
    \ = itr2;\n\titr6++;\n\titr4 = itr3;\n\titr4--;\n\tif (planet1 == \"Mercury\"\
    \ && planet2 == \"Mercury\") {\n\t\treturn std::make_tuple();\n\t}\n\tif (planet1\
    \ == \"Mercury\" && planet2 == \"Venus\") {\n\t\treturn std::make_tuple();\n\t\
    }\n\tif (planet1 == \"Mercury\" && planet2 == \"Earth\") {\n\t\treturn std::make_tuple(\"\
    Venus\");\n\t}\n\tif (planet1 == \"Mercury\" && planet2 == \"Mars\") {\n\t\treturn\
    \ std::make_tuple(\"Venus\", \"Earth\");\n\t}\n\tif (planet1 == \"Mercury\" &&\
    \ planet2 == \"Jupiter\") {\n\t\treturn std::make_tuple(\"Venus\", \"Earth\",\
    \ \"Mars\");\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz5thgaso.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpz5thgaso.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpz5thgaso.cpp:46:25: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   46 |   return\
    \ std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n      |            \
    \             |\n      |                         std::tuple<>\n/tmp/tmpz5thgaso.cpp:49:25:\
    \ error: cannot convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n\
    \   49 |   return std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n   \
    \   |                         |\n      |                         std::tuple<>\n\
    /tmp/tmpz5thgaso.cpp:52:25: error: cannot convert \u2018std::tuple<const char*>\u2019\
    \ to \u2018int\u2019 in return\n   52 |   return std::make_tuple(\"Venus\");\n\
    \      |          ~~~~~~~~~~~~~~~^~~~~~~~~\n      |                         |\n\
    \      |                         std::tuple<const char*>\n/tmp/tmpz5thgaso.cpp:55:25:\
    \ error: cannot convert \u2018std::tuple<const char*, const char*>\u2019 to \u2018\
    int\u2019 in return\n   55 |   return std::make_tuple(\"Venus\", \"Earth\");\n\
    \      |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |                 \
    \        |\n      |                         std::tuple<const char*, const char*>\n\
    /tmp/tmpz5thgaso.cpp:58:25: error: cannot convert \u2018std::tuple<const char*,\
    \ const char*, const char*>\u2019 to \u2018int\u2019 in return\n   58 |   return\
    \ std::make_tuple(\"Venus\", \"Earth\", \"Mars\");\n      |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                         |\n      |                         std::tuple<const\
    \ char*, const char*, const char*>\n/tmp/tmpz5thgaso.cpp:60:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   60 | int main() {\n     \
    \ |            ^\n/tmp/tmpz5thgaso.cpp:69:1: error: expected \u2018}\u2019 at\
    \ end of input\n   69 | }\n      | ^\n/tmp/tmpz5thgaso.cpp:16:72: note: to match\
    \ this \u2018{\u2019\n   16 | std::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n      |                              "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp78p295db.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp78p295db.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp78p295db.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp78p295db.cpp:2:\n/tmp/tmp78p295db.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp78p295db.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp78p295db.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n  int p1, p2;\n  for (int i = 0; i < planets.size(); i++) {\n    if (planets[i]\
    \ == planet1) {\n      p1 = i;\n    }\n    if (planets[i] == planet2) {\n    \
    \  p2 = i;\n    }\n  }\n  std::vector<std::string> res;\n  int start = std::min(p1,\
    \ p2);\n  int end = std::max(p1, p2);\n  for (int i = start + 1; i < end; i++)\
    \ {\n    res.push_back(planets[i]);\n  }\n  return std::make_tuple(res[0], res[1],\
    \ res[2], res[3], res[4]);\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqsk0k_nr.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpqsk0k_nr.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpqsk0k_nr.cpp:33:25: error: cannot\
    \ convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   33 |   return\
    \ std::make_tuple(res[0], res[1], res[2], res[3], res[4]);\n      |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                         |\n      |                         std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqsk0k_nr.cpp:2:\n/tmp/tmpqsk0k_nr.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpqsk0k_nr.cpp:37:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   37 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\treturn std::make_tuple(\"\");\n}\nint main() {\n \
    \   auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"),\
    \ (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0o174gjy.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp0o174gjy.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp0o174gjy.cpp:17:24: error: cannot\
    \ convert \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n \
    \  17 |  return std::make_tuple(\"\");\n      |         ~~~~~~~~~~~~~~~^~~~\n\
    \      |                        |\n      |                        std::tuple<const\
    \ char*>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0o174gjy.cpp:2:\n/tmp/tmp0o174gjy.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp0o174gjy.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp0o174gjy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/cen"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::tuple<std::string, > r;\n\t// write your code\
    \ here\n\treturn r;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5caevk9x.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp5caevk9x.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp5caevk9x.cpp:17:26: error: template\
    \ argument 2 is invalid\n   17 |  std::tuple<std::string, > r;\n      |      \
    \                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5caevk9x.cpp:2:\n/tmp/tmp5caevk9x.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp5caevk9x.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp5caevk9x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    \n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpwitsf9sf.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpwitsf9sf.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpwitsf9sf.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwitsf9sf.cpp:2:\n/tmp/tmpwitsf9sf.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpwitsf9sf.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpwitsf9sf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::tuple<std::string, > result;\n    return result;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkqm_wpsw.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpkqm_wpsw.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpkqm_wpsw.cpp:17:29: error: template\
    \ argument 2 is invalid\n   17 |     std::tuple<std::string, > result;\n     \
    \ |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkqm_wpsw.cpp:2:\n/tmp/tmpkqm_wpsw.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpkqm_wpsw.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkqm_wpsw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skyla"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::unordered_map<std::string, int> planets = {\n\
    \        {\"Mercury\", 1},\n        {\"Venus\", 2},\n        {\"Earth\", 3},\n\
    \        {\"Mars\", 4},\n        {\"Jupiter\", 5},\n        {\"Saturn\", 6},\n\
    \        {\"Uranus\", 7},\n        {\"Neptune\", 8}\n    };\n    auto it1 = planets.find(planet1);\n\
    \    auto it2 = planets.find(planet2);\n    if (it1 == planets.end() || it2 ==\
    \ planets.end()) {\n        return std::make_tuple();\n    }\n    int i1 = it1->second;\n\
    \    int i2 = it2->second;\n    if (i1 > i2) {\n        std::swap(i1, i2);\n \
    \   }\n    std::tuple<std::string, > res;\n    for (int i = i1 + 1; i < i2; ++i)\
    \ {\n        res.push_back(planets[i]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp36dhufvl.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp36dhufvl.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp36dhufvl.cpp:30:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   30 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmp36dhufvl.cpp:37:29: error: template argument 2 is invalid\n   37 |   \
    \  std::tuple<std::string, > res;\n      |                             ^\n/tmp/tmp36dhufvl.cpp:39:13:\
    \ error: request for member \u2018push_back\u2019 in \u2018res\u2019, which is\
    \ of non-class type \u2018int\u2019\n   39 |         res.push_back(planets[i]);\n\
    \      |             ^~~~~~~~~\n/tmp/tmp36dhufvl.cpp:39:30: error: no match for\
    \ \u2018operator[]\u2019 (operand types are \u2018std::unordered_map<std::__cxx11::basic_string<char>,\
    \ int>\u2019 and \u2018int\u2019)\n   39 |         res.push_back(planets[i]);\n\
    \      |                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_map:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:117,\n\
    \                 from /tmp/tmp36dhufvl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:984:7:\
    \ note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type&\
    \ std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Tp = int; _Hash = std::hash<std::__cxx11::basic_string<char>\
    \ >; _Pred = std::equal_to<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const\
    \ std::__cxx11::basic_string<char>, int> >; std::unordered_map<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>::mapped_type = int; std::unordered_map<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n  984 |       operator[](const\
    \ key_type& __k)\n      |     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  // your code\n  return std::make_tuple(\"\", );\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy92oump9.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpy92oump9.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpy92oump9.cpp:18:30: error: expected\
    \ primary-expression before \u2018)\u2019 token\n   18 |   return std::make_tuple(\"\
    \", );\n      |                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy92oump9.cpp:2:\n/tmp/tmpy92oump9.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpy92oump9.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpy92oump9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::tuple<std::string, > t;\n    return t;\n}\n\
    int main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo9szkevv.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpo9szkevv.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpo9szkevv.cpp:17:29: error: template\
    \ argument 2 is invalid\n   17 |     std::tuple<std::string, > t;\n      |   \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo9szkevv.cpp:2:\n/tmp/tmpo9szkevv.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpo9szkevv.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpo9szkevv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::string planets[] = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  std::tuple<std::string,\
    \ > result;\n  bool found_planet1 = false;\n  bool found_planet2 = false;\n  int\
    \ i;\n  int j;\n  for (int k = 0; k < 8; k++) {\n    if (planets[k] == planet1)\
    \ {\n      found_planet1 = true;\n      i = k;\n    }\n    if (planets[k] == planet2)\
    \ {\n      found_planet2 = true;\n      j = k;\n    }\n  }\n  if (found_planet1\
    \ && found_planet2) {\n    if (i < j) {\n      for (int k = i+1; k < j; k++) {\n\
    \        std::tuple<std::string, > result(planets[k]);\n      }\n    }\n    else\
    \ {\n      for (int k = j+1; k < i; k++) {\n        std::tuple<std::string, >\
    \ result(planets[k]);\n      }\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"))\
    \ == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps4mvtzhx.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmps4mvtzhx.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmps4mvtzhx.cpp:18:27: error: template\
    \ argument 2 is invalid\n   18 |   std::tuple<std::string, > result;\n      |\
    \                           ^\n/tmp/tmps4mvtzhx.cpp:36:33: error: template argument\
    \ 2 is invalid\n   36 |         std::tuple<std::string, > result(planets[k]);\n\
    \      |                                 ^\n/tmp/tmps4mvtzhx.cpp:36:51: error:\
    \ cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019 in initialization\n   36 |         std::tuple<std::string,\
    \ > result(planets[k]);\n      |                                          ~~~~~~~~~^\n\
    \      |                                                   |\n      |        \
    \                                           std::string {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmps4mvtzhx.cpp:41:33: error: template argument 2 is invalid\n   41 |   \
    \      std::tuple<std::string, > result(planets[k]);\n      |                \
    \                 ^\n/tmp/tmps4mvtzhx.cpp:41:51: error: cannot convert \u2018\
    std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018\
    int\u2019 in initialization\n   41 |         std::tuple<std::string, > result(planets[k]);\n\
    \      |                                          ~~~~~~~~~^\n      |        \
    \                                           |\n      |                       \
    \                            std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps4mvtzhx.cpp:2:\n/tmp/tmps4mvtzhx.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmps4mvtzhx.cpp:49:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   49 |     assert(candidate((\"Jupiter\"), ("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpqhcn99zk.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpqhcn99zk.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpqhcn99zk.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqhcn99zk.cpp:2:\n/tmp/tmpqhcn99zk.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpqhcn99zk.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpqhcn99zk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::map<std::string, int> planets{ {\"Mercury\"\
    , 1}, {\"Venus\", 2}, {\"Earth\", 3}, {\"Mars\", 4}, {\"Jupiter\", 5}, {\"Saturn\"\
    , 6}, {\"Uranus\", 7}, {\"Neptune\", 8} };\n    int p1 = planets[planet1];\n \
    \   int p2 = planets[planet2];\n    int start = (p1 > p2) ? p2 : p1;\n    int\
    \ end = (p1 > p2) ? p1 : p2;\n    std::vector<std::string> planets_;\n    for\
    \ (int i = start + 1; i < end; i++) {\n        for (auto& e : planets) {\n   \
    \         if (e.second == i) planets_.push_back(e.first);\n        }\n    }\n\
    \    return std::make_tuple(planets_);\n}\nint main() {\n    auto candidate =\
    \ bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmx9w1tep.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpmx9w1tep.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpmx9w1tep.cpp:28:27: error: cannot\
    \ convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\u2019 to \u2018int\u2019 in return\n   28 |   \
    \  return std::make_tuple(planets_);\n      |            ~~~~~~~~~~~~~~~^~~~~~~~~~\n\
    \      |                           |\n      |                           std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmx9w1tep.cpp:2:\n/tmp/tmpmx9w1tep.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpmx9w1tep.cpp:32:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   32 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpmx9w1tep.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    return std::make_tuple<std::string, >();\n}\nint\
    \ main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0aio_a0x.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp0aio_a0x.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp0aio_a0x.cpp:17:17: error: parse\
    \ error in template argument list\n   17 |     return std::make_tuple<std::string,\
    \ >();\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp0aio_a0x.cpp:17:43:\
    \ error: no matching function for call to \u2018make_tuple<std::string, <expression\
    \ error> >()\u2019\n   17 |     return std::make_tuple<std::string, >();\n   \
    \   |                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0aio_a0x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note: candidate: \u2018template<class ... _Elements> constexpr std::tuple<typename\
    \ std::__decay_and_strip<_Elements>::__type ...> std::make_tuple(_Elements&& ...)\u2019\
    \n 1470 |     make_tuple(_Elements&&... __args)\n      |     ^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0aio_a0x.cpp:17:43:\
    \ error: template argument 2 is invalid\n   17 |     return std::make_tuple<std::string,\
    \ >();\n      |                                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n     \
    \            from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0aio_a0x.cpp:2:\n/tmp/tmp0aio_a0x.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp0aio_a0x.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    if(planet1 == \"Mercury\"){\n        if(planet2\
    \ == \"Mercury\"){\n            return std::make_tuple(\"\");\n        }\n   \
    \     else if(planet2 == \"Venus\"){\n            return std::make_tuple(\"Venus\"\
    );\n        }\n        else if(planet2 == \"Earth\"){\n            return std::make_tuple(\"\
    Venus\", \"Earth\");\n        }\n        else if(planet2 == \"Mars\"){\n     \
    \       return std::make_tuple(\"Venus\", \"Earth\", \"Mars\");\n        }\n \
    \       else if(planet2 == \"Jupiter\"){\n            return std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n        }\n        else if(planet2\
    \ == \"Saturn\"){\n            return std::make_tuple(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\");\n        }\n        else if(planet2 == \"Uranus\"\
    ){\n            return std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\");\n        }\n        else if(planet2 == \"Neptune\"\
    ){\n            return std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n        }\n        else{\n          \
    \  return std::make_tuple(\"\");\n        }\n    }\n    else if(planet1 == \"\
    Venus\"){\n        if(planet2 == \"Mercury\"){\n            return std::make_tuple(\"\
    \");\n        }\n        else if(planet2 == \"Venus\"){\n            return std::make_tuple(\"\
    \");\n        }\n        else if(planet2 == \"Earth\"){\n            return std::make_tuple(\"\
    Earth\");\n        }\n        else if(planet2 == \"Mars\"){\n            return\
    \ std::make_tuple(\"Earth\", \"Mars\");\n        }\n        else if(planet2 ==\
    \ \"Jupiter\"){\n            return std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\"\
    );\n        }\n        else if(planet2 == \"Saturn\"){\n            return\n}\n\
    int main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ignrlw4.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp0ignrlw4.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp0ignrlw4.cpp:19:35: error: cannot\
    \ convert \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n \
    \  19 |             return std::make_tuple(\"\");\n      |                   \
    \ ~~~~~~~~~~~~~~~^~~~\n      |                                   |\n      |  \
    \                                 std::tuple<const char*>\n/tmp/tmp0ignrlw4.cpp:22:35:\
    \ error: cannot convert \u2018std::tuple<const char*>\u2019 to \u2018int\u2019\
    \ in return\n   22 |             return std::make_tuple(\"Venus\");\n      | \
    \                   ~~~~~~~~~~~~~~~^~~~~~~~~\n      |                        \
    \           |\n      |                                   std::tuple<const char*>\n\
    /tmp/tmp0ignrlw4.cpp:25:35: error: cannot convert \u2018std::tuple<const char*,\
    \ const char*>\u2019 to \u2018int\u2019 in return\n   25 |             return\
    \ std::make_tuple(\"Venus\", \"Earth\");\n      |                    ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    \      |                                   |\n      |                        \
    \           std::tuple<const char*, const char*>\n/tmp/tmp0ignrlw4.cpp:28:35:\
    \ error: cannot convert \u2018std::tuple<const char*, const char*, const char*>\u2019\
    \ to \u2018int\u2019 in return\n   28 |             return std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\");\n      |                    ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                   |\n      |                        \
    \           std::tuple<const char*, const char*, const char*>\n/tmp/tmp0ignrlw4.cpp:31:35:\
    \ error: cannot convert \u2018std::tuple<const char*, const char*, const char*,\
    \ const char*>\u2019 to \u2018int\u2019 in return\n   31 |             return\
    \ std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n      |     \
    \               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |\
    \                                   |\n      |                               \
    \    std::tuple<const char*, const char*, const char*, const "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  // my code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpt7a7xhx7.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpt7a7xhx7.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpt7a7xhx7.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt7a7xhx7.cpp:2:\n/tmp/tmpt7a7xhx7.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpt7a7xhx7.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpt7a7xhx7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> all = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\t\
    int index1 = std::find(all.begin(), all.end(), planet1) - all.begin();\n\tint\
    \ index2 = std::find(all.begin(), all.end(), planet2) - all.begin();\n\tstd::tuple<std::string,\
    \ > ans;\n\tint index;\n\tif (index1 < index2) {\n\t\tfor (int i = index1; i <\
    \ index2; i++) {\n\t\t\tstd::get<index>(ans) = all[i];\n\t\t\tindex++;\n\t\t}\n\
    \t} else {\n\t\tfor (int i = index2; i < index1; i++) {\n\t\t\tstd::get<index>(ans)\
    \ = all[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmmwzq8_z.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpmmwzq8_z.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpmmwzq8_z.cpp:20:26: error: template\
    \ argument 2 is invalid\n   20 |  std::tuple<std::string, > ans;\n      |    \
    \                      ^\n/tmp/tmpmmwzq8_z.cpp:24:13: error: the value of \u2018\
    index\u2019 is not usable in a constant expression\n   24 |    std::get<index>(ans)\
    \ = all[i];\n      |             ^~~~~\n/tmp/tmpmmwzq8_z.cpp:21:6: note: \u2018\
    int index\u2019 is not const\n   21 |  int index;\n      |      ^~~~~\n/tmp/tmpmmwzq8_z.cpp:24:23:\
    \ error: no matching function for call to \u2018get<index>(int&)\u2019\n   24\
    \ |    std::get<index>(ans) = all[i];\n      |                       ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmmwzq8_z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpmmwzq8_z.cpp:24:23:\
    \ error: the value of \u2018index\u2019 is not usable in a constant expression\n\
    \   24 |    std::get<index>(ans) = all[i];\n      |                       ^\n\
    /tmp/tmpmmwzq8_z.cpp:21:6: note: \u2018int index\u2019 is not const\n   21 | \
    \ int index;\n      |      ^~~~~\n/tmp/tmpmmwzq8_z.cpp:24:23: note: in template\
    \ argument for type \u2018long unsigned int\u2019\n   24 |    std::get<index>(ans)\
    \ = all[i];\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n\
    \                 from /shared/ce"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprqjy6gzf.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmprqjy6gzf.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmprqjy6gzf.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprqjy6gzf.cpp:2:\n/tmp/tmprqjy6gzf.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmprqjy6gzf.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmprqjy6gzf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t// your code here\n\treturn std::make_tuple(\"Mercury\"\
    );\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptmj9u6pe.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmptmj9u6pe.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmptmj9u6pe.cpp:18:24: error: cannot\
    \ convert \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n \
    \  18 |  return std::make_tuple(\"Mercury\");\n      |         ~~~~~~~~~~~~~~~^~~~~~~~~~~\n\
    \      |                        |\n      |                        std::tuple<const\
    \ char*>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptmj9u6pe.cpp:2:\n/tmp/tmptmj9u6pe.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmptmj9u6pe.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmptmj9u6pe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included fr"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n  std::vector<std::string>::iterator planet1_it = std::find(planets.begin(),\
    \ planets.end(), planet1);\n  std::vector<std::string>::iterator planet2_it =\
    \ std::find(planets.begin(), planets.end(), planet2);\n  if (planet1_it == planets.end()\
    \ || planet2_it == planets.end())\n    return std::make_tuple();\n  if (planet1_it\
    \ > planet2_it)\n    std::swap(planet1_it, planet2_it);\n  std::vector<std::string>::iterator\
    \ p1 = planet1_it;\n  std::vector<std::string>::iterator p2 = planet2_it;\n  p1++;\n\
    \  p2--;\n  if (p1 > p2)\n    return std::make_tuple();\n  else\n    return std::make_tuple(std::string(\"\
    \"));\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx5tt5rgi.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpx5tt5rgi.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpx5tt5rgi.cpp:21:27: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   21 |     return\
    \ std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n      |          \
    \                 |\n      |                           std::tuple<>\n/tmp/tmpx5tt5rgi.cpp:29:27:\
    \ error: cannot convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n\
    \   29 |     return std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n\
    \      |                           |\n      |                           std::tuple<>\n\
    /tmp/tmpx5tt5rgi.cpp:31:27: error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\u2019 to \u2018int\u2019 in\
    \ return\n   31 |     return std::make_tuple(std::string(\"\"));\n      |    \
    \        ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n      |                           |\n\
    \      |                           std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx5tt5rgi.cpp:2:\n/tmp/tmpx5tt5rgi.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpx5tt5rgi.cpp:35:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   35 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // Write your code here\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpbg3swm1y.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpbg3swm1y.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpbg3swm1y.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbg3swm1y.cpp:2:\n/tmp/tmpbg3swm1y.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpbg3swm1y.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpbg3swm1y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::map<std::string, int> mapping = {{\"Mercury\"\
    , 1}, {\"Venus\", 2}, {\"Earth\", 3}, {\"Mars\", 4}, {\"Jupiter\", 5}, {\"Saturn\"\
    , 6}, {\"Uranus\", 7}, {\"Neptune\", 8}};\n    std::vector<std::string> planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n    auto first = mapping.find(planet1);\n    auto second\
    \ = mapping.find(planet2);\n    if (first == mapping.end() || second == mapping.end())\
    \ {\n        return std::make_tuple();\n    }\n    std::tuple<std::string, > ans;\n\
    \    if (first->second > second->second) {\n        for (int i = second->second;\
    \ i < first->second; i++) {\n            std::get<0>(ans) = planets[i - 1];\n\
    \        }\n    } else {\n        for (int i = first->second; i < second->second;\
    \ i++) {\n            std::get<0>(ans) = planets[i - 1];\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo_4g_0s_.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpo_4g_0s_.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpo_4g_0s_.cpp:22:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   22 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpo_4g_0s_.cpp:24:29: error: template argument 2 is invalid\n   24 |   \
    \  std::tuple<std::string, > ans;\n      |                             ^\n/tmp/tmpo_4g_0s_.cpp:27:28:\
    \ error: no matching function for call to \u2018get<0>(int&)\u2019\n   27 |  \
    \           std::get<0>(ans) = planets[i - 1];\n      |                      \
    \      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo_4g_0s_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo_4g_0s_.cpp:27:28:\
    \ note:   mismatched types \u2018std::pair<_Tp1, _Tp2>\u2019 and \u2018int\u2019\
    \n   27 |             std::get<0>(ans) = planets[i - 1];\n      |            \
    \                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo_4g_0s_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:224:5:\
    \ note: candidate: \u2018template<long un"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n    if(planet1.size() < 4 ||\
    \ planet2.size() < 4)\n        return std::make_tuple(\"\");\n    if(!(planet1[0]\
    \ == 'M' || planet1[0] == 'V' || planet1[0] == 'E' || planet1[0] == 'M' || planet1[0]\
    \ == 'J' || planet1[0] == 'S' || planet1[0] == 'U' || planet1[0] == 'N'))\n  \
    \      return std::make_tuple(\"\");\n    if(!(planet2[0] == 'M' || planet2[0]\
    \ == 'V' || planet2[0] == 'E' || planet2[0] == 'M' || planet2[0] == 'J' || planet2[0]\
    \ == 'S' || planet2[0] == 'U' || planet2[0] == 'N'))\n        return std::make_tuple(\"\
    \");\n    if(planet1[0] == 'M' && planet2[0] == 'M')\n        return std::make_tuple(\"\
    \");\n    if(planet1[0] == 'V' && planet2[0] == 'V')\n        return std::make_tuple(\"\
    \");\n    if(planet1[0] == 'E' && planet2[0] == 'E')\n        return std::make_tuple(\"\
    \");\n    if(planet1[0] == 'M' && planet2[0] == 'M')\n        return std::make_tuple(\"\
    \");\n    if(planet1[0] == 'J' && planet2[0] == 'J')\n        return std::make_tuple(\"\
    \");\n    if(planet1[0] == 'S' && planet2[0] == 'S')\n        return std::make_tuple(\"\
    \");\n    if(planet1[0] == 'U' && planet2[0] == 'U')\n        return std::make_tuple(\"\
    \");\n    if(planet1[0] == 'N' && planet2[0] == 'N')\n        return std::make_tuple(\"\
    \");\n    \n    bool first = true;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpec15_e29.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpec15_e29.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpec15_e29.cpp:19:31: error: cannot\
    \ convert \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n \
    \  19 |         return std::make_tuple(\"\");\n      |                ~~~~~~~~~~~~~~~^~~~\n\
    \      |                               |\n      |                            \
    \   std::tuple<const char*>\n/tmp/tmpec15_e29.cpp:21:31: error: cannot convert\
    \ \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n   21 |  \
    \       return std::make_tuple(\"\");\n      |                ~~~~~~~~~~~~~~~^~~~\n\
    \      |                               |\n      |                            \
    \   std::tuple<const char*>\n/tmp/tmpec15_e29.cpp:23:31: error: cannot convert\
    \ \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n   23 |  \
    \       return std::make_tuple(\"\");\n      |                ~~~~~~~~~~~~~~~^~~~\n\
    \      |                               |\n      |                            \
    \   std::tuple<const char*>\n/tmp/tmpec15_e29.cpp:25:31: error: cannot convert\
    \ \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n   25 |  \
    \       return std::make_tuple(\"\");\n      |                ~~~~~~~~~~~~~~~^~~~\n\
    \      |                               |\n      |                            \
    \   std::tuple<const char*>\n/tmp/tmpec15_e29.cpp:27:31: error: cannot convert\
    \ \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n   27 |  \
    \       return std::make_tuple(\"\");\n      |                ~~~~~~~~~~~~~~~^~~~\n\
    \      |                               |\n      |                            \
    \   std::tuple<const char*>\n/tmp/tmpec15_e29.cpp:29:31: error: cannot convert\
    \ \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n   29 |  \
    \       return std::make_tuple(\"\");\n      |                ~~~~~~~~~~~~~~~^~~~\n\
    \      |                               |\n      |                            \
    \   std::tuple<const char*>\n/tmp/tmpec15_e29.cpp:31:31: error: cannot convert\
    \ \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in retur"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1y5bevds.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp1y5bevds.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp1y5bevds.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1y5bevds.cpp:2:\n/tmp/tmp1y5bevds.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp1y5bevds.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp1y5bevds.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  // your code here\n  std::vector<std::string> planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n  if(planet1 > planet2)\n      std::swap(planet1, planet2);\n\
    \  \n  auto p1 = std::find(planets.begin(), planets.end(), planet1);\n  auto p2\
    \ = std::find(planets.begin(), planets.end(), planet2);\n  if(p1 != planets.end()\
    \ && p2 != planets.end())\n      return std::make_tuple(p1 + 1, p2);\n  return\
    \ std::make_tuple();\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptf6sic7c.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmptf6sic7c.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmptf6sic7c.cpp:25:29: error: cannot\
    \ convert \u2018std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\u2019 to \u2018int\u2019\
    \ in return\n   25 |       return std::make_tuple(p1 + 1, p2);\n      |      \
    \        ~~~~~~~~~~~~~~~^~~~~~~~~~~~\n      |                             |\n\
    \      |                             std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\n/tmp/tmptf6sic7c.cpp:26:25:\
    \ error: cannot convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n\
    \   26 |   return std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n   \
    \   |                         |\n      |                         std::tuple<>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t// Write your code here\n\treturn 0;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp55wxprby.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp55wxprby.cpp:2:\n/tmp/tmp55wxprby.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp55wxprby.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp55wxprby.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp55wxprby.cpp:2:\n/tmp/tmp55wxprby.cpp:22:85: note:\
    \   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018\
    int\u2019\n   22 |    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdt5n3nbx.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpdt5n3nbx.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpdt5n3nbx.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdt5n3nbx.cpp:2:\n/tmp/tmpdt5n3nbx.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpdt5n3nbx.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpdt5n3nbx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> v = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpemt93zlt.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpemt93zlt.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpemt93zlt.cpp:19:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   19 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpemt93zlt.cpp:2:\n/tmp/tmpemt93zlt.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpemt93zlt.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpemt93zlt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n  auto pl1 = std::find(planets.begin(), planets.end(), planet1);\n  auto pl2\
    \ = std::find(planets.begin(), planets.end(), planet2);\n  if(pl1 == planets.end()\
    \ || pl2 == planets.end())\n    return std::make_tuple<std::string>();\n  if(pl1\
    \ > pl2)\n    std::swap(pl1, pl2);\n  std::vector<std::string> res(pl1, pl2);\n\
    \  return std::make_tuple(res.begin(), res.end());\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdv7eh44c.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpdv7eh44c.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpdv7eh44c.cpp:21:41: error: too\
    \ few arguments to function \u2018constexpr std::tuple<typename std::__decay_and_strip<_Elements>::__type\
    \ ...> std::make_tuple(_Elements&& ...) [with _Elements = {std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >}]\u2019\n   21 |     return std::make_tuple<std::string>();\n\
    \      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdv7eh44c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note: declared here\n 1470 |     make_tuple(_Elements&&... __args)\n      |\
    \     ^~~~~~~~~~\n/tmp/tmpdv7eh44c.cpp:25:25: error: cannot convert \u2018std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\u2019 to \u2018int\u2019\
    \ in return\n   25 |   return std::make_tuple(res.begin(), res.end());\n     \
    \ |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n      |                \
    \         |\n      |                         std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets;\n  if (planet1 ==\
    \ \"Mercury\") planets.push_back(\"Mercury\");\n  if (planet1 == \"Venus\") planets.push_back(\"\
    Venus\");\n  if (planet1 == \"Earth\") planets.push_back(\"Earth\");\n  if (planet1\
    \ == \"Mars\") planets.push_back(\"Mars\");\n  if (planet1 == \"Jupiter\") planets.push_back(\"\
    Jupiter\");\n  if (planet1 == \"Saturn\") planets.push_back(\"Saturn\");\n  if\
    \ (planet1 == \"Uranus\") planets.push_back(\"Uranus\");\n  if (planet1 == \"\
    Neptune\") planets.push_back(\"Neptune\");\n  if (planet2 == \"Mercury\") planets.push_back(\"\
    Mercury\");\n  if (planet2 == \"Venus\") planets.push_back(\"Venus\");\n  if (planet2\
    \ == \"Earth\") planets.push_back(\"Earth\");\n  if (planet2 == \"Mars\") planets.push_back(\"\
    Mars\");\n  if (planet2 == \"Jupiter\") planets.push_back(\"Jupiter\");\n  if\
    \ (planet2 == \"Saturn\") planets.push_back(\"Saturn\");\n  if (planet2 == \"\
    Uranus\") planets.push_back(\"Uranus\");\n  if (planet2 == \"Neptune\") planets.push_back(\"\
    Neptune\");\n  for (int i = 0; i < planets.size(); i++) {\n    for (int j = i\
    \ + 1; j < planets.size(); j++) {\n      if (planets[i] > planets[j]) {\n    \
    \    std::string temp = planets[i];\n        planets[i] = planets[j];\n      \
    \  planets[j] = temp;\n      }\n    }\n  }\n  std::vector<std::string> planets2;\n\
    \  for (int i = 0; i < planets.size(); i++) {\n    if (planets[i] != planet1 &&\
    \ planets[i] != planet2) planets2.push_back(planets[i]);\n  }\n  std::tuple<std::string,\
    \ > answer;\n  return answer;\n\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpezh3q98p.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpezh3q98p.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpezh3q98p.cpp:47:27: error: template\
    \ argument 2 is invalid\n   47 |   std::tuple<std::string, > answer;\n      |\
    \                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpezh3q98p.cpp:2:\n/tmp/tmpezh3q98p.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpezh3q98p.cpp:53:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   53 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpezh3q98p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    //TODO : \n    std::string planetList[] = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::tuple<std::string, > result;\n    for(int i = 0; i < 8; i++) {\n\
    \        //TODO:\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpl8uitf5b.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpl8uitf5b.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpl8uitf5b.cpp:19:29: error: template\
    \ argument 2 is invalid\n   19 |     std::tuple<std::string, > result;\n     \
    \ |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl8uitf5b.cpp:2:\n/tmp/tmpl8uitf5b.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpl8uitf5b.cpp:27:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   27 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpl8uitf5b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skyla"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t// your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpb399vd17.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpb399vd17.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpb399vd17.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb399vd17.cpp:2:\n/tmp/tmpb399vd17.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpb399vd17.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpb399vd17.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::string planets[] = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::unordered_map<std::string, int> um;\n    for (int i = 0; i < 8; i++)\n\
    \        um[planets[i]] = i;\n    if (um.find(planet1) == um.end() || um.find(planet2)\
    \ == um.end())\n        return std::make_tuple();\n    int low = std::min(um[planet1],\
    \ um[planet2]);\n    int high = std::max(um[planet1], um[planet2]);\n    std::tuple<std::string,\
    \ std::string, std::string, std::string, std::string> res;\n    auto[a, b, c,\
    \ d, e] = res;\n    int k = 0;\n    for (int i = low + 1; i < high; i++) {\n \
    \       switch (k) {\n            case 0: a = planets[i]; break;\n           \
    \ case 1: b = planets[i]; break;\n            case 2: c = planets[i]; break;\n\
    \            case 3: d = planets[i]; break;\n            case 4: e = planets[i];\
    \ break;\n        }\n        k++;\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"),\
    \ (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa317djbj.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpa317djbj.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpa317djbj.cpp:22:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   22 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpa317djbj.cpp:26:9: warning: structured bindings only available with \u2018\
    -std=c++17\u2019 or \u2018-std=gnu++17\u2019\n   26 |     auto[a, b, c, d, e]\
    \ = res;\n      |         ^\n/tmp/tmpa317djbj.cpp:38:12: error: cannot convert\
    \ \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >\u2019 to \u2018int\u2019 in return\n   38 |     return res;\n      |   \
    \         ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa317djbj.cpp:2:\n/tmp/tmpa317djbj.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpa317djbj.cpp:42:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   42 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::tuple<std::string, > t = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  return t;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnz0f7yxm.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpnz0f7yxm.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpnz0f7yxm.cpp:17:29: error: template\
    \ argument 2 is invalid\n   17 |     std::tuple<std::string, > t = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n      |                             ^\n/tmp/tmpnz0f7yxm.cpp:17:31: error:\
    \ scalar object \u2018t\u2019 requires one element in initializer\n   17 |   \
    \  std::tuple<std::string, > t = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n      |                \
    \               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnz0f7yxm.cpp:2:\n/tmp/tmpnz0f7yxm.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpnz0f7yxm.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnz0f7yxm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& _"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp47g_ytca.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp47g_ytca.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp47g_ytca.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp47g_ytca.cpp:2:\n/tmp/tmp47g_ytca.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp47g_ytca.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp47g_ytca.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  //your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp2ukh1u2r.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp2ukh1u2r.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp2ukh1u2r.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2ukh1u2r.cpp:2:\n/tmp/tmp2ukh1u2r.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp2ukh1u2r.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp2ukh1u2r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    return std::make_tuple<std::string, >(\"\");\n}\n\
    int main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2iin7t8q.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp2iin7t8q.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp2iin7t8q.cpp:17:17: error: parse\
    \ error in template argument list\n   17 |     return std::make_tuple<std::string,\
    \ >(\"\");\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iin7t8q.cpp:17:45:\
    \ error: no matching function for call to \u2018make_tuple<std::string, <expression\
    \ error> >(const char [1])\u2019\n   17 |     return std::make_tuple<std::string,\
    \ >(\"\");\n      |                                             ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp2iin7t8q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note: candidate: \u2018template<class ... _Elements> constexpr std::tuple<typename\
    \ std::__decay_and_strip<_Elements>::__type ...> std::make_tuple(_Elements&& ...)\u2019\
    \n 1470 |     make_tuple(_Elements&&... __args)\n      |     ^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp2iin7t8q.cpp:17:45:\
    \ error: template argument 2 is invalid\n   17 |     return std::make_tuple<std::string,\
    \ >(\"\");\n      |                                             ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n     \
    \            from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2iin7t8q.cpp:2:\n/tmp/tmp2iin7t8q.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp2iin7t8q.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tchar planets[8][10] = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\tint \
    \ index1, index2;\n\tstd::tuple<std::string, > res;\n\tfor(int i = 0; i < 8; i++)\n\
    \t{\n\t\tif(strcmp(planets[i], planet1) == 0)\n\t\t\tindex1 = i;\n\t\tif(strcmp(planets[i],\
    \ planet2) == 0)\n\t\t\tindex2 = i;\n\t}\n\tif(index1 < index2)\n\t{\n\t\tfor(int\
    \ i = index1 + 1; i < index2; i++)\n\t\t{\n\t\t\tstd::get<>(res) = std::get<>(res)\
    \ + \", \" + planets[i];\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor(int i = index2 + 1;\
    \ i < index1; i++)\n\t\t{\n\t\t\tstd::get<>(res) = std::get<>(res) + \", \" +\
    \ planets[i];\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpt7x520hh.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpt7x520hh.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpt7x520hh.cpp:19:26: error: template\
    \ argument 2 is invalid\n   19 |  std::tuple<std::string, > res;\n      |    \
    \                      ^\n/tmp/tmpt7x520hh.cpp:22:25: error: cannot convert \u2018\
    std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018\
    const char*\u2019\n   22 |   if(strcmp(planets[i], planet1) == 0)\n      |   \
    \                      ^~~~~~~\n      |                         |\n      |   \
    \                      std::string {aka std::__cxx11::basic_string<char>}\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cstring:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpt7x520hh.cpp:2:\n/usr/include/string.h:140:50:\
    \ note:   initializing argument 2 of \u2018int strcmp(const char*, const char*)\u2019\
    \n  140 | extern int strcmp (const char *__s1, const char *__s2)\n      |    \
    \                                  ~~~~~~~~~~~~^~~~\n/tmp/tmpt7x520hh.cpp:24:25:\
    \ error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const char*\u2019\n   24 |   if(strcmp(planets[i], planet2) == 0)\n\
    \      |                         ^~~~~~~\n      |                         |\n\
    \      |                         std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cstring:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpt7x520hh.cpp:2:\n/usr/include/string.h:140:50:\
    \ note:   initializing argument 2 of \u2018int strcmp(const char*, const char*)\u2019\
    \n  140 | extern int strcmp (const char *__s1, const char *__s2)\n      |    \
    \                                  ~~~~~~~~~~~~^~~~\n/tmp/tmpt7x520hh.cpp:31:18:\
    \ error: no matching function fo"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tif (planet1 == \"Mercury\") {\n\t\tif (planet2 ==\
    \ \"Mercury\")\n\t\t\treturn std::make_tuple<std::string>();\n\t\telse if (planet2\
    \ == \"Venus\")\n\t\t\treturn std::make_tuple<std::string>(\"Venus\");\n\t\telse\
    \ if (planet2 == \"Earth\")\n\t\t\treturn std::make_tuple<std::string>(\"Venus\"\
    , \"Earth\");\n\t\telse if (planet2 == \"Mars\")\n\t\t\treturn std::make_tuple<std::string>(\"\
    Venus\", \"Earth\", \"Mars\");\n\t\telse if (planet2 == \"Jupiter\")\n\t\t\treturn\
    \ std::make_tuple<std::string>(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n\
    \t\telse if (planet2 == \"Saturn\")\n\t\t\treturn std::make_tuple<std::string>(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n\t\telse if (planet2\
    \ == \"Uranus\")\n\t\t\treturn std::make_tuple<std::string>(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\");\n\t\telse if (planet2 == \"\
    Neptune\")\n\t\t\treturn std::make_tuple<std::string>(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\telse\n\t\t\treturn\
    \ std::make_tuple<std::string>();\n\t}\n\telse if (planet1 == \"Venus\") {\n\t\
    \tif (planet2 == \"Mercury\")\n\t\t\treturn std::make_tuple<std::string>();\n\t\
    \telse if (planet2 == \"Venus\")\n\t\t\treturn std::make_tuple<std::string>();\n\
    \t\telse if (planet2 == \"Earth\")\n\t\t\treturn std::make_tuple<std::string>(\"\
    Earth\");\n\t\telse if (planet2 == \"Mars\")\n\t\t\treturn std::make_tuple<std::string>(\"\
    Earth\", \"Mars\");\n\t\t\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6tkskthc.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp6tkskthc.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp6tkskthc.cpp:19:40: error: too\
    \ few arguments to function \u2018constexpr std::tuple<typename std::__decay_and_strip<_Elements>::__type\
    \ ...> std::make_tuple(_Elements&& ...) [with _Elements = {std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >}]\u2019\n   19 |    return std::make_tuple<std::string>();\n\
    \      |                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp6tkskthc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note: declared here\n 1470 |     make_tuple(_Elements&&... __args)\n      |\
    \     ^~~~~~~~~~\n/tmp/tmp6tkskthc.cpp:21:39: error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\u2019 to \u2018int\u2019 in\
    \ return\n   21 |    return std::make_tuple<std::string>(\"Venus\");\n      |\
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n      |                   \
    \                    |\n      |                                       std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\n/tmp/tmp6tkskthc.cpp:23:39:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, const char*>\u2019 to \u2018int\u2019 in return\n  \
    \ 23 |    return std::make_tuple<std::string>(\"Venus\", \"Earth\");\n      |\
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n      |          \
    \                             |\n      |                                     \
    \  std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, const char*>\n/tmp/tmp6tkskthc.cpp:25:39: error: cannot conver"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> output;\n    auto planet1_index = std::find(planets.begin(),\
    \ planets.end(), planet1);\n    auto planet2_index = std::find(planets.begin(),\
    \ planets.end(), planet2);\n    auto planet1_distance = std::distance(planets.begin(),\
    \ planet1_index);\n    auto planet2_distance = std::distance(planets.begin(),\
    \ planet2_index);\n    if (planet1_index == planets.end() || planet2_index ==\
    \ planets.end()) {\n        return std::make_tuple();\n    } else if (planet1_distance\
    \ < planet2_distance) {\n        for (auto i = planet1_index + 1; i != planet2_index;\
    \ i++) {\n            output.push_back(*i);\n        }\n    } else {\n       \
    \ for (auto i = planet2_index + 1; i != planet1_index; i++) {\n            output.push_back(*i);\n\
    \        }\n    }\n    return std::make_tuple(output);\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp81wbu1fb.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp81wbu1fb.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp81wbu1fb.cpp:24:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   24 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmp81wbu1fb.cpp:34:27: error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   34 |     return std::make_tuple(output);\n      |            ~~~~~~~~~~~~~~~^~~~~~~~\n\
    \      |                           |\n      |                           std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp81wbu1fb.cpp:2:\n/tmp/tmp81wbu1fb.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp81wbu1fb.cpp:38:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   38 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 fro"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbvog5_m7.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpbvog5_m7.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpbvog5_m7.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbvog5_m7.cpp:2:\n/tmp/tmpbvog5_m7.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpbvog5_m7.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpbvog5_m7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    if(planet1 == \"Mercury\") {\n        if(planet2\
    \ == \"Venus\") {\n            return std::make_tuple(\"Mercury\", \"Venus\");\n\
    \        }\n        if(planet2 == \"Earth\") {\n            return std::make_tuple(\"\
    Mercury\", \"Venus\", \"Earth\");\n        }\n        if(planet2 == \"Mars\")\
    \ {\n            return std::make_tuple(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\");\n        }\n        if(planet2 == \"Jupiter\") {\n            return\
    \ std::make_tuple(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n\
    \        }\n        if(planet2 == \"Saturn\") {\n            return std::make_tuple(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n       \
    \ }\n        if(planet2 == \"Uranus\") {\n            return std::make_tuple(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    );\n        }\n        if(planet2 == \"Neptune\") {\n            return std::make_tuple(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n        }\n    }\n    if(planet1 == \"Venus\") {\n        if(planet2\
    \ == \"Earth\") {\n            return std::make_tuple(\"Venus\", \"Earth\");\n\
    \        }\n        if(planet2 == \"Mars\") {\n            return std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\");\n        }\n        if(planet2 == \"Jupiter\")\
    \ {\n            return std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    );\n        }\n        if(planet2 == \"Saturn\") {\n            return std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n        }\n        if(planet2\
    \ == \"Uranus\") {\n            return std::make_tuple(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"U\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxvbmpx86.cpp:54:83: warning: missing terminating \" character\n\
    \   54 |             return std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"U\n      |                                          \
    \                                         ^\n/tmp/tmpxvbmpx86.cpp:54:83: error:\
    \ missing terminating \" character\n   54 |             return std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"U\n      |          \
    \                                                                         ^~\n\
    /tmp/tmpxvbmpx86.cpp:16:25: error: template argument 2 is invalid\n   16 | std::tuple<std::string,\
    \ > bf(std::string planet1, std::string planet2) {\n      |                  \
    \       ^\n/tmp/tmpxvbmpx86.cpp: In function \u2018int bf(std::string, std::string)\u2019\
    :\n/tmp/tmpxvbmpx86.cpp:19:35: error: cannot convert \u2018std::tuple<const char*,\
    \ const char*>\u2019 to \u2018int\u2019 in return\n   19 |             return\
    \ std::make_tuple(\"Mercury\", \"Venus\");\n      |                    ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \      |                                   |\n      |                        \
    \           std::tuple<const char*, const char*>\n/tmp/tmpxvbmpx86.cpp:22:35:\
    \ error: cannot convert \u2018std::tuple<const char*, const char*, const char*>\u2019\
    \ to \u2018int\u2019 in return\n   22 |             return std::make_tuple(\"\
    Mercury\", \"Venus\", \"Earth\");\n      |                    ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                   |\n      |                        \
    \           std::tuple<const char*, const char*, const char*>\n/tmp/tmpxvbmpx86.cpp:25:35:\
    \ error: cannot convert \u2018std::tuple<const char*, const char*, const char*,\
    \ const char*>\u2019 to \u2018int\u2019 in return\n   25 |             return\
    \ std::make_tuple(\"Mercury\", \"Venus\", \"Earth\", \"Mars\");\n      |     \
    \               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |\
    \                                   |\n      |                               \
    \    std::tuple<const char*, const char*, const char*, const char*>\n/tmp/tmpxvbmpx86.cpp:28:35:\
    \ error: cannot convert \u2018std::tuple<const char*, const char*"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    const std::map<std::string, int> order = {\n   \
    \   {\"Mercury\", 1},\n      {\"Venus\", 2},\n      {\"Earth\", 3},\n      {\"\
    Mars\", 4},\n      {\"Jupiter\", 5},\n      {\"Saturn\", 6},\n      {\"Uranus\"\
    , 7},\n      {\"Neptune\", 8}\n    };\n    auto p1 = order.find(planet1);\n  \
    \  auto p2 = order.find(planet2);\n    if (p1 == order.end() || p2 == order.end())\
    \ {\n      return std::make_tuple();\n    }\n    std::vector<std::string> res;\n\
    \    if (p1->second > p2->second) {\n      std::swap(p1, p2);\n    }\n    for\
    \ (int i = p1->second + 1; i < p2->second; ++i) {\n      for (auto &p : order)\
    \ {\n        if (p.second == i) {\n          res.push_back(p.first);\n       \
    \ }\n      }\n    }\n    return std::make_tuple(res[0], res[1], res[2], res[3],\
    \ res[4]);\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8rgvffi2.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp8rgvffi2.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp8rgvffi2.cpp:30:29: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   30 |     \
    \  return std::make_tuple();\n      |              ~~~~~~~~~~~~~~~^~\n      |\
    \                             |\n      |                             std::tuple<>\n\
    /tmp/tmp8rgvffi2.cpp:43:27: error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\u2019 to \u2018int\u2019 in\
    \ return\n   43 |     return std::make_tuple(res[0], res[1], res[2], res[3], res[4]);\n\
    \      |            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                           |\n      |                           std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8rgvffi2.cpp:2:\n/tmp/tmp8rgvffi2.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp8rgvffi2.cpp:47:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tif (std::find(planets.begin(), planets.end(), planet1) == planets.end()\
    \ || std::find(planets.begin(), planets.end(), planet2) == planets.end())\n\t\t\
    return std::make_tuple();\n\tstd::vector<std::string> result;\n\tint i1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n\tint i2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n\tif (i1 < i2) {\n\t\twhile (i1\
    \ <= i2) {\n\t\t\tresult.push_back(planets[i1]);\n\t\t\ti1++;\n\t\t}\n\t}\n\t\
    else {\n\t\twhile (i1 <= 7) {\n\t\t\tresult.push_back(planets[i1]);\n\t\t\ti1++;\n\
    \t\t}\n\t\ti1 = 0;\n\t\twhile (i1 <= i2) {\n\t\t\tresult.push_back(planets[i1]);\n\
    \t\t\ti1++;\n\t\t}\n\t}\n\tstd::tuple<std::string, > t(result.begin(), result.end());\n\
    \treturn t;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm2b97jam.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpm2b97jam.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpm2b97jam.cpp:19:25: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   19 |   return\
    \ std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n      |            \
    \             |\n      |                         std::tuple<>\n/tmp/tmpm2b97jam.cpp:40:26:\
    \ error: template argument 2 is invalid\n   40 |  std::tuple<std::string, > t(result.begin(),\
    \ result.end());\n      |                          ^\n/tmp/tmpm2b97jam.cpp:40:58:\
    \ error: expression list treated as compound expression in initializer [-fpermissive]\n\
    \   40 |  std::tuple<std::string, > t(result.begin(), result.end());\n      |\
    \                                                          ^\n/tmp/tmpm2b97jam.cpp:40:56:\
    \ error: cannot convert \u2018std::vector<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019} to \u2018int\u2019 in initialization\n   40 |  std::tuple<std::string,\
    \ > t(result.begin(), result.end());\n      |                                \
    \              ~~~~~~~~~~^~\n      |                                         \
    \               |\n      |                                                   \
    \     std::vector<std::__cxx11::basic_string<char> >::iterator {aka __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm2b97jam.cpp:2:\n/tmp/tmpm2b97jam.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpm2b97jam.cpp:45:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   45 |     assert(candidate(("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    static const std::string planets[] = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \n                                         \
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2\
    \ = -1;\n    for (int i = 0; i < 8; i++) {\n        if (planets[i] == planet1)\
    \ {\n            pos1 = i;\n        }\n        if (planets[i] == planet2) {\n\
    \            pos2 = i;\n        }\n    }\n    if (pos1 == -1 || pos2 == -1) {\n\
    \        return std::make_tuple();\n    }\n    std::tuple<std::string, > res;\n\
    \    int pos;\n    if (pos1 < pos2) {\n        pos = pos1 + 1;\n        while\
    \ (pos < pos2) {\n            res.push_back(planets[pos]);\n            pos++;\n\
    \        }\n    } else {\n        pos = pos1 - 1;\n        while (pos > pos2)\
    \ {\n            res.push_back(planets[pos]);\n            pos--;\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpksmafzti.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpksmafzti.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpksmafzti.cpp:29:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   29 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpksmafzti.cpp:31:29: error: template argument 2 is invalid\n   31 |   \
    \  std::tuple<std::string, > res;\n      |                             ^\n/tmp/tmpksmafzti.cpp:36:17:\
    \ error: request for member \u2018push_back\u2019 in \u2018res\u2019, which is\
    \ of non-class type \u2018int\u2019\n   36 |             res.push_back(planets[pos]);\n\
    \      |                 ^~~~~~~~~\n/tmp/tmpksmafzti.cpp:42:17: error: request\
    \ for member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type\
    \ \u2018int\u2019\n   42 |             res.push_back(planets[pos]);\n      | \
    \                ^~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpksmafzti.cpp:2:\n/tmp/tmpksmafzti.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpksmafzti.cpp:50:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   50 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \              "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::tuple<std::string, > t;\n  return t;\n}\nint\
    \ main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe59wj1w6.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpe59wj1w6.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpe59wj1w6.cpp:17:27: error: template\
    \ argument 2 is invalid\n   17 |   std::tuple<std::string, > t;\n      |     \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe59wj1w6.cpp:2:\n/tmp/tmpe59wj1w6.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpe59wj1w6.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpe59wj1w6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/includ"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\",\n\t\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tint ind1 = 0, ind2 = 0;\n\tfor (int i = 0; i < planets.size(); i++) {\n\
    \t\tif (planets[i] == planet1)\n\t\t\tind1 = i;\n\t\tif (planets[i] == planet2)\n\
    \t\t\tind2 = i;\n\t}\n\tif (ind1 == 0 && ind2 == 0) {\n\t\tstd::tuple<std::string,\
    \ > tpl;\n\t\treturn tpl;\n\t}\n\tif (ind1 > ind2) {\n\t\tint tmp = ind1;\n\t\t\
    ind1 = ind2;\n\t\tind2 = tmp;\n\t}\n\tstd::tuple<std::string, > tpl(planets[ind1\
    \ + 1],\n\t\t\tplanets[ind2 - 1]);\n\treturn tpl;\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphbgr9cbu.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmphbgr9cbu.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmphbgr9cbu.cpp:27:27: error: template\
    \ argument 2 is invalid\n   27 |   std::tuple<std::string, > tpl;\n      |   \
    \                        ^\n/tmp/tmphbgr9cbu.cpp:35:26: error: template argument\
    \ 2 is invalid\n   35 |  std::tuple<std::string, > tpl(planets[ind1 + 1],\n  \
    \    |                          ^\n/tmp/tmphbgr9cbu.cpp:36:21: error: expression\
    \ list treated as compound expression in initializer [-fpermissive]\n   36 | \
    \   planets[ind2 - 1]);\n      |                     ^\n/tmp/tmphbgr9cbu.cpp:36:21:\
    \ error: cannot convert \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019 in initialization\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphbgr9cbu.cpp:2:\n/tmp/tmphbgr9cbu.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmphbgr9cbu.cpp:41:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   41 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmphbgr9cbu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tstd::tuple<std::string, > result;\n\tstd::vector<std::string>::iterator\
    \ pos1, pos2;\n\tpos1 = std::find(planets.begin(), planets.end(), planet1);\n\t\
    pos2 = std::find(planets.begin(), planets.end(), planet2);\n\tif(pos1 == planets.end()\
    \ || pos2 == planets.end()) return result;\n\tif(pos1 < pos2) {\n\t\tstd::copy(pos1+1,\
    \ pos2, result.begin());\n\t} else {\n\t\tstd::copy(pos2+1, pos1, result.begin());\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6h4hrf3t.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp6h4hrf3t.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp6h4hrf3t.cpp:18:26: error: template\
    \ argument 2 is invalid\n   18 |  std::tuple<std::string, > result;\n      | \
    \                         ^\n/tmp/tmp6h4hrf3t.cpp:24:34: error: request for member\
    \ \u2018begin\u2019 in \u2018result\u2019, which is of non-class type \u2018int\u2019\
    \n   24 |   std::copy(pos1+1, pos2, result.begin());\n      |                \
    \                  ^~~~~\n/tmp/tmp6h4hrf3t.cpp:26:34: error: request for member\
    \ \u2018begin\u2019 in \u2018result\u2019, which is of non-class type \u2018int\u2019\
    \n   26 |   std::copy(pos2+1, pos1, result.begin());\n      |                \
    \                  ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6h4hrf3t.cpp:2:\n/tmp/tmp6h4hrf3t.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp6h4hrf3t.cpp:32:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   32 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6h4hrf3t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cx"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::string planet[] = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\tstd::vector<std::string>\
    \ data;\n\tstd::vector<std::string> result;\n\tint i, j;\n\tbool a = false, b\
    \ = false;\n\tfor(i = 0; i < sizeof(planet)/sizeof(planet[0]); i++) {\n\t\tif(planet[i]\
    \ == planet1) a = true;\n\t\tif(planet[i] == planet2) b = true;\n\t\tdata.push_back(planet[i]);\n\
    \t}\n\tif(a && b) {\n\t\tif(std::find(data.begin(), data.end(), planet1) - data.begin()\
    \ > std::find(data.begin(), data.end(), planet2) - data.begin()) {\n\t\t\tfor(i\
    \ = std::find(data.begin(), data.end(), planet2) - data.begin(); i < std::find(data.begin(),\
    \ data.end(), planet1) - data.begin(); i++) {\n\t\t\t\tresult.push_back(data[i]);\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor(i = std::find(data.begin(), data.end(),\
    \ planet1) - data.begin(); i < std::find(data.begin(), data.end(), planet2) -\
    \ data.begin(); i++) {\n\t\t\t\tresult.push_back(data[i]);\n\t\t\t}\n\t\t}\n\t\
    }\n\t\n\treturn std::make_tuple(result);\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpsi49zb9q.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpsi49zb9q.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpsi49zb9q.cpp:40:24: error: cannot\
    \ convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\u2019 to \u2018int\u2019 in return\n   40 |  return\
    \ std::make_tuple(result);\n      |         ~~~~~~~~~~~~~~~^~~~~~~~\n      | \
    \                       |\n      |                        std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsi49zb9q.cpp:2:\n/tmp/tmpsi49zb9q.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpsi49zb9q.cpp:44:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   44 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpsi49zb9q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx1"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpnqmxrcs8.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpnqmxrcs8.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpnqmxrcs8.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnqmxrcs8.cpp:2:\n/tmp/tmpnqmxrcs8.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpnqmxrcs8.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnqmxrcs8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> v = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> planets;\n    auto it1 = std::find(v.begin(), v.end(),\
    \ planet1);\n    auto it2 = std::find(v.begin(), v.end(), planet2);\n    if (it1\
    \ == v.end() || it2 == v.end())\n        return std::make_tuple();\n    if (std::distance(it1,\
    \ it2) > 0)\n        std::copy(it1 + 1, it2, std::back_inserter(planets));\n \
    \   else\n        std::copy(it2 + 1, it1, std::back_inserter(planets));\n    return\
    \ std::make_tuple(planets);\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl5ikriwj.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpl5ikriwj.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpl5ikriwj.cpp:22:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   22 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpl5ikriwj.cpp:27:27: error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   27 |     return std::make_tuple(planets);\n      |           \
    \ ~~~~~~~~~~~~~~~^~~~~~~~~\n      |                           |\n      |     \
    \                      std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl5ikriwj.cpp:2:\n/tmp/tmpl5ikriwj.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpl5ikriwj.cpp:31:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   31 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 f"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp44gqupz2.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp44gqupz2.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp44gqupz2.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp44gqupz2.cpp:2:\n/tmp/tmp44gqupz2.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp44gqupz2.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp44gqupz2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    auto convert = [](const std::string& planet) {\n\
    \        const auto all_planets = {\n            \"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        };\n   \
    \     auto it = std::find(all_planets.begin(), all_planets.end(), planet);\n \
    \       return (it == all_planets.end()) ? std::tuple<std::string, >() : std::tuple<std::string,\
    \ >(it, it + 1);\n    };\n    auto p1 = convert(planet1);\n    auto p2 = convert(planet2);\n\
    \    if (p1.empty() || p2.empty()) {\n        return std::tuple<std::string, >();\n\
    \    }\n    return p1 < p2 ? std::tuple<std::string, >(p1, p2) : std::tuple<std::string,\
    \ >(p2, p1);\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpleuenywt.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpleuenywt.cpp: In lambda function:\n\
    /tmp/tmpleuenywt.cpp:22:68: error: template argument 2 is invalid\n   22 |   \
    \      return (it == all_planets.end()) ? std::tuple<std::string, >() : std::tuple<std::string,\
    \ >(it, it + 1);\n      |                                                    \
    \                ^\n/tmp/tmpleuenywt.cpp:22:98: error: template argument 2 is\
    \ invalid\n   22 |         return (it == all_planets.end()) ? std::tuple<std::string,\
    \ >() : std::tuple<std::string, >(it, it + 1);\n      |                      \
    \                                                                            ^\n\
    /tmp/tmpleuenywt.cpp: In function \u2018int bf(std::string, std::string)\u2019\
    :\n/tmp/tmpleuenywt.cpp:24:10: error: \u2018void p1\u2019 has incomplete type\n\
    \   24 |     auto p1 = convert(planet1);\n      |          ^~\n/tmp/tmpleuenywt.cpp:25:10:\
    \ error: \u2018void p2\u2019 has incomplete type\n   25 |     auto p2 = convert(planet2);\n\
    \      |          ^~\n/tmp/tmpleuenywt.cpp:27:40: error: template argument 2 is\
    \ invalid\n   27 |         return std::tuple<std::string, >();\n      |      \
    \                                  ^\n/tmp/tmpleuenywt.cpp:29:46: error: template\
    \ argument 2 is invalid\n   29 |     return p1 < p2 ? std::tuple<std::string,\
    \ >(p1, p2) : std::tuple<std::string, >(p2, p1);\n      |                    \
    \                          ^\n/tmp/tmpleuenywt.cpp:29:82: error: template argument\
    \ 2 is invalid\n   29 |     return p1 < p2 ? std::tuple<std::string, >(p1, p2)\
    \ : std::tuple<std::string, >(p2, p1);\n      |                              \
    \                                                    ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpleuenywt.cpp:2:\n/tmp/tmpleuenywt.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpleue"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::string planets[] = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  int p1\
    \ = -1, p2 = -1;\n  for (int i = 0; i < 8; i++) {\n    if (planets[i] == planet1)\
    \ {\n      p1 = i;\n    }\n    if (planets[i] == planet2) {\n      p2 = i;\n \
    \   }\n  }\n  if (p1 == -1 || p2 == -1) {\n    return std::make_tuple();\n  }\n\
    \  if (p1 > p2) {\n    std::swap(p1, p2);\n  }\n  std::vector<std::string> v;\n\
    \  for (int i = p1 + 1; i < p2; i++) {\n    v.push_back(planets[i]);\n  }\n  return\
    \ std::make_tuple(v[0], v[1], v[2], v[3], v[4]);\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpol7y2zzu.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpol7y2zzu.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpol7y2zzu.cpp:28:27: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   28 |     return\
    \ std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n      |          \
    \                 |\n      |                           std::tuple<>\n/tmp/tmpol7y2zzu.cpp:37:25:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   37 |   return\
    \ std::make_tuple(v[0], v[1], v[2], v[3], v[4]);\n      |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                         |\n      |                         std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpol7y2zzu.cpp:2:\n/tmp/tmpol7y2zzu.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpol7y2zzu.cpp:41:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   41 |     assert(candidate((\"Jupi"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets{\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\t\
    std::vector<std::string> result{};\n\tbool p1 = false, p2 = false;\n\tfor (auto\
    \ i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1) p1 = true;\n\
    \t\tif (planets[i] == planet2) p2 = true;\n\t}\n\tif (!p1 || !p2) return std::make_tuple();\n\
    \telse {\n\t\tfor (auto i = 0; i < planets.size(); i++) {\n\t\t\tif (planets[i]\
    \ == planet1) {\n\t\t\t\tfor (auto j = i + 1; j < planets.size(); j++) {\n\t\t\
    \t\t\tif (planets[j] == planet2) break;\n\t\t\t\t\tresult.push_back(planets[j]);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tauto res_tuple = std::make_tuple(result[0],\
    \ result[1], result[2], result[3], result[4]);\n\treturn res_tuple;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbl2q2gzd.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpbl2q2gzd.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpbl2q2gzd.cpp:24:40: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   24 |  if (!p1\
    \ || !p2) return std::make_tuple();\n      |                         ~~~~~~~~~~~~~~~^~\n\
    \      |                                        |\n      |                   \
    \                     std::tuple<>\n/tmp/tmpbl2q2gzd.cpp:36:9: error: cannot convert\
    \ \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >\u2019 to \u2018int\u2019 in return\n   36 |  return res_tuple;\n      |\
    \         ^~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbl2q2gzd.cpp:2:\n/tmp/tmpbl2q2gzd.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpbl2q2gzd.cpp:40:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   40 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-p"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  // your code here\n  return {};\n}\nint main() {\n\
    \    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"))\
    \ == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptki_zo1x.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptki_zo1x.cpp:2:\n/tmp/tmptki_zo1x.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmptki_zo1x.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmptki_zo1x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptki_zo1x.cpp:2:\n/tmp/tmptki_zo1x.cpp:22:85: note:\
    \   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018\
    int\u2019\n   22 |    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::tuple<std::string, > no_answer;\n    std::tuple<std::string, > answer;\n\
    \    int start_index = -1;\n    int end_index = -1;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        if (planets[i] == planet1) {\n            start_index = i;\n\
    \        } else if (planets[i] == planet2) {\n            end_index = i;\n   \
    \     }\n    }\n    if (start_index == -1 || end_index == -1) {\n        return\
    \ no_answer;\n    }\n    for (int i = start_index; i < end_index; i++) {\n   \
    \     std::get<0>(answer) = planets[i];\n    }\n    return answer;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp00zpt6mj.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp00zpt6mj.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp00zpt6mj.cpp:18:29: error: template\
    \ argument 2 is invalid\n   18 |     std::tuple<std::string, > no_answer;\n  \
    \    |                             ^\n/tmp/tmp00zpt6mj.cpp:19:29: error: template\
    \ argument 2 is invalid\n   19 |     std::tuple<std::string, > answer;\n     \
    \ |                             ^\n/tmp/tmp00zpt6mj.cpp:33:27: error: no matching\
    \ function for call to \u2018get<0>(int&)\u2019\n   33 |         std::get<0>(answer)\
    \ = planets[i];\n      |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp00zpt6mj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp00zpt6mj.cpp:33:27:\
    \ note:   mismatched types \u2018std::pair<_Tp1, _Tp2>\u2019 and \u2018int\u2019\
    \n   33 |         std::get<0>(answer) = planets[i];\n      |                 \
    \          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp00zpt6mj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::unordered_map<std::string, int> map = {\n\t\t\
    {\"Mercury\", 0},\n\t\t{\"Venus\", 1},\n\t\t{\"Earth\", 2},\n\t\t{\"Mars\", 3},\n\
    \t\t{\"Jupiter\", 4},\n\t\t{\"Saturn\", 5},\n\t\t{\"Uranus\", 6},\n\t\t{\"Neptune\"\
    , 7}\n\t};\n\tstd::tuple<std::string, > result;\n\tif (map.find(planet1) == map.end()\
    \ || map.find(planet2) == map.end())\n\t\treturn result;\n\tif (map[planet1] >\
    \ map[planet2]) {\n\t\tfor (int i = map[planet2] + 1; i < map[planet1]; i++) {\n\
    \t\t\tfor (auto pair : map) {\n\t\t\t\tif (pair.second == i) {\n\t\t\t\t\tresult.push_back(pair.first);\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = map[planet1]\
    \ + 1; i < map[planet2]; i++) {\n\t\t\tfor (auto pair : map) {\n\t\t\t\tif (pair.second\
    \ == i) {\n\t\t\t\t\tresult.push_back(pair.first);\n\t\t\t\t\tbreak;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpibs82xrg.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpibs82xrg.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpibs82xrg.cpp:27:26: error: template\
    \ argument 2 is invalid\n   27 |  std::tuple<std::string, > result;\n      | \
    \                         ^\n/tmp/tmpibs82xrg.cpp:34:13: error: request for member\
    \ \u2018push_back\u2019 in \u2018result\u2019, which is of non-class type \u2018\
    int\u2019\n   34 |      result.push_back(pair.first);\n      |             ^~~~~~~~~\n\
    /tmp/tmpibs82xrg.cpp:44:13: error: request for member \u2018push_back\u2019 in\
    \ \u2018result\u2019, which is of non-class type \u2018int\u2019\n   44 |    \
    \  result.push_back(pair.first);\n      |             ^~~~~~~~~\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n     \
    \            from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibs82xrg.cpp:2:\n/tmp/tmpibs82xrg.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpibs82xrg.cpp:54:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   54 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpibs82xrg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     ope"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t// your code\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp52p1msk8.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp52p1msk8.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp52p1msk8.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp52p1msk8.cpp:2:\n/tmp/tmp52p1msk8.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp52p1msk8.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp52p1msk8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    return std::make_tuple();\n}\nint main() {\n   \
    \ auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"),\
    \ (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwt5enmb8.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpwt5enmb8.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpwt5enmb8.cpp:17:27: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   17 |     return\
    \ std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n      |          \
    \                 |\n      |                           std::tuple<>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n     \
    \            from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwt5enmb8.cpp:2:\n/tmp/tmpwt5enmb8.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpwt5enmb8.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpwt5enmb8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    assert(planet1 != \"\" && planet2 != \"\");\n  \
    \  std::unordered_map<std::string, int> planets;\n    planets[\"Mercury\"] = 1;\n\
    \    planets[\"Venus\"] = 2;\n    planets[\"Earth\"] = 3;\n    planets[\"Mars\"\
    ] = 4;\n    planets[\"Jupiter\"] = 5;\n    planets[\"Saturn\"] = 6;\n    planets[\"\
    Uranus\"] = 7;\n    planets[\"Neptune\"] = 8;\n    int p1 = planets[planet1];\n\
    \    int p2 = planets[planet2];\n    int min = (p1 < p2) ? p1 : p2;\n    int max\
    \ = (p1 > p2) ? p1 : p2;\n    std::tuple<std::string, > res;\n    for (int i =\
    \ min; i <= max; i++) {\n        switch (i) {\n            case 1:\n         \
    \       res.push_back(\"Mercury\");\n                break;\n            case\
    \ 2:\n                res.push_back(\"Venus\");\n                break;\n    \
    \        case 3:\n                res.push_back(\"Earth\");\n                break;\n\
    \            case 4:\n                res.push_back(\"Mars\");\n             \
    \   break;\n            case 5:\n                res.push_back(\"Jupiter\");\n\
    \                break;\n            case 6:\n                res.push_back(\"\
    Saturn\");\n                break;\n            case 7:\n                res.push_back(\"\
    Uranus\");\n                break;\n            case 8:\n                res.push_back(\"\
    Neptune\");\n                break;\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpch3az35f.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpch3az35f.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpch3az35f.cpp:31:29: error: template\
    \ argument 2 is invalid\n   31 |     std::tuple<std::string, > res;\n      | \
    \                            ^\n/tmp/tmpch3az35f.cpp:35:21: error: request for\
    \ member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type\
    \ \u2018int\u2019\n   35 |                 res.push_back(\"Mercury\");\n     \
    \ |                     ^~~~~~~~~\n/tmp/tmpch3az35f.cpp:38:21: error: request\
    \ for member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type\
    \ \u2018int\u2019\n   38 |                 res.push_back(\"Venus\");\n      |\
    \                     ^~~~~~~~~\n/tmp/tmpch3az35f.cpp:41:21: error: request for\
    \ member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type\
    \ \u2018int\u2019\n   41 |                 res.push_back(\"Earth\");\n      |\
    \                     ^~~~~~~~~\n/tmp/tmpch3az35f.cpp:44:21: error: request for\
    \ member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type\
    \ \u2018int\u2019\n   44 |                 res.push_back(\"Mars\");\n      | \
    \                    ^~~~~~~~~\n/tmp/tmpch3az35f.cpp:47:21: error: request for\
    \ member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type\
    \ \u2018int\u2019\n   47 |                 res.push_back(\"Jupiter\");\n     \
    \ |                     ^~~~~~~~~\n/tmp/tmpch3az35f.cpp:50:21: error: request\
    \ for member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type\
    \ \u2018int\u2019\n   50 |                 res.push_back(\"Saturn\");\n      |\
    \                     ^~~~~~~~~\n/tmp/tmpch3az35f.cpp:53:21: error: request for\
    \ member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type\
    \ \u2018int\u2019\n   53 |                 res.push_back(\"Uranus\");\n      |\
    \                     ^~~~~~~~~\n/tmp/tmpch3az35f.cpp:56:21: error: request for\
    \ member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type\
    \ \u2018int\u2019\n   56 |                 res.push_back(\"Neptune\");\n     \
    \ |                     ^~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:4"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    int p1 = std::find(planets.begin(), planets.end(), planet1) - planets.begin();\n\
    \    int p2 = std::find(planets.begin(), planets.end(), planet2) - planets.begin();\n\
    \    std::string r[] = {};\n    if (p1 > p2)\n        return std::make_tuple(r);\n\
    \    return std::make_tuple(r);\n}\nint main() {\n    auto candidate = bf;\n \
    \   assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpq9rxnxd6.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpq9rxnxd6.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpq9rxnxd6.cpp:22:31: error: cannot\
    \ convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > [0]>\u2019 to \u2018int\u2019 in return\n   22 |    \
    \     return std::make_tuple(r);\n      |                ~~~~~~~~~~~~~~~^~~\n\
    \      |                               |\n      |                            \
    \   std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > [0]>\n/tmp/tmpq9rxnxd6.cpp:23:27: error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > [0]>\u2019 to \u2018int\u2019\
    \ in return\n   23 |     return std::make_tuple(r);\n      |            ~~~~~~~~~~~~~~~^~~\n\
    \      |                           |\n      |                           std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > [0]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq9rxnxd6.cpp:2:\n/tmp/tmpq9rxnxd6.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpq9rxnxd6.cpp:27:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   27 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  return make_tuple();\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp6gytoav1.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp6gytoav1.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp6gytoav1.cpp:17:10: error: \u2018\
    make_tuple\u2019 was not declared in this scope; did you mean \u2018std::make_tuple\u2019\
    ?\n   17 |   return make_tuple();\n      |          ^~~~~~~~~~\n      |      \
    \    std::make_tuple\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp6gytoav1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note: \u2018std::make_tuple\u2019 declared here\n 1470 |     make_tuple(_Elements&&...\
    \ __args)\n      |     ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6gytoav1.cpp:2:\n/tmp/tmp6gytoav1.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp6gytoav1.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6gytoav1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::string planets[] = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::string newPlanets[];\n    int i = 0;\n    int j = 0;\n    int position\
    \ = 0;\n    for(int i = 0; i < 8; i++){\n        if(planets[i] == planet1){\n\
    \            position = i;\n        }\n    }\n    int position2 = 0;\n    for(int\
    \ i = 0; i < 8; i++){\n        if(planets[i] == planet2){\n            position2\
    \ = i;\n        }\n    }\n    int x = position2 - position;\n    for(int i = 0;\
    \ i < x; i++){\n        newPlanets[i] = planets[position];\n        position++;\n\
    \    }\n    return newPlanets;\n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpu8kkwpr9.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpu8kkwpr9.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpu8kkwpr9.cpp:18:17: error: array\
    \ size missing in \u2018newPlanets\u2019\n   18 |     std::string newPlanets[];\n\
    \      |                 ^~~~~~~~~~\n/tmp/tmpu8kkwpr9.cpp:38:12: error: invalid\
    \ conversion from \u2018std::string*\u2019 {aka \u2018std::__cxx11::basic_string<char>*\u2019\
    } to \u2018int\u2019 [-fpermissive]\n   38 |     return newPlanets;\n      | \
    \           ^~~~~~~~~~\n      |            |\n      |            std::string*\
    \ {aka std::__cxx11::basic_string<char>*}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu8kkwpr9.cpp:2:\n/tmp/tmpu8kkwpr9.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpu8kkwpr9.cpp:42:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   42 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpu8kkwpr9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpnee6ey9r.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpnee6ey9r.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpnee6ey9r.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnee6ey9r.cpp:2:\n/tmp/tmpnee6ey9r.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpnee6ey9r.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnee6ey9r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n    \n    \n}\nint main() {\n\
    \    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"))\
    \ == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9mvl8th5.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp9mvl8th5.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp9mvl8th5.cpp:20:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   20 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9mvl8th5.cpp:2:\n/tmp/tmp9mvl8th5.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp9mvl8th5.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp9mvl8th5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> ret;\n    bool f1 = false, f2 = false;\n    std::vector<std::string>::iterator\
    \ it;\n    for (it = planets.begin(); it != planets.end(); it++) {\n        if\
    \ (planet1 == *it) {\n            f1 = true;\n            break;\n        }\n\
    \    }\n    for (it = planets.begin(); it != planets.end(); it++) {\n        if\
    \ (planet2 == *it) {\n            f2 = true;\n            break;\n        }\n\
    \    }\n    if (f1 && f2) {\n        std::vector<std::string>::iterator it1, it2;\n\
    \        for (it1 = planets.begin(); it1 != planets.end(); it1++) {\n        \
    \    if (planet1 == *it1) {\n                break;\n            }\n        }\n\
    \        for (it2 = planets.begin(); it2 != planets.end(); it2++) {\n        \
    \    if (planet2 == *it2) {\n                break;\n            }\n        }\n\
    \        if (it1 > it2) {\n            std::swap(it1, it2);\n        }\n     \
    \   it1++;\n        while (it1 != it2) {\n            ret.push_back(*it1);\n \
    \           it1++;\n        }\n    }\n    std::tuple<std::string, > ret1(ret);\n\
    \    return ret1;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyqbdsne4.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpyqbdsne4.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpyqbdsne4.cpp:54:29: error: template\
    \ argument 2 is invalid\n   54 |     std::tuple<std::string, > ret1(ret);\n  \
    \    |                             ^\n/tmp/tmpyqbdsne4.cpp:54:36: error: cannot\
    \ convert \u2018std::vector<std::__cxx11::basic_string<char> >\u2019 to \u2018\
    int\u2019 in initialization\n   54 |     std::tuple<std::string, > ret1(ret);\n\
    \      |                                    ^~~\n      |                     \
    \               |\n      |                                    std::vector<std::__cxx11::basic_string<char>\
    \ >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyqbdsne4.cpp:2:\n/tmp/tmpyqbdsne4.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpyqbdsne4.cpp:59:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   59 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyqbdsne4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operato"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::string planets[] = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::string p1, p2;\n    int i, j;\n    for (i = 0; i < 8; i++) {\n       \
    \ if (planets[i] == planet1) {\n            p1 = planet1;\n            break;\n\
    \        }\n    }\n    for (j = 0; j < 8; j++) {\n        if (planets[j] == planet2)\
    \ {\n            p2 = planet2;\n            break;\n        }\n    }\n    std::tuple<std::string,\
    \ > result;\n    if (i > j) {\n        for (int k = j; k < i; k++) {\n       \
    \     result = {result, planets[k]};\n        }\n    } else {\n        for (int\
    \ k = i; k < j; k++) {\n            result = {result, planets[k]};\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpitd9dy3o.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpitd9dy3o.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpitd9dy3o.cpp:32:29: error: template\
    \ argument 2 is invalid\n   32 |     std::tuple<std::string, > result;\n     \
    \ |                             ^\n/tmp/tmpitd9dy3o.cpp:35:41: error: cannot convert\
    \ \u2018<brace-enclosed initializer list>\u2019 to \u2018int\u2019 in assignment\n\
    \   35 |             result = {result, planets[k]};\n      |                 \
    \                        ^\n/tmp/tmpitd9dy3o.cpp:39:41: error: cannot convert\
    \ \u2018<brace-enclosed initializer list>\u2019 to \u2018int\u2019 in assignment\n\
    \   39 |             result = {result, planets[k]};\n      |                 \
    \                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpitd9dy3o.cpp:2:\n/tmp/tmpitd9dy3o.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpitd9dy3o.cpp:46:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   46 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpitd9dy3o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    vector<string> planet;\n    planet.push_back(\"\
    Mercury\");\n    planet.push_back(\"Venus\");\n    planet.push_back(\"Earth\"\
    );\n    planet.push_back(\"Mars\");\n    planet.push_back(\"Jupiter\");\n    planet.push_back(\"\
    Saturn\");\n    planet.push_back(\"Uranus\");\n    planet.push_back(\"Neptune\"\
    );\n    vector<string> ans;\n    int a = -1, b = -1;\n    for(int i = 0; i < planet.size();\
    \ i++) {\n        if(planet[i] == planet1) {\n            a = i;\n        }\n\
    \        if(planet[i] == planet2) {\n            b = i;\n        }\n    }\n  \
    \  int minn = min(a, b);\n    int maxx = max(a, b);\n    for(int i = minn + 1;\
    \ i < maxx; i++) {\n        ans.push_back(planet[i]);\n    }\n    if(a == -1 ||\
    \ b == -1) {\n        return {};\n    }\n    else if(a > b) {\n        return\
    \ {ans[0], ans[1], ans[2], ans[3], ans[4]};\n    }\n    else {\n        return\
    \ {ans[4], ans[3], ans[2], ans[1], ans[0]};\n    }\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplcb_yutp.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmplcb_yutp.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmplcb_yutp.cpp:17:5: error: \u2018\
    vector\u2019 was not declared in this scope; did you mean \u2018std::vector\u2019\
    ?\n   17 |     vector<string> planet;\n      |     ^~~~~~\n      |     std::vector\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmplcb_yutp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmplcb_yutp.cpp:17:12:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   17 |     vector<string> planet;\n      |            ^~~~~~\n\
    \      |            std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmplcb_yutp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmplcb_yutp.c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> names={\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::map<std::string, int> m;\n    for(int i=0;i<names.size();i++)\n \
    \       m[names[i]]=i;\n    std::vector<std::string> result;\n    if(m.find(planet1)==m.end()\
    \ || m.find(planet2)==m.end())\n        return std::make_tuple();\n    int start=m[planet1];\n\
    \    int end=m[planet2];\n    if(start>end)\n        std::swap(start, end);\n\
    \    for(int i=start+1;i<end;i++)\n        result.push_back(names[i]);\n    return\
    \ std::make_tuple(result);\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdbe356uf.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpdbe356uf.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpdbe356uf.cpp:23:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   23 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpdbe356uf.cpp:30:27: error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   30 |     return std::make_tuple(result);\n      |            ~~~~~~~~~~~~~~~^~~~~~~~\n\
    \      |                           |\n      |                           std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdbe356uf.cpp:2:\n/tmp/tmpdbe356uf.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpdbe356uf.cpp:34:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   34 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 fro"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  if (planet1 == \"Mercury\") {\n    if (planet2 ==\
    \ \"Venus\") {\n      return std::make_tuple(planet2);\n    } else if (planet2\
    \ == \"Earth\") {\n      return std::make_tuple(planet2);\n    } else if (planet2\
    \ == \"Mars\") {\n      return std::make_tuple(planet2);\n    } else if (planet2\
    \ == \"Jupiter\") {\n      return std::make_tuple(planet2);\n    } else if (planet2\
    \ == \"Saturn\") {\n      return std::make_tuple(planet2);\n    } else if (planet2\
    \ == \"Uranus\") {\n      return std::make_tuple(planet2);\n    } else if (planet2\
    \ == \"Neptune\") {\n      return std::make_tuple(planet2);\n    } else {\n  \
    \    return std::make_tuple();\n    }\n  } else if (planet1 == \"Venus\") {\n\
    \    if (planet2 == \"Earth\") {\n      return std::make_tuple(planet2);\n   \
    \ } else if (planet2 == \"Mars\") {\n      return std::make_tuple(planet2);\n\
    \    } else if (planet2 == \"Jupiter\") {\n      return std::make_tuple(planet2);\n\
    \    } else if (planet2 == \"Saturn\") {\n      return std::make_tuple(planet2);\n\
    \    } else if (planet2 == \"Uranus\") {\n      return std::make_tuple(planet2);\n\
    \    } else if (planet2 == \"Neptune\") {\n      return std::make_tuple(planet2);\n\
    \    } else {\n      return std::make_tuple();\n    }\n  } else if (planet1 ==\
    \ \"Earth\") {\n    if (planet2 == \"Mars\") {\n      return std::make_tuple(planet2);\n\
    \    } else if (planet2 == \"Jupiter\") {\n      return std::make_tuple(planet2);\n\
    \    } else if (planet2 == \"Saturn\") {\n      return std::make_tuple(planet2);\n\
    \    } else if (planet2 == \"Uran\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxxb_z9xl.cpp:58:27: warning: missing terminating \" character\n\
    \   58 |     } else if (planet2 == \"Uran\n      |                           ^\n\
    /tmp/tmpxxb_z9xl.cpp:58:27: error: missing terminating \" character\n   58 | \
    \    } else if (planet2 == \"Uran\n      |                           ^~~~~\n/tmp/tmpxxb_z9xl.cpp:16:25:\
    \ error: template argument 2 is invalid\n   16 | std::tuple<std::string, > bf(std::string\
    \ planet1, std::string planet2) {\n      |                         ^\n/tmp/tmpxxb_z9xl.cpp:\
    \ In function \u2018int bf(std::string, std::string)\u2019:\n/tmp/tmpxxb_z9xl.cpp:19:29:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   19 |       return\
    \ std::make_tuple(planet2);\n      |              ~~~~~~~~~~~~~~~^~~~~~~~~\n \
    \     |                             |\n      |                             std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\n/tmp/tmpxxb_z9xl.cpp:21:29:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   21 |       return\
    \ std::make_tuple(planet2);\n      |              ~~~~~~~~~~~~~~~^~~~~~~~~\n \
    \     |                             |\n      |                             std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\n/tmp/tmpxxb_z9xl.cpp:23:29:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   23 |       return\
    \ std::make_tuple(planet2);\n      |              ~~~~~~~~~~~~~~~^~~~~~~~~\n \
    \     |                             |\n      |                             std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\n/tmp/tmpxxb_z9xl.cpp:25:29:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   25 |       return\
    \ std::make_tuple(planet2);\n      |              ~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \n\t\t\t\t\t\t\t\t\t\t\"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n\tstd::vector<std::string> res;\n\tint idx1 = std::find(planets.begin(),\
    \ planets.end(), planet1) - planets.begin();\n\tint idx2 = std::find(planets.begin(),\
    \ planets.end(), planet2) - planets.begin();\n\tif (idx1 < 0 || idx2 < 0) return\
    \ std::make_tuple();\n\tif (idx1 > idx2) std::swap(idx1, idx2);\n\tfor (int i\
    \ = idx1 + 1; i < idx2; i++)\n\t\tres.push_back(planets[i]);\n\treturn std::make_tuple(res);\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_mpftrbp.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp_mpftrbp.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp_mpftrbp.cpp:22:50: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   22 |  if (idx1\
    \ < 0 || idx2 < 0) return std::make_tuple();\n      |                        \
    \           ~~~~~~~~~~~~~~~^~\n      |                                       \
    \           |\n      |                                                  std::tuple<>\n\
    /tmp/tmp_mpftrbp.cpp:26:24: error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   26 |  return std::make_tuple(res);\n      |         ~~~~~~~~~~~~~~~^~~~~\n\
    \      |                        |\n      |                        std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_mpftrbp.cpp:2:\n/tmp/tmp_mpftrbp.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp_mpftrbp.cpp:30:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   30 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplvwr39yl.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmplvwr39yl.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmplvwr39yl.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplvwr39yl.cpp:2:\n/tmp/tmplvwr39yl.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmplvwr39yl.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmplvwr39yl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  \n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxs98zrbe.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpxs98zrbe.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpxs98zrbe.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxs98zrbe.cpp:2:\n/tmp/tmpxs98zrbe.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpxs98zrbe.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpxs98zrbe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    const std::vector<std::string> planets {\n     \
    \   \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    auto it1 = std::find(planets.begin(), planets.end(),\
    \ planet1);\n    auto it2 = std::find(planets.begin(), planets.end(), planet2);\n\
    \    if (it1 == planets.end() || it2 == planets.end()) {\n        return std::make_tuple();\n\
    \    }\n    auto planets_between = std::vector<std::string> {};\n    if (it1 <\
    \ it2) {\n        std::copy(it1 + 1, it2, std::back_inserter(planets_between));\n\
    \    } else {\n        std::copy(it2 + 1, it1, std::back_inserter(planets_between));\n\
    \    }\n    return std::make_tuple(planets_between);\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmptd_s08b2.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmptd_s08b2.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmptd_s08b2.cpp:23:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   23 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmptd_s08b2.cpp:31:27: error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   31 |     return std::make_tuple(planets_between);\n      |   \
    \         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n      |                          \
    \ |\n      |                           std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptd_s08b2.cpp:2:\n/tmp/tmptd_s08b2.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmptd_s08b2.cpp:35:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   35 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \  "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n\tauto it1 = std::find(planets.begin(), planets.end(), planet1);\n\tauto\
    \ it2 = std::find(planets.begin(), planets.end(), planet2);\n\tif (it1 == planets.end()\
    \ || it2 == planets.end()) {\n\t\treturn std::make_tuple();\n\t}\n\tstd::vector<std::string>\
    \ between;\n\tif (it1 < it2) {\n\t\tstd::copy(it1 + 1, it2, std::back_inserter(between));\n\
    \t}\n\telse {\n\t\tstd::copy(it2 + 1, it1, std::back_inserter(between));\n\t}\n\
    \treturn std::make_tuple(between);\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpbfe1xfku.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpbfe1xfku.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpbfe1xfku.cpp:21:25: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   21 |   return\
    \ std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n      |            \
    \             |\n      |                         std::tuple<>\n/tmp/tmpbfe1xfku.cpp:30:24:\
    \ error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   30 |  return std::make_tuple(between);\n      |         ~~~~~~~~~~~~~~~^~~~~~~~~\n\
    \      |                        |\n      |                        std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbfe1xfku.cpp:2:\n/tmp/tmpbfe1xfku.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpbfe1xfku.cpp:34:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   34 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylak"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzx5lst3t.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpzx5lst3t.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpzx5lst3t.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzx5lst3t.cpp:2:\n/tmp/tmpzx5lst3t.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpzx5lst3t.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpzx5lst3t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    return std::make_tuple();\n}\nint main() {\n   \
    \ auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"),\
    \ (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl2auuj3_.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpl2auuj3_.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpl2auuj3_.cpp:17:27: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   17 |     return\
    \ std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n      |          \
    \                 |\n      |                           std::tuple<>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n     \
    \            from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl2auuj3_.cpp:2:\n/tmp/tmpl2auuj3_.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpl2auuj3_.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpl2auuj3_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::tuple<std::string, > result;\n    //your code\
    \ here\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6yz711i_.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp6yz711i_.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp6yz711i_.cpp:17:29: error: template\
    \ argument 2 is invalid\n   17 |     std::tuple<std::string, > result;\n     \
    \ |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6yz711i_.cpp:2:\n/tmp/tmp6yz711i_.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp6yz711i_.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6yz711i_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skyla"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets;\n  // Write code\
    \ here\n  return std::make_tuple(planets);\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpu45ucurp.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpu45ucurp.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpu45ucurp.cpp:19:25: error: cannot\
    \ convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\u2019 to \u2018int\u2019 in return\n   19 |   return\
    \ std::make_tuple(planets);\n      |          ~~~~~~~~~~~~~~~^~~~~~~~~\n     \
    \ |                         |\n      |                         std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu45ucurp.cpp:2:\n/tmp/tmpu45ucurp.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpu45ucurp.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpu45ucurp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\tstd::string p1 = \"\";\n\tstd::string p2 = \"\";\n\tfor (int i = 0; i <\
    \ planets.size(); i++) {\n\t\tif (planets[i] == planet1) {\n\t\t\tp1 = planet1;\n\
    \t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\tp2 = planet2;\n\t\t}\n\t}\n\tif\
    \ (p1 == \"\" || p2 == \"\") {\n\t\treturn std::make_tuple();\n\t}\n\tif (p1 ==\
    \ planet1 && p2 == planet2) {\n\t\tstd::vector<std::string> planetsInOrder = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n\t\tint indexOfP1 = -1;\n\t\tint indexOfP2 = -1;\n\t\tfor (int\
    \ i = 0; i < planetsInOrder.size(); i++) {\n\t\t\tif (planetsInOrder[i] == planet1)\
    \ {\n\t\t\t\tindexOfP1 = i;\n\t\t\t}\n\t\t\tif (planetsInOrder[i] == planet2)\
    \ {\n\t\t\t\tindexOfP2 = i;\n\t\t\t}\n\t\t}\n\t\tif (indexOfP1 < indexOfP2) {\n\
    \t\t\treturn std::make_tuple(planetsInOrder[indexOfP1+1], planetsInOrder[indexOfP2-1]);\n\
    \t\t}\n\t\telse {\n\t\t\treturn std::make_tuple(planetsInOrder[indexOfP2+1], planetsInOrder[indexOfP1-1]);\n\
    \t\t}\n\t}\n\telse {\n\t\tstd::vector<std::string> planetsInOrder = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3kztz080.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp3kztz080.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp3kztz080.cpp:29:25: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   29 |   return\
    \ std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n      |            \
    \             |\n      |                         std::tuple<>\n/tmp/tmp3kztz080.cpp:44:26:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   44 |    return\
    \ std::make_tuple(planetsInOrder[indexOfP1+1], planetsInOrder[indexOfP2-1]);\n\
    \      |           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                          |\n      |                          std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\n/tmp/tmp3kztz080.cpp:47:26:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   47 |    return\
    \ std::make_tuple(planetsInOrder[indexOfP2+1], planetsInOrder[indexOfP1-1]);\n\
    \      |           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                          |\n      |                          std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\n/tmp/tmp3kztz080.cpp:54:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   54 | int main() {\n      |            ^\n/tmp/tmp3kztz080.cpp:63:1: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets;\n    planets.push_back(\"\
    Mercury\");\n    planets.push_back(\"Venus\");\n    planets.push_back(\"Earth\"\
    );\n    planets.push_back(\"Mars\");\n    planets.push_back(\"Jupiter\");\n  \
    \  planets.push_back(\"Saturn\");\n    planets.push_back(\"Uranus\");\n    planets.push_back(\"\
    Neptune\");\n    std::vector<std::string>::iterator it1, it2;\n    it1 = std::find(planets.begin(),\
    \ planets.end(), planet1);\n    it2 = std::find(planets.begin(), planets.end(),\
    \ planet2);\n    std::vector<std::string>::iterator it3, it4;\n    if (it1 ==\
    \ planets.end() || it2 == planets.end())\n        return std::make_tuple();\n\
    \    it3 = std::min_element(it1, it2);\n    it4 = std::max_element(it1, it2);\n\
    \    if (it3 == it1)\n        it3 = it3 + 1;\n    else\n        it4 = it4 - 1;\n\
    \    std::vector<std::string> ret(it3, it4);\n    return std::make_tuple(ret.begin(),\
    \ ret.end());\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwj1ynaog.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpwj1ynaog.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpwj1ynaog.cpp:31:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   31 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpwj1ynaog.cpp:39:27: error: cannot convert \u2018std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\u2019 to \u2018int\u2019\
    \ in return\n   39 |     return std::make_tuple(ret.begin(), ret.end());\n   \
    \   |            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n      |            \
    \               |\n      |                           std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\nIn file included from\
    \ /shared/c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> planets_in_order;\n    std::string planet;\n\
    \    std::tuple<std::string, > planets_in_range;\n    int i1 = 0;\n    int i2\
    \ = 0;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            i1 = i;\n        }\n        if (planets[i] == planet2)\
    \ {\n            i2 = i;\n        }\n    }\n    if (i1 > i2) {\n        for (int\
    \ i = i2; i <= i1; i++) {\n            planet = planets[i];\n            planets_in_order.push_back(planet);\n\
    \        }\n    }\n    else {\n        for (int i = i1; i <= i2; i++) {\n    \
    \        planet = planets[i];\n            planets_in_order.push_back(planet);\n\
    \        }\n    }\n    if (i1 > i2) {\n        std::reverse(planets_in_order.begin(),\
    \ planets_in_order.end());\n    }\n    int count = 0;\n    for (int i = 0; i <\
    \ planets_in_order.size(); i++) {\n        if (planets_in_order[i] != planet1\
    \ && planets_in_order[i] != planet2) {\n            planets_in_range[count] =\
    \ planets_in_order[i];\n            count++;\n        }\n    }\n    return planets_in_range;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3xqtwlpo.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp3xqtwlpo.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp3xqtwlpo.cpp:20:29: error: template\
    \ argument 2 is invalid\n   20 |     std::tuple<std::string, > planets_in_range;\n\
    \      |                             ^\n/tmp/tmp3xqtwlpo.cpp:49:35: error: invalid\
    \ types \u2018int[int]\u2019 for array subscript\n   49 |             planets_in_range[count]\
    \ = planets_in_order[i];\n      |                                   ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3xqtwlpo.cpp:2:\n/tmp/tmp3xqtwlpo.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp3xqtwlpo.cpp:57:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   57 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp3xqtwlpo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:102"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Make your code\
    \ here\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyon5us50.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpyon5us50.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpyon5us50.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyon5us50.cpp:2:\n/tmp/tmpyon5us50.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpyon5us50.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyon5us50.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets = {\n    \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n  };\n  std::tuple<std::string, > result;\n  return result;\n}\nint main() {\n\
    \    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"))\
    \ == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp04vqedh4.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp04vqedh4.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp04vqedh4.cpp:20:27: error: template\
    \ argument 2 is invalid\n   20 |   std::tuple<std::string, > result;\n      |\
    \                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04vqedh4.cpp:2:\n/tmp/tmp04vqedh4.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp04vqedh4.cpp:25:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   25 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp04vqedh4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::map<std::string, int> planet_map = {\n    {\"\
    Mercury\", 1},\n    {\"Venus\", 2},\n    {\"Earth\", 3},\n    {\"Mars\", 4},\n\
    \    {\"Jupiter\", 5},\n    {\"Saturn\", 6},\n    {\"Uranus\", 7},\n    {\"Neptune\"\
    , 8}\n  };\n  if (planet_map.find(planet1) == planet_map.end() || planet_map.find(planet2)\
    \ == planet_map.end())\n    return std::make_tuple();\n  int start = planet_map[planet1];\n\
    \  int end = planet_map[planet2];\n  std::vector<std::string> ret;\n  for (int\
    \ i = start; i < end; i++) {\n    for (auto& p : planet_map) {\n      if (p.second\
    \ == i) {\n        ret.push_back(p.first);\n        break;\n      }\n    }\n \
    \ }\n  return std::make_tuple(ret[0], ret[1], ret[2], ret[3], ret[4]);\n}\nint\
    \ main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpczx1jnco.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpczx1jnco.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpczx1jnco.cpp:28:27: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   28 |     return\
    \ std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n      |          \
    \                 |\n      |                           std::tuple<>\n/tmp/tmpczx1jnco.cpp:40:25:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   40 |   return\
    \ std::make_tuple(ret[0], ret[1], ret[2], ret[3], ret[4]);\n      |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                         |\n      |                         std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczx1jnco.cpp:2:\n/tmp/tmpczx1jnco.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpczx1jnco.cpp:44:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   44 |     ass"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    \n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1l271o75.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp1l271o75.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp1l271o75.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1l271o75.cpp:2:\n/tmp/tmp1l271o75.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp1l271o75.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp1l271o75.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n    std::tuple<std::string, >\
    \ ret;\n    return ret;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpru_2b5g2.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpru_2b5g2.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpru_2b5g2.cpp:18:29: error: template\
    \ argument 2 is invalid\n   18 |     std::tuple<std::string, > ret;\n      | \
    \                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpru_2b5g2.cpp:2:\n/tmp/tmpru_2b5g2.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpru_2b5g2.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpru_2b5g2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::unordered_map<std::string, int> map;\n    map[\"\
    Mercury\"] = 1;\n    map[\"Venus\"] = 2;\n    map[\"Earth\"] = 3;\n    map[\"\
    Mars\"] = 4;\n    map[\"Jupiter\"] = 5;\n    map[\"Saturn\"] = 6;\n    map[\"\
    Uranus\"] = 7;\n    map[\"Neptune\"] = 8;\n    int idx1 = map[planet1];\n    int\
    \ idx2 = map[planet2];\n    if(idx1 == 0 || idx2 == 0) return std::make_tuple();\n\
    \    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    if(idx1 < idx2)\
    \ {\n        std::vector<std::string> res;\n        for(int i = idx1 + 1; i <\
    \ idx2; i++) {\n            res.push_back(planets[i]);\n        }\n        return\
    \ std::make_tuple(res);\n    } else {\n        std::vector<std::string> res;\n\
    \        for(int i = idx2 + 1; i < idx1; i++) {\n            res.push_back(planets[i]);\n\
    \        }\n        return std::make_tuple(res);\n    }\n}\nint main() {\n   \
    \ auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"),\
    \ (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsgnf9dem.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpsgnf9dem.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpsgnf9dem.cpp:28:54: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   28 |     if(idx1\
    \ == 0 || idx2 == 0) return std::make_tuple();\n      |                      \
    \                 ~~~~~~~~~~~~~~~^~\n      |                                 \
    \                     |\n      |                                             \
    \         std::tuple<>\n/tmp/tmpsgnf9dem.cpp:35:31: error: cannot convert \u2018\
    std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\u2019 to \u2018int\u2019 in return\n   35 |   \
    \      return std::make_tuple(res);\n      |                ~~~~~~~~~~~~~~~^~~~~\n\
    \      |                               |\n      |                            \
    \   std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\n/tmp/tmpsgnf9dem.cpp:41:31: error: cannot convert\
    \ \u2018std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\u2019 to \u2018int\u2019 in return\n   41 |   \
    \      return std::make_tuple(res);\n      |                ~~~~~~~~~~~~~~~^~~~~\n\
    \      |                               |\n      |                            \
    \   std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  \n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi7lkf50h.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpi7lkf50h.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpi7lkf50h.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi7lkf50h.cpp:2:\n/tmp/tmpi7lkf50h.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpi7lkf50h.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpi7lkf50h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::map<std::string, int> planets;\n\tplanets[\"\
    Mercury\"] = 1;\n\tplanets[\"Venus\"] = 2;\n\tplanets[\"Earth\"] = 3;\n\tplanets[\"\
    Mars\"] = 4;\n\tplanets[\"Jupiter\"] = 5;\n\tplanets[\"Saturn\"] = 6;\n\tplanets[\"\
    Uranus\"] = 7;\n\tplanets[\"Neptune\"] = 8;\n\tif (planets.find(planet1) == planets.end()\
    \ || planets.find(planet2) == planets.end())\n\t\treturn std::make_tuple();\n\t\
    std::vector<std::string> result;\n\tfor (auto p : planets) {\n\t\tif (p.second\
    \ > planets[planet1] && p.second < planets[planet2])\n\t\t\tresult.push_back(p.first);\n\
    \t}\n\treturn std::make_tuple(result[0], result[1], result[2], result[3], result[4]);\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmply2ohf3s.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmply2ohf3s.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmply2ohf3s.cpp:27:25: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   27 |   return\
    \ std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n      |            \
    \             |\n      |                         std::tuple<>\n/tmp/tmply2ohf3s.cpp:33:24:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   33 |  return\
    \ std::make_tuple(result[0], result[1], result[2], result[3], result[4]);\n  \
    \    |         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                        |\n      |                        std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmply2ohf3s.cpp:2:\n/tmp/tmply2ohf3s.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmply2ohf3s.cpp:37:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjafciz2v.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpjafciz2v.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpjafciz2v.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjafciz2v.cpp:2:\n/tmp/tmpjafciz2v.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpjafciz2v.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpjafciz2v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n  int idx1 = -1, idx2 = -1;\n  for (int i = 0; i < planets.size(); i++) {\n\
    \    if (planets[i] == planet1) {\n      idx1 = i;\n    }\n    if (planets[i]\
    \ == planet2) {\n      idx2 = i;\n    }\n  }\n  std::vector<std::string> result;\n\
    \  if (idx1 == -1 || idx2 == -1) {\n    return std::make_tuple(result.begin(),\
    \ result.end());\n  }\n  int min = std::min(idx1, idx2);\n  int max = std::max(idx1,\
    \ idx2);\n  for (int i = min + 1; i < max; i++) {\n    result.push_back(planets[i]);\n\
    \  }\n  return std::make_tuple(result.begin(), result.end());\n}\nint main() {\n\
    \    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"))\
    \ == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiaexzxbm.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpiaexzxbm.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpiaexzxbm.cpp:29:27: error: cannot\
    \ convert \u2018std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\u2019 to \u2018int\u2019\
    \ in return\n   29 |     return std::make_tuple(result.begin(), result.end());\n\
    \      |            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |   \
    \                        |\n      |                           std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\n/tmp/tmpiaexzxbm.cpp:36:25:\
    \ error: cannot convert \u2018std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::alloca"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t// YOUR CODE GOES HERE\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpgg9_onby.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpgg9_onby.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpgg9_onby.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgg9_onby.cpp:2:\n/tmp/tmpgg9_onby.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpgg9_onby.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgg9_onby.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    return make_tuple();\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxdmmkipp.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpxdmmkipp.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpxdmmkipp.cpp:20:12: error: \u2018\
    make_tuple\u2019 was not declared in this scope; did you mean \u2018std::make_tuple\u2019\
    ?\n   20 |     return make_tuple();\n      |            ^~~~~~~~~~\n      |  \
    \          std::make_tuple\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpxdmmkipp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note: \u2018std::make_tuple\u2019 declared here\n 1470 |     make_tuple(_Elements&&...\
    \ __args)\n      |     ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxdmmkipp.cpp:2:\n/tmp/tmpxdmmkipp.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpxdmmkipp.cpp:24:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   24 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpxdmmkipp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets;\n    if (planet1\
    \ == \"Mercury\") {\n        if (planet2 == \"Mercury\") {\n            planets.push_back(\"\
    Mercury\");\n        } else if (planet2 == \"Venus\") {\n            planets.push_back(\"\
    Mercury\");\n            planets.push_back(\"Venus\");\n        } else if (planet2\
    \ == \"Earth\") {\n            planets.push_back(\"Mercury\");\n            planets.push_back(\"\
    Venus\");\n            planets.push_back(\"Earth\");\n        } else if (planet2\
    \ == \"Mars\") {\n            planets.push_back(\"Mercury\");\n            planets.push_back(\"\
    Venus\");\n            planets.push_back(\"Earth\");\n            planets.push_back(\"\
    Mars\");\n        } else if (planet2 == \"Jupiter\") {\n            planets.push_back(\"\
    Mercury\");\n            planets.push_back(\"Venus\");\n            planets.push_back(\"\
    Earth\");\n            planets.push_back(\"Mars\");\n            planets.push_back(\"\
    Jupiter\");\n        } else if (planet2 == \"Saturn\") {\n            planets.push_back(\"\
    Mercury\");\n            planets.push_back(\"Venus\");\n            planets.push_back(\"\
    Earth\");\n            planets.push_back(\"Mars\");\n            planets.push_back(\"\
    Jupiter\");\n            planets.push_back(\"Saturn\");\n        } else if (planet2\
    \ == \"Uranus\") {\n            planets.push_back(\"Mercury\");\n            planets.push_back(\"\
    Venus\");\n            planets.push_back(\"Earth\");\n            planets.push_back(\"\
    Mars\");\n            planets.push_back(\"Jupiter\");\n            planets.push_back(\"\
    Saturn\");\n            planets.push_back(\"Uranus\");\n        } else if (planet2\
    \ == \"Neptune\") {\n            planets.push_back(\"Mercury\");\n           \
    \ planets.push_back(\"Venus\");\n            planets.push_back(\"Earth\");\n \
    \           planets.push_back(\"Mars\");\n            planets.push_back(\"Jupiter\"\
    );\n            planets.push_back(\"Saturn\");\n            planets.push_back(\"\
    Uranus\");\n           \n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpucdovk14.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpucdovk14.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpucdovk14.cpp:64:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n     \
    \ |            ^\n/tmp/tmpucdovk14.cpp:73:1: error: expected \u2018}\u2019 at\
    \ end of input\n   73 | }\n      | ^\n/tmp/tmpucdovk14.cpp:18:31: note: to match\
    \ this \u2018{\u2019\n   18 |     if (planet1 == \"Mercury\") {\n      |     \
    \                          ^\n/tmp/tmpucdovk14.cpp:73:1: error: expected \u2018\
    }\u2019 at end of input\n   73 | }\n      | ^\n/tmp/tmpucdovk14.cpp:16:72: note:\
    \ to match this \u2018{\u2019\n   16 | std::tuple<std::string, > bf(std::string\
    \ planet1, std::string planet2) {\n      |                                   \
    \                                     ^\n/tmp/tmpucdovk14.cpp:73:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   73 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planetList;\n  // Your code\
    \ here.\n  return {};\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj6zg4j_u.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj6zg4j_u.cpp:2:\n/tmp/tmpj6zg4j_u.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpj6zg4j_u.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpj6zg4j_u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj6zg4j_u.cpp:2:\n/tmp/tmpj6zg4j_u.cpp:23:85: note:\
    \   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018\
    int\u2019\n   23 |    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t//write your code here\n\t\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4wp7gfn7.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp4wp7gfn7.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp4wp7gfn7.cpp:19:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   19 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4wp7gfn7.cpp:2:\n/tmp/tmp4wp7gfn7.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp4wp7gfn7.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4wp7gfn7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  const std::map<std::string, int> planets {\n    {\"\
    Mercury\", 1},\n    {\"Venus\", 2},\n    {\"Earth\", 3},\n    {\"Mars\", 4},\n\
    \    {\"Jupiter\", 5},\n    {\"Saturn\", 6},\n    {\"Uranus\", 7},\n    {\"Neptune\"\
    , 8}\n  };\n  const auto begin = planets.find(planet1);\n  const auto end = planets.find(planet2);\n\
    \  if (begin == planets.end() || end == planets.end()) {\n    return {};\n  }\n\
    \  const int min = std::min(begin->second, end->second);\n  const int max = std::max(begin->second,\
    \ end->second);\n  std::vector<std::string> planetsBetween;\n  for (const auto&\
    \ planet : planets) {\n    if (planet.second > min && planet.second < max) {\n\
    \      planetsBetween.push_back(planet.first);\n    }\n  }\n  return std::make_tuple(planetsBetween[0],\
    \ planetsBetween[1]);\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzhmhiup3.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpzhmhiup3.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpzhmhiup3.cpp:40:25: error: cannot\
    \ convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   40 |   return\
    \ std::make_tuple(planetsBetween[0], planetsBetween[1]);\n      |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                         |\n      |                         std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzhmhiup3.cpp:2:\n/tmp/tmpzhmhiup3.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpzhmhiup3.cpp:44:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   44 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpzhmhiup3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cx"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::unordered_map<std::string, int> solar_system\
    \ = {\n\t\t{ \"Mercury\", 1 },\n\t\t{ \"Venus\", 2 },\n\t\t{ \"Earth\", 3 },\n\
    \t\t{ \"Mars\", 4 },\n\t\t{ \"Jupiter\", 5 },\n\t\t{ \"Saturn\", 6 },\n\t\t{ \"\
    Uranus\", 7 },\n\t\t{ \"Neptune\", 8 }\n\t};\n\tif (solar_system.find(planet1)\
    \ == solar_system.end() || solar_system.find(planet2) == solar_system.end()) {\n\
    \t\treturn {};\n\t}\n\tstd::vector<std::string> names = { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n\t\
    std::tuple<std::string, > res;\n\tint start = std::min(solar_system[planet1],\
    \ solar_system[planet2]);\n\tint end = std::max(solar_system[planet1], solar_system[planet2]);\n\
    \tfor (int i = start; i <= end; i++) {\n\t\tres.push_back(names[i - 1]);\n\t}\n\
    \treturn res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_oc4j41o.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp_oc4j41o.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp_oc4j41o.cpp:31:26: error: template\
    \ argument 2 is invalid\n   31 |  std::tuple<std::string, > res;\n      |    \
    \                      ^\n/tmp/tmp_oc4j41o.cpp:35:7: error: request for member\
    \ \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type \u2018\
    int\u2019\n   35 |   res.push_back(names[i - 1]);\n      |       ^~~~~~~~~\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_oc4j41o.cpp:2:\n/tmp/tmp_oc4j41o.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp_oc4j41o.cpp:41:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   41 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_oc4j41o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deductio"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  return std::make_tuple();\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpbiei28wn.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpbiei28wn.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpbiei28wn.cpp:17:25: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   17 |   return\
    \ std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n      |            \
    \             |\n      |                         std::tuple<>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n     \
    \            from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbiei28wn.cpp:2:\n/tmp/tmpbiei28wn.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpbiei28wn.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpbiei28wn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \n                                        \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    auto it1 = std::find(planets.begin(),\
    \ planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(),\
    \ planet2);\n    if (it1 != planets.end() && it2 != planets.end()) {\n       \
    \ auto low = std::min(it1, it2);\n        auto high = std::max(it1, it2);\n  \
    \      std::vector<std::string> ret(low + 1, high);\n        return ret;\n   \
    \ }\n    return {};\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_rtpvg6s.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp_rtpvg6s.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp_rtpvg6s.cpp:25:16: error: cannot\
    \ convert \u2018std::vector<std::__cxx11::basic_string<char> >\u2019 to \u2018\
    int\u2019 in return\n   25 |         return ret;\n      |                ^~~\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_rtpvg6s.cpp:2:\n/tmp/tmp_rtpvg6s.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp_rtpvg6s.cpp:31:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   31 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_rtpvg6s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n    std::tuple<std::string, >\
    \ result;\n    return result;\n}\nint main() {\n    auto candidate = bf;\n   \
    \ assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplp8ur961.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmplp8ur961.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmplp8ur961.cpp:18:29: error: template\
    \ argument 2 is invalid\n   18 |     std::tuple<std::string, > result;\n     \
    \ |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplp8ur961.cpp:2:\n/tmp/tmplp8ur961.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmplp8ur961.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmplp8ur961.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skyla"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\treturn std::make_tuple();\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp3960ht2s.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp3960ht2s.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp3960ht2s.cpp:17:24: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   17 |  return\
    \ std::make_tuple();\n      |         ~~~~~~~~~~~~~~~^~\n      |             \
    \           |\n      |                        std::tuple<>\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3960ht2s.cpp:2:\n/tmp/tmp3960ht2s.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp3960ht2s.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp3960ht2s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/inc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    \n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpjbjy8xww.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpjbjy8xww.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpjbjy8xww.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjbjy8xww.cpp:2:\n/tmp/tmpjbjy8xww.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpjbjy8xww.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpjbjy8xww.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::unordered_map<std::string, int> planets = \n\
    \  {\n      {\"Mercury\", 0},\n      {\"Venus\", 1},\n      {\"Earth\", 2},\n\
    \      {\"Mars\", 3},\n      {\"Jupiter\", 4},\n      {\"Saturn\", 5},\n     \
    \ {\"Uranus\", 6},\n      {\"Neptune\", 7}\n  };\n  \n  std::vector<std::string>\
    \ result;\n  if(planets.find(planet1) == planets.end() || planets.find(planet2)\
    \ == planets.end())\n  {\n    return std::make_tuple();\n  }\n  else\n  {\n  \
    \  int first = planets[planet1];\n    int second = planets[planet2];\n    if(first\
    \ > second)\n    {\n      int temp = first;\n      first = second;\n      second\
    \ = temp;\n    }\n    for(int i = first + 1; i < second; i++)\n    {\n      result.push_back(planets.find(i)->first);\n\
    \    }\n  }\n  std::tuple<std::string, > res;\n  return res;\n}\nint main() {\n\
    \    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"))\
    \ == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqoolqgvf.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpqoolqgvf.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpqoolqgvf.cpp:32:27: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   32 |     return\
    \ std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n      |          \
    \                 |\n      |                           std::tuple<>\n/tmp/tmpqoolqgvf.cpp:46:38:\
    \ error: no matching function for call to \u2018std::unordered_map<std::__cxx11::basic_string<char>,\
    \ int>::find(int&)\u2019\n   46 |       result.push_back(planets.find(i)->first);\n\
    \      |                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_map:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:117,\n\
    \                 from /tmp/tmpqoolqgvf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:920:7:\
    \ note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::iterator\
    \ std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::find(const key_type&) [with\
    \ _Key = std::__cxx11::basic_string<char>; _Tp = int; _Hash = std::hash<std::__cxx11::basic_string<char>\
    \ >; _Pred = std::equal_to<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const\
    \ std::__cxx11::basic_string<char>, int> >; std::unordered_map<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>::iterator = std::__detail::_Node_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ int>, false, true>; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  920 |       find(const key_type&\
    \ __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:920:28:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \  920 |       find(const key_type& __x)\n      | "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t// Good luck!\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpin5h98_2.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpin5h98_2.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpin5h98_2.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpin5h98_2.cpp:2:\n/tmp/tmpin5h98_2.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpin5h98_2.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpin5h98_2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    if (planet1 == \"Mercury\") {\n        if (planet2\
    \ == \"Venus\") return std::make_tuple(\"Mercury\", \"Venus\");\n        if (planet2\
    \ == \"Earth\") return std::make_tuple(\"Mercury\", \"Venus\", \"Earth\");\n \
    \       if (planet2 == \"Mars\") return std::make_tuple(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\");\n        if (planet2 == \"Jupiter\") return std::make_tuple(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n        if (planet2\
    \ == \"Saturn\") return std::make_tuple(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\");\n        if (planet2 == \"Uranus\") return std::make_tuple(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    );\n        if (planet2 == \"Neptune\") return std::make_tuple(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    }\n    if (planet1 == \"Venus\") {\n        if (planet2 == \"Earth\")\
    \ return std::make_tuple(\"Venus\", \"Earth\");\n        if (planet2 == \"Mars\"\
    ) return std::make_tuple(\"Venus\", \"Earth\", \"Mars\");\n        if (planet2\
    \ == \"Jupiter\") return std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    );\n        if (planet2 == \"Saturn\") return std::make_tuple(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\");\n        if (planet2 == \"Uranus\") return\
    \ std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\");\n        if (planet2 == \"Neptune\") return std::make_tuple(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  }\n    if (planet1 == \"Earth\") {\n        if (planet\n}\nint main() {\n \
    \   auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"),\
    \ (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptdy642kz.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmptdy642kz.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmptdy642kz.cpp:18:55: error: cannot\
    \ convert \u2018std::tuple<const char*, const char*>\u2019 to \u2018int\u2019\
    \ in return\n   18 |         if (planet2 == \"Venus\") return std::make_tuple(\"\
    Mercury\", \"Venus\");\n      |                                        ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                       |\n      |    \
    \                                                   std::tuple<const char*, const\
    \ char*>\n/tmp/tmptdy642kz.cpp:19:55: error: cannot convert \u2018std::tuple<const\
    \ char*, const char*, const char*>\u2019 to \u2018int\u2019 in return\n   19 |\
    \         if (planet2 == \"Earth\") return std::make_tuple(\"Mercury\", \"Venus\"\
    , \"Earth\");\n      |                                        ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                       |\n      |    \
    \                                                   std::tuple<const char*, const\
    \ char*, const char*>\n/tmp/tmptdy642kz.cpp:20:54: error: cannot convert \u2018\
    std::tuple<const char*, const char*, const char*, const char*>\u2019 to \u2018\
    int\u2019 in return\n   20 |         if (planet2 == \"Mars\") return std::make_tuple(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\");\n      |                         \
    \              ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      | \
    \                                                     |\n      |             \
    \                                         std::tuple<const char*, const char*,\
    \ const char*, const char*>\n/tmp/tmptdy642kz.cpp:21:57: error: cannot convert\
    \ \u2018std::tuple<const char*, const char*, const char*, const char*, const char*>\u2019\
    \ to \u2018int\u2019 in return\n   21 |         if (planet2 == \"Jupiter\") return\
    \ std::make_tuple(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n\
    \      |                                          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  \n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgus_hw06.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpgus_hw06.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpgus_hw06.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgus_hw06.cpp:2:\n/tmp/tmpgus_hw06.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpgus_hw06.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgus_hw06.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::string planets[] = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::tuple<std::string,> ret_val;\n    return ret_val;\n}\nint main() {\n \
    \   auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) ==\
    \ std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"),\
    \ (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5f90q1r3.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp5f90q1r3.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp5f90q1r3.cpp:18:28: error: template\
    \ argument 2 is invalid\n   18 |     std::tuple<std::string,> ret_val;\n     \
    \ |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5f90q1r3.cpp:2:\n/tmp/tmp5f90q1r3.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp5f90q1r3.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp5f90q1r3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylak"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj0hbq5ng.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpj0hbq5ng.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpj0hbq5ng.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj0hbq5ng.cpp:2:\n/tmp/tmpj0hbq5ng.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpj0hbq5ng.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpj0hbq5ng.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvw2ii4wl.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpvw2ii4wl.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpvw2ii4wl.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvw2ii4wl.cpp:2:\n/tmp/tmpvw2ii4wl.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpvw2ii4wl.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpvw2ii4wl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  return {};\n}\nint main() {\n    auto candidate =\
    \ bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpfl0nnw7t.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfl0nnw7t.cpp:2:\n/tmp/tmpfl0nnw7t.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpfl0nnw7t.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpfl0nnw7t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfl0nnw7t.cpp:2:\n/tmp/tmpfl0nnw7t.cpp:21:85: note:\
    \   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019 and \u2018\
    int\u2019\n   21 |    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t//SOLUTION GOES HERE\n\tstd::vector<std::string> planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n\tstd::tuple<std::string, > result;\n\tint i1 = -1, i2\
    \ = -1;\n\tfor (int i = 0; i < planets.size(); i++) {\n\t\tif (planets[i] == planet1)\
    \ {\n\t\t\ti1 = i;\n\t\t}\n\t\tif (planets[i] == planet2) {\n\t\t\ti2 = i;\n\t\
    \t}\n\t}\n\tif (i1 == -1 || i2 == -1) {\n\t\treturn result;\n\t}\n\tif (i1 < i2)\
    \ {\n\t\ti1++;\n\t\twhile (i1 < i2) {\n\t\t\tstd::get<0>(result) = planets[i1];\n\
    \t\t\ti1++;\n\t\t}\n\t} else {\n\t\ti2++;\n\t\twhile (i2 < i1) {\n\t\t\tstd::get<0>(result)\
    \ = planets[i2];\n\t\t\ti2++;\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"))\
    \ == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_j7wjjmd.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp_j7wjjmd.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp_j7wjjmd.cpp:19:26: error: template\
    \ argument 2 is invalid\n   19 |  std::tuple<std::string, > result;\n      | \
    \                         ^\n/tmp/tmp_j7wjjmd.cpp:35:22: error: no matching function\
    \ for call to \u2018get<0>(int&)\u2019\n   35 |    std::get<0>(result) = planets[i1];\n\
    \      |                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_j7wjjmd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_j7wjjmd.cpp:35:22:\
    \ note:   mismatched types \u2018std::pair<_Tp1, _Tp2>\u2019 and \u2018int\u2019\
    \n   35 |    std::get<0>(result) = planets[i1];\n      |                     \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_j7wjjmd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:224:5:\
    \ n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz8o3cfyo.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpz8o3cfyo.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpz8o3cfyo.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz8o3cfyo.cpp:2:\n/tmp/tmpz8o3cfyo.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpz8o3cfyo.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpz8o3cfyo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  // your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmps1t7z487.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmps1t7z487.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmps1t7z487.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps1t7z487.cpp:2:\n/tmp/tmps1t7z487.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmps1t7z487.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmps1t7z487.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::tuple<std::string, > res;\n\treturn res;\n}\n\
    int main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuggrp7cc.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpuggrp7cc.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpuggrp7cc.cpp:17:26: error: template\
    \ argument 2 is invalid\n   17 |  std::tuple<std::string, > res;\n      |    \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuggrp7cc.cpp:2:\n/tmp/tmpuggrp7cc.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpuggrp7cc.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpuggrp7cc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/includ"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets{\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    };\n   \
    \ int p1 = std::find(planets.begin(), planets.end(), planet1) - planets.begin();\n\
    \    int p2 = std::find(planets.begin(), planets.end(), planet2) - planets.begin();\n\
    \    if (p1 == 8 || p2 == 8) {\n        return std::make_tuple();\n    }\n   \
    \ if (p1 > p2) {\n        std::swap(p1, p2);\n    }\n    std::tuple<std::string,\
    \ > result;\n    for (int i = p1 + 1; i < p2; ++i) {\n        result.push_back(planets[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9p600cf5.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp9p600cf5.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp9p600cf5.cpp:30:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   30 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmp9p600cf5.cpp:35:29: error: template argument 2 is invalid\n   35 |   \
    \  std::tuple<std::string, > result;\n      |                             ^\n\
    /tmp/tmp9p600cf5.cpp:37:16: error: request for member \u2018push_back\u2019 in\
    \ \u2018result\u2019, which is of non-class type \u2018int\u2019\n   37 |    \
    \     result.push_back(planets[i]);\n      |                ^~~~~~~~~\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9p600cf5.cpp:2:\n/tmp/tmp9p600cf5.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp9p600cf5.cpp:43:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   43 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp9p600cf5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> vec;\n    vec.push_back(\"\
    Mercury\");\n    vec.push_back(\"Venus\");\n    vec.push_back(\"Earth\");\n  \
    \  vec.push_back(\"Mars\");\n    vec.push_back(\"Jupiter\");\n    vec.push_back(\"\
    Saturn\");\n    vec.push_back(\"Uranus\");\n    vec.push_back(\"Neptune\");\n\
    \    if(find(vec.begin(), vec.end(), planet1) != vec.end()){\n        if(find(vec.begin(),\
    \ vec.end(), planet2) != vec.end()){\n            int one = find(vec.begin(),\
    \ vec.end(), planet1) - vec.begin();\n            int two = find(vec.begin(),\
    \ vec.end(), planet2) - vec.begin();\n            std::tuple<std::string, > res;\n\
    \            if(one > two){\n                return res;\n            }\n    \
    \        while(one <= two){\n                res = std::tuple_cat(res, std::make_tuple(vec[one]));\n\
    \                one++;\n            }\n            return res;\n        }\n \
    \   }\n    std::tuple<std::string, > res;\n    return res;\n}\nint main() {\n\
    \    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"))\
    \ == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpalys3ik6.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpalys3ik6.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpalys3ik6.cpp:30:37: error: template\
    \ argument 2 is invalid\n   30 |             std::tuple<std::string, > res;\n\
    \      |                                     ^\n/tmp/tmpalys3ik6.cpp:35:68: error:\
    \ no matching function for call to \u2018tuple_cat(int&, std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >)\u2019\n   35 |           \
    \      res = std::tuple_cat(res, std::make_tuple(vec[one]));\n      |        \
    \                                                            ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpalys3ik6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1597:5:\
    \ note: candidate: \u2018template<class ... _Tpls, class> constexpr typename std::__tuple_cat_result<_Tpls\
    \ ...>::__type std::tuple_cat(_Tpls&& ...)\u2019\n 1597 |     tuple_cat(_Tpls&&...\
    \ __tpls)\n      |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1597:5:\
    \ note:   template argument deduction/substitution failed:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1594:31:\
    \ error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false,\
    \ void>\u2019\n 1594 |   template<typename... _Tpls, typename = typename\n   \
    \   |                               ^~~~~~~~\n/tmp/tmpalys3ik6.cpp:41:29: error:\
    \ template argument 2 is invalid\n   41 |     std::tuple<std::string, > res;\n\
    \      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpalys3ik6.cpp:2:\n/tmp/tmpalys3ik6.cpp: In fu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpqjwph644.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpqjwph644.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpqjwph644.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqjwph644.cpp:2:\n/tmp/tmpqjwph644.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpqjwph644.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpqjwph644.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // Write your code here\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4v4txsed.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp4v4txsed.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp4v4txsed.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4v4txsed.cpp:2:\n/tmp/tmp4v4txsed.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp4v4txsed.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4v4txsed.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    \n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpjs5_n1yd.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpjs5_n1yd.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpjs5_n1yd.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjs5_n1yd.cpp:2:\n/tmp/tmpjs5_n1yd.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpjs5_n1yd.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpjs5_n1yd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t// your code here\n\treturn std::make_tuple();\n}\n\
    int main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbqlnu9g3.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpbqlnu9g3.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpbqlnu9g3.cpp:18:24: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   18 |  return\
    \ std::make_tuple();\n      |         ~~~~~~~~~~~~~~~^~\n      |             \
    \           |\n      |                        std::tuple<>\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbqlnu9g3.cpp:2:\n/tmp/tmpbqlnu9g3.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpbqlnu9g3.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpbqlnu9g3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/inc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp6bpi46wl.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp6bpi46wl.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp6bpi46wl.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6bpi46wl.cpp:2:\n/tmp/tmp6bpi46wl.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp6bpi46wl.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6bpi46wl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::tuple<std::string, > ans;\n    return ans;\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmv6sbi3d.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpmv6sbi3d.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpmv6sbi3d.cpp:17:29: error: template\
    \ argument 2 is invalid\n   17 |     std::tuple<std::string, > ans;\n      | \
    \                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmv6sbi3d.cpp:2:\n/tmp/tmpmv6sbi3d.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpmv6sbi3d.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpmv6sbi3d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::unordered_map<std::string, int> plan = {\n\t\
    {\"Mercury\",1},\n\t{\"Venus\",2},\n\t{\"Earth\",3},\n\t{\"Mars\",4},\n\t{\"Jupiter\"\
    ,5},\n\t{\"Saturn\",6},\n\t{\"Uranus\",7},\n\t{\"Neptune\",8}\n\t};\n\tstd::vector<std::string>\
    \ v;\n\tint n1 = plan[planet1];\n\tint n2 = plan[planet2];\n\tstd::unordered_map<int,\
    \ std::string> planet;\n\tstd::vector<std::string> reverse;\n\tif(n1 > n2){\n\t\
    \tfor(auto i : plan){\n\t\t\tif(i.second >= n2 && i.second <= n1){\n\t\t\t\tplanet[i.second]\
    \ = i.first;\n\t\t\t}\n\t\t}\n\t\tfor(int i = n2; i <= n1; i++){\n\t\t\treverse.push_back(planet[i]);\n\
    \t\t}\n\t}\n\telse if(n1 < n2){\n\t\tfor(auto i : plan){\n\t\t\tif(i.second >=\
    \ n1 && i.second <= n2){\n\t\t\t\tplanet[i.second] = i.first;\n\t\t\t}\n\t\t}\n\
    \t\tfor(int i = n1; i <= n2; i++){\n\t\t\treverse.push_back(planet[i]);\n\t\t\
    }\n\t}\n\tif(reverse.size() == 0){\n\t\treturn {};\n\t}\n\tstd::tuple<std::string,\
    \ std::string, std::string, std::string, std::string, std::string, std::string>\
    \ t{reverse[0], reverse[1], reverse[2], reverse[3], reverse[4], reverse[5], reverse[6]};\n\
    \treturn t;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppq67maf1.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmppq67maf1.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmppq67maf1.cpp:56:9: error: cannot\
    \ convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   56 |  return\
    \ t;\n      |         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppq67maf1.cpp:2:\n/tmp/tmppq67maf1.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmppq67maf1.cpp:60:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   60 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmppq67maf1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::string planets[] = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  \
    \  std::vector<std::string> vp(std::begin(planets), std::end(planets));\n    int\
    \ pos1 = std::find(vp.begin(), vp.end(), planet1) - vp.begin();\n    int pos2\
    \ = std::find(vp.begin(), vp.end(), planet2) - vp.begin();\n    if (pos1 == vp.size()\
    \ || pos2 == vp.size())\n        return std::make_tuple();\n    if (pos1 > pos2)\
    \ {\n        std::reverse(vp.begin() + pos2, vp.begin() + pos1 + 1);\n       \
    \ return std::make_tuple(vp.begin() + pos2, vp.begin() + pos1 + 1);\n    }\n \
    \   else {\n        return std::make_tuple(vp.begin() + pos1, vp.begin() + pos2\
    \ + 1);\n    }\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmv6lw7nc.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpmv6lw7nc.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpmv6lw7nc.cpp:22:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   22 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpmv6lw7nc.cpp:25:31: error: cannot convert \u2018std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > > >\u2019 to \u2018int\u2019\
    \ in return\n   25 |         return std::make_tuple(vp.begin() + pos2, vp.begin()\
    \ + pos1 + 1);\n      |                ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                               |\n      |                            \
    \   std::tuple<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >, __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::alloc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::map<std::string, int> planets = {{\"Mercury\"\
    , 1},\n                                          {\"Venus\", 2},\n           \
    \                               {\"Earth\", 3},\n                            \
    \              {\"Mars\", 4},\n                                          {\"Jupiter\"\
    , 5},\n                                          {\"Saturn\", 6},\n          \
    \                                {\"Uranus\", 7},\n                          \
    \                {\"Neptune\", 8}};\n    std::vector<std::string> solarsystem\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n    std::vector<std::string> result;\n    int p1 = planets[planet1];\n\
    \    int p2 = planets[planet2];\n    if (p1 == 0 || p2 == 0) {\n        return\
    \ std::make_tuple();\n    }\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1; i <= p2; i++) {\n        result.push_back(solarsystem[i\
    \ - 1]);\n    }\n    return std::make_tuple(result[0], result[1], result[2], result[3],\
    \ result[4], result[5]);\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq57curnd.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpq57curnd.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpq57curnd.cpp:30:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   30 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpq57curnd.cpp:38:27: error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\u2019 to \u2018int\u2019 in\
    \ return\n   38 |     return std::make_tuple(result[0], result[1], result[2],\
    \ result[3], result[4], result[5]);\n      |            ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                           |\n      |                           std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \ "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t//write your code here\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmptqpjk2og.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmptqpjk2og.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmptqpjk2og.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptqpjk2og.cpp:2:\n/tmp/tmptqpjk2og.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmptqpjk2og.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmptqpjk2og.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \n                                        \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::vector<std::string>\
    \ result;\n    int i = 0;\n    for (; i < planets.size(); i++)\n        if (planets[i]\
    \ == planet1)\n            break;\n    if (i == planets.size())\n        return\
    \ std::make_tuple();\n    for (int j = 0; j < planets.size(); j++)\n        if\
    \ (planets[j] == planet2)\n            i = j;\n    if (i == planets.size())\n\
    \        return std::make_tuple();\n    for (int j = i + 1; j < planets.size();\
    \ j++)\n        result.push_back(planets[j]);\n    return std::make_tuple(result);\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5dwg5s_.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpq5dwg5s_.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpq5dwg5s_.cpp:25:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   25 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpq5dwg5s_.cpp:30:31: error: cannot convert \u2018std::tuple<>\u2019 to\
    \ \u2018int\u2019 in return\n   30 |         return std::make_tuple();\n     \
    \ |                ~~~~~~~~~~~~~~~^~\n      |                               |\n\
    \      |                               std::tuple<>\n/tmp/tmpq5dwg5s_.cpp:33:27:\
    \ error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   33 |     return std::make_tuple(result);\n      |            ~~~~~~~~~~~~~~~^~~~~~~~\n\
    \      |                           |\n      |                           std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq5dwg5s_.cpp:2:\n/tmp/tmpq5dwg5s_.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpq5dwg5s_.cpp:37:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   37 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |  "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> v = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n  std::vector<std::string>\
    \ a;\n  std::tuple<std::string, > b;\n  std::vector<std::string>::iterator it,\
    \ it2;\n  for(int i = 0; i < 8; i++){\n      if(v[i] == planet1) it = v.begin()\
    \ + i;\n      if(v[i] == planet2) it2 = v.begin() + i;\n  }\n  std::sort(it, it2);\n\
    \  if(it > it2) std::reverse(it, it2);\n  return b;\n}\nint main() {\n    auto\
    \ candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp3m68617b.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp3m68617b.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp3m68617b.cpp:19:27: error: template\
    \ argument 2 is invalid\n   19 |   std::tuple<std::string, > b;\n      |     \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3m68617b.cpp:2:\n/tmp/tmp3m68617b.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp3m68617b.cpp:31:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   31 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp3m68617b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/includ"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t//TODO\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp9ur_46my.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp9ur_46my.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp9ur_46my.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9ur_46my.cpp:2:\n/tmp/tmp9ur_46my.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp9ur_46my.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp9ur_46my.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets;\n    planets.push_back(\"\
    Mercury\");\n    planets.push_back(\"Venus\");\n    planets.push_back(\"Earth\"\
    );\n    planets.push_back(\"Mars\");\n    planets.push_back(\"Jupiter\");\n  \
    \  planets.push_back(\"Saturn\");\n    planets.push_back(\"Uranus\");\n    planets.push_back(\"\
    Neptune\");\n    auto start_idx = std::find(planets.begin(), planets.end(), planet1);\n\
    \    auto end_idx = std::find(planets.begin(), planets.end(), planet2);\n    std::tuple<std::string,\
    \ > t;\n    return t;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxzd8_kxr.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpxzd8_kxr.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpxzd8_kxr.cpp:28:29: error: template\
    \ argument 2 is invalid\n   28 |     std::tuple<std::string, > t;\n      |   \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxzd8_kxr.cpp:2:\n/tmp/tmpxzd8_kxr.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpxzd8_kxr.cpp:33:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   33 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpxzd8_kxr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tconst char * planets[8] = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n\t\
    // check if the planet names are valid\n\tbool exists1 = false;\n\tbool exists2\
    \ = false;\n\tfor (int i = 0; i < 8; i++) {\n\t\tif (planet1 == planets[i]) {\n\
    \t\t\texists1 = true;\n\t\t}\n\t\tif (planet2 == planets[i]) {\n\t\t\texists2\
    \ = true;\n\t\t}\n\t}\n\t// Return an empty tuple if planet1 or planet2 are not\
    \ correct planet names.\n\tif (!exists1 || !exists2) {\n\t\treturn std::make_tuple();\n\
    \t}\n\t// Find the starting index and ending index\n\tint start_index = -1;\n\t\
    int end_index = -1;\n\tfor (int i = 0; i < 8; i++) {\n\t\tif (planet1 == planets[i])\
    \ {\n\t\t\tstart_index = i;\n\t\t}\n\t\tif (planet2 == planets[i]) {\n\t\t\tend_index\
    \ = i;\n\t\t}\n\t}\n\t// check if start_index > end_index\n\t// if so, swap them\n\
    \tif (start_index > end_index) {\n\t\tint temp = start_index;\n\t\tstart_index\
    \ = end_index;\n\t\tend_index = temp;\n\t}\n\t// Create a vector to store result\n\
    \tstd::vector<std::string> res;\n\tfor (int i = start_index + 1; i < end_index;\
    \ i++) {\n\t\tres.push_back(planets[i]);\n\t}\n\treturn std::make_tuple(res);\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp65kn7s7o.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp65kn7s7o.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp65kn7s7o.cpp:31:25: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   31 |   return\
    \ std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n      |            \
    \             |\n      |                         std::tuple<>\n/tmp/tmp65kn7s7o.cpp:56:24:\
    \ error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   56 |  return std::make_tuple(res);\n      |         ~~~~~~~~~~~~~~~^~~~~\n\
    \      |                        |\n      |                        std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp65kn7s7o.cpp:2:\n/tmp/tmp65kn7s7o.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp65kn7s7o.cpp:60:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   60 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/includ"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string> ans;\n    bool start = false;\n    bool end =\
    \ false;\n    for (int i = 0; i < planets.size(); i++) {\n        if (planets[i]\
    \ == planet1) {\n            start = true;\n        }\n        if (planets[i]\
    \ == planet2) {\n            end = true;\n        }\n        if (start) {\n  \
    \          ans.push_back(planets[i]);\n        }\n        if (end) {\n       \
    \     break;\n        }\n    }\n    std::tuple<std::string, > result;\n    for\
    \ (int i = 0; i < ans.size(); i++) {\n        std::get<i>(result) = ans[i];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm5y70j03.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpm5y70j03.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpm5y70j03.cpp:35:29: error: template\
    \ argument 2 is invalid\n   35 |     std::tuple<std::string, > result;\n     \
    \ |                             ^\n/tmp/tmpm5y70j03.cpp:37:18: error: the value\
    \ of \u2018i\u2019 is not usable in a constant expression\n   37 |         std::get<i>(result)\
    \ = ans[i];\n      |                  ^\n/tmp/tmpm5y70j03.cpp:36:14: note: \u2018\
    int i\u2019 is not const\n   36 |     for (int i = 0; i < ans.size(); i++) {\n\
    \      |              ^\n/tmp/tmpm5y70j03.cpp:37:27: error: no matching function\
    \ for call to \u2018get<i>(int&)\u2019\n   37 |         std::get<i>(result) =\
    \ ans[i];\n      |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:60,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm5y70j03.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/utility:219:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpm5y70j03.cpp:37:27:\
    \ error: the value of \u2018i\u2019 is not usable in a constant expression\n \
    \  37 |         std::get<i>(result) = ans[i];\n      |                       \
    \    ^\n/tmp/tmpm5y70j03.cpp:36:14: note: \u2018int i\u2019 is not const\n   36\
    \ |     for (int i = 0; i < ans.size(); i++) {\n      |              ^\n/tmp/tmpm5y70j03.cpp:37:27:\
    \ note: in template argument for type \u2018long unsigned int\u2019\n   37 | \
    \        std::get<i>(result) = ans[i];\n      |                           ^\n\
    In file included from /shared/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::tuple<std::string, > res;\n    // insert your\
    \ code here\n    return res;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpadu9s4fs.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpadu9s4fs.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpadu9s4fs.cpp:17:29: error: template\
    \ argument 2 is invalid\n   17 |     std::tuple<std::string, > res;\n      | \
    \                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpadu9s4fs.cpp:2:\n/tmp/tmpadu9s4fs.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpadu9s4fs.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpadu9s4fs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    \n}\nint main() {\n    auto candidate = bf;\n  \
    \  assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpwekmumje.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpwekmumje.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpwekmumje.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwekmumje.cpp:2:\n/tmp/tmpwekmumje.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpwekmumje.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpwekmumje.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  // Write your code here\n  int position_of_planet1\
    \ = 0;\n  int position_of_planet2 = 0;\n  std::string array_of_planets[8] = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n  for(int i = 0; i < 8; i++) {\n    if(array_of_planets[i] ==\
    \ planet1) {\n      position_of_planet1 = i;\n    }\n    if(array_of_planets[i]\
    \ == planet2) {\n      position_of_planet2 = i;\n    }\n  }\n  std::tuple<std::string,\
    \ > list_of_planets_between;\n  if(position_of_planet1 > position_of_planet2)\
    \ {\n    for(int i = position_of_planet2 + 1; i < position_of_planet1; i++) {\n\
    \      list_of_planets_between.push_back(array_of_planets[i]);\n    }\n  } else\
    \ {\n    for(int i = position_of_planet1 + 1; i < position_of_planet2; i++) {\n\
    \      list_of_planets_between.push_back(array_of_planets[i]);\n    }\n  }\n \
    \ return list_of_planets_between;\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpu6uzr6u9.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpu6uzr6u9.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpu6uzr6u9.cpp:29:27: error: template\
    \ argument 2 is invalid\n   29 |   std::tuple<std::string, > list_of_planets_between;\n\
    \      |                           ^\n/tmp/tmpu6uzr6u9.cpp:32:31: error: request\
    \ for member \u2018push_back\u2019 in \u2018list_of_planets_between\u2019, which\
    \ is of non-class type \u2018int\u2019\n   32 |       list_of_planets_between.push_back(array_of_planets[i]);\n\
    \      |                               ^~~~~~~~~\n/tmp/tmpu6uzr6u9.cpp:36:31:\
    \ error: request for member \u2018push_back\u2019 in \u2018list_of_planets_between\u2019\
    , which is of non-class type \u2018int\u2019\n   36 |       list_of_planets_between.push_back(array_of_planets[i]);\n\
    \      |                               ^~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu6uzr6u9.cpp:2:\n/tmp/tmpu6uzr6u9.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpu6uzr6u9.cpp:43:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   43 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpu6uzr6u9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    static const std::vector<std::string> solar_system\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"};\n    static const std::unordered_map<std::string, int>\
    \ solar_system_num_to_index = {\n        {\"Mercury\", 0},\n        {\"Venus\"\
    , 1},\n        {\"Earth\", 2},\n        {\"Mars\", 3},\n        {\"Jupiter\",\
    \ 4},\n        {\"Saturn\", 5},\n        {\"Uranus\", 6},\n        {\"Neptune\"\
    , 7}\n    };\n    int planet1_index = solar_system_num_to_index.find(planet1)->second;\n\
    \    int planet2_index = solar_system_num_to_index.find(planet2)->second;\n  \
    \  std::string planet1_name = solar_system[planet1_index];\n    std::string planet2_name\
    \ = solar_system[planet2_index];\n    int start_index = std::min(planet1_index,\
    \ planet2_index);\n    int end_index = std::max(planet1_index, planet2_index);\n\
    \    std::vector<std::string> planets;\n    for (int i = start_index + 1; i <\
    \ end_index; i++) {\n        planets.push_back(solar_system[i]);\n    }\n    return\
    \ std::make_tuple(planets);\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptpdpr4bh.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmptpdpr4bh.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmptpdpr4bh.cpp:38:27: error: cannot\
    \ convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > > > >\u2019 to \u2018int\u2019 in return\n   38 |   \
    \  return std::make_tuple(planets);\n      |            ~~~~~~~~~~~~~~~^~~~~~~~~\n\
    \      |                           |\n      |                           std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptpdpr4bh.cpp:2:\n/tmp/tmptpdpr4bh.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmptpdpr4bh.cpp:42:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   42 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmptpdpr4bh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bo"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n    std::vector<std::string>::iterator it1 = std::find(planets.begin(), planets.end(),\
    \ planet1);\n    std::vector<std::string>::iterator it2 = std::find(planets.begin(),\
    \ planets.end(), planet2);\n    if (it1 == planets.end() || it2 == planets.end())\n\
    \        return std::make_tuple();\n    else if (it1 < it2)\n        return std::make_tuple(*it1);\n\
    \    else\n        return std::make_tuple(*it2);\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmppgzaw2nx.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmppgzaw2nx.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmppgzaw2nx.cpp:21:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   21 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmppgzaw2nx.cpp:23:31: error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\u2019 to \u2018int\u2019 in\
    \ return\n   23 |         return std::make_tuple(*it1);\n      |             \
    \   ~~~~~~~~~~~~~~~^~~~~~\n      |                               |\n      |  \
    \                             std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\n/tmp/tmppgzaw2nx.cpp:25:31: error: cannot convert\
    \ \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >\u2019 to \u2018int\u2019 in return\n   25 |         return std::make_tuple(*it2);\n\
    \      |                ~~~~~~~~~~~~~~~^~~~~~\n      |                       \
    \        |\n      |                               std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppgzaw2nx.cpp:2:\n/tmp/tmppgzaw2nx.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmppgzaw2nx.cpp:29:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   29 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  \n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpealbfpc5.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpealbfpc5.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpealbfpc5.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpealbfpc5.cpp:2:\n/tmp/tmpealbfpc5.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpealbfpc5.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpealbfpc5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n    std::vector<std::string>\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n    int p1 = std::find(planets.begin(), planets.end(),\
    \ planet1) - planets.begin();\n    int p2 = std::find(planets.begin(), planets.end(),\
    \ planet2) - planets.begin();\n    std::cout << p1 << \" \" << p2 << std::endl;\n\
    \    if (p1 == 8 || p2 == 8) {\n        return std::make_tuple();\n    }\n   \
    \ std::vector<std::string> res;\n    if (p1 > p2) {\n        std::swap(p1, p2);\n\
    \    }\n    for (int i = p1 + 1; i < p2; i++) {\n        res.push_back(planets[i]);\n\
    \    }\n    return std::make_tuple(res);\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpipszkgwm.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpipszkgwm.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpipszkgwm.cpp:23:31: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   23 |     \
    \    return std::make_tuple();\n      |                ~~~~~~~~~~~~~~~^~\n   \
    \   |                               |\n      |                               std::tuple<>\n\
    /tmp/tmpipszkgwm.cpp:32:27: error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   32 |     return std::make_tuple(res);\n      |            ~~~~~~~~~~~~~~~^~~~~\n\
    \      |                           |\n      |                           std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpipszkgwm.cpp:2:\n/tmp/tmpipszkgwm.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpipszkgwm.cpp:36:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   36 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /sha"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  const std::vector<std::string> planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\",\n    \"Jupiter\", \"Saturn\", \"Uranus\", \"\
    Neptune\"};\n  std::tuple<std::string, > result;\n  int idx1 = -1, idx2 = -1;\n\
    \  for (int i = 0; i < planets.size(); i++) {\n    if (planets[i] == planet1)\
    \ idx1 = i;\n    if (planets[i] == planet2) idx2 = i;\n  }\n  if (idx1 > idx2)\
    \ std::swap(idx1, idx2);\n  if (idx1 < 0 || idx2 < 0) return result;\n  for (int\
    \ i = idx1 + 1; i < idx2; i++)\n    result = std::tuple_cat(result, std::make_tuple(planets[i]));\n\
    \  return result;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5rkselmy.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp5rkselmy.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp5rkselmy.cpp:19:27: error: template\
    \ argument 2 is invalid\n   19 |   std::tuple<std::string, > result;\n      |\
    \                           ^\n/tmp/tmp5rkselmy.cpp:28:64: error: no matching\
    \ function for call to \u2018tuple_cat(int&, std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >)\u2019\n   28 |     result\
    \ = std::tuple_cat(result, std::make_tuple(planets[i]));\n      |            \
    \                                                    ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp5rkselmy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1597:5:\
    \ note: candidate: \u2018template<class ... _Tpls, class> constexpr typename std::__tuple_cat_result<_Tpls\
    \ ...>::__type std::tuple_cat(_Tpls&& ...)\u2019\n 1597 |     tuple_cat(_Tpls&&...\
    \ __tpls)\n      |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1597:5:\
    \ note:   template argument deduction/substitution failed:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1594:31:\
    \ error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false,\
    \ void>\u2019\n 1594 |   template<typename... _Tpls, typename = typename\n   \
    \   |                               ^~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5rkselmy.cpp:2:\n/tmp/tmp5rkselmy.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp5rkselmy.cpp:33:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   33 |     assert(ca"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n  std::vector<std::string>::iterator it1 = std::find(planets.begin(), planets.end(),\
    \ planet1);\n  std::vector<std::string>::iterator it2 = std::find(planets.begin(),\
    \ planets.end(), planet2);\n  if(it1 == planets.end() || it2 == planets.end())\n\
    \  {\n    return std::make_tuple();\n  }\n  if(it1 > it2)\n  {\n    std::vector<std::string>::iterator\
    \ temp = it1;\n    it1 = it2;\n    it2 = temp;\n  }\n  it1++;\n  std::vector<std::string>\
    \ res(it1, it2);\n  return std::make_tuple(res[0], res[1], res[2], res[3], res[4]);\n\
    }\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"),\
    \ (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuvkhx4sr.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpuvkhx4sr.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpuvkhx4sr.cpp:22:27: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   22 |     return\
    \ std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n      |          \
    \                 |\n      |                           std::tuple<>\n/tmp/tmpuvkhx4sr.cpp:32:25:\
    \ error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   32 |   return\
    \ std::make_tuple(res[0], res[1], res[2], res[3], res[4]);\n      |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                         |\n      |                         std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuvkhx4sr.cpp:2:\n/tmp/tmpuvkhx4sr.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpuvkhx4sr.cpp:36:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   36 |     ass"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::vector<std::string> planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    };\n  std::string* it1 = std::find(planets.begin(), planets.end(), planet1);\n\
    \  std::string* it2 = std::find(planets.begin(), planets.end(), planet2);\n  std::vector<std::string>\
    \ res;\n  if (it1 > it2) {\n    std::swap(it1, it2);\n  }\n  std::copy(it1, it2,\
    \ std::back_inserter(res));\n  return std::make_tuple(res);\n}\nint main() {\n\
    \    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"))\
    \ == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ui_sjle.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp5ui_sjle.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp5ui_sjle.cpp:18:31: error: cannot\
    \ convert \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 to \u2018std::string*\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>*\u2019} in initialization\n   18\
    \ |   std::string* it1 = std::find(planets.begin(), planets.end(), planet1);\n\
    \      |                      ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                               |\n      |                            \
    \   __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\n/tmp/tmp5ui_sjle.cpp:19:31: error: cannot convert \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 to \u2018std::string*\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>*\u2019} in initialization\n   19\
    \ |   std::string* it2 = std::find(planets.begin(), planets.end(), planet2);\n\
    \      |                      ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                               |\n      |                            \
    \   __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\n/tmp/tmp5ui_sjle.cpp:25:25: error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   25 |   return std::make_tuple(res);\n      |          ~~~~~~~~~~~~~~~^~~~~\n\
    \      |                         |\n      |                         std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocat"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  std::map<std::string, int> m = {{\"Mercury\", 1},\
    \ {\"Venus\", 2}, {\"Earth\", 3}, {\"Mars\", 4}, {\"Jupiter\", 5}, {\"Saturn\"\
    , 6}, {\"Uranus\", 7}, {\"Neptune\", 8}};\n  std::vector<std::string> v = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"};\n  if (m.find(planet1) == m.end() || m.find(planet2) == m.end())\
    \ {\n    return std::make_tuple();\n  }\n  if (m[planet1] > m[planet2]) {\n  \
    \  return std::make_tuple();\n  }\n  std::vector<std::string> ans;\n  for (int\
    \ i = m[planet1] - 1; i < m[planet2] - 1; i++) {\n    ans.push_back(v[i]);\n \
    \ }\n  return std::make_tuple(ans[0], ans[1], ans[2], ans[3], ans[4]);\n}\nint\
    \ main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_nc6vv3k.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp_nc6vv3k.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp_nc6vv3k.cpp:20:27: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   20 |     return\
    \ std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n      |          \
    \                 |\n      |                           std::tuple<>\n/tmp/tmp_nc6vv3k.cpp:23:27:\
    \ error: cannot convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n\
    \   23 |     return std::make_tuple();\n      |            ~~~~~~~~~~~~~~~^~\n\
    \      |                           |\n      |                           std::tuple<>\n\
    /tmp/tmp_nc6vv3k.cpp:29:25: error: cannot convert \u2018std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\u2019 to \u2018int\u2019 in\
    \ return\n   29 |   return std::make_tuple(ans[0], ans[1], ans[2], ans[3], ans[4]);\n\
    \      |          ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \
    \    |                         |\n      |                         std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:3"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\t\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_uupj5jd.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp_uupj5jd.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp_uupj5jd.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_uupj5jd.cpp:2:\n/tmp/tmp_uupj5jd.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp_uupj5jd.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_uupj5jd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    return std::make_tuple<std::string, >(\"Venus\"\
    );\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
    ), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbakny8n9.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpbakny8n9.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpbakny8n9.cpp:17:17: error: parse\
    \ error in template argument list\n   17 |     return std::make_tuple<std::string,\
    \ >(\"Venus\");\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbakny8n9.cpp:17:50:\
    \ error: no matching function for call to \u2018make_tuple<std::string, <expression\
    \ error> >(const char [6])\u2019\n   17 |     return std::make_tuple<std::string,\
    \ >(\"Venus\");\n      |                                                  ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpbakny8n9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note: candidate: \u2018template<class ... _Elements> constexpr std::tuple<typename\
    \ std::__decay_and_strip<_Elements>::__type ...> std::make_tuple(_Elements&& ...)\u2019\
    \n 1470 |     make_tuple(_Elements&&... __args)\n      |     ^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpbakny8n9.cpp:17:50:\
    \ error: template argument 2 is invalid\n   17 |     return std::make_tuple<std::string,\
    \ >(\"Venus\");\n      |                                                  ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbakny8n9.cpp:2:\n/tmp/tmpbakny8n9.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpbakny8n9.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\")"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    auto p1 = distance(begin(planets), find(begin(planets),\
    \ end(planets), planet1));\n    auto p2 = distance(begin(planets), find(begin(planets),\
    \ end(planets), planet2));\n    if (p1 == p2 || p1 == 8 || p2 == 8) return {};\n\
    \    if (p1 > p2) swap(p1, p2);\n    return make_tuple(planets[p1 + 1], planets[p2\
    \ - 1]);\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpilr3bqr_.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpilr3bqr_.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpilr3bqr_.cpp:17:30: error: \u2018\
    planets\u2019 was not declared in this scope; did you mean \u2018planet1\u2019\
    ?\n   17 |     auto p1 = distance(begin(planets), find(begin(planets), end(planets),\
    \ planet1));\n      |                              ^~~~~~~\n      |          \
    \                    planet1\n/tmp/tmpilr3bqr_.cpp:17:24: error: \u2018begin\u2019\
    \ was not declared in this scope; did you mean \u2018std::begin\u2019?\n   17\
    \ |     auto p1 = distance(begin(planets), find(begin(planets), end(planets),\
    \ planet1));\n      |                        ^~~~~\n      |                  \
    \      std::begin\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpilr3bqr_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1224:5:\
    \ note: \u2018std::begin\u2019 declared here\n 1224 |     begin(const valarray<_Tp>&\
    \ __va)\n      |     ^~~~~\n/tmp/tmpilr3bqr_.cpp:17:61: error: \u2018end\u2019\
    \ was not declared in this scope; did you mean \u2018std::end\u2019?\n   17 |\
    \     auto p1 = distance(begin(planets), find(begin(planets), end(planets), planet1));\n\
    \      |                                                             ^~~\n   \
    \   |                                                             std::end\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpilr3bqr_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1244:5:\
    \ note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>&\
    \ __va)\n      |     ^~~\n/tmp/tmpilr3bqr_.cpp:17:15: error: \u2018distance\u2019\
    \ was not declared in this scope; did you mean \u2018std::distance\u2019?\n  \
    \ 17 |     auto p1 = distance(begin(planets), find(begin(planets), end(planets),\
    \ planet1));\n      |               ^~~~~~~~\n      |               std::"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::tuple<std::string, > t;\n    return t;\n}\n\
    int main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuum7k62y.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpuum7k62y.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpuum7k62y.cpp:17:29: error: template\
    \ argument 2 is invalid\n   17 |     std::tuple<std::string, > t;\n      |   \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuum7k62y.cpp:2:\n/tmp/tmpuum7k62y.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpuum7k62y.cpp:22:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   22 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpuum7k62y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = {\n        \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    };\n    int pos1 = std::find(planets.begin(), planets.end(),\
    \ planet1) - planets.begin();\n    int pos2 = std::find(planets.begin(), planets.end(),\
    \ planet2) - planets.begin();\n    if (pos1 == -1 || pos2 == -1) return {};\n\
    \    std::vector<std::string> ans;\n    if (pos1 > pos2) {\n        for (int i\
    \ = pos2 + 1; i < pos1; i++) {\n            ans.push_back(planets[i]);\n     \
    \   }\n    } else {\n        for (int i = pos1 + 1; i < pos2; i++) {\n       \
    \     ans.push_back(planets[i]);\n        }\n    }\n    return std::make_tuple(ans[0],\
    \ ans[1], ans[2], ans[3], ans[4]);\n}\nint main() {\n    auto candidate = bf;\n\
    \    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\"\
    , \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzqtd0hpn.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpzqtd0hpn.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpzqtd0hpn.cpp:33:27: error: cannot\
    \ convert \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> > >\u2019 to \u2018int\u2019 in return\n   33 |     return\
    \ std::make_tuple(ans[0], ans[1], ans[2], ans[3], ans[4]);\n      |          \
    \  ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |          \
    \                 |\n      |                           std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzqtd0hpn.cpp:2:\n/tmp/tmpzqtd0hpn.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpzqtd0hpn.cpp:37:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   37 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                        "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  return {\"\", };\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpug74j0e1.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpug74j0e1.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpug74j0e1.cpp:17:15: error: invalid\
    \ conversion from \u2018const char*\u2019 to \u2018int\u2019 [-fpermissive]\n\
    \   17 |   return {\"\", };\n      |               ^\n      |               |\n\
    \      |               const char*\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpug74j0e1.cpp:2:\n/tmp/tmpug74j0e1.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpug74j0e1.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpug74j0e1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  // your code here\n  std::tuple<std::string, > no_planet;\n\
    \  if(planet1 == \"Mercury\"){\n    if(planet2 == \"Mercury\"){\n      return\
    \ no_planet;\n    }else if(planet2 == \"Venus\"){\n      return no_planet;\n \
    \   }else if(planet2 == \"Earth\"){\n      return no_planet;\n    }else if(planet2\
    \ == \"Mars\"){\n      return no_planet;\n    }else if(planet2 == \"Jupiter\"\
    ){\n      return no_planet;\n    }else if(planet2 == \"Saturn\"){\n      return\
    \ no_planet;\n    }else if(planet2 == \"Uranus\"){\n      return no_planet;\n\
    \    }else if(planet2 == \"Neptune\"){\n      return no_planet;\n    }else{\n\
    \      return no_planet;\n    }\n  }else if(planet1 == \"Venus\"){\n    if(planet2\
    \ == \"Mercury\"){\n      return std::make_tuple(\"Venus\");\n    }else if(planet2\
    \ == \"Venus\"){\n      return no_planet;\n    }else if(planet2 == \"Earth\"){\n\
    \      return no_planet;\n    }else if(planet2 == \"Mars\"){\n      return no_planet;\n\
    \    }else if(planet2 == \"Jupiter\"){\n      return no_planet;\n    }else if(planet2\
    \ == \"Saturn\"){\n      return no_planet;\n    }else if(planet2 == \"Uranus\"\
    ){\n      return no_planet;\n    }else if(planet2 == \"Neptune\"){\n      return\
    \ no_planet;\n    }else{\n      return no_planet;\n    }\n  }else if(planet1 ==\
    \ \"Earth\"){\n    if(planet2 == \"Mercury\"){\n      return std::make_tuple(\"\
    Venus\", \"Earth\");\n    }else if(planet2 == \"Venus\"){\n      return std::make_tuple(\"\
    Venus\");\n    }else if(planet2 == \"Earth\"){\n      return no_planet;\n    }else\
    \ if(planet2\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2pf5h1rw.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp2pf5h1rw.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp2pf5h1rw.cpp:18:27: error: template\
    \ argument 2 is invalid\n   18 |   std::tuple<std::string, > no_planet;\n    \
    \  |                           ^\n/tmp/tmp2pf5h1rw.cpp:41:29: error: cannot convert\
    \ \u2018std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n   41 |  \
    \     return std::make_tuple(\"Venus\");\n      |              ~~~~~~~~~~~~~~~^~~~~~~~~\n\
    \      |                             |\n      |                             std::tuple<const\
    \ char*>\n/tmp/tmp2pf5h1rw.cpp:61:29: error: cannot convert \u2018std::tuple<const\
    \ char*, const char*>\u2019 to \u2018int\u2019 in return\n   61 |       return\
    \ std::make_tuple(\"Venus\", \"Earth\");\n      |              ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~\n\
    \      |                             |\n      |                             std::tuple<const\
    \ char*, const char*>\n/tmp/tmp2pf5h1rw.cpp:63:29: error: cannot convert \u2018\
    std::tuple<const char*>\u2019 to \u2018int\u2019 in return\n   63 |       return\
    \ std::make_tuple(\"Venus\");\n      |              ~~~~~~~~~~~~~~~^~~~~~~~~\n\
    \      |                             |\n      |                             std::tuple<const\
    \ char*>\n/tmp/tmp2pf5h1rw.cpp:66:21: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   66 |     }else if(planet2\n      |             ~       ^\n \
    \     |                     )\n   67 | }\n      | ~                    \n/tmp/tmp2pf5h1rw.cpp:66:14:\
    \ error: could not convert \u2018planet2\u2019 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018bool\u2019\n   66 | \
    \    }else if(planet2\n      |              ^~~~~~~\n      |              |\n\
    \      |              std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmp2pf5h1rw.cpp:67:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   67 | }\n \
    \     | ^\n/tmp/tmp2pf5h1rw.cpp:68:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   68 | int main() {\n      |            ^\n\
    /tmp/tmp2pf5h1rw.cpp:77:1: erro"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::vector<std::string> planets = { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n    std::map<std::string, int> planet_index;\n    for (int i = 0; i < planets.size();\
    \ i++) {\n        planet_index[planets[i]] = i;\n    }\n    if (planet_index.find(planet1)\
    \ == planet_index.end() || planet_index.find(planet2) == planet_index.end()) {\n\
    \        return std::make_tuple<std::string>();\n    }\n    std::string& first\
    \ = planet_index[planet1] < planet_index[planet2] ? planet1 : planet2;\n    std::string&\
    \ second = planet_index[planet1] < planet_index[planet2] ? planet2 : planet1;\n\
    \    std::tuple<std::string, > ret;\n    for (int i = planet_index[first] + 1;\
    \ i < planet_index[second]; i++) {\n        ret.push_back(planets[i]);\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_kfdsgs4.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp_kfdsgs4.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp_kfdsgs4.cpp:23:45: error: too\
    \ few arguments to function \u2018constexpr std::tuple<typename std::__decay_and_strip<_Elements>::__type\
    \ ...> std::make_tuple(_Elements&& ...) [with _Elements = {std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >}]\u2019\n   23 |         return\
    \ std::make_tuple<std::string>();\n      |                                   \
    \          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp_kfdsgs4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1470:5:\
    \ note: declared here\n 1470 |     make_tuple(_Elements&&... __args)\n      |\
    \     ^~~~~~~~~~\n/tmp/tmp_kfdsgs4.cpp:27:29: error: template argument 2 is invalid\n\
    \   27 |     std::tuple<std::string, > ret;\n      |                         \
    \    ^\n/tmp/tmp_kfdsgs4.cpp:29:13: error: request for member \u2018push_back\u2019\
    \ in \u2018ret\u2019, which is of non-class type \u2018int\u2019\n   29 |    \
    \     ret.push_back(planets[i]);\n      |             ^~~~~~~~~\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n     \
    \            from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_kfdsgs4.cpp:2:\n/tmp/tmp_kfdsgs4.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp_kfdsgs4.cpp:35:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   35 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  // Your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmple477ken.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmple477ken.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmple477ken.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmple477ken.cpp:2:\n/tmp/tmple477ken.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmple477ken.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmple477ken.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp31ljp85l.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp31ljp85l.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp31ljp85l.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp31ljp85l.cpp:2:\n/tmp/tmp31ljp85l.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp31ljp85l.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp31ljp85l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n  \n  std::vector<std::string> planets = { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n  std::vector<std::string> result;\n  if( std::find(planets.begin(), planets.end(),\
    \ planet1) == planets.end() ||\n      std::find(planets.begin(), planets.end(),\
    \ planet2) == planets.end() ) return {};\n  int start = -1, end = -1;\n  int n\
    \ = planets.size();\n  for(int i = 0; i < n; i++) {\n    if(planets[i] == planet1)\
    \ start = i;\n    if(planets[i] == planet2) end = i;\n  }\n  if(start > end) std::swap(start,\
    \ end);\n  for(int i = start + 1; i < end; i++) {\n    result.push_back(planets[i]);\n\
    \  }\n  return {result.begin(), result.end()};\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpn9oqy9ms.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpn9oqy9ms.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpn9oqy9ms.cpp:32:39: error: cannot\
    \ convert \u2018<brace-enclosed initializer list>\u2019 to \u2018int\u2019 in\
    \ return\n   32 |   return {result.begin(), result.end()};\n      |          \
    \                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn9oqy9ms.cpp:2:\n/tmp/tmpn9oqy9ms.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpn9oqy9ms.cpp:36:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   36 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpn9oqy9ms.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    const std::vector<std::string> planets{ \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n    std::tuple<std::string, > res;\n    int idx1 = -1, idx2 = -1;\n    for\
    \ (int i = 0; i < planets.size(); i++) {\n        if (planets[i] == planet1) idx1\
    \ = i;\n        if (planets[i] == planet2) idx2 = i;\n    }\n    if (idx1 != -1\
    \ && idx2 != -1) {\n        std::vector<std::string> t;\n        if (idx1 > idx2)\
    \ std::swap(idx1, idx2);\n        for (int i = idx1 + 1; i < idx2; i++) t.push_back(planets[i]);\n\
    \        std::sort(t.begin(), t.end());\n        res = std::make_tuple(t[0], t[1],\
    \ t[2], t[3], t[4]);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmwi1odq4.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpmwi1odq4.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpmwi1odq4.cpp:18:29: error: template\
    \ argument 2 is invalid\n   18 |     std::tuple<std::string, > res;\n      | \
    \                            ^\n/tmp/tmpmwi1odq4.cpp:29:30: error: cannot convert\
    \ \u2018std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >\u2019 to \u2018int\u2019 in assignment\n   29 |         res = std::make_tuple(t[0],\
    \ t[1], t[2], t[3], t[4]);\n      |               ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                              |\n      |                             \
    \ std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmwi1odq4.cpp:2:\n/tmp/tmpmwi1odq4.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpmwi1odq4.cpp:35:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   35 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n\tstd::map<std::string, int> planet_map;\n\tplanet_map[\"\
    Mercury\"] = 1;\n\tplanet_map[\"Venus\"] = 2;\n\tplanet_map[\"Earth\"] = 3;\n\t\
    planet_map[\"Mars\"] = 4;\n\tplanet_map[\"Jupiter\"] = 5;\n\tplanet_map[\"Saturn\"\
    ] = 6;\n\tplanet_map[\"Uranus\"] = 7;\n\tplanet_map[\"Neptune\"] = 8;\n\tif (planet_map.find(planet1)\
    \ == planet_map.end() || planet_map.find(planet2) == planet_map.end())\n\t\treturn\
    \ std::make_tuple();\n\tauto planet1_idx = planet_map[planet1];\n\tauto planet2_idx\
    \ = planet_map[planet2];\n\tstd::vector<std::string> ret_planets;\n\tstd::vector<std::string>\
    \ planet_names{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"};\n\tif (planet1_idx < planet2_idx) {\n\t\tfor (auto\
    \ i = planet1_idx; i < planet2_idx; ++i)\n\t\t\tret_planets.push_back(planet_names[i]);\n\
    \t} else {\n\t\tfor (auto i = planet2_idx; i < planet1_idx; ++i)\n\t\t\tret_planets.push_back(planet_names[i]);\n\
    \t}\n\treturn std::make_tuple(ret_planets);\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmptyvroae5.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmptyvroae5.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmptyvroae5.cpp:27:25: error: cannot\
    \ convert \u2018std::tuple<>\u2019 to \u2018int\u2019 in return\n   27 |   return\
    \ std::make_tuple();\n      |          ~~~~~~~~~~~~~~~^~\n      |            \
    \             |\n      |                         std::tuple<>\n/tmp/tmptyvroae5.cpp:39:24:\
    \ error: cannot convert \u2018std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\u2019 to \u2018int\u2019\
    \ in return\n   39 |  return std::make_tuple(ret_planets);\n      |         ~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n\
    \      |                        |\n      |                        std::tuple<std::vector<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > > > >\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptyvroae5.cpp:2:\n/tmp/tmptyvroae5.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmptyvroae5.cpp:43:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   43 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::map<std::string, int> planet_map;\n    planet_map[\"\
    Mercury\"] = 1;\n    planet_map[\"Venus\"] = 2;\n    planet_map[\"Earth\"] = 3;\n\
    \    planet_map[\"Mars\"] = 4;\n    planet_map[\"Jupiter\"] = 5;\n    planet_map[\"\
    Saturn\"] = 6;\n    planet_map[\"Uranus\"] = 7;\n    planet_map[\"Neptune\"] =\
    \ 8;\n    std::tuple<std::string, > res;\n    if (planet_map.find(planet1) ==\
    \ planet_map.end() or planet_map.find(planet2) == planet_map.end()) {\n      \
    \  return res;\n    }\n    if (planet_map[planet1] < planet_map[planet2]) {\n\
    \        std::swap(planet1, planet2);\n    }\n    for (auto it = planet_map.begin();\
    \ it != planet_map.end(); it++) {\n        if (it->second > planet_map[planet1]\
    \ and it->second < planet_map[planet2]) {\n            res = std::tuple_cat(res,\
    \ std::make_tuple(it->first));\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\"\
    )) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"\
    ), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"Mercury\"\
    ), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n  \
    \  assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfy84feux.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpfy84feux.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpfy84feux.cpp:26:29: error: template\
    \ argument 2 is invalid\n   26 |     std::tuple<std::string, > res;\n      | \
    \                            ^\n/tmp/tmpfy84feux.cpp:35:65: error: no matching\
    \ function for call to \u2018tuple_cat(int&, std::tuple<std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >)\u2019\n   35 |           \
    \  res = std::tuple_cat(res, std::make_tuple(it->first));\n      |           \
    \                                                      ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfy84feux.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1597:5:\
    \ note: candidate: \u2018template<class ... _Tpls, class> constexpr typename std::__tuple_cat_result<_Tpls\
    \ ...>::__type std::tuple_cat(_Tpls&& ...)\u2019\n 1597 |     tuple_cat(_Tpls&&...\
    \ __tpls)\n      |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1597:5:\
    \ note:   template argument deduction/substitution failed:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1594:31:\
    \ error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false,\
    \ void>\u2019\n 1594 |   template<typename... _Tpls, typename = typename\n   \
    \   |                               ^~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfy84feux.cpp:2:\n/tmp/tmpfy84feux.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpfy84feux.cpp:42:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   42 |     assert"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    std::tuple<std::string, > answer;\n    // Your code\
    \ here\n    return answer;\n}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"\
    Jupiter\"), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
    Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
    Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) ==\
    \ std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n\
    \    assert(candidate((\"Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    \    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::tuple<std::string,\
    \ >(std::tuple<long>)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl34iui8a.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpl34iui8a.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpl34iui8a.cpp:17:29: error: template\
    \ argument 2 is invalid\n   17 |     std::tuple<std::string, > answer;\n     \
    \ |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl34iui8a.cpp:2:\n/tmp/tmpl34iui8a.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpl34iui8a.cpp:23:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   23 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpl34iui8a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skyla"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpe113fxe_.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmpe113fxe_.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmpe113fxe_.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe113fxe_.cpp:2:\n/tmp/tmpe113fxe_.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmpe113fxe_.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpe113fxe_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets\
    \ in our solar system: the closerst to the Sun \n// is Mercury, the next one is\
    \ Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a\
    \ function that takes two planet names as strings planet1 and planet2. \n// The\
    \ function should return a tuple containing all planets whose orbits are \n//\
    \ located between the orbit of planet1 and the orbit of planet2, sorted by \n\
    // the proximity to the sun. \n// The function should return an empty tuple if\
    \ planet1 or planet2\n// are not correct planet names. \n// Examples\n// bf(\"\
    Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1,\
    \ std::string planet2) {\n    // your code here\n}\nint main() {\n    auto candidate\
    \ = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == std::make_tuple(\"\
    Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == std::make_tuple(\"\
    Venus\"));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == std::make_tuple(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"));\n    assert(candidate((\"\
    Neptune\"), (\"Venus\")) == std::make_tuple(\"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\"));\n    assert(candidate((\"Earth\"), (\"Earth\")) ==\
    \ (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"Mars\"\
    ), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
    Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp05ei7hw6.cpp:16:25: error: template argument 2 is invalid\n   16\
    \ | std::tuple<std::string, > bf(std::string planet1, std::string planet2) {\n\
    \      |                         ^\n/tmp/tmp05ei7hw6.cpp: In function \u2018int\
    \ bf(std::string, std::string)\u2019:\n/tmp/tmp05ei7hw6.cpp:18:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   18 | }\n\
    \      | ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp05ei7hw6.cpp:2:\n/tmp/tmp05ei7hw6.cpp: In function\
    \ \u2018int main()\u2019:\n/tmp/tmp05ei7hw6.cpp:21:48: error: no match for \u2018\
    operator==\u2019 (operand types are \u2018int\u2019 and \u2018std::tuple<const\
    \ char*, const char*>\u2019)\n   21 |     assert(candidate((\"Jupiter\"), (\"\
    Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                     |      \
    \                                      |\n      |                     int    \
    \                                      std::tuple<const char*, const char*>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp05ei7hw6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n          \
    \       from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64"
  exit_code: 1
  status: SyntaxError
