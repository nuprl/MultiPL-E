name: HumanEval_132_is_nested
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes\
  \ a string as input which contains only square brackets.\n// The function should\
  \ return True if and only if there is a valid subsequence of brackets \n// where\
  \ at least one bracket in the subsequence is nested.\n// is_nested('[[]]') \u279E\
  \ True\n// is_nested('[]]]]]]][[[[[]') \u279E False\n// is_nested('[][]') \u279E\
  \ False\n// is_nested('[]') \u279E False\n// is_nested('[[][]]') \u279E True\n//\
  \ is_nested('[[]][[') \u279E True\nbool is_nested(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"\
  [[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n\
  \    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"[]\")) ==\
  \ (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"\
  []]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n\
  \    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\")) ==\
  \ (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"\
  [[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
  [[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n}\n"
completions: ["    std::stack<char> stk;\n    for(auto ch : string) {\n        if(ch\
    \ == '[') {\n            stk.push(ch);\n        }\n        else if(ch == ']')\
    \ {\n            if(stk.empty()) {\n                return false;\n          \
    \  }\n            else {\n                stk.pop();\n            }\n        }\n\
    \    }\n    return stk.empty();", "    // create a stack and push first char of\
    \ string\n    std::stack<char> stack;\n    stack.push(string[0]);\n    for(int\
    \ i = 1; i < string.length(); i++) {\n        // if stack top has similar bracket\
    \ as string[i] pop\n        if(stack.top() == '[' && string[i] == ']')\n     \
    \       stack.pop();\n        else\n            stack.push(string[i]);\n    }\n\
    \    // if stack is empty return true else false\n    if(stack.empty())\n    \
    \    return true;\n    else\n        return false;", "\tint cnt = 0;\n\tint cnt_nested\
    \ = 0;\n\tfor (int i = 0; i < string.size(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcnt++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcnt--;\n\t\t\
    }\n\t\tif (cnt < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (cnt == 0) {\n\t\t\t\
    cnt_nested++;\n\t\t}\n\t}\n\tif (cnt != 0) {\n\t\treturn false;\n\t}\n\treturn\
    \ cnt_nested > 1;", "    bool ret = false;\n    int n = string.length();\n   \
    \ std::stack<char> s;\n    for(int i = 0; i < n; i++) {\n        if(string[i]\
    \ == '[') {\n            s.push(string[i]);\n        }\n        else if(string[i]\
    \ == ']') {\n            if(s.size() > 0) {\n                if(s.top() == '[')\n\
    \                    s.pop();\n                else \n                    return\
    \ false;\n            }\n            else \n                return false;\n  \
    \      }\n    }\n    if(s.size() > 0)\n        return false;\n    return true;",
  "\tint count=0;\n\tfor(int i=0;i<string.length();i++)\n\t{\n\t\tif(string[i]=='[')\n\
    \t\t\tcount++;\n\t\telse\n\t\t\tcount--;\n\t\tif(count<0)\n\t\t\treturn false;\n\
    \t}\n\treturn count==0;", "    int len = string.length();\n    stack<char> s;\n\
    \    s.push(string[0]);\n    for(int i=1;i<len;i++){\n        if(string[i]=='['\
    \ || string[i]==']'){\n            if(string[i]=='['){\n                s.push(string[i]);\n\
    \            }\n            else{\n                if(s.top()=='['){\n       \
    \             s.pop();\n                }\n                else{\n           \
    \         s.push(string[i]);\n                }\n            }\n        }\n  \
    \  }\n    if(s.empty()){\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }", "    std::vector<char> v;\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='['){\n            v.push_back(string[i]);\n        }\n\
    \        else if(string[i]==']'){\n            if(v.size()>0){\n             \
    \   if(v[v.size()-1]=='['){\n                    v.pop_back();\n             \
    \   }\n                else{\n                    return false;\n            \
    \    }\n            }\n            else{\n                return false;\n    \
    \        }\n        }\n    }\n    if(v.size()==0){\n        return true;\n   \
    \ }\n    else{\n        return false;\n    }", "\tif (string == \"\") return false;\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[' || string[i]\
    \ == ']') {\n\t\t\tif (string[i] == ']' && i == 0) return false;\n\t\t\tif (string[i]\
    \ == ']' && string[i - 1] == '[') return true;\n\t\t}\n\t}\n\treturn false;",
  "    int count=0;\n    for(int i=0;i<string.length();i++){\n        if(string[i]=='['){\n\
    \            count++;\n        }\n        else{\n            count--;\n      \
    \  }\n        if(count<0){\n            return false;\n        }\n    }\n    return\
    \ true;", "\tstd::stack<char> st;\n\tfor(char c : string) {\n\t\tif(c == '[')\
    \ {\n\t\t\tst.push(c);\n\t\t}\n\t\telse if(c == ']') {\n\t\t\tif(st.empty()) return\
    \ false;\n\t\t\telse st.pop();\n\t\t}\n\t}\n\treturn true;", "    std::stack<char>\
    \ stk;\n    for(int i=0;i<string.length();i++){\n        if(string[i]=='['){\n\
    \            stk.push(string[i]);\n        }\n        else if(string[i]==']'){\n\
    \            if(stk.empty()){\n                return false;\n            }\n\
    \            else if(stk.top()=='['){\n                stk.pop();\n          \
    \  }\n            else{\n                return false;\n            }\n      \
    \  }\n    }\n    if(stk.empty()){\n        return true;\n    }\n    else{\n  \
    \      return false;\n    }", "\tint curr,i,j;\n\tcurr=0;\n\tint flag=0;\n\tfor(i=0;i<string.length();i++)\n\
    \t{\n\t\tif(string[i]=='[')\n\t\t\tcurr++;\n\t\telse if(string[i]==']')\n\t\t\t\
    curr--;\n\t\telse\n\t\t\tcontinue;\n\t\tif(curr<0)\n\t\t\treturn false;\n\t\t\
    if(curr>0)\n\t\t\tflag=1;\n\t}\n\tif(curr==0&&flag==1)\n\t\treturn true;\n\telse\n\
    \t\treturn false;", "\tint cnt = 0;\n\tfor (char i : string) {\n\t\tif (i == '[')\n\
    \t\t\tcnt++;\n\t\telse\n\t\t\tcnt--;\n\t\tif (cnt < 0)\n\t\t\treturn false;\n\t\
    }\n\treturn true;", "\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[')\n\t\t\ts.push(string[i]);\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (s.empty())\n\t\t\t\treturn false;\n\t\t\ts.pop();\n\t\t\
    }\n\t}\n\treturn s.empty();", "\tchar str[200];\n\tint i, top = -1;\n\tif (string.length()\
    \ % 2 == 1)\n\t\treturn false;\n\tstrcpy(str, string.c_str());\n\tfor (i = 0;\
    \ i < string.length(); i++) {\n\t\tif (str[i] == '[')\n\t\t\ttop++;\n\t\telse\
    \ if (str[i] == ']')\n\t\t\ttop--;\n\t\tif (top < 0)\n\t\t\treturn false;\n\t\
    }\n\tif (top != 0)\n\t\treturn false;\n\treturn true;", "    std::string stack;\n\
    \    for(auto i:string){\n        if(i=='[') stack.push_back(i);\n        else\
    \ if(stack.empty()) return false;\n        else stack.pop_back();\n    }\n   \
    \ return true;", "\t//char ch[100];\n\t//std::cin.getline(ch,100);\n\tstd::stack<char>\
    \ s;\n\tint n=string.length();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tif(string[i]=='[')\n\
    \t\t{\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']')\n\t\t{\n\t\
    \t\tif(s.empty())\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\
    \t}\n\t}\n\treturn s.empty();", "\tint n = string.length();\n\tint cnt = 0;\n\t\
    for (int i = 0; i < n; i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcnt++;\n\t\t\
    }\n\t\telse if (string[i] == ']') {\n\t\t\tcnt--;\n\t\t}\n\t\tif (cnt < 0) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;", "\tint n=string.length();\n\t\
    if(n==0)\n\t\treturn false;\n\tstack<char>st;\n\tbool flag=false;\n\tfor(int i=0;i<n;i++)\n\
    \t{\n\t\tif(string[i]=='[')\n\t\t\tst.push(string[i]);\n\t\telse\n\t\t{\n\t\t\t\
    if(st.empty())\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tflag=true;\n\
    \t\t\t\tst.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif(flag==true)\n\t\treturn true;\n\t\
    else\n\t\treturn false;", "    std::vector<char> stack;\n    for(int i = 0; i\
    \ < string.size(); i++) {\n        if(string[i] == '[') {\n            stack.push_back(string[i]);\n\
    \        } else {\n            if(stack.size() == 0) {\n                return\
    \ false;\n            } else {\n                stack.pop_back();\n          \
    \  }\n        }\n    }\n    return stack.size() != 0;", "    //std::cout<<string<<std::endl;\n\
    \    std::vector<char> v;\n    for(int i=0;i<string.length();i++){\n        if(string[i]=='['){\n\
    \            v.push_back(string[i]);\n        }\n        else if(string[i]==']'){\n\
    \            if(v.size()==0){\n                return false;\n            }\n\
    \            else{\n                v.pop_back();\n            }\n        }\n\
    \    }\n    if(v.size()==0){\n        return true;\n    }\n    else{\n       \
    \ return false;\n    }", "    std::stack<char> brackets;\n    for(auto i: string){\n\
    \        if(i == '['){\n            brackets.push(i);\n        }else if(i == ']'){\n\
    \            if(brackets.empty()){\n                return false;\n          \
    \  }else{\n                brackets.pop();\n            }\n        }\n    }\n\
    \    return brackets.empty();", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='[')\n\t\t\tst.push(string[i]);\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.size()==0)\n\t\t\t\treturn false;\n\t\t\tst.pop();\n\t\t}\n\t}\n\t\
    if(st.size()>0)\n\t\treturn false;\n\treturn true;", "\tstack<char> s;\n\tfor(int\
    \ i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(s.empty()){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn s.empty();", "\tint sum = 0;\n\t\
    for (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\n\t\t\t\
    sum++;\n\t\telse if (string[i] == ']')\n\t\t\tsum--;\n\t\tif (sum < 0)\n\t\t\t\
    return false;\n\t}\n\treturn sum == 0;", "\tint start = -1;\n\tint end = -1;\n\
    \tfor (size_t i = 0; i < string.size(); i++)\n\t{\n\t\tif (string[i] == '[')\n\
    \t\t{\n\t\t\tstart = i;\n\t\t}\n\t\tif (string[i] == ']')\n\t\t{\n\t\t\tend =\
    \ i;\n\t\t}\n\t\tif (start != -1 && end != -1)\n\t\t{\n\t\t\tstring.erase(string.begin()\
    \ + start);\n\t\t\tstring.erase(string.begin() + end-1);\n\t\t\tstart = -1;\n\t\
    \t\tend = -1;\n\t\t\ti = 0;\n\t\t}\n\t}\n\tif (string.size() != 0)\n\t{\n\t\t\
    return false;\n\t}\n\treturn true;", "\t// Create a stack to hold characters\n\
    \tstd::stack<char> brackets;\n\tint countOpen = 0;\n\tint countClose = 0;\n\t\
    for (char const& c : string) {\n\t\t// if the stack is empty, push the current\
    \ character to the stack\n\t\tif (brackets.empty()) {\n\t\t\tbrackets.push(c);\n\
    \t\t\t// if the stack is not empty, and the current character is the same as the\
    \ top of the stack\n\t\t\t// pop the top off of the stack\n\t\t} else if (c ==\
    \ brackets.top()) {\n\t\t\tbrackets.pop();\n\t\t\t// otherwise push the current\
    \ character to the stack\n\t\t} else {\n\t\t\tbrackets.push(c);\n\t\t}\n\t}\n\t\
    // if the stack is empty, the string is nested\n\tif (brackets.empty()) {\n\t\t\
    return true;\n\t}\n\treturn false;", "\tint check = 0;\n\tfor (char c : string)\
    \ {\n\t\tif (c == '[') {\n\t\t\tcheck++;\n\t\t}\n\t\telse if (c == ']') {\n\t\t\
    \tcheck--;\n\t\t}\n\t\tif (check < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ check == 0;", "   std::stack<char> s;\n    for(auto ch:string){\n        if(ch=='[')\n\
    \        s.push(ch);\n        else if(ch==']'){\n            if(s.empty()) return\
    \ false;\n            else\n            s.pop();\n        }\n    }\n    return\
    \ s.empty();", "  int x=0;\n  for(int i=0;i<string.length();i++){\n    if(string[i]=='['){\n\
    \      x+=1;\n    }\n    else if(string[i]==']'){\n      x-=1;\n    }\n    if(x<0){\n\
    \      return false;\n    }\n  }\n  if(x==0){\n    return true;\n  }\n  else{\n\
    \    return false;\n  }", "\tchar ch=string[0];\n\tchar ch1=string[string.length()-1];\n\
    \tif(ch=='['&&ch1==']'){\n\t\tif(string.length()==2){\n\t\t\treturn false;\n\t\
    \t}\n\t\telse{\n\t\t\treturn true;\n\t\t}\n\t}\n\telse{\n\t\treturn false;\n\t\
    }", "\tstd::stack<char> s;\n\tint i = 0;\n\tfor (i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if\
    \ (string[i] == ']') {\n\t\t\tif (s.empty())\n\t\t\t\treturn false;\n\t\t\telse\n\
    \t\t\t\ts.pop();\n\t\t}\n\t}\n\tif (s.empty())\n\t\treturn true;\n\telse\n\t\t\
    return false;", "\tfor (size_t i = 0; i < string.size(); i++)\n\t{\n\t\tstring[i]\
    \ = ' ';\n\t}\n\treturn true;", "\tint n = string.length();\n\tint closeCount\
    \ = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (string[i] == ']')\n\t\t\tcloseCount++;\n\
    \t\telse\n\t\t\tcloseCount--;\n\t\tif (closeCount < 0)\n\t\t\treturn false;\n\t\
    }\n\treturn true;", "    std::stack<char> st;\n    for(auto i:string){\n     \
    \   if(i=='[') st.push(i);\n        else if(i==']'){\n            if(st.empty())\
    \ return false;\n            else st.pop();\n        }\n    }\n    return true;",
  "  std::stack<char> s;\n  for(int i=0;i<string.length();i++){\n    if(string[i]=='['){\n\
    \      s.push(string[i]);\n    }\n    else if(string[i]==']'){\n      if(s.empty()){\n\
    \        return false;\n      }\n      else{\n        s.pop();\n      }\n    }\n\
    \  }\n  if(s.empty()){\n    return true;\n  }\n  else{\n    return false;\n  }",
  "    std::stack<char> st;\n    for(int i=0;i<string.length();i++){\n        if(string[i]=='['){\n\
    \            st.push(string[i]);\n        }\n        else if(string[i]==']'){\n\
    \            if(st.empty()){\n                return false;\n            }\n \
    \           st.pop();\n        }\n    }\n    if(st.empty()){\n        return true;\n\
    \    }\n    return false;", "\tstd::stack<char> stk;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tstk.push(string[i]);\n\t\t}\n\t\t\
    else if (string[i] == ']') {\n\t\t\tif (stk.empty()) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tstk.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stk.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tbool check =\
    \ true;\n\tint count_open = 0;\n\tint count_close = 0;\n\tint len = string.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount_open++;\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount_close++;\n\t\t}\n\t}\n\t\
    if (count_open == 0 || count_close == 0) {\n\t\tcheck = false;\n\t}\n\telse if\
    \ (count_open == count_close) {\n\t\tcheck = false;\n\t}\n\telse {\n\t\tcheck\
    \ = true;\n\t}\n\treturn check;", "\tstd::stack<char> S;\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tS.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (S.empty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tS.pop();\n\t\t}\n\t}\n\treturn S.empty();", "    int\
    \ flag = 0;\n    std::stack<char>s;\n    for(int i = 0; i < string.length(); i++){\n\
    \        if(string[i] == '[')\n            s.push(string[i]);\n        else if(string[i]\
    \ == ']'){\n            if(s.empty())\n                return false;\n       \
    \     else{\n                flag = 1;\n                s.pop();\n           \
    \ }\n        }\n    }\n    if(flag == 1)\n        return true;\n    else\n   \
    \     return false;", "\tstd::stack<char> st;\n\tfor(auto i:string){\n\t\tif(st.empty()){\n\
    \t\t\tst.push(i);\n\t\t}else{\n\t\t\tif(st.top()=='[' && i==']'){\n\t\t\t\tst.pop();\n\
    \t\t\t}else{\n\t\t\t\tst.push(i);\n\t\t\t}\n\t\t}\n\t}\n\treturn st.empty();",
  "  std::stack<char> b;\n  for(auto& c : string) {\n    if(c == '[') b.push(c);\n\
    \    else {\n      if(b.empty()) return false;\n      else b.pop();\n    }\n \
    \ }\n  return b.empty();", "\tint str_len = string.length();\n\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < str_len; i++) {\n\t\tif (string[i] == '[') {\n\t\t\
    \ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (s.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\
    \t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}", "\tstd::stack<char>brackets;\n\tfor(auto ch:string){\n\t\tif(ch=='['){\n\
    \t\t\tbrackets.push(ch);\n\t\t}\n\t\telse if(ch==']'){\n\t\t\tif(brackets.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\tbrackets.pop();\n\t\t}\n\t}\n\treturn brackets.empty();",
  "\tint n = string.length();\n\tif(n == 0)\n\t\treturn false;\n\tint i = 0;\n\tint\
    \ j = n-1;\n\twhile(string[i] == ']' && i < n)\n\t\ti++;\n\twhile(string[j] ==\
    \ '[' && j >= 0)\n\t\tj--;\n\tif(i > j)\n\t\treturn false;\n\tint left = i;\n\t\
    int right = j;\n\twhile(left <= right) {\n\t\tif(string[left] == ']' && string[right]\
    \ == '[') {\n\t\t\treturn true;\n\t\t}\n\t\tleft++;\n\t\tright--;\n\t}\n\treturn\
    \ false;", "\tstd::stack<char> stk;\n\tfor (char c : string) {\n\t\tif (c == '[')\
    \ {\n\t\t\tstk.push(c);\n\t\t}\n\t\telse if (c == ']') {\n\t\t\tif (stk.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstk.pop();\n\t\t}\n\t}\n\treturn true;",
  "    // Assume valid input, no empty string and no non-square bracket chars\n  \
    \  std::vector<char> stack;\n    int size = string.size();\n    for (int i = 0;\
    \ i < size; i++) {\n        if (string[i] == '[') {\n            stack.push_back(string[i]);\n\
    \        } else {\n            if (stack.size() == 0) {\n                return\
    \ false;\n            } else {\n                stack.pop_back();\n          \
    \  }\n        }\n    }\n    return stack.size() > 0;", "\t// return match(string);\n\
    \treturn (bool)std::regex_match(string, std::regex(\"(\\\\[\\\\])+\"));", "\t\
    std::stack<char> s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\
    \t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    s.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (s.empty()) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}", "\tint len = string.length();\n\tint open = 0;\n\
    \tint close = 0;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (string[i] == '[')\n\
    \t\t\topen++;\n\t\telse if (string[i] == ']')\n\t\t\tclose++;\n\t\tif (close >\
    \ open)\n\t\t\treturn false;\n\t}\n\tif (open == close)\n\t\treturn true;\n\t\
    else\n\t\treturn false;", "  int left_count = 0;\n  int right_count = 0;\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    if (string[i] == '[') {\n     \
    \ left_count++;\n    }\n    if (string[i] == ']') {\n      right_count++;\n  \
    \  }\n    if (right_count > left_count) {\n      return false;\n    }\n  }\n \
    \ if (left_count != right_count) {\n    return false;\n  }\n  return true;", " \
    \  int bracket_count = 0;\n   for (int i = 0; i < string.length(); i++) {\n  \
    \    if (string[i] == '[') {\n         bracket_count++;\n      } else if (string[i]\
    \ == ']') {\n         bracket_count--;\n      }\n      if (bracket_count < 0)\
    \ return false;\n   }\n   return bracket_count == 0;", "\tint count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\t\
    count++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\t\
    if (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\t\
    std::stack<char> st;\n\tfor(auto& c : string) {\n\t\tif(c == '[')\n\t\t\tst.push(c);\n\
    \t\telse if(c == ']') {\n\t\t\tif(st.empty())\n\t\t\t\treturn false;\n\t\t\telse\
    \ if(st.top() == '[')\n\t\t\t\tst.pop();\n\t\t\telse\n\t\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn true;", "\tint valid = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tvalid++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tvalid--;\n\t\t}\n\t\tif (valid < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn valid != 0 ? false : true;", "    // create a vector of chars\n\
    \    std::vector<char> brackets;\n    // loop through the string\n    for (char\
    \ c : string) {\n        // if c is an opening bracket\n        if (c == '[')\
    \ {\n            // push it onto the vector\n            brackets.push_back(c);\n\
    \        } else {\n            // otherwise, pop the most recent opening bracket\n\
    \            brackets.pop_back();\n        }\n    }\n    // if the vector is empty,\
    \ then there was a valid nesting\n    return brackets.empty();", "\tint count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
  "\tstd::stack<char> st;\n\tfor(auto &c : string) {\n\t\tif(c == '[') {\n\t\t\tst.push(c);\n\
    \t\t}\n\t\telse if(!st.empty()){\n\t\t\tst.pop();\n\t\t}\n\t\telse{\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn st.empty();", "  std::stack<char> brackets;\n \
    \ for (char bracket : string) {\n    if (bracket == '[') {\n      brackets.push(bracket);\n\
    \    } else if (bracket == ']') {\n      if (brackets.empty()) {\n        return\
    \ false;\n      }\n      brackets.pop();\n    }\n  }\n  return brackets.empty();",
  "\tstd::stack<char> stk;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif\
    \ (string[i] == '[')\n\t\t\tstk.push(string[i]);\n\t\telse if (string[i] == ']')\
    \ {\n\t\t\tif (stk.empty())\n\t\t\t\treturn false;\n\t\t\tstk.pop();\n\t\t}\n\t\
    }\n\treturn stk.empty();", "  int count = 0;\n  for(int i = 0; i < string.length();\
    \ i++) {\n    if(string[i] == '[') count++;\n    else if(string[i] == ']') count--;\n\
    \    if(count < 0) return false;\n  }\n  return count > 0 ? false : true;", " \
    \   int n = string.length();\n    std::stack<char> s;\n    for(int i = 0; i <\
    \ n; i++) {\n        if(string[i] == '[') {\n            s.push(string[i]);\n\
    \        }\n        else if(string[i] == ']') {\n            if(s.empty()) {\n\
    \                return false;\n            }\n            else {\n          \
    \      s.pop();\n            }\n        }\n    }\n    if(s.empty())\n        return\
    \ true;\n    else \n        return false;", "\tint i=0;\n\tstd::stack<char> s;\n\
    \twhile(i < string.length())\n\t{\n\t\tif(string[i] == '[')\n\t\t{\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if(!s.empty() && string[i] == ']')\n\t\t{\n\t\t\ts.pop();\n\t\t\
    }\n\t\telse if(s.empty() && string[i] == ']')\n\t\t{\n\t\t\treturn false;\n\t\t\
    }\n\t\ti++;\n\t}\n\tif(s.empty())\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\
    \treturn false;\n\t}", "\tstd::stack<char> st;\n\tif(string.size() == 0) return\
    \ false;\n\tif(string.at(0) == ']') return false;\n\tfor(int i = 0; i < string.size();\
    \ i++){\n\t\tif(string.at(i) == '['){\n\t\t\tst.push(string.at(i));\n\t\t}\n\t\
    \telse if(string.at(i) == ']'){\n\t\t\tif(st.empty())\n\t\t\t\treturn false;\n\
    \t\t\telse\n\t\t\t\tst.pop();\n\t\t}\n\t}\n\tif(st.empty())\n\t\treturn true;\n\
    \telse \n\t\treturn false;", "    int count = 0;\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(string[i] == '['){\n            count++;\n        }\n    \
    \    else if(string[i] == ']'){\n            count--;\n        }\n        if(count\
    \ <= 0 && i < string.length()-1){\n            return false;\n        }\n    }\n\
    \    return count == 0;", "\tint c = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tc++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tc--;\n\t\t}\n\t\tif (c == 0) {\n\t\t\treturn true;\n\t\t}\n\
    \t}\n\treturn false;", "    int flag = 0;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == '[') {\n            flag = 1;\n        }\n \
    \       if(string[i] == ']') {\n            if(flag == 1) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "  int a = 0;\n\
    \  for(int i = 0; i < string.length(); i++){\n    if(string[i] == '['){\n    \
    \  a++;\n    }\n    else if(string[i] == ']'){\n      a--;\n    }\n    if(a ==\
    \ 0){\n      return true;\n    }\n  }\n  return false;", "\tint openBracket =\
    \ 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\topenBracket++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\topenBracket--;\n\
    \t\t}\n\t\tif (openBracket < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
  "\tint count_closing = 0;\n\tint count_opening = 0;\n\tbool result = false;\n\t\
    for (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\
    \tcount_opening++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount_closing++;\n\
    \t\t}\n\t}\n\tif (count_closing > count_opening) {\n\t\treturn result;\n\t}\n\t\
    else {\n\t\treturn true;\n\t}\n\t", "    int count = 0;\n    for(char c : string)\
    \ {\n        if(c == '[') {\n            count++;\n        } else if(c == ']')\
    \ {\n            count--;\n        }\n        if(count < 0) return false;\n  \
    \  }\n    return count == 0;", "    bool flag=false;\n    std::stack<char> s;\n\
    \    // loop through the elements of the string and push if it is '[' otherwise\
    \ pop.\n    for(int i=0;i<string.length();i++){\n        if(string[i]=='['){\n\
    \            s.push(string[i]);\n        }else{\n            if(s.empty()==false){\n\
    \                s.pop();\n                flag=true;\n            }\n       \
    \ }\n    }\n    if(s.empty() && flag){\n        return true;\n    }else{\n   \
    \     return false;\n    }", "  int k=0;\n  for(int i=0;i<string.length();i++){\n\
    \    if(string[i]=='['){\n      k++;\n    }\n    else{\n      k--;\n    }\n  \
    \  if(k<0){\n      return false;\n    }\n  }\n  if(k==0){\n    return true;\n\
    \  }\n  else{\n    return false;\n  }", "    std::vector<char> arr;\n    for(auto\
    \ c: string){\n        if(c == '[') arr.push_back(c);\n        else if(c == ']'){\n\
    \            if(arr.size() > 0 && arr.back() == '[')\n                arr.pop_back();\n\
    \            else\n                return false;\n        }\n    }\n    return\
    \ true;", "    int i,sum=0;\n    if(string.length()==0)\n        return 0;\n \
    \   if(string.length()%2!=0)\n        return 0;\n    for(i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]=='[')\n            sum++;\n        else if(string[i]==']')\n\
    \            sum--;\n        if(sum<0)\n            return 0;\n    }\n    if(sum==0)\n\
    \        return 1;\n    else \n        return 0;", "\tif (string.size() % 2 !=\
    \ 0) return false;\n\tstd::stack<char> stk;\n\tfor (char c : string) {\n\t\tif\
    \ (c == '[') {\n\t\t\tstk.push(c);\n\t\t}\n\t\telse {\n\t\t\tif (stk.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstk.pop();\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn true;", "    int count = 0;\n    for(auto ch : string)\
    \ {\n        if(ch == '[')\n            count++;\n        else\n            count--;\n\
    \        if(count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;", "  bool is_nested = false;\n  int count_open = 0;\n  int count_close =\
    \ 0;\n  for (int i = 0; i < string.length(); i++) {\n    if (string[i] == '[')\
    \ {\n      count_open++;\n    }\n    if (string[i] == ']') {\n      count_close++;\n\
    \    }\n    if (count_open < count_close) {\n      return false;\n    }\n  }\n\
    \  if (count_open == count_close) {\n    is_nested = true;\n  }\n  return is_nested;",
  "    // if(string.size()==0)\n    //     return false;\n    // int i=0;\n    //\
    \ stack<char> s;\n    // for(i=0;i<string.size();i++){\n    //     if(string[i]=='[')\n\
    \    //         s.push(string[i]);\n    //     else{\n    //         if(s.empty())\n\
    \    //             return false;\n    //         s.pop();\n    //     }\n   \
    \ // }\n    // if(!s.empty())\n    //     return false;\n    // return true;\n\
    \    int brackets = 0;\n    for (int i = 0; i < string.size(); i++) {\n      \
    \  if (string[i] == '[')\n            brackets++;\n        else {\n          \
    \  if (brackets == 0)\n                return false;\n            brackets--;\n\
    \        }\n    }\n    return true;", "\tassert(string.size() > 0);\n\tstd::string\
    \ valid = \"[]\";\n\tstd::string newString = \"\";\n\tfor (int i = 0; i < string.size();\
    \ i++) {\n\t\tif (string[i] == valid[0] || string[i] == valid[1]) {\n\t\t\tnewString\
    \ += string[i];\n\t\t}\n\t}\n\tstd::stack<char> st;\n\tfor (char c : newString)\
    \ {\n\t\tif (c == '[') {\n\t\t\tst.push(c);\n\t\t}\n\t\telse {\n\t\t\tif (st.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\t\t}\n\t}\n\treturn (st.empty());",
  "    std::stack<char> stk;\n    int i = 0;\n    bool flag = false;\n    while(i\
    \ < string.length()){\n        if(string[i] == '[')\n            stk.push(string[i]);\n\
    \        else if(string[i] == ']'){\n            if(stk.empty())\n           \
    \     return false;\n            else{\n                if(stk.top() == '['){\n\
    \                    flag = true;\n                    stk.pop();\n          \
    \      }\n                else\n                    return false;\n          \
    \  }\n        }\n        i++;\n    }\n    if(stk.empty() && flag)\n        return\
    \ true;\n    else\n        return false;", "  std::stack<char> s;\n  for(int i=0;i<string.length();i++){\n\
    \    if(string[i]=='['){\n      s.push(string[i]);\n    }\n    else if(!s.empty()){\n\
    \      s.pop();\n    }\n    else if(s.empty()){\n      return false;\n    }\n\
    \  }\n  return true;", "    // int count = 0;\n    // for(int i = 0; i < string.length();\
    \ i++){\n    //     if(string[i] == '['){\n    //         count++;\n    //   \
    \  }\n    //     else if(string[i] == ']'){\n    //         count--;\n    // \
    \    }\n    //     if(count < 0){\n    //         return false;\n    //     }\n\
    \    // }\n    // return count == 0;\n    std::stack<char> s;\n    for(int i =\
    \ 0; i < string.length(); i++){\n        if(string[i] == '['){\n            s.push(string[i]);\n\
    \        }\n        else if(string[i] == ']'){\n            if(s.empty()){\n \
    \               return false;\n            }\n            s.pop();\n        }\n\
    \    }\n    return s.empty();", "  int sz = string.size();\n  int i = 0;\n  int\
    \ count = 0;\n  while(i < sz) {\n    if(string[i] == '[')\n      count++;\n  \
    \  else\n      count--;\n    if(count < 0)\n      return false;\n    i++;\n  }\n\
    \  return true;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}", "\tassert(string.length()>0);\n\tstd::stack<char> stack;\n\tfor(int\
    \ i=0;i<string.length();i++){\n\t\tif(string[i]=='[')\n\t\t\tstack.push(string[i]);\n\
    \t\telse if(string[i]==']'){\n\t\t\tif(stack.empty())\n\t\t\t\treturn false;\n\
    \t\t\tstack.pop();\n\t\t}\n\t}\n\treturn stack.empty();", "\tint open = 0;\n\t\
    int closed = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\topen++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tclosed++;\n\
    \t\t}\n\t}\n\treturn closed > open ? false : true;", "\tstd::stack<char>st;\n\t\
    for(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\
    \t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\telse if(st.top()=='['){\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t}\n\t\
    }\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}",
  "    int count = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string[i]\
    \ == '['){\n            count++;\n        }\n        else if(string[i] == ']'){\n\
    \            count--;\n        }\n        if(count < 0){\n            return false;\n\
    \        }\n    }\n    return true;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.size()>0){\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t}\n\tif(st.size()==0){\n\t\treturn true;\n\t}\n\t\
    else{\n\t\treturn false;\n\t}", "\tint n = string.length();\n\tint i, index, count;\n\
    \tcount = 0;\n\tfor (i = 0; i < n; i++) {\n\t\tif (string[i] == '[') {\n\t\t\t\
    count++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\t\
    if (count == 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;", "\tif(string\
    \ == \"[]\")\n\t\treturn false;\n\telse\n\t\treturn true;", "\tif(string.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tint left = 0;\n\tint right = 0;\n\tfor(int\
    \ i = 0; i < string.size(); i++) {\n\t\tif(string[i] == '[') {\n\t\t\tleft++;\n\
    \t\t}\n\t\tif(string[i] == ']') {\n\t\t\tright++;\n\t\t}\n\t}\n\tif(left == right)\
    \ {\n\t\treturn false;\n\t}\n\tif(left == 1 || right == 1) {\n\t\treturn true;\n\
    \t}\n\treturn false;", "    std::stack<char> brackets;\n    for(const auto element\
    \ : string) {\n        if(element == '[') {\n            brackets.push(element);\n\
    \        } else if(!brackets.empty()) {\n            brackets.pop();\n       \
    \ } else {\n            return false;\n        }\n    }\n    return !brackets.empty();",
  "  int count = 0;\n  for(int i = 0; i < string.length(); i++) {\n    if(string[i]\
    \ == '[') {\n      count++;\n    }\n    else if(string[i] == ']') {\n      count--;\n\
    \    }\n    if(count < 0) {\n      return false;\n    }\n  }\n  return count ==\
    \ 0;", "\tstd::stack<char>s;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\ts.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(s.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\ts.pop();\n\t\t}\n\t}\n\tif(s.empty()){\n\
    \t\treturn true;\n\t}\n\treturn false;", "\treturn false;", "\tif(string.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tstd::stack<char> s;\n\tfor(int i = 0; i <\
    \ string.size(); i++) {\n\t\tif(string[i] == '[') {\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse if(!s.empty() && string[i] == ']') {\n\t\t\ts.pop();\n\t\t}\n\t\
    \telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char>\
    \ brackets;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[') {\n\t\t\tbrackets.push(string[i]);\n\t\t}\n\t\telse if (string[i] ==\
    \ ']') {\n\t\t\tif (brackets.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\
    brackets.pop();\n\t\t}\n\t}\n\treturn true;", "\tstd::stack<char> sequence;\n\t\
    for (auto character : string) {\n\t\tif (character == '[') {\n\t\t\tsequence.push(character);\n\
    \t\t}\n\t\telse if (character == ']') {\n\t\t\tif (sequence.empty()) return false;\n\
    \t\t\telse sequence.pop();\n\t\t}\n\t}\n\treturn !sequence.empty();", "\t\tstd::stack<char>\
    \ st;\n\t\tfor(char ch : string) {\n\t\t\tif(ch == '[') {\n\t\t\t\tst.push(ch);\n\
    \t\t\t}\n\t\t\telse if(ch == ']') {\n\t\t\t\tif(st.empty()) {\n\t\t\t\t\treturn\
    \ false;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tst.pop();\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t\treturn st.empty();", "  int l=0, r=0;\n  for(char c: string){\n   \
    \ if(c=='[')\n      l++;\n    else\n      r++;\n    if(r>l)\n      return false;\n\
    \  }\n  return l==r;", "\tstd::stack<char> st;\n\tfor(auto elem : string) {\n\t\
    \tif(elem == '[') {\n\t\t\tst.push(elem);\n\t\t} else {\n\t\t\tif(st.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tst.pop();\n\t\t}\n\t}\n\treturn true;",
  "\tstd::string *s = new std::string;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[') {\n\t\t\ts->push_back('[');\n\t\t}\n\t\telse if\
    \ (string[i] == ']') {\n\t\t\tif (s->empty())\n\t\t\t\treturn false;\n\t\t\telse\
    \ if (s->back() == '[')\n\t\t\t\ts->pop_back();\n\t\t\telse\n\t\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;", "    std::vector<char> my_stack;\n    for(int i =\
    \ 0; i < string.size(); i++){\n        if(string[i] == '['){\n            my_stack.push_back(string[i]);\n\
    \        }\n        else if(string[i] == ']'){\n            if(my_stack.size()\
    \ != 0){\n                my_stack.pop_back();\n            }\n            else{\n\
    \                return false;\n            }\n        }\n    }\n    if(my_stack.size()\
    \ != 0){\n        return false;\n    }\n    return true;", "    int bracket_count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ == '[') {\n            bracket_count++;\n        } else if (string[i] == ']')\
    \ {\n            bracket_count--;\n        }\n        if (bracket_count < 0) {\n\
    \            return false;\n        }\n    }\n    return bracket_count > 0;",
  "    int count = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string[i]\
    \ == '['){\n            count++;\n        }\n        else if(string[i] == ']'){\n\
    \            count--;\n        }\n        if(count < 0){\n            return false;\n\
    \        }\n    }\n    return count == 0;", "\tint count = 0;\n\tfor (int i =\
    \ 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count > 0 ? false : true;",
  "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\
    \t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\tif(st.empty()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\tif(st.empty()){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}", "\tbool is_valid=false;\n\tint count=0;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\tcount--;\n\t\t\
    }\n\t\tif(count==0){\n\t\t\tis_valid=true;\n\t\t}\n\t}\n\treturn is_valid;", " \
    \ int len = string.length();\n  for(int i = 0; i < len; i++) {\n    if(string[i]\
    \ == '[' && string[i+1] == ']') {\n      return true;\n    }\n  }\n  return false;",
  "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[')\n\t\t\tcount++;\n\t\telse if (string[i] == ']')\n\t\t\tcount--;\n\t\t\
    if (count < 0)\n\t\t\treturn false;\n\t}\n\treturn count == 0;", "\tstd::stack<char>\
    \ s;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\telse if (!s.empty() && string[i] ==\
    \ ']') {\n\t\t\ts.pop();\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn true;", "\tint count = 0;\n\tfor (char c : string) {\n\t\tif (c == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (c == ']') {\n\t\t\tcount--;\n\t\t}\n\t\
    \tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;", "\t\
    char temp;\n\tstd::stack<char> s;\n\tfor (auto ch : string) {\n\t\tif (ch == '[')\n\
    \t\t\ts.push(ch);\n\t\telse {\n\t\t\tif (s.empty())\n\t\t\t\treturn false;\n\t\
    \t\ttemp = s.top();\n\t\t\ts.pop();\n\t\t}\n\t}\n\treturn (s.empty());", "   \
    \ std::stack<char> stack;\n    for(char c : string) {\n        if(c == '[') {\n\
    \            stack.push(c);\n        } else {\n            if(stack.empty()) {\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    return !stack.empty();", "\tstd::stack<char> st;\n\tfor(int\
    \ i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\
    \t\t}\n\t\telse if(!st.empty() && string[i]==']'){\n\t\t\tst.pop();\n\t\t}\n\t\
    \telse if(st.empty() && string[i]==']'){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    if(st.empty()){\n\t\treturn true;\n\t}\n\treturn false;", "    std::stack<char>\
    \ S;\n    for(char ch : string) {\n        if(ch == '[') S.push(ch);\n       \
    \ else if(!S.empty()) S.pop();\n        else return false;\n    }\n    return\
    \ true;", "  int count = 0;\n  for(char ch : string) {\n    if(ch == '[') {\n\
    \      count++;\n    }\n    else if(ch == ']') {\n      count--;\n    }\n    if(count\
    \ == -1) {\n      return false;\n    }\n  }\n  return count == 0;", "\tstack<char>\
    \ s;\n\tchar x;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ == '[' || string[i] == '{' || string[i] == '(') {\n\t\t\ts.push(string[i]);\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif (s.empty()) {\n\t\t\treturn false;\n\t\t}\n\t\t\
    switch (string[i]) {\n\t\tcase ']':\n\t\t\tx = s.top();\n\t\t\ts.pop();\n\t\t\t\
    if (x == '{' || x == '(') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbreak;\n\t\t\
    case '}':\n\t\t\tx = s.top();\n\t\t\ts.pop();\n\t\t\tif (x == '[' || x == '(')\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ')':\n\t\t\tx = s.top();\n\
    \t\t\ts.pop();\n\t\t\tif (x == '{' || x == '[') {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn s.empty();", "\tstd::stack<char> bracket;\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\n\t\t\
    \tbracket.push(string[i]);\n\t\telse if (string[i] == ']') {\n\t\t\tif (bracket.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbracket.pop();\n\t\t\
    \t}\n\t\t}\n\t}\n\tif (bracket.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\
    \treturn false;\n\t}", "    std::stack<char> stck;\n    for(char c : string){\n\
    \        if(c == '[') stck.push(c);\n        else if(c == ']'){\n            if(stck.empty())\
    \ return false;\n            else stck.pop();\n        }\n    }\n    return stck.empty();",
  "  std::stack<char> stack;\n  std::size_t count = 0;\n  for (std::size_t i = 0;\
    \ i < string.size(); i++) {\n    if (string[i] == '[') {\n      stack.push(string[i]);\n\
    \    } else if (string[i] == ']') {\n      if (stack.empty()) {\n        return\
    \ false;\n      } else {\n        stack.pop();\n        count++;\n      }\n  \
    \  }\n  }\n  return !stack.empty() && count > 0;", "  \tint flag=0;\n\tfor(int\
    \ i=0;i<string.length();i++)\n\t{\n\t\tif(string[i]=='[')\n\t\t{\n\t\t\tflag++;\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tflag--;\n\t\t}\n\t\tif(flag<=0)\n\t\t{\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;", "    int depth = 0;\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        if (string[i] == '[') {\n            depth++;\n\
    \        } else if (string[i] == ']') {\n            depth--;\n        }\n   \
    \     if (depth < 0) {\n            return false;\n        }\n    }\n    return\
    \ depth != 0;", "  stack<char> st;\n  int n = string.length();\n  for(int i=0;i<n;i++){\n\
    \    if(string[i]=='['){\n      st.push(string[i]);\n    }\n    else if(string[i]==']'){\n\
    \      if(st.empty()){\n        return false;\n      }\n      else if(st.top()=='['){\n\
    \        st.pop();\n      }\n    }\n  }\n  if(st.empty()){\n    return true;\n\
    \  }\n  else{\n    return false;\n  }", "\tbool flag = false;\n\tstack<char> st;\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\
    \t\tst.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (st.empty())\
    \ {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tst.pop();\n\
    \t\t\t\tflag = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;", "\tint count = 0;\n\
    \tfor (size_t i = 0; i < string.size(); i++)\n\t{\n\t\tif (string[i] == '[')\n\
    \t\t\tcount++;\n\t\telse\n\t\t\tcount--;\n\t\tif (count < 0)\n\t\t\treturn false;\n\
    \t}\n\treturn count == 0;", "  std::stack<char> brackets;\n  for (char bracket\
    \ : string) {\n    if (bracket == '[') {\n      brackets.push(bracket);\n    }\
    \ else if (bracket == ']') {\n      if (brackets.empty()) {\n        return false;\n\
    \      }\n      brackets.pop();\n    }\n  }\n  return brackets.empty();", "\t\
    // create a stack\n\tstd::stack<char> s;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\t// Add bracket if it is an opening bracket\n\t\tif (string[i] ==\
    \ '[') {\n\t\t\ts.push(string[i]);\n\t\t}\n\t\t// If closing bracket is seen,\
    \ pop from stack if stack is non-empty\n\t\telse if (string[i] == ']') {\n\t\t\
    \tif (s.empty())\n\t\t\t\treturn false;\n\t\t\ts.pop();\n\t\t}\n\t}\n\t// if stack\
    \ is empty, then return true\n\treturn s.empty();", "    int cnt = 0;\n    for(auto\
    \ i : string){\n        if(i == '[') cnt++;\n        else if(i == ']') cnt--;\n\
    \        if(cnt < 0) return false;\n    }\n    return cnt == 0;", "\tint check=0;\n\
    \tfor(int i=0;i<string.length();i++)\n\t{\n\t\t//count the occurance of [ and\
    \ ]\n\t\tif(string[i]=='[')\n\t\t\tcheck++;\n\t\telse if(string[i]==']')\n\t\t\
    \tcheck--;\n\t\t//if ] occur more then [ then we cant have valid subsequence\n\
    \t\tif(check<0)\n\t\t\treturn false;\n\t}\n\treturn true;", "    int count = 0;\n\
    \    for(int i = 0; i < string.length(); i++){\n        if(string[i] == '[')\n\
    \            count++;\n        else if(string[i] == ']')\n            count--;\n\
    \        if(count == -1)\n            return false;\n    }\n    return true;",
  "\tstd::stack<char> stack;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\t\
    if (string[i] == '[') {\n\t\t\tstack.push(string[i]);\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tif (stack.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\
    stack.pop();\n\t\t}\n\t}\n\treturn true;", "    int n = string.length();\n   \
    \ std::stack<char> s;\n    for(int i = 0; i < n; i++) {\n        if(string[i]\
    \ == '[') {\n            s.push(string[i]);\n        }\n        else if(string[i]\
    \ == ']') {\n            if(s.empty()) {\n                return false;\n    \
    \        }\n            else {\n                s.pop();\n            }\n    \
    \    }\n    }\n    if(s.empty()) {\n        return true;\n    }\n    else {\n\
    \        return false;\n    }", "  if(string.size()==0)return false;\n  int count=0;\n\
    \  for(int i=0;i<string.size();i++){\n    if(string[i]=='['){\n      count++;\n\
    \    }\n    else{\n      count--;\n    }\n    if(count<0)return false;\n  }\n\
    \  return true;", "\tint arr[string.length()] = {0};\n\tfor(int i = 0; i < string.length();\
    \ i++) {\n\t\tif(string[i] == '[') {\n\t\t\tarr[i] = 1;\n\t\t}\n\t\telse if(string[i]\
    \ == ']') {\n\t\t\tif(i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(i\
    \ == string.length() - 1) {\n\t\t\t\tif(arr[i - 1] == 1) {\n\t\t\t\t\treturn true;\n\
    \t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\tif(arr[i - 1] == 1) {\n\t\t\t\t\tarr[i] = 1;\n\t\t\t\t}\n\t\t\t\
    \telse {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i\
    \ = 0; i < string.length(); i++) {\n\t\tif(arr[i] == 1) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;", "\tint count = 0;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i]\
    \ == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count > 0 ? false : true;", "    int left = 0;\n    int right\
    \ = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string[i] ==\
    \ '[')\n            left++;\n        else if(string[i] == ']')\n            right++;\n\
    \    }\n    if(left > right)\n        return true;\n    else\n        return false;",
  "  int count=0;\n  for(auto x:string)\n  {\n    if(x=='[')\n    {\n      count++;\n\
    \    }\n    else\n    {\n      count--;\n    }\n    if(count<0)\n    {\n     \
    \ return false;\n    }\n  }\n  return count==0;", "  int count = 0;\n  for(auto\
    \ i : string){\n    if(i == '['){\n      count++;\n    }\n    else{\n      count--;\n\
    \    }\n    if(count < 0){\n      return false;\n    }\n  }\n  return true;",
  "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tcount += (string[i]\
    \ == '[') ? 1 : -1;\n\t\tif (count < 0) return false;\n\t}\n\treturn count ==\
    \ 0;", '  return false;', "\tif(string.empty())\n\t\treturn false;\n\tstd::stack<char>\
    \ char_stack;\n\tfor(auto c : string) {\n\t\tif(c == '[')\n\t\t\tchar_stack.push(c);\n\
    \t\telse {\n\t\t\tif(char_stack.empty())\n\t\t\t\treturn false;\n\t\t\tchar_stack.pop();\n\
    \t\t}\n\t}\n\treturn true;", "\tstd::stack<char> brackets;\n\tfor (int i = 0;\
    \ i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tbrackets.push(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (brackets.empty()) {\n\t\t\t\
    \treturn false;\n\t\t\t}\n\t\t\tbrackets.pop();\n\t\t}\n\t}\n\treturn brackets.empty();",
  "\tstd::stack<char> s;\n\tfor (char c : string) {\n\t\tif (c == '[') {\n\t\t\ts.push(c);\n\
    \t\t}\n\t\telse if (c == ']') {\n\t\t\tif (s.empty()) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\treturn !s.empty();",
  "\tbool flag = false;\n\tstd::vector<char> v(string.size());\n\tint k = 0;\n\tfor\
    \ (int i = 0; i < string.size(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\tv[k]\
    \ = '[';\n\t\t\tk++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (k ==\
    \ 0) {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (v[k - 1] ==\
    \ '[') {\n\t\t\t\tflag = true;\n\t\t\t\tv[k - 1] = ' ';\n\t\t\t\tk--;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn flag;", "    std::stack<char> stk;\n    int n = string.length();\n\
    \    for(int i = 0; i < n; i++) {\n        if(string[i] == '[') {\n          \
    \  stk.push(string[i]);\n        } else {\n            if(stk.empty()) {\n   \
    \             return false;\n            } else {\n                stk.pop();\n\
    \            }\n        }\n    }\n    return true;", "\tint brackets = 0;\n\t\
    for (auto character : string) {\n\t\tif (character == '[') {\n\t\t\tbrackets++;\n\
    \t\t}\n\t\telse if (character == ']') {\n\t\t\tbrackets--;\n\t\t}\n\t\tif (brackets\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn brackets > 0;", "\tstd::stack<char>\
    \ stack;\n\tfor (char c : string) {\n\t\tif (c == '[')\n\t\t\tstack.push(c);\n\
    \t\telse if (c == ']') {\n\t\t\tif (stack.empty())\n\t\t\t\treturn false;\n\t\t\
    \tstack.pop();\n\t\t}\n\t}\n\treturn stack.empty();", "    int open = 0;\n   \
    \ int close = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string[i]\
    \ == '['){\n            open++;\n        }\n        else if(string[i] == ']'){\n\
    \            close++;\n        }\n        if(close > open){\n            return\
    \ false;\n        }\n    }\n    if(open == close){\n        return true;\n   \
    \ }\n    else{\n        return false;\n    }", "\tstd::stack<char> myStack;\n\t\
    for (char c : string) {\n\t\tif (c == '[') {\n\t\t\tmyStack.push(c);\n\t\t}\n\t\
    \telse if (c == ']') {\n\t\t\tif (myStack.empty()) {\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t\tmyStack.pop();\n\t\t}\n\t}\n\treturn !myStack.empty();", "\tint count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tcount++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\
    \t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
  "    // Solved using Stack data structure\n    std::stack<char> brackets;\n    for(int\
    \ i = 0; i < string.length(); i++) {\n        if(string[i] == '[')\n         \
    \   brackets.push(string[i]);\n        else if(string[i] == ']') {\n         \
    \   if(brackets.empty())\n                return false;\n            else if(brackets.top()\
    \ == '[')\n                brackets.pop();\n            else\n               \
    \ return false;\n        }\n    }\n    return brackets.empty();", "\t\tint count\
    \ = 0;\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tif (string[i] ==\
    \ '[')\n\t\t\t\tcount++;\n\t\t\telse\n\t\t\t\tcount--;\n\t\t\tif (count < 0)\n\
    \t\t\t\treturn false;\n\t\t}\n\t\treturn count == 0;", "    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]=='['){\n            for(int j=i+1;j<string.length();j++){\n\
    \                if(string[j]==']'){\n                    return true;\n     \
    \           }\n            }\n        }\n    }\n    return false;", "    stack<char>s;\n\
    \    for(int i=0;i<string.length();i++){\n        if(string[i]=='['){\n      \
    \      s.push(string[i]);\n        }\n        else if(string[i]==']'){\n     \
    \       if(s.size()>0){\n                s.pop();\n            }\n           \
    \ else{\n                return false;\n            }\n        }\n    }\n    if(s.size()>0){\n\
    \        return false;\n    }\n    return true;", "    std::stack<char> stk;\n\
    \    int i = 0;\n    while(i < string.length()){\n        if(string[i] == '['){\n\
    \            stk.push(string[i]);\n        }else if(string[i] == ']'){\n     \
    \       if(stk.empty()){\n                return false;\n            }else{\n\
    \                stk.pop();\n            }\n        }\n        i++;\n    }\n \
    \   if(stk.empty()){\n        return true;\n    }else{\n        return false;\n\
    \    }", "\tint counter = 0;\n\tfor (char& ch : string) {\n\t\tif (ch == '[')\
    \ {\n\t\t\tcounter++;\n\t\t}\n\t\telse if (ch == ']') {\n\t\t\tcounter--;\n\t\t\
    }\n\t\tif (counter == -1) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;",
  "\t//output var\n\tbool result = false;\n\t// store open brackets in stack\n\tstd::stack<char>\
    \ open_brackets;\n\t//loop through characters\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\topen_brackets.push(string[i]);\n\t\
    \t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (open_brackets.empty()) {\n\t\t\
    \t\t//return false if there is a close bracket before an open bracket\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//remove the open bracket from the\
    \ stack\n\t\t\t\topen_brackets.pop();\n\t\t\t}\n\t\t}\n\t}\n\t// if all the brackets\
    \ are equal, return true\n\tif (open_brackets.empty()) {\n\t\tresult = true;\n\
    \t}\n\treturn result;", "    std::stack<char> st;\n    for(char c : string) {\n\
    \        if(c == '[') {\n            st.push(c);\n        } else {\n         \
    \   if(st.empty()) return false;\n            else st.pop();\n        }\n    }\n\
    \    return st.empty();", "\t//if(string.size()==0) return false;\n\t//if(string.size()==1)\
    \ return false;\n\tint n=string.size();\n\tint maxLen = 0;\n\tint count=0;\n\t\
    std::stack<char> s;\n\tfor(int i=0;i<n;i++){\n\t\tif(string[i]=='['){\n\t\t\t\
    s.push(string[i]);\n\t\t\tcount++;\n\t\t}\n\t\telse if(string[i]==']'){\n\t\t\t\
    if(!s.empty()){\n\t\t\t\ts.pop();\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(s.empty()){\n\t\treturn true;\n\t\
    }\n\treturn false;", "  std::stack<char> bracket_stack;\n  for (char bracket :\
    \ string) {\n    if (bracket == '[') {\n      bracket_stack.push(bracket);\n \
    \   } else if (bracket == ']') {\n      if (bracket_stack.empty()) {\n       \
    \ return false;\n      } else {\n        bracket_stack.pop();\n      }\n    }\n\
    \  }\n  return bracket_stack.empty();", "    std::stack<char> s;\n    for(char\
    \ ch : string) {\n        if(ch == '[')\n            s.push(ch);\n        else\
    \ {\n            if(s.empty())\n                return false;\n            else\n\
    \                s.pop();\n        }\n    }\n    return true;", "\t", "    int\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string[i]\
    \ == '['){\n            count += 1;\n        }\n        else if(string[i] == ']'){\n\
    \            count -= 1;\n        }\n        if(count < 0){\n            return\
    \ false;\n        }\n    }\n    return true;", "  int count = 0;\n  for(auto x\
    \ : string){\n    if(x == '[')\n      count++;\n    else\n      count--;\n   \
    \ if(count < 0)\n      return false;\n  }\n  return count == 0;", "    std::stack<char>\
    \ S;\n    for(int i=0;i<string.length();i++){\n        if(string[i]=='[')\n  \
    \          S.push(string[i]);\n        else{\n            if(S.empty())\n    \
    \            return false;\n            else\n                S.pop();\n     \
    \   }\n    }\n    if(S.empty())\n        return true;\n    else\n        return\
    \ false;", "\t//Create two variables to keep track of the opening and closing\
    \ brackets\n\tint open_count = 0;\n\tint close_count = 0;\n\t//Loop through the\
    \ string\n\tfor (int i = 0; i < string.length(); i++) {\n\t\t//If the bracket\
    \ is an opening bracket, increment the opening bracket counter\n\t\tif (string[i]\
    \ == '[') {\n\t\t\topen_count++;\n\t\t}\n\t\t//If the bracket is a closing bracket,\
    \ increment the closing bracket counter\n\t\tif (string[i] == ']') {\n\t\t\tclose_count++;\n\
    \t\t}\n\t\t//If the closing bracket counter is greater than the opening bracket\
    \ counter, break out of the loop\n\t\tif (close_count > open_count) {\n\t\t\t\
    break;\n\t\t}\n\t}\n\t//If the opening bracket counter is equal to the closing\
    \ bracket counter and it is not zero, return true\n\tif (open_count == close_count\
    \ && open_count != 0) {\n\t\treturn true;\n\t}\n\t//Otherwise, return false\n\t\
    return false;", "\tint stack = 0;\n\tfor (auto s : string) {\n\t\tif (s == '[')\
    \ stack++;\n\t\telse if (s == ']') stack--;\n\t\tif (stack == 0) return true;\n\
    \t}\n\treturn false;", "\tstd::stack<char> stack;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tchar c = string[i];\n\t\tif (c == '[') {\n\t\t\tstack.push(c);\n\
    \t\t}\n\t\telse if (c == ']') {\n\t\t\tif (stack.empty()) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tif (stack.top() == '[') {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn true;", "\tint bracket_open_count = 0;\n\tint bracket_close_count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[')\
    \ {\n\t\t\tbracket_open_count++;\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\
    \tbracket_close_count++;\n\t\t}\n\t}\n\tif (bracket_open_count != bracket_close_count)\
    \ {\n\t\treturn false;\n\t}\n\tstd::stack<char> stk;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tif (string[i] == '[') {\n\t\t\tstk.push(string[i]);\n\t\t}\n\t\t\
    else if (string[i] == ']') {\n\t\t\tif (stk.empty()) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tstk.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stk.empty())\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "  std::stack<char>\
    \ s;\n  for(auto c : string) {\n    if(c == '[') {\n      s.push(c);\n    } else\
    \ {\n      if(s.empty()) {\n        return false;\n      }\n      s.pop();\n \
    \   }\n  }\n  return s.empty();", "\tstd::vector<char> str;\n\tfor (size_t i =\
    \ 0; i < string.size(); i++)\n\t{\n\t\tif (string[i] == '[') {\n\t\t\tstr.push_back(string[i]);\n\
    \t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (str.size() <= 0) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstr.pop_back();\n\t\t\t}\n\t\t}\n\
    \t}\n\tif (str.size() == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}", "\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '['\
    \ && string[i + 1] == ']')\n\t\t\treturn true;\n\t}\n\treturn false;", "\tstd::stack<char>\
    \ bracketStack;\n\tif (string.length() == 0) {\n\t\treturn false;\n\t}\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\t\t\
    bracketStack.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\t\
    if (bracketStack.empty()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\
    \t\tbracketStack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (bracketStack.empty()) {\n\t\
    \treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}", "\tstd::stack<char> stk;\n\
    \tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] == '[') {\n\t\
    \t\tstk.push(string[i]);\n\t\t}\n\t\telse if (string[i] == ']') {\n\t\t\tif (stk.empty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstk.pop();\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (stk.empty()) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn\
    \ false;\n\t}", "    std::stack<char>stk;\n    bool flag = false;\n    for(auto\
    \ s:string){\n        if(s == '[')\n            stk.push(s);\n        else{\n\
    \            if(stk.empty())\n                return false;\n            stk.pop();\n\
    \            flag = true;\n        }\n    }\n    return flag;", "    std::stack<char>\
    \ stack;\n    for(const auto& element : string) {\n        if(element == '[')\
    \ {\n            stack.push(element);\n        }\n        else if(element == ']')\
    \ {\n            if(stack.empty()) {\n                return false;\n        \
    \    }\n            else {\n                stack.pop();\n            }\n    \
    \    }\n    }\n    return !stack.empty();", "    int i = 0;\n    for(auto& c :\
    \ string) {\n        if(i == 0) {\n            i++;\n        }\n        else if(i\
    \ > 0) {\n            if(c == ']') {\n                if(string[i-1] == '[') {\n\
    \                    i--;\n                }\n                else {\n       \
    \             return false;\n                }\n            }\n            else\
    \ {\n                i++;\n            }\n        }\n    }\n    return true;",
  "\tint cnt = 0;\n\tfor (int i = 0; i < string.size(); i++) {\n\t\tif (string[i]\
    \ == '[')\n\t\t\tcnt++;\n\t\telse if (string[i] == ']')\n\t\t\tcnt--;\n\t\tif\
    \ (cnt < 0)\n\t\t\treturn false;\n\t}\n\treturn true;", "    //int count=0;\n\
    \    std::stack<char> stack;\n    for(int i=0;i<string.length();i++){\n      \
    \  if(string[i]=='[')\n            stack.push(string[i]);\n        else if(string[i]==']'){\n\
    \            if(stack.empty())\n                return false;\n            else{\n\
    \                stack.pop();\n            }\n        }\n    }\n    return true;",
  "    std::stack<char> s;\n    for(int i=0;i<string.length();i++){\n        if(string[i]=='[')\n\
    \            s.push(string[i]);\n        else{\n            if(s.empty())\n  \
    \              return false;\n            else{\n                if(s.top()=='[')\n\
    \                    s.pop();\n                else\n                    return\
    \ false;\n            }\n        }\n    }\n    if(s.empty())\n        return true;\n\
    \    else\n        return false;", "\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='[')\n\t\t\tst.push(string[i]);\n\t\telse if(!st.empty() &&\
    \ string[i]==']')\n\t\t\tst.pop();\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;", "\tif(string.size()==0)\n\t\treturn false;\n\tstd::stack<char> s;\n\t\
    for(int i=0;i<string.size();i++){\n\t\tif(string[i]=='[')\n\t\t\ts.push(string[i]);\n\
    \t\telse{\n\t\t\tif(s.empty())\n\t\t\t\treturn false;\n\t\t\ts.pop();\n\t\t}\n\
    \t}\n\treturn true;", "    assert(!string.empty());\n    int open = 0;\n    int\
    \ close = 0;\n    for(const auto& ch : string) {\n        if(ch == '[') {\n  \
    \          ++open;\n        }\n        else if(ch == ']') {\n            ++close;\n\
    \        }\n        if(close > open) {\n            return false;\n        }\n\
    \    }\n    return open > close;", "  // check that string is valid\n  assert(string.size()\
    \ != 0);\n  int total = 0;\n  for (int i = 0; i < string.size(); i++) {\n    if\
    \ (string[i] == '[') {\n      total++;\n    } else if (string[i] == ']') {\n \
    \     total--;\n    }\n    if (total < 0) {\n      return false;\n    }\n  }\n\
    \  return total > 0;", "\tint size = string.size();\n\tint count = 0;\n\tfor (int\
    \ i = 0; i < size; i++) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++;\n\t\t}\n\
    \t\telse if (string[i] == ']') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count == 0) {\n\
    \t\t\treturn true;\n\t\t}\n\t}\n\treturn false;", "\tint n = string.length();\n\
    \tif(n%2!=0)\n\t\treturn false;\n\tint count = 0;\n\tfor(int i=0;i<n;i++){\n\t\
    \tif(string[i]=='[')\n\t\t\tcount++;\n\t\telse if(string[i]==']')\n\t\t\tcount--;\n\
    \t\tif(count<0)\n\t\t\treturn false;\n\t}\n\treturn count==0;", "\tint count=0;\n\
    \tfor(int i=0;i<string.length();i++)\n\t{\n\t\tif(string[i]=='[')\n\t\t\tcount++;\n\
    \t\telse\n\t\t\tcount--;\n\t\tif(count<0)\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;", "\tint i = 0;\n\tint open = 0;\n\tint close = 0;\n\twhile (string[i]\
    \ != '\\0')\n\t{\n\t\tif (string[i] == '[')\n\t\t{\n\t\t\topen++;\n\t\t}\n\t\t\
    else if (string[i] == ']')\n\t\t{\n\t\t\tclose++;\n\t\t}\n\t\ti++;\n\t}\n\treturn\
    \ open > close;", "\tif(string.length()==0){\n\t\treturn false;\n\t}\n\tstack<char>\
    \ s;\n\tfor(int i=0;i<string.length();i++){\n\t\tif(string[i]=='['){\n\t\t\ts.push(string[i]);\n\
    \t\t}\n\t\telse{\n\t\t\tif(s.empty()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\
    else{\n\t\t\t\ts.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif(s.empty()){\n\t\treturn true;\n\
    \t}\n\telse{\n\t\treturn false;\n\t}", "\tint len = string.length();\n\tstd::stack<char>\
    \ stack;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (string[i] == '[') {\n\t\t\
    \tstack.push(string[i]);\n\t\t}\n\t\telse if (!stack.empty() && string[i] == ']')\
    \ {\n\t\t\tstack.pop();\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;", "\tint count = 0;\n\tfor (int i = 0; i < string.length(); i++)\
    \ {\n\t\tif (string[i] == '[')\n\t\t\tcount++;\n\t\telse if (string[i] == ']')\n\
    \t\t\tcount--;\n\t\tif (count < 0)\n\t\t\treturn false;\n\t}\n\treturn count ==\
    \ 0;", "  int count = 0;\n  for(int i = 0; i < string.length(); i++) {\n    if(string[i]\
    \ == '[') count++;\n    else count--;\n    if(count < 0) return false;\n  }\n\
    \  return true;", "\t// create stack to push opening brackets\n\tstd::stack<char>\
    \ stk;\n\t// traverse the string from left to right\n\tfor(char ch : string) {\n\
    \t\t// if the character is an opening bracket\n\t\tif(ch == '[') {\n\t\t\t// push\
    \ it in the stack\n\t\t\tstk.push(ch);\n\t\t}\n\t\t// if the character is a closing\
    \ bracket\n\t\telse if(ch == ']') {\n\t\t\t// pop the top element from the stack\n\
    \t\t\tstk.pop();\n\t\t}\n\t}\n\t// if the stack is empty, then we must have balanced\
    \ brackets\n\t// so return true, else false\n\treturn stk.empty();", "\tif(string.length()<1)\
    \ return false;\n\tstd::stack<char> st;\n\tfor(int i=0;i<string.length();i++){\n\
    \t\tif(string[i]=='['){\n\t\t\tst.push(string[i]);\n\t\t}\n\t\telse if(string[i]==']'){\n\
    \t\t\tif(st.empty()) return false;\n\t\t\telse st.pop();\n\t\t}\n\t}\n\tif(st.empty())\
    \ return true;\n\telse return false;", "\t// Returns false if there is only one\
    \ or zero brackets\n\tif (string.length() < 2) {\n\t\treturn false;\n\t}\n\t//\
    \ Bracket counter. Starts at 0\n\tint bracketCounter = 0;\n\t// Iterate through\
    \ the string\n\tfor (int i = 0; i < string.length(); i++) {\n\t\t// If the char\
    \ is a bracket, add 1 to the counter\n\t\tif (string[i] == '[') {\n\t\t\tbracketCounter++;\n\
    \t\t}\n\t\t// If the char is a bracket, subtract 1 from the counter\n\t\telse\
    \ if (string[i] == ']') {\n\t\t\tbracketCounter--;\n\t\t}\n\t\t// If the bracketCounter\
    \ is 0 after a bracket has been removed, return false\n\t\tif (bracketCounter\
    \ == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t// If the bracketCounter is not\
    \ 0, return true\n\tif (bracketCounter != 0) {\n\t\treturn true;\n\t}\n\t// If\
    \ the loop was completed and returns false, return false\n\treturn false;", " \
    \   std::stack<char> stk;\n    for(auto c : string) {\n        if(c == '[')\n\
    \            stk.push(c);\n        else {\n            if(stk.empty()) return\
    \ false;\n            stk.pop();\n        }\n    }\n    return stk.empty();"]
stop_tokens:
- "\n}"
