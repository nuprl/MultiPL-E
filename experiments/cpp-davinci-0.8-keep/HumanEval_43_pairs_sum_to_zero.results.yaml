name: HumanEval_43_pairs_sum_to_zero
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// change the list to a set\n\tstd::set<long> s(l.begin(), l.end());\n\
    \t// iterate on the set\n\tfor (auto it = s.begin(); it != s.end(); ++it) {\n\t\
    \t// check if the complement of the current value exists.\n\t\tif (s.find(-*it)\
    \ != s.end()) {\n\t\t\t// return True iff the current value is not zero\n\t\t\t\
    return *it != 0;\n\t\t}\n\t}\n\t// otherwise, return False\n\treturn false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Implement this function\n  long n=l.size();\n  for(long i=0;i<n;i++)\n\
    \  {\n      for(long j=i+1;j<n;j++)\n      {\n          if(l[i]+l[j]==0)\n   \
    \       {\n              return true;\n          }\n      }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpc_cysfif: /tmp/tmpc_cysfif.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tfor (size_t i = 0; i < l.size(); i++) {\n\t\tfor (size_t j = i + 1;\
    \ j < l.size(); j++) {\n\t\t\tif (l[i] + l[j] == 0)\n\t\t\t\treturn true;\n\t\t\
    }\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    if(l.size() <= 1)\n        return false;\n    if(l.size() > 50000)\n\
    \        return false;\n    for(int i = 0; i < l.size(); i++)\n    {\n       \
    \ for(int j = i + 1; j < l.size(); j++)\n        {\n            if(l[i] + l[j]\
    \ == 0)\n                return true;\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// Your code here\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpcmit6c0x: /tmp/tmpcmit6c0x.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    \n    sort(l.begin(), l.end()); \n    int n = l.size();\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        int left = i + 1;\n        int right = n\
    \ - 1;\n        int x = l[i];\n        while(left < right)\n        {\n      \
    \      if(x + l[left] + l[right] == 0)\n            {\n                return\
    \ true;\n            }\n            else if(x + l[left] + l[right] < 0)\n    \
    \        {\n                left++;\n            }\n            else\n       \
    \     {\n                right--;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprr8z190c: /tmp/tmprr8z190c.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto &e : l) {\n        if (s.find(-e)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(e);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::set<long> st;\n    std::vector<long>::iterator it;\n    it =\
    \ l.begin();\n    while(it != l.end()){\n        if(st.find(*it) != st.end()){\n\
    \            return true;\n        }else{\n            st.insert(*it);\n     \
    \   }\n        it++;\n    }\n    return false;\n    // TODO: implement this function\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqbk7p6f4: /tmp/tmpqbk7p6f4.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator low\
    \ = l.begin();\n    std::vector<long>::iterator high = l.end() - 1;\n    while\
    \ (low < high) {\n        long sum = *low + *high;\n        if (sum == 0) {\n\
    \            return true;\n        } else if (sum < 0) {\n            low++;\n\
    \        } else {\n            high--;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tlong n = l.size();\n\t// loop through\
    \ all indices i in the vector l\n\tfor (long i = 0; i < n; i++) {\n\t\t// loop\
    \ through all indices j > i in the vector l\n\t\tfor (long j = i + 1; j < n; j++)\
    \ {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // good luck with that!\n    std::vector<int> v1;\n    int n = l.size();\n\
    \    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n\
    \            if(l[i]+l[j]==0)\n            {\n                return true;\n \
    \           }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::set<long> s;\n    for (auto it = l.begin(); it != l.end(); it++)\
    \ {\n        if (s.find(-(*it)) != s.end()) {\n            return true;\n    \
    \    }\n        s.insert(*it);\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // WRITE YOUR CODE HERE\n  // start with a return statement like this\n\
    \  int flag=0;\n  for(int i=0;i<l.size();i++)\n  {\n    for(int j=i+1;j<l.size();j++)\n\
    \    {\n      if(l[i]+l[j]==0)\n      {\n        flag=1;\n        break;\n   \
    \   }\n    }\n  }\n  if(flag==1)\n  {\n    return true;\n  }\n  else\n  {\n  \
    \  return false;\n  }\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> us;\n    for(int i=0;i<l.size();i++){\n\
    \        if(us.find(l[i])!=us.end()){\n            return true;\n        }\n \
    \       else{\n            us.insert(-l[i]);\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  std::unordered_set<long> s;\n  for(long i = 0;\
    \ i < l.size(); i++){\n    s.insert(l[i]);\n  }\n  for(long i = 0; i < l.size();\
    \ i++){\n    if(s.find(-l[i]) != s.end()){\n      return true;\n    }\n  }\n \
    \ return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnsv5j0ls: /tmp/tmpnsv5j0ls.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        long sum = 0 - l[i];\n        if (std::binary_search(l.begin(),\
    \ l.end(), sum)) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8d_b8_k6: /tmp/tmp8d_b8_k6.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // return true;\n    std::unordered_set<long> uset;\n    for (auto\
    \ &n : l) {\n        if (uset.find(-n) != uset.end()) {\n            return true;\n\
    \        }\n        uset.insert(n);\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n ==\
    \ 1) {\n        return false;\n    }\n    if (n == 2) {\n        if (l[0] + l[1]\
    \ == 0) {\n            return true;\n        }\n        return false;\n    }\n\
    \    int l1 = 0;\n    int l2 = n - 1;\n    while (l1 < l2) {\n        if (l[l1]\
    \ + l[l2] == 0) {\n            return true;\n        }\n        if (l[l1] + l[l2]\
    \ > 0) {\n            l2--;\n        }\n        else {\n            l1++;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n   unordered_set<long> seen;\n    for(long i = 0; i < l.size(); i++){\n\
    \        if(seen.find(-l[i]) != seen.end()){\n            return true;\n     \
    \   }\n        seen.insert(l[i]);\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp7vefyxhr.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7vefyxhr.cpp:17:4: error: \u2018unordered_set\u2019 was\
    \ not declared in this scope; did you mean \u2018std::unordered_set\u2019?\n \
    \  17 |    unordered_set<long> seen;\n      |    ^~~~~~~~~~~~~\n      |    std::unordered_set\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp7vefyxhr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp7vefyxhr.cpp:17:18: error: expected\
    \ primary-expression before \u2018long\u2019\n   17 |    unordered_set<long> seen;\n\
    \      |                  ^~~~\n/tmp/tmp7vefyxhr.cpp:19:12: error: \u2018seen\u2019\
    \ was not declared in this scope\n   19 |         if(seen.find(-l[i]) != seen.end()){\n\
    \      |            ^~~~\n/tmp/tmp7vefyxhr.cpp:22:9: error: \u2018seen\u2019 was\
    \ not declared in this scope\n   22 |         seen.insert(l[i]);\n      |    \
    \     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    return true;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp9og6zafw: /tmp/tmp9og6zafw.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    bool flag = false;\n    for(long i = 0; i < l.size(); i++) {\n   \
    \     for(long j = i + 1; j < l.size(); j++) {\n            if(l[i] + l[j] ==\
    \ 0) {\n                flag = true;\n                break;\n            }\n\
    \        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    \n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvw19nrnk: /tmp/tmpvw19nrnk.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::vector<long> elems;\n    long temp;\n    bool flag = false;\n\
    \    std::sort(l.begin(), l.end());\n    int i = 0;\n    int j = l.size() - 1;\n\
    \    while (i < j) {\n        temp = l[i] + l[j];\n        if (temp < 0) {\n \
    \           i++;\n        } else if (temp > 0) {\n            j--;\n        }\
    \ else {\n            flag = true;\n            break;\n        }\n    }\n   \
    \ return flag;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n   \
    \ assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(i);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto i : l) {\n        if (s.find(-i)\
    \ != s.end())\n            return true;\n        s.insert(i);\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // You may add more variables to this function.\n    // You may add\
    \ more functions to this file.\n    int n = l.size();\n    int i, j;\n    int\
    \ flag = 0;\n    for(i = 0; i < n; i++)\n    {\n        for(j = i+1; j < n; j++)\n\
    \        {\n            if(l[i] + l[j] == 0)\n            {\n                flag\
    \ = 1;\n                break;\n            }\n        }\n    }\n    if(flag ==\
    \ 1)\n        return true;\n    else\n        return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    if(l.size() < 2) return false;\n    std::set<long> s;\n    for(auto\
    \ i: l){\n        if(s.find(-i) != s.end()) return true;\n        s.insert(i);\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    int start = 0;\n    int end =\
    \ l.size() - 1;\n    while (start < end) {\n        long sum = l[start] + l[end];\n\
    \        if (sum == 0) {\n            return true;\n        } else if (sum < 0)\
    \ {\n            start++;\n        } else {\n            end--;\n        }\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tbool flag = false;\n\tfor (long i = 0; i < l.size(); i++) {\n\t\tfor\
    \ (long j = i + 1; j < l.size(); j++) {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\
    \tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    sort(l.begin(), l.end());\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        for (long j = i + 1; j < l.size(); j++) {\n            if (l[i] +\
    \ l[j] == 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tbool found = false;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tfor\
    \ (int j = i + 1; j < l.size(); j++) {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\t\
    found = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn found;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(auto x:\
    \ l){\n        if(s.find(-x) != s.end()){\n            return true;\n        }\n\
    \        s.insert(x);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// TODO\n\tstd::vector<long> l1;\n\tstd::vector<long> l2;\n\tfor (long\
    \ a : l) {\n\t\tif (a < 0) {\n\t\t\tl1.push_back(a);\n\t\t}\n\t\telse {\n\t\t\t\
    l2.push_back(a);\n\t\t}\n\t}\n\tfor (long a : l1) {\n\t\tfor (long b : l2) {\n\
    \t\t\tif (a + b == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    \n    for(int i=0;i<l.size();i++)\n    {\n        for(int j=i+1;j<l.size();j++)\n\
    \        {\n            if(l[i]+l[j]==0)\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  int s = 0;\n  int f = l.size() - 1;\n\
    \  while (s < f) {\n    if (l[s] + l[f] > 0) {\n      f--;\n    } else if (l[s]\
    \ + l[f] < 0) {\n      s++;\n    } else {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::set<long> s;\n    for (int i = 0; i < l.size(); i++) {\n    \
    \    s.insert(l[i]);\n    }\n    for (int i = 0; i < l.size(); i++) {\n      \
    \  if (s.find(-l[i]) != s.end()) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5c3zoi7q: /tmp/tmp5c3zoi7q.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tstd::unordered_set<long> s;\n\tfor (long i : l) {\n\t\tif (s.find(-i)\
    \ != s.end())\n\t\t\treturn true;\n\t\ts.insert(i);\n\t}\n\treturn false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t//\n\t// your code here\n\t//\n\tlong long flag;\n\tfor (int i = 0;\
    \ i < l.size(); i++) {\n\t\tfor (int j = i + 1; j < l.size(); j++) {\n\t\t\tif\
    \ (l[i] + l[j] == 0) {\n\t\t\t\tflag = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tflag = 1;\n\t\t\t}\n\t\t}\n\t}\n\tif (flag == 0) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptt02js8k: /tmp/tmptt02js8k.cpp:44: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::unordered_set<long> set;\n  if (l.size() == 1) {\n    return false;\n\
    \  }\n  for (auto x : l) {\n    if (set.find(-x) != set.end()) {\n      return\
    \ true;\n    }\n    set.insert(x);\n  }\n  return false;\n}\nint main() {\n  \
    \  auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // return false if there is only one element in the vector\n    if\
    \ (l.size() == 1) {\n        return false;\n    }\n\n    // return true if there\
    \ are two elements that equal to zero\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] +\
    \ l[j] == 0) {\n                return true;\n            }\n        }\n    }\n\
    \n    // if the program does not return true, it must return false\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t\n  std::set<long> s;\n  for(std::vector<long>::iterator i = l.begin();\
    \ i != l.end(); i++) {\n    s.insert(*i);\n  }\n  for(std::vector<long>::iterator\
    \ i = l.begin(); i != l.end(); i++) {\n    if(s.find(-(*i)) != s.end())\n    \
    \  return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzazff9xc: /tmp/tmpzazff9xc.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n   std::unordered_set<long> myset;\n\n   for (long n : l) {\n      myset.insert(n);\n\
    \   }\n\n   for (long n : l) {\n      if (myset.find(-n) != myset.end()) {\n \
    \        return true;\n      }\n   }\n\n   return false;\n}\nint main() {\n  \
    \  auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpgbwmbbqc: /tmp/tmpgbwmbbqc.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // YOUR CODE HERE\n    // sort the array\n    std::sort(l.begin(),\
    \ l.end());\n    //start with end\n    long i = l.size() - 1;\n    long j = 0;\n\
    \    while(j < i) {\n      long diff = l[i] + l[j];\n      if(diff == 0) {\n \
    \       return true;\n      }\n      else if(diff > 0) {\n        i--;\n     \
    \ }\n      else {\n        j++;\n      }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tsort(l.begin(), l.end());\n\tint f = 0;\n\tfor (int i = 0; i < l.size();\
    \ i++) {\n\t\tint low = 0;\n\t\tint high = l.size() - 1;\n\t\twhile (low < high)\
    \ {\n\t\t\tif (l[low] + l[high] == -l[i]) {\n\t\t\t\tf = 1;\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse if (l[low] + l[high] < -l[i]) {\n\t\t\t\tlow++;\n\t\t\t}\n\
    \t\t\telse {\n\t\t\t\thigh--;\n\t\t\t}\n\t\t}\n\t}\n\tif (f == 0) {\n\t\treturn\
    \ false;\n\t}\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjy_cxedb: /tmp/tmpjy_cxedb.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // your code here\n  // sort the list in place\n  std::sort(l.begin(),\
    \ l.end());\n  // iterate through the list, looking for an element x such that\n\
    \  // -x is in the list.\n  for (auto x : l) {\n    // return true if x is 0 and\
    \ a 0 is in the list.\n    if (x == 0 && std::find(l.begin(), l.end(), 0) != l.end())\n\
    \      return true;\n    // otherwise, return true iff -x is in the list.\n  \
    \  else if (std::find(l.begin(), l.end(), -x) != l.end())\n      return true;\n\
    \  }\n  // if there is no such x, return false.\n  return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpabj7r663: /tmp/tmpabj7r663.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if(n == 1){\n        return false;\n    }\n\
    \    unordered_set<long> s;\n    for(int i = 0; i < n; i++){\n        if(s.find(l[i])\
    \ != s.end()){\n            return true;\n        }\n        s.insert(-l[i]);\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpwmw4vnuy.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwmw4vnuy.cpp:21:5: error: \u2018unordered_set\u2019 was\
    \ not declared in this scope; did you mean \u2018std::unordered_set\u2019?\n \
    \  21 |     unordered_set<long> s;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpwmw4vnuy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpwmw4vnuy.cpp:21:19: error: expected\
    \ primary-expression before \u2018long\u2019\n   21 |     unordered_set<long>\
    \ s;\n      |                   ^~~~\n/tmp/tmpwmw4vnuy.cpp:23:12: error: \u2018\
    s\u2019 was not declared in this scope\n   23 |         if(s.find(l[i]) != s.end()){\n\
    \      |            ^\n/tmp/tmpwmw4vnuy.cpp:26:9: error: \u2018s\u2019 was not\
    \ declared in this scope\n   26 |         s.insert(-l[i]);\n      |         ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    bool found=false;\n    for(int i=0;i<l.size();i++){\n        for(int\
    \ j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                found=true;\n\
    \                break;\n            }\n        }\n    }\n    return found;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpyo1w4__o: /tmp/tmpyo1w4__o.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tsort(l.begin(), l.end());\n\tint n = l.size();\n\tif (n <= 1) {\n\t\t\
    return false;\n\t}\n\tfor (int i = 0; i < n - 1; i++) {\n\t\tif (l[i] + l[i +\
    \ 1] == 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2lgcjygu: /tmp/tmp2lgcjygu.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzk9boj9v: /tmp/tmpzk9boj9v.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  long n=l.size();\n  sort(l.begin(),l.end());\n  long count=0;\n  long\
    \ i=0;\n  long j=n-1;\n  while(i<j)\n  {\n    if(l[i]+l[j]==0)\n    {\n      count++;\n\
    \      break;\n    }\n    else if(l[i]+l[j]>0)\n    {\n      j--;\n    }\n   \
    \ else\n    {\n      i++;\n    }\n  }\n  if(count>0)\n  {\n    return true;\n\
    \  }\n  else\n  {\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  //assert (false);\n  if(l.size()<2)\n    return false;\n  std::unordered_set<long>s;\n\
    \  for(int i=0;i<l.size();i++)\n  {\n    if(s.find(l[i])==s.end())\n      s.insert(l[i]);\n\
    \    else\n      return true;\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpt_fa3hn6: /tmp/tmpt_fa3hn6.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::unordered_set<long> nums;\n  std::unordered_set<long>::iterator\
    \ it;\n  for (long i = 0; i < l.size(); i++) {\n    it = nums.find(l[i]);\n  \
    \  if (it != nums.end()) {\n      return true;\n    }\n    nums.insert(-l[i]);\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    bool x=false;\n    for(auto i=l.begin();i!=l.end();i++){\n       \
    \ for(auto j=i+1;j!=l.end();j++){\n            if(*i+*j==0){\n               \
    \ x=true;\n                break;\n            }\n        }\n    }\n    return\
    \ x;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// TODO: please implement your solution\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpafrvoxnf: /tmp/tmpafrvoxnf.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    for (long long i = 0; i < l.size();\
    \ i++) {\n        long long sum = l[i];\n        for (long long j = i + 1; j <\
    \ l.size(); j++) {\n            sum += l[j];\n            if (sum == 0) {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpp8pvo064: /tmp/tmpp8pvo064.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // make sure not to modify the original list!\n    std::vector<long>\
    \ l_copy = l;\n    std::sort(l_copy.begin(), l_copy.end());\n    for (auto i =\
    \ l_copy.begin(); i != l_copy.end(); i++) {\n        if (std::binary_search(i\
    \ + 1, l_copy.end(), -(*i))) {\n            return true;\n        }\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::set<long> s;\n    int i;\n    for(i=0;i<l.size();i++)\n    {\n\
    \        s.insert(l[i]);\n    }\n    for(i=0;i<l.size();i++)\n    {\n        long\
    \ j = -l[i];\n        if(s.find(j)!=s.end())\n        {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpkt_mn_3v: /tmp/tmpkt_mn_3v.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if(n<2)\n        return false;\n    // Initializing\
    \ a hash table.\n    std::unordered_map<long, bool> umap;\n    for(auto elem:\
    \ l){\n        if(umap.find(-elem) != umap.end())\n            return true;\n\
    \        umap[elem] = true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  std::unordered_set<long> s;\n  for(int i=0;i<l.size();i++){\n\
    \    s.insert(l[i]);\n  }\n  for(int i=0;i<l.size();i++){\n    if(s.find(-l[i])!=s.end()){\n\
    \      return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpib2ky1mv: /tmp/tmpib2ky1mv.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::unordered_set<long> uniq_l(l.begin(), l.end());\n  for (auto it\
    \ = uniq_l.begin(); it != uniq_l.end(); ++it) {\n    if (uniq_l.find(-1 * (*it))\
    \ != uniq_l.end()) {\n      return true;\n    }\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphw56mczq: /tmp/tmphw56mczq.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp_ba52c5v: /tmp/tmp_ba52c5v.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    if(l.size() == 0) return false;\n    for(int i = 0; i < l.size();\
    \ i++){\n        for(int j = i+1; j < l.size(); j++){\n            if(l[i] + l[j]\
    \ == 0) return true;\n        }\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // implement your solution here.\n    std::unordered_set<long> checker;\n\
    \    int size = l.size();\n    for(int i = 0; i < size; i++){\n        long target\
    \ = -l[i];\n        if(checker.find(target) != checker.end()){\n            return\
    \ true;\n        }\n        checker.insert(l[i]);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  for (auto i : l) {\n    for (auto j : l) {\n      if (i + j == 0) {\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqw7w4hq2: /tmp/tmpqw7w4hq2.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // your solution here\n  if(l.size() == 0){\n    return false;\n  }\n\
    \n  std::sort(l.begin(), l.end());\n\n  for(int i = 0; i < l.size(); i++){\n \
    \   for(int j = i + 1; j < l.size(); j++){\n      if(l[i] + l[j] == 0){\n    \
    \    return true;\n      }\n    }\n  }\n\n  return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tint size = l.size();\n\tfor (int i = 0; i < size; i++) {\n\t\tfor (int\
    \ j = i + 1; j < size; j++) {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  for (int i = 0; i < l.size(); i++)\
    \ {\n    for (int j = i + 1; j < l.size(); j++) {\n      long sum = l[i] + l[j];\n\
    \      if (sum == 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  std::vector<long> zero_list;\n  bool flag =\
    \ false;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] == 0) {\n    \
    \  zero_list.push_back(l[i]);\n    }\n  }\n  if (zero_list.size() > 1) {\n   \
    \ flag = true;\n  }\n  if (l.size() < 2) {\n    return flag;\n  }\n  for (long\
    \ i = 0; i < l.size(); i++) {\n    for (long j = i + 1; j < l.size(); j++) {\n\
    \      if (l[i] + l[j] == 0) {\n        flag = true;\n      }\n    }\n  }\n  return\
    \ flag;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // sort the list\n    std::sort(l.begin(), l.end());\n    // get the\
    \ size of the vector\n    int size = l.size();\n    // get the minimum value\n\
    \    int min = l[0];\n    // get the maximum value\n    int max = l[size - 1];\n\
    \    // create a set to store the elements in the vector\n    std::set<long> l_set;\n\
    \    // create a pair\n    std::pair<std::set<long>::iterator, bool> ret;\n  \
    \  // iterate through the vector\n    for (int i = 0; i < size; i++) {\n     \
    \   // insert the elements into the set\n        ret = l_set.insert(l[i]);\n \
    \       // if the element has already been inserted, return true\n        if (ret.second\
    \ == false) {\n            return true;\n        }\n    }\n    // check for zero\
    \ in the vector\n    for (int i = 0; i < size; i++) {\n        if (l[i] == 0)\
    \ {\n            return true;\n        }\n    }\n    // check for -ve and +ve\
    \ element pair\n    if (min < 0 && max > 0) {\n        return true;\n    }\n \
    \   // return false if all above cases fail\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpovcq2eq4: /tmp/tmpovcq2eq4.cpp:53: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// your code here\n\tstd::sort(l.begin(), l.end());\n\tint end = l.size()\
    \ - 1;\n\tint start = 0;\n\twhile (start < end) {\n\t\tif (l[start] + l[end] ==\
    \ 0) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (l[start] + l[end] > 0) {\n\t\t\
    \tend--;\n\t\t}\n\t\telse {\n\t\t\tstart++;\n\t\t}\n\t}\n\treturn false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmporbtzug2: /tmp/tmporbtzug2.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // your code here\n    sort(l.begin(),l.end());\n    for(int i=0;i<l.size();i++)\n\
    \    {\n        int lp=i+1;\n        int rp=l.size()-1;\n        while(lp<rp)\n\
    \        {\n            if(l[i]+l[lp]+l[rp]==0)\n            {\n             \
    \   return true;\n            }\n            else if(l[i]+l[lp]+l[rp]<0)\n   \
    \         {\n                lp++;\n            }\n            else if(l[i]+l[lp]+l[rp]>0)\n\
    \            {\n                rp--;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6azwh5af: /tmp/tmp6azwh5af.cpp:44: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    if(l.size() < 2) return false;\n    std::unordered_set<long> S;\n\
    \    for(long i = 0; i < l.size(); i++)\n    {\n        if(S.find(-l[i]) != S.end())\
    \ return true;\n        S.insert(l[i]);\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (long i: l) {\n        if (s.find(-i)\
    \ != s.end()) return true;\n        s.insert(i);\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  for (int i = 0; i < l.size(); i++) {\n    for (int j = i + 1; j < l.size();\
    \ j++) {\n      if (l[i] + l[j] == 0) {\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    long n = l.size();\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            if(l[i] + l[j] == 0) {\n             \
    \   return true;\n            }\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  std::sort(l.begin(), l.end());\n  for (long i =\
    \ 0; i < l.size(); i++) {\n    for (long j = i + 1; j < l.size(); j++) {\n   \
    \   if (l[i] + l[j] == 0) {\n        return true;\n      }\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// Write your code here.\n\tstd::sort(l.begin(), l.end());\n\tint n\
    \ = l.size();\n\tif (n == 1)\n\t\treturn false;\n\tif (n == 2)\n\t\treturn l[0]\
    \ + l[1] == 0;\n\tint i = 0, j = n - 1;\n\twhile (i < j) {\n\t\tif (l[i] + l[j]\
    \ == 0)\n\t\t\treturn true;\n\t\telse if (l[i] + l[j] < 0)\n\t\t\ti++;\n\t\telse\n\
    \t\t\tj--;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    if(l.size()<2) return false;\n    std::unordered_set<long> S;\n  \
    \  for(auto it=l.begin();it!=l.end();it++){\n        if(S.find(*it) != S.end())\
    \ return true;\n        S.insert(-*it);\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tstd::unordered_set<long> s;\n\tfor (auto i : l) {\n\t\tif (s.find(-i)\
    \ != s.end()) {\n\t\t\treturn true;\n\t\t}\n\t\ts.insert(i);\n\t}\n\treturn false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tfor (int j = i + 1; j < l.size();\
    \ j++) {\n\t\t\tif (l[i] + l[j] == 0)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  int n = l.size();\n  if(n == 1) return false;\n\
    \  // sorting the array\n  std::sort(l.begin(), l.end());\n  int i = 0, j = n-1;\n\
    \  while(i < j) {\n    if(l[i] + l[j] == 0) {\n      return true;\n    }\n   \
    \ else if(l[i] + l[j] < 0) {\n      i++;\n    }\n    else {\n      j--;\n    }\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\t// Complete the implementation of this function\n\
    \tint a[n], i, j, count = 0;\n\tfor (i = 0; i < n; i++) {\n\t\ta[i] = l[i];\n\t\
    }\n\tint sum = 0;\n\tint size = 0;\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j =\
    \ i + 1; j < n; j++) {\n\t\t\tsum = a[i] + a[j];\n\t\t\tif (sum == 0) {\n\t\t\t\
    \tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif (count > 0) {\n\t\treturn true;\n\t}\n\t\
    else {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// check if there are an even number of elements\n\tif (l.size() % 2\
    \ == 1) {\n\t\treturn false;\n\t}\n\tstd::sort(l.begin(), l.end());\n\t// keep\
    \ two pointers (start, end)\n\t// iterate through the list and increment start.\
    \ stop if the sum of the\n\t// elements at start and end are equal to zero\n\t\
    long start = 0;\n\tlong end = l.size() - 1;\n\twhile (start < end) {\n\t\tlong\
    \ sum = l[start] + l[end];\n\t\tif (sum == 0) {\n\t\t\treturn true;\n\t\t}\n\t\
    \telse if (sum < 0) {\n\t\t\tstart++;\n\t\t}\n\t\telse {\n\t\t\tend--;\n\t\t}\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    for(int i=0;i<l.size();i++){\n        for(int\
    \ j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    for (auto iter = l.begin(); iter\
    \ != l.end(); iter++) {\n        auto iter2 = std::lower_bound(iter, l.end(),\
    \ -1 * (*iter));\n        if (*iter2 == -1 * (*iter) && iter2 != iter) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n\
    \            if(l[i]+l[j]==0){\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    for(int i=0;i<l.size();i++){\n        for(int\
    \ j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// REPLACE THE LINE BELOW WITH YOUR CODE\n\tunordered_set<long> s;\n\
    \tfor (int i = 0; i < l.size(); i++) {\n\t\tif (s.find(-l[i]) != s.end()) {\n\t\
    \t\treturn true;\n\t\t}\n\t\ts.insert(l[i]);\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpw14e9nob.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw14e9nob.cpp:18:2: error: \u2018unordered_set\u2019 was\
    \ not declared in this scope; did you mean \u2018std::unordered_set\u2019?\n \
    \  18 |  unordered_set<long> s;\n      |  ^~~~~~~~~~~~~\n      |  std::unordered_set\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpw14e9nob.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpw14e9nob.cpp:18:16: error: expected\
    \ primary-expression before \u2018long\u2019\n   18 |  unordered_set<long> s;\n\
    \      |                ^~~~\n/tmp/tmpw14e9nob.cpp:20:7: error: \u2018s\u2019\
    \ was not declared in this scope\n   20 |   if (s.find(-l[i]) != s.end()) {\n\
    \      |       ^\n/tmp/tmpw14e9nob.cpp:23:3: error: \u2018s\u2019 was not declared\
    \ in this scope\n   23 |   s.insert(l[i]);\n      |   ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int j = 0;\n        int k = l.size() - 1;\n        while (j\
    \ < k) {\n            if (l[j] + l[k] + l[i] == 0)\n                return true;\n\
    \            else if (l[j] + l[k] + l[i] < 0)\n                j++;\n        \
    \    else\n                k--;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqpyqgi6p: /tmp/tmpqpyqgi6p.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::unordered_set<long> us;\n  for (long i = 0; i < l.size(); i++)\
    \ {\n    us.insert(l[i]);\n  }\n  for (long i = 0; i < l.size(); i++) {\n    if\
    \ (us.find(-l[i]) != us.end())\n      return true;\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6sld0t6d: /tmp/tmp6sld0t6d.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::unordered_set<long> s;\n  for (long i : l) {\n    if (s.find(-i)\
    \ != s.end()) {\n      return true;\n    }\n    s.insert(i);\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  int j = 0;\n  for (int i = 0; i <\
    \ l.size(); i++) {\n    for (j = 0; j < l.size(); j++) {\n      if (l[i] + l[j]\
    \ == 0)\n        return true;\n    }\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0f_v1ahn: /tmp/tmp0f_v1ahn.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // WRITE YOUR CODE HERE\n  std::sort(l.begin(), l.end());\n  int j =\
    \ l.size() - 1;\n  for (int i = 0; i < l.size(); i++) {\n    while (i < j) {\n\
    \      long sum = l[i] + l[j];\n      if (sum == 0) {\n        return true;\n\
    \      } else if (sum > 0) {\n        j--;\n      } else {\n        break;\n \
    \     }\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // your code here\n  long sum = 0;\n  int end = l.size()-1;\n  for(long\
    \ i = 0; i < l.size(); i++){\n    for(long j = i+1; j < l.size(); j++){\n    \
    \  if(l[i] + l[j] == 0){\n        return true;\n      }\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int flag = 0;\n    if(l.size() == 1)\n        return false;\n    std::sort(l.begin(),\
    \ l.end());\n    int start = 0;\n    int end = l.size() - 1;\n    while(start\
    \ < end) {\n        if(l[start] + l[end] == 0) {\n            return true;\n \
    \       }\n        else if(l[start] + l[end] < 0) {\n            start++;\n  \
    \      }\n        else {\n            end--;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    int sum = 0;\n    if(l.size() < 2)\n    {\n\
    \        return false;\n    }\n    else\n    {\n        for(auto i = l.begin();\
    \ i < l.end(); i++)\n        {\n            for(auto j = i + 1; j < l.end(); j++)\n\
    \            {\n                sum = *i + *j;\n                if(sum == 0)\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::vector<long>::iterator i;\n    std::vector<long>::iterator j;\n\
    \    for (i = l.begin(); i != l.end(); i++) {\n        for (j = i + 1; j != l.end();\
    \ j++) {\n            if ((*i + *j) == 0) {\n                return true;\n  \
    \          }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here!\n    // You may want to use std::sort() to sort\
    \ the list\n    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator\
    \ it = l.begin();\n    for(it = l.begin(); it < l.end(); it++){\n        long\
    \ data = *it;\n        long key = data;\n        std::vector<long>::iterator it1\
    \ = it;\n        it1++;\n        while(it1 < l.end()){\n            if(key + *it1\
    \ == 0){\n                return true;\n            }else if(key + *it1 < 0){\n\
    \                it1++;\n            }else{\n                break;\n        \
    \    }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> uset;\n    for(long\
    \ i = 0; i < l.size(); i++){\n        long cur = l[i];\n        if(uset.find(-cur)\
    \ != uset.end()){\n            return true;\n        }\n        uset.insert(cur);\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  int i = 0;\n  int j = l.size() - 1;\n\
    \  while (i < j) {\n    if (l[i] + l[j] == 0) {\n      return true;\n    } else\
    \ if (l[i] + l[j] < 0) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n \
    \ return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> set1;\n    for(long i = 0; i < l.size();\
    \ i++){\n        long current = l[i];\n        if(set1.find(-current) != set1.end()){\n\
    \            return true;\n        }\n        set1.insert(current);\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // YOUR CODE HERE\n  if(l.size()==1)\n  {\n    return false;\n  }\n\
    \  else\n  {\n    std::unordered_set<long> set;\n    for(int i=0;i<l.size();i++)\n\
    \    {\n      set.insert(l[i]);\n    }\n    int size=set.size();\n    if(size==l.size())\n\
    \    {\n      return false;\n    }\n    return true;\n  }\n\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpau4hmr5j: /tmp/tmpau4hmr5j.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // YOUR CODE HERE\n    if(l.size()==1)\n      return false;\n    sort(l.begin(),l.end());\n\
    \    for(int i=0;i<l.size();i++)\n    {\n      if(binary_search(l.begin(),l.end(),-l[i]))\n\
    \      {\n        if(l[i]!=-l[i])\n          return true;\n      }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::vector<long> result;\n  for (int i = 0; i < l.size(); i++) {\n\
    \    for (int j = i + 1; j < l.size(); j++) {\n      if (l[i] + l[j] == 0) {\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    sort(l.begin(), l.end());\n    int cnt=0;\n\
    \    for(int i=0; i<l.size(); i++){\n        if(l[i]==0){\n            cnt++;\n\
    \        }\n    }\n    if(cnt>=2){\n        return true;\n    }\n    for(int i=0;\
    \ i<l.size(); i++){\n        for(int j=i+1; j<l.size(); j++){\n            if(l[i]+l[j]==0){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  int n = l.size();\n  std::unordered_set<long> hash;\n\
    \  for(int i = 0; i < n; i++) {\n    hash.insert(l[i]);\n  }\n  for(int i = 0;\
    \ i < n; i++) {\n    if(hash.find(-l[i]) != hash.end()) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_j3pwi3k: /tmp/tmp_j3pwi3k.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::unordered_set<long> s;\n  // start coding here\n  if(l.size()<2)\n\
    \    return false;\n  for(auto num:l)\n  {\n    if(s.find(-num)!=s.end())\n  \
    \    return true;\n    s.insert(num);\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  for (int i = 0; i < l.size(); i++)\
    \ {\n    for (int j = i + 1; j < l.size(); j++) {\n      if (l[i] + l[j] == 0)\
    \ {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // replace me with your implementation.\n    // you may define and\
    \ use any auxiliary functions you want.\n    // you may not define any global\
    \ variables.\n    // you may use the STL data structures.\n    // your code will\
    \ be graded on correctness and runtime efficiency.\n    bool found = false;\n\
    \    long sum = 0;\n    std::sort(l.begin(), l.end());\n    if (l.size() == 0\
    \ || l.size() == 1){\n        return false;\n    }\n    else{\n        for (int\
    \ i = 0; i < l.size(); i++){\n            sum = l[i];\n            for (int j\
    \ = i + 1; j < l.size(); j++){\n                sum += l[j];\n               \
    \ if (sum == 0){\n                    found = true;\n                    break;\n\
    \                }\n                else{\n                    sum = l[i];\n \
    \               }\n            }\n        }\n    }\n    return found;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tstd::vector<long> v = l;\n\tlong* a = &v[0];\n\tint n = v.size();\n\t\
    \n\tfor(int i = 0; i < n-1; i++)\n\t{\n\t\tfor(int j = i+1; j < n; j++)\n\t\t\
    {\n\t\t\tif(a[i] + a[j] == 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// Write your code here.\n\tint p = 0;\n\tint q = 0;\n\tint sum = 0;\n\
    \t//loop over the vector\n\t//for all elements in vector, check if there is a\
    \ number which is equal to sum+ve or -ve\n\t//if there is, return true\n\tfor\
    \ (auto i = l.begin(); i != l.end(); i++) {\n\t\t//loop over vector\n\t\tfor (auto\
    \ j = l.begin(); j != l.end(); j++) {\n\t\t\t//check if i and j are different\
    \ and if the sum is zero\n\t\t\tif (i != j && (*i + *j) == 0) {\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// Note: you can use std::sort(l.begin(), l.end()) to sort the list.\n\
    \tstd::sort(l.begin(), l.end());\n\tint n = l.size();\n\tint i, j;\n\ti = 0;\n\
    \tj = n - 1;\n\twhile (i < j) {\n\t\tif (l[i] + l[j] == 0)\n\t\t\treturn true;\n\
    \t\telse if (l[i] + l[j] < 0)\n\t\t\ti++;\n\t\telse\n\t\t\tj--;\n\t}\n\treturn\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tif (l.size() < 2)\n\t\treturn false;\n\tstd::set<long> s;\n\tfor (int\
    \ i = 0; i < l.size(); i++) {\n\t\tif (s.find(-l[i]) != s.end())\n\t\t\treturn\
    \ true;\n\t\ts.insert(l[i]);\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Write your code here\n    int i = 0;\n    bool res = false;\n \
    \   for(i = 0; i < l.size(); i++)\n    {\n        for(int j = i+1; j < l.size();\
    \ j++)\n        {\n            if(l[i] + l[j] == 0)\n            {\n         \
    \       res = true;\n                break;\n            }\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmparwrl_wa: /tmp/tmparwrl_wa.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  assert(l.size() >= 1);\n  std::vector<long> v;\n  for (int i = 0; i\
    \ < l.size(); i++) {\n    if (std::find(v.begin(), v.end(), -l[i]) != v.end())\
    \ {\n      return true;\n    }\n    v.push_back(l[i]);\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpneqnvy82: /tmp/tmpneqnvy82.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Implement me\n  return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpxl10324y: /tmp/tmpxl10324y.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  bool has_zero = false;\n  std::unordered_set<long> seen;\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] == 0) {\n      if (has_zero) {\n \
    \       return true;\n      } else {\n        has_zero = true;\n      }\n    }\
    \ else {\n      if (seen.find(-l[i]) != seen.end()) {\n        return true;\n\
    \      } else {\n        seen.insert(l[i]);\n      }\n    }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// your code here\n\t//std::set<long> s;\n\t//long last = 0;\n\t//for\
    \ (int i = 0; i < l.size(); i++) {\n\t//\tlong x = l[i];\n\t//\ts.insert(x);\n\
    \t//\tif (s.find(-x) != s.end()) {\n\t//\t\treturn true;\n\t//\t}\n\t//\tlast\
    \ = x;\n\t//}\n\t//if (s.find(-last) != s.end()) {\n\t//\treturn true;\n\t//}\n\
    \t//return false;\n\tstd::set<long> s;\n\tfor (int i = 0; i < l.size(); i++) {\n\
    \t\tlong x = l[i];\n\t\tif (s.find(-x) != s.end()) {\n\t\t\treturn true;\n\t\t\
    }\n\t\ts.insert(x);\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// WRITE YOUR CODE HERE.\n\tstd::unordered_set<long> hash;\n\tfor (long\
    \ i : l) {\n\t\thash.insert(i);\n\t}\n\tfor (long i : l) {\n\t\tif (hash.find(-i)\
    \ != hash.end()) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9aedrlyj: /tmp/tmp9aedrlyj.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  long temp;\n  bool result = false;\n  std::sort(l.begin(), l.end());\n\
    \  for (long i=0; i<l.size(); ++i) {\n    if (l[i] > 0) {\n      break;\n    }\n\
    \    else if (l[i] == 0) {\n      if (i < l.size()-1 && l[i+1] == 0) {\n     \
    \   result = true;\n        break;\n      }\n    }\n    else {\n      for (long\
    \ j=i+1; j<l.size(); ++j) {\n        if (l[j] > 0) {\n          break;\n     \
    \   }\n        if (l[i] + l[j] == 0) {\n          result = true;\n          break;\n\
    \        }\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpv6n4lapg: /tmp/tmpv6n4lapg.cpp:49: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::unordered_set<long> comps;\n  for (long num : l) {\n    if (comps.find(num)\
    \ != comps.end()) {\n      return true;\n    }\n    comps.insert(-num);\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    for (size_t i = 0; i < l.size();\
    \ i++) {\n        if (binary_search(l.begin(), l.end(), -l[i])) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3d08eusz: /tmp/tmp3d08eusz.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i + 1 < l.size()) {\n\t\
    \t\tfor (int j = i + 1; j < l.size(); j++) {\n\t\t\t\tif (l[i] + l[j] == 0) {\n\
    \t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    if(l.size()<2)return false;\n    sort(l.begin(),l.end());\n\
    \    long i=0,j=l.size()-1;\n    while(i<j){\n        long sum=l[i]+l[j];\n  \
    \      if(sum==0)return true;\n        else if(sum>0)j--;\n        else i++;\n\
    \    }\n    return false;\n\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t//WRITE CODE HERE\n\tlong i = 0;\n\tlong j = 0;\n\tlong s = 0;\n\tlong\
    \ k = 0;\n\tlong size = l.size();\n\tfor (i = 0; i < size; i++) {\n\t\tfor (j\
    \ = 0; j < size; j++) {\n\t\t\ts = l[i] + l[j];\n\t\t\tif (s == 0) {\n\t\t\t\t\
    return true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvah2j3ls: /tmp/tmpvah2j3ls.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (std::binary_search(l.begin(), l.end(), -l[i])) {\n     \
    \       return true;\n        }\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7nk_krp_: /tmp/tmp7nk_krp_.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpb2z539io: /tmp/tmpb2z539io.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    //\n    // YOUR CODE HERE\n    //\n    if(l.size()<2)return false;\n\
    \    std::sort(l.begin(),l.end());\n    std::vector<long>::iterator lb;\n    std::vector<long>::iterator\
    \ ub;\n    for(int i=0;i<l.size();i++){\n        lb=std::lower_bound(l.begin(),l.end(),-l[i]);\n\
    \        if(lb!=l.end()){\n            ub=std::upper_bound(l.begin(),l.end(),-l[i]);\n\
    \            if(lb!=ub){\n                return true;\n            }\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2oyp932n: /tmp/tmp2oyp932n.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> st;\n    for(long\
    \ i = 0; i < l.size(); i++){\n        if(st.find(l[i]) != st.end()){\n       \
    \     return true;\n        }\n        else{\n            st.insert(-l[i]);\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\treturn true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpk8z1yqaf: /tmp/tmpk8z1yqaf.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  for (int i = 0; i < l.size(); i++)\
    \ {\n    for (int j = i+1; j < l.size(); j++) {\n      if ((l[i] + l[j]) == 0)\
    \ {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    sort(l.begin(), l.end());\n    int n = l.size();\n    int i=0, j=n-1;\n\
    \    while(i<n-1 && j>=0){\n        if (l[i] + l[j] == 0){\n            return\
    \ true;\n        }\n        else if (l[i] + l[j] > 0){\n            j--;\n   \
    \     }\n        else{\n            i++;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9e_dxq5s: /tmp/tmp9e_dxq5s.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    bool ans = false;\n    sort(l.begin(), l.end());\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] == 0) {\n            continue;\n \
    \       }\n        int temp = l[i];\n        auto it = find(l.begin(), l.end(),\
    \ -temp);\n        if (it != l.end()) {\n            ans = true;\n           \
    \ break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> set;\n    for (auto i : l) {\n        if\
    \ (set.find(-i) != set.end()) {\n            return true;\n        }\n       \
    \ set.insert(i);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// WRITE YOUR CODE HERE\n\tstd::sort(l.begin(), l.end());\n\tint n =\
    \ l.size();\n\tint left = 0;\n\tint right = n - 1;\n\twhile (left < right) {\n\
    \t\tif (l[left] + l[right] == 0) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (l[left]\
    \ + l[right] < 0) {\n\t\t\tleft++;\n\t\t}\n\t\telse {\n\t\t\tright--;\n\t\t}\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    if(l.size() <= 1)\n        return\
    \ false;\n    for(int i = 0; i < l.size(); i++){\n        if(s.find(l[i]) != s.end())\n\
    \            return true;\n        s.insert(-l[i]);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // YOUR CODE HERE\n    // sort the array\n    // use two pointer method\n\
    \n    if(l.size() <= 1)\n        return false;\n\n    std::sort(l.begin(), l.end());\n\
    \n    int left = 0;\n    int right = l.size() - 1;\n\n    while(left < right)\n\
    \    {\n        if(l[left] + l[right] == 0)\n            return true;\n      \
    \  else if(l[left] + l[right] < 0)\n            left++;\n        else\n      \
    \      right--;\n    }\n\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Implement your solution here\n  std::sort(l.begin(), l.end());\n\
    \  for (int i = 0; i < l.size(); i++) {\n    int l_idx = i + 1;\n    int r_idx\
    \ = l.size() - 1;\n    while (l_idx < r_idx) {\n      int sum = l[i] + l[l_idx]\
    \ + l[r_idx];\n      if (sum == 0) {\n        return true;\n      } else if (sum\
    \ < 0) {\n        l_idx++;\n      } else {\n        r_idx--;\n      }\n    }\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpi88soa8s: /tmp/tmpi88soa8s.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n\tfor(int i =\
    \ 0; i < l.size(); i++)\n\t{\n\t\tif(l[i] >= 0)\n\t\t{\n\t\t\treturn false;\n\t\
    \t}\n\t\tfor(int j = i + 1; j < l.size(); j++)\n\t\t{\n\t\t\tif(l[i] + l[j] ==\
    \ 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator\
    \ it1, it2;\n    for(it1 = l.begin(); it1 != l.end(); it1++){\n        it2 = std::find(it1\
    \ + 1, l.end(), -(*it1));\n        if(it2 != l.end()){\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// TODO: your code here\n\tint n = l.size();\n\tif (n == 1)\n\t\treturn\
    \ false;\n\tunordered_set<int> myset;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\t\
    myset.insert(l[i]);\n\t}\n\tunordered_set<int>::iterator itr;\n\tfor (int i =\
    \ 0; i < n; i++)\n\t{\n\t\titr = myset.find(-(l[i]));\n\t\tif (itr != myset.end())\n\
    \t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpslyiosez.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpslyiosez.cpp:21:2: error: \u2018unordered_set\u2019 was\
    \ not declared in this scope; did you mean \u2018std::unordered_set\u2019?\n \
    \  21 |  unordered_set<int> myset;\n      |  ^~~~~~~~~~~~~\n      |  std::unordered_set\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpslyiosez.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpslyiosez.cpp:21:16: error: expected\
    \ primary-expression before \u2018int\u2019\n   21 |  unordered_set<int> myset;\n\
    \      |                ^~~\n/tmp/tmpslyiosez.cpp:24:3: error: \u2018myset\u2019\
    \ was not declared in this scope\n   24 |   myset.insert(l[i]);\n      |   ^~~~~\n\
    /tmp/tmpslyiosez.cpp:26:16: error: expected primary-expression before \u2018int\u2019\
    \n   26 |  unordered_set<int>::iterator itr;\n      |                ^~~\n/tmp/tmpslyiosez.cpp:29:3:\
    \ error: \u2018itr\u2019 was not declared in this scope\n   29 |   itr = myset.find(-(l[i]));\n\
    \      |   ^~~\n/tmp/tmpslyiosez.cpp:29:9: error: \u2018myset\u2019 was not declared\
    \ in this scope\n   29 |   itr = myset.find(-(l[i]));\n      |         ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  \t// Your code here.\n  \t// return true;\n  \tfor(int i=0;i<l.size();i++){\n\
    \    \tfor(int j=i+1;j<l.size();j++){\n      \t\tif(l[i]+l[j]==0){\n        \t\
    \treturn true;\n      \t\t}\n    \t}\n  \t}\n  \treturn false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  bool status = false;\n  for(int i = 0; i < l.size(); i++) {\n    for(int\
    \ j = i + 1; j < l.size(); j++) {\n      if(l[i] + l[j] == 0) {\n        status\
    \ = true;\n      }\n    }\n  }\n  return status;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tint c=0;\n\tif(l.size()==1)\n\t\treturn false;\n\tfor(int i=0;i<l.size();i++)\n\
    \t{\n\t\tfor(int j=i+1;j<l.size();j++)\n\t\t{\n\t\t\tif(l[i]+l[j]==0)\n\t\t\t\t\
    c=1;\n\t\t}\n\t}\n\tif(c==1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    \n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    int\
    \ j = n-1;\n    for(int i = 0; i < n-1; i++)\n    {\n        while(i < j)\n  \
    \      {\n            if(l[i] + l[j] == 0)\n            {\n                return\
    \ true;\n            }\n            else if(l[i] + l[j] < 0)\n            {\n\
    \                break;\n            }\n            j--;\n        }\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (long n : l) {\n        if (s.find(-n)\
    \ != s.end()) {\n            return true;\n        }\n        s.insert(n);\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    if(l.size()<2) return false;\n    std::unordered_set<long> myset;\n\
    \    for(int i=0;i<l.size();i++){\n        if(myset.find(l[i])!=myset.end())\n\
    \            return true;\n        else\n            myset.insert(-l[i]);\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Implement here!\n    // Check if the size of the vector l is greater\
    \ than 1\n    if (l.size() < 2) {\n        return false;\n    }\n    // Sort the\
    \ vector l\n    std::sort(l.begin(), l.end());\n    // Check if the first and\
    \ last element in the vector sum to zero\n    if (l[0] + l[l.size() - 1] == 0)\
    \ {\n        return true;\n    }\n    // Iterate through the vector and find if\
    \ any two element sum to zero\n    for (int i = 0; i < l.size() - 1; i++) {\n\
    \        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j]\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::unordered_set<long> seen_numbers;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    if (seen_numbers.find(-l[i]) != seen_numbers.end()) {\n      return\
    \ true;\n    }\n    seen_numbers.insert(l[i]);\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tfor (int j = i + 1; j < l.size();\
    \ j++) {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// return true if there are two elements that sum to zero.\n\t// return\
    \ false otherwise.\n\t// you don't need to read anything from standard input.\n\
    \t// you can access the elements of the input list/vector directly \n\t// as shown\
    \ in the examples below.\n\t\n\t// YOUR CODE GOES HERE.\n\tstd::unordered_set<long>\
    \ nums;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (nums.find(-l[i]) != nums.end())\
    \ {\n\t\t\treturn true;\n\t\t}\n\t\tnums.insert(l[i]);\n\t}\n\treturn false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // write your code here\n    std::vector<long> v;\n    for(int i=0;i<l.size();i++){\n\
    \        for(int j=i+1;j<l.size();j++){\n            if(l[i]+l[j]==0){\n     \
    \           return true;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> unique_set;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        long check_num = l[i];\n        if (unique_set.find(check_num\
    \ * -1) != unique_set.end()) {\n            return true;\n        }\n        unique_set.insert(check_num);\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppgj1ugb5: /tmp/tmppgj1ugb5.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> hset;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (hset.find(l[i]) != hset.end()) {\n            return true;\n\
    \        }\n        hset.insert(-l[i]);\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> st;\n    for(auto\
    \ x:l){\n        if(st.find(-x)!=st.end()) return true;\n        st.insert(x);\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tfor (int j = i + 1; j < l.size();\
    \ j++) {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // TODO: Implement this function\n  int s = l.size();\n  if(s == 1)\
    \ return false;\n  std::sort(l.begin(), l.end());\n  int i = 0;\n  int j = s-1;\n\
    \  while(i < j){\n    if(l[i] + l[j] == 0) return true;\n    else if(l[i] + l[j]\
    \ > 0) j--;\n    else i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tstd::sort(l.begin(), l.end());\n\tfor (int i = 0; i < l.size(); i++)\
    \ {\n\t\tint start = i + 1;\n\t\tint end = l.size() - 1;\n\t\twhile (start < end)\
    \ {\n\t\t\tint sum = l[i] + l[start];\n\t\t\tif (sum == 0) {\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse if (sum < 0) {\n\t\t\t\tstart++;\n\t\t\t}\n\t\t\telse {\n\t\
    \t\t\tend--;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // your code here!\n  return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpay3l04ua: /tmp/tmpay3l04ua.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> seen;\n    for (auto\
    \ e : l) {\n        seen.insert(e);\n    }\n    for (auto e : l) {\n        long\
    \ other = -e;\n        if (seen.find(other) != seen.end()) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpjtn90l_o: /tmp/tmpjtn90l_o.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here\n    std::unordered_set<long> s;\n    for(int i=0;i<l.size();i++){\n\
    \        if(s.find(l[i])!=s.end()){\n            return true;\n        }\n   \
    \     s.insert(-l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // std::cout << \"hello\" << std::endl;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    for (int j = i + 1; j < l.size(); j++) {\n      if (l[i] + l[j]\
    \ == 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int n = l.size();\n    unordered_set<int> s;\n    for(int i=0;i<n;i++){\n\
    \        if(s.find(-l[i])!=s.end()){\n            return true;\n        }\n  \
    \      s.insert(l[i]);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2bl_hd_f.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2bl_hd_f.cpp:18:5: error: \u2018unordered_set\u2019 was\
    \ not declared in this scope; did you mean \u2018std::unordered_set\u2019?\n \
    \  18 |     unordered_set<int> s;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp2bl_hd_f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp2bl_hd_f.cpp:18:19: error: expected\
    \ primary-expression before \u2018int\u2019\n   18 |     unordered_set<int> s;\n\
    \      |                   ^~~\n/tmp/tmp2bl_hd_f.cpp:20:12: error: \u2018s\u2019\
    \ was not declared in this scope\n   20 |         if(s.find(-l[i])!=s.end()){\n\
    \      |            ^\n/tmp/tmp2bl_hd_f.cpp:23:9: error: \u2018s\u2019 was not\
    \ declared in this scope\n   23 |         s.insert(l[i]);\n      |         ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n\
    \            if(l[i]+l[j]==0){\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    for(int i=0;i<l.size();i++){\n        for(int j=i+1;j<l.size();j++){\n\
    \            if(l[i]+l[j]==0){\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  //define a set to be compared\n  std::set<long> st;\n  for(int i=0;i<l.size();i++){\n\
    \    if(st.find(-l[i])!=st.end()){\n      return true;\n    }\n    st.insert(l[i]);\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int k;\n    for(int i=0;i<l.size();i++)\n    {\n        k=0;\n   \
    \     while(l[i]!=l[k])\n        {\n            if(l[i]+l[k]==0)\n           \
    \ {\n                return true;\n            }\n            k++;\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    std::vector<long>::iterator it;\n\
    \    for(it = l.begin(); it != l.end(); it++) {\n        long val = *it;\n   \
    \     if(s.find(-val) != s.end()) {\n            return true;\n        }\n   \
    \     s.insert(val);\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Your code here\n  sort(l.begin(), l.end());\n  int size = l.size();\n\
    \  int start = 0;\n  int end = size - 1;\n  while(start < end) {\n    if(l[start]\
    \ + l[end] == 0) {\n      return true;\n    }\n    else if(l[start] + l[end] <\
    \ 0) {\n      start++;\n    }\n    else {\n      end--;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    if(l.size() < 2)\n    {\n        return false;\n    }\n    else\n\
    \    {\n        std::sort(l.begin(), l.end());\n        int i = 0;\n        int\
    \ j = l.size() - 1;\n        while(i < j)\n        {\n            if(l[i] + l[j]\
    \ == 0)\n            {\n                return true;\n            }\n        \
    \    else if(l[i] + l[j] < 0)\n            {\n                i++;\n         \
    \   }\n            else\n            {\n                j--;\n            }\n\
    \        }\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbg6loips: /tmp/tmpbg6loips.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // YOUR CODE HERE\n\tstd::vector<long>::iterator it1 = l.begin();\n\
    \tfor(; it1 != l.end(); it1++)\n\t{\n\t\tstd::vector<long>::iterator it2 = it1+1;\n\
    \t\tfor(; it2 != l.end(); it2++)\n\t\t{\n\t\t\tif(*it1 + *it2 == 0)\n\t\t\t\t\
    return true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // Write your code here.\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphhbdedy7: /tmp/tmphhbdedy7.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// Write your code here.\n\tstd::unordered_set<long> s;\n\tfor (auto\
    \ element : l) {\n\t\tif (s.find(-element) != s.end()) {\n\t\t\treturn true;\n\
    \t\t}\n\t\ts.insert(element);\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    for (int\
    \ i = 0; i < n; i++) {\n        if (std::binary_search(l.begin() + i + 1, l.end(),\
    \ -l[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // WRITE YOUR CODE HERE\n    long i,j,sum=0;\n    for(i=0;i<l.size();i++)\n\
    \    {\n        for(j=i+1;j<l.size();j++)\n        {\n            sum=l[i]+l[j];\n\
    \            if(sum==0)\n            {\n                return true;\n       \
    \     }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::sort(l.begin(), l.end());\n    int i =\
    \ 0;\n    int j = l.size() - 1;\n    int count = 0;\n    while (i < j) {\n   \
    \     if (l[i] + l[j] == 0) {\n            count += 1;\n            i += 1;\n\
    \            j -= 1;\n        }\n        else if (l[i] + l[j] < 0) {\n       \
    \     i += 1;\n        }\n        else {\n            j -= 1;\n        }\n   \
    \ }\n    if (count > 0) {\n        return true;\n    }\n    else {\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::unordered_set<long> s;\n    for (auto x : l) {\n        auto\
    \ search = s.find(-x);\n        if (search != s.end()) {\n            return true;\n\
    \        }\n        s.insert(x);\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  int n = l.size();\n  // if there are fewer than two elements in the\
    \ list,\n  // there are no distinct pairs of elements that sum to zero\n  if (n\
    \ < 2) {\n    return false;\n  }\n  // Sort the elements in the list in ascending\
    \ order\n  std::sort(l.begin(), l.end());\n  int i = 0;\n  int j = n - 1;\n  //\
    \ If the first element in the list is positive,\n  // there can be no pair of\
    \ elements that sum to zero\n  if (l[i] > 0) {\n    return false;\n  }\n  // If\
    \ the last element in the list is negative,\n  // there can be no pair of elements\
    \ that sum to zero\n  if (l[j] < 0) {\n    return false;\n  }\n  while (i < j)\
    \ {\n    long sum = l[i] + l[j];\n    if (sum == 0) {\n      return true;\n  \
    \  } else if (sum > 0) {\n      j--;\n    } else {\n      i++;\n    }\n  }\n \
    \ return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int i,j;\n    for(i=0;i<l.size();i++)\n    {\n        for(j=i+1;j<l.size();j++)\n\
    \        {\n            if(l[i]+l[j]==0)\n            {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// <your code here>\n\tfor(long i=0;i<l.size();i++)\n\t{\n\t\tfor(long\
    \ j=i+1;j<l.size();j++)\n\t\t{\n\t\t\tif(l[i]+l[j]==0)\n\t\t\t{\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  //int a[l.size()]={0};\n  int n=l.size();\n  int i,j;\n  for(i=0;i<n;i++)\n\
    \  {\n    for(j=i+1;j<n;j++)\n    {\n      if(l[i]+l[j]==0)\n      {\n       \
    \ return true;\n      }\n    }\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\tif (l.size() < 2)\n\t\treturn false;\n\tstd::unordered_set<long> hash;\n\
    \tfor (int i = 0; i < l.size(); i++) {\n\t\thash.insert(l[i]);\n\t}\n\tfor (int\
    \ i = 0; i < l.size(); i++) {\n\t\tif (hash.find(-l[i]) != hash.end())\n\t\t\t\
    return true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmperl6n8al: /tmp/tmperl6n8al.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  // TODO: Fill in the code here, and return the correct result\n  //\
    \ in the return statement below.\n  return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpw4j_i9hp: /tmp/tmpw4j_i9hp.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // your code here\n    std::unordered_set<long> pos, neg;\n    for\
    \ (auto i : l) {\n        if (i < 0) {\n            neg.insert(i);\n        }\
    \ else {\n            pos.insert(i);\n        }\n    }\n    for (auto i : l) {\n\
    \        if (i < 0) {\n            if (pos.find(-i) != pos.end()) {\n        \
    \        return true;\n            }\n        } else {\n            if (neg.find(-i)\
    \ != neg.end()) {\n                return true;\n            }\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    int sum, mid;\n    bool flag = false;\n    if(l.size() == 1){\n  \
    \      return false;\n    }\n    else{\n        std::sort(l.begin(), l.end());\n\
    \        int i = 0;\n        int j = l.size() - 1;\n        while(i < j){\n  \
    \          sum = l[i] + l[j];\n            if(sum == 0){\n                flag\
    \ = true;\n                break;\n            }\n            else if(sum > 0){\n\
    \                j--;\n            }\n            else{\n                i++;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    for(auto it = l.begin(); it != l.end(); it++) {\n        for(auto\
    \ inner = it + 1; inner != l.end(); inner++) {\n            if(*it + *inner ==\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// If the size of the list is less than two, there cannot be a pair\
    \ of\n\t// distinct elements that sum to zero.\n\tif (l.size() < 2)\n\t\treturn\
    \ false;\n\t// Create a hash table to store the elements in the list.\n\tstd::unordered_set<long>\
    \ h;\n\t// We iterate over the elements in the list.\n\tfor (auto e : l) {\n\t\
    \t// If the element is already in the hash table, that means that we\n\t\t// already\
    \ have an element in the list that has the opposite sign.\n\t\t// We thus have\
    \ found a pair that sums to zero.\n\t\tif (h.find(-e) != h.end())\n\t\t\treturn\
    \ true;\n\t\t// Otherwise, we add the element to the hash table.\n\t\th.insert(e);\n\
    \t}\n\t// If we have reached this point, it means that no pair of distinct\n\t\
    // elements in the list sum to zero.\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n\t// Your code here\n\t//std::vector<int>::iterator it;\n\t//it = find(l.begin(),\
    \ l.end(), 3);\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tfor (int j = i + 1;\
    \ j < l.size(); j++) {\n\t\t\tif (l[i] + l[j] == 0) {\n\t\t\t\treturn true;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    \n    std::vector<long> p;\n    for(int i=0;i<l.size();i++)\n    {\n\
    \        if(l[i]<0)\n        {\n            p.push_back(l[i]);\n        }\n  \
    \  }\n    long n=p.size();\n    int sum=0;\n    std::sort(p.begin(),p.end());\n\
    \    int start=0;\n    int end=n-1;\n    while(start<end)\n    {\n        sum=p[start]+p[end];\n\
    \        if(sum==0)\n        {\n            return true;\n        }\n        else\
    \ if(sum>0)\n        {\n            end--;\n        }\n        else\n        {\n\
    \            start++;\n        }\n    }\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpe1eujhj6: /tmp/tmpe1eujhj6.cpp:212: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  auto it = l.begin();\n  while (it\
    \ != l.end()) {\n    long x = *it;\n    long to_find = -x;\n    it++;\n    auto\
    \ it2 = std::lower_bound(it, l.end(), to_find);\n    if (it2 != l.end() && *it2\
    \ == to_find) {\n      return true;\n    }\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n  if (l.size() < 2) {\n    return false;\n  }\n  std::unordered_set<long>\
    \ s;\n  for (auto elem : l) {\n    if (s.find(-elem) != s.end()) {\n      return\
    \ true;\n    }\n    s.insert(elem);\n  }\n  return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1, 3, -2,\
    \ 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 7})))\
    \ == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5, 7})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n \
    \   assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    std::set<long> s;\n    for (long i = 0; i < l.size(); i++) {\n   \
    \     s.insert(l[i]);\n    }\n    for (long i = 0; i < l.size(); i++) {\n    \
    \    if (s.find(-l[i]) != s.end()) {\n            return true;\n        }\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({1, 3, 5, 0}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 3, -2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 7}))) == (false));\n    assert(candidate((std::vector<long>({2, 4, -5, 3, 5,\
    \ 7}))) == (true));\n    assert(candidate((std::vector<long>({1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31}))) == (true));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30}))) == (false));\n\
    \    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31}))) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8cab90w8: /tmp/tmp8cab90w8.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 5, 0}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero([1,\
    \ 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// False\n// >>>\
    \ pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>> pairs_sum_to_zero([2, 4, -5,\
    \ 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n// False\nbool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n    // Your code here.\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({1, 3, 5, 0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 3, -2, 1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 7}))) == (false));\n    assert(candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true));\n    assert(candidate((std::vector<long>({1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 30})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 3, 2, 31})))\
    \ == (true));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 30})))\
    \ == (false));\n    assert(candidate((std::vector<long>({-3, 9, -1, 4, 2, 31})))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpaqywnb3l: /tmp/tmpaqywnb3l.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, -5, 3, 5, 7}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
