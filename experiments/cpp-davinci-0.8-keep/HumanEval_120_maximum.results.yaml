language: cpp
name: HumanEval_120_maximum
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n\
    \    // pq.push(arr[0]);\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  pq.push(arr[i]);\n        // std::cout << \"Size = \" << pq.size() << '\\n';\n\
    \        if (pq.size() > k) {\n            pq.pop();\n        }\n    }\n    //\
    \ std::cout << \"Size = \" << pq.size() << '\\n';\n    // std::cout << \"Top =\
    \ \" << pq.top() << '\\n';\n    while (pq.size() > 0) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_3k6nsln: /tmp/tmp_3k6nsln.cpp:41: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // // Time Complexity: O(n)\n    // // Space Complexity:\
    \ O(n)\n    // // Edge case\n    // if (arr.size() == 0) return {};\n    // //\
    \ Result array\n    // std::vector<long> result;\n    // // Max heap\n    // std::priority_queue<long>\
    \ max_heap;\n    // // Push k elements to the max heap\n    // for (long i = 0;\
    \ i < k; i++) {\n    //     max_heap.push(arr[i]);\n    // }\n    // // Push the\
    \ remaining elements to the max heap while\n    // // removing the top of the\
    \ max heap if the current element\n    // // is greater than it.\n    // for (long\
    \ i = k; i < arr.size(); i++) {\n    //     if (arr[i] > max_heap.top()) {\n \
    \   //         max_heap.pop();\n    //         max_heap.push(arr[i]);\n    //\
    \     }\n    // }\n    // // Push the elements from the max heap to the result\
    \ array\n    // while (!max_heap.empty()) {\n    //     result.push_back(max_heap.top());\n\
    \    //     max_heap.pop();\n    // }\n    // return result;\n\n    // Time Complexity:\
    \ O(nlogn)\n    // Space Complexity: O(1)\n    // Edge case\n    if (arr.size()\
    \ == 0) return {};\n    // Sort the array in descending order\n    std::sort(arr.begin(),\
    \ arr.end(), std::greater<long>());\n    // Return the first k elements from the\
    \ array\n    return std::vector<long>(arr.begin(), arr.begin() + k);\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1w0v1b9d: /tmp/tmp1w0v1b9d.cpp:58: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::priority_queue<long> maxHeap;\n  for (auto a : arr) {\n\
    \    maxHeap.push(a);\n    if (maxHeap.size() > k) {\n      maxHeap.pop();\n \
    \   }\n  }\n  std::vector<long> maxSortedList;\n  while (!maxHeap.empty()) {\n\
    \    maxSortedList.push_back(maxHeap.top());\n    maxHeap.pop();\n  }\n  return\
    \ maxSortedList;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb4lq_zgz: /tmp/tmpb4lq_zgz.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> maxHeap;\n    for (long elem :\
    \ arr) {\n        maxHeap.push(elem);\n        if (maxHeap.size() > k)\n     \
    \       maxHeap.pop();\n    }\n    std::vector<long> result;\n    while (!maxHeap.empty())\
    \ {\n        result.emplace_back(maxHeap.top());\n        maxHeap.pop();\n   \
    \ }\n    std::reverse(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6cgm79tm: /tmp/tmp6cgm79tm.cpp:36: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150425
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // 1. Insert first k elements of the array into min heap.\n\
    \    // 2. Iterate over the remaining elements of the array.\n    // 3. Get minimum\
    \ from the min heap and compare it with the element.\n    // 4. If the element\
    \ is greater, replace the root with the element.\n    // 5. Repeat the same steps.\n\
    \    // 6. Finally, the min heap will contain the largest k elements of the array.\n\
    \    std::priority_queue<long, std::vector<long>, std::greater<long>> min_heap;\n\
    \    std::vector<long> result;\n    // Case 1: k is 0.\n    if (k == 0) {\n  \
    \      return result;\n    }\n    // Case 2: k is greater than the size of the\
    \ array.\n    if (k > arr.size()) {\n        return arr;\n    }\n    // Case 3:\
    \ k is less than the size of the array.\n    for (long i = 0; i < k; i++) {\n\
    \        min_heap.push(arr[i]);\n    }\n    for (long i = k; i < arr.size(); i++)\
    \ {\n        if (arr[i] > min_heap.top()) {\n            min_heap.pop();\n   \
    \         min_heap.push(arr[i]);\n        }\n    }\n    // Extract the sorted\
    \ elements from the min heap.\n    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> res;\n    for\
    \ (long i = 0; i < n; i++) {\n        while (!res.empty() && res.size() + n -\
    \ i > k && res.back() < arr[i])\n            res.pop_back();\n        if (res.size()\
    \ < k)\n            res.push_back(arr[i]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6vg7zvl9: /tmp/tmp6vg7zvl9.cpp:31: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Build the heap\n    std::make_heap(arr.begin(), arr.end());\n\
    \    // To store the result\n    std::vector<long> res;\n    for(long i = 0; i\
    \ < k; i++) {\n        // Select the maximum from heap\n        res.push_back(arr.front());\n\
    \        // Delete the root\n        std::pop_heap(arr.begin(), arr.end());\n\
    \        arr.pop_back();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphdy0q6o4: /tmp/tmphdy0q6o4.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // create max heap to store the largest k values\n    std::priority_queue<long>\
    \ pq;\n    for (long& i : arr) {\n        pq.push(i);\n        if (pq.size() >\
    \ k) {\n            pq.pop();\n        }\n    }\n    // create vector to store\
    \ the largest k values in sorted order\n    std::vector<long> res;\n    while\
    \ (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7u_4wod6: /tmp/tmp7u_4wod6.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    for (long i = 0; i < k; i++)\
    \ {\n        result.push_back(INT64_MIN);\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > result[0]) {\n            result[0] = arr[i];\n\
    \            long temp = result[0];\n            for (long j = 1; j < k; j++)\
    \ {\n                if (result[j] < temp) {\n                    std::swap(result[j],\
    \ temp);\n                }\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0vwim1sr: /tmp/tmp0vwim1sr.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> maxHeap;\n    // add first k elements\
    \ of arr into maxHeap\n    for (int i = 0; i < k; i++) {\n        maxHeap.push(arr[i]);\n\
    \    }\n    // add the rest of the elements of arr\n    for (int i = k; i < arr.size();\
    \ i++) {\n        // if the current element is greater than maxHeap's top\n  \
    \      // pop maxHeap's top and push the current element\n        if (arr[i] >\
    \ maxHeap.top()) {\n            maxHeap.pop();\n            maxHeap.push(arr[i]);\n\
    \        }\n    }\n    // pop each element from maxHeap and store it into result\n\
    \    std::vector<long> result;\n    while(!maxHeap.empty()) {\n        result.push_back(maxHeap.top());\n\
    \        maxHeap.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjwh4pscu: /tmp/tmpjwh4pscu.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::priority_queue<long> pq;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    pq.push(arr[i]);\n  }\n  std::vector<long> list;\n  for (int i =\
    \ 0; i < k; i++) {\n    list.push_back(pq.top());\n    pq.pop();\n  }\n  return\
    \ list;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_m193b8m: /tmp/tmp_m193b8m.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    auto compare = [](const std::pair<long, long>& a, const\
    \ std::pair<long, long>& b) {\n        return a.first > b.first;\n    };\n   \
    \ std::priority_queue<std::pair<long, long>, std::vector<std::pair<long, long>>,\
    \ decltype(compare)> q(compare);\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        q.push(std::make_pair(arr[i], i));\n    }\n    std::vector<long> ans;\n\
    \    for (int i = 0; i < k; i++) {\n        ans.push_back(q.top().first);\n  \
    \      q.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbxzug4rd: /tmp/tmpbxzug4rd.cpp:36: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    int n = arr.size();\n    std::vector<long> result;\n   \
    \ if (k == n) return arr;\n    std::priority_queue<long> heap;\n    for (int i\
    \ = 0; i < n; i++) {\n        heap.push(arr[i]);\n        if (heap.size() > k)\
    \ heap.pop();\n    }\n    for (int i = 0; i < k; i++) {\n        result.push_back(heap.top());\n\
    \        heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5lykszzf: /tmp/tmp5lykszzf.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (auto& x : arr) {\n\
    \        pq.push(x);\n        if (pq.size() > k) {\n            pq.pop();\n  \
    \      }\n    }\n    std::vector<long> res;\n    while (!pq.empty()) {\n     \
    \   res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpm6ol9i3n: /tmp/tmpm6ol9i3n.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        pq.push(arr[i]);\n    }\n    std::vector<long> res;\n    for\
    \ (int i = 0; i < k; i++) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7egs6zl4: /tmp/tmp7egs6zl4.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  // Build a max heap with O(n) time complexity.\n  std::make_heap(arr.begin(),\
    \ arr.end());\n  // Pop k elements out to get the max k elements.\n  while (arr.size()\
    \ > k) {\n    std::pop_heap(arr.begin(), arr.end());\n    arr.pop_back();\n  }\n\
    \  return arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp74rdrcyk: /tmp/tmp74rdrcyk.cpp:30: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long n = arr.size();\n    if\
    \ (k == n) {\n        return arr;\n    }\n    for (long i = 0; i < k; i++) {\n\
    \        auto max = std::max_element(arr.begin(), arr.end());\n        ans.push_back(*max);\n\
    \        arr.erase(max);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9782of37: /tmp/tmp9782of37.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if (arr.size() == 0) return arr;\n    std::vector<long>\
    \ result;\n    if (arr.size() == k) return arr;\n    std::priority_queue<long>\
    \ maximum_k;\n    for (long number : arr) {\n        maximum_k.push(number);\n\
    \        if (maximum_k.size() > k) maximum_k.pop();\n    }\n    while (!maximum_k.empty())\
    \ {\n        result.push_back(maximum_k.top());\n        maximum_k.pop();\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n   \
    \ assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwvpsztbl: /tmp/tmpwvpsztbl.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> ret;\n  std::priority_queue<long> pq;\n\
    \  for (auto it = arr.begin(); it != arr.end(); ++it) {\n    pq.push(*it);\n \
    \ }\n  for (long i = 0; i < k; ++i) {\n    ret.push_back(pq.top());\n    pq.pop();\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppatq5eqm: /tmp/tmppatq5eqm.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Assume that the length of arr is n, so the range of k\
    \ is [1, n].\n    // Assume that the elements in the array will be in the range\
    \ of [-1000, 1000].\n    // The elements in the array are distinct, so there are\
    \ 2 * 1000 + 1 possible values.\n    // If the elements are not distinct, the\
    \ number of possible values could be as large as n^2.\n    //\n    // The basic\
    \ idea is using a max heap to maintain the largest k elements.\n    // Initially,\
    \ the heap contains the first k elements.\n    // Then for each of the remaining\
    \ n - k elements, if it is larger than the top element\n    // of the heap, then\
    \ pop out the top element and insert this element into the heap.\n    // When\
    \ finish the above iteration, return the elements in the heap.\n    //\n    //\
    \ Since each element of the array would be compared with the top element of the\
    \ heap,\n    // the whole process would take O(n * log(k)) time in the worst case.\n\
    \    // The space complexity is O(k) due to the size of the heap.\n    long n\
    \ = arr.size();\n    if (k == n) {\n        return arr;\n    }\n    std::vector<long>\
    \ result;\n    std::priority_queue<long> heap;\n    for (long i = 0; i < k; ++i)\
    \ {\n        heap.push(arr[i]);\n    }\n    for (long i = k; i < n; ++i) {\n \
    \       if (arr[i] > heap.top()) {\n            heap.pop();\n            heap.push(arr[i]);\n\
    \        }\n    }\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n\
    \        heap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbm5cu1_r: /tmp/tmpbm5cu1_r.cpp:57: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ q;\n    for (auto& num : arr) {\n        q.push(num);\n        if (q.size()\
    \ > k) {\n            q.pop();\n        }\n    }\n    while (!q.empty()) {\n \
    \       result.push_back(q.top());\n        q.pop();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmbva08rv: /tmp/tmpmbva08rv.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::priority_queue<long> pq;\n  for (auto a : arr) {\n  \
    \  pq.push(a);\n    if (pq.size() > k) {\n      pq.pop();\n    }\n  }\n  std::vector<long>\
    \ result;\n  while (!pq.empty()) {\n    result.push_back(pq.top());\n    pq.pop();\n\
    \  }\n  std::reverse(result.begin(), result.end());\n  return result;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvgzcc9b9: /tmp/tmpvgzcc9b9.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if (arr.size() == 0) return {};\n    if (arr.size() == 1)\
    \ return arr;\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> res(arr.end()\
    \ - k, arr.end());\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  if (arr.size() == 0) {\n    return {};\n  }\n  if (arr.size()\
    \ == 1) {\n    return arr;\n  }\n  std::vector<long> ret;\n  for (long i = 0;\
    \ i < k; i++) {\n    long max = arr[0];\n    long max_index = 0;\n    for (long\
    \ j = 0; j < arr.size(); j++) {\n      if (arr[j] > max) {\n        max = arr[j];\n\
    \        max_index = j;\n      }\n    }\n    ret.push_back(max);\n    arr.erase(arr.begin()\
    \ + max_index);\n  }\n  return ret;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpv4mnahy8: /tmp/tmpv4mnahy8.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  long n = arr.size();\n  if (k == n) {\n    return arr;\n \
    \ }\n  std::priority_queue<long> pq;\n  for (int i = 0; i < k; i++) {\n    pq.push(arr[i]);\n\
    \  }\n  for (int i = k; i < n; i++) {\n    if (arr[i] > pq.top()) {\n      pq.pop();\n\
    \      pq.push(arr[i]);\n    }\n  }\n  std::vector<long> ret;\n  while (!pq.empty())\
    \ {\n    ret.push_back(pq.top());\n    pq.pop();\n  }\n  std::reverse(ret.begin(),\
    \ ret.end());\n  return ret;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqeqhlzci: /tmp/tmpqeqhlzci.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    // TODO: Write your code here\n\
    \    int n = arr.size();\n    std::priority_queue<long, std::vector<long>, std::greater<long>>\
    \ minHeap;\n    for(int i = 0; i < k; i++) {\n        minHeap.push(arr[i]);\n\
    \    }\n    for(int i = k; i < n; i++) {\n        if(arr[i] > minHeap.top()) {\n\
    \            minHeap.pop();\n            minHeap.push(arr[i]);\n        }\n  \
    \  }\n    while(!minHeap.empty()) {\n        ans.push_back(minHeap.top());\n \
    \       minHeap.pop();\n    }\n    std::reverse(ans.begin(), ans.end());\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpc2k93gpv: /tmp/tmpc2k93gpv.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    for (long i = 0; i < k; i++)\
    \ {\n        result.push_back(arr[i]);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    for (long i = k; i < arr.size(); i++) {\n        long j = 0;\n        while\
    \ (j < k && result[j] < arr[i]) {\n            j++;\n        }\n        if (j\
    \ < k) {\n            result.insert(result.begin() + j, arr[i]);\n           \
    \ result.pop_back();\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpz0m9gug6: /tmp/tmpz0m9gug6.cpp:39: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::priority_queue<long> max_heap;\n  for (auto &i : arr)\
    \ {\n    max_heap.push(i);\n  }\n  std::vector<long> ans;\n  for (int i = 0; i\
    \ < k; i++) {\n    ans.push_back(max_heap.top());\n    max_heap.pop();\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpm2criwag: /tmp/tmpm2criwag.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    for (long i = 0; i < k; i++)\
    \ {\n        long max = INT_MIN;\n        long maxIndex = -1;\n        for (long\
    \ j = 0; j < arr.size(); j++) {\n            if (arr[j] > max) {\n           \
    \     max = arr[j];\n                maxIndex = j;\n            }\n        }\n\
    \        result.push_back(max);\n        arr.erase(arr.begin() + maxIndex);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpz_buk_l4: /tmp/tmpz_buk_l4.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  using namespace std;\n  vector<long> vec;\n  sort(arr.begin(),\
    \ arr.end());\n  for(int i = arr.size() - 1; i >= 0 && k > 0; i--) {\n    vec.push_back(arr[i]);\n\
    \    k--;\n  }\n  return vec;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprlyawkl5: /tmp/tmprlyawkl5.cpp:30: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Create a max heap using STL's priority_queue.\n    std::priority_queue<long>\
    \ pq;\n    for (long i = 0; i < arr.size(); i++) {\n        // NOTE: We may have\
    \ duplicates in the input array.\n        // Because STL's priority_queue keeps\
    \ only one copy of any duplicates,\n        // we can't just push all the elements\
    \ in the heap. We should instead\n        // first check if the element is less\
    \ than the top of the heap. If so,\n        // we should push it in.\n       \
    \ if (pq.size() == k && arr[i] > pq.top()) {\n            pq.pop();\n        \
    \    pq.push(arr[i]);\n        } else if (pq.size() < k) {\n            pq.push(arr[i]);\n\
    \        }\n    }\n    // Convert the max heap to a vector.\n    std::vector<long>\
    \ v;\n    while (!pq.empty()) {\n        v.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxwm4mbu0: /tmp/tmpxwm4mbu0.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (long x : arr) {\n\
    \        pq.push(x);\n        if (pq.size() > k) {\n            pq.pop();\n  \
    \      }\n    }\n    std::vector<long> ans;\n    while (!pq.empty()) {\n     \
    \   ans.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmci299_r: /tmp/tmpmci299_r.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // This is a functional problem. You have to complete this\
    \ function.\n    // It takes as input an array and an integer k.\n    // It should\
    \ return a sorted list of length k with the maximum k numbers in arr.\n    std::vector<long>\
    \ v;\n    // write your code here.\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for(long i = 0; i < arr.size(); i++){\n       \
    \ pq.push(arr[i]);\n        if(pq.size() > k){\n            pq.pop();\n      \
    \  }\n    }\n    while(!pq.empty()){\n        v.push_back(pq.top());\n       \
    \ pq.pop();\n    }\n    return v;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if (arr.size() == 0) {\n        return {};\n    }\n    long\
    \ left = 0;\n    long right = k;\n    std::vector<long> result(k);\n    while\
    \ (right <= arr.size()) {\n        std::vector<long> temp(arr.begin() + left,\
    \ arr.begin() + right);\n        std::sort(temp.begin(), temp.end());\n      \
    \  result = temp;\n        left++;\n        right++;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9tq1f57c: /tmp/tmp9tq1f57c.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::priority_queue<long> max_heap;\n  for (long i = 0; i\
    \ < arr.size(); i++) {\n    max_heap.push(arr[i]);\n  }\n  std::vector<long> result;\n\
    \  for (long i = 0; i < k; i++) {\n    result.push_back(max_heap.top());\n   \
    \ max_heap.pop();\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0sb84egr: /tmp/tmp0sb84egr.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::multiset<long> s;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        s.insert(arr[i]);\n        if (s.size() > k)\n            s.erase(s.begin());\n\
    \    }\n    std::vector<long> v(s.begin(), s.end());\n    std::reverse(v.begin(),\
    \ v.end());\n    return v;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8y4qg7ki: /tmp/tmp8y4qg7ki.cpp:31: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::priority_queue<long> pq;\n  for (long a : arr) {\n  \
    \  pq.push(a);\n    if (pq.size() > k) {\n      pq.pop();\n    }\n  }\n  std::vector<long>\
    \ v;\n  while (!pq.empty()) {\n    v.push_back(pq.top());\n    pq.pop();\n  }\n\
    \  std::reverse(v.begin(), v.end());\n  return v;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdnjpckmq: /tmp/tmpdnjpckmq.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long n = arr.size();\n  \
    \  if (n < k) {\n        return arr;\n    }\n    std::sort(arr.begin(), arr.end());\n\
    \    for (long i = n - 1; i >= n - k; i--) {\n        result.push_back(arr[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptn9fagce: /tmp/tmptn9fagce.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr;\n    if (arr.size() == 0) {\n\
    \        return max_arr;\n    }\n    if (arr.size() <= k) {\n        std::sort(arr.begin(),\
    \ arr.end());\n        return arr;\n    }\n    std::priority_queue<long> pq;\n\
    \    for (long i = 0; i < k; i++) {\n        pq.push(arr[i]);\n    }\n    for\
    \ (long i = k; i < arr.size(); i++) {\n        if (arr[i] > pq.top()) {\n    \
    \        pq.pop();\n            pq.push(arr[i]);\n        }\n    }\n    while\
    \ (!pq.empty()) {\n        max_arr.push_back(pq.top());\n        pq.pop();\n \
    \   }\n    std::reverse(max_arr.begin(), max_arr.end());\n    return max_arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpafr7w3lo: /tmp/tmpafr7w3lo.cpp:47: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  // Write your code here\n  if(arr.size() == 0 || k == 0) return\
    \ {};\n  else if(arr.size() == 1) return arr;\n  std::sort(arr.begin(), arr.end());\n\
    \  std::vector<long> result;\n  for(long i = 0; i < k; i++) {\n    result.push_back(arr[arr.size()\
    \ - 1 - i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvciy20kg: /tmp/tmpvciy20kg.cpp:31: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> min_heap;\n    for (auto& element\
    \ : arr) {\n        min_heap.push(element);\n        if (min_heap.size() > k)\
    \ {\n            min_heap.pop();\n        }\n    }\n    std::vector<long> result;\n\
    \    while (!min_heap.empty()) {\n        result.push_back(min_heap.top());\n\
    \        min_heap.pop();\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpruxzziy8: /tmp/tmpruxzziy8.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150425
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    for (long i = 0; i < k; i++)\
    \ {\n        auto it = std::max_element(arr.begin(), arr.end());\n        result.push_back(*it);\n\
    \        arr.erase(it);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpydek60so: /tmp/tmpydek60so.cpp:29: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (long& num : arr)\
    \ {\n        pq.push(num);\n        if (pq.size() > k) {\n            pq.pop();\n\
    \        }\n    }\n    std::vector<long> max_k;\n    while (pq.size() > 0) {\n\
    \        max_k.push_back(pq.top());\n        pq.pop();\n    }\n    return max_k;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpe8spgxg5: /tmp/tmpe8spgxg5.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> answer;\n    std::priority_queue<long>\
    \ pq;\n    int arr_size = arr.size();\n    int count = 0;\n    while(count < k)\
    \ {\n        pq.push(arr[count]);\n        count++;\n    }\n    for(; count <\
    \ arr_size; count++) {\n        if(arr[count] > pq.top()) {\n            pq.pop();\n\
    \            pq.push(arr[count]);\n        }\n    }\n    for(; k > 0; k--) {\n\
    \        answer.push_back(pq.top());\n        pq.pop();\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4ko9nmib: /tmp/tmp4ko9nmib.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> heap;\n    std::vector<long> ans;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        heap.push(arr[i]);\n   \
    \ }\n    for (long i = 0; i < k; i++) {\n        ans.push_back(heap.top());\n\
    \        heap.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp42t2e5rf: /tmp/tmp42t2e5rf.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  //loop through the array and find the max, put it in the vector\n\
    \  std::vector<long> maxes;\n  for(long i = 0; i < k; i++) {\n    long max = INT_MIN;\n\
    \    long index = 0;\n    for(long j = 0; j < arr.size(); j++) {\n      if(arr[j]\
    \ > max) {\n        max = arr[j];\n        index = j;\n      }\n    }\n    maxes.push_back(max);\n\
    \    arr.erase(arr.begin() + index);\n  }\n  return maxes;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpky61f5fv: /tmp/tmpky61f5fv.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (auto i : arr) {\n\
    \        pq.push(i);\n    }\n    std::vector<long> res;\n    while (k--) {\n \
    \       res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5fej8psb: /tmp/tmp5fej8psb.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> maxs;\n    for (long i = 0; i < k; i++)\
    \ {\n        maxs.push_back(arr[i]);\n    }\n    std::make_heap(maxs.begin(),\
    \ maxs.end());\n    for (long i = k; i < arr.size(); i++) {\n        if (arr[i]\
    \ > maxs[0]) {\n            std::pop_heap(maxs.begin(), maxs.end());\n       \
    \     maxs.pop_back();\n            maxs.push_back(arr[i]);\n            std::push_heap(maxs.begin(),\
    \ maxs.end());\n        }\n    }\n    std::sort_heap(maxs.begin(), maxs.end());\n\
    \    return maxs;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpy7pw4yh_: /tmp/tmpy7pw4yh_.cpp:38: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> max_heap;\n    for (long number\
    \ : arr) {\n        max_heap.push(number);\n        if (max_heap.size() > k) {\n\
    \            max_heap.pop();\n        }\n    }\n    std::vector<long> maximum_k(k);\n\
    \    for (long i = k - 1; i >= 0; --i) {\n        maximum_k[i] = max_heap.top();\n\
    \        max_heap.pop();\n    }\n    return maximum_k;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppfi530cc: /tmp/tmppfi530cc.cpp:36: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  if (arr.size() == k) {\n    return arr;\n  }\n  std::vector<long>\
    \ result(k);\n  long result_index = 0;\n  // in the first run of while loop, we\
    \ will fill the first 'k' elements in\n  // the min heap.\n  // In the second\
    \ run, we will replace the smallest element in the min heap\n  // with the next\
    \ element in arr.\n  // This way, we get the maximum 'k' elements in the min heap.\n\
    \  while (result_index < k) {\n    // min heap\n    std::priority_queue<long,\
    \ std::vector<long>, std::greater<long>> min_heap;\n    for (long i = result_index;\
    \ i < arr.size(); i++) {\n      if (result_index < k) {\n        result[result_index]\
    \ = arr[i];\n        result_index++;\n      } else {\n        // fill the min\
    \ heap\n        if (min_heap.size() < k) {\n          min_heap.push(arr[i]);\n\
    \        } else {\n          if (arr[i] > min_heap.top()) {\n            min_heap.pop();\n\
    \            min_heap.push(arr[i]);\n          }\n        }\n      }\n    }\n\
    \    // replace the smallest 'k' elements in result with the maximum 'k'\n   \
    \ // elements in the min heap.\n    while (!min_heap.empty()) {\n      result[result_index\
    \ - k] = min_heap.top();\n      min_heap.pop();\n      result_index++;\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpevbjh3fg: /tmp/tmpevbjh3fg.cpp:60: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    if (arr.size() == 0) return\
    \ res;\n    res.resize(k);\n    long n = arr.size();\n    long first_idx = n -\
    \ k;\n    if (k == n) {\n        sort(arr.begin(), arr.end());\n        return\
    \ arr;\n    }\n    std::vector<long> dp;\n    dp.resize(first_idx + 1);\n    dp[0]\
    \ = 1;\n    for (long i = 1; i <= first_idx; i++) {\n        long j = 0;\n   \
    \     for (j = i - 1; j >= 0; j--) {\n            if (arr[i] < arr[j]) {\n   \
    \             break;\n            }\n        }\n        dp[i] = i - j;\n    }\n\
    \    long max_no = -1, idx = -1;\n    long i = 0;\n    while (k--) {\n       \
    \ max_no = -1;\n        for (long j = first_idx; j >= 0; j--) {\n            if\
    \ (dp[j] > max_no) {\n                max_no = dp[j];\n                idx = j;\n\
    \            }\n        }\n        res[i++] = arr[idx];\n        dp[idx] = -1;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5dcr6c1: /tmp/tmpx5dcr6c1.cpp:58: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result(k);\n    int arr_size = arr.size();\n\
    \    if (arr_size == k) {\n        return arr;\n    }\n    std::priority_queue<long>\
    \ pq;\n    for (long i = 0; i < arr_size; i++) {\n        pq.push(arr[i]);\n \
    \   }\n    int i = 0;\n    while (i < k) {\n        result[i] = pq.top();\n  \
    \      pq.pop();\n        i++;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptr_asib5: /tmp/tmptr_asib5.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    if (arr.size() <= k) {\n   \
    \     ans = arr;\n        std::sort(ans.begin(), ans.end());\n        std::reverse(ans.begin(),\
    \ ans.end());\n        return ans;\n    }\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    for (long num : arr) {\n        if (pq.size() <\
    \ k) {\n            pq.push(num);\n        } else {\n            if (pq.top()\
    \ < num) {\n                pq.pop();\n                pq.push(num);\n       \
    \     }\n        }\n    }\n    while (!pq.empty()) {\n        ans.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(ans.begin(), ans.end());\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjxhxlmmf: /tmp/tmpjxhxlmmf.cpp:46: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  // Implement your solution here\n  std::sort(arr.begin(),\
    \ arr.end());\n  std::vector<long> res;\n  for(int i = arr.size()-1; i >= arr.size()-k;\
    \ i--)\n    res.push_back(arr[i]);\n  return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    std::priority_queue<long> max_heap;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        max_heap.push(arr[i]);\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        res.push_back(max_heap.top());\n\
    \        max_heap.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpox8is1fl: /tmp/tmpox8is1fl.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  // Insert your code here\n  int n = arr.size();\n  if(k >\
    \ n){\n    k = n;\n  }\n  std::priority_queue<long> pq;\n  for(int i = 0; i <\
    \ k; i++){\n    pq.push(arr[i]);\n  }\n  for(int i = k; i < n; i++){\n    if(arr[i]\
    \ > pq.top()){\n      pq.pop();\n      pq.push(arr[i]);\n    }\n  }\n  std::vector<long>\
    \ ans;\n  while(!pq.empty()){\n    ans.push_back(pq.top());\n    pq.pop();\n \
    \ }\n  std::reverse(ans.begin(), ans.end());\n  return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdev3i04n: /tmp/tmpdev3i04n.cpp:45: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for (long element : arr) {\n        pq.push(element);\n        if (pq.size()\
    \ > k) {\n            pq.pop();\n        }\n    }\n    for (long i = 0; i < k;\
    \ i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqrxban8c: /tmp/tmpqrxban8c.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result(k);\n    long n = arr.size();\n\
    \    // insert the first k-1 elements into the priority queue\n    std::priority_queue<long>\
    \ q;\n    for (long i = 0; i < k - 1; i++)\n        q.push(arr[i]);\n    // extract\
    \ the max and insert\n    for (long i = k - 1; i < n; i++) {\n        q.push(arr[i]);\n\
    \        result[i - k + 1] = q.top();\n        q.pop();\n    }\n    // add the\
    \ last k-1 elements\n    for (long i = 0; i < k - 1; i++) {\n        result[n\
    \ - k + 1 + i] = q.top();\n        q.pop();\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpq4p8anem: /tmp/tmpq4p8anem.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    int n = arr.size();\n    std::vector<long> ans;\n    std::priority_queue<long>\
    \ pq;\n    for(int i = 0; i < n; i++) {\n        pq.push(arr[i]);\n        if(pq.size()\
    \ > k)\n            pq.pop();\n    }\n    while(pq.size() > 0) {\n        ans.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9q5xqfq1: /tmp/tmp9q5xqfq1.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    long i = 0;\n    while (!pq.empty() && i < k) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n        i++;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqkpqxkj7: /tmp/tmpqkpqxkj7.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ q;\n    for (int i = 0; i < arr.size(); i++) {\n        q.push(arr[i]);\n  \
    \  }\n    for (int i = 0; i < k; i++) {\n        result.push_back(q.top());\n\
    \        q.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjppz5_5m: /tmp/tmpjppz5_5m.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n\
    \        return result;\n    }\n    std::priority_queue<long> pq;\n    for (long\
    \ elem : arr) {\n        pq.push(elem);\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppmcx92gy: /tmp/tmppmcx92gy.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if (arr.size() == 0) return arr;\n    long len = arr.size();\n\
    \    if (k == 0) return std::vector<long>();\n    if (k >= len) return arr;\n\
    \    std::sort(arr.begin(), arr.end());\n    std::vector<long> result;\n    for\
    \ (long i = len - 1; i >= len - k; i--) {\n        result.push_back(arr[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzwbyci1i: /tmp/tmpzwbyci1i.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (auto &element :\
    \ arr) {\n        pq.push(element);\n    }\n    std::vector<long> result;\n  \
    \  while (k--) {\n        result.push_back(pq.top());\n        pq.pop();\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwdsr7ecu: /tmp/tmpwdsr7ecu.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Inserting the 'k' largest elements into a minheap will\
    \ give you the smallest\n    // of the 'k' largest elements.\n    // Therefore,\
    \ we insert 'k' elements, and then insert more elements while\n    // maintaining\
    \ 'k' elements in the heap.\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> pq;\n    std::vector<long> res;\n    for (int i = 0; i <\
    \ k; i++) {\n        pq.push(arr[i]);\n    }\n    for (int i = k; i < arr.size();\
    \ i++) {\n        if (arr[i] > pq.top()) {\n            pq.pop();\n          \
    \  pq.push(arr[i]);\n        }\n    }\n    while (pq.size() > 0) {\n        res.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    std::priority_queue<long> pq;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n\
    \    for (long i = 0; i < k; i++) {\n        ans.push_back(pq.top());\n      \
    \  pq.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp64cj9tb8: /tmp/tmp64cj9tb8.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        pq.push(arr[i]);\n    }\n    std::vector<long> result;\n   \
    \ while (k--) {\n        long num = pq.top();\n        pq.pop();\n        result.push_back(num);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu0bqnjl2: /tmp/tmpu0bqnjl2.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  // Brute force solution\n  // std::vector<long> result;\n\
    \  // long arr_size = arr.size();\n  // long i = 0;\n  // while(i < k) {\n  //\
    \   long max = arr[0];\n  //   long max_index = 0;\n  //   for(long j = 0; j <\
    \ arr_size; j++) {\n  //     if(arr[j] > max) {\n  //       max = arr[j];\n  //\
    \       max_index = j;\n  //     }\n  //   }\n  //   result.push_back(max);\n\
    \  //   arr.erase(arr.begin() + max_index);\n  //   arr_size--;\n  //   i++;\n\
    \  // }\n  // return result;\n  std::vector<long> result;\n  std::vector<long>\
    \ indexes;\n  long max;\n  long max_index;\n  long i = 0;\n  while(i < k) {\n\
    \    max = arr[0];\n    max_index = 0;\n    for(long j = 0; j < arr.size(); j++)\
    \ {\n      if(arr[j] > max) {\n        max = arr[j];\n        max_index = j;\n\
    \      }\n    }\n    result.push_back(max);\n    indexes.push_back(max_index);\n\
    \    i++;\n  }\n  return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7gjl151f: /tmp/tmp7gjl151f.cpp:60: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if (arr.size() == 0) return arr;\n    if (arr.size() ==\
    \ 1) return {arr[0]};\n    long n = arr.size();\n    std::vector<long> res;\n\
    \    for (long i = 0; i < k; i++) res.push_back(arr[i]);\n    for (long i = k;\
    \ i < n; i++) {\n        long j = 0;\n        while (j < k && res[j] >= arr[i])\
    \ j++;\n        if (j == k) continue;\n        res.erase(res.begin() + j);\n \
    \       res.push_back(arr[i]);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvpt_4bec: /tmp/tmpvpt_4bec.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150428
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // assert(arr.size() > 0);\n    // assert(k > 0);\n    //\
    \ assert(k <= arr.size());\n    // Find the k largest elements by using heap \n\
    \    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        if (pq.size() < k) {\n    \
    \        pq.push(arr[i]);\n        } else {\n            if (arr[i] > pq.top())\
    \ {\n                pq.pop();\n                pq.push(arr[i]);\n           \
    \ }\n        }\n    }\n    std::vector<long> ans;\n    while (!pq.empty()) {\n\
    \        ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    if (arr.size() < k) {\n    \
    \    return res;\n    }\n    std::multiset<long> mt;\n    for (long el : arr)\
    \ {\n        mt.insert(el);\n    }\n    std::vector<long>::iterator it = arr.begin();\n\
    \    while (k > 0) {\n        res.push_back(*mt.rbegin());\n        mt.erase(mt.find(*mt.rbegin()));\n\
    \        k--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnttz538m: /tmp/tmpnttz538m.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (auto a : arr) {\n\
    \        pq.push(a);\n        if (pq.size() > k) {\n            pq.pop();\n  \
    \      }\n    }\n    std::vector<long> res;\n    while (!pq.empty()) {\n     \
    \   res.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgk5ss0nd: /tmp/tmpgk5ss0nd.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> output;\n  std::sort(arr.begin(), arr.end());\n\
    \  for (auto it = arr.end() - k; it != arr.end(); it++) {\n    output.push_back(*it);\n\
    \  }\n  return output;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_ele;\n    long n = arr.size();\n \
    \   // max heap\n    std::priority_queue<long> pq;\n    for(long i = 0; i < n;\
    \ i++) {\n        pq.push(arr[i]);\n    }\n    while(k--) {\n        max_ele.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9mib79rv: /tmp/tmp9mib79rv.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // O(N + k)\n    if (arr.size() == 0) return {};\n    std::vector<long>\
    \ maximum(k);\n    for (long i = 0; i < k; i++) {\n        maximum[i] = arr[i];\n\
    \    }\n    std::make_heap(maximum.begin(), maximum.end());\n    for (long i =\
    \ k; i < arr.size(); i++) {\n        if (arr[i] > maximum[0]) {\n            std::pop_heap(maximum.begin(),\
    \ maximum.end());\n            maximum[k - 1] = arr[i];\n            std::push_heap(maximum.begin(),\
    \ maximum.end());\n        }\n    }\n    std::sort_heap(maximum.begin(), maximum.end());\n\
    \    return maximum;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphavlr2y9: /tmp/tmphavlr2y9.cpp:39: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res(k);\n    std::priority_queue<long>\
    \ pq;\n    for (long x : arr) {\n        pq.push(x);\n        if (pq.size() >\
    \ k) {\n            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n \
    \       res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmph_39xeih: /tmp/tmph_39xeih.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    std::priority_queue<long> pq;\n\
    \    for (auto i : arr) {\n        pq.push(i);\n        if (pq.size() > k) {\n\
    \            pq.pop();\n        }\n    }\n    while (pq.size() > 0) {\n      \
    \  ans.push_back(pq.top());\n        pq.pop();\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8jzi0_gl: /tmp/tmp8jzi0_gl.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // declare a min heap\n    std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> minHeap;\n    for (int i = 0; i < arr.size(); i++) {\n \
    \       if (minHeap.size() == k) {\n            if (arr[i] > minHeap.top()) {\n\
    \                minHeap.pop();\n                minHeap.push(arr[i]);\n     \
    \       }\n        } else {\n            minHeap.push(arr[i]);\n        }\n  \
    \  }\n    // convert the heap to vector\n    std::vector<long> result;\n    while\
    \ (!minHeap.empty()) {\n        result.push_back(minHeap.top());\n        minHeap.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> q;\n    for (auto num : arr) {\n\
    \        q.push(num);\n        if (q.size() > k) {\n            q.pop();\n   \
    \     }\n    }\n    std::vector<long> result;\n    while (!q.empty()) {\n    \
    \    result.push_back(q.top());\n        q.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfdhata5z: /tmp/tmpfdhata5z.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for(auto i = arr.rbegin(); i != arr.rend(); i++) {\n        result.push_back(*i);\n\
    \        if(result.size() == k) break;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpo2qy5cro: /tmp/tmpo2qy5cro.cpp:29: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    for (auto i = 0; i < k; i++)\
    \ {\n        auto max = arr[i];\n        auto index = i;\n        for (auto j\
    \ = i + 1; j < arr.size(); j++) {\n            if (arr[j] > max) {\n         \
    \       max = arr[j];\n                index = j;\n            }\n        }\n\
    \        if (index != i) {\n            std::swap(arr[i], arr[index]);\n     \
    \   }\n        result.push_back(arr[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_cbiz50f: /tmp/tmp_cbiz50f.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> solution(k);\n    std::priority_queue<long>\
    \ max_heap;\n    for (auto element : arr) {\n        max_heap.push(element);\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        solution[i] = max_heap.top();\n\
    \        max_heap.pop();\n    }\n    return solution;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqemktwav: /tmp/tmpqemktwav.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    // TODO: Write your code\
    \ here\n    std::sort(arr.begin(), arr.end());\n    for(int i = arr.size() - 1;\
    \ i >= arr.size() - k; i--) {\n        result.push_back(arr[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> ret;\n  std::priority_queue<long> max_heap;\n\
    \  for (long i : arr) {\n    max_heap.push(i);\n  }\n  while (ret.size() < k)\
    \ {\n    ret.push_back(max_heap.top());\n    max_heap.pop();\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_6up_wbx: /tmp/tmp_6up_wbx.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    std::make_heap(arr.begin(),\
    \ arr.end());\n    while(!arr.empty() && k--) {\n        res.push_back(arr.front());\n\
    \        std::pop_heap(arr.begin(), arr.end());\n        arr.pop_back();\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdyh8fvxq: /tmp/tmpdyh8fvxq.cpp:30: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // return the max k elements\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        return result;\n    }\n    std::vector<long>\
    \ heap(arr.begin(), arr.begin() + k);\n    std::make_heap(heap.begin(), heap.end());\n\
    \    for (long i = k; i < arr.size(); i++) {\n        if (arr[i] > heap[0]) {\n\
    \            std::pop_heap(heap.begin(), heap.end());\n            heap.pop_back();\n\
    \            heap.push_back(arr[i]);\n            std::push_heap(heap.begin(),\
    \ heap.end());\n        }\n    }\n    while (!heap.empty()) {\n        result.push_back(heap[0]);\n\
    \        std::pop_heap(heap.begin(), heap.end());\n        heap.pop_back();\n\
    \    }\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpct5nn621: /tmp/tmpct5nn621.cpp:45: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> maximum;\n    if (arr.size() < k) {\n\
    \        return maximum;\n    }\n    std::priority_queue<long> pq;\n    for (long\
    \ i = 0; i < k; i++) {\n        pq.push(arr[i]);\n    }\n    for (long i = k;\
    \ i < arr.size(); i++) {\n        if (arr[i] > pq.top()) {\n            pq.pop();\n\
    \            pq.push(arr[i]);\n        }\n    }\n    while (!pq.empty()) {\n \
    \       maximum.push_back(pq.top());\n        pq.pop();\n    }\n    return maximum;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwgvuqllk: /tmp/tmpwgvuqllk.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> max_heap;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        max_heap.push(arr[i]);\n    }\n    std::vector<long>\
    \ ans;\n    for (long i = 0; i < k; i++) {\n        ans.push_back(max_heap.top());\n\
    \        max_heap.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnqahosf6: /tmp/tmpnqahosf6.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> output;\n    long n = arr.size();\n  \
    \  if (n <= k) {\n        std::sort(arr.begin(), arr.end());\n        return arr;\n\
    \    }\n    std::priority_queue<long> pq;\n    for (long i = 0; i < k; i++) {\n\
    \        pq.push(arr[i]);\n    }\n    for (long i = k; i < n; i++) {\n       \
    \ if (arr[i] > pq.top()) {\n            pq.pop();\n            pq.push(arr[i]);\n\
    \        }\n    }\n    while (!pq.empty()) {\n        output.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(output.begin(), output.end());\n \
    \   return output;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp70x31vxc: /tmp/tmp70x31vxc.cpp:45: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  if (arr.size() == 0) {\n    return {};\n  }\n  std::priority_queue<long>\
    \ maxHeap;\n  for (long i = 0; i < arr.size(); i++) {\n    maxHeap.push(arr[i]);\n\
    \  }\n  std::vector<long> result;\n  while(result.size() < k) {\n    result.push_back(maxHeap.top());\n\
    \    maxHeap.pop();\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbngdl_g0: /tmp/tmpbngdl_g0.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    std::vector<long> result;\n\
    \    for (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n   \
    \     pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0wazhcyi: /tmp/tmp0wazhcyi.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long>res;\n    for(long i = 0; i < k; i++) {\n\
    \        res.push_back(arr[i]);\n    }\n    std::make_heap(res.begin(), res.end());\n\
    \    for(long i = k; i < arr.size(); i++) {\n        if(arr[i] > res[0]) {\n \
    \           std::pop_heap(res.begin(), res.end());\n            res.pop_back();\n\
    \            res.push_back(arr[i]);\n            std::push_heap(res.begin(), res.end());\n\
    \        }\n    }\n    std::sort_heap(res.begin(), res.end());\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpo9z8zbwh: /tmp/tmpo9z8zbwh.cpp:38: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> stack;\n  for (auto it = arr.begin(); it\
    \ != arr.end(); ++it) {\n    auto current = *it;\n    auto last = stack.end()\
    \ - 1;\n    while (!stack.empty() && *last < current && stack.size() > k - 1)\
    \ {\n      stack.pop_back();\n      last = stack.end() - 1;\n    }\n    if (stack.size()\
    \ < k) {\n      stack.push_back(current);\n    }\n  }\n  return stack;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbnsmfl43: /tmp/tmpbnsmfl43.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (auto& i : arr) {\n\
    \        pq.push(i);\n        if (pq.size() > k) {\n            pq.pop();\n  \
    \      }\n    }\n    std::vector<long> result;\n    while (!pq.empty()) {\n  \
    \      result.insert(result.begin(), pq.top());\n        pq.pop();\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbwty3dqy: /tmp/tmpbwty3dqy.cpp:36: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> result;\n  std::priority_queue<long> pq;\n\
    \  for (const auto &n : arr) {\n    pq.push(n);\n    if (pq.size() > k) {\n  \
    \    pq.pop();\n    }\n  }\n  while (k--) {\n    result.push_back(pq.top());\n\
    \    pq.pop();\n  }\n  std::reverse(result.begin(), result.end());\n  return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpur450cru: /tmp/tmpur450cru.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for(auto itr = arr.rbegin(); itr != arr.rend(); itr++) {\n        if(result.size()\
    \ < k) {\n            result.push_back(*itr);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpv9mh7z8e: /tmp/tmpv9mh7z8e.cpp:30: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::priority_queue<long> queue;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    queue.push(arr[i]);\n  }\n  std::vector<long> result;\n  while (k--)\
    \ {\n    result.push_back(queue.top());\n    queue.pop();\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp56v_kz1h: /tmp/tmp56v_kz1h.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for (long num : arr) {\n        pq.push(num);\n        if (pq.size()\
    \ > k) {\n            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n\
    \        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpg533ak6r: /tmp/tmpg533ak6r.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ret;\n    std::priority_queue<long> queue;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (queue.size() == k) {\n\
    \            long temp = queue.top();\n            if (temp < arr[i]) {\n    \
    \            queue.pop();\n                queue.push(arr[i]);\n            }\n\
    \        } else {\n            queue.push(arr[i]);\n        }\n    }\n    while\
    \ (!queue.empty()) {\n        ret.push_back(queue.top());\n        queue.pop();\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5b4c1q28: /tmp/tmp5b4c1q28.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> queue;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        queue.push(arr[i]);\n    }\n    std::vector<long>\
    \ result;\n    while (k > 0) {\n        result.push_back(queue.top());\n     \
    \   queue.pop();\n        k--;\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyv6a5fkt: /tmp/tmpyv6a5fkt.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ result(k);\n    for (long index = 0; index < k; ++index) {\n        result[index]\
    \ = arr[arr.size() - 1 - index];\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpixznhkjl: /tmp/tmpixznhkjl.cpp:28: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::priority_queue<long> pq;\n  long k_ = k;\n  long i =\
    \ 0;\n  while(k > 0) {\n    pq.push(arr[i]);\n    i++;\n    k--;\n  }\n  while(i\
    \ < arr.size()) {\n    long top = pq.top();\n    if(arr[i] > top) {\n      pq.pop();\n\
    \      pq.push(arr[i]);\n    }\n    i++;\n  }\n  std::vector<long> ret(k_);\n\
    \  for(long i = k_ - 1; i >= 0; i--) {\n    ret[i] = pq.top();\n    pq.pop();\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0oyo2rk6: /tmp/tmp0oyo2rk6.cpp:45: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long arrLen = arr.size();\n\
    \    if (arrLen < k) return ans;\n    std::priority_queue<long> pq;\n    for (long\
    \ i = 0; i < arrLen; i++) {\n        pq.push(arr[i]);\n        if (pq.size() >\
    \ k) pq.pop();\n    }\n    for (long i = 0; i < k; i++) {\n        ans.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0kr9des_: /tmp/tmp0kr9des_.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res(k);\n    for (long i = 0; i < k; i++)\
    \ {\n        auto it = std::max_element(arr.begin(), arr.end());\n        res[i]\
    \ = *it;\n        arr.erase(it);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpk_0u7z07: /tmp/tmpk_0u7z07.cpp:29: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (pq.size() < k) {\n            pq.push_back(arr[i]);\n  \
    \          std::push_heap(pq.begin(), pq.end());\n        } else {\n         \
    \   if (arr[i] > pq[0]) {\n                std::pop_heap(pq.begin(), pq.end());\n\
    \                pq.pop_back();\n                pq.push_back(arr[i]);\n     \
    \           std::push_heap(pq.begin(), pq.end());\n            }\n        }\n\
    \    }\n    std::sort_heap(pq.begin(), pq.end());\n    return pq;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdx2m6gzz: /tmp/tmpdx2m6gzz.cpp:39: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    std::vector<long> result;\n\
    \    while (k > 0) {\n        long top = pq.top();\n        pq.pop();\n      \
    \  result.push_back(top);\n        k--;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdhdz340r: /tmp/tmpdhdz340r.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(k <= arr.size());\n    std::priority_queue<long>\
    \ max_heap;\n    for (long i = 0; i < k; i++) {\n        max_heap.push(arr[i]);\n\
    \    }\n    for (long i = k; i < arr.size(); i++) {\n        if (arr[i] > max_heap.top())\
    \ {\n            max_heap.pop();\n            max_heap.push(arr[i]);\n       \
    \ }\n    }\n    std::vector<long> res;\n    while (!max_heap.empty()) {\n    \
    \    res.push_back(max_heap.top());\n        max_heap.pop();\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppjwsjf6_: /tmp/tmppjwsjf6_.cpp:41: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if (arr.size() == 0) return arr;\n    std::sort(arr.begin(),\
    \ arr.end());\n    long n = arr.size();\n    std::vector<long> answer;\n    if\
    \ (k == n) {\n        return arr;\n    }\n    for (long i = n - 1; i >= n - k;\
    \ i--) {\n        answer.push_back(arr[i]);\n    }\n    return answer;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0ur1g8xr: /tmp/tmp0ur1g8xr.cpp:36: int main(): Assertion `candidate((std::vector<long>({123,
    -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    if (arr.size() == k) {\n\
    \        return arr;\n    }\n    std::priority_queue<long> pq;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    for (int i\
    \ = 0; i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2s2spngg: /tmp/tmp2s2spngg.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ q;\n    for (auto n : arr) {\n        q.push(n);\n        if (q.size() > k)\
    \ {\n            q.pop();\n        }\n    }\n    while (!q.empty()) {\n      \
    \  result.push_back(q.top());\n        q.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3iih9dxt: /tmp/tmp3iih9dxt.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Implement your solution by completing the below function\n\
    \    std::priority_queue<long> pq;\n    for(int i = 0; i < arr.size(); i++) {\n\
    \        pq.push(arr[i]);\n    }\n    std::vector<long> res;\n    while(k--) {\n\
    \        res.push_back(pq.top());\n        pq.pop();\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvep_xc6k: /tmp/tmpvep_xc6k.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long minIdx = -1;\n    std::vector<long> result;\n    for\
    \ (long j = 0; j < k; j++) {\n        long max = LONG_MIN;\n        for (long\
    \ i = 0; i < arr.size(); i++) {\n            if (arr[i] > max && i > minIdx) {\n\
    \                max = arr[i];\n                minIdx = i;\n            }\n \
    \       }\n        result.push_back(max);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5pqnk8jp: /tmp/tmp5pqnk8jp.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n\
    \        return result;\n    }\n    std::priority_queue<long> queue;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        queue.push(arr[i]);\n    }\n   \
    \ for (int i = 0; i < k; i++) {\n        result.push_back(queue.top());\n    \
    \    queue.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpivg7ztta: /tmp/tmpivg7ztta.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    std::vector<long> result;\n\
    \    for (auto value : arr) {\n        pq.push(value);\n        if (pq.size()\
    \ > k) {\n            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n\
    \        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjd16utug: /tmp/tmpjd16utug.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ max_heap;\n    for (long i = 0; i < arr.size(); i++) {\n        max_heap.push(arr[i]);\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(max_heap.top());\n\
    \        max_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvka153ov: /tmp/tmpvka153ov.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::sort(arr.begin(), arr.end());\n\
    \    for(long i = arr.size() - 1; i >= arr.size() - k; i--) {\n        result.push_back(arr[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> result;\n  // TODO\n  return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpymxcyazg: /tmp/tmpymxcyazg.cpp:25: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    std::vector<long> ans;\n\
    \    for (long num : arr) {\n        pq.push(num);\n        if (pq.size() > k)\n\
    \            pq.pop();\n    }\n    while (!pq.empty()) {\n        ans.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprd46x9lt: /tmp/tmprd46x9lt.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (auto i : arr) {\n\
    \        pq.push(i);\n    }\n    std::vector<long> result;\n    for (int i = 0;\
    \ i < k; i++) {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmtkh2zge: /tmp/tmpmtkh2zge.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    if (arr.size() < k) {\n \
    \       return result;\n    }\n    result.resize(k);\n    std::make_heap(result.begin(),\
    \ result.end());\n    for (auto i = 0; i < arr.size(); ++i) {\n        if (arr[i]\
    \ > result[0]) {\n            std::pop_heap(result.begin(), result.end());\n \
    \           result[k - 1] = arr[i];\n            std::push_heap(result.begin(),\
    \ result.end());\n        }\n    }\n    std::sort_heap(result.begin(), result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnxl65yz_: /tmp/tmpnxl65yz_.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long len = arr.size();\n    if (k == len) {\n        return\
    \ arr;\n    }\n    std::priority_queue<long> pq;\n    for (long i = 0; i < k;\
    \ i++) {\n        pq.push(arr[i]);\n    }\n    for (long i = k; i < len; i++)\
    \ {\n        if (arr[i] > pq.top()) {\n            pq.pop();\n            pq.push(arr[i]);\n\
    \        }\n    }\n    std::vector<long> v;\n    while (!pq.empty()) {\n     \
    \   v.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(v.begin(),\
    \ v.end());\n    return v;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptup8v_r7: /tmp/tmptup8v_r7.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ q;\n    for (int i = 0; i < arr.size(); i++) {\n        q.push(arr[i]);\n  \
    \  }\n    for (int i = 0; i < k; i++) {\n        result.push_back(q.top());\n\
    \        q.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjppz5_5m: /tmp/tmpjppz5_5m.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    int largest = -1;\n    int\
    \ largestIndex = -1;\n    while(result.size() < k) {\n        largest = -1;\n\
    \        largestIndex = -1;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr[i] > largest) {\n                largest = arr[i];\n      \
    \          largestIndex = i;\n            }\n        }\n        if(largestIndex\
    \ == -1) {\n            return result;\n        }\n        result.push_back(largest);\n\
    \        arr.erase(arr.begin() + largestIndex);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfxkv7w7t: /tmp/tmpfxkv7w7t.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150431
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> output = {};\n    for (long i = 0; i <\
    \ k; i++) {\n        output.push_back(arr[i]);\n    }\n    std::sort(output.begin(),\
    \ output.end());\n    for (long i = k; i < arr.size(); i++) {\n        if (arr[i]\
    \ > output[0]) {\n            output[0] = arr[i];\n            std::sort(output.begin(),\
    \ output.end());\n        }\n    }\n    return output;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // handles base case\n    if (k == 0) return {};\n    if\
    \ (k == 1) return {*std::max_element(arr.begin(), arr.end())};\n    if (k == arr.size())\
    \ return arr;\n    // creates a max heap of size k and inserts the first k elements\
    \ of the array\n    std::priority_queue<long> max_heap;\n    for (long i = 0;\
    \ i < k; i++) {\n        max_heap.push(arr[i]);\n    }\n    // replaces the max\
    \ element of the heap if the next element is greater\n    for (long i = k; i <\
    \ arr.size(); i++) {\n        if (arr[i] > max_heap.top()) {\n            max_heap.pop();\n\
    \            max_heap.push(arr[i]);\n        }\n    }\n    // copies heap elements\
    \ to an array\n    std::vector<long> result(k);\n    for (long i = k - 1; i >=\
    \ 0; i--) {\n        result[i] = max_heap.top();\n        max_heap.pop();\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n   \
    \ assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1xnzg56i: /tmp/tmp1xnzg56i.cpp:45: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result(k);\n    std::priority_queue<long>\
    \ max_heap;\n    for (long i = 0; i < arr.size(); i++) {\n        max_heap.push(arr[i]);\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        result[i] = max_heap.top();\n\
    \        max_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpa9nty7yn: /tmp/tmpa9nty7yn.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> maxList;\n  std::priority_queue<long> pq;\n\
    \  for (long i = 0; i < arr.size(); i++) {\n    pq.push(arr[i]);\n  }\n  while\
    \ (!pq.empty() && k > 0) {\n    maxList.push_back(pq.top());\n    pq.pop();\n\
    \    k--;\n  }\n  return maxList;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvp8tzs5n: /tmp/tmpvp8tzs5n.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    // TODO: Write your code here\n\
    \    std::priority_queue<long, std::vector<long>, std::greater<long>> minHeap;\n\
    \    for(long n : arr) {\n        minHeap.push(n);\n        if(minHeap.size()\
    \ > k) {\n            minHeap.pop();\n        }\n    }\n    while(!minHeap.empty())\
    \ {\n        res.push_back(minHeap.top());\n        minHeap.pop();\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> heap;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        heap.push(arr[i]);\n    }\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < k; i++) {\n        result.push_back(heap.top());\n\
    \        heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpog31a2w1: /tmp/tmpog31a2w1.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::multiset<long> set;\n    std::vector<long> results;\n\
    \    for (auto const & i : arr) {\n        set.insert(i);\n        if (set.size()\
    \ > k) {\n            set.erase(set.begin());\n        }\n    }\n    for (auto\
    \ const & i : set) {\n        results.push_back(i);\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150432
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    for(long i = 0; i < k; i++)\
    \ {\n        ans.push_back(arr[i]);\n    }\n    std::sort(ans.begin(), ans.end());\n\
    \    for(long i = k; i < arr.size(); i++) {\n        if(arr[i] > ans[0]) {\n \
    \           ans[0] = arr[i];\n            std::sort(ans.begin(), ans.end());\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150433
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    if (arr.size() < k) return\
    \ result;\n    std::priority_queue<long> max_heap;\n    for (long i = 0; i < k;\
    \ i++) max_heap.push(arr[i]);\n    long index = k;\n    while (index < arr.size())\
    \ {\n        if (arr[index] > max_heap.top()) {\n            max_heap.pop();\n\
    \            max_heap.push(arr[index]);\n        }\n        index++;\n    }\n\
    \    while (!max_heap.empty()) {\n        result.push_back(max_heap.top());\n\
    \        max_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp13cwwumu: /tmp/tmp13cwwumu.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> q;\n    long n = arr.size();\n    for\
    \ (long i = 0; i < n; i++) {\n        // if q is empty or q.size() is smaller\
    \ than k\n        // than just add the element from arr\n        if (q.empty()\
    \ || q.size() < k) {\n            q.push_back(arr[i]);\n        } else {\n   \
    \         // if element from arr is greater than the element at front of q\n \
    \           // than remove all elements from q that are smaller than element at\
    \ arr\n            // and add it to the q\n            if (arr[i] > q.front())\
    \ {\n                while(!q.empty() && q.back() < arr[i]) {\n              \
    \      q.pop_back();\n                }\n                q.push_back(arr[i]);\n\
    \            }\n        }\n    }\n    return q;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpz5ylp50m: /tmp/tmpz5ylp50m.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Create a max heap\n    std::priority_queue<long> max_heap;\n\
    \    for (auto ele : arr) {\n        max_heap.push(ele);\n    }\n    std::vector<long>\
    \ res;\n    for (long i = 0; i < k; i++) {\n        res.push_back(max_heap.top());\n\
    \        max_heap.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu4xm5s5w: /tmp/tmpu4xm5s5w.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> v(arr.begin(), arr.begin() + k);\n   \
    \ std::make_heap(v.begin(), v.end());\n    for (int i = k; i < arr.size(); i++)\
    \ {\n        if (arr[i] > v[0]) {\n            std::pop_heap(v.begin(), v.end());\n\
    \            v.pop_back();\n            v.push_back(arr[i]);\n            std::push_heap(v.begin(),\
    \ v.end());\n        }\n    }\n    std::sort_heap(v.begin(), v.end());\n    return\
    \ v;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpf5d3fvrg: /tmp/tmpf5d3fvrg.cpp:35: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long N = arr.size();\n    assert(k <= N);\n    // Compare\
    \ two elements of the list or two elements of the array.\n    auto comp = [](const\
    \ long& a, const long& b) { return a > b; };\n    // This heap will be used to\
    \ store the k maximum elements.\n    std::priority_queue<long, std::vector<long>,\
    \ decltype(comp)> heap(comp);\n    // This heap will be used to store the k elements\
    \ we are about to return.\n    std::priority_queue<long, std::vector<long>, decltype(comp)>\
    \ ret_heap(comp);\n    // Count down from the end of the list.\n    for (long\
    \ i = N - 1; i >= 0; i--) {\n        if (heap.size() < k) {\n            heap.push(arr[i]);\n\
    \        } else {\n            // Remove the next smallest element from the heap.\n\
    \            if (arr[i] > heap.top()) {\n                heap.pop();\n       \
    \         heap.push(arr[i]);\n            }\n        }\n    }\n    // Then, add\
    \ the elements to the return heap.\n    while (!heap.empty()) {\n        ret_heap.push(heap.top());\n\
    \        heap.pop();\n    }\n    // Then, add the elements to the return vector.\n\
    \    std::vector<long> ret;\n    while (!ret_heap.empty()) {\n        ret.push_back(ret_heap.top());\n\
    \        ret_heap.pop();\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    if (arr.size() == 0) {\n\
    \        return result;\n    }\n    // step 1: convert vector to max heap.\n \
    \   std::make_heap(arr.begin(), arr.end());\n    while (k--) {\n        // step\
    \ 2: add root to result vector.\n        result.push_back(arr.front());\n    \
    \    // step 3: pop root and shift elements.\n        std::pop_heap(arr.begin(),\
    \ arr.end());\n        arr.pop_back();\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpaty1g0fb: /tmp/tmpaty1g0fb.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    int n = arr.size();\n    std::vector<long> ans;\n    std::priority_queue<std::pair<long,int>>\
    \ heap;\n    for(int i = 0; i < n; i++) {\n        heap.push({arr[i], i});\n \
    \   }\n    for(int i = 0; i < k; i++) {\n        ans.push_back(heap.top().first);\n\
    \        heap.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6grpjlhh: /tmp/tmp6grpjlhh.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150433
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> solution;\n    // TODO: Write your code\
    \ here\n    return solution;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3rfmr946: /tmp/tmp3rfmr946.cpp:25: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150433
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (long i=0; i<arr.size();\
    \ i++) {\n        pq.push(arr[i]);\n    }\n    std::vector<long> res;\n    while(k--)\
    \ {\n        long temp = pq.top();\n        res.push_back(temp);\n        pq.pop();\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8nfilg_7: /tmp/tmp8nfilg_7.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    for (long i = 0; i < k; i++)\
    \ {\n        result.push_back(arr[i]);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    for (long i = k; i < arr.size(); i++) {\n        long j = 0;\n        while\
    \ (j < k) {\n            if (arr[i] > result[j]) {\n                result.erase(result.begin()\
    \ + j);\n                result.push_back(arr[i]);\n                std::sort(result.begin(),\
    \ result.end());\n                break;\n            }\n            j++;\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    std::vector<long> result;\n\
    \    for (long num : arr) {\n        pq.push(num);\n        if (pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n    \
    \    result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9h4ocw8i: /tmp/tmp9h4ocw8i.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> list;\n    std::vector<long>::iterator\
    \ it;\n    for(int i = 0; i < arr.size(); i++) {\n        // If the list is empty\
    \ then insert first element\n        if(list.size() == 0) {\n            list.push_back(arr[i]);\n\
    \        }\n        else {\n            // Find the iterator pointing to the position\
    \ of the value to be inserted\n            it = std::lower_bound(list.begin(),\
    \ list.end(), arr[i]);\n            // Check whether the list is sorted or not\
    \ and the size of the list does not exceed k\n            if(std::is_sorted(list.begin(),\
    \ list.end()) && (list.size() <= k)) {\n                // If the iterator is\
    \ pointing to the end then insert the element at the end\n                if(it\
    \ == list.end()) {\n                    list.push_back(arr[i]);\n            \
    \    }\n                // If the iterator is pointing to the beginning then insert\
    \ the element at the beginning\n                else if(it == list.begin()) {\n\
    \                    list.insert(it, arr[i]);\n                }\n           \
    \     // If the element is greater than the element pointed by iterator, then\
    \ insert the element at the position\n                else if(arr[i] > *it) {\n\
    \                    list.insert(it, arr[i]);\n                }\n           \
    \     // If the element is less than the element pointed by iterator and list\
    \ size is less than k,\n                // then insert the element at the end\
    \ of the list\n                else if(arr[i] < *it && list.size() < k) {\n  \
    \                  list.push_back(arr[i]);\n                }\n              \
    \  // If the element is less than the element pointed by iterator and list size\
    \ is greater than k,\n                // then replace the element in the list\
    \ which is greater than the element to be inserted\n                else if(arr[i]\
    \ < *it && list.size() > k) {\n                    it = std::lower_bound(list.begin(),\
    \ list.end(), arr[i]);\n                    if(it != list.end()) {\n         \
    \               list.erase(it);\n                        list.push_back(arr[i]);\n\
    \                    }\n                }\n            }\n            // If the\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp83ug_8hl.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp83ug_8hl.cpp:60:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   60 | int main() {\n     \
    \ |            ^\n/tmp/tmp83ug_8hl.cpp:73:1: error: expected \u2018}\u2019 at\
    \ end of input\n   73 | }\n      | ^\n/tmp/tmp83ug_8hl.cpp:21:41: note: to match\
    \ this \u2018{\u2019\n   21 |     for(int i = 0; i < arr.size(); i++) {\n    \
    \  |                                         ^\n/tmp/tmp83ug_8hl.cpp:73:1: error:\
    \ expected \u2018}\u2019 at end of input\n   73 | }\n      | ^\n/tmp/tmp83ug_8hl.cpp:18:58:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmp83ug_8hl.cpp:73:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   73 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  // 1. Sorting the array: Time-Complexity: O(nlogn)\n  std::sort(arr.begin(),\
    \ arr.end());\n  std::vector<long> ans;\n  int n = arr.size();\n  // 2. Taking\
    \ last K elements: Time-Complexity: O(n)\n  for(int i = n-1; i >= 0 && k > 0;\
    \ --i) {\n    ans.push_back(arr[i]);\n    --k;\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_l3aph9w: /tmp/tmp_l3aph9w.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long len = arr.size();\n    std::vector<long> result;\n\
    \    if (len <= k) {\n        return arr;\n    }\n    for (long i = 0; i < k;\
    \ i++) {\n        long idx = 0;\n        for (long j = 1; j < len - i; j++) {\n\
    \            if (arr[j] > arr[idx]) {\n                idx = j;\n            }\n\
    \        }\n        result.push_back(arr[idx]);\n        arr[idx] = arr[len -\
    \ i - 1];\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp39zrcs2k: /tmp/tmp39zrcs2k.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long size = arr.size();\n    assert(k <= size);\n    std::priority_queue<long>\
    \ maxHeap;\n    for (int i = 0; i < size; i++) {\n        maxHeap.push(arr[i]);\n\
    \    }\n    std::vector<long> res;\n    while (k--) {\n        res.push_back(maxHeap.top());\n\
    \        maxHeap.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplees1u3h: /tmp/tmplees1u3h.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (long x : arr) {\n\
    \        pq.push(x);\n        if (pq.size() > k) pq.pop();\n    }\n    std::vector<long>\
    \ res;\n    while (!pq.empty()) {\n        res.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    std::reverse(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjn45ci4h: /tmp/tmpjn45ci4h.cpp:35: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    int len = arr.size();\n    std::vector<long> res;\n    if\
    \ (k == 0) {\n        return res;\n    }\n    if (k == len) {\n        return\
    \ arr;\n    }\n    std::make_heap(arr.begin(), arr.end());\n    int i = 1;\n \
    \   while (i < k) {\n        std::pop_heap(arr.begin(), arr.end());\n        arr.pop_back();\n\
    \        i++;\n    }\n    return arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7scyy494: /tmp/tmp7scyy494.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> mx;\n  for (auto el : arr) {\n    while\
    \ (mx.size() > 0 && el > mx.back() && mx.size()+arr.size()-1 > k) {\n      mx.pop_back();\n\
    \    }\n    if (mx.size() < k) mx.push_back(el);\n  }\n  return mx;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpllsbwfsj: /tmp/tmpllsbwfsj.cpp:30: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    std::vector<long> result;\n\
    \    for (auto num : arr) {\n        pq.push(num);\n        if (pq.size() > k)\
    \ {\n            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n    \
    \    result.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbyhj3kcd: /tmp/tmpbyhj3kcd.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> answer;\n  \
    \  assert(k <= n);\n    for (long i = 0; i < k; i++) {\n        answer.push_back(arr[i]);\n\
    \    }\n    std::sort(answer.begin(), answer.end());\n    for (long i = k; i <\
    \ n; i++) {\n        if (arr[i] > answer[0]) {\n            answer[0] = arr[i];\n\
    \            std::sort(answer.begin(), answer.end());\n        }\n    }\n    return\
    \ answer;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> heap;\n    std::vector<long> result;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        heap.push(arr[i]);\n   \
    \ }\n    for (long i = 0; i < k; i++) {\n        result.push_back(heap.top());\n\
    \        heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_efwq7ur: /tmp/tmp_efwq7ur.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(k <= arr.size());\n    std::vector<long> result;\n\
    \    std::priority_queue<long> pq;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        pq.push(arr[i]);\n    }\n    while (k--) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1wdfisna: /tmp/tmp1wdfisna.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        pq.push(arr[i]);\n    }\n    std::vector<long> result;\n   \
    \ while (k > 0) {\n        result.push_back(pq.top());\n        pq.pop();\n  \
    \      k--;\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpci03yl34: /tmp/tmpci03yl34.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    int size = arr.size();\n    std::vector<long> vec;\n   \
    \ for(int i = 0; i < size; i++) {\n        if(vec.size() == 0) {\n           \
    \ vec.push_back(arr[i]);\n        } else {\n            int sizeVec = vec.size();\n\
    \            int pos = sizeVec;\n            if(sizeVec > k) {\n             \
    \   pos = sizeVec - 1;\n            }\n            if(vec[pos - 1] < arr[i]) {\n\
    \                if(sizeVec == k) {\n                    vec.pop_back();\n   \
    \             }\n                while(pos > 0 && vec[pos - 1] < arr[i]) {\n \
    \                   vec[pos] = vec[pos - 1];\n                    pos--;\n   \
    \             }\n                vec[pos] = arr[i];\n            }\n        }\n\
    \    }\n    return vec;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp18xqwqvu: /tmp/tmp18xqwqvu.cpp:46: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::priority_queue<long> heap;\n  for (auto a : arr) {\n\
    \    heap.push(a);\n    if (heap.size() > k) {\n      heap.pop();\n    }\n  }\n\
    \  std::vector<long> result;\n  while (!heap.empty()) {\n    result.push_back(heap.top());\n\
    \    heap.pop();\n  }\n  std::reverse(result.begin(), result.end());\n  return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxfdez_0u: /tmp/tmpxfdez_0u.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (long x : arr) {\n\
    \        pq.push(x);\n        if (pq.size() > k) pq.pop();\n    }\n    std::vector<long>\
    \ ans;\n    while (!pq.empty()) {\n        ans.push_back(pq.top());\n        pq.pop();\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp093yg3q2: /tmp/tmp093yg3q2.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    std::priority_queue<long> pq;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n\
    \    for (long i = 0; i < k; i++) {\n        res.push_back(pq.top());\n      \
    \  pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjwtstivh: /tmp/tmpjwtstivh.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> result;\n  if (arr.size() == 0) {\n    return\
    \ result;\n  }\n  for (auto i = 0; i < k; i++) {\n    auto it = std::max_element(arr.begin(),\
    \ arr.end());\n    result.push_back(*it);\n    arr.erase(it);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqw8ka6e3: /tmp/tmpqw8ka6e3.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::vector<long>::iterator\
    \ it;\n    it = std::unique(arr.begin(), arr.end());\n    arr.resize(std::distance(arr.begin(),\
    \ it));\n    std::sort(arr.begin(), arr.end());\n    for(long i = arr.size() -\
    \ 1; i >= 0 && k > 0; i--) {\n        result.push_back(arr[i]);\n        k--;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpeqn36dja: /tmp/tmpeqn36dja.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> list;\n    if (arr.size() == 0) {\n  \
    \      return list;\n    }\n    std::priority_queue<long> pq;\n    // Build a\
    \ max heap from the numbers in arr\n    for (long num : arr) {\n        pq.push(num);\n\
    \    }\n    // Get the kth maximum numbers from the max heap\n    for (long i\
    \ = 0; i < k; i++) {\n        list.push_back(pq.top());\n        pq.pop();\n \
    \   }\n    return list;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpha9orax9: /tmp/tmpha9orax9.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> res;\n  for (long el : arr) {\n    while\
    \ (!res.empty() && el > res.back() && res.size() + arr.size() - std::find(arr.begin(),\
    \ arr.end(), el) >= k)\n      res.pop_back();\n    res.push_back(el);\n  }\n \
    \ res.resize(k);\n  return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy5lxwyrc.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpy5lxwyrc.cpp:21:71: error: no match for \u2018\
    operator-\u2019 (operand types are \u2018std::vector<long int>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   21 |     while (!res.empty() && el\
    \ > res.back() && res.size() + arr.size() - std::find(arr.begin(), arr.end(),\
    \ el) >= k)\n      |                                               ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                           \
    \                               |                       |\n      |           \
    \                                               |                       __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n      |                                     \
    \                     std::vector<long int>::size_type {aka long unsigned int}\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpy5lxwyrc.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:974:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ decltype ((__lhs.base() - __rhs.base())) __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\
    \n  974 |     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:974:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpy5lxwyrc.cpp:21:109: note:\
    \   mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    }\n   21 |     while (!res.empty() && el > res.back() && res.size() + arr.size()\
    \ - std::find(arr.begin"
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (auto a : arr) {\n\
    \        pq.push(a);\n        if (pq.size() > k) {\n            pq.pop();\n  \
    \      }\n    }\n    std::vector<long> ans;\n    while (k--) {\n        ans.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    std::reverse(ans.begin(), ans.end());\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpe8v2365y: /tmp/tmpe8v2365y.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    -4, 4})), (2)) == (std::vector<long>({4, 4}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ret;\n    long ret_size = 0;\n    while\
    \ (ret_size < k) {\n        long max_idx = 0;\n        for (long i = 0; i < arr.size();\
    \ i++) {\n            if (ret_size > 0 && ret[ret_size - 1] > arr[i]) {\n    \
    \            continue;\n            }\n            if (arr[i] > arr[max_idx])\
    \ {\n                max_idx = i;\n            }\n        }\n        ret.push_back(arr[max_idx]);\n\
    \        ret_size++;\n        arr.erase(arr.begin() + max_idx);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpk3g303l0: /tmp/tmpk3g303l0.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        pq.push(arr[i]);\n    }\n    std::vector<long> result;\n\
    \    for (long i = 0; i < k; i++) {\n        result.push_back(pq.top());\n   \
    \     pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0wazhcyi: /tmp/tmp0wazhcyi.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150429
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for (auto num : arr) {\n        pq.push(num);\n        if (pq.size()\
    \ > k) {\n            pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n\
    \        result.push_back(pq.top());\n        pq.pop();\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpc0s8eizi: /tmp/tmpc0s8eizi.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  long n = arr.size();\n  assert(n > 0);\n  assert(k > 0);\n\
    \  std::priority_queue<long> q;\n  for (long i = 0; i < n; i++) {\n    q.push(arr[i]);\n\
    \  }\n  std::vector<long> output;\n  for (long i = 0; i < k; i++) {\n    output.push_back(q.top());\n\
    \    q.pop();\n  }\n  return output;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpns5_99ba: /tmp/tmpns5_99ba.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    std::priority_queue<long>\
    \ pq;\n    for (int i = 0; i < arr.size(); i++) {\n        pq.push(arr[i]);\n\
    \    }\n    for (int i = 0; i < k; i++) {\n        result.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpz5dw5ynb: /tmp/tmpz5dw5ynb.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150434
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    for (long i = 0; i < k; i++)\
    \ {\n        result.push_back(arr[i]);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    for (long i = k; i < arr.size(); i++) {\n        for (long j = 0; j < k;\
    \ j++) {\n            if (arr[i] > result[j]) {\n                result[j] = arr[i];\n\
    \                break;\n            }\n        }\n        std::sort(result.begin(),\
    \ result.end());\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660150435
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> result;\n  // Create a priority queue q\
    \ that sorts in descending order\n  std::priority_queue<long, std::vector<long>,\
    \ std::greater<long>> q;\n  // For every element in arr\n  for (long i = 0; i\
    \ < arr.size(); i++) {\n    // If the number of elements in q is less than k,\
    \ add the element to q\n    if (q.size() < k) {\n      q.push(arr[i]);\n    }\
    \ else {\n      // If the element is greater than the minimum in q\n      if (arr[i]\
    \ > q.top()) {\n        // Remove the minimum from q and add the element to q\n\
    \        q.pop();\n        q.push(arr[i]);\n      }\n    }\n  }\n  // Transfer\
    \ the elements from q to result\n  while (!q.empty()) {\n    result.push_back(q.top());\n\
    \    q.pop();\n  }\n  return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> output;\n    for (auto a : arr) {\n  \
    \      // if curr output size is < k, then add a directly\n        if (output.size()\
    \ < k) {\n            output.push_back(a);\n        } else {\n            std::sort(output.begin(),\
    \ output.end());\n            // if current output size is k and the last element\
    \ is smaller than a, then swap a and the last element.\n            if (output[output.size()\
    \ - 1] < a) {\n                output[output.size() - 1] = a;\n            }\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8l11q12u: /tmp/tmp8l11q12u.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ret;\n    if (arr.size() == 0) return\
    \ ret;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        pq.push(arr[i]);\n    }\n    for (int i = 0; i < k; i++) {\n\
    \        ret.push_back(pq.top());\n        pq.pop();\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptll8ur27: /tmp/tmptll8ur27.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    if (arr.size() == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    std::deque<long> maximum_heap;\n    for (auto itr = arr.begin();\
    \ itr != arr.end(); ++itr) {\n        if (maximum_heap.size() < k) {\n       \
    \     maximum_heap.push_back(*itr);\n            std::push_heap(maximum_heap.begin(),\
    \ maximum_heap.end(), std::greater<long>());\n        } else {\n            if\
    \ (*itr > maximum_heap.front()) {\n                std::pop_heap(maximum_heap.begin(),\
    \ maximum_heap.end(), std::greater<long>());\n                maximum_heap.pop_back();\n\
    \                maximum_heap.push_back(*itr);\n                std::push_heap(maximum_heap.begin(),\
    \ maximum_heap.end(), std::greater<long>());\n            }\n        }\n    }\n\
    \    result.insert(result.begin(), maximum_heap.begin(), maximum_heap.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmtjkt5hv: /tmp/tmpmtjkt5hv.cpp:45: int main(): Assertion `candidate((std::vector<long>({123,
    -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::priority_queue<long> max_heap;\n  std::vector<long> result;\n\
    \  for (const auto &el : arr) {\n    max_heap.push(el);\n    if (max_heap.size()\
    \ > k) {\n      max_heap.pop();\n    }\n  }\n  for (long i = 0; i < k; ++i) {\n\
    \    result.push_back(max_heap.top());\n    max_heap.pop();\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptm0sbsgd: /tmp/tmptm0sbsgd.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Build a max heap with the first k elements.\n    std::priority_queue<long>\
    \ heap;\n    for (long i = 0; i < k; i++) {\n        heap.push(arr[i]);\n    }\n\
    \    // Start iterating over the remaining elements.\n    for (long i = k; i <\
    \ arr.size(); i++) {\n        // If the current element is smaller than the\n\
    \        // top of the heap, ignore it.\n        if (arr[i] < heap.top()) {\n\
    \            continue;\n        }\n        // If the current element is larger\
    \ than the top of the heap,\n        // pop the top of the heap, and insert the\
    \ current element\n        // in its place.\n        heap.pop();\n        heap.push(arr[i]);\n\
    \    }\n    // Pop off the elements from the heap and store it in a vector.\n\
    \    std::vector<long> result;\n    while (!heap.empty()) {\n        result.push_back(heap.top());\n\
    \        heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpm_h568x1: /tmp/tmpm_h568x1.cpp:47: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // return a vector with maximum k values\n    // brute force:\
    \ sort the array and return first k elements\n\n    std::sort(arr.begin(), arr.end());\n\
    \n    std::vector<long> ans;\n    for(long i = arr.size() - 1; i >= arr.size()\
    \ - k; i--) {\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::priority_queue<long> queue;\n  std::vector<long> result;\n\
    \  if (arr.size() == 0) {\n    return result;\n  }\n  for (auto num : arr) {\n\
    \    queue.push(num);\n  }\n  for (long i = 0; i < k; i++) {\n    result.push_back(queue.top());\n\
    \    queue.pop();\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqaddko_5: /tmp/tmpqaddko_5.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> maxes(k);\n    int j = 0;\n    for (long\
    \ i : arr) {\n        while (j > 0 && maxes[j - 1] < i && j + arr.size() - k >=\
    \ 0) {\n            j--;\n        }\n        if (j < k) {\n            maxes[j]\
    \ = i;\n            j++;\n        }\n    }\n    return maxes;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpc9xhjnpp: /tmp/tmpc9xhjnpp.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    if (arr.size() < k) {\n \
    \       return result;\n    }\n    std::priority_queue<long> pq;\n    for (auto\
    \ e : arr) {\n        pq.push(e);\n    }\n    while (!pq.empty() && k > 0) {\n\
    \        result.push_back(pq.top());\n        pq.pop();\n        k--;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpedyu9kly: /tmp/tmpedyu9kly.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> queue;\n    for (const auto& element\
    \ : arr) {\n        queue.push(element);\n    }\n    std::vector<long> result;\n\
    \    for (int i = 0; i < k; ++i) {\n        result.push_back(queue.top());\n \
    \       queue.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpt6n8ipgw: /tmp/tmpt6n8ipgw.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  std::vector<long> res;\n  std::priority_queue<long> pq;\n\
    \  for (auto i : arr) {\n    pq.push(i);\n  }\n  while (k--) {\n    res.push_back(pq.top());\n\
    \    pq.pop();\n  }\n  return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsyqbd77h: /tmp/tmpsyqbd77h.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::deque<long> q;\n    for (auto it = arr.begin(); it\
    \ != arr.end(); ++it) {\n        while (q.size() && *it > q.back()) {\n      \
    \      q.pop_back();\n        }\n        q.push_back(*it);\n        if (q.size()\
    \ > k) {\n            q.pop_front();\n        }\n    }\n    std::vector<long>\
    \ result;\n    while (q.size()) {\n        result.push_back(q.front());\n    \
    \    q.pop_front();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0i78115l: /tmp/tmp0i78115l.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    assert(k <= arr.size());\n    if (k == arr.size()) return\
    \ arr;\n    std::vector<long> ans;\n    std::priority_queue<long> pq;\n    for\
    \ (int i = 0; i < k; i++) {\n        pq.push(arr[i]);\n    }\n    for (int i =\
    \ k; i < arr.size(); i++) {\n        if (arr[i] > pq.top()) {\n            pq.pop();\n\
    \            pq.push(arr[i]);\n        }\n    }\n    while (!pq.empty()) {\n \
    \       ans.push_back(pq.top());\n        pq.pop();\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvcojk44p: /tmp/tmpvcojk44p.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150435
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> v;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        // the list is empty\n        if(v.size() == 0) {\n        \
    \    v.push_back(arr[i]);\n        } else {\n            // if the next element\
    \ is greater than the last element in the list\n            if(arr[i] > v[v.size()\
    \ - 1]) {\n                // then pop the last element as many times as possible\n\
    \                while(v.size() > 0 && arr[i] > v[v.size() - 1]) {\n         \
    \           v.pop_back();\n                }\n                v.push_back(arr[i]);\n\
    \            } else {\n                // the next element is not greater than\
    \ the last element in the list\n                v.push_back(arr[i]);\n       \
    \     }\n        }\n        // if the size of the list exceeds k\n        if(v.size()\
    \ > k) {\n            // then pop the last element until the size of the list\
    \ is equal to k\n            while(v.size() > k) {\n                v.pop_back();\n\
    \            }\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpuf887qv_: /tmp/tmpuf887qv_.cpp:49: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Insert into a heap and keep the heap size to k\n    auto\
    \ cmp = [](const long& a, const long& b) {\n        return a > b;\n    };\n  \
    \  std::priority_queue<long, std::vector<long>, decltype(cmp)> heap(cmp);\n  \
    \  for (long& val : arr) {\n        heap.push(val);\n        if (heap.size() >\
    \ k) {\n            heap.pop();\n        }\n    }\n    std::vector<long> result;\n\
    \    while (!heap.empty()) {\n        result.push_back(heap.top());\n        heap.pop();\n\
    \    }\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu_doro6d: /tmp/tmpu_doro6d.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> output;\n    long size = arr.size();\n\
    \    if (size == 0) {\n        return output;\n    }\n    std::sort(arr.begin(),\
    \ arr.end());\n    long i = size - 1;\n    long j = 0;\n    while (i >= j && output.size()\
    \ < k) {\n        if (abs(arr[i]) > abs(arr[j])) {\n            output.push_back(arr[i]);\n\
    \            i--;\n        } else {\n            output.push_back(arr[j]);\n \
    \           j++;\n        }\n    }\n    return output;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpekjgp3e0: /tmp/tmpekjgp3e0.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> result;\n\
    \    int n = arr.size();\n    std::priority_queue<long> pq;\n    for(int i = 0;\
    \ i < n; i++) {\n        pq.push(arr[i]);\n    }\n    for(int i = 0; i < k; i++)\
    \ {\n        result.push_back(pq.top());\n        pq.pop();\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnnl6a3ld: /tmp/tmpnnl6a3ld.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> output;\n    if (arr.size() == 0) return\
    \ output;\n    std::priority_queue<long> pq;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        pq.push(arr[i]);\n        if (pq.size() > k) {\n           \
    \ pq.pop();\n        }\n    }\n    while (!pq.empty()) {\n        output.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return output;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpr8x2fj7h: /tmp/tmpr8x2fj7h.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> max_heap;\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < arr.size(); i++) {\n        max_heap.push(arr[i]);\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(max_heap.top());\n\
    \        max_heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfgqcv1jp: /tmp/tmpfgqcv1jp.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> pq;\n    long N = arr.size();\n\
    \    for (long i = 0; i < N; i++) {\n        pq.push(arr[i]);\n    }\n    std::vector<long>\
    \ ans;\n    for (long i = 0; i < k; i++) {\n        ans.push_back(pq.top());\n\
    \        pq.pop();\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpz9b87m8h: /tmp/tmpz9b87m8h.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    // TODO: Write your code\
    \ here\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpynt0gyrb: /tmp/tmpynt0gyrb.cpp:25: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // create max heap\n    std::make_heap(arr.begin(), arr.end());\n\
    \    // pop k elements\n    for (int i = 0; i < k; i++) {\n        std::pop_heap(arr.begin(),\
    \ arr.end());\n        arr.pop_back();\n    }\n    // sort the elements\n    std::sort(arr.begin(),\
    \ arr.end());\n    return arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgx4fhb_f: /tmp/tmpgx4fhb_f.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::priority_queue<long> heap;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        heap.push(arr[i]);\n    }\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < k; i++) {\n        result.push_back(heap.top());\n\
    \        heap.pop();\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpog31a2w1: /tmp/tmpog31a2w1.cpp:32: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150432
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    for (int i = 0; i < k; i++)\
    \ {\n        int maxIndex = -1;\n        long maxValue = LONG_MIN;\n        for\
    \ (int j = 0; j < arr.size(); j++) {\n            if (arr[j] > maxValue) {\n \
    \               maxValue = arr[j];\n                maxIndex = j;\n          \
    \  }\n        }\n        result.push_back(maxValue);\n        arr.erase(arr.begin()\
    \ + maxIndex);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpadi9f3ew: /tmp/tmpadi9f3ew.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // build max heap\n    std::make_heap(arr.begin(), arr.end());\n\
    \    std::vector<long> result;\n    for (long i = 0; i < k; i++) {\n        result.push_back(arr.front());\n\
    \        std::pop_heap(arr.begin(), arr.end());\n        arr.pop_back();\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpe1j27n3y: /tmp/tmpe1j27n3y.cpp:31: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::sort(arr.begin(), arr.end());\n    return std::vector<long>(arr.rbegin(),\
    \ arr.rbegin() + k);\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6c9eqxf4: /tmp/tmp6c9eqxf4.cpp:24: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    res.reserve(k);\n    for (auto\
    \ i = 0; i < arr.size(); ++i) {\n        for (auto j = res.size() - 1; j >= 0;\
    \ --j) {\n            if (res[j] < arr[i]) {\n                res.insert(res.begin()\
    \ + j + 1, arr[i]);\n                if (res.size() > k) res.pop_back();\n   \
    \             break;\n            }\n        }\n        if (res.size() < k) res.insert(res.begin(),\
    \ arr[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> answer;\n    for (long i = 0; i < k; i++)\
    \ {\n        long max = arr[i];\n        long pos = i;\n        for (long j =\
    \ i + 1; j < arr.size(); j++) {\n            if (arr[j] > max) {\n           \
    \     max = arr[j];\n                pos = j;\n            }\n        }\n    \
    \    answer.push_back(max);\n        std::swap(arr[i], arr[pos]);\n    }\n   \
    \ return answer;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpr4gl1lr7: /tmp/tmpr4gl1lr7.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150436
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n  if (arr.size() == 0) {\n    return {};\n  }\n  std::priority_queue<long>\
    \ max_heap;\n  for (long long i = 0; i < arr.size(); i++) {\n    max_heap.push(arr[i]);\n\
    \  }\n  std::vector<long> res;\n  while (k--) {\n    res.push_back(max_heap.top());\n\
    \    max_heap.pop();\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5h_iwa84: /tmp/tmp5h_iwa84.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,
    -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))'' failed.

    '
  stdout: ''
  timestamp: 1660150437
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max;\n    for (long i = 0; i < k; i++)\
    \ {\n        max.push_back(arr[i]);\n    }\n    std::sort(max.begin(), max.end());\n\
    \    for (long i = k; i < arr.size(); i++) {\n        if (arr[i] > max[0]) {\n\
    \            max[0] = arr[i];\n            std::sort(max.begin(), max.end());\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660150437
