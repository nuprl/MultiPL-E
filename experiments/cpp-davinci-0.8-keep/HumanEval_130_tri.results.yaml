language: cpp
name: HumanEval_130_tri
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // your code\n  std::vector<long> res;\n  if(n == 0)\n    return res;\n\
    \  res.push_back(1);\n  if(n == 1)\n    return res;\n  res.push_back(3);\n  if(n\
    \ == 2)\n    return res;\n  res.push_back(2);\n  long index = 3;\n  while(index\
    \ <= n)\n  {\n    if(index % 2 == 0)\n      res.push_back(1 + index / 2);\n  \
    \  else\n      res.push_back(res[index - 1] + res[index - 2] + res[index + 1]);\n\
    \    index++;\n  }\n  return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpjtjsv9i9: /tmp/tmpjtjsv9i9.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tassert(n >= 0);\n\tstd::vector<long> result = {1, 3, 2};\n\tfor (long\
    \ i = 2; i < n; i++) {\n\t\tresult.push_back(result[i - 1] + result[i - 2] + result[i]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpk6s81d1_: /tmp/tmpk6s81d1_.cpp:28: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> myvec;\n    myvec.push_back(1);\n    myvec.push_back(3);\n\
    \    myvec.push_back(2);\n    myvec.push_back(8);\n    while(myvec.size() < n\
    \ + 1) {\n        int sum = 0;\n        for(int i = myvec.size() - 1; i > myvec.size()\
    \ - 4; i--) {\n            sum += myvec[i];\n        }\n        myvec.push_back(sum);\n\
    \    }\n    return myvec;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpzp8xue6p: /tmp/tmpzp8xue6p.cpp:36: int main(): Assertion `candidate((4))
    == (std::vector<long>({1, 3, 2, 8, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> seq;\n    seq.push_back(1);\n    seq.push_back(3);\n\
    \    seq.push_back(2);\n    seq.push_back(8);\n    long num = 8;\n    long num1\
    \ = 2;\n    long num2 = 3;\n    long num3 = 1;\n    for(int i = 4; i <= n; i++){\n\
    \        if(i % 2 == 0){\n            num = (1 + (i / 2));\n            seq.push_back(num);\n\
    \        }\n        else{\n            num = (num1 + num2 + num3);\n         \
    \   seq.push_back(num);\n            num3 = num2;\n            num2 = num1;\n\
    \            num1 = num;\n        }\n    }\n    return seq;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpzmpnpjcb: /tmp/tmpzmpnpjcb.cpp:47: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  if(n == 0) return v;\n  v.push_back(1);\n  if(n\
    \ == 1) return v;\n  v.push_back(3);\n  if(n == 2) return v;\n  v.push_back(2);\n\
    \  for(int i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n      v.push_back(1 +\
    \ i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpwh406b70: /tmp/tmpwh406b70.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    if(n > 0)\n    {\n\
    \        v.push_back(3);\n        if(n > 1)\n        {\n            v.push_back(2);\n\
    \            if(n > 2)\n            {\n                for(int i = 3; i <= n;\
    \ i++)\n                {\n                    if(i % 2 == 0)\n              \
    \      {\n                        v.push_back(1 + i / 2);\n                  \
    \  }\n                    else\n                    {\n                      \
    \  v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpjg9x0_xa: /tmp/tmpjg9x0_xa.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  long arr[3] = { 1, 2, 3 };\n  std::vector<long> v(n + 1);\n  v[0] =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    v[i] = arr[i % 3];\n    arr[i % 3]\
    \ =\n        (i % 2) ? arr[(i - 1) % 3] + arr[(i - 2) % 3] + arr[(i + 1) % 3]\
    \ : 1 + i / 2;\n  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpkeo6x4up: /tmp/tmpkeo6x4up.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tif (n >= 1) {\n\t\tresult.push_back(1);\n\
    \t}\n\tif (n >= 2) {\n\t\tresult.push_back(3);\n\t}\n\tif (n >= 3) {\n\t\tresult.push_back(2);\n\
    \t}\n\tfor (long i = 3; i < n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(1\
    \ + i / 2);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpgf3d0w_5: /tmp/tmpgf3d0w_5.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // your code here\n  std::vector<long> v;\n  if(n == 0)\n      return\
    \ v;\n  else if(n == 1)\n      return {1};\n  else if(n == 2)\n      return {1,3};\n\
    \  else\n  {\n      v.push_back(1);\n      v.push_back(3);\n      v.push_back(2);\n\
    \      for(int i = 3; i <= n; i++)\n      {\n          long element;\n       \
    \   if(i % 2 == 0)\n          {\n              element = 1 + i / 2;\n        \
    \  }\n          else\n          {\n              element = v[i - 1] + v[i - 2]\
    \ + v[i + 1];\n          }\n          v.push_back(element);\n      }\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpune7t5cc: /tmp/tmpune7t5cc.cpp:50: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  //..\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp13qgk63w: /tmp/tmp13qgk63w.cpp:23: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    if (n == 1)\n        return result;\n    if (n\
    \ == 2)\n        return result;\n    for (int i = 0; i < n - 2; i++) {\n     \
    \   long a = result[i];\n        long b = result[i + 1];\n        long c = result[i\
    \ + 2];\n        long tmp = a + b + c;\n        result.push_back(tmp);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpro1amas3: /tmp/tmpro1amas3.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> trib(n+1);\n  if(n < 1) return trib;\n  trib[0] =\
    \ 1;\n  if(n == 1) return trib;\n  trib[1] = 3;\n  if(n == 2) return trib;\n \
    \ trib[2] = 2;\n  for(long i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n     \
    \ trib[i] = trib[i-2] + trib[i-1] + trib[i+1];\n    } else {\n      trib[i] =\
    \ 1 + i / 2;\n    }\n  }\n  return trib;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp0lug633x: /tmp/tmp0lug633x.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> ans;\n\tans.push_back(1);\n\tans.push_back(3);\n\t\
    ans.push_back(2);\n\tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\
    \t\tans.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tans.push_back(ans[i -\
    \ 1] + ans[i - 2] + ans[i + 1]);\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpw8m7r5a6: /tmp/tmpw8m7r5a6.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v{1, 3, 2};\n  if (n < 3) {\n    v.resize(n + 1);\n\
    \    return v;\n  }\n  for (int i = 3; i <= n; i++) {\n    long l = (i % 2) ?\
    \ v[i - 1] + v[i - 2] + v[i + 1] : (1 + i / 2);\n    v.push_back(l);\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp2_i646yl: /tmp/tmp2_i646yl.cpp:32: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  long a = 3, b = 2, c = 1;\n  for (long i = 3; i <=\
    \ n; i++) {\n    if (i % 2 == 0) {\n      a = i / 2;\n    } else {\n      a =\
    \ b + c + a;\n    }\n    result.push_back(a);\n    c = b;\n    b = a;\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp5g6448r8: /tmp/tmp5g6448r8.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v(n+1);\n    if(n==0) return v;\n    v[0]=1;\n \
    \   if(n==1) return v;\n    v[1]=3;\n    if(n==2) return v;\n    v[2]=2;\n   \
    \ if(n==3) return v;\n    for(int i=3;i<=n;i++){\n        if(i%2==0)\n       \
    \     v[i]=1+i/2;\n        else\n            v[i]=v[i-1]+v[i-2]+v[i+1];\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpmv57mo3t: /tmp/tmpmv57mo3t.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  if(n == 0) return v;\n  v.push_back(1);\n  if(n\
    \ == 1) return v;\n  v.push_back(3);\n  if(n == 2) return v;\n  v.push_back(2);\n\
    \  if(n == 3) return v;\n  for(int i = 3; i < n; i++) {\n    v.push_back( v[i\
    \ - 1] + v[i - 2] + v[i - 3]);\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp5fazg1nd: /tmp/tmp5fazg1nd.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // your code here\n  std::vector<long> res;\n  res.push_back(1);\n \
    \ for(long i = 1; i < n; i++) {\n    if(i % 2 == 0) {\n      res.push_back(1 +\
    \ i / 2);\n    } else {\n      res.push_back(res[i - 1] + res[i - 2] + res[i +\
    \ 1]);\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpv31k58ti: /tmp/tmpv31k58ti.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> nums(n+1);\n    if(n>=1) nums[1] = 3;\n    if(n>=2)\
    \ nums[2] = 2;\n    if(n>=3) nums[3] = 8;\n    for(int i=4;i<=n;i++){\n      \
    \  nums[i] = nums[i-1] + nums[i-2] + nums[i-3];\n    }\n    return nums;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpfn72wzni: /tmp/tmpfn72wzni.cpp:30: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> nums;\n\tfor (int i = 0; i <= n; i++) {\n\t\tif (i\
    \ == 0) nums.push_back(1);\n\t\telse if (i == 1) nums.push_back(3);\n\t\telse\
    \ if (i == 2) nums.push_back(2);\n\t\telse {\n\t\t\tif (i % 2 == 0) nums.push_back(1\
    \ + i / 2);\n\t\t\telse nums.push_back(nums[i - 1] + nums[i - 2] + nums[i + 1]);\n\
    \t\t}\n\t}\n\treturn nums;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpko78jxxj: /tmp/tmpko78jxxj.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) return {1};\n    std::vector<long> res{1,3,2};\n    int\
    \ i = 3;\n    while(i < n){\n        if(i % 2 == 0) res.push_back(res[i] / 2);\n\
    \        else res.push_back(res[i-1] + res[i-2] + res[i+1]);\n        i++;\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpv1ly2qzz: /tmp/tmpv1ly2qzz.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) {\n        return {0};\n    } else if(n == 1) {\n     \
    \   return {1, 3};\n    } else if(n == 2) {\n        return {1, 3, 2};\n    }\
    \ else {\n        std::vector<long> tribonacci;\n        tribonacci.push_back(1);\n\
    \        tribonacci.push_back(3);\n        tribonacci.push_back(2);\n        while(n--)\
    \ {\n            long last = tribonacci.back();\n            long secondLast =\
    \ tribonacci[tribonacci.size() - 2];\n            long thirdLast = tribonacci[tribonacci.size()\
    \ - 3];\n            if(last % 2 == 0) {\n                tribonacci.push_back(1\
    \ + last / 2);\n            } else {\n                tribonacci.push_back(last\
    \ + secondLast + thirdLast);\n            }\n        }\n        return tribonacci;\n\
    \    }\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp_m6fj625: /tmp/tmp_m6fj625.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  result.push_back(8);\n  long cur = 4;\n  while\
    \ (cur < n) {\n    long cur_val = 0;\n    if (cur % 2 == 0) {\n      cur_val =\
    \ 1 + cur / 2;\n    } else {\n      cur_val = result[cur - 1] + result[cur - 2]\
    \ + result[cur + 1];\n    }\n    result.push_back(cur_val);\n    cur++;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpn1fm1xg6: /tmp/tmpn1fm1xg6.cpp:51: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long cur,prev2=0,prev1=0,prev=1;\n   \
    \ if(n>=1)\n    {\n        cur=1;\n        res.push_back(cur);\n    }\n    if(n>=2)\n\
    \    {\n        cur=3;\n        res.push_back(cur);\n    }\n    if(n>=3)\n   \
    \ {\n        cur=2;\n        res.push_back(cur);\n    }\n    for(int i=3;i<n;i++)\n\
    \    {\n        if(i%2)\n        {\n            cur=prev2+prev1+prev;\n      \
    \      res.push_back(cur);\n            prev2=prev1;\n            prev1=prev;\n\
    \            prev=cur;\n        }\n        else\n        {\n            cur=1+i/2;\n\
    \            res.push_back(cur);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpuj47aipm: /tmp/tmpuj47aipm.cpp:56: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v1 = { 1, 3, 2 };\n\tstd::vector<long> v2;\n\tif (n\
    \ == 0) {\n\t\tv2.push_back(1);\n\t\treturn v2;\n\t}\n\telse if (n == 1) {\n\t\
    \tv2.push_back(1);\n\t\tv2.push_back(3);\n\t\treturn v2;\n\t}\n\telse if (n ==\
    \ 2) {\n\t\tv2.push_back(1);\n\t\tv2.push_back(3);\n\t\tv2.push_back(2);\n\t\t\
    return v2;\n\t}\n\telse {\n\t\tlong a = 1, b = 3, c = 2, d;\n\t\tv2.push_back(a);\n\
    \t\tv2.push_back(b);\n\t\tv2.push_back(c);\n\t\tfor (int i = 3; i <= n; i++) {\n\
    \t\t\tif (i % 2 == 0) {\n\t\t\t\td = a + b + c;\n\t\t\t\tv2.push_back(d);\n\t\t\
    \t\ta = b;\n\t\t\t\tb = c;\n\t\t\t\tc = d;\n\t\t\t}\n\t\t\telse {\n\t\t\t\td =\
    \ (i + 1) / 2;\n\t\t\t\tv2.push_back(d);\n\t\t\t\ta = b;\n\t\t\t\tb = c;\n\t\t\
    \t\tc = d;\n\t\t\t}\n\t\t}\n\t\treturn v2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpst83e_pl: /tmp/tmpst83e_pl.cpp:62: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tribo;\n    if(n < 1)\n    {\n        return tribo;\n\
    \    }\n    tribo.push_back(1);\n    if(n == 1)\n    {\n        return tribo;\n\
    \    }\n    tribo.push_back(3);\n    if(n == 2)\n    {\n        return tribo;\n\
    \    }\n    tribo.push_back(2);\n    if(n == 3)\n    {\n        return tribo;\n\
    \    }\n    long long prev = 2;\n    long long pp = 3;\n    long long ppp = 1;\n\
    \    long long sum = 0;\n    for(int i = 3; i < n; i++)\n    {\n        sum =\
    \ prev + pp + ppp;\n        ppp = pp;\n        pp = prev;\n        prev = sum;\n\
    \        tribo.push_back(sum);\n    }\n    return tribo;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpokh_ub94: /tmp/tmpokh_ub94.cpp:55: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v(n + 1);\n  v[0] = 1;\n  v[1] = 3;\n  v[2] = 2;\n\
    \  for (long i = 3; i <= n; i++) {\n    v[i] = i % 2 == 0 ? 1 + i / 2 : v[i -\
    \ 1] + v[i - 2] + v[i + 1];\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp23mq8287: /tmp/tmp23mq8287.cpp:30: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> ans;\n  if(n==0) return ans;\n  ans.push_back(1);\n\
    \  if(n==1) return ans;\n  ans.push_back(3);\n  if(n==2) return ans;\n  ans.push_back(2);\n\
    \  long prev=2,prev2=3,prev3=1;\n  for(int i=3;i<=n;i++){\n    if(i%2==0){\n \
    \     long temp = i/2;\n      ans.push_back(temp);\n      prev3=prev2;\n     \
    \ prev2=prev;\n      prev=temp;\n    }\n    else{\n      long temp = prev+prev2+prev3;\n\
    \      ans.push_back(temp);\n      prev3=prev2;\n      prev2=prev;\n      prev=temp;\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmppr78zx3y: /tmp/tmppr78zx3y.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tri;\n    tri.push_back(1);\n    tri.push_back(3);\n\
    \    tri.push_back(2);\n    long i = 3;\n    if(n == 0) {\n        tri.erase(tri.begin());\n\
    \        tri.erase(tri.begin());\n        tri.erase(tri.begin());\n        return\
    \ tri;\n    }\n    else if(n == 1) {\n        tri.erase(tri.begin());\n      \
    \  tri.erase(tri.begin());\n        return tri;\n    }\n    else if(n == 2) {\n\
    \        tri.erase(tri.begin());\n        return tri;\n    }\n    while(i <= n)\
    \ {\n        if(i % 2 == 0) {\n            tri.push_back(1 + i / 2);\n       \
    \ }\n        else {\n            tri.push_back(tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1]);\n        }\n        i++;\n    }\n    return tri;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpz83xyh1m: /tmp/tmpz83xyh1m.cpp:52: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tv.push_back(1);\n\tv.push_back(3);\n\tv.push_back(2);\n\
    \tv.push_back(8);\n\tfor (int i = 3; i < n; i++) {\n\t\tif (i % 2 == 0)\n\t\t\t\
    v.push_back(v[i] + 1 + i / 2);\n\t\telse\n\t\t\tv.push_back(v[i - 1] + v[i - 2]\
    \ + v[i + 1]);\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp5ot_gvuq: /tmp/tmp5ot_gvuq.cpp:35: int main(): Assertion `candidate((4))
    == (std::vector<long>({1, 3, 2, 8, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1, b = 3, c = 2;\n    if (n\
    \ > 0) {\n        result.push_back(a);\n    }\n    if (n > 1) {\n        result.push_back(b);\n\
    \    }\n    if (n > 2) {\n        result.push_back(c);\n    }\n    long d;\n \
    \   for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            d =\
    \ 1 + i / 2;\n        } else {\n            d = a + b + c;\n        }\n      \
    \  a = b;\n        b = c;\n        c = d;\n        result.push_back(d);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpibhzjgei: /tmp/tmpibhzjgei.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tif (n > 0) {\n\t\tif (n % 2 == 0)\n\t\t\
    \tresult.push_back(1 + n / 2);\n\t\telse\n\t\t\tresult.push_back(3);\n\t\tfor\
    \ (long i = 2; i <= n; i++) {\n\t\t\tif (i % 2 == 0)\n\t\t\t\tresult.push_back(1\
    \ + i / 2);\n\t\t\telse\n\t\t\t\tresult.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpp3e2th8u: /tmp/tmpp3e2th8u.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v{1, 3, 2};\n  if (n <= 2) {\n    v.resize(n + 1);\n\
    \    return v;\n  }\n  for (int i = 3; i <= n; ++i) {\n    v.push_back(v[i - 1]\
    \ + v[i - 2] + v[i - 3]);\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpxkb59epo: /tmp/tmpxkb59epo.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    vector<long> v;\n    for(int i=0;i<=n;i++){\n        if(i==0){\n \
    \           v.push_back(1);\n        }\n        else if(i==1){\n            v.push_back(3);\n\
    \        }\n        else if(i==2){\n            v.push_back(2);\n        }\n \
    \       else if(i%2==0){\n            v.push_back(1+i/2);\n        }\n       \
    \ else{\n            v.push_back(v[i-1]+v[i-2]+v[i+1]);\n        }\n    }\n  \
    \  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7wp5r4gz.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp7wp5r4gz.cpp:19:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   19 |     vector<long> v;\n      |     ^~~~~~\n/tmp/tmp7wp5r4gz.cpp:19:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7wp5r4gz.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7wp5r4gz.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp7wp5r4gz.cpp:19:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |     vector<long>\
    \ v;\n      |            ^~~~\n/tmp/tmp7wp5r4gz.cpp:22:13: error: \u2018v\u2019\
    \ was not declared in this scope\n   22 |             v.push_back(1);\n      |\
    \             ^\n/tmp/tmp7wp5r4gz.cpp:25:13: error: \u2018v\u2019 was not declared\
    \ in this scope\n   25 |             v.push_back(3);\n      |             ^\n\
    /tmp/tmp7wp5r4gz.cpp:28:13: error: \u2018v\u2019 was not declared in this scope\n\
    \   28 |             v.push_back(2);\n      |             ^\n/tmp/tmp7wp5r4gz.cpp:31:13:\
    \ error: \u2018v\u2019 was not declared in this scope\n   31 |             v.push_back(1+i/2);\n\
    \      |             ^\n/tmp/tmp7wp5r4gz.cpp:34:13: error: \u2018v\u2019 was not\
    \ declared in this scope\n   34 |             v.push_back(v[i-1]+v[i-2]+v[i+1]);\n\
    \      | "
  stdout: ''
  timestamp: 1660102234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> vec;\n    if(n==0)\n        return vec;\n    if(n==1)\n\
    \        return {1};\n    if(n==2)\n        return {1,3};\n    vec.push_back(1);\n\
    \    vec.push_back(3);\n    vec.push_back(2);\n    for(int i=3;i<=n;i++)\n   \
    \ {\n        if(i%2==0)\n            vec.push_back(1+i/2);\n        else\n   \
    \         vec.push_back(vec[i-1]+vec[i-2]+vec[i+1]);\n    }\n    return vec;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp_21ht173: /tmp/tmp_21ht173.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res(n+1);\n    if(n==0) return res;\n    res[0]=1;\n\
    \    if(n==1) return res;\n    res[1]=3;\n    if(n==2) return res;\n    res[2]=2;\n\
    \    if(n==3) return res;\n    for(long i=3;i<=n;i++){\n        if(i%2==0) res[i]=1+i/2;\n\
    \        else res[i]=res[i-1]+res[i-2]+res[i+1];\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp30ajfuhg: /tmp/tmp30ajfuhg.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> tribonacci;\n  tribonacci.push_back(1);\n  tribonacci.push_back(3);\n\
    \  tribonacci.push_back(2);\n  tribonacci.push_back(8);\n  for (long i = 4; i\
    \ <= n; i++) {\n    if (i % 2 == 0) {\n      tribonacci.push_back(1 + i / 2);\n\
    \    } else {\n      tribonacci.push_back(tribonacci[i - 1] + tribonacci[i - 2]\
    \ + tribonacci[i + 1]);\n    }\n  }\n  return tribonacci;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp_2f2ixe6: /tmp/tmp_2f2ixe6.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  int x, y, z, t;\n  if(n == 0)\n  {\n    v.push_back(1);\n\
    \    return v;\n  }\n  x = 1;\n  y = 3;\n  z = 2;\n  v.push_back(x);\n  v.push_back(y);\n\
    \  v.push_back(z);\n  for(int i = 3; i <= n; i++)\n  {\n    if(i % 2 == 0)\n \
    \   {\n      t = 1 + i / 2;\n    }\n    else\n    {\n      t = v[i - 1] + v[i\
    \ - 2] + v[i + 1];\n    }\n    v.push_back(t);\n  }\n  return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpvcdbvhrb: /tmp/tmpvcdbvhrb.cpp:48: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> a = {0, 1, 3, 2};\n    if (n\
    \ < 4) return std::vector<long>(a.begin(), a.begin() + n + 1);\n    for (int i\
    \ = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n            a.push_back(1 +\
    \ i / 2);\n        } else {\n            a.push_back(a[i - 1] + a[i - 2] + a[i\
    \ + 1]);\n        }\n    }\n    return a;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp11s0nxif: /tmp/tmp11s0nxif.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans(n+1);\n    ans[0] = 1;\n    if(n==0)\n     \
    \   return ans;\n    ans[1] = 3;\n    if(n==1)\n        return ans;\n    ans[2]\
    \ = 2;\n    if(n==2)\n        return ans;\n    for(int i=3;i<=n;i++){\n      \
    \  if(i%2==0)\n            ans[i] = 1 + i/2;\n        else\n            ans[i]\
    \ = ans[i-1] + ans[i-2] + ans[i+1];\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpn1vo4akv: /tmp/tmpn1vo4akv.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    int i = 4;\n    while(i <= n + 1) {\n        long\
    \ tmp = 1 + i / 2;\n        if(i % 2 == 0) {\n            res.push_back(tmp);\n\
    \        } else {\n            res.push_back(res[i - 2] + res[i - 3] + res[i -\
    \ 1]);\n        }\n        i++;\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmphgocue0i: /tmp/tmphgocue0i.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> tribonacci {3, 1, 2};\n\tfor (long i = 3; i <= n;\
    \ i++) {\n\t\tif (i % 2) {\n\t\t\ttribonacci.push_back(tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i - 3]);\n\t\t} else {\n\t\t\ttribonacci.push_back(1 + i /\
    \ 2);\n\t\t}\n\t}\n\treturn tribonacci;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpeen7apyy: /tmp/tmpeen7apyy.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    res.push_back(1);\n\
    \    if(n == 1) return res;\n    res.push_back(3);\n    if(n == 2) return res;\n\
    \    res.push_back(2);\n    if(n == 3) return res;\n    for(int i = 0; i < n -\
    \ 3; i++){\n        long x = res[res.size() - 1] + res[res.size() - 2] + res[res.size()\
    \ - 3];\n        res.push_back(x);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpupjx68u9: /tmp/tmpupjx68u9.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result{};\n    if (n >= 0) {\n        result.push_back(1);\n\
    \    }\n    if (n >= 1) {\n        result.push_back(3);\n    }\n    if (n >= 2)\
    \ {\n        result.push_back(2);\n    }\n    if (n >= 3) {\n        for (long\
    \ i = 3; i <= n; i++) {\n            long next;\n            if (i % 2 == 0) {\n\
    \                next = 1 + i / 2;\n            } else {\n                next\
    \ = result[i - 1] + result[i - 2] + result[i + 1];\n            }\n          \
    \  result.push_back(next);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmperbz09l5: /tmp/tmperbz09l5.cpp:44: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102236
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> answer = {1, 3, 2};\n  long next = 8;\n  while (answer.size()\
    \ <= n) {\n    answer.push_back(next);\n    next = answer[answer.size() - 3] +\
    \ answer[answer.size() - 2] + answer[answer.size() - 1];\n  }\n  return answer;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp_0p62rp4: /tmp/tmp_0p62rp4.cpp:30: int main(): Assertion `candidate((4))
    == (std::vector<long>({1, 3, 2, 8, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660102235
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res;\n  res.push_back(1);\n  res.push_back(3);\n \
    \ res.push_back(2);\n  res.push_back(8);\n  int i = 4;\n  while(i<=n){\n    if(i%2==0){\n\
    \      res.push_back(1 + i/2);\n    }else{\n      res.push_back(res[i-1] + res[i-2]\
    \ + res[i+1]);\n    }\n    i++;\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpbfw2xqk_: /tmp/tmpbfw2xqk_.cpp:39: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tribonacci;\n    tribonacci.push_back(1);\n    tribonacci.push_back(3);\n\
    \    tribonacci.push_back(2);\n    if (n == 0) {\n        tribonacci.pop_back();\n\
    \        tribonacci.pop_back();\n        tribonacci.pop_back();\n        return\
    \ tribonacci;\n    }\n    if (n == 1) {\n        tribonacci.pop_back();\n    \
    \    tribonacci.pop_back();\n        return tribonacci;\n    }\n    if (n == 2)\
    \ {\n        tribonacci.pop_back();\n        return tribonacci;\n    }\n    for\
    \ (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci.push_back(1\
    \ + i / 2);\n        } else {\n            long temp = tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i - 3];\n            tribonacci.push_back(temp);\n       \
    \ }\n    }\n    return tribonacci;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmppovdbflm: /tmp/tmppovdbflm.cpp:50: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102237
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans = {};\n    if (n==0) {\n        return ans;\n\
    \    }\n    ans.push_back(1);\n    if (n==1) {\n        return ans;\n    }\n \
    \   ans.push_back(3);\n    if (n==2) {\n        return ans;\n    }\n    ans.push_back(2);\n\
    \    if (n==3) {\n        return ans;\n    }\n    int i = 3;\n    while (i<n)\
    \ {\n        int tmp = 0;\n        if (i%2 == 0) {\n            tmp = ans[i] +\
    \ ans[i-1] + ans[i-2];\n        } else {\n            tmp = 1 + (i/2);\n     \
    \   }\n        ans.push_back(tmp);\n        i++;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpvy_g4cro: /tmp/tmpvy_g4cro.cpp:50: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102237
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // your code here\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpvn53c_jf: /tmp/tmpvn53c_jf.cpp:23: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102237
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    ans.push_back(1);\n    if(n == 0) return\
    \ ans;\n    ans.push_back(3);\n    if(n == 1) return ans;\n    ans.push_back(2);\n\
    \    if(n == 2) return ans;\n    long a = 1, b = 3, c = 2;\n    for(int i = 3;\
    \ i <= n; i++){\n        long d = (i%2 == 0)?(1+i/2):(a+b+c);\n        ans.push_back(d);\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpf_1dx3aw: /tmp/tmpf_1dx3aw.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tif (n == 0) {\n\t\tresult.push_back(1);\n\
    \t\treturn result;\n\t}\n\tif (n == 1) {\n\t\tresult.push_back(1);\n\t\tresult.push_back(3);\n\
    \t\treturn result;\n\t}\n\tif (n == 2) {\n\t\tresult.push_back(1);\n\t\tresult.push_back(3);\n\
    \t\tresult.push_back(2);\n\t\treturn result;\n\t}\n\tresult.push_back(1);\n\t\
    result.push_back(3);\n\tresult.push_back(2);\n\tfor (int i = 3; i <= n; i++) {\n\
    \t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\
    \t\t\tresult.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\t\t}\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpfn5q8xer: /tmp/tmpfn5q8xer.cpp:50: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tlong a = 1, b = 3, c = 2;\n\tfor (int i\
    \ = 0; i <= n; i++) {\n\t\tif (i == 0)\n\t\t\tresult.push_back(a);\n\t\telse if\
    \ (i == 1)\n\t\t\tresult.push_back(b);\n\t\telse if (i == 2)\n\t\t\tresult.push_back(c);\n\
    \t\telse if (i % 2 == 0)\n\t\t\tresult.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n\t\telse\n\t\t\tresult.push_back(1 + i / 2);\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpjqp4c0ow: /tmp/tmpjqp4c0ow.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v{1, 3, 2};\n    for (int i = 3; i <= n; i++) {\n\
    \        if (i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpvym4jd25: /tmp/tmpvym4jd25.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> ans;\n  long tri=3;\n  while(ans.size()<=n){\n   \
    \ if(ans.size()==0){\n      ans.push_back(1);\n    }else if(ans.size()==1){\n\
    \      ans.push_back(3);\n    }else if(ans.size()==2){\n      ans.push_back(2);\n\
    \    }else{\n      if(ans.size()%2==0){\n        ans.push_back(1+(ans.size()/2));\n\
    \      }else{\n        ans.push_back(ans[ans.size()-1]+ans[ans.size()-2]+ans[ans.size()-3]);\n\
    \      }\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp8rlvxkkt: /tmp/tmp8rlvxkkt.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  long even_sum=0;\n  if(n==1)\n  {\n    v.push_back(1);\n\
    \    return v;\n  }\n  else if(n==2)\n  {\n    v.push_back(3);\n    v.push_back(1);\n\
    \    return v;\n  }\n  else\n  {\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    even_sum=2;\n    for(int i=3;i<=n;i++)\n    {\n     \
    \ v.push_back(1+even_sum);\n      even_sum+=v[i];\n    }\n    return v;\n  }\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpb848sn33: /tmp/tmpb848sn33.cpp:48: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  long b = 1, c = 3, d = 2;\n  std::vector<long> v = {b, c, d};\n  if\
    \ (n == 0) return v;\n  for (int i = 4; i <= n + 1; i++) {\n    if (i % 2 == 0)\
    \ v.push_back(1 + i / 2);\n    else {\n      long t = v[i - 1] + v[i - 2] + v[i\
    \ - 4];\n      v.push_back(t);\n    }\n  }\n  return v;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp6t80z56m: /tmp/tmp6t80z56m.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    for(int i = 0; i <= n; i++)\n    {\n \
    \       if(i == 0)\n        {\n            ans.push_back(1);\n        }\n    \
    \    else if(i == 1)\n        {\n            ans.push_back(3);\n        }\n  \
    \      else if(i == 2)\n        {\n            ans.push_back(2);\n        }\n\
    \        else if(i % 2 == 0)\n        {\n            ans.push_back(1 + i / 2);\n\
    \        }\n        else\n        {\n            ans.push_back(ans[i - 1] + ans[i\
    \ - 2] + ans[i + 1]);\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpg_depb56: /tmp/tmpg_depb56.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) return {};\n    std::vector<long> res = {1, 3, 2};\n  \
    \  for(int i = 3; i <= n; i++){\n        if(i % 2 == 0) res.push_back(1 + i /\
    \ 2);\n        else res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp2rm3m_wl: /tmp/tmp2rm3m_wl.cpp:29: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n==0) return v;\n    if(n==1) {\n   \
    \     v.push_back(1);\n        return v;\n    }\n    if(n==2) {\n        v.push_back(1);\n\
    \        v.push_back(3);\n        return v;\n    }\n    v.push_back(1);\n    v.push_back(3);\n\
    \    v.push_back(2);\n    long sum = 1+3+2;\n    for(int i=4;i<=n;i++) {\n   \
    \     if(i%2==0) v.push_back(1+i/2);\n        else {\n            v.push_back(sum);\n\
    \            sum+=v[i-1]+v[i-2]+v[i-3];\n        }\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp239dm75l: /tmp/tmp239dm75l.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  if (n == 1) {\n    result.push_back(1);\n    return result;\n  }\n  if (n ==\
    \ 2) {\n    result.push_back(1);\n    result.push_back(3);\n    return result;\n\
    \  }\n  result.push_back(1);\n  result.push_back(3);\n  result.push_back(2);\n\
    \  for (long i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      result.push_back(1\
    \ + i / 2);\n    } else {\n      result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpv8taul0g: /tmp/tmpv8taul0g.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v{3,1,2};\n    if(n==0)\n    {\n        return {1};\n\
    \    }\n    else if(n==1)\n    {\n        return {1,3};\n    }\n    else if(n==2)\n\
    \    {\n        return {1,3,2};\n    }\n    int i=0;\n    while(v.size()<=n)\n\
    \    {\n        long x=v[i]+v[i+1]+v[i+2];\n        v.push_back(x);\n        i++;\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmphs0eld51: /tmp/tmphs0eld51.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n==0)\n        return {};\n    if(n==1)\n        return {1};\n\
    \    if(n==2)\n        return {1, 3};\n    if(n==3)\n        return {1, 3, 2};\n\
    \    std::vector<long>res;\n    res.push_back(1);\n    res.push_back(3);\n   \
    \ res.push_back(2);\n    int i=3;\n    while(i<=n){\n        if(i%2==0)\n    \
    \        res.push_back(1+i/2);\n        else\n            res.push_back(res[i-1]+res[i-2]+res[i+1]);\n\
    \        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp7uv8x2ex: /tmp/tmp7uv8x2ex.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    if(n == 1)\
    \ {\n        res.push_back(1);\n        return res;\n    }\n    if(n == 2) {\n\
    \        res.push_back(1);\n        res.push_back(3);\n        return res;\n \
    \   }\n    if(n == 3) {\n        res.push_back(1);\n        res.push_back(3);\n\
    \        res.push_back(2);\n        return res;\n    }\n    res.push_back(1);\n\
    \    res.push_back(3);\n    res.push_back(2);\n    long a, b, c;\n    a = 1;\n\
    \    b = 3;\n    c = 2;\n    for(int i = 4; i <= n; i++) {\n        if(i % 2 ==\
    \ 0) {\n            res.push_back(1 + i / 2);\n        } else {\n            res.push_back(a\
    \ + b + c);\n            a = b;\n            b = c;\n            c = res[i - 1];\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpaj4531lt: /tmp/tmpaj4531lt.cpp:57: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    for(int i = 2; i < n; i++) {\n        if(i % 2 ==\
    \ 0) {\n            res.push_back(1 + i / 2);\n        } else {\n            res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpnir7rj59: /tmp/tmpnir7rj59.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tribonacci(n + 1);\n    tribonacci[0] = 1;\n   \
    \ tribonacci[1] = 3;\n    tribonacci[2] = 2;\n    for (size_t i = 3; i <= n; i++)\
    \ {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n     \
    \   } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2]\
    \ + tribonacci[i + 1];\n        }\n    }\n    return tribonacci;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpyh9owe7v: /tmp/tmpyh9owe7v.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> fib_nums;\n  fib_nums.push_back(1);\n  if (n == 0)\
    \ return fib_nums;\n  fib_nums.push_back(3);\n  if (n == 1) return fib_nums;\n\
    \  fib_nums.push_back(2);\n  if (n == 2) return fib_nums;\n  fib_nums.push_back(8);\n\
    \  long num = 4;\n  while (num < n) {\n    long odd = 1 + num / 2;\n    fib_nums.push_back(odd);\n\
    \    long even = fib_nums[num - 1] + fib_nums[num - 2] + fib_nums[num + 1];\n\
    \    fib_nums.push_back(even);\n    num += 2;\n  }\n  return fib_nums;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpxwyun2ma: /tmp/tmpxwyun2ma.cpp:40: int main(): Assertion `candidate((4))
    == (std::vector<long>({1, 3, 2, 8, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tif (n == 0) {\n\t\treturn {};\n\t}\n\tif (n == 1) {\n\t\treturn { 1\
    \ };\n\t}\n\tif (n == 2) {\n\t\treturn { 1, 3 };\n\t}\n\tstd::vector<long> tribonacci\
    \ = { 1, 3, 2 };\n\tfor (int i = 3; i <= n; i++) {\n\t\tlong temp = tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i - 3];\n\t\ttribonacci.push_back(temp);\n\
    \t}\n\treturn tribonacci;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpn4hfofsa: /tmp/tmpn4hfofsa.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> res(n + 1);\n\tres[0] = 1;\n\tif (n >= 1) {\n\t\t\
    res[1] = 3;\n\t\tif (n >= 2) {\n\t\t\tres[2] = 2;\n\t\t\tfor (long i = 3; i <=\
    \ n; i++) {\n\t\t\t\tres[i] = (i % 2 == 0) ? (1 + i / 2) : (res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpxt0xknua: /tmp/tmpxt0xknua.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\t// your code here\n\treturn{};\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp2ltduceh: /tmp/tmp2ltduceh.cpp:24: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> arr;\n    arr.push_back(1);\n    arr.push_back(3);\n\
    \    arr.push_back(2);\n    int i = 3;\n    while(i <= n) {\n        if(i % 2\
    \ == 0) {\n            arr.push_back(1 + i / 2);\n        } else {\n         \
    \   arr.push_back(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n        i++;\n\
    \    }\n    return arr;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp_pjg7259: /tmp/tmp_pjg7259.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    vector<long> tri_vec;\n    int tri_1 = 3;\n    int tri_2 = 1;\n  \
    \  int tri_3 = 2;\n    tri_vec.push_back(tri_1);\n    tri_vec.push_back(tri_2);\n\
    \    tri_vec.push_back(tri_3);\n    for(int i = 3; i <= n; i++){\n        if(i\
    \ % 2 == 0){\n            tri_vec.push_back(tri_3);\n        }\n        else{\n\
    \            int temp = tri_1 + tri_2 + tri_3;\n            tri_vec.push_back(temp);\n\
    \            tri_1 = tri_2;\n            tri_2 = tri_3;\n            tri_3 = temp;\n\
    \        }\n    }\n    return tri_vec;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98wtd9ou.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp98wtd9ou.cpp:19:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   19 |     vector<long> tri_vec;\n      |     ^~~~~~\n/tmp/tmp98wtd9ou.cpp:19:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp98wtd9ou.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp98wtd9ou.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp98wtd9ou.cpp:19:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |     vector<long>\
    \ tri_vec;\n      |            ^~~~\n/tmp/tmp98wtd9ou.cpp:23:5: error: \u2018\
    tri_vec\u2019 was not declared in this scope; did you mean \u2018tri_3\u2019?\n\
    \   23 |     tri_vec.push_back(tri_1);\n      |     ^~~~~~~\n      |     tri_3\n"
  stdout: ''
  timestamp: 1660102237
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> res;\n\tres.push_back(1);\n\tres.push_back(3);\n\t\
    res.push_back(2);\n\tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\
    \t\tres.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tres.push_back(res[i -\
    \ 1] + res[i - 2] + res[i + 1]);\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp30_tvl7o: /tmp/tmp30_tvl7o.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tlong t=3;\n\tv.push_back(1);\n\tv.push_back(3);\n\
    \tv.push_back(2);\n\tv.push_back(8);\n\tfor(int i=4;i<=n;i++){\n\t\tif(i%2==0){\n\
    \t\t\tt=1+i/2;\n\t\t}\n\t\telse{\n\t\t\tt=v[i-1]+v[i-2]+v[i+1];\n\t\t}\n\t\tv.push_back(t);\n\
    \t}\n\treturn v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp5h9aooq3: /tmp/tmp5h9aooq3.cpp:40: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\t// Iterative method\n\t// std::vector<long> res;\n\t// if (n <= 0) return\
    \ res;\n\t// long x = 1, y = 3, z = 2;\n\t// res.push_back(x);\n\t// res.push_back(y);\n\
    \t// res.push_back(z);\n\t// for (int i = 3; i <= n; i++) {\n\t// \tz = z + y\
    \ + x;\n\t// \tx = y;\n\t// \ty = z - y - x;\n\t// \tres.push_back(z);\n\t// }\n\
    \t// return res;\n\n\t// Recursive method\n\t// std::vector<long> res;\n\t// if\
    \ (n <= 0) return res;\n\t// long x = 1, y = 3, z = 2;\n\t// res.push_back(x);\n\
    \t// res.push_back(y);\n\t// res.push_back(z);\n\t// for (int i = 3; i <= n; i++)\
    \ {\n\t// \tz = tri(i - 1) + tri(i - 2) + tri(i + 1);\n\t// \tres.push_back(z);\n\
    \t// }\n\t// return res;\n\n\t// Recursive method with Memoization\n\tstd::vector<long>\
    \ res(n + 1, -1);\n\tres[0] = 1;\n\tres[1] = 3;\n\tres[2] = 2;\n\treturn tri(n,\
    \ res);\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_dnvf268.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp_dnvf268.cpp:52:19: error: too many arguments to function\
    \ \u2018std::vector<long int> tri(long int)\u2019\n   52 |  return tri(n, res);\n\
    \      |                   ^\n/tmp/tmp_dnvf268.cpp:18:19: note: declared here\n\
    \   18 | std::vector<long> tri(long n) {\n      |                   ^~~\n"
  stdout: ''
  timestamp: 1660102237
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    for (int i = 0; i <= n; i++) {\n  \
    \      if (i == 0) {\n            result.push_back(1);\n        } else if (i ==\
    \ 1) {\n            result.push_back(3);\n        } else if (i == 2) {\n     \
    \       result.push_back(2);\n        } else if (i % 2 == 0) {\n            result.push_back(1\
    \ + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpbzth3sl7: /tmp/tmpbzth3sl7.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> vec;\n\tfor (long i = 0; i <= n; i++) {\n\t\tif (i\
    \ % 2 == 0) {\n\t\t\tvec.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tif (i\
    \ == 1)\n\t\t\t\tvec.push_back(3);\n\t\t\telse if (i == 3)\n\t\t\t\tvec.push_back(8);\n\
    \t\t\telse {\n\t\t\t\tvec.push_back(vec[i - 2] + vec[i - 1] + vec[i + 1]);\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn vec;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpqr9o84xy: /tmp/tmpqr9o84xy.cpp:40: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n >= 1) res.push_back(1);\n    if(n\
    \ >= 2) res.push_back(3);\n    if(n >= 3) res.push_back(2);\n    for(int i = 3;\
    \ i < n; i++){\n        if(i % 2 == 0) res.push_back(res[i] = 1 + i / 2);\n  \
    \      else res.push_back(res[i] = res[i - 1] + res[i - 2] + res[i + 1]);\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpmq47fvil: /tmp/tmpmq47fvil.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0) return v;\n    v.push_back(1);\n\
    \    if(n == 1) return v;\n    v.push_back(3);\n    if(n == 2) return v;\n   \
    \ for(int i = 2; i < n; i++){\n        if(i % 2 == 0) v.push_back(1 + i / 2);\n\
    \        else v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpifjf1_0z: /tmp/tmpifjf1_0z.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    for (int i = 0; i <= n; i++) {\n  \
    \      if (i == 0) result.push_back(1);\n        else if (i == 1) result.push_back(3);\n\
    \        else if (i == 2) result.push_back(2);\n        else {\n            if\
    \ (i % 2 == 0) result.push_back(1 + i / 2);\n            else result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp_ow4amoz: /tmp/tmp_ow4amoz.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // Your code here!\n  std::vector<long> res;\n  long n1 = 1, n2 = 3,\
    \ n3 = 2;\n  if(n < 3) {\n    res.push_back(n1);\n    res.push_back(n2);\n   \
    \ if(n == 2) res.push_back(n3);\n    return res;\n  }\n  res.push_back(n1);\n\
    \  res.push_back(n2);\n  res.push_back(n3);\n  while(res.size() <= n) {\n    n1\
    \ = res[res.size() - 3];\n    n2 = res[res.size() - 2];\n    n3 = res[res.size()\
    \ - 1];\n    if(res.size() % 2 == 0) res.push_back(1 + res.size() / 2);\n    else\
    \ res.push_back(n1 + n2 + n3);\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp_dg384ls: /tmp/tmp_dg384ls.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) {\n        return {};\n    }\n    std::vector<long> res(n\
    \ + 1);\n    if(n == 1) {\n        res[0] = 1;\n        res[1] = 3;\n        return\
    \ res;\n    }\n    if(n == 2) {\n        res[0] = 1;\n        res[1] = 3;\n  \
    \      res[2] = 2;\n        return res;\n    }\n    res[0] = 1;\n    res[1] =\
    \ 3;\n    res[2] = 2;\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 ==\
    \ 0) {\n            res[i] = 1 + i / 2;\n        } else {\n            res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1];\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpv5xb_e7m: /tmp/tmpv5xb_e7m.cpp:48: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tvector<long> res(n+1);\n\tres[0] = 1;\n\tres[1] = 3;\n\tres[2] = 2;\n\
    \tfor(int i = 3; i <= n; i++){\n\t\tif(i%2 == 0){\n\t\t\tres[i] = 1 + i/2;\n\t\
    \t}\n\t\telse{\n\t\t\tres[i] = res[i-1] + res[i-2] + res[i+1];\n\t\t}\n\t}\n\t\
    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3vmjp1i.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpp3vmjp1i.cpp:19:2: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   19 |  vector<long> res(n+1);\n      |  ^~~~~~\n/tmp/tmpp3vmjp1i.cpp:19:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp3vmjp1i.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp3vmjp1i.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpp3vmjp1i.cpp:19:9:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |  vector<long>\
    \ res(n+1);\n      |         ^~~~\n/tmp/tmpp3vmjp1i.cpp:20:2: error: \u2018res\u2019\
    \ was not declared in this scope\n   20 |  res[0] = 1;\n      |  ^~~\n"
  stdout: ''
  timestamp: 1660102237
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // your code here\n    std::vector<long> arr;\n    arr.push_back(1);\n\
    \    arr.push_back(3);\n    arr.push_back(2);\n    arr.push_back(8);\n    if(n==3)\n\
    \        return arr;\n    else{\n        long temp=arr[3];\n        for(int i=0;i<=n-4;i++){\n\
    \            arr.push_back(temp+arr[arr.size()-1]+arr[arr.size()-2]);\n      \
    \      temp=arr[arr.size()-1];\n        }\n    }\n    return arr;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp3k6fymil: /tmp/tmp3k6fymil.cpp:39: int main(): Assertion `candidate((4))
    == (std::vector<long>({1, 3, 2, 8, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tfor (long i = 0; i <= n; i++) {\n\t\tif\
    \ (i == 0)\n\t\t\tresult.push_back(1);\n\t\telse if (i == 1)\n\t\t\tresult.push_back(3);\n\
    \t\telse if (i == 2)\n\t\t\tresult.push_back(2);\n\t\telse if (i % 2 == 0)\n\t\
    \t\tresult.push_back(1 + i / 2);\n\t\telse\n\t\t\tresult.push_back(result[i -\
    \ 1] + result[i - 2] + result[i + 1]);\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpot_v_abu: /tmp/tmpot_v_abu.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0)\n        return res;\n    res.push_back(1);\n\
    \    if(n == 1)\n        return res;\n    res.push_back(3);\n    if(n == 2)\n\
    \        return res;\n    res.push_back(2);\n    if(n == 3)\n        return res;\n\
    \    while(res.size() != n + 1)\n    {\n        int k = res.size();\n        if(k\
    \ % 2 == 0)\n            res.push_back(1 + k / 2);\n        else\n           \
    \ res.push_back(res[k - 1] + res[k - 2] + res[k - 3]);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp7yawz18b: /tmp/tmp7yawz18b.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> results;\n  if (n == 0) {\n    return results;\n \
    \ }\n  results.push_back(1);\n  if (n == 1) {\n    return results;\n  }\n  results.push_back(3);\n\
    \  if (n == 2) {\n    return results;\n  }\n  results.push_back(2);\n  for (int\
    \ i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      results.push_back(1 + i\
    \ / 2);\n    } else {\n      results.push_back(results[i - 1] + results[i - 2]\
    \ + results[i + 1]);\n    }\n  }\n  return results;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp5b2nz10g: /tmp/tmp5b2nz10g.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0)\n    {\n        res.push_back(1);\n\
    \        return res;\n    }\n    res.push_back(1);\n    res.push_back(3);\n  \
    \  if(n == 1)\n        return res;\n    res.push_back(2);\n    if(n == 2)\n  \
    \      return res;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i % 2 ==\
    \ 0)\n            res.push_back(1 + i / 2);\n        else\n            res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp1rfisapo: /tmp/tmp1rfisapo.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  v.push_back(8);\n  for(long i = 4; i <= n; i++) {\n    v.push_back(v[i - 1]\
    \ + v[i - 2] + v[i - 3]);\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp1lm7r54w: /tmp/tmp1lm7r54w.cpp:32: int main(): Assertion `candidate((4))
    == (std::vector<long>({1, 3, 2, 8, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    for(long i = 0; i <= n; i++) {\n       \
    \ if(i == 0) {\n            v.push_back(1);\n        } else if(i == 1) {\n   \
    \         v.push_back(3);\n        } else if(i == 2) {\n            v.push_back(2);\n\
    \        } else if(i == 3) {\n            v.push_back(8);\n        } else {\n\
    \            long sum = 1 + (i / 2);\n            if(i % 2 == 0) {\n         \
    \       v.push_back(sum);\n            } else {\n                v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n            }\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpbg4lkktr: /tmp/tmpbg4lkktr.cpp:44: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102239
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  vector<long> ans(n + 1);\n  ans[0] = 1;\n  ans[1] = 3;\n  ans[2] = 2;\n\
    \  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0)\n      ans[i] = ans[i /\
    \ 2] + 1;\n    else\n      ans[i] = ans[i - 1] + ans[i - 2] + ans[i + 1];\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpumcm41s3.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpumcm41s3.cpp:19:3: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   19 |   vector<long> ans(n + 1);\n      |   ^~~~~~\n/tmp/tmpumcm41s3.cpp:19:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpumcm41s3.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpumcm41s3.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpumcm41s3.cpp:19:10:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |   vector<long>\
    \ ans(n + 1);\n      |          ^~~~\n/tmp/tmpumcm41s3.cpp:20:3: error: \u2018\
    ans\u2019 was not declared in this scope; did you mean \u2018abs\u2019?\n   20\
    \ |   ans[0] = 1;\n      |   ^~~\n      |   abs\n"
  stdout: ''
  timestamp: 1660102238
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp4fyjwtu2: /tmp/tmp4fyjwtu2.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102239
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result = { 1, 3, 2 };\n\tresult.reserve(n + 1);\n\t\
    for (long i = 3; i <= n; i++) {\n\t\tresult.push_back(result[i - 1] + result[i\
    \ - 2] + result[i - 3]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpnw0s7ikh: /tmp/tmpnw0s7ikh.cpp:28: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102239
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  // your code here\n  long s = 1, a = 3,\
    \ b = 2, c = 8;\n  if(n == 0) {\n    result.push_back(s);\n    return result;\n\
    \  }\n  if(n == 1) {\n    result.push_back(s);\n    result.push_back(a);\n   \
    \ return result;\n  }\n  if(n == 2) {\n    result.push_back(s);\n    result.push_back(a);\n\
    \    result.push_back(b);\n    return result;\n  }\n  else if(n == 3) {\n    result.push_back(s);\n\
    \    result.push_back(a);\n    result.push_back(b);\n    result.push_back(c);\n\
    \    return result;\n  }\n  else {\n    result.push_back(s);\n    result.push_back(a);\n\
    \    result.push_back(b);\n    result.push_back(c);\n    int i = 4;\n    while(i\
    \ <= n) {\n      if(i % 2 == 0) {\n        int temp = i / 2;\n        temp = temp\
    \ + 1;\n        result.push_back(temp);\n      }\n      else {\n        int temp\
    \ = (result[i - 1] + result[i - 2] + result[i + 1]);\n        result.push_back(temp);\n\
    \      }\n      i++;\n    }\n    return result;\n  }\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp_ehw4rem: /tmp/tmp_ehw4rem.cpp:69: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102239
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> tribonacci;\n  if (n >= 0) {\n    tribonacci.push_back(1);\n\
    \  }\n  if (n >= 1) {\n    tribonacci.push_back(3);\n  }\n  if (n >= 2) {\n  \
    \  tribonacci.push_back(2);\n  }\n  if (n >= 3) {\n    for (int i = 3; i <= n;\
    \ i++) {\n      if (i % 2 == 0) {\n        tribonacci.push_back(1 + i / 2);\n\
    \      } else {\n        tribonacci.push_back(tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i + 1]);\n      }\n    }\n  }\n  return tribonacci;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpz_0ppsgk: /tmp/tmpz_0ppsgk.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0)\n        return {};\n    std::vector<long> result;\n  \
    \  result.push_back(1);\n    if(n == 1)\n        return result;\n    result.push_back(3);\n\
    \    if(n == 2)\n        return result;\n    result.push_back(2);\n    if(n ==\
    \ 3)\n        return result;\n    for(int i = 3; i < n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n            result.push_back(1 + i / 2);\n        else\n        \
    \    result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpey1gi2du: /tmp/tmpey1gi2du.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    for(int i = 0; i <= n; i++) {\n        v.push_back(i\
    \ == 0 ? 1 : i <= 2 ? 3 : v[i - 1] + v[i - 2] + v[i - 3]);\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp0u4275r2: /tmp/tmp0u4275r2.cpp:27: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v(n + 1);\n\tv[0] = 1;\n\tv[1] = 3;\n\tv[2] = 2;\n\
    \tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0)\n\t\t\tv[i] = 1 + i / 2;\n\
    \t\telse\n\t\t\tv[i] = v[i - 1] + v[i - 2] + v[i + 1];\n\t}\n\treturn v;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp_4hljdfg: /tmp/tmp_4hljdfg.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> results;\n    results.push_back(1);\n    results.push_back(3);\n\
    \    results.push_back(2);\n    for (int i = 3; i <= n; i++) {\n        if (i\
    \ % 2 == 0) {\n            results.push_back(1 + i / 2);\n        } else {\n \
    \           results.push_back(results[i - 2] + results[i - 1] + results[i + 1]);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpvmx8mz3t: /tmp/tmpvmx8mz3t.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    if (n == 0) {\n        return result;\n    }\n    result.push_back(2);\n\
    \    if (n == 1) {\n        return result;\n    }\n    for (long i = 3; i <= n;\
    \ i++) {\n        long newElem = 0;\n        if (i % 2 == 0) {\n            newElem\
    \ = 1 + i / 2;\n        } else {\n            newElem = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n        result.push_back(newElem);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmppzmuieog: /tmp/tmppzmuieog.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res(n + 1);\n  if (n == 0) return res;\n  res[0] =\
    \ 1;\n  if (n == 1) return res;\n  res[1] = 3;\n  if (n == 2) return res;\n  res[2]\
    \ = 2;\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      res[i]\
    \ = 1 + i / 2;\n    } else {\n      res[i] = res[i - 1] + res[i - 2] + res[i +\
    \ 1];\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp968juq6v: /tmp/tmp968juq6v.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.emplace_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.emplace_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.emplace_back(2);\n  if (n\
    \ == 3) {\n    return result;\n  }\n  while (result.size() <= n) {\n    long even_result\
    \ = 1 + (result.size() / 2);\n    long odd_result = result[result.size() - 1]\
    \ + result[result.size() - 2] +\n                      result[result.size() +\
    \ 1];\n    result.emplace_back(result.size() % 2 == 0 ? even_result : odd_result);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpm3urtdkp: /tmp/tmpm3urtdkp.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> a;\n\ta.push_back(1);\n\ta.push_back(3);\n\ta.push_back(2);\n\
    \tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\ta.push_back(1 +\
    \ i / 2);\n\t\t}\n\t\telse {\n\t\t\ta.push_back(a[i - 1] + a[i - 2] + a[i + 1]);\n\
    \t\t}\n\t}\n\treturn a;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpoiydxach: /tmp/tmpoiydxach.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tv.push_back(1);\n\tv.push_back(3);\n\tv.push_back(2);\n\
    \tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0)\n\t\t\tv.push_back(v[i /\
    \ 2]);\n\t\telse\n\t\t\tv.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\t}\n\t\
    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpwj5f39_f: /tmp/tmpwj5f39_f.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    for (int i = 0; i <= n; i++) {\n     \
    \   if (i == 0) {\n            res.push_back(1);\n        } else if (i == 1) {\n\
    \            res.push_back(3);\n        } else if (i == 2) {\n            res.push_back(2);\n\
    \        } else if (i == 3) {\n            res.push_back(8);\n        } else {\n\
    \            if (i % 2 == 0) {\n                res.push_back(1 + i / 2);\n  \
    \          } else {\n                res.push_back(res[i - 1] + res[i - 2] + res[i\
    \ + 1]);\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpry5ob655: /tmp/tmpry5ob655.cpp:43: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    if (n == 0) {\n        return res;\n    }\n    res.push_back(2);\n    for\
    \ (int i = 3; i <= n; i++) {\n        res.push_back(res[i - 1] + res[i - 2] +\
    \ res[i - 3]);\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpzynhc8hv: /tmp/tmpzynhc8hv.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    ans.push_back(1);\n    ans.push_back(3);\n\
    \    if(n == 1)\n    {\n        return ans;\n    }\n    ans.push_back(2);\n  \
    \  if(n == 2)\n    {\n        return ans;\n    }\n    ans.push_back(8);\n    if(n\
    \ == 3)\n    {\n        return ans;\n    }\n    for(int i = 4; i <= n; i++)\n\
    \    {\n        long tmp = 0;\n        if(i % 2 == 0)\n        {\n           \
    \ tmp = 1 + i / 2;\n        }\n        else\n        {\n            tmp = ans[i\
    \ - 2] + ans[i - 1] + ans[i - 3];\n        }\n        ans.push_back(tmp);\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp7gwy04yx: /tmp/tmp7gwy04yx.cpp:55: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> ans;\n\tif (n == 0) {\n\t\tans.push_back(1);\n\t\t\
    return ans;\n\t}\n\tans.push_back(1);\n\tans.push_back(3);\n\tans.push_back(2);\n\
    \tlong n1 = 2, n2 = 3, n3 = 1;\n\tfor (int i = 3; i <= n; i++) {\n\t\tif (i %\
    \ 2 == 0) {\n\t\t\tans.push_back(n1);\n\t\t}\n\t\telse {\n\t\t\tans.push_back(n1\
    \ + n2 + n3);\n\t\t\tn3 = n2;\n\t\t\tn2 = n1;\n\t\t\tn1 = ans[i];\n\t\t}\n\t}\n\
    \treturn ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp1lql805g: /tmp/tmp1lql805g.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res(n + 1);\n  for (long i = 1; i <= n; i++) {\n \
    \   if (i == 1) res[i] = 3;\n    else {\n      if (i % 2 == 0) res[i] = 1 + i\
    \ / 2;\n      else res[i] = res[i - 1] + res[i - 2] + res[i + 1];\n    }\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpvoe3rje8: /tmp/tmpvoe3rje8.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) return {1};\n    if(n == 1) return {1, 3};\n    if(n ==\
    \ 2) return {1, 3, 2};\n    std::vector<long> res = {1, 3, 2};\n    while(res.size()\
    \ <= n)\n    {\n        auto back1 = res.rbegin();\n        auto back2 = res.rbegin()\
    \ + 1;\n        auto back3 = res.rbegin() + 2;\n        long even = 1 + *back3\
    \ / 2;\n        long odd = *back1 + *back2 + *back3;\n        res.push_back(res.size()\
    \ % 2 == 0 ? even : odd);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmptob0i71v: /tmp/tmptob0i71v.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) {\n        return {1};\n    }\n    if(n == 1) {\n     \
    \   return {1, 3};\n    }\n    if(n == 2) {\n        return {1, 3, 2};\n    }\n\
    \    std::vector<long> res = {1, 3, 2};\n    for(long i = 3; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            res.push_back(res[i - 1] + 1 + i / 2);\n\
    \        } else {\n            res.push_back(res[i - 1] + res[i - 2] + res[i -\
    \ 3]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpztui3ebt: /tmp/tmpztui3ebt.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v = {1, 3, 2};\n    if (n < 3) {\n        std::vector<long>\
    \ temp;\n        for (int i = 0; i <= n; i++) {\n            temp.push_back(v[i]);\n\
    \        }\n        return temp;\n    }\n    while (v.size() <= n) {\n       \
    \ long oddNum = v[v.size() - 3] + v[v.size() - 2] + v[v.size() - 1];\n       \
    \ v.push_back(oddNum);\n        long evenNum = v[v.size() - 2] + 1;\n        v.push_back(evenNum);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpf2a09bfl: /tmp/tmpf2a09bfl.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n==0) return {};\n    std::vector<long> res(n+1);\n    res[0]=1;\n\
    \    res[1]=3;\n    res[2]=2;\n    for(int i=3;i<n+1;i++){\n        res[i]=res[i-1]+res[i-2]+res[i-3];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpyn_npl71: /tmp/tmpyn_npl71.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Your code here\n    std::vector<long> v;\n    if(n==0)return v;\n\
    \    v.push_back(1);\n    if(n==1)return v;\n    v.push_back(3);\n    if(n==2)return\
    \ v;\n    v.push_back(2);\n    if(n==3)return v;\n    for(int i=4;i<=n;i++){\n\
    \      long temp = v[i-2] + v[i-3] + v[i-4];\n      v.push_back(temp);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp6n7_23g7: /tmp/tmp6n7_23g7.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> sol;\n  sol.push_back(1);\n  sol.push_back(3);\n \
    \ if (n == 1) {\n    return sol;\n  }\n  sol.push_back(2);\n  if (n == 2) {\n\
    \    return sol;\n  }\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n\
    \      sol.push_back(1 + i / 2);\n    } else {\n      sol.push_back(sol[i - 1]\
    \ + sol[i - 2] + sol[i + 1]);\n    }\n  }\n  return sol;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpc3ljjyi7: /tmp/tmpc3ljjyi7.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> arr;\n    arr.push_back(1);\n    if(n >= 1) {\n\
    \        arr.push_back(3);\n    }\n    if(n >= 2) {\n        arr.push_back(2);\n\
    \    }\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n        \
    \    arr.push_back(1 + i / 2);\n        } else {\n            arr.push_back(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp1pn94gcf: /tmp/tmp1pn94gcf.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // 1 is the first number in the sequence.\n    std::vector<long> tribonacciSequence{1};\n\
    \    // This is the base case, we can return the sequence.\n    if (n == 0) {\n\
    \        return tribonacciSequence;\n    }\n    tribonacciSequence.push_back(3);\n\
    \    if (n == 1) {\n        return tribonacciSequence;\n    }\n    tribonacciSequence.push_back(2);\n\
    \    if (n == 2) {\n        return tribonacciSequence;\n    }\n    // We can now\
    \ go the recurrence.\n    // It is possible to optimize this solution with a for\
    \ loop.\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n     \
    \       tribonacciSequence.push_back(tribonacciSequence[i - 2] + 1 + i / 2);\n\
    \        } else {\n            tribonacciSequence.push_back(tribonacciSequence[i\
    \ - 2] + tribonacciSequence[i - 1] + tribonacciSequence[i + 1]);\n        }\n\
    \    }\n    return tribonacciSequence;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp_xnaksgj: /tmp/tmp_xnaksgj.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> vec;\n  vec.push_back(1);\n  if (n == 0) {\n    return\
    \ vec;\n  }\n  vec.push_back(3);\n  if (n == 1) {\n    return vec;\n  }\n  vec.push_back(2);\n\
    \  for (long i = 2; i < n; i++) {\n    if (i % 2 == 0) {\n      vec.push_back(1\
    \ + i / 2);\n    } else {\n      vec.push_back(vec[i - 1] + vec[i - 2] + vec[i\
    \ + 1]);\n    }\n  }\n  return vec;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpd75wtxov: /tmp/tmpd75wtxov.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> a(n + 1);\n    a[0] = 1;\n    if (n == 0) return\
    \ a;\n    a[1] = 3;\n    if (n == 1) return a;\n    a[2] = 2;\n    if (n == 2)\
    \ return a;\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n \
    \           a[i] = 1 + i / 2;\n        } else {\n            a[i] = a[i - 1] +\
    \ a[i - 2] + a[i + 1];\n        }\n    }\n    return a;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp0m2fq1tx: /tmp/tmp0m2fq1tx.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v(n+1);\n\tv[0] = 1;\n\tv[1] = 3;\n\tv[2] = 2;\n\t\
    for(int i = 3; i < n+1; i++) {\n\t\tv[i] = (i & 1) ? v[i-1] + v[i-2] + v[i+1]\
    \ : 1 + (i/2);\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpzeeof_g7: /tmp/tmpzeeof_g7.cpp:30: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        long num = result[i] +\
    \ result[i + 1] + result[i + 2];\n        result.push_back(num);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpiw1yoh7z: /tmp/tmpiw1yoh7z.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0) {\n        v.push_back(1);\n\
    \        return v;\n    }\n    if(n == 1) {\n        v.push_back(1);\n       \
    \ v.push_back(3);\n        return v;\n    }\n    if(n == 2) {\n        v.push_back(1);\n\
    \        v.push_back(3);\n        v.push_back(2);\n        return v;\n    }\n\
    \    std::vector<long> v1 = tri(n - 1);\n    std::vector<long> v2 = tri(n - 2);\n\
    \    std::vector<long> v3 = tri(n - 3);\n    v = v1;\n    v.push_back(v1[n] +\
    \ v2[n] + v3[n]);\n    return v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpswfzhwcl: /tmp/tmpswfzhwcl.cpp:44: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result(n + 1);\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        result[i]\
    \ = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpwtgh1tw6: /tmp/tmpwtgh1tw6.cpp:30: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102240
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tribonacci;\n    long curr = 0;\n    long next =\
    \ 1;\n    long temp = 0;\n    for(int i = 0; i < n + 1; i++){\n        temp =\
    \ curr;\n        curr = next;\n        next = i % 2 == 0 ? 1 + (i / 2) : (curr\
    \ + next + tribonacci[i - 2]);\n        tribonacci.push_back(next);\n    }\n \
    \   return tribonacci;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmphb0731ih: /tmp/tmphb0731ih.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0)\n        return v;\n    v.push_back(1);\n\
    \    if(n == 1)\n        return v;\n    v.push_back(3);\n    if(n == 2)\n    \
    \    return v;\n    v.push_back(2);\n    long term;\n    for(int i = 3; i <= n;\
    \ i++){\n        if(i % 2 == 0)\n            term = 1 + i / 2;\n        else{\n\
    \            term = v[i - 1] + v[i - 2] + v[i - 3];\n        }\n        v.push_back(term);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpc4l6c_45: /tmp/tmpc4l6c_45.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) return {};\n    vector<long> result = {1, 3, 2};\n    while(result.size()\
    \ != n+1){\n        if(result.size()%2 == 0){\n            result.push_back(1+\
    \ (long)result.size()/2);\n        }\n        else{\n            result.push_back(result[result.size()-1]\
    \ + result[result.size()-2] + result[result.size()-3]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq0b1lhwb.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpq0b1lhwb.cpp:20:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   20 |     vector<long> result = {1, 3, 2};\n      |     ^~~~~~\n\
    /tmp/tmpq0b1lhwb.cpp:20:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq0b1lhwb.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq0b1lhwb.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpq0b1lhwb.cpp:20:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   20 |     vector<long>\
    \ result = {1, 3, 2};\n      |            ^~~~\n/tmp/tmpq0b1lhwb.cpp:21:11: error:\
    \ \u2018result\u2019 was not declared in this scope\n   21 |     while(result.size()\
    \ != n+1){\n      |           ^~~~~~\n/tmp/tmpq0b1lhwb.cpp:29:12: error: \u2018\
    result\u2019 was not declared in this scope\n   29 |     return result;\n    \
    \  |            ^~~~~~\n"
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> Triboacci(n + 1);\n    Triboacci[0] = 1;\n    Triboacci[1]\
    \ = 3;\n    Triboacci[2] = 2;\n    for (long i = 3; i <= n; i++) {\n        if\
    \ (i % 2 == 0) {\n            Triboacci[i] = 1 + i / 2;\n        } else {\n  \
    \          Triboacci[i] = Triboacci[i - 1] + Triboacci[i - 2] + Triboacci[i +\
    \ 1];\n        }\n    }\n    return Triboacci;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp8ukrec79: /tmp/tmp8ukrec79.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> ans(n + 1);\n  ans[0] = 1;\n  if (n == 0) return ans;\n\
    \  ans[1] = 3;\n  if (n == 1) return ans;\n  ans[2] = 2;\n  if (n == 2) return\
    \ ans;\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      ans[i]\
    \ = 1 + i / 2;\n    } else {\n      ans[i] = ans[i - 1] + ans[i - 2] + ans[i +\
    \ 1];\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpdwby30y6: /tmp/tmpdwby30y6.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tresult.push_back(1);\n\tfor (int i = 1;\
    \ i <= n; i++) {\n\t\tif (i == 1) {\n\t\t\tresult.push_back(3);\n\t\t}\n\t\telse\
    \ if (i % 2 == 0) {\n\t\t\tresult.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\
    \t\tresult.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp0neiv5nc: /tmp/tmp0neiv5nc.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> ans(n + 1);\n\tans[0] = 1;\n\tans[1] = 3;\n\tans[2]\
    \ = 2;\n\tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tans[i]\
    \ = ans[i / 2] + i / 2;\n\t\t}\n\t\telse {\n\t\t\tans[i] = ans[i - 1] + ans[i\
    \ - 2] + ans[i + 1];\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp6rxki1zr: /tmp/tmp6rxki1zr.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long dp[1000000];\n    dp[0] = 1;\n\
    \    dp[1] = 3;\n    dp[2] = 2;\n    for(int i = 3; i <= n; i++) {\n        if(i\
    \ % 2 == 0)\n            dp[i] = 1 + i / 2;\n        else\n            dp[i] =\
    \ dp[i - 1] + dp[i - 2] + dp[i + 1];\n    }\n    for(int i = 0; i <= n; i++)\n\
    \        result.push_back(dp[i]);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpj6wjukrf: /tmp/tmpj6wjukrf.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res(n+1);\n    res[0] = 1;\n    res[1] = 3;\n  \
    \  res[2] = 2;\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n\
    \            res[i] = 1 + i / 2;\n        } else {\n            res[i] = res[i-1]\
    \ + res[i-2] + res[i+1];\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp5aayjawa: /tmp/tmp5aayjawa.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tfor (long i = 0; i <= n; i++) {\n\t\tlong temp\
    \ = 0;\n\t\tif (i == 0) temp = 1;\n\t\telse if (i == 1) temp = 3;\n\t\telse if\
    \ (i == 2) temp = 2;\n\t\telse if (i % 2 == 0) temp = 1 + i / 2;\n\t\telse {\n\
    \t\t\tlong c = i - 1;\n\t\t\tlong b = i - 2;\n\t\t\tlong a = i + 1;\n\t\t\ttemp\
    \ = tri(c)[c] + tri(b)[b] + tri(a)[a];\n\t\t}\n\t\tv.push_back(temp);\n\t}\n\t\
    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) {\n        res.push_back(1);\n\
    \        return res;\n    }\n    res.push_back(1);\n    res.push_back(3);\n  \
    \  res.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0)\
    \ {\n            res.push_back(1 + i / 2);\n        } else {\n            res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpat4tmi6m: /tmp/tmpat4tmi6m.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    for (long i = 1; i <= n; i++) {\n      \
    \  result.push_back(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpicusbex4: /tmp/tmpicusbex4.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> ans;\n    ans.push_back(1);\n\
    \    if (n == 0) {\n        return ans;\n    }\n    ans.push_back(3);\n    if\
    \ (n == 1) {\n        return ans;\n    }\n    ans.push_back(2);\n    if (n ==\
    \ 2) {\n        return ans;\n    }\n    ans.push_back(8);\n    if (n == 3) {\n\
    \        return ans;\n    }\n    for (int i = 4; i <= n; i++) {\n        long\
    \ odd = 0;\n        if (i % 2 == 1) {\n            odd = ans[ans.size() - 1] +\
    \ ans[ans.size() - 2] + ans[ans.size() - 3];\n        }\n        else {\n    \
    \        odd = 1 + i / 2;\n        }\n        ans.push_back(odd);\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpg1qos9o0: /tmp/tmpg1qos9o0.cpp:53: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0)\n        return res;\n    long\
    \ a = 1, b = 3, c = 2;\n    res.push_back(a);\n    if(n == 1)\n        return\
    \ res;\n    res.push_back(b);\n    if(n == 2)\n        return res;\n    res.push_back(c);\n\
    \    for(int i = 3; i <= n; i++){\n        long c1 = i % 2 == 0 ? (1 + i / 2)\
    \ : (res[i - 1] + res[i - 2] + res[i + 1]);\n        a = b;\n        b = c;\n\
    \        c = c1;\n        res.push_back(c1);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpa5ifif5u: /tmp/tmpa5ifif5u.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102241
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v1 = {1,3,2};\n  if(n <= 3)\n  {\n    return v1;\n\
    \  }\n  std::vector<long> v;\n  for(long i = 1; i <= n; i++)\n  {\n    if(i ==\
    \ 1)\n    {\n      v.push_back(1);\n    }\n    else if(i == 2)\n    {\n      v.push_back(3);\n\
    \    }\n    else if(i == 3)\n    {\n      v.push_back(2);\n    }\n    else\n \
    \   {\n      v.push_back(v[i - 1] + v[i - 2] + v[i - 3]);\n    }\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp955ie5io: /tmp/tmp955ie5io.cpp:48: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> a(n + 1);\n    if (n > 0) a[1] = 3;\n    if (n >\
    \ 1) a[2] = 2;\n    if (n > 2) a[3] = 8;\n    for (int i = 4; i <= n; i++) {\n\
    \        if (i % 2 == 0) {\n            a[i] = 1 + i / 2;\n        } else {\n\
    \            a[i] = a[i - 1] + a[i - 2] + a[i + 1];\n        }\n    }\n    return\
    \ a;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp06xk80y9: /tmp/tmp06xk80y9.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> tri_vector{1, 3, 2};\n  if (n < 3) {\n    tri_vector.resize(n\
    \ + 1);\n    return tri_vector;\n  }\n  for (int i = 3; i <= n; i++) {\n    if\
    \ (i % 2 == 0) {\n      tri_vector.push_back(1 + i / 2);\n    } else {\n     \
    \ tri_vector.push_back(tri_vector[i - 2] + tri_vector[i - 1] + tri_vector[i -\
    \ 3]);\n    }\n  }\n  return tri_vector;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp2kzq0jpr: /tmp/tmp2kzq0jpr.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  long tri1 = 3;\n  long tri2 = 2;\n  long tri3 = 1;\n  long temp;\n \
    \ std::vector<long> result{1, 3, 2};\n  for (long i = 0; i < n; i++) {\n    if\
    \ (i % 2 == 0) {\n      temp = tri1;\n      tri1 = tri2;\n      tri2 = tri3;\n\
    \      tri3 = tri3 + temp;\n    } else {\n      temp = tri1;\n      tri1 = tri2;\n\
    \      tri2 = tri3;\n      tri3 = tri3 + tri1 + tri2;\n    }\n    result.push_back(tri3);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpvr3il60c: /tmp/tmpvr3il60c.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102242
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // your code here\n  std::vector<long> result;\n  int tri[n+1];\n  if(n==0)\n\
    \    return result;\n  tri[0]=1;\n  tri[1]=3;\n  tri[2]=2;\n  for(int i=3;i<=n;i++)\n\
    \  {\n    if(i%2==0)\n      tri[i]=1+(i/2);\n    else\n      tri[i]=tri[i-1]+tri[i-2]+tri[i+1];\n\
    \  }\n  for(int i=0;i<=n;i++)\n    result.push_back(tri[i]);\n  return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpgx71xh60: /tmp/tmpgx71xh60.cpp:41: int main(): Assertion `candidate((4))
    == (std::vector<long>({1, 3, 2, 8, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v = {1, 3, 2};\n  for (int i = 2; i < n; i++)\n  \
    \  v.push_back(v[i - 2] + v[i - 1] + v[i]);\n  return v;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpbr_11a7v: /tmp/tmpbr_11a7v.cpp:26: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tif (n == 0) {\n\t\treturn {};\n\t}\n\tstd::vector<long> res;\n\tres.push_back(1);\n\
    \tif (n == 1) {\n\t\treturn res;\n\t}\n\tres.push_back(3);\n\tif (n == 2) {\n\t\
    \treturn res;\n\t}\n\tres.push_back(2);\n\tif (n == 3) {\n\t\treturn res;\n\t\
    }\n\tfor (int i = 3; i < n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tres.push_back(res[i\
    \ - 1] + 1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tres.push_back(res[i - 1] + res[i\
    \ - 2] + res[i - 3]);\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpov4id2qd: /tmp/tmpov4id2qd.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> l;\n    l.push_back(1);\n    l.push_back(3);\n \
    \   l.push_back(2);\n    if(n==0)\n    {\n        l.pop_back();\n        l.pop_back();\n\
    \        l.pop_back();\n        return l;\n    }\n    if(n==1)\n    {\n      \
    \  l.pop_back();\n        l.pop_back();\n        return l;\n    }\n    if(n==2)\n\
    \    {\n        l.pop_back();\n        return l;\n    }\n    for(int i=0;i<n-2;i++)\n\
    \    {\n        l.push_back(l[i]+l[i+1]+l[i+2]);\n    }\n    return l;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpl9hsf29w: /tmp/tmpl9hsf29w.cpp:49: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    ans.push_back(1);\n    ans.push_back(3);\n\
    \    ans.push_back(2);\n    long long x=0,y=3,z=2;\n    long long temp;\n    if(n==1)\n\
    \    {\n        ans.erase(ans.begin()+1);\n        return ans;\n    }\n    if(n==2)\n\
    \    {\n        ans.erase(ans.begin()+2);\n        return ans;\n    }\n    for(int\
    \ i=0;i<n-2;i++)\n    {\n        if(i%2==0)\n        {\n            x=1+i/2;\n\
    \            ans.push_back(x);\n        }\n        else\n        {\n         \
    \   temp=x+y+z;\n            y=z;\n            z=x;\n            x=temp;\n   \
    \         ans.push_back(temp);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpjhvdjh5f: /tmp/tmpjhvdjh5f.cpp:55: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res;\n  for (long i = 0; i <= n; i++) {\n    if (i\
    \ == 0) {\n      res.push_back(1);\n    } else if (i == 1) {\n      res.push_back(3);\n\
    \    } else if (i == 2) {\n      res.push_back(2);\n    } else if (i % 2 == 0)\
    \ {\n      res.push_back(1 + i / 2);\n    } else {\n      res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n    }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpo1rcz9yc: /tmp/tmpo1rcz9yc.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tris(n+1);\n    tris[0] = 1;\n    tris[1] = 3;\n\
    \    tris[2] = 2;\n    long n1 = tris[1];\n    long n2 = tris[2];\n    long n3\
    \ = tris[0];\n    long temp1, temp2, temp3;\n    for(int i = 3; i < n+1; i++){\n\
    \        temp1 = n1;\n        temp2 = n2;\n        temp3 = n3;\n        if(i %\
    \ 2 == 0){\n            tris[i] = 1 + i / 2;\n        }\n        else{\n     \
    \       tris[i] = tris[i-1] + tris[i-2] + tris[i+1];\n        }\n        n1 =\
    \ temp2;\n        n2 = temp3;\n        n3 = temp1;\n    }\n    return tris;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp4lolr4m_: /tmp/tmp4lolr4m_.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n > 0);\n    std::vector<long> tri;\n    tri.push_back(1);\n\
    \    tri.push_back(3);\n    tri.push_back(2);\n    if (n == 1) {\n        return\
    \ {1};\n    }\n    if (n == 2) {\n        return {1, 3};\n    }\n    if (n ==\
    \ 3) {\n        return {1, 3, 2};\n    }\n    for (int i = 3; i < n; i++) {\n\
    \        if (i % 2 == 0) {\n            tri.push_back(1 + i / 2);\n        } else\
    \ {\n            long a = tri[i - 3] + tri[i - 2] + tri[i - 1];\n            tri.push_back(a);\n\
    \        }\n    }\n    return tri;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpab3rssm5: /tmp/tmpab3rssm5.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v(n+1);\n\tv[0] = 1;\n\tif(n >= 1) v[1] = 3;\n\tif(n\
    \ >= 2) v[2] = 2;\n\tfor(int i = 3; i <= n; i++)\n\t\tv[i] = (i & 1) ? (v[i-1]\
    \ + v[i-2] + v[i+1]) : (1 + i / 2);\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp0fbs21na: /tmp/tmp0fbs21na.cpp:29: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  assert(n >= 0);\n  if (n == 0) return {};\n  std::vector<long> v = {1,\
    \ 3, 2};\n  long t = 0;\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0)\
    \ {\n      t = 1 + i / 2;\n    } else {\n      t = v[i - 1] + v[i - 2] + v[i -\
    \ 3];\n    }\n    v.push_back(t);\n  }\n  return v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpg957gj7u: /tmp/tmpg957gj7u.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result(n + 1);\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result[i] = 1 + i / 2;\n        } else {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpgnmw2md5: /tmp/tmpgnmw2md5.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  if (n < 0) return {};\n  if (n == 0) return {1};\n  if (n == 1) return\
    \ {1, 3};\n  long a = 1, b = 3, c = 2;\n  std::vector<long> res = {1, 3, 2};\n\
    \  for (long i = 3; i <= n; i++) {\n    long a1 = (i % 2) ? a + b + c : 1 + i\
    \ / 2;\n    a = b;\n    b = c;\n    c = a1;\n    res.push_back(a1);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpfd92bg07: /tmp/tmpfd92bg07.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> triSeq;\n    if(n == 0)\n        return triSeq;\n\
    \    triSeq.push_back(1);\n    if(n == 1)\n        return triSeq;\n    triSeq.push_back(3);\n\
    \    if(n == 2)\n        return triSeq;\n    triSeq.push_back(2);\n    if(n ==\
    \ 3)\n        return triSeq;\n    for(int i = 4; i <= n; i++){\n        if(i %\
    \ 2 == 0)\n            triSeq.push_back(1 + i / 2);\n        else\n          \
    \  triSeq.push_back(triSeq[i - 1] + triSeq[i - 2] + triSeq[i + 1]);\n    }\n \
    \   return triSeq;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpaigr4z0j: /tmp/tmpaigr4z0j.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> res;\n    res.push_back(1);\n\
    \    if (n == 0) return res;\n    res.push_back(3);\n    if (n == 1) return res;\n\
    \    res.push_back(2);\n    if (n == 2) return res;\n    while (res.size() <=\
    \ n) {\n        long curr = res[res.size() - 1];\n        long curr_1 = res[res.size()\
    \ - 2];\n        long curr_2 = res[res.size() - 3];\n        if (curr % 2 == 0)\
    \ {\n            res.push_back(1 + curr / 2);\n        } else {\n            res.push_back(curr\
    \ + curr_1 + curr_2);\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpq9i69sfj: /tmp/tmpq9i69sfj.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result = {1, 3, 2};\n    if (n == 1) {\n       \
    \ result.pop_back();\n        result.pop_back();\n        return result;\n   \
    \ } else if (n == 2) {\n        result.pop_back();\n        return result;\n \
    \   } else if (n == 3) {\n        return result;\n    } else {\n        for (long\
    \ i = 3; i < n; i++) {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i - 3]);\n        }\n        return result;\n    }\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpx7gr686c: /tmp/tmpx7gr686c.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> ret(n + 1);\n  ret[0] = 1;\n  ret[1] = 3;\n  ret[2]\
    \ = 2;\n  for (int i = 3; i <= n; i++) {\n    ret[i] = (i % 2 == 0) ? ret[i -\
    \ 1] + ret[i - 2] + ret[i + 1] : 1 + i / 2;\n  }\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpqx8onw6_: /tmp/tmpqx8onw6_.cpp:30: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  long  i = 1;\n  std::vector<long> ret = {1, 3, 2};\n  while (i < n)\
    \ {\n    if (i % 2 == 0) {\n      ret.push_back(1 + i / 2);\n    } else {\n  \
    \    ret.push_back(ret[i - 1] + ret[i - 2] + ret[i + 1]);\n    }\n    i++;\n \
    \ }\n  return ret;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpst0oq03q: /tmp/tmpst0oq03q.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  //your code here\n  std::vector<long> result;\n  result.push_back(1);\n\
    \  for(int i = 1; i <= n; i++) {\n    if(i == 1) result.push_back(3);\n    else\
    \ if(i == 2) result.push_back(2);\n    else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp62bek29j: /tmp/tmp62bek29j.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> arr;\n    arr.push_back(1);\n    arr.push_back(3);\n\
    \    arr.push_back(2);\n    arr.push_back(8);\n    if(n == 0) return {1};\n  \
    \  if(n == 1) return {1, 3};\n    if(n == 2) return {1, 3, 2};\n    for(int i\
    \ = 4; i <= n; i++){\n        if(i % 2 == 0) arr.push_back(1 + i / 2);\n     \
    \   else arr.push_back(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n    return\
    \ arr;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpnc5_mdww: /tmp/tmpnc5_mdww.cpp:37: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  long val = n;\n  std::vector<long> a;\n  a.push_back(1);\n  a.push_back(3);\n\
    \  a.push_back(2);\n  if(n == 1) {\n    return a;\n  }\n  a.push_back(8);\n  long\
    \ num1 = 2;\n  long num2 = 3;\n  long num3 = 8;\n  long temp;\n  for(int i = 4;\
    \ i <= n; i++) {\n    if(i % 2 == 0) {\n      temp = (i / 2) + 1;\n    } else\
    \ {\n      temp = num1 + num2 + num3;\n    }\n    num1 = num2;\n    num2 = num3;\n\
    \    num3 = temp;\n    a.push_back(temp);\n  }\n  return a;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp6744ijll: /tmp/tmp6744ijll.cpp:49: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    ans.push_back(1);\n    ans.push_back(3);\n\
    \    ans.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 ==\
    \ 0) {\n            ans.push_back(1 + i / 2);\n        } else {\n            ans.push_back(ans[i\
    \ - 1] + ans[i - 2] + ans[i + 1]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp5q8jh96f: /tmp/tmp5q8jh96f.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res(n+1);\n    res[0] = 0;\n    res[1] = 1;\n  \
    \  res[2] = 3;\n    res[3] = 2;\n    for(int i = 4; i <= n; i++){\n        if(i%2==0){\n\
    \            res[i] = 1 + i/2;\n        }\n        else{\n            res[i] =\
    \ res[i-1] + res[i-2] + res[i+1];\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpahggw5zu: /tmp/tmpahggw5zu.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        long res\
    \ = i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        result.push_back(res);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpkmshjy1b: /tmp/tmpkmshjy1b.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> trib;\n    trib.push_back(1);\n    trib.push_back(3);\n\
    \    trib.push_back(2);\n    if(n > 3) {\n        for(int i = 3; i <= n; i++)\
    \ {\n            if(i % 2 == 0) {\n                trib.push_back(1 + i / 2);\n\
    \            } else {\n                long temp = trib[i - 1] + trib[i - 2] +\
    \ trib[i + 1];\n                trib.push_back(temp);\n            }\n       \
    \ }\n    }\n    return trib;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpkvz_d8l7: /tmp/tmpkvz_d8l7.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v(n+1);\n  v[0] = 1;\n  v[1] = 3;\n  v[2] = 2;\n \
    \ for(int i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n      v[i] = 1 + i / 2;\n\
    \    } else {\n      v[i] = v[i-1] + v[i-2] + v[i+1];\n    }\n  }\n  return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp59nyn8no: /tmp/tmp59nyn8no.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res = {1, 3, 2};\n  for (int i = 3; i <= n; i++) {\n\
    \    long next = i % 2 == 0 ? 1 + i / 2 : res[i - 1] + res[i - 2] + res[i - 3];\n\
    \    res.push_back(next);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpm4xw_fud: /tmp/tmpm4xw_fud.cpp:28: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102243
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  v.push_back(8);\n  if (n == 1) {\n    v.erase(v.begin() + 3);\n    v.erase(v.begin()\
    \ + 2);\n    v.erase(v.begin() + 1);\n    return v;\n  }\n  if (n == 2) {\n  \
    \  v.erase(v.begin() + 3);\n    v.erase(v.begin() + 2);\n    return v;\n  }\n\
    \  if (n == 3) return v;\n  long size = v.size();\n  for (int i = 4; i <= n; i++)\
    \ {\n    if (i % 2 == 0) {\n      v.push_back(1 + i / 2);\n    } else {\n    \
    \  v.push_back(v[size - 3] + v[size - 2] + v[size - 1]);\n    }\n    size++;\n\
    \  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp0wqs22br: /tmp/tmp0wqs22br.cpp:51: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    res.push_back(1);\n\
    \    if(n == 1) return res;\n    res.push_back(3);\n    if(n == 2) return res;\n\
    \    res.push_back(2);\n    if(n == 3) return res;\n    for(int i = 4; i <= n;\
    \ i++){\n        if(i % 2 == 0) res.push_back(1 + i / 2);\n        else res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i - 4]);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpb_fv5oms: /tmp/tmpb_fv5oms.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> tri;\n  tri.push_back(1);\n  if (n > 0) tri.push_back(3);\n\
    \  if (n > 1) tri.push_back(2);\n  if (n > 2) {\n    for (int i = 3; i <= n; i++)\
    \ {\n      if (i % 2 == 0) {\n        tri.push_back(1 + i / 2);\n      } else\
    \ {\n        tri.push_back(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n      }\n \
    \   }\n  }\n  return tri;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpfcv4f6zk: /tmp/tmpfcv4f6zk.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tif (n == 0) {\n\t\tv.push_back(1);\n\t\treturn\
    \ v;\n\t}\n\telse if (n == 1) {\n\t\tv.push_back(1);\n\t\tv.push_back(3);\n\t\t\
    return v;\n\t}\n\telse if (n == 2) {\n\t\tv.push_back(1);\n\t\tv.push_back(3);\n\
    \t\tv.push_back(2);\n\t\treturn v;\n\t}\n\telse {\n\t\tv.push_back(1);\n\t\tv.push_back(3);\n\
    \t\tv.push_back(2);\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tif (i % 2 == 0)\
    \ {\n\t\t\t\tv.push_back(1 + i / 2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tv.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n\t\t\t}\n\t\t}\n\t\treturn v;\n\t}\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpiucpf6ad: /tmp/tmpiucpf6ad.cpp:52: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0) return v;\n    v.push_back(1);\n\
    \    if(n == 1) return v;\n    v.push_back(3);\n    if(n == 2) return v;\n   \
    \ v.push_back(2);\n    while(v.size() <= n) {\n        long sz = v.size();\n \
    \       if(sz % 2 == 0) {\n            v.push_back(1 + (sz / 2));\n        } else\
    \ {\n            v.push_back(v[sz - 1] + v[sz - 2] + v[sz + 1]);\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpl11pw33n: /tmp/tmpl11pw33n.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> ret;\n    if (n == 0)\n   \
    \     return ret;\n    long d[n + 1];\n    ret.push_back(1);\n    if (n == 1)\n\
    \        return ret;\n    ret.push_back(3);\n    if (n == 2)\n        return ret;\n\
    \    ret.push_back(2);\n    if (n == 3)\n        return ret;\n    d[0] = 1;\n\
    \    d[1] = 3;\n    d[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        if\
    \ (i % 2 == 0)\n            d[i] = 1 + i / 2;\n        else\n            d[i]\
    \ = d[i - 1] + d[i - 2] + d[i + 1];\n        ret.push_back(d[i]);\n    }\n   \
    \ return ret;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmps03_cead: /tmp/tmps03_cead.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tri_series;\n    if(n == 0) {\n        tri_series.push_back(1);\n\
    \        return tri_series;\n    }\n    if(n == 1) {\n        tri_series.push_back(1);\n\
    \        tri_series.push_back(3);\n        return tri_series;\n    }\n    if(n\
    \ == 2) {\n        tri_series.push_back(1);\n        tri_series.push_back(3);\n\
    \        tri_series.push_back(2);\n        return tri_series;\n    }\n    if(n\
    \ == 3) {\n        tri_series.push_back(1);\n        tri_series.push_back(3);\n\
    \        tri_series.push_back(2);\n        tri_series.push_back(8);\n        return\
    \ tri_series;\n    }\n    long tri_prev_prev_prev = 1;\n    long tri_prev_prev\
    \ = 3;\n    long tri_prev = 2;\n    long tri_current = 8;\n    tri_series.push_back(tri_prev_prev_prev);\n\
    \    tri_series.push_back(tri_prev_prev);\n    tri_series.push_back(tri_prev);\n\
    \    tri_series.push_back(tri_current);\n    for(long i = 4; i <= n; i++) {\n\
    \        if(i & 1) {\n            tri_current = tri_prev + tri_prev_prev + tri_prev_prev_prev;\n\
    \        } else {\n            tri_current = 1 + (i / 2);\n        }\n       \
    \ tri_series.push_back(tri_current);\n        tri_prev_prev_prev = tri_prev_prev;\n\
    \        tri_prev_prev = tri_prev;\n        tri_prev = tri_current;\n    }\n \
    \   return tri_series;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp0t8_u7yf: /tmp/tmp0t8_u7yf.cpp:67: int main(): Assertion `candidate((5))
    == (std::vector<long>({1, 3, 2, 8, 3, 15}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // your code\n    std::vector<long>v;\n    v.push_back(1);\n    v.push_back(3);\n\
    \    v.push_back(2);\n    if(n==1)\n    {\n        v.erase(v.begin()+1);\n   \
    \     return v;\n    }\n    if(n==2)\n    {\n        v.erase(v.begin()+2);\n \
    \       return v;\n    }\n    int i=3;\n    while(i<=n)\n    {\n        if(i%2!=0)\n\
    \        {\n            v.push_back(v[i-1]+v[i-2]+v[i-3]);\n        }\n      \
    \  else\n        {\n            v.push_back(1+(i/2));\n        }\n        i++;\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmplbxy2x93: /tmp/tmplbxy2x93.cpp:51: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> triArr(n + 1);\n  triArr[0] = 1;\n  triArr[1] = 3;\n\
    \  triArr[2] = 2;\n  for (long i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n\
    \      triArr[i] = 1 + i / 2;\n    } else {\n      triArr[i] = triArr[i - 1] +\
    \ triArr[i - 2] + triArr[i + 1];\n    }\n  }\n  return triArr;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpg5r4sfn1: /tmp/tmpg5r4sfn1.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // your code here\n    if(n==0)return {1};\n    if(n==1)return {1,3};\n\
    \    std::vector<long> result{1,3,2};\n    long temp;\n    for(int i=3;i<=n;i++){\n\
    \        if(i%2==0){\n            temp=1+i/2;\n        }\n        else{\n    \
    \        temp=result[i-1]+result[i-2]+result[i-3];\n        }\n        result.push_back(temp);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpsbfxar9d: /tmp/tmpsbfxar9d.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // TODO: implement your code here\n    return {};\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp5sk9yi21: /tmp/tmp5sk9yi21.cpp:24: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> l;\n  l.push_back(1);\n  l.push_back(3);\n  l.push_back(2);\n\
    \  for(int i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n      l.push_back(1 +\
    \ i / 2);\n    } else {\n      l.push_back(l[i - 1] + l[i - 2] + l[i + 1]);\n\
    \    }\n  }\n  return l;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpio_bugrw: /tmp/tmpio_bugrw.cpp:34: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    result.push_back(3);\n    for (int i = 2;\
    \ i <= n; i++) {\n        long sum = 0;\n        for (int j = 0; j < i - 1; j++)\
    \ {\n            sum += result[j];\n        }\n        result.push_back(sum);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpej0y3kjp: /tmp/tmpej0y3kjp.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpaguqekcs: /tmp/tmpaguqekcs.cpp:29: int main(): Assertion `candidate((4))
    == (std::vector<long>({1, 3, 2, 8, 3}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tlong tri1 = 1;\n\tlong tri2 = 3;\n\tlong\
    \ tri3 = 2;\n\tresult.push_back(tri1);\n\tresult.push_back(tri2);\n\tresult.push_back(tri3);\n\
    \tfor (long i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(1\
    \ + i / 2);\n\t\t}\n\t\telse {\n\t\t\tlong temp = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n\t\t\tresult.push_back(temp);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpeluhwuf7: /tmp/tmpeluhwuf7.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tif (n == 0) return result;\n\tresult.push_back(1);\n\
    \tif (n == 1) return result;\n\tresult.push_back(3);\n\tif (n == 2) return result;\n\
    \tresult.push_back(2);\n\tint i = 4;\n\twhile (i <= n) {\n\t\tint tmp = result[i\
    \ - 3] + result[i - 2] + result[i - 1];\n\t\tresult.push_back(tmp);\n\t\ti++;\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp9cb2abmb: /tmp/tmp9cb2abmb.cpp:36: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    if (n > 2) {\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.push_back(1 + i / 2);\n\
    \            } else {\n                long num = (result[i - 2] + result[i -\
    \ 1] + result[i - 3]);\n                result.push_back(num);\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpifmee45x: /tmp/tmpifmee45x.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102244
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tlong a = 0, b = 1, c = 1;\n\tfor (int i = 0;\
    \ i <= n; i++) {\n\t\tif (i == 0) {\n\t\t\tv.push_back(a);\n\t\t}\n\t\telse if\
    \ (i == 1) {\n\t\t\tv.push_back(b);\n\t\t}\n\t\telse if (i == 2) {\n\t\t\tv.push_back(c);\n\
    \t\t}\n\t\telse {\n\t\t\tlong d = a + b + c;\n\t\t\tv.push_back(d);\n\t\t\ta =\
    \ b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t}\n\t}\n\treturn v;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp481c4xi5: /tmp/tmp481c4xi5.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  //your code here\n  std::vector<long> res;\n  res.push_back(1);\n  if(n\
    \ == 0) return res;\n  res.push_back(3);\n  if(n == 1) return res;\n  res.push_back(2);\n\
    \  if(n == 2) return res;\n  long n1 = 1, n2 = 3, n3 = 2;\n  for(int i = 3; i\
    \ <= n; i++){\n    long temp = n1 + n2 + n3;\n    res.push_back(temp);\n    n1\
    \ = n2;\n    n2 = n3;\n    n3 = temp;\n  }\n  return res;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp4ckx_7x3: /tmp/tmp4ckx_7x3.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n==0)\n    {\n        v.push_back(1);\n\
    \        return v;\n    }\n    else if(n==1)\n    {\n        v.push_back(1);\n\
    \        v.push_back(3);\n        return v;\n    }\n    else if(n==2)\n    {\n\
    \        v.push_back(1);\n        v.push_back(3);\n        v.push_back(2);\n \
    \       return v;\n    }\n    else\n    {\n        v.push_back(1);\n        v.push_back(3);\n\
    \        v.push_back(2);\n        int t1=3,t2=2,t3=1;\n        for(int i=3;i<=n;i++)\n\
    \        {\n            if(i%2==0)\n            {\n                v.push_back(1+i/2);\n\
    \                t3=t2;\n                t2=t1;\n                t1=1+i/2;\n \
    \           }\n            else\n            {\n                v.push_back(t1+t2+t3);\n\
    \                t3=t2;\n                t2=t1;\n                t1=t1+t2+t3;\n\
    \            }\n        }\n        return v;\n    }\n    \n    \n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmptjpe5vxk: /tmp/tmptjpe5vxk.cpp:68: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tresult.push_back(1);\n\tresult.push_back(3);\n\
    \tresult.push_back(2);\n\tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0)\
    \ {\n\t\t\tresult.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpq47d0oeh: /tmp/tmpq47d0oeh.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v(n+1);\n\tv[0] = 1;\n\tif(n >= 1) v[1] = 3;\n\tif(n\
    \ >= 2) v[2] = 2;\n\tfor(int i = 3; i <= n; i++)\n\t\tv[i] = ((i%2 == 0) ? (1\
    \ + i/2) : (v[i-1] + v[i-2] + v[i+1]));\n\treturn v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpci6mkgq3: /tmp/tmpci6mkgq3.cpp:29: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ret;\n    ret.push_back(1);\n    if (n == 0) return\
    \ ret;\n    ret.push_back(3);\n    if (n == 1) return ret;\n    ret.push_back(2);\n\
    \    if (n == 2) return ret;\n    for (int i = 3; i <= n; i++) {\n        long\
    \ tmp = 1 + i / 2;\n        if (i % 2 == 1) {\n            tmp = ret[i - 1] +\
    \ ret[i - 2] + ret[i + 1];\n        }\n        ret.push_back(tmp);\n    }\n  \
    \  return ret;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpyg9b3uup: /tmp/tmpyg9b3uup.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  for (int i = 2; i < n; i++) {\n    if (i % 2 == 0)\n\
    \      result.push_back(1 + i / 2);\n    else\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp4ukl0ge6: /tmp/tmp4ukl0ge6.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.emplace_back(1);\n  for (int i = 1; i <= n; ++i) {\n    if (i % 2 ==\
    \ 0) {\n      result.emplace_back(1 + i / 2);\n    } else {\n      result.emplace_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpcfj9y_3w: /tmp/tmpcfj9y_3w.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> vec;\n\tfor (long i = 0; i <= n; i++) {\n\t\tif (i\
    \ == 0) {\n\t\t\tvec.push_back(1);\n\t\t}\n\t\telse if (i == 1) {\n\t\t\tvec.push_back(3);\n\
    \t\t}\n\t\telse if (i == 2) {\n\t\t\tvec.push_back(2);\n\t\t}\n\t\telse if (i\
    \ % 2 == 0) {\n\t\t\tvec.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tvec.push_back(vec[i\
    \ - 1] + vec[i - 2] + vec[i + 1]);\n\t\t}\n\t}\n\treturn vec;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpeyp2it3z: /tmp/tmpeyp2it3z.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> ans;\n  for (long i = 0; i <= n; i++) {\n    if (i\
    \ == 0) {\n      ans.push_back(1);\n    } else if (i == 1) {\n      ans.push_back(3);\n\
    \    } else if (i == 2) {\n      ans.push_back(2);\n    } else if (i % 2 == 0)\
    \ {\n      ans.push_back(1 + i / 2);\n    } else {\n      ans.push_back(ans[i\
    \ - 1] + ans[i - 2] + ans[i + 1]);\n    }\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpq7zf6362: /tmp/tmpq7zf6362.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  if (n == 0) return {};\n  else if (n == 1) return {1};\n  else if (n\
    \ == 2) return {1, 1};\n  else if (n == 3) return {1, 3, 2};\n  std::vector<long>\
    \ tri_vec = {1, 3, 2};\n  long current = 8;\n  long even_num = 4;\n  long odd_num\
    \ = 1;\n  while (tri_vec.size() < n + 1) {\n    if (even_num == n + 1) {\n   \
    \   if (tri_vec.size() == n + 1) {\n        break;\n      }\n      tri_vec.push_back(current);\n\
    \      current = (current - tri_vec[tri_vec.size() - 2]) + tri_vec[tri_vec.size()\
    \ - 1];\n      odd_num++;\n    } else {\n      tri_vec.push_back(current);\n \
    \     current = 1 + even_num / 2;\n      even_num++;\n    }\n  }\n  return tri_vec;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpqzsglvdv: /tmp/tmpqzsglvdv.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tfor (long i = 0; i <= n; i++) {\n\t\tlong j\
    \ = i;\n\t\tlong temp = 0;\n\t\twhile (j > 0) {\n\t\t\ttemp = (j % 2 == 0) ? 1\
    \ + j / 2 : temp + tri(j - 1)[i] + tri(j - 2)[i] + tri(j + 1)[i];\n\t\t\tj--;\n\
    \t\t}\n\t\tv.push_back(temp);\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v{1, 3, 2};\n    for (long i = 3; i <= n; i++) {\n\
    \        if (i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmphx1gb3y3: /tmp/tmphx1gb3y3.cpp:31: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> answer(n + 1);\n  answer[0] = 1;\n  answer[1] = 3;\n\
    \  answer[2] = 2;\n  if (n < 3) {\n    answer.resize(n + 1);\n    return answer;\n\
    \  }\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      answer[i]\
    \ = 1 + i / 2;\n    } else {\n      answer[i] = answer[i - 1] + answer[i - 2]\
    \ + answer[i + 1];\n    }\n  }\n  return answer;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmph2__0p0h: /tmp/tmph2__0p0h.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  vector<long> tribonacci;\n  // TODO: return the Tribonacci sequence\
    \ with first n + 1 members.\n  if(n == 0) return {};\n  if(n == 1) return {1};\n\
    \  if(n == 2) return {1,3};\n  tribonacci.push_back(1);\n  tribonacci.push_back(3);\n\
    \  tribonacci.push_back(2);\n  n = n - 3;\n  int i = 2;\n  while(n){\n    int\
    \ odd_checker = tribonacci[i] & 1;\n    if(odd_checker){\n      int sum = tribonacci[i]\
    \ + tribonacci[i - 1] + tribonacci[i + 1];\n      tribonacci.push_back(sum);\n\
    \      i++;\n    }\n    else{\n      int sum = 1 + tribonacci[i] / 2;\n      tribonacci.push_back(sum);\n\
    \      i++;\n    }\n    n--;\n  }\n  return tribonacci;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_b91qvxn.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp_b91qvxn.cpp:19:3: error: \u2018vector\u2019 was not declared\
    \ in this scope\n   19 |   vector<long> tribonacci;\n      |   ^~~~~~\n/tmp/tmp_b91qvxn.cpp:19:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_b91qvxn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_b91qvxn.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp_b91qvxn.cpp:19:10:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |   vector<long>\
    \ tribonacci;\n      |          ^~~~\n/tmp/tmp_b91qvxn.cpp:24:3: error: \u2018\
    tribonacci\u2019 was not declared in this scope\n   24 |   tribonacci.push_back(1);\n\
    \      |   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0)\n        return {};\n    if(n == 1)\n        return {1};\n\
    \    if(n == 2)\n        return {1,3};\n    std::vector<long> v;\n    v.push_back(1);\n\
    \    v.push_back(3);\n    v.push_back(2);\n    for(int i = 3; i < n; i++){\n \
    \       if(i % 2 == 0)\n            v.push_back(1 + i / 2);\n        else\n  \
    \          v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpl6m2p4jl: /tmp/tmpl6m2p4jl.cpp:39: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  long a = 0, b = 1, c = 3, d = a + b + c;\n \
    \ if (n < 0)\n    return v;\n  v.push_back(a);\n  if (n == 0)\n    return v;\n\
    \  v.push_back(b);\n  if (n == 1)\n    return v;\n  v.push_back(c);\n  if (n ==\
    \ 2)\n    return v;\n  for (long i = 3; i <= n; i++) {\n    v.push_back(d);\n\
    \    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return v;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp02_ktcv_: /tmp/tmp02_ktcv_.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102245
