name: HumanEval_130_tri
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // your code\n  std::vector<long> res;\n  if(n == 0)\n    return res;\n\
    \  res.push_back(1);\n  if(n == 1)\n    return res;\n  res.push_back(3);\n  if(n\
    \ == 2)\n    return res;\n  res.push_back(2);\n  long index = 3;\n  while(index\
    \ <= n)\n  {\n    if(index % 2 == 0)\n      res.push_back(1 + index / 2);\n  \
    \  else\n      res.push_back(res[index - 1] + res[index - 2] + res[index + 1]);\n\
    \    index++;\n  }\n  return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp2wixismo: /tmp/tmp2wixismo.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tassert(n >= 0);\n\tstd::vector<long> result = {1, 3, 2};\n\tfor (long\
    \ i = 2; i < n; i++) {\n\t\tresult.push_back(result[i - 1] + result[i - 2] + result[i]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpzmmnc_my: /tmp/tmpzmmnc_my.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> myvec;\n    myvec.push_back(1);\n    myvec.push_back(3);\n\
    \    myvec.push_back(2);\n    myvec.push_back(8);\n    while(myvec.size() < n\
    \ + 1) {\n        int sum = 0;\n        for(int i = myvec.size() - 1; i > myvec.size()\
    \ - 4; i--) {\n            sum += myvec[i];\n        }\n        myvec.push_back(sum);\n\
    \    }\n    return myvec;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpn1d6wegj: /tmp/tmpn1d6wegj.cpp:36: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> seq;\n    seq.push_back(1);\n    seq.push_back(3);\n\
    \    seq.push_back(2);\n    seq.push_back(8);\n    long num = 8;\n    long num1\
    \ = 2;\n    long num2 = 3;\n    long num3 = 1;\n    for(int i = 4; i <= n; i++){\n\
    \        if(i % 2 == 0){\n            num = (1 + (i / 2));\n            seq.push_back(num);\n\
    \        }\n        else{\n            num = (num1 + num2 + num3);\n         \
    \   seq.push_back(num);\n            num3 = num2;\n            num2 = num1;\n\
    \            num1 = num;\n        }\n    }\n    return seq;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpwud9zoc4: /tmp/tmpwud9zoc4.cpp:47: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  if(n == 0) return v;\n  v.push_back(1);\n  if(n\
    \ == 1) return v;\n  v.push_back(3);\n  if(n == 2) return v;\n  v.push_back(2);\n\
    \  for(int i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n      v.push_back(1 +\
    \ i / 2);\n    } else {\n      v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpo9gb3oop: /tmp/tmpo9gb3oop.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.push_back(1);\n    if(n > 0)\n    {\n\
    \        v.push_back(3);\n        if(n > 1)\n        {\n            v.push_back(2);\n\
    \            if(n > 2)\n            {\n                for(int i = 3; i <= n;\
    \ i++)\n                {\n                    if(i % 2 == 0)\n              \
    \      {\n                        v.push_back(1 + i / 2);\n                  \
    \  }\n                    else\n                    {\n                      \
    \  v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp7xgcyg5c: /tmp/tmp7xgcyg5c.cpp:47: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  long arr[3] = { 1, 2, 3 };\n  std::vector<long> v(n + 1);\n  v[0] =\
    \ 1;\n  for (int i = 1; i <= n; i++) {\n    v[i] = arr[i % 3];\n    arr[i % 3]\
    \ =\n        (i % 2) ? arr[(i - 1) % 3] + arr[(i - 2) % 3] + arr[(i + 1) % 3]\
    \ : 1 + i / 2;\n  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp0j3v9k3b: /tmp/tmp0j3v9k3b.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tif (n >= 1) {\n\t\tresult.push_back(1);\n\
    \t}\n\tif (n >= 2) {\n\t\tresult.push_back(3);\n\t}\n\tif (n >= 3) {\n\t\tresult.push_back(2);\n\
    \t}\n\tfor (long i = 3; i < n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(1\
    \ + i / 2);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpw65ypb50: /tmp/tmpw65ypb50.cpp:41: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // your code here\n  std::vector<long> v;\n  if(n == 0)\n      return\
    \ v;\n  else if(n == 1)\n      return {1};\n  else if(n == 2)\n      return {1,3};\n\
    \  else\n  {\n      v.push_back(1);\n      v.push_back(3);\n      v.push_back(2);\n\
    \      for(int i = 3; i <= n; i++)\n      {\n          long element;\n       \
    \   if(i % 2 == 0)\n          {\n              element = 1 + i / 2;\n        \
    \  }\n          else\n          {\n              element = v[i - 1] + v[i - 2]\
    \ + v[i + 1];\n          }\n          v.push_back(element);\n      }\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpy2rqpbfv: /tmp/tmpy2rqpbfv.cpp:50: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  //..\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpj873gn_u: /tmp/tmpj873gn_u.cpp:23: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    if (n == 1)\n        return result;\n    if (n\
    \ == 2)\n        return result;\n    for (int i = 0; i < n - 2; i++) {\n     \
    \   long a = result[i];\n        long b = result[i + 1];\n        long c = result[i\
    \ + 2];\n        long tmp = a + b + c;\n        result.push_back(tmp);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp12wup3y3: /tmp/tmp12wup3y3.cpp:38: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> trib(n+1);\n  if(n < 1) return trib;\n  trib[0] =\
    \ 1;\n  if(n == 1) return trib;\n  trib[1] = 3;\n  if(n == 2) return trib;\n \
    \ trib[2] = 2;\n  for(long i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n     \
    \ trib[i] = trib[i-2] + trib[i-1] + trib[i+1];\n    } else {\n      trib[i] =\
    \ 1 + i / 2;\n    }\n  }\n  return trib;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp2c41f9vz: /tmp/tmp2c41f9vz.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> ans;\n\tans.push_back(1);\n\tans.push_back(3);\n\t\
    ans.push_back(2);\n\tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\
    \t\tans.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tans.push_back(ans[i -\
    \ 1] + ans[i - 2] + ans[i + 1]);\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpnctelzxj: /tmp/tmpnctelzxj.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v{1, 3, 2};\n  if (n < 3) {\n    v.resize(n + 1);\n\
    \    return v;\n  }\n  for (int i = 3; i <= n; i++) {\n    long l = (i % 2) ?\
    \ v[i - 1] + v[i - 2] + v[i + 1] : (1 + i / 2);\n    v.push_back(l);\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpcxyn6wjf: /tmp/tmpcxyn6wjf.cpp:32: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  long a = 3, b = 2, c = 1;\n  for (long i = 3; i <=\
    \ n; i++) {\n    if (i % 2 == 0) {\n      a = i / 2;\n    } else {\n      a =\
    \ b + c + a;\n    }\n    result.push_back(a);\n    c = b;\n    b = a;\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpu94b4cuw: /tmp/tmpu94b4cuw.cpp:38: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v(n+1);\n    if(n==0) return v;\n    v[0]=1;\n \
    \   if(n==1) return v;\n    v[1]=3;\n    if(n==2) return v;\n    v[2]=2;\n   \
    \ if(n==3) return v;\n    for(int i=3;i<=n;i++){\n        if(i%2==0)\n       \
    \     v[i]=1+i/2;\n        else\n            v[i]=v[i-1]+v[i-2]+v[i+1];\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp54tfsezw: /tmp/tmp54tfsezw.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  if(n == 0) return v;\n  v.push_back(1);\n  if(n\
    \ == 1) return v;\n  v.push_back(3);\n  if(n == 2) return v;\n  v.push_back(2);\n\
    \  if(n == 3) return v;\n  for(int i = 3; i < n; i++) {\n    v.push_back( v[i\
    \ - 1] + v[i - 2] + v[i - 3]);\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpxn8jwzo4: /tmp/tmpxn8jwzo4.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // your code here\n  std::vector<long> res;\n  res.push_back(1);\n \
    \ for(long i = 1; i < n; i++) {\n    if(i % 2 == 0) {\n      res.push_back(1 +\
    \ i / 2);\n    } else {\n      res.push_back(res[i - 1] + res[i - 2] + res[i +\
    \ 1]);\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp0l1zzk7p: /tmp/tmp0l1zzk7p.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> nums(n+1);\n    if(n>=1) nums[1] = 3;\n    if(n>=2)\
    \ nums[2] = 2;\n    if(n>=3) nums[3] = 8;\n    for(int i=4;i<=n;i++){\n      \
    \  nums[i] = nums[i-1] + nums[i-2] + nums[i-3];\n    }\n    return nums;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmprhakl1gv: /tmp/tmprhakl1gv.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> nums;\n\tfor (int i = 0; i <= n; i++) {\n\t\tif (i\
    \ == 0) nums.push_back(1);\n\t\telse if (i == 1) nums.push_back(3);\n\t\telse\
    \ if (i == 2) nums.push_back(2);\n\t\telse {\n\t\t\tif (i % 2 == 0) nums.push_back(1\
    \ + i / 2);\n\t\t\telse nums.push_back(nums[i - 1] + nums[i - 2] + nums[i + 1]);\n\
    \t\t}\n\t}\n\treturn nums;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp907e6ji_: /tmp/tmp907e6ji_.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) return {1};\n    std::vector<long> res{1,3,2};\n    int\
    \ i = 3;\n    while(i < n){\n        if(i % 2 == 0) res.push_back(res[i] / 2);\n\
    \        else res.push_back(res[i-1] + res[i-2] + res[i+1]);\n        i++;\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmppk4wt7tr: /tmp/tmppk4wt7tr.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) {\n        return {0};\n    } else if(n == 1) {\n     \
    \   return {1, 3};\n    } else if(n == 2) {\n        return {1, 3, 2};\n    }\
    \ else {\n        std::vector<long> tribonacci;\n        tribonacci.push_back(1);\n\
    \        tribonacci.push_back(3);\n        tribonacci.push_back(2);\n        while(n--)\
    \ {\n            long last = tribonacci.back();\n            long secondLast =\
    \ tribonacci[tribonacci.size() - 2];\n            long thirdLast = tribonacci[tribonacci.size()\
    \ - 3];\n            if(last % 2 == 0) {\n                tribonacci.push_back(1\
    \ + last / 2);\n            } else {\n                tribonacci.push_back(last\
    \ + secondLast + thirdLast);\n            }\n        }\n        return tribonacci;\n\
    \    }\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp59whh4ve: /tmp/tmp59whh4ve.cpp:45: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.push_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.push_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.push_back(2);\n  if (n ==\
    \ 3) {\n    return result;\n  }\n  result.push_back(8);\n  long cur = 4;\n  while\
    \ (cur < n) {\n    long cur_val = 0;\n    if (cur % 2 == 0) {\n      cur_val =\
    \ 1 + cur / 2;\n    } else {\n      cur_val = result[cur - 1] + result[cur - 2]\
    \ + result[cur + 1];\n    }\n    result.push_back(cur_val);\n    cur++;\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp6idl77py: /tmp/tmp6idl77py.cpp:51: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long cur,prev2=0,prev1=0,prev=1;\n   \
    \ if(n>=1)\n    {\n        cur=1;\n        res.push_back(cur);\n    }\n    if(n>=2)\n\
    \    {\n        cur=3;\n        res.push_back(cur);\n    }\n    if(n>=3)\n   \
    \ {\n        cur=2;\n        res.push_back(cur);\n    }\n    for(int i=3;i<n;i++)\n\
    \    {\n        if(i%2)\n        {\n            cur=prev2+prev1+prev;\n      \
    \      res.push_back(cur);\n            prev2=prev1;\n            prev1=prev;\n\
    \            prev=cur;\n        }\n        else\n        {\n            cur=1+i/2;\n\
    \            res.push_back(cur);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp264v9fkw: /tmp/tmp264v9fkw.cpp:56: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v1 = { 1, 3, 2 };\n\tstd::vector<long> v2;\n\tif (n\
    \ == 0) {\n\t\tv2.push_back(1);\n\t\treturn v2;\n\t}\n\telse if (n == 1) {\n\t\
    \tv2.push_back(1);\n\t\tv2.push_back(3);\n\t\treturn v2;\n\t}\n\telse if (n ==\
    \ 2) {\n\t\tv2.push_back(1);\n\t\tv2.push_back(3);\n\t\tv2.push_back(2);\n\t\t\
    return v2;\n\t}\n\telse {\n\t\tlong a = 1, b = 3, c = 2, d;\n\t\tv2.push_back(a);\n\
    \t\tv2.push_back(b);\n\t\tv2.push_back(c);\n\t\tfor (int i = 3; i <= n; i++) {\n\
    \t\t\tif (i % 2 == 0) {\n\t\t\t\td = a + b + c;\n\t\t\t\tv2.push_back(d);\n\t\t\
    \t\ta = b;\n\t\t\t\tb = c;\n\t\t\t\tc = d;\n\t\t\t}\n\t\t\telse {\n\t\t\t\td =\
    \ (i + 1) / 2;\n\t\t\t\tv2.push_back(d);\n\t\t\t\ta = b;\n\t\t\t\tb = c;\n\t\t\
    \t\tc = d;\n\t\t\t}\n\t\t}\n\t\treturn v2;\n\t}\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpf651xwog: /tmp/tmpf651xwog.cpp:62: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tribo;\n    if(n < 1)\n    {\n        return tribo;\n\
    \    }\n    tribo.push_back(1);\n    if(n == 1)\n    {\n        return tribo;\n\
    \    }\n    tribo.push_back(3);\n    if(n == 2)\n    {\n        return tribo;\n\
    \    }\n    tribo.push_back(2);\n    if(n == 3)\n    {\n        return tribo;\n\
    \    }\n    long long prev = 2;\n    long long pp = 3;\n    long long ppp = 1;\n\
    \    long long sum = 0;\n    for(int i = 3; i < n; i++)\n    {\n        sum =\
    \ prev + pp + ppp;\n        ppp = pp;\n        pp = prev;\n        prev = sum;\n\
    \        tribo.push_back(sum);\n    }\n    return tribo;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpntyr_6ab: /tmp/tmpntyr_6ab.cpp:55: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v(n + 1);\n  v[0] = 1;\n  v[1] = 3;\n  v[2] = 2;\n\
    \  for (long i = 3; i <= n; i++) {\n    v[i] = i % 2 == 0 ? 1 + i / 2 : v[i -\
    \ 1] + v[i - 2] + v[i + 1];\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp1u4cdq0o: /tmp/tmp1u4cdq0o.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> ans;\n  if(n==0) return ans;\n  ans.push_back(1);\n\
    \  if(n==1) return ans;\n  ans.push_back(3);\n  if(n==2) return ans;\n  ans.push_back(2);\n\
    \  long prev=2,prev2=3,prev3=1;\n  for(int i=3;i<=n;i++){\n    if(i%2==0){\n \
    \     long temp = i/2;\n      ans.push_back(temp);\n      prev3=prev2;\n     \
    \ prev2=prev;\n      prev=temp;\n    }\n    else{\n      long temp = prev+prev2+prev3;\n\
    \      ans.push_back(temp);\n      prev3=prev2;\n      prev2=prev;\n      prev=temp;\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp8wv43fff: /tmp/tmp8wv43fff.cpp:47: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tri;\n    tri.push_back(1);\n    tri.push_back(3);\n\
    \    tri.push_back(2);\n    long i = 3;\n    if(n == 0) {\n        tri.erase(tri.begin());\n\
    \        tri.erase(tri.begin());\n        tri.erase(tri.begin());\n        return\
    \ tri;\n    }\n    else if(n == 1) {\n        tri.erase(tri.begin());\n      \
    \  tri.erase(tri.begin());\n        return tri;\n    }\n    else if(n == 2) {\n\
    \        tri.erase(tri.begin());\n        return tri;\n    }\n    while(i <= n)\
    \ {\n        if(i % 2 == 0) {\n            tri.push_back(1 + i / 2);\n       \
    \ }\n        else {\n            tri.push_back(tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1]);\n        }\n        i++;\n    }\n    return tri;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp9eib3ru3: /tmp/tmp9eib3ru3.cpp:52: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tv.push_back(1);\n\tv.push_back(3);\n\tv.push_back(2);\n\
    \tv.push_back(8);\n\tfor (int i = 3; i < n; i++) {\n\t\tif (i % 2 == 0)\n\t\t\t\
    v.push_back(v[i] + 1 + i / 2);\n\t\telse\n\t\t\tv.push_back(v[i - 1] + v[i - 2]\
    \ + v[i + 1]);\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp69pndv68: /tmp/tmp69pndv68.cpp:35: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1, b = 3, c = 2;\n    if (n\
    \ > 0) {\n        result.push_back(a);\n    }\n    if (n > 1) {\n        result.push_back(b);\n\
    \    }\n    if (n > 2) {\n        result.push_back(c);\n    }\n    long d;\n \
    \   for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            d =\
    \ 1 + i / 2;\n        } else {\n            d = a + b + c;\n        }\n      \
    \  a = b;\n        b = c;\n        c = d;\n        result.push_back(d);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpblpk04ri: /tmp/tmpblpk04ri.cpp:46: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tif (n > 0) {\n\t\tif (n % 2 == 0)\n\t\t\
    \tresult.push_back(1 + n / 2);\n\t\telse\n\t\t\tresult.push_back(3);\n\t\tfor\
    \ (long i = 2; i <= n; i++) {\n\t\t\tif (i % 2 == 0)\n\t\t\t\tresult.push_back(1\
    \ + i / 2);\n\t\t\telse\n\t\t\t\tresult.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpqihmyywu: /tmp/tmpqihmyywu.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v{1, 3, 2};\n  if (n <= 2) {\n    v.resize(n + 1);\n\
    \    return v;\n  }\n  for (int i = 3; i <= n; ++i) {\n    v.push_back(v[i - 1]\
    \ + v[i - 2] + v[i - 3]);\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpz_m_0fyr: /tmp/tmpz_m_0fyr.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    vector<long> v;\n    for(int i=0;i<=n;i++){\n        if(i==0){\n \
    \           v.push_back(1);\n        }\n        else if(i==1){\n            v.push_back(3);\n\
    \        }\n        else if(i==2){\n            v.push_back(2);\n        }\n \
    \       else if(i%2==0){\n            v.push_back(1+i/2);\n        }\n       \
    \ else{\n            v.push_back(v[i-1]+v[i-2]+v[i+1]);\n        }\n    }\n  \
    \  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoht3kht5.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpoht3kht5.cpp:19:5: error: \u2018vector\u2019 was not declared\
    \ in this scope; did you mean \u2018std::vector\u2019?\n   19 |     vector<long>\
    \ v;\n      |     ^~~~~~\n      |     std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpoht3kht5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpoht3kht5.cpp:19:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |     vector<long>\
    \ v;\n      |            ^~~~\n/tmp/tmpoht3kht5.cpp:22:13: error: \u2018v\u2019\
    \ was not declared in this scope\n   22 |             v.push_back(1);\n      |\
    \             ^\n/tmp/tmpoht3kht5.cpp:25:13: error: \u2018v\u2019 was not declared\
    \ in this scope\n   25 |             v.push_back(3);\n      |             ^\n\
    /tmp/tmpoht3kht5.cpp:28:13: error: \u2018v\u2019 was not declared in this scope\n\
    \   28 |             v.push_back(2);\n      |             ^\n/tmp/tmpoht3kht5.cpp:31:13:\
    \ error: \u2018v\u2019 was not declared in this scope\n   31 |             v.push_back(1+i/2);\n\
    \      |             ^\n/tmp/tmpoht3kht5.cpp:34:13: error: \u2018v\u2019 was not\
    \ declared in this scope\n   34 |             v.push_back(v[i-1]+v[i-2]+v[i+1]);\n\
    \      |             ^\n/tmp/tmpoht3kht5.cpp:37:12: error: \u2018v\u2019 was not\
    \ declared in this scope\n   37 |     return v;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> vec;\n    if(n==0)\n        return vec;\n    if(n==1)\n\
    \        return {1};\n    if(n==2)\n        return {1,3};\n    vec.push_back(1);\n\
    \    vec.push_back(3);\n    vec.push_back(2);\n    for(int i=3;i<=n;i++)\n   \
    \ {\n        if(i%2==0)\n            vec.push_back(1+i/2);\n        else\n   \
    \         vec.push_back(vec[i-1]+vec[i-2]+vec[i+1]);\n    }\n    return vec;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpg69qg3c3: /tmp/tmpg69qg3c3.cpp:40: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res(n+1);\n    if(n==0) return res;\n    res[0]=1;\n\
    \    if(n==1) return res;\n    res[1]=3;\n    if(n==2) return res;\n    res[2]=2;\n\
    \    if(n==3) return res;\n    for(long i=3;i<=n;i++){\n        if(i%2==0) res[i]=1+i/2;\n\
    \        else res[i]=res[i-1]+res[i-2]+res[i+1];\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp7dwgy07m: /tmp/tmp7dwgy07m.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> tribonacci;\n  tribonacci.push_back(1);\n  tribonacci.push_back(3);\n\
    \  tribonacci.push_back(2);\n  tribonacci.push_back(8);\n  for (long i = 4; i\
    \ <= n; i++) {\n    if (i % 2 == 0) {\n      tribonacci.push_back(1 + i / 2);\n\
    \    } else {\n      tribonacci.push_back(tribonacci[i - 1] + tribonacci[i - 2]\
    \ + tribonacci[i + 1]);\n    }\n  }\n  return tribonacci;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp7r0onbzt: /tmp/tmp7r0onbzt.cpp:37: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  int x, y, z, t;\n  if(n == 0)\n  {\n    v.push_back(1);\n\
    \    return v;\n  }\n  x = 1;\n  y = 3;\n  z = 2;\n  v.push_back(x);\n  v.push_back(y);\n\
    \  v.push_back(z);\n  for(int i = 3; i <= n; i++)\n  {\n    if(i % 2 == 0)\n \
    \   {\n      t = 1 + i / 2;\n    }\n    else\n    {\n      t = v[i - 1] + v[i\
    \ - 2] + v[i + 1];\n    }\n    v.push_back(t);\n  }\n  return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmphepkh6dj: /tmp/tmphepkh6dj.cpp:48: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> a = {0, 1, 3, 2};\n    if (n\
    \ < 4) return std::vector<long>(a.begin(), a.begin() + n + 1);\n    for (int i\
    \ = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n            a.push_back(1 +\
    \ i / 2);\n        } else {\n            a.push_back(a[i - 1] + a[i - 2] + a[i\
    \ + 1]);\n        }\n    }\n    return a;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpui5dbj_r: /tmp/tmpui5dbj_r.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans(n+1);\n    ans[0] = 1;\n    if(n==0)\n     \
    \   return ans;\n    ans[1] = 3;\n    if(n==1)\n        return ans;\n    ans[2]\
    \ = 2;\n    if(n==2)\n        return ans;\n    for(int i=3;i<=n;i++){\n      \
    \  if(i%2==0)\n            ans[i] = 1 + i/2;\n        else\n            ans[i]\
    \ = ans[i-1] + ans[i-2] + ans[i+1];\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpd2aoq94a: /tmp/tmpd2aoq94a.cpp:39: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    int i = 4;\n    while(i <= n + 1) {\n        long\
    \ tmp = 1 + i / 2;\n        if(i % 2 == 0) {\n            res.push_back(tmp);\n\
    \        } else {\n            res.push_back(res[i - 2] + res[i - 3] + res[i -\
    \ 1]);\n        }\n        i++;\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpc3wvnrm0: /tmp/tmpc3wvnrm0.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> tribonacci {3, 1, 2};\n\tfor (long i = 3; i <= n;\
    \ i++) {\n\t\tif (i % 2) {\n\t\t\ttribonacci.push_back(tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i - 3]);\n\t\t} else {\n\t\t\ttribonacci.push_back(1 + i /\
    \ 2);\n\t\t}\n\t}\n\treturn tribonacci;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpq50jjht2: /tmp/tmpq50jjht2.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    res.push_back(1);\n\
    \    if(n == 1) return res;\n    res.push_back(3);\n    if(n == 2) return res;\n\
    \    res.push_back(2);\n    if(n == 3) return res;\n    for(int i = 0; i < n -\
    \ 3; i++){\n        long x = res[res.size() - 1] + res[res.size() - 2] + res[res.size()\
    \ - 3];\n        res.push_back(x);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp45ih74yj: /tmp/tmp45ih74yj.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result{};\n    if (n >= 0) {\n        result.push_back(1);\n\
    \    }\n    if (n >= 1) {\n        result.push_back(3);\n    }\n    if (n >= 2)\
    \ {\n        result.push_back(2);\n    }\n    if (n >= 3) {\n        for (long\
    \ i = 3; i <= n; i++) {\n            long next;\n            if (i % 2 == 0) {\n\
    \                next = 1 + i / 2;\n            } else {\n                next\
    \ = result[i - 1] + result[i - 2] + result[i + 1];\n            }\n          \
    \  result.push_back(next);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpkz54u_ni: /tmp/tmpkz54u_ni.cpp:44: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> answer = {1, 3, 2};\n  long next = 8;\n  while (answer.size()\
    \ <= n) {\n    answer.push_back(next);\n    next = answer[answer.size() - 3] +\
    \ answer[answer.size() - 2] + answer[answer.size() - 1];\n  }\n  return answer;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp89vma3tj: /tmp/tmp89vma3tj.cpp:30: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res;\n  res.push_back(1);\n  res.push_back(3);\n \
    \ res.push_back(2);\n  res.push_back(8);\n  int i = 4;\n  while(i<=n){\n    if(i%2==0){\n\
    \      res.push_back(1 + i/2);\n    }else{\n      res.push_back(res[i-1] + res[i-2]\
    \ + res[i+1]);\n    }\n    i++;\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpwqiok1lq: /tmp/tmpwqiok1lq.cpp:39: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tribonacci;\n    tribonacci.push_back(1);\n    tribonacci.push_back(3);\n\
    \    tribonacci.push_back(2);\n    if (n == 0) {\n        tribonacci.pop_back();\n\
    \        tribonacci.pop_back();\n        tribonacci.pop_back();\n        return\
    \ tribonacci;\n    }\n    if (n == 1) {\n        tribonacci.pop_back();\n    \
    \    tribonacci.pop_back();\n        return tribonacci;\n    }\n    if (n == 2)\
    \ {\n        tribonacci.pop_back();\n        return tribonacci;\n    }\n    for\
    \ (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            tribonacci.push_back(1\
    \ + i / 2);\n        } else {\n            long temp = tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i - 3];\n            tribonacci.push_back(temp);\n       \
    \ }\n    }\n    return tribonacci;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpahctp707: /tmp/tmpahctp707.cpp:50: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans = {};\n    if (n==0) {\n        return ans;\n\
    \    }\n    ans.push_back(1);\n    if (n==1) {\n        return ans;\n    }\n \
    \   ans.push_back(3);\n    if (n==2) {\n        return ans;\n    }\n    ans.push_back(2);\n\
    \    if (n==3) {\n        return ans;\n    }\n    int i = 3;\n    while (i<n)\
    \ {\n        int tmp = 0;\n        if (i%2 == 0) {\n            tmp = ans[i] +\
    \ ans[i-1] + ans[i-2];\n        } else {\n            tmp = 1 + (i/2);\n     \
    \   }\n        ans.push_back(tmp);\n        i++;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpkrhv_6c4: /tmp/tmpkrhv_6c4.cpp:50: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // your code here\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp4i4klomi: /tmp/tmp4i4klomi.cpp:23: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    ans.push_back(1);\n    if(n == 0) return\
    \ ans;\n    ans.push_back(3);\n    if(n == 1) return ans;\n    ans.push_back(2);\n\
    \    if(n == 2) return ans;\n    long a = 1, b = 3, c = 2;\n    for(int i = 3;\
    \ i <= n; i++){\n        long d = (i%2 == 0)?(1+i/2):(a+b+c);\n        ans.push_back(d);\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp97y47sjd: /tmp/tmp97y47sjd.cpp:38: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tif (n == 0) {\n\t\tresult.push_back(1);\n\
    \t\treturn result;\n\t}\n\tif (n == 1) {\n\t\tresult.push_back(1);\n\t\tresult.push_back(3);\n\
    \t\treturn result;\n\t}\n\tif (n == 2) {\n\t\tresult.push_back(1);\n\t\tresult.push_back(3);\n\
    \t\tresult.push_back(2);\n\t\treturn result;\n\t}\n\tresult.push_back(1);\n\t\
    result.push_back(3);\n\tresult.push_back(2);\n\tfor (int i = 3; i <= n; i++) {\n\
    \t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\
    \t\t\tresult.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\t\t}\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp7nkcq8as: /tmp/tmp7nkcq8as.cpp:50: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tlong a = 1, b = 3, c = 2;\n\tfor (int i\
    \ = 0; i <= n; i++) {\n\t\tif (i == 0)\n\t\t\tresult.push_back(a);\n\t\telse if\
    \ (i == 1)\n\t\t\tresult.push_back(b);\n\t\telse if (i == 2)\n\t\t\tresult.push_back(c);\n\
    \t\telse if (i % 2 == 0)\n\t\t\tresult.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n\t\telse\n\t\t\tresult.push_back(1 + i / 2);\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpmvb9t973: /tmp/tmpmvb9t973.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v{1, 3, 2};\n    for (int i = 3; i <= n; i++) {\n\
    \        if (i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpg4v0o_hc: /tmp/tmpg4v0o_hc.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> ans;\n  long tri=3;\n  while(ans.size()<=n){\n   \
    \ if(ans.size()==0){\n      ans.push_back(1);\n    }else if(ans.size()==1){\n\
    \      ans.push_back(3);\n    }else if(ans.size()==2){\n      ans.push_back(2);\n\
    \    }else{\n      if(ans.size()%2==0){\n        ans.push_back(1+(ans.size()/2));\n\
    \      }else{\n        ans.push_back(ans[ans.size()-1]+ans[ans.size()-2]+ans[ans.size()-3]);\n\
    \      }\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp43rjjobf: /tmp/tmp43rjjobf.cpp:40: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  long even_sum=0;\n  if(n==1)\n  {\n    v.push_back(1);\n\
    \    return v;\n  }\n  else if(n==2)\n  {\n    v.push_back(3);\n    v.push_back(1);\n\
    \    return v;\n  }\n  else\n  {\n    v.push_back(1);\n    v.push_back(3);\n \
    \   v.push_back(2);\n    even_sum=2;\n    for(int i=3;i<=n;i++)\n    {\n     \
    \ v.push_back(1+even_sum);\n      even_sum+=v[i];\n    }\n    return v;\n  }\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpb49cjssl: /tmp/tmpb49cjssl.cpp:48: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  long b = 1, c = 3, d = 2;\n  std::vector<long> v = {b, c, d};\n  if\
    \ (n == 0) return v;\n  for (int i = 4; i <= n + 1; i++) {\n    if (i % 2 == 0)\
    \ v.push_back(1 + i / 2);\n    else {\n      long t = v[i - 1] + v[i - 2] + v[i\
    \ - 4];\n      v.push_back(t);\n    }\n  }\n  return v;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp0gqkxg39: /tmp/tmp0gqkxg39.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    for(int i = 0; i <= n; i++)\n    {\n \
    \       if(i == 0)\n        {\n            ans.push_back(1);\n        }\n    \
    \    else if(i == 1)\n        {\n            ans.push_back(3);\n        }\n  \
    \      else if(i == 2)\n        {\n            ans.push_back(2);\n        }\n\
    \        else if(i % 2 == 0)\n        {\n            ans.push_back(1 + i / 2);\n\
    \        }\n        else\n        {\n            ans.push_back(ans[i - 1] + ans[i\
    \ - 2] + ans[i + 1]);\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp3pckdohe: /tmp/tmp3pckdohe.cpp:47: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) return {};\n    std::vector<long> res = {1, 3, 2};\n  \
    \  for(int i = 3; i <= n; i++){\n        if(i % 2 == 0) res.push_back(1 + i /\
    \ 2);\n        else res.push_back(res[i - 1] + res[i - 2] + res[i + 1]);\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp119qb1z5: /tmp/tmp119qb1z5.cpp:29: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n==0) return v;\n    if(n==1) {\n   \
    \     v.push_back(1);\n        return v;\n    }\n    if(n==2) {\n        v.push_back(1);\n\
    \        v.push_back(3);\n        return v;\n    }\n    v.push_back(1);\n    v.push_back(3);\n\
    \    v.push_back(2);\n    long sum = 1+3+2;\n    for(int i=4;i<=n;i++) {\n   \
    \     if(i%2==0) v.push_back(1+i/2);\n        else {\n            v.push_back(sum);\n\
    \            sum+=v[i-1]+v[i-2]+v[i-3];\n        }\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpzfesyvhn: /tmp/tmpzfesyvhn.cpp:45: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  if (n == 1) {\n    result.push_back(1);\n    return result;\n  }\n  if (n ==\
    \ 2) {\n    result.push_back(1);\n    result.push_back(3);\n    return result;\n\
    \  }\n  result.push_back(1);\n  result.push_back(3);\n  result.push_back(2);\n\
    \  for (long i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      result.push_back(1\
    \ + i / 2);\n    } else {\n      result.push_back(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpdk7fioox: /tmp/tmpdk7fioox.cpp:46: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v{3,1,2};\n    if(n==0)\n    {\n        return {1};\n\
    \    }\n    else if(n==1)\n    {\n        return {1,3};\n    }\n    else if(n==2)\n\
    \    {\n        return {1,3,2};\n    }\n    int i=0;\n    while(v.size()<=n)\n\
    \    {\n        long x=v[i]+v[i+1]+v[i+2];\n        v.push_back(x);\n        i++;\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpz_46l9if: /tmp/tmpz_46l9if.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n==0)\n        return {};\n    if(n==1)\n        return {1};\n\
    \    if(n==2)\n        return {1, 3};\n    if(n==3)\n        return {1, 3, 2};\n\
    \    std::vector<long>res;\n    res.push_back(1);\n    res.push_back(3);\n   \
    \ res.push_back(2);\n    int i=3;\n    while(i<=n){\n        if(i%2==0)\n    \
    \        res.push_back(1+i/2);\n        else\n            res.push_back(res[i-1]+res[i-2]+res[i+1]);\n\
    \        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp3rlb9f0c: /tmp/tmp3rlb9f0c.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    if(n == 1)\
    \ {\n        res.push_back(1);\n        return res;\n    }\n    if(n == 2) {\n\
    \        res.push_back(1);\n        res.push_back(3);\n        return res;\n \
    \   }\n    if(n == 3) {\n        res.push_back(1);\n        res.push_back(3);\n\
    \        res.push_back(2);\n        return res;\n    }\n    res.push_back(1);\n\
    \    res.push_back(3);\n    res.push_back(2);\n    long a, b, c;\n    a = 1;\n\
    \    b = 3;\n    c = 2;\n    for(int i = 4; i <= n; i++) {\n        if(i % 2 ==\
    \ 0) {\n            res.push_back(1 + i / 2);\n        } else {\n            res.push_back(a\
    \ + b + c);\n            a = b;\n            b = c;\n            c = res[i - 1];\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpiovcf1l5: /tmp/tmpiovcf1l5.cpp:57: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    for(int i = 2; i < n; i++) {\n        if(i % 2 ==\
    \ 0) {\n            res.push_back(1 + i / 2);\n        } else {\n            res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpnv9a1agg: /tmp/tmpnv9a1agg.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tribonacci(n + 1);\n    tribonacci[0] = 1;\n   \
    \ tribonacci[1] = 3;\n    tribonacci[2] = 2;\n    for (size_t i = 3; i <= n; i++)\
    \ {\n        if (i % 2 == 0) {\n            tribonacci[i] = 1 + i / 2;\n     \
    \   } else {\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2]\
    \ + tribonacci[i + 1];\n        }\n    }\n    return tribonacci;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp2_lzb5pc: /tmp/tmp2_lzb5pc.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> fib_nums;\n  fib_nums.push_back(1);\n  if (n == 0)\
    \ return fib_nums;\n  fib_nums.push_back(3);\n  if (n == 1) return fib_nums;\n\
    \  fib_nums.push_back(2);\n  if (n == 2) return fib_nums;\n  fib_nums.push_back(8);\n\
    \  long num = 4;\n  while (num < n) {\n    long odd = 1 + num / 2;\n    fib_nums.push_back(odd);\n\
    \    long even = fib_nums[num - 1] + fib_nums[num - 2] + fib_nums[num + 1];\n\
    \    fib_nums.push_back(even);\n    num += 2;\n  }\n  return fib_nums;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpu53hism_: /tmp/tmpu53hism_.cpp:40: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tif (n == 0) {\n\t\treturn {};\n\t}\n\tif (n == 1) {\n\t\treturn { 1\
    \ };\n\t}\n\tif (n == 2) {\n\t\treturn { 1, 3 };\n\t}\n\tstd::vector<long> tribonacci\
    \ = { 1, 3, 2 };\n\tfor (int i = 3; i <= n; i++) {\n\t\tlong temp = tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i - 3];\n\t\ttribonacci.push_back(temp);\n\
    \t}\n\treturn tribonacci;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmphfr3ju41: /tmp/tmphfr3ju41.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> res(n + 1);\n\tres[0] = 1;\n\tif (n >= 1) {\n\t\t\
    res[1] = 3;\n\t\tif (n >= 2) {\n\t\t\tres[2] = 2;\n\t\t\tfor (long i = 3; i <=\
    \ n; i++) {\n\t\t\t\tres[i] = (i % 2 == 0) ? (1 + i / 2) : (res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp8pt7l5aw: /tmp/tmp8pt7l5aw.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\t// your code here\n\treturn{};\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmplgzxz7xf: /tmp/tmplgzxz7xf.cpp:24: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> arr;\n    arr.push_back(1);\n    arr.push_back(3);\n\
    \    arr.push_back(2);\n    int i = 3;\n    while(i <= n) {\n        if(i % 2\
    \ == 0) {\n            arr.push_back(1 + i / 2);\n        } else {\n         \
    \   arr.push_back(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n        i++;\n\
    \    }\n    return arr;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp359g9jnh: /tmp/tmp359g9jnh.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    vector<long> tri_vec;\n    int tri_1 = 3;\n    int tri_2 = 1;\n  \
    \  int tri_3 = 2;\n    tri_vec.push_back(tri_1);\n    tri_vec.push_back(tri_2);\n\
    \    tri_vec.push_back(tri_3);\n    for(int i = 3; i <= n; i++){\n        if(i\
    \ % 2 == 0){\n            tri_vec.push_back(tri_3);\n        }\n        else{\n\
    \            int temp = tri_1 + tri_2 + tri_3;\n            tri_vec.push_back(temp);\n\
    \            tri_1 = tri_2;\n            tri_2 = tri_3;\n            tri_3 = temp;\n\
    \        }\n    }\n    return tri_vec;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm0d8muta.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpm0d8muta.cpp:19:5: error: \u2018vector\u2019 was not declared\
    \ in this scope; did you mean \u2018std::vector\u2019?\n   19 |     vector<long>\
    \ tri_vec;\n      |     ^~~~~~\n      |     std::vector\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpm0d8muta.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpm0d8muta.cpp:19:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |     vector<long>\
    \ tri_vec;\n      |            ^~~~\n/tmp/tmpm0d8muta.cpp:23:5: error: \u2018\
    tri_vec\u2019 was not declared in this scope; did you mean \u2018tri_3\u2019?\n\
    \   23 |     tri_vec.push_back(tri_1);\n      |     ^~~~~~~\n      |     tri_3\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> res;\n\tres.push_back(1);\n\tres.push_back(3);\n\t\
    res.push_back(2);\n\tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\
    \t\tres.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tres.push_back(res[i -\
    \ 1] + res[i - 2] + res[i + 1]);\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmphz_vf3q9: /tmp/tmphz_vf3q9.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tlong t=3;\n\tv.push_back(1);\n\tv.push_back(3);\n\
    \tv.push_back(2);\n\tv.push_back(8);\n\tfor(int i=4;i<=n;i++){\n\t\tif(i%2==0){\n\
    \t\t\tt=1+i/2;\n\t\t}\n\t\telse{\n\t\t\tt=v[i-1]+v[i-2]+v[i+1];\n\t\t}\n\t\tv.push_back(t);\n\
    \t}\n\treturn v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpu2bwxm01: /tmp/tmpu2bwxm01.cpp:40: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\t// Iterative method\n\t// std::vector<long> res;\n\t// if (n <= 0) return\
    \ res;\n\t// long x = 1, y = 3, z = 2;\n\t// res.push_back(x);\n\t// res.push_back(y);\n\
    \t// res.push_back(z);\n\t// for (int i = 3; i <= n; i++) {\n\t// \tz = z + y\
    \ + x;\n\t// \tx = y;\n\t// \ty = z - y - x;\n\t// \tres.push_back(z);\n\t// }\n\
    \t// return res;\n\n\t// Recursive method\n\t// std::vector<long> res;\n\t// if\
    \ (n <= 0) return res;\n\t// long x = 1, y = 3, z = 2;\n\t// res.push_back(x);\n\
    \t// res.push_back(y);\n\t// res.push_back(z);\n\t// for (int i = 3; i <= n; i++)\
    \ {\n\t// \tz = tri(i - 1) + tri(i - 2) + tri(i + 1);\n\t// \tres.push_back(z);\n\
    \t// }\n\t// return res;\n\n\t// Recursive method with Memoization\n\tstd::vector<long>\
    \ res(n + 1, -1);\n\tres[0] = 1;\n\tres[1] = 3;\n\tres[2] = 2;\n\treturn tri(n,\
    \ res);\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2tmpommt.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp2tmpommt.cpp:52:19: error: too many arguments to function\
    \ \u2018std::vector<long int> tri(long int)\u2019\n   52 |  return tri(n, res);\n\
    \      |                   ^\n/tmp/tmp2tmpommt.cpp:18:19: note: declared here\n\
    \   18 | std::vector<long> tri(long n) {\n      |                   ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    for (int i = 0; i <= n; i++) {\n  \
    \      if (i == 0) {\n            result.push_back(1);\n        } else if (i ==\
    \ 1) {\n            result.push_back(3);\n        } else if (i == 2) {\n     \
    \       result.push_back(2);\n        } else if (i % 2 == 0) {\n            result.push_back(1\
    \ + i / 2);\n        } else {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpkc51mcwl: /tmp/tmpkc51mcwl.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> vec;\n\tfor (long i = 0; i <= n; i++) {\n\t\tif (i\
    \ % 2 == 0) {\n\t\t\tvec.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tif (i\
    \ == 1)\n\t\t\t\tvec.push_back(3);\n\t\t\telse if (i == 3)\n\t\t\t\tvec.push_back(8);\n\
    \t\t\telse {\n\t\t\t\tvec.push_back(vec[i - 2] + vec[i - 1] + vec[i + 1]);\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn vec;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpu8yav3mi: /tmp/tmpu8yav3mi.cpp:40: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n >= 1) res.push_back(1);\n    if(n\
    \ >= 2) res.push_back(3);\n    if(n >= 3) res.push_back(2);\n    for(int i = 3;\
    \ i < n; i++){\n        if(i % 2 == 0) res.push_back(res[i] = 1 + i / 2);\n  \
    \      else res.push_back(res[i] = res[i - 1] + res[i - 2] + res[i + 1]);\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpqwdyeqcu: /tmp/tmpqwdyeqcu.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0) return v;\n    v.push_back(1);\n\
    \    if(n == 1) return v;\n    v.push_back(3);\n    if(n == 2) return v;\n   \
    \ for(int i = 2; i < n; i++){\n        if(i % 2 == 0) v.push_back(1 + i / 2);\n\
    \        else v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp3gw85y7m: /tmp/tmp3gw85y7m.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    for (int i = 0; i <= n; i++) {\n  \
    \      if (i == 0) result.push_back(1);\n        else if (i == 1) result.push_back(3);\n\
    \        else if (i == 2) result.push_back(2);\n        else {\n            if\
    \ (i % 2 == 0) result.push_back(1 + i / 2);\n            else result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpoj6w91pf: /tmp/tmpoj6w91pf.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // Your code here!\n  std::vector<long> res;\n  long n1 = 1, n2 = 3,\
    \ n3 = 2;\n  if(n < 3) {\n    res.push_back(n1);\n    res.push_back(n2);\n   \
    \ if(n == 2) res.push_back(n3);\n    return res;\n  }\n  res.push_back(n1);\n\
    \  res.push_back(n2);\n  res.push_back(n3);\n  while(res.size() <= n) {\n    n1\
    \ = res[res.size() - 3];\n    n2 = res[res.size() - 2];\n    n3 = res[res.size()\
    \ - 1];\n    if(res.size() % 2 == 0) res.push_back(1 + res.size() / 2);\n    else\
    \ res.push_back(n1 + n2 + n3);\n  }\n  return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp619xgyq3: /tmp/tmp619xgyq3.cpp:42: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) {\n        return {};\n    }\n    std::vector<long> res(n\
    \ + 1);\n    if(n == 1) {\n        res[0] = 1;\n        res[1] = 3;\n        return\
    \ res;\n    }\n    if(n == 2) {\n        res[0] = 1;\n        res[1] = 3;\n  \
    \      res[2] = 2;\n        return res;\n    }\n    res[0] = 1;\n    res[1] =\
    \ 3;\n    res[2] = 2;\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 ==\
    \ 0) {\n            res[i] = 1 + i / 2;\n        } else {\n            res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1];\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp05hmqmqd: /tmp/tmp05hmqmqd.cpp:48: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tvector<long> res(n+1);\n\tres[0] = 1;\n\tres[1] = 3;\n\tres[2] = 2;\n\
    \tfor(int i = 3; i <= n; i++){\n\t\tif(i%2 == 0){\n\t\t\tres[i] = 1 + i/2;\n\t\
    \t}\n\t\telse{\n\t\t\tres[i] = res[i-1] + res[i-2] + res[i+1];\n\t\t}\n\t}\n\t\
    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgyogtz5_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpgyogtz5_.cpp:19:2: error: \u2018vector\u2019 was not declared\
    \ in this scope; did you mean \u2018std::vector\u2019?\n   19 |  vector<long>\
    \ res(n+1);\n      |  ^~~~~~\n      |  std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpgyogtz5_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpgyogtz5_.cpp:19:9:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |  vector<long>\
    \ res(n+1);\n      |         ^~~~\n/tmp/tmpgyogtz5_.cpp:20:2: error: \u2018res\u2019\
    \ was not declared in this scope\n   20 |  res[0] = 1;\n      |  ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // your code here\n    std::vector<long> arr;\n    arr.push_back(1);\n\
    \    arr.push_back(3);\n    arr.push_back(2);\n    arr.push_back(8);\n    if(n==3)\n\
    \        return arr;\n    else{\n        long temp=arr[3];\n        for(int i=0;i<=n-4;i++){\n\
    \            arr.push_back(temp+arr[arr.size()-1]+arr[arr.size()-2]);\n      \
    \      temp=arr[arr.size()-1];\n        }\n    }\n    return arr;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp_wmxm7si: /tmp/tmp_wmxm7si.cpp:39: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tfor (long i = 0; i <= n; i++) {\n\t\tif\
    \ (i == 0)\n\t\t\tresult.push_back(1);\n\t\telse if (i == 1)\n\t\t\tresult.push_back(3);\n\
    \t\telse if (i == 2)\n\t\t\tresult.push_back(2);\n\t\telse if (i % 2 == 0)\n\t\
    \t\tresult.push_back(1 + i / 2);\n\t\telse\n\t\t\tresult.push_back(result[i -\
    \ 1] + result[i - 2] + result[i + 1]);\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpet4aqz53: /tmp/tmpet4aqz53.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0)\n        return res;\n    res.push_back(1);\n\
    \    if(n == 1)\n        return res;\n    res.push_back(3);\n    if(n == 2)\n\
    \        return res;\n    res.push_back(2);\n    if(n == 3)\n        return res;\n\
    \    while(res.size() != n + 1)\n    {\n        int k = res.size();\n        if(k\
    \ % 2 == 0)\n            res.push_back(1 + k / 2);\n        else\n           \
    \ res.push_back(res[k - 1] + res[k - 2] + res[k - 3]);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp08qh9igt: /tmp/tmp08qh9igt.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> results;\n  if (n == 0) {\n    return results;\n \
    \ }\n  results.push_back(1);\n  if (n == 1) {\n    return results;\n  }\n  results.push_back(3);\n\
    \  if (n == 2) {\n    return results;\n  }\n  results.push_back(2);\n  for (int\
    \ i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      results.push_back(1 + i\
    \ / 2);\n    } else {\n      results.push_back(results[i - 1] + results[i - 2]\
    \ + results[i + 1]);\n    }\n  }\n  return results;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpd4bplu_o: /tmp/tmpd4bplu_o.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0)\n    {\n        res.push_back(1);\n\
    \        return res;\n    }\n    res.push_back(1);\n    res.push_back(3);\n  \
    \  if(n == 1)\n        return res;\n    res.push_back(2);\n    if(n == 2)\n  \
    \      return res;\n    for(int i = 3; i <= n; i++)\n    {\n        if(i % 2 ==\
    \ 0)\n            res.push_back(1 + i / 2);\n        else\n            res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpwbh94d13: /tmp/tmpwbh94d13.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  v.push_back(8);\n  for(long i = 4; i <= n; i++) {\n    v.push_back(v[i - 1]\
    \ + v[i - 2] + v[i - 3]);\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpxhvi2ns8: /tmp/tmpxhvi2ns8.cpp:32: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    for(long i = 0; i <= n; i++) {\n       \
    \ if(i == 0) {\n            v.push_back(1);\n        } else if(i == 1) {\n   \
    \         v.push_back(3);\n        } else if(i == 2) {\n            v.push_back(2);\n\
    \        } else if(i == 3) {\n            v.push_back(8);\n        } else {\n\
    \            long sum = 1 + (i / 2);\n            if(i % 2 == 0) {\n         \
    \       v.push_back(sum);\n            } else {\n                v.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n            }\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpid1f1ont: /tmp/tmpid1f1ont.cpp:44: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  vector<long> ans(n + 1);\n  ans[0] = 1;\n  ans[1] = 3;\n  ans[2] = 2;\n\
    \  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0)\n      ans[i] = ans[i /\
    \ 2] + 1;\n    else\n      ans[i] = ans[i - 1] + ans[i - 2] + ans[i + 1];\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptxnhamln.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmptxnhamln.cpp:19:3: error: \u2018vector\u2019 was not declared\
    \ in this scope; did you mean \u2018std::vector\u2019?\n   19 |   vector<long>\
    \ ans(n + 1);\n      |   ^~~~~~\n      |   std::vector\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmptxnhamln.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmptxnhamln.cpp:19:10:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |   vector<long>\
    \ ans(n + 1);\n      |          ^~~~\n/tmp/tmptxnhamln.cpp:20:3: error: \u2018\
    ans\u2019 was not declared in this scope; did you mean \u2018abs\u2019?\n   20\
    \ |   ans[0] = 1;\n      |   ^~~\n      |   abs\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 4; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result.push_back(1 + i / 2);\n        } else {\n            result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpk6l2fav4: /tmp/tmpk6l2fav4.cpp:46: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result = { 1, 3, 2 };\n\tresult.reserve(n + 1);\n\t\
    for (long i = 3; i <= n; i++) {\n\t\tresult.push_back(result[i - 1] + result[i\
    \ - 2] + result[i - 3]);\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp7bvl1jdn: /tmp/tmp7bvl1jdn.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  // your code here\n  long s = 1, a = 3,\
    \ b = 2, c = 8;\n  if(n == 0) {\n    result.push_back(s);\n    return result;\n\
    \  }\n  if(n == 1) {\n    result.push_back(s);\n    result.push_back(a);\n   \
    \ return result;\n  }\n  if(n == 2) {\n    result.push_back(s);\n    result.push_back(a);\n\
    \    result.push_back(b);\n    return result;\n  }\n  else if(n == 3) {\n    result.push_back(s);\n\
    \    result.push_back(a);\n    result.push_back(b);\n    result.push_back(c);\n\
    \    return result;\n  }\n  else {\n    result.push_back(s);\n    result.push_back(a);\n\
    \    result.push_back(b);\n    result.push_back(c);\n    int i = 4;\n    while(i\
    \ <= n) {\n      if(i % 2 == 0) {\n        int temp = i / 2;\n        temp = temp\
    \ + 1;\n        result.push_back(temp);\n      }\n      else {\n        int temp\
    \ = (result[i - 1] + result[i - 2] + result[i + 1]);\n        result.push_back(temp);\n\
    \      }\n      i++;\n    }\n    return result;\n  }\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp2_ayjvpv: /tmp/tmp2_ayjvpv.cpp:69: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> tribonacci;\n  if (n >= 0) {\n    tribonacci.push_back(1);\n\
    \  }\n  if (n >= 1) {\n    tribonacci.push_back(3);\n  }\n  if (n >= 2) {\n  \
    \  tribonacci.push_back(2);\n  }\n  if (n >= 3) {\n    for (int i = 3; i <= n;\
    \ i++) {\n      if (i % 2 == 0) {\n        tribonacci.push_back(1 + i / 2);\n\
    \      } else {\n        tribonacci.push_back(tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i + 1]);\n      }\n    }\n  }\n  return tribonacci;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmptryxq5q0: /tmp/tmptryxq5q0.cpp:42: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0)\n        return {};\n    std::vector<long> result;\n  \
    \  result.push_back(1);\n    if(n == 1)\n        return result;\n    result.push_back(3);\n\
    \    if(n == 2)\n        return result;\n    result.push_back(2);\n    if(n ==\
    \ 3)\n        return result;\n    for(int i = 3; i < n; i++)\n    {\n        if(i\
    \ % 2 == 0)\n            result.push_back(1 + i / 2);\n        else\n        \
    \    result.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp29hiv5xy: /tmp/tmp29hiv5xy.cpp:42: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    for(int i = 0; i <= n; i++) {\n        v.push_back(i\
    \ == 0 ? 1 : i <= 2 ? 3 : v[i - 1] + v[i - 2] + v[i - 3]);\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpgaz1u9fz: /tmp/tmpgaz1u9fz.cpp:27: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v(n + 1);\n\tv[0] = 1;\n\tv[1] = 3;\n\tv[2] = 2;\n\
    \tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0)\n\t\t\tv[i] = 1 + i / 2;\n\
    \t\telse\n\t\t\tv[i] = v[i - 1] + v[i - 2] + v[i + 1];\n\t}\n\treturn v;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmplge6hwz4: /tmp/tmplge6hwz4.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> results;\n    results.push_back(1);\n    results.push_back(3);\n\
    \    results.push_back(2);\n    for (int i = 3; i <= n; i++) {\n        if (i\
    \ % 2 == 0) {\n            results.push_back(1 + i / 2);\n        } else {\n \
    \           results.push_back(results[i - 2] + results[i - 1] + results[i + 1]);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpmfhb5nty: /tmp/tmpmfhb5nty.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    if (n == 0) {\n        return result;\n    }\n    result.push_back(2);\n\
    \    if (n == 1) {\n        return result;\n    }\n    for (long i = 3; i <= n;\
    \ i++) {\n        long newElem = 0;\n        if (i % 2 == 0) {\n            newElem\
    \ = 1 + i / 2;\n        } else {\n            newElem = result[i - 1] + result[i\
    \ - 2] + result[i + 1];\n        }\n        result.push_back(newElem);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpba6qd0rw: /tmp/tmpba6qd0rw.cpp:42: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res(n + 1);\n  if (n == 0) return res;\n  res[0] =\
    \ 1;\n  if (n == 1) return res;\n  res[1] = 3;\n  if (n == 2) return res;\n  res[2]\
    \ = 2;\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      res[i]\
    \ = 1 + i / 2;\n    } else {\n      res[i] = res[i - 1] + res[i - 2] + res[i +\
    \ 1];\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpqpsms76n: /tmp/tmpqpsms76n.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.emplace_back(1);\n  if (n == 1) {\n    return result;\n  }\n  result.emplace_back(3);\n\
    \  if (n == 2) {\n    return result;\n  }\n  result.emplace_back(2);\n  if (n\
    \ == 3) {\n    return result;\n  }\n  while (result.size() <= n) {\n    long even_result\
    \ = 1 + (result.size() / 2);\n    long odd_result = result[result.size() - 1]\
    \ + result[result.size() - 2] +\n                      result[result.size() +\
    \ 1];\n    result.emplace_back(result.size() % 2 == 0 ? even_result : odd_result);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp8uo_emvs: /tmp/tmp8uo_emvs.cpp:45: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> a;\n\ta.push_back(1);\n\ta.push_back(3);\n\ta.push_back(2);\n\
    \tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\ta.push_back(1 +\
    \ i / 2);\n\t\t}\n\t\telse {\n\t\t\ta.push_back(a[i - 1] + a[i - 2] + a[i + 1]);\n\
    \t\t}\n\t}\n\treturn a;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpi3ar6v1h: /tmp/tmpi3ar6v1h.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tv.push_back(1);\n\tv.push_back(3);\n\tv.push_back(2);\n\
    \tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0)\n\t\t\tv.push_back(v[i /\
    \ 2]);\n\t\telse\n\t\t\tv.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\t}\n\t\
    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp7r56vt_c: /tmp/tmp7r56vt_c.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    for (int i = 0; i <= n; i++) {\n     \
    \   if (i == 0) {\n            res.push_back(1);\n        } else if (i == 1) {\n\
    \            res.push_back(3);\n        } else if (i == 2) {\n            res.push_back(2);\n\
    \        } else if (i == 3) {\n            res.push_back(8);\n        } else {\n\
    \            if (i % 2 == 0) {\n                res.push_back(1 + i / 2);\n  \
    \          } else {\n                res.push_back(res[i - 1] + res[i - 2] + res[i\
    \ + 1]);\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpmd15pc1m: /tmp/tmpmd15pc1m.cpp:43: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    if (n == 0) {\n        return res;\n    }\n    res.push_back(2);\n    for\
    \ (int i = 3; i <= n; i++) {\n        res.push_back(res[i - 1] + res[i - 2] +\
    \ res[i - 3]);\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpye2w_1oi: /tmp/tmpye2w_1oi.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    ans.push_back(1);\n    ans.push_back(3);\n\
    \    if(n == 1)\n    {\n        return ans;\n    }\n    ans.push_back(2);\n  \
    \  if(n == 2)\n    {\n        return ans;\n    }\n    ans.push_back(8);\n    if(n\
    \ == 3)\n    {\n        return ans;\n    }\n    for(int i = 4; i <= n; i++)\n\
    \    {\n        long tmp = 0;\n        if(i % 2 == 0)\n        {\n           \
    \ tmp = 1 + i / 2;\n        }\n        else\n        {\n            tmp = ans[i\
    \ - 2] + ans[i - 1] + ans[i - 3];\n        }\n        ans.push_back(tmp);\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpuyyhmuzr: /tmp/tmpuyyhmuzr.cpp:55: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> ans;\n\tif (n == 0) {\n\t\tans.push_back(1);\n\t\t\
    return ans;\n\t}\n\tans.push_back(1);\n\tans.push_back(3);\n\tans.push_back(2);\n\
    \tlong n1 = 2, n2 = 3, n3 = 1;\n\tfor (int i = 3; i <= n; i++) {\n\t\tif (i %\
    \ 2 == 0) {\n\t\t\tans.push_back(n1);\n\t\t}\n\t\telse {\n\t\t\tans.push_back(n1\
    \ + n2 + n3);\n\t\t\tn3 = n2;\n\t\t\tn2 = n1;\n\t\t\tn1 = ans[i];\n\t\t}\n\t}\n\
    \treturn ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpuy85nlrg: /tmp/tmpuy85nlrg.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res(n + 1);\n  for (long i = 1; i <= n; i++) {\n \
    \   if (i == 1) res[i] = 3;\n    else {\n      if (i % 2 == 0) res[i] = 1 + i\
    \ / 2;\n      else res[i] = res[i - 1] + res[i - 2] + res[i + 1];\n    }\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpbmi7tue8: /tmp/tmpbmi7tue8.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) return {1};\n    if(n == 1) return {1, 3};\n    if(n ==\
    \ 2) return {1, 3, 2};\n    std::vector<long> res = {1, 3, 2};\n    while(res.size()\
    \ <= n)\n    {\n        auto back1 = res.rbegin();\n        auto back2 = res.rbegin()\
    \ + 1;\n        auto back3 = res.rbegin() + 2;\n        long even = 1 + *back3\
    \ / 2;\n        long odd = *back1 + *back2 + *back3;\n        res.push_back(res.size()\
    \ % 2 == 0 ? even : odd);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpbao6emey: /tmp/tmpbao6emey.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) {\n        return {1};\n    }\n    if(n == 1) {\n     \
    \   return {1, 3};\n    }\n    if(n == 2) {\n        return {1, 3, 2};\n    }\n\
    \    std::vector<long> res = {1, 3, 2};\n    for(long i = 3; i <= n; i++) {\n\
    \        if(i % 2 == 0) {\n            res.push_back(res[i - 1] + 1 + i / 2);\n\
    \        } else {\n            res.push_back(res[i - 1] + res[i - 2] + res[i -\
    \ 3]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpc9ej984b: /tmp/tmpc9ej984b.cpp:40: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v = {1, 3, 2};\n    if (n < 3) {\n        std::vector<long>\
    \ temp;\n        for (int i = 0; i <= n; i++) {\n            temp.push_back(v[i]);\n\
    \        }\n        return temp;\n    }\n    while (v.size() <= n) {\n       \
    \ long oddNum = v[v.size() - 3] + v[v.size() - 2] + v[v.size() - 1];\n       \
    \ v.push_back(oddNum);\n        long evenNum = v[v.size() - 2] + 1;\n        v.push_back(evenNum);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpgz3bya_r: /tmp/tmpgz3bya_r.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n==0) return {};\n    std::vector<long> res(n+1);\n    res[0]=1;\n\
    \    res[1]=3;\n    res[2]=2;\n    for(int i=3;i<n+1;i++){\n        res[i]=res[i-1]+res[i-2]+res[i-3];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp8m8oibi3: /tmp/tmp8m8oibi3.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Your code here\n    std::vector<long> v;\n    if(n==0)return v;\n\
    \    v.push_back(1);\n    if(n==1)return v;\n    v.push_back(3);\n    if(n==2)return\
    \ v;\n    v.push_back(2);\n    if(n==3)return v;\n    for(int i=4;i<=n;i++){\n\
    \      long temp = v[i-2] + v[i-3] + v[i-4];\n      v.push_back(temp);\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp0_i4ki7_: /tmp/tmp0_i4ki7_.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> sol;\n  sol.push_back(1);\n  sol.push_back(3);\n \
    \ if (n == 1) {\n    return sol;\n  }\n  sol.push_back(2);\n  if (n == 2) {\n\
    \    return sol;\n  }\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n\
    \      sol.push_back(1 + i / 2);\n    } else {\n      sol.push_back(sol[i - 1]\
    \ + sol[i - 2] + sol[i + 1]);\n    }\n  }\n  return sol;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp5c27yvv1: /tmp/tmp5c27yvv1.cpp:40: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> arr;\n    arr.push_back(1);\n    if(n >= 1) {\n\
    \        arr.push_back(3);\n    }\n    if(n >= 2) {\n        arr.push_back(2);\n\
    \    }\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n        \
    \    arr.push_back(1 + i / 2);\n        } else {\n            arr.push_back(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp9dqdbe0q: /tmp/tmp9dqdbe0q.cpp:38: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // 1 is the first number in the sequence.\n    std::vector<long> tribonacciSequence{1};\n\
    \    // This is the base case, we can return the sequence.\n    if (n == 0) {\n\
    \        return tribonacciSequence;\n    }\n    tribonacciSequence.push_back(3);\n\
    \    if (n == 1) {\n        return tribonacciSequence;\n    }\n    tribonacciSequence.push_back(2);\n\
    \    if (n == 2) {\n        return tribonacciSequence;\n    }\n    // We can now\
    \ go the recurrence.\n    // It is possible to optimize this solution with a for\
    \ loop.\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n     \
    \       tribonacciSequence.push_back(tribonacciSequence[i - 2] + 1 + i / 2);\n\
    \        } else {\n            tribonacciSequence.push_back(tribonacciSequence[i\
    \ - 2] + tribonacciSequence[i - 1] + tribonacciSequence[i + 1]);\n        }\n\
    \    }\n    return tribonacciSequence;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpiojkwgde: /tmp/tmpiojkwgde.cpp:46: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> vec;\n  vec.push_back(1);\n  if (n == 0) {\n    return\
    \ vec;\n  }\n  vec.push_back(3);\n  if (n == 1) {\n    return vec;\n  }\n  vec.push_back(2);\n\
    \  for (long i = 2; i < n; i++) {\n    if (i % 2 == 0) {\n      vec.push_back(1\
    \ + i / 2);\n    } else {\n      vec.push_back(vec[i - 1] + vec[i - 2] + vec[i\
    \ + 1]);\n    }\n  }\n  return vec;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpdztr90nv: /tmp/tmpdztr90nv.cpp:40: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> a(n + 1);\n    a[0] = 1;\n    if (n == 0) return\
    \ a;\n    a[1] = 3;\n    if (n == 1) return a;\n    a[2] = 2;\n    if (n == 2)\
    \ return a;\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n \
    \           a[i] = 1 + i / 2;\n        } else {\n            a[i] = a[i - 1] +\
    \ a[i - 2] + a[i + 1];\n        }\n    }\n    return a;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp9v2motbh: /tmp/tmp9v2motbh.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v(n+1);\n\tv[0] = 1;\n\tv[1] = 3;\n\tv[2] = 2;\n\t\
    for(int i = 3; i < n+1; i++) {\n\t\tv[i] = (i & 1) ? v[i-1] + v[i-2] + v[i+1]\
    \ : 1 + (i/2);\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpe2_zng93: /tmp/tmpe2_zng93.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    if (n == 1) {\n        return result;\n\
    \    }\n    result.push_back(3);\n    if (n == 2) {\n        return result;\n\
    \    }\n    result.push_back(2);\n    if (n == 3) {\n        return result;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        long num = result[i] +\
    \ result[i + 1] + result[i + 2];\n        result.push_back(num);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpu2w22r81: /tmp/tmpu2w22r81.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0) {\n        v.push_back(1);\n\
    \        return v;\n    }\n    if(n == 1) {\n        v.push_back(1);\n       \
    \ v.push_back(3);\n        return v;\n    }\n    if(n == 2) {\n        v.push_back(1);\n\
    \        v.push_back(3);\n        v.push_back(2);\n        return v;\n    }\n\
    \    std::vector<long> v1 = tri(n - 1);\n    std::vector<long> v2 = tri(n - 2);\n\
    \    std::vector<long> v3 = tri(n - 3);\n    v = v1;\n    v.push_back(v1[n] +\
    \ v2[n] + v3[n]);\n    return v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpso92o33v: /tmp/tmpso92o33v.cpp:44: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result(n + 1);\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    result[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        result[i]\
    \ = result[i - 1] + result[i - 2] + result[i - 3];\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpurlp7tk0: /tmp/tmpurlp7tk0.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tribonacci;\n    long curr = 0;\n    long next =\
    \ 1;\n    long temp = 0;\n    for(int i = 0; i < n + 1; i++){\n        temp =\
    \ curr;\n        curr = next;\n        next = i % 2 == 0 ? 1 + (i / 2) : (curr\
    \ + next + tribonacci[i - 2]);\n        tribonacci.push_back(next);\n    }\n \
    \   return tribonacci;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpzza7an2f: /tmp/tmpzza7an2f.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0)\n        return v;\n    v.push_back(1);\n\
    \    if(n == 1)\n        return v;\n    v.push_back(3);\n    if(n == 2)\n    \
    \    return v;\n    v.push_back(2);\n    long term;\n    for(int i = 3; i <= n;\
    \ i++){\n        if(i % 2 == 0)\n            term = 1 + i / 2;\n        else{\n\
    \            term = v[i - 1] + v[i - 2] + v[i - 3];\n        }\n        v.push_back(term);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpgbehq6ps: /tmp/tmpgbehq6ps.cpp:42: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) return {};\n    vector<long> result = {1, 3, 2};\n    while(result.size()\
    \ != n+1){\n        if(result.size()%2 == 0){\n            result.push_back(1+\
    \ (long)result.size()/2);\n        }\n        else{\n            result.push_back(result[result.size()-1]\
    \ + result[result.size()-2] + result[result.size()-3]);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9o0ftauv.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp9o0ftauv.cpp:20:5: error: \u2018vector\u2019 was not declared\
    \ in this scope; did you mean \u2018std::vector\u2019?\n   20 |     vector<long>\
    \ result = {1, 3, 2};\n      |     ^~~~~~\n      |     std::vector\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp9o0ftauv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmp9o0ftauv.cpp:20:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   20 |     vector<long>\
    \ result = {1, 3, 2};\n      |            ^~~~\n/tmp/tmp9o0ftauv.cpp:21:11: error:\
    \ \u2018result\u2019 was not declared in this scope\n   21 |     while(result.size()\
    \ != n+1){\n      |           ^~~~~~\n/tmp/tmp9o0ftauv.cpp:29:12: error: \u2018\
    result\u2019 was not declared in this scope\n   29 |     return result;\n    \
    \  |            ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> Triboacci(n + 1);\n    Triboacci[0] = 1;\n    Triboacci[1]\
    \ = 3;\n    Triboacci[2] = 2;\n    for (long i = 3; i <= n; i++) {\n        if\
    \ (i % 2 == 0) {\n            Triboacci[i] = 1 + i / 2;\n        } else {\n  \
    \          Triboacci[i] = Triboacci[i - 1] + Triboacci[i - 2] + Triboacci[i +\
    \ 1];\n        }\n    }\n    return Triboacci;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpzs308u53: /tmp/tmpzs308u53.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> ans(n + 1);\n  ans[0] = 1;\n  if (n == 0) return ans;\n\
    \  ans[1] = 3;\n  if (n == 1) return ans;\n  ans[2] = 2;\n  if (n == 2) return\
    \ ans;\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      ans[i]\
    \ = 1 + i / 2;\n    } else {\n      ans[i] = ans[i - 1] + ans[i - 2] + ans[i +\
    \ 1];\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpa7qyi2l8: /tmp/tmpa7qyi2l8.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tresult.push_back(1);\n\tfor (int i = 1;\
    \ i <= n; i++) {\n\t\tif (i == 1) {\n\t\t\tresult.push_back(3);\n\t\t}\n\t\telse\
    \ if (i % 2 == 0) {\n\t\t\tresult.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\
    \t\tresult.push_back(result[i - 1] + result[i - 2] + result[i + 1]);\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp2hm6ebf1: /tmp/tmp2hm6ebf1.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> ans(n + 1);\n\tans[0] = 1;\n\tans[1] = 3;\n\tans[2]\
    \ = 2;\n\tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tans[i]\
    \ = ans[i / 2] + i / 2;\n\t\t}\n\t\telse {\n\t\t\tans[i] = ans[i - 1] + ans[i\
    \ - 2] + ans[i + 1];\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpaw4h9z3d: /tmp/tmpaw4h9z3d.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long dp[1000000];\n    dp[0] = 1;\n\
    \    dp[1] = 3;\n    dp[2] = 2;\n    for(int i = 3; i <= n; i++) {\n        if(i\
    \ % 2 == 0)\n            dp[i] = 1 + i / 2;\n        else\n            dp[i] =\
    \ dp[i - 1] + dp[i - 2] + dp[i + 1];\n    }\n    for(int i = 0; i <= n; i++)\n\
    \        result.push_back(dp[i]);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpy16mcrvj: /tmp/tmpy16mcrvj.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res(n+1);\n    res[0] = 1;\n    res[1] = 3;\n  \
    \  res[2] = 2;\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0) {\n\
    \            res[i] = 1 + i / 2;\n        } else {\n            res[i] = res[i-1]\
    \ + res[i-2] + res[i+1];\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpp31abtep: /tmp/tmpp31abtep.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tfor (long i = 0; i <= n; i++) {\n\t\tlong temp\
    \ = 0;\n\t\tif (i == 0) temp = 1;\n\t\telse if (i == 1) temp = 3;\n\t\telse if\
    \ (i == 2) temp = 2;\n\t\telse if (i % 2 == 0) temp = 1 + i / 2;\n\t\telse {\n\
    \t\t\tlong c = i - 1;\n\t\t\tlong b = i - 2;\n\t\t\tlong a = i + 1;\n\t\t\ttemp\
    \ = tri(c)[c] + tri(b)[b] + tri(a)[a];\n\t\t}\n\t\tv.push_back(temp);\n\t}\n\t\
    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) {\n        res.push_back(1);\n\
    \        return res;\n    }\n    res.push_back(1);\n    res.push_back(3);\n  \
    \  res.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 == 0)\
    \ {\n            res.push_back(1 + i / 2);\n        } else {\n            res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpkwj95i05: /tmp/tmpkwj95i05.cpp:38: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    for (long i = 1; i <= n; i++) {\n      \
    \  result.push_back(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpjdwzhcs2: /tmp/tmpjdwzhcs2.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> ans;\n    ans.push_back(1);\n\
    \    if (n == 0) {\n        return ans;\n    }\n    ans.push_back(3);\n    if\
    \ (n == 1) {\n        return ans;\n    }\n    ans.push_back(2);\n    if (n ==\
    \ 2) {\n        return ans;\n    }\n    ans.push_back(8);\n    if (n == 3) {\n\
    \        return ans;\n    }\n    for (int i = 4; i <= n; i++) {\n        long\
    \ odd = 0;\n        if (i % 2 == 1) {\n            odd = ans[ans.size() - 1] +\
    \ ans[ans.size() - 2] + ans[ans.size() - 3];\n        }\n        else {\n    \
    \        odd = 1 + i / 2;\n        }\n        ans.push_back(odd);\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpw2xtfjup: /tmp/tmpw2xtfjup.cpp:53: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0)\n        return res;\n    long\
    \ a = 1, b = 3, c = 2;\n    res.push_back(a);\n    if(n == 1)\n        return\
    \ res;\n    res.push_back(b);\n    if(n == 2)\n        return res;\n    res.push_back(c);\n\
    \    for(int i = 3; i <= n; i++){\n        long c1 = i % 2 == 0 ? (1 + i / 2)\
    \ : (res[i - 1] + res[i - 2] + res[i + 1]);\n        a = b;\n        b = c;\n\
    \        c = c1;\n        res.push_back(c1);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpoqul68vj: /tmp/tmpoqul68vj.cpp:41: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v1 = {1,3,2};\n  if(n <= 3)\n  {\n    return v1;\n\
    \  }\n  std::vector<long> v;\n  for(long i = 1; i <= n; i++)\n  {\n    if(i ==\
    \ 1)\n    {\n      v.push_back(1);\n    }\n    else if(i == 2)\n    {\n      v.push_back(3);\n\
    \    }\n    else if(i == 3)\n    {\n      v.push_back(2);\n    }\n    else\n \
    \   {\n      v.push_back(v[i - 1] + v[i - 2] + v[i - 3]);\n    }\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpce7klbzs: /tmp/tmpce7klbzs.cpp:48: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> a(n + 1);\n    if (n > 0) a[1] = 3;\n    if (n >\
    \ 1) a[2] = 2;\n    if (n > 2) a[3] = 8;\n    for (int i = 4; i <= n; i++) {\n\
    \        if (i % 2 == 0) {\n            a[i] = 1 + i / 2;\n        } else {\n\
    \            a[i] = a[i - 1] + a[i - 2] + a[i + 1];\n        }\n    }\n    return\
    \ a;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp4o_sg0w3: /tmp/tmp4o_sg0w3.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> tri_vector{1, 3, 2};\n  if (n < 3) {\n    tri_vector.resize(n\
    \ + 1);\n    return tri_vector;\n  }\n  for (int i = 3; i <= n; i++) {\n    if\
    \ (i % 2 == 0) {\n      tri_vector.push_back(1 + i / 2);\n    } else {\n     \
    \ tri_vector.push_back(tri_vector[i - 2] + tri_vector[i - 1] + tri_vector[i -\
    \ 3]);\n    }\n  }\n  return tri_vector;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpjpki5z24: /tmp/tmpjpki5z24.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  long tri1 = 3;\n  long tri2 = 2;\n  long tri3 = 1;\n  long temp;\n \
    \ std::vector<long> result{1, 3, 2};\n  for (long i = 0; i < n; i++) {\n    if\
    \ (i % 2 == 0) {\n      temp = tri1;\n      tri1 = tri2;\n      tri2 = tri3;\n\
    \      tri3 = tri3 + temp;\n    } else {\n      temp = tri1;\n      tri1 = tri2;\n\
    \      tri2 = tri3;\n      tri3 = tri3 + tri1 + tri2;\n    }\n    result.push_back(tri3);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpdofh9dup: /tmp/tmpdofh9dup.cpp:42: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // your code here\n  std::vector<long> result;\n  int tri[n+1];\n  if(n==0)\n\
    \    return result;\n  tri[0]=1;\n  tri[1]=3;\n  tri[2]=2;\n  for(int i=3;i<=n;i++)\n\
    \  {\n    if(i%2==0)\n      tri[i]=1+(i/2);\n    else\n      tri[i]=tri[i-1]+tri[i-2]+tri[i+1];\n\
    \  }\n  for(int i=0;i<=n;i++)\n    result.push_back(tri[i]);\n  return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpj0ixhdwy: /tmp/tmpj0ixhdwy.cpp:41: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v = {1, 3, 2};\n  for (int i = 2; i < n; i++)\n  \
    \  v.push_back(v[i - 2] + v[i - 1] + v[i]);\n  return v;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp_r_fe3n_: /tmp/tmp_r_fe3n_.cpp:26: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tif (n == 0) {\n\t\treturn {};\n\t}\n\tstd::vector<long> res;\n\tres.push_back(1);\n\
    \tif (n == 1) {\n\t\treturn res;\n\t}\n\tres.push_back(3);\n\tif (n == 2) {\n\t\
    \treturn res;\n\t}\n\tres.push_back(2);\n\tif (n == 3) {\n\t\treturn res;\n\t\
    }\n\tfor (int i = 3; i < n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tres.push_back(res[i\
    \ - 1] + 1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tres.push_back(res[i - 1] + res[i\
    \ - 2] + res[i - 3]);\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp2nc0l2wh: /tmp/tmp2nc0l2wh.cpp:47: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> l;\n    l.push_back(1);\n    l.push_back(3);\n \
    \   l.push_back(2);\n    if(n==0)\n    {\n        l.pop_back();\n        l.pop_back();\n\
    \        l.pop_back();\n        return l;\n    }\n    if(n==1)\n    {\n      \
    \  l.pop_back();\n        l.pop_back();\n        return l;\n    }\n    if(n==2)\n\
    \    {\n        l.pop_back();\n        return l;\n    }\n    for(int i=0;i<n-2;i++)\n\
    \    {\n        l.push_back(l[i]+l[i+1]+l[i+2]);\n    }\n    return l;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpvwap7hna: /tmp/tmpvwap7hna.cpp:49: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    ans.push_back(1);\n    ans.push_back(3);\n\
    \    ans.push_back(2);\n    long long x=0,y=3,z=2;\n    long long temp;\n    if(n==1)\n\
    \    {\n        ans.erase(ans.begin()+1);\n        return ans;\n    }\n    if(n==2)\n\
    \    {\n        ans.erase(ans.begin()+2);\n        return ans;\n    }\n    for(int\
    \ i=0;i<n-2;i++)\n    {\n        if(i%2==0)\n        {\n            x=1+i/2;\n\
    \            ans.push_back(x);\n        }\n        else\n        {\n         \
    \   temp=x+y+z;\n            y=z;\n            z=x;\n            x=temp;\n   \
    \         ans.push_back(temp);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpizf_4_96: /tmp/tmpizf_4_96.cpp:55: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res;\n  for (long i = 0; i <= n; i++) {\n    if (i\
    \ == 0) {\n      res.push_back(1);\n    } else if (i == 1) {\n      res.push_back(3);\n\
    \    } else if (i == 2) {\n      res.push_back(2);\n    } else if (i % 2 == 0)\
    \ {\n      res.push_back(1 + i / 2);\n    } else {\n      res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n    }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp5c0jkx2j: /tmp/tmp5c0jkx2j.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tris(n+1);\n    tris[0] = 1;\n    tris[1] = 3;\n\
    \    tris[2] = 2;\n    long n1 = tris[1];\n    long n2 = tris[2];\n    long n3\
    \ = tris[0];\n    long temp1, temp2, temp3;\n    for(int i = 3; i < n+1; i++){\n\
    \        temp1 = n1;\n        temp2 = n2;\n        temp3 = n3;\n        if(i %\
    \ 2 == 0){\n            tris[i] = 1 + i / 2;\n        }\n        else{\n     \
    \       tris[i] = tris[i-1] + tris[i-2] + tris[i+1];\n        }\n        n1 =\
    \ temp2;\n        n2 = temp3;\n        n3 = temp1;\n    }\n    return tris;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpogxg6iy0: /tmp/tmpogxg6iy0.cpp:45: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n > 0);\n    std::vector<long> tri;\n    tri.push_back(1);\n\
    \    tri.push_back(3);\n    tri.push_back(2);\n    if (n == 1) {\n        return\
    \ {1};\n    }\n    if (n == 2) {\n        return {1, 3};\n    }\n    if (n ==\
    \ 3) {\n        return {1, 3, 2};\n    }\n    for (int i = 3; i < n; i++) {\n\
    \        if (i % 2 == 0) {\n            tri.push_back(1 + i / 2);\n        } else\
    \ {\n            long a = tri[i - 3] + tri[i - 2] + tri[i - 1];\n            tri.push_back(a);\n\
    \        }\n    }\n    return tri;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmptddhn53t: /tmp/tmptddhn53t.cpp:45: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v(n+1);\n\tv[0] = 1;\n\tif(n >= 1) v[1] = 3;\n\tif(n\
    \ >= 2) v[2] = 2;\n\tfor(int i = 3; i <= n; i++)\n\t\tv[i] = (i & 1) ? (v[i-1]\
    \ + v[i-2] + v[i+1]) : (1 + i / 2);\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmppw4bj8y4: /tmp/tmppw4bj8y4.cpp:29: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  assert(n >= 0);\n  if (n == 0) return {};\n  std::vector<long> v = {1,\
    \ 3, 2};\n  long t = 0;\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0)\
    \ {\n      t = 1 + i / 2;\n    } else {\n      t = v[i - 1] + v[i - 2] + v[i -\
    \ 3];\n    }\n    v.push_back(t);\n  }\n  return v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp764kaglr: /tmp/tmp764kaglr.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result(n + 1);\n    result[0] = 1;\n    result[1]\
    \ = 3;\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n      \
    \      result[i] = 1 + i / 2;\n        } else {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpnuwtu0qm: /tmp/tmpnuwtu0qm.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  if (n < 0) return {};\n  if (n == 0) return {1};\n  if (n == 1) return\
    \ {1, 3};\n  long a = 1, b = 3, c = 2;\n  std::vector<long> res = {1, 3, 2};\n\
    \  for (long i = 3; i <= n; i++) {\n    long a1 = (i % 2) ? a + b + c : 1 + i\
    \ / 2;\n    a = b;\n    b = c;\n    c = a1;\n    res.push_back(a1);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpyijuyznx: /tmp/tmpyijuyznx.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> triSeq;\n    if(n == 0)\n        return triSeq;\n\
    \    triSeq.push_back(1);\n    if(n == 1)\n        return triSeq;\n    triSeq.push_back(3);\n\
    \    if(n == 2)\n        return triSeq;\n    triSeq.push_back(2);\n    if(n ==\
    \ 3)\n        return triSeq;\n    for(int i = 4; i <= n; i++){\n        if(i %\
    \ 2 == 0)\n            triSeq.push_back(1 + i / 2);\n        else\n          \
    \  triSeq.push_back(triSeq[i - 1] + triSeq[i - 2] + triSeq[i + 1]);\n    }\n \
    \   return triSeq;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpwmn8dk1g: /tmp/tmpwmn8dk1g.cpp:41: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> res;\n    res.push_back(1);\n\
    \    if (n == 0) return res;\n    res.push_back(3);\n    if (n == 1) return res;\n\
    \    res.push_back(2);\n    if (n == 2) return res;\n    while (res.size() <=\
    \ n) {\n        long curr = res[res.size() - 1];\n        long curr_1 = res[res.size()\
    \ - 2];\n        long curr_2 = res[res.size() - 3];\n        if (curr % 2 == 0)\
    \ {\n            res.push_back(1 + curr / 2);\n        } else {\n            res.push_back(curr\
    \ + curr_1 + curr_2);\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmptpaxf31q: /tmp/tmptpaxf31q.cpp:41: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result = {1, 3, 2};\n    if (n == 1) {\n       \
    \ result.pop_back();\n        result.pop_back();\n        return result;\n   \
    \ } else if (n == 2) {\n        result.pop_back();\n        return result;\n \
    \   } else if (n == 3) {\n        return result;\n    } else {\n        for (long\
    \ i = 3; i < n; i++) {\n            result.push_back(result[i - 1] + result[i\
    \ - 2] + result[i - 3]);\n        }\n        return result;\n    }\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp86aohtnv: /tmp/tmp86aohtnv.cpp:38: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> ret(n + 1);\n  ret[0] = 1;\n  ret[1] = 3;\n  ret[2]\
    \ = 2;\n  for (int i = 3; i <= n; i++) {\n    ret[i] = (i % 2 == 0) ? ret[i -\
    \ 1] + ret[i - 2] + ret[i + 1] : 1 + i / 2;\n  }\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpsd9748f_: /tmp/tmpsd9748f_.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  long  i = 1;\n  std::vector<long> ret = {1, 3, 2};\n  while (i < n)\
    \ {\n    if (i % 2 == 0) {\n      ret.push_back(1 + i / 2);\n    } else {\n  \
    \    ret.push_back(ret[i - 1] + ret[i - 2] + ret[i + 1]);\n    }\n    i++;\n \
    \ }\n  return ret;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpl__3oe31: /tmp/tmpl__3oe31.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  //your code here\n  std::vector<long> result;\n  result.push_back(1);\n\
    \  for(int i = 1; i <= n; i++) {\n    if(i == 1) result.push_back(3);\n    else\
    \ if(i == 2) result.push_back(2);\n    else {\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpdbxv5qk7: /tmp/tmpdbxv5qk7.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> arr;\n    arr.push_back(1);\n    arr.push_back(3);\n\
    \    arr.push_back(2);\n    arr.push_back(8);\n    if(n == 0) return {1};\n  \
    \  if(n == 1) return {1, 3};\n    if(n == 2) return {1, 3, 2};\n    for(int i\
    \ = 4; i <= n; i++){\n        if(i % 2 == 0) arr.push_back(1 + i / 2);\n     \
    \   else arr.push_back(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n    return\
    \ arr;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp1aw8u53h: /tmp/tmp1aw8u53h.cpp:37: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  long val = n;\n  std::vector<long> a;\n  a.push_back(1);\n  a.push_back(3);\n\
    \  a.push_back(2);\n  if(n == 1) {\n    return a;\n  }\n  a.push_back(8);\n  long\
    \ num1 = 2;\n  long num2 = 3;\n  long num3 = 8;\n  long temp;\n  for(int i = 4;\
    \ i <= n; i++) {\n    if(i % 2 == 0) {\n      temp = (i / 2) + 1;\n    } else\
    \ {\n      temp = num1 + num2 + num3;\n    }\n    num1 = num2;\n    num2 = num3;\n\
    \    num3 = temp;\n    a.push_back(temp);\n  }\n  return a;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp9pwznof0: /tmp/tmp9pwznof0.cpp:49: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    ans.push_back(1);\n    ans.push_back(3);\n\
    \    ans.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        if(i % 2 ==\
    \ 0) {\n            ans.push_back(1 + i / 2);\n        } else {\n            ans.push_back(ans[i\
    \ - 1] + ans[i - 2] + ans[i + 1]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp0czs0x2n: /tmp/tmp0czs0x2n.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res(n+1);\n    res[0] = 0;\n    res[1] = 1;\n  \
    \  res[2] = 3;\n    res[3] = 2;\n    for(int i = 4; i <= n; i++){\n        if(i%2==0){\n\
    \            res[i] = 1 + i/2;\n        }\n        else{\n            res[i] =\
    \ res[i-1] + res[i-2] + res[i+1];\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp6izpu3q0: /tmp/tmp6izpu3q0.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    for(int i = 3; i <= n; i++) {\n        long res\
    \ = i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i + 1];\n\
    \        result.push_back(res);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpvwysshzd: /tmp/tmpvwysshzd.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> trib;\n    trib.push_back(1);\n    trib.push_back(3);\n\
    \    trib.push_back(2);\n    if(n > 3) {\n        for(int i = 3; i <= n; i++)\
    \ {\n            if(i % 2 == 0) {\n                trib.push_back(1 + i / 2);\n\
    \            } else {\n                long temp = trib[i - 1] + trib[i - 2] +\
    \ trib[i + 1];\n                trib.push_back(temp);\n            }\n       \
    \ }\n    }\n    return trib;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp4atpl4fl: /tmp/tmp4atpl4fl.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v(n+1);\n  v[0] = 1;\n  v[1] = 3;\n  v[2] = 2;\n \
    \ for(int i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n      v[i] = 1 + i / 2;\n\
    \    } else {\n      v[i] = v[i-1] + v[i-2] + v[i+1];\n    }\n  }\n  return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpzpoignpg: /tmp/tmpzpoignpg.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res = {1, 3, 2};\n  for (int i = 3; i <= n; i++) {\n\
    \    long next = i % 2 == 0 ? 1 + i / 2 : res[i - 1] + res[i - 2] + res[i - 3];\n\
    \    res.push_back(next);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp71w8tnsn: /tmp/tmp71w8tnsn.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  v.push_back(1);\n  v.push_back(3);\n  v.push_back(2);\n\
    \  v.push_back(8);\n  if (n == 1) {\n    v.erase(v.begin() + 3);\n    v.erase(v.begin()\
    \ + 2);\n    v.erase(v.begin() + 1);\n    return v;\n  }\n  if (n == 2) {\n  \
    \  v.erase(v.begin() + 3);\n    v.erase(v.begin() + 2);\n    return v;\n  }\n\
    \  if (n == 3) return v;\n  long size = v.size();\n  for (int i = 4; i <= n; i++)\
    \ {\n    if (i % 2 == 0) {\n      v.push_back(1 + i / 2);\n    } else {\n    \
    \  v.push_back(v[size - 3] + v[size - 2] + v[size - 1]);\n    }\n    size++;\n\
    \  }\n  return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpzj7pn_xd: /tmp/tmpzj7pn_xd.cpp:51: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) return res;\n    res.push_back(1);\n\
    \    if(n == 1) return res;\n    res.push_back(3);\n    if(n == 2) return res;\n\
    \    res.push_back(2);\n    if(n == 3) return res;\n    for(int i = 4; i <= n;\
    \ i++){\n        if(i % 2 == 0) res.push_back(1 + i / 2);\n        else res.push_back(res[i\
    \ - 1] + res[i - 2] + res[i - 4]);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpl58t5m0c: /tmp/tmpl58t5m0c.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> tri;\n  tri.push_back(1);\n  if (n > 0) tri.push_back(3);\n\
    \  if (n > 1) tri.push_back(2);\n  if (n > 2) {\n    for (int i = 3; i <= n; i++)\
    \ {\n      if (i % 2 == 0) {\n        tri.push_back(1 + i / 2);\n      } else\
    \ {\n        tri.push_back(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n      }\n \
    \   }\n  }\n  return tri;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpn5_l_woo: /tmp/tmpn5_l_woo.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tif (n == 0) {\n\t\tv.push_back(1);\n\t\treturn\
    \ v;\n\t}\n\telse if (n == 1) {\n\t\tv.push_back(1);\n\t\tv.push_back(3);\n\t\t\
    return v;\n\t}\n\telse if (n == 2) {\n\t\tv.push_back(1);\n\t\tv.push_back(3);\n\
    \t\tv.push_back(2);\n\t\treturn v;\n\t}\n\telse {\n\t\tv.push_back(1);\n\t\tv.push_back(3);\n\
    \t\tv.push_back(2);\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tif (i % 2 == 0)\
    \ {\n\t\t\t\tv.push_back(1 + i / 2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tv.push_back(v[i\
    \ - 1] + v[i - 2] + v[i + 1]);\n\t\t\t}\n\t\t}\n\t\treturn v;\n\t}\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpq4icabso: /tmp/tmpq4icabso.cpp:52: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n == 0) return v;\n    v.push_back(1);\n\
    \    if(n == 1) return v;\n    v.push_back(3);\n    if(n == 2) return v;\n   \
    \ v.push_back(2);\n    while(v.size() <= n) {\n        long sz = v.size();\n \
    \       if(sz % 2 == 0) {\n            v.push_back(1 + (sz / 2));\n        } else\
    \ {\n            v.push_back(v[sz - 1] + v[sz - 2] + v[sz + 1]);\n        }\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp15uf9_rs: /tmp/tmp15uf9_rs.cpp:38: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> ret;\n    if (n == 0)\n   \
    \     return ret;\n    long d[n + 1];\n    ret.push_back(1);\n    if (n == 1)\n\
    \        return ret;\n    ret.push_back(3);\n    if (n == 2)\n        return ret;\n\
    \    ret.push_back(2);\n    if (n == 3)\n        return ret;\n    d[0] = 1;\n\
    \    d[1] = 3;\n    d[2] = 2;\n    for (int i = 3; i <= n; i++) {\n        if\
    \ (i % 2 == 0)\n            d[i] = 1 + i / 2;\n        else\n            d[i]\
    \ = d[i - 1] + d[i - 2] + d[i + 1];\n        ret.push_back(d[i]);\n    }\n   \
    \ return ret;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpwmge9og4: /tmp/tmpwmge9og4.cpp:47: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> tri_series;\n    if(n == 0) {\n        tri_series.push_back(1);\n\
    \        return tri_series;\n    }\n    if(n == 1) {\n        tri_series.push_back(1);\n\
    \        tri_series.push_back(3);\n        return tri_series;\n    }\n    if(n\
    \ == 2) {\n        tri_series.push_back(1);\n        tri_series.push_back(3);\n\
    \        tri_series.push_back(2);\n        return tri_series;\n    }\n    if(n\
    \ == 3) {\n        tri_series.push_back(1);\n        tri_series.push_back(3);\n\
    \        tri_series.push_back(2);\n        tri_series.push_back(8);\n        return\
    \ tri_series;\n    }\n    long tri_prev_prev_prev = 1;\n    long tri_prev_prev\
    \ = 3;\n    long tri_prev = 2;\n    long tri_current = 8;\n    tri_series.push_back(tri_prev_prev_prev);\n\
    \    tri_series.push_back(tri_prev_prev);\n    tri_series.push_back(tri_prev);\n\
    \    tri_series.push_back(tri_current);\n    for(long i = 4; i <= n; i++) {\n\
    \        if(i & 1) {\n            tri_current = tri_prev + tri_prev_prev + tri_prev_prev_prev;\n\
    \        } else {\n            tri_current = 1 + (i / 2);\n        }\n       \
    \ tri_series.push_back(tri_current);\n        tri_prev_prev_prev = tri_prev_prev;\n\
    \        tri_prev_prev = tri_prev;\n        tri_prev = tri_current;\n    }\n \
    \   return tri_series;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpzzgxa3v9: /tmp/tmpzzgxa3v9.cpp:67: int main(): Assertion `candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // your code\n    std::vector<long>v;\n    v.push_back(1);\n    v.push_back(3);\n\
    \    v.push_back(2);\n    if(n==1)\n    {\n        v.erase(v.begin()+1);\n   \
    \     return v;\n    }\n    if(n==2)\n    {\n        v.erase(v.begin()+2);\n \
    \       return v;\n    }\n    int i=3;\n    while(i<=n)\n    {\n        if(i%2!=0)\n\
    \        {\n            v.push_back(v[i-1]+v[i-2]+v[i-3]);\n        }\n      \
    \  else\n        {\n            v.push_back(1+(i/2));\n        }\n        i++;\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp_yguyge9: /tmp/tmp_yguyge9.cpp:51: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> triArr(n + 1);\n  triArr[0] = 1;\n  triArr[1] = 3;\n\
    \  triArr[2] = 2;\n  for (long i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n\
    \      triArr[i] = 1 + i / 2;\n    } else {\n      triArr[i] = triArr[i - 1] +\
    \ triArr[i - 2] + triArr[i + 1];\n    }\n  }\n  return triArr;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp1yonc24m: /tmp/tmp1yonc24m.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // your code here\n    if(n==0)return {1};\n    if(n==1)return {1,3};\n\
    \    std::vector<long> result{1,3,2};\n    long temp;\n    for(int i=3;i<=n;i++){\n\
    \        if(i%2==0){\n            temp=1+i/2;\n        }\n        else{\n    \
    \        temp=result[i-1]+result[i-2]+result[i-3];\n        }\n        result.push_back(temp);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp0eww5ukq: /tmp/tmp0eww5ukq.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // TODO: implement your code here\n    return {};\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpaonzmvr0: /tmp/tmpaonzmvr0.cpp:24: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> l;\n  l.push_back(1);\n  l.push_back(3);\n  l.push_back(2);\n\
    \  for(int i = 3; i <= n; i++) {\n    if(i % 2 == 0) {\n      l.push_back(1 +\
    \ i / 2);\n    } else {\n      l.push_back(l[i - 1] + l[i - 2] + l[i + 1]);\n\
    \    }\n  }\n  return l;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpcgpuz87m: /tmp/tmpcgpuz87m.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        return result;\n\
    \    }\n    result.push_back(1);\n    result.push_back(3);\n    for (int i = 2;\
    \ i <= n; i++) {\n        long sum = 0;\n        for (int j = 0; j < i - 1; j++)\
    \ {\n            sum += result[j];\n        }\n        result.push_back(sum);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmprztsxk18: /tmp/tmprztsxk18.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1);\n    res.push_back(3);\n\
    \    res.push_back(2);\n    res.push_back(8);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpkfvhdj9q: /tmp/tmpkfvhdj9q.cpp:29: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tlong tri1 = 1;\n\tlong tri2 = 3;\n\tlong\
    \ tri3 = 2;\n\tresult.push_back(tri1);\n\tresult.push_back(tri2);\n\tresult.push_back(tri3);\n\
    \tfor (long i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tresult.push_back(1\
    \ + i / 2);\n\t\t}\n\t\telse {\n\t\t\tlong temp = result[i - 1] + result[i - 2]\
    \ + result[i + 1];\n\t\t\tresult.push_back(temp);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp72fjfdn6: /tmp/tmp72fjfdn6.cpp:39: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tif (n == 0) return result;\n\tresult.push_back(1);\n\
    \tif (n == 1) return result;\n\tresult.push_back(3);\n\tif (n == 2) return result;\n\
    \tresult.push_back(2);\n\tint i = 4;\n\twhile (i <= n) {\n\t\tint tmp = result[i\
    \ - 3] + result[i - 2] + result[i - 1];\n\t\tresult.push_back(tmp);\n\t\ti++;\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpufsmo8zb: /tmp/tmpufsmo8zb.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.push_back(1);\n    result.push_back(3);\n\
    \    result.push_back(2);\n    if (n > 2) {\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.push_back(1 + i / 2);\n\
    \            } else {\n                long num = (result[i - 2] + result[i -\
    \ 1] + result[i - 3]);\n                result.push_back(num);\n            }\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp2qcpt7es: /tmp/tmp2qcpt7es.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tlong a = 0, b = 1, c = 1;\n\tfor (int i = 0;\
    \ i <= n; i++) {\n\t\tif (i == 0) {\n\t\t\tv.push_back(a);\n\t\t}\n\t\telse if\
    \ (i == 1) {\n\t\t\tv.push_back(b);\n\t\t}\n\t\telse if (i == 2) {\n\t\t\tv.push_back(c);\n\
    \t\t}\n\t\telse {\n\t\t\tlong d = a + b + c;\n\t\t\tv.push_back(d);\n\t\t\ta =\
    \ b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t}\n\t}\n\treturn v;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpe31n1yy3: /tmp/tmpe31n1yy3.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  //your code here\n  std::vector<long> res;\n  res.push_back(1);\n  if(n\
    \ == 0) return res;\n  res.push_back(3);\n  if(n == 1) return res;\n  res.push_back(2);\n\
    \  if(n == 2) return res;\n  long n1 = 1, n2 = 3, n3 = 2;\n  for(int i = 3; i\
    \ <= n; i++){\n    long temp = n1 + n2 + n3;\n    res.push_back(temp);\n    n1\
    \ = n2;\n    n2 = n3;\n    n3 = temp;\n  }\n  return res;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpz12jz4_g: /tmp/tmpz12jz4_g.cpp:39: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n==0)\n    {\n        v.push_back(1);\n\
    \        return v;\n    }\n    else if(n==1)\n    {\n        v.push_back(1);\n\
    \        v.push_back(3);\n        return v;\n    }\n    else if(n==2)\n    {\n\
    \        v.push_back(1);\n        v.push_back(3);\n        v.push_back(2);\n \
    \       return v;\n    }\n    else\n    {\n        v.push_back(1);\n        v.push_back(3);\n\
    \        v.push_back(2);\n        int t1=3,t2=2,t3=1;\n        for(int i=3;i<=n;i++)\n\
    \        {\n            if(i%2==0)\n            {\n                v.push_back(1+i/2);\n\
    \                t3=t2;\n                t2=t1;\n                t1=1+i/2;\n \
    \           }\n            else\n            {\n                v.push_back(t1+t2+t3);\n\
    \                t3=t2;\n                t2=t1;\n                t1=t1+t2+t3;\n\
    \            }\n        }\n        return v;\n    }\n    \n    \n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpzxlovtxx: /tmp/tmpzxlovtxx.cpp:68: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> result;\n\tresult.push_back(1);\n\tresult.push_back(3);\n\
    \tresult.push_back(2);\n\tfor (int i = 3; i <= n; i++) {\n\t\tif (i % 2 == 0)\
    \ {\n\t\t\tresult.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpgr9edaq5: /tmp/tmpgr9edaq5.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v(n+1);\n\tv[0] = 1;\n\tif(n >= 1) v[1] = 3;\n\tif(n\
    \ >= 2) v[2] = 2;\n\tfor(int i = 3; i <= n; i++)\n\t\tv[i] = ((i%2 == 0) ? (1\
    \ + i/2) : (v[i-1] + v[i-2] + v[i+1]));\n\treturn v;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpnrstopfg: /tmp/tmpnrstopfg.cpp:29: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ret;\n    ret.push_back(1);\n    if (n == 0) return\
    \ ret;\n    ret.push_back(3);\n    if (n == 1) return ret;\n    ret.push_back(2);\n\
    \    if (n == 2) return ret;\n    for (int i = 3; i <= n; i++) {\n        long\
    \ tmp = 1 + i / 2;\n        if (i % 2 == 1) {\n            tmp = ret[i - 1] +\
    \ ret[i - 2] + ret[i + 1];\n        }\n        ret.push_back(tmp);\n    }\n  \
    \  return ret;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp8ectyny_: /tmp/tmp8ectyny_.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  result.push_back(1);\n  result.push_back(3);\n\
    \  result.push_back(2);\n  for (int i = 2; i < n; i++) {\n    if (i % 2 == 0)\n\
    \      result.push_back(1 + i / 2);\n    else\n      result.push_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpqix2410m: /tmp/tmpqix2410m.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n == 0) {\n    return result;\n  }\n\
    \  result.emplace_back(1);\n  for (int i = 1; i <= n; ++i) {\n    if (i % 2 ==\
    \ 0) {\n      result.emplace_back(1 + i / 2);\n    } else {\n      result.emplace_back(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpjxya5_ta: /tmp/tmpjxya5_ta.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> vec;\n\tfor (long i = 0; i <= n; i++) {\n\t\tif (i\
    \ == 0) {\n\t\t\tvec.push_back(1);\n\t\t}\n\t\telse if (i == 1) {\n\t\t\tvec.push_back(3);\n\
    \t\t}\n\t\telse if (i == 2) {\n\t\t\tvec.push_back(2);\n\t\t}\n\t\telse if (i\
    \ % 2 == 0) {\n\t\t\tvec.push_back(1 + i / 2);\n\t\t}\n\t\telse {\n\t\t\tvec.push_back(vec[i\
    \ - 1] + vec[i - 2] + vec[i + 1]);\n\t\t}\n\t}\n\treturn vec;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp985n06bg: /tmp/tmp985n06bg.cpp:41: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> ans;\n  for (long i = 0; i <= n; i++) {\n    if (i\
    \ == 0) {\n      ans.push_back(1);\n    } else if (i == 1) {\n      ans.push_back(3);\n\
    \    } else if (i == 2) {\n      ans.push_back(2);\n    } else if (i % 2 == 0)\
    \ {\n      ans.push_back(1 + i / 2);\n    } else {\n      ans.push_back(ans[i\
    \ - 1] + ans[i - 2] + ans[i + 1]);\n    }\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp0ctr6rnl: /tmp/tmp0ctr6rnl.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  if (n == 0) return {};\n  else if (n == 1) return {1};\n  else if (n\
    \ == 2) return {1, 1};\n  else if (n == 3) return {1, 3, 2};\n  std::vector<long>\
    \ tri_vec = {1, 3, 2};\n  long current = 8;\n  long even_num = 4;\n  long odd_num\
    \ = 1;\n  while (tri_vec.size() < n + 1) {\n    if (even_num == n + 1) {\n   \
    \   if (tri_vec.size() == n + 1) {\n        break;\n      }\n      tri_vec.push_back(current);\n\
    \      current = (current - tri_vec[tri_vec.size() - 2]) + tri_vec[tri_vec.size()\
    \ - 1];\n      odd_num++;\n    } else {\n      tri_vec.push_back(current);\n \
    \     current = 1 + even_num / 2;\n      even_num++;\n    }\n  }\n  return tri_vec;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpcuzvvp0z: /tmp/tmpcuzvvp0z.cpp:45: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> v;\n\tfor (long i = 0; i <= n; i++) {\n\t\tlong j\
    \ = i;\n\t\tlong temp = 0;\n\t\twhile (j > 0) {\n\t\t\ttemp = (j % 2 == 0) ? 1\
    \ + j / 2 : temp + tri(j - 1)[i] + tri(j - 2)[i] + tri(j + 1)[i];\n\t\t\tj--;\n\
    \t\t}\n\t\tv.push_back(temp);\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v{1, 3, 2};\n    for (long i = 3; i <= n; i++) {\n\
    \        if (i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else\
    \ {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmphe5hdvqx: /tmp/tmphe5hdvqx.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> answer(n + 1);\n  answer[0] = 1;\n  answer[1] = 3;\n\
    \  answer[2] = 2;\n  if (n < 3) {\n    answer.resize(n + 1);\n    return answer;\n\
    \  }\n  for (int i = 3; i <= n; i++) {\n    if (i % 2 == 0) {\n      answer[i]\
    \ = 1 + i / 2;\n    } else {\n      answer[i] = answer[i - 1] + answer[i - 2]\
    \ + answer[i + 1];\n    }\n  }\n  return answer;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpham1ebs5: /tmp/tmpham1ebs5.cpp:38: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  vector<long> tribonacci;\n  // TODO: return the Tribonacci sequence\
    \ with first n + 1 members.\n  if(n == 0) return {};\n  if(n == 1) return {1};\n\
    \  if(n == 2) return {1,3};\n  tribonacci.push_back(1);\n  tribonacci.push_back(3);\n\
    \  tribonacci.push_back(2);\n  n = n - 3;\n  int i = 2;\n  while(n){\n    int\
    \ odd_checker = tribonacci[i] & 1;\n    if(odd_checker){\n      int sum = tribonacci[i]\
    \ + tribonacci[i - 1] + tribonacci[i + 1];\n      tribonacci.push_back(sum);\n\
    \      i++;\n    }\n    else{\n      int sum = 1 + tribonacci[i] / 2;\n      tribonacci.push_back(sum);\n\
    \      i++;\n    }\n    n--;\n  }\n  return tribonacci;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfw1ai8ja.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpfw1ai8ja.cpp:19:3: error: \u2018vector\u2019 was not declared\
    \ in this scope; did you mean \u2018std::vector\u2019?\n   19 |   vector<long>\
    \ tribonacci;\n      |   ^~~~~~\n      |   std::vector\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpfw1ai8ja.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpfw1ai8ja.cpp:19:10:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |   vector<long>\
    \ tribonacci;\n      |          ^~~~\n/tmp/tmpfw1ai8ja.cpp:24:3: error: \u2018\
    tribonacci\u2019 was not declared in this scope\n   24 |   tribonacci.push_back(1);\n\
    \      |   ^~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0)\n        return {};\n    if(n == 1)\n        return {1};\n\
    \    if(n == 2)\n        return {1,3};\n    std::vector<long> v;\n    v.push_back(1);\n\
    \    v.push_back(3);\n    v.push_back(2);\n    for(int i = 3; i < n; i++){\n \
    \       if(i % 2 == 0)\n            v.push_back(1 + i / 2);\n        else\n  \
    \          v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp0r1dzvl0: /tmp/tmp0r1dzvl0.cpp:39: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  long a = 0, b = 1, c = 3, d = a + b + c;\n \
    \ if (n < 0)\n    return v;\n  v.push_back(a);\n  if (n == 0)\n    return v;\n\
    \  v.push_back(b);\n  if (n == 1)\n    return v;\n  v.push_back(c);\n  if (n ==\
    \ 2)\n    return v;\n  for (long i = 3; i <= n; i++) {\n    v.push_back(d);\n\
    \    a = b;\n    b = c;\n    c = d;\n    d = a + b + c;\n  }\n  return v;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp26lic37o: /tmp/tmp26lic37o.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
