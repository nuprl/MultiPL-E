name: HumanEval_97_multiply
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpj7ugge22: /tmp/tmpj7ugge22.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a<0 && b<0)\n        return((-a)*(-b)%10);\n    else if(a<0)\n\
    \        return((-a)*b%10);\n    else if(b<0)\n        return(a*(-b)%10);\n  \
    \  else\n        return(a*b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpu_vb4zoe: /tmp/tmpu_vb4zoe.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long int q;\n    q=a*b;\n    if(q<0)\n    {\n        q=q*-1;\n   \
    \ }\n    return q%10;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpayvii1qt: /tmp/tmpayvii1qt.cpp:22: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 1;\n    long c = a * b;\n    // Do not use divison,\
    \ calculate the last \n    // digit of product\n    while (c > 0) {\n        int\
    \ digit = c % 10;\n        product *= digit;\n        c /= 10;\n    }\n    return\
    \ product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmppf691_66: /tmp/tmppf691_66.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwfhg1udz: /tmp/tmpwfhg1udz.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpiosh4r68: /tmp/tmpiosh4r68.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n// Your code here\nreturn (a%10)*(b%10);\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpksk78toc: /tmp/tmpksk78toc.cpp:20: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return std::abs(a % 10 * b % 10);\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmgu8g1cy: /tmp/tmpmgu8g1cy.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a<0)a=-a;\n    if(b<0)b=-b;\n    return (a%10)*(b%10);\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a<0) a*=-1;\n    if(b<0) b*=-1;\n    return (a%10)*(b%10);\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a < 0){\n        a = -a;\n    }\n    if(b < 0){\n        b = -b;\n\
    \    }\n    return (a%10) * (b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    a=std::abs(a);\n    b=std::abs(b);\n    return (a%10)*(b%10);\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1nzyb2of: /tmp/tmp1nzyb2of.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int unitDigitA = a % 10;\n    int unitDigitB = b % 10;\n    return\
    \ unitDigitA * unitDigitB;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyp1vlinq: /tmp/tmpyp1vlinq.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long prod1, prod2;\n    prod1 = a % 10;\n    prod2 = b % 10;\n   \
    \ return prod1 * prod2;\n}\nint main() {\n    auto candidate = multiply;\n   \
    \ assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) ==\
    \ (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpks1pmkkw: /tmp/tmpks1pmkkw.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if (a < 0) a = -a;\n    if (b < 0) b = -b;\n    return (a * b) % 10;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnc6p7sk1: /tmp/tmpnc6p7sk1.cpp:18: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int unitDigitOfA = a % 10;\n    int unitDigitOfB = b % 10;\n    long\
    \  unitDigitOfProduct = unitDigitOfA * unitDigitOfB;\n    return unitDigitOfProduct;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpb6pan7ea: /tmp/tmpb6pan7ea.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int res = a*b;\n  if(res<0)\n    res *= -1;\n  return res%10;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4sodqatt: /tmp/tmp4sodqatt.cpp:19: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Your code here\n    int unit_a = a % 10;\n    int unit_b = b %\
    \ 10;\n    return unit_a * unit_b;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_p_omc1u: /tmp/tmp_p_omc1u.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Your code here\n    int prod = 0;\n    a = abs(a);\n    b = abs(b);\n\
    \    while(a > 0){\n        prod += b%10;\n        a /= 10;\n    }\n    return\
    \ prod;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpp6noqsr1: /tmp/tmpp6noqsr1.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\ta = abs(a);\n\tb = abs(b);\n\treturn (a % 10) * (b % 10);\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int a1,b1;\n  a1=a%10;\n  b1=b%10;\n  return a1*b1;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmps7_hr4_8: /tmp/tmps7_hr4_8.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ia = a<0?-a:a;\n    long ib = b<0?-b:b;\n    return ((ia%10)*(ib%10));\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long prod = a * b;\n  prod = prod < 0 ? prod * -1 : prod;\n  long dig_a\
    \ = a % 10;\n  long dig_b = b % 10;\n  return dig_a * dig_b;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpemfq5hxi: /tmp/tmpemfq5hxi.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // This is a \"method-only\" submission. \n  // You only need to complete\
    \ this method. \n  // Checking the lowest significant digit of each.\n  long mul\
    \ = a*b;\n  int prod = mul%10;\n  return prod;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmppuo1gnik: /tmp/tmppuo1gnik.cpp:21: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10) * (b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgwkjwlth: /tmp/tmpgwkjwlth.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 0;\n    int rem;\n    if(a>=0 && b>=0){\n        rem\
    \ = a%10;\n        result = rem*(b%10);\n    }else if(a<0 && b<0){\n        rem\
    \ = abs(a)%10;\n        result = rem*(abs(b)%10);\n    }else if(a<0 && b>=0){\n\
    \        rem = abs(a)%10;\n        result = (rem*(b%10))*-1;\n    }else if(a>=0\
    \ && b<0){\n        rem = a%10;\n        result = (rem*(abs(b)%10))*-1;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbmbuv_2s: /tmp/tmpbmbuv_2s.cpp:34: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long ans=a*b;\n  int count=0;\n  long multi=1;\n  while(ans>0)\n  {\n\
    \      ans=ans/10;\n      count++;\n  }\n  while(count>1)\n  {\n      multi=multi*10;\n\
    \      count--;\n  }\n  long c=a*b;\n  c=c%multi;\n  return c;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8zitp4dm: /tmp/tmp8zitp4dm.cpp:31: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n   long firstNumber = abs(a);\n   long secondNumber = abs(b);\n   long\
    \ lastDigitA = firstNumber % 10;\n   long lastDigitB = secondNumber % 10;\n  \
    \ return (lastDigitA * lastDigitB);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgu2nca4b: /tmp/tmpgu2nca4b.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Your code here\n    long c = a % 10;\n    long d = b % 10;\n  \
    \  return c * d;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnxo7ekj1: /tmp/tmpnxo7ekj1.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::cout << \"a \" << a << std::endl;\n    std::cout << \"b \" <<\
    \ b << std::endl;\n    a = abs(a) % 10;\n    b = abs(b) % 10;\n    std::cout <<\
    \ \"a \" << a << std::endl;\n    std::cout << \"b \" << b << std::endl;\n    return\
    \ a * b;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: "a 148\nb 412\na 8\nb 2\na 19\nb 28\na 9\nb 8\na 2020\nb 1851\na 0\nb 1\n\
    a 14\nb -15\na 4\nb 5\na 76\nb 67\na 6\nb 7\na 17\nb 27\na 7\nb 7\na 0\nb 1\n\
    a 0\nb 1\na 0\nb 0\na 0\nb 0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp15w8gkdd: /tmp/tmp15w8gkdd.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here!\n    long pro = a*b;\n    std::cout<<\"product:\
    \ \"<<pro<<std::endl;\n    long last_a = a%10;\n    long last_b = b%10;\n    std::cout<<\"\
    last_a: \"<<last_a<<\" last_b: \"<<last_b<<std::endl;\n    std::cout<<\"last_a\
    \ * last_b: \"<<last_a*last_b<<std::endl;\n    return last_a*last_b;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: "product: 60976\nlast_a: 8 last_b: 2\nlast_a * last_b: 16\nproduct: 532\n\
    last_a: 9 last_b: 8\nlast_a * last_b: 72\nproduct: 3739020\nlast_a: 0 last_b:\
    \ 1\nlast_a * last_b: 0\nproduct: -210\nlast_a: 4 last_b: -5\nlast_a * last_b:\
    \ -20\n"
  stderr: "tmpl3ydjgp6: /tmp/tmpl3ydjgp6.cpp:26: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long product = a * b;\n    return product %\
    \ 10;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5zny21rc: /tmp/tmp5zny21rc.cpp:18: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsg5fsr1w: /tmp/tmpsg5fsr1w.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  a = std::abs(a);\n  b = std::abs(b);\n  return a*b % 10;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpa7bcjbym: /tmp/tmpa7bcjbym.cpp:18: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long digit_a = a%10;\n  long digit_b = b%10;\n  long product = digit_a*digit_b;\n\
    \  return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpx256rbpk: /tmp/tmpx256rbpk.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::ostringstream os;\n    os << a << b;\n    return std::stoi(os.str())\
    \ % 10;\n  }\n//   int main()\n//   {\n//      assert(multiply(7, 17) == 9);\n\
    //      assert(multiply(19, 28) == 72);\n//      assert(multiply(2020, 1851) ==\
    \ 0);\n//      assert(multiply(14, -15) == 20);\n//   }\n}\nint main() {\n   \
    \ auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n \
    \   assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprr107zzz.cpp:23:1: error: expected declaration before \u2018}\u2019\
    \ token\n   23 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long int x = (abs(a) % 10);\n  long int y = (abs(b) % 10);\n  return\
    \ x * y;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code here\n  long int a1=abs(a%10);\n  long int b1=abs(b%10);\n\
    \  return a1*b1;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return std::to_string(a*b).back() - '0';\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7gr05zzs: /tmp/tmp7gr05zzs.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ans = 1;\n    ans *= a % 10;\n    ans *= b % 10;\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9kzzzxsm: /tmp/tmp9kzzzxsm.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return std::abs(a % 10 * b % 10);\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmph8n9i7h5: /tmp/tmph8n9i7h5.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int m = a%10;\n  int n = b%10;\n  return m*n;\n}\nint main() {\n   \
    \ auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n \
    \   assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsm1lmoup: /tmp/tmpsm1lmoup.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long a_last = (a % 10);\n    long b_last = (b % 10);\n    return a_last\
    \ * b_last;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmps3evt7j8: /tmp/tmps3evt7j8.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    int units1=a%10;\n    int units2=b%10;\n  \
    \  return units1*units2;\n}\nint main() {\n    auto candidate = multiply;\n  \
    \  assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4wpwdcx9: /tmp/tmp4wpwdcx9.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::stringstream ss;\n    ss << a << b;\n    std::string str = ss.str();\n\
    \    int x = 1;\n    for(int i = 0; i < str.length(); i++) {\n        int num\
    \ = str[i] - '0';\n        if(num != 0) {\n            x *= num;\n        }\n\
    \    }\n    return x % 10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0xlq6xu_: /tmp/tmp0xlq6xu_.cpp:26: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::stringstream ss;\n    ss << a;\n    std::string aStr = ss.str();\n\
    \    ss.str(\"\");\n    ss << b;\n    std::string bStr = ss.str();\n    long aLastDigit\
    \ = aStr[aStr.length() - 1] - '0';\n    long bLastDigit = bStr[bStr.length() -\
    \ 1] - '0';\n    return aLastDigit * bLastDigit;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code here\n  int result = (a%10)*(b%10);\n  return result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpa04fm8wu: /tmp/tmpa04fm8wu.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long ab=a*b;\n    ab=ab>0?ab:-ab;\n    return\
    \ (ab%10);\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwmr6sbb4: /tmp/tmpwmr6sbb4.cpp:19: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a == 0 || b == 0) {\n        return 0;\n    }\n    return (a %\
    \ 10) * (b % 10);\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7n7ukt1d: /tmp/tmp7n7ukt1d.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n// Your code here\n  \n  return (a%10)*(b%10);\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmphytvjsqm: /tmp/tmphytvjsqm.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpb4d244vh: /tmp/tmpb4d244vh.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int x = a%10;\n  int y = b%10;\n  return x*y;\n}\nint main() {\n   \
    \ auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n \
    \   assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7wlqw8oj: /tmp/tmp7wlqw8oj.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long x = a%10;\n    long y = b%10;\n    return x*y;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnx8s8n_o: /tmp/tmpnx8s8n_o.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return 0;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8051a0it: /tmp/tmp8051a0it.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbn5z1b2f: /tmp/tmpbn5z1b2f.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int a_d, b_d;\n  a_d = a % 10;\n  b_d = b % 10;\n  return a_d * b_d;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp69sual1s: /tmp/tmp69sual1s.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    string strA = to_string(a);\n    string strB = to_string(b);\n   \
    \ int a1 = stoi(strA.substr(strA.length()-1, 1));\n    int b1 = stoi(strB.substr(strB.length()-1,\
    \ 1));\n    return a1*b1;\n}\nint main() {\n    auto candidate = multiply;\n \
    \   assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxe1datz0.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmpxe1datz0.cpp:12:5: error: \u2018string\u2019 was not declared\
    \ in this scope; did you mean \u2018std::string\u2019?\n   12 |     string strA\
    \ = to_string(a);\n      |     ^~~~~~\n      |     std::string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpxe1datz0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpxe1datz0.cpp:13:11:\
    \ error: expected \u2018;\u2019 before \u2018strB\u2019\n   13 |     string strB\
    \ = to_string(b);\n      |           ^~~~~\n      |           ;\n/tmp/tmpxe1datz0.cpp:14:19:\
    \ error: \u2018strA\u2019 was not declared in this scope\n   14 |     int a1 =\
    \ stoi(strA.substr(strA.length()-1, 1));\n      |                   ^~~~\n/tmp/tmpxe1datz0.cpp:14:14:\
    \ error: \u2018stoi\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::stoi\u2019?\n   14 |     int a1 = stoi(strA.substr(strA.length()-1,\
    \ 1));\n      |              ^~~~\n      |              std::__cxx11::stoi\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_u = a % 10;\n    int b_u = b % 10;\n    int u_p = a_u * b_u;\n\
    \    return u_p;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmph84adv2_: /tmp/tmph84adv2_.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n//return a*b;\n//return (a%10)*(b%10);\nreturn (a*b)%10;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpq053sv9x: /tmp/tmpq053sv9x.cpp:18: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // long product = 1;\n    // while(a != 0 && b != 0){\n    //    \
    \ product *= (a % 10);\n    //     product *= (b % 10);\n    //     a /= 10;\n\
    \    //     b /= 10;\n    // }\n    // return product;\n    return (abs(a % 10)\
    \ * abs(b % 10));\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    // make it work for negative numbers!\n   \
    \ a=a<0?-a:a;\n    b=b<0?-b:b;\n    return (a%10)*(b%10);\n}\nint main() {\n \
    \   auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Write your code here\n    long result = 1;\n    long finalResult\
    \ = 0;\n    long mult = 0;\n    long a1 = 0;\n    long b1 = 0;\n    if(a < 0){\n\
    \        a1 = a * -1;\n    }\n    else if(a == 0){\n        return 0;\n    }\n\
    \    else{\n        a1 = a;\n    }\n    if(b < 0){\n        b1 = b * -1;\n   \
    \ }\n    else if(b == 0){\n        return 0;\n    }\n    else{\n        b1 = b;\n\
    \    }\n    while(a1 > 0){\n        mult = a1 % 10;\n        while(b1 > 0){\n\
    \            result = result * (b1 % 10);\n            b1 = b1 / 10;\n       \
    \ }\n        finalResult = finalResult + result;\n        result = 1;\n      \
    \  b1 = b;\n        a1 = a1 / 10;\n    }\n    return finalResult;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6c82_val: /tmp/tmp6c82_val.cpp:51: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tlong ret = 1;\n\twhile (a) {\n\t\tret *= a % 10;\n\t\ta /= 10;\n\t}\n\
    \twhile (b) {\n\t\tret *= b % 10;\n\t\tb /= 10;\n\t}\n\treturn ret % 10;\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp64w9xwl8: /tmp/tmp64w9xwl8.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int m = std::to_string(a).back() - '0';\n    int n = std::to_string(b).back()\
    \ - '0';\n    return m * n;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long c = (a % 10) * (b % 10);\n    return c;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpkxrbe5xt: /tmp/tmpkxrbe5xt.cpp:20: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbpo8bd5a: /tmp/tmpbpo8bd5a.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // We can just multiply the last digits of a and b and\n  // return\
    \ that value.\n  return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3t2pfw3_: /tmp/tmp3t2pfw3_.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tif (a < 0) a = -a;\n\tif (b < 0) b = -b;\n\tlong c = a % 10;\n\tlong\
    \ d = b % 10;\n\treturn c * d;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  if (a < 0) a = -a;\n  if (b < 0) b = -b;\n  return ((a % 10) * (b %\
    \ 10));\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::vector<long> array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};\n    if\
    \ (std::find(array.begin(), array.end(), a) != array.end() ||\n        std::find(array.begin(),\
    \ array.end(), b) != array.end()) {\n        return 0;\n    }\n    else {\n  \
    \      std::vector<long> a_vec;\n        std::vector<long> b_vec;\n        long\
    \ temp_a = a;\n        long temp_b = b;\n        while (temp_a > 0) {\n      \
    \      a_vec.push_back(temp_a % 10);\n            temp_a /= 10;\n        }\n \
    \       while (temp_b > 0) {\n            b_vec.push_back(temp_b % 10);\n    \
    \        temp_b /= 10;\n        }\n        long product = 0;\n        for (int\
    \ i = 0; i < a_vec.size(); i++) {\n            product += a_vec[i] * b_vec[i];\n\
    \        }\n        return product;\n    }\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzyrw7dig: /tmp/tmpzyrw7dig.cpp:39: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  if(a<0)a=a*-1;\n  if(b<0)b=b*-1;\n  return (a%10)*(b%10);\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::ostringstream aa, bb;\n    aa << a;\n    bb << b;\n    std::string\
    \ aaa = aa.str();\n    std::string bbb = bb.str();\n    int i = aaa.back() - '0';\n\
    \    int j = bbb.back() - '0';\n    return i * j;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return a*b;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5h1dhabv: /tmp/tmp5h1dhabv.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int prod=1;\n    while(a>0)\n    {\n        prod=prod*(a%10);\n  \
    \      a=a/10;\n    }\n    while(b>0)\n    {\n        prod=prod*(b%10);\n    \
    \    b=b/10;\n    }\n    return prod;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpv3hnu3_d: /tmp/tmpv3hnu3_d.cpp:27: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    //your code here\n    long result = 1;\n    while(a > 0) {\n     \
    \   long x = a % 10;\n        if(x > 0) {\n            result *= x;\n        }\n\
    \        a /= 10;\n    }\n    while(b > 0) {\n        long x = b % 10;\n     \
    \   if(x > 0) {\n            result *= x;\n        }\n        b /= 10;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsas1hw31: /tmp/tmpsas1hw31.cpp:32: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int unitDigitA = abs(a % 10);\n    int unitDigitB = abs(b % 10);\n\
    \    return unitDigitA * unitDigitB;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tlong c = 0;\n\tlong d = 0;\n\tint flag = 0;\n\twhile (1) {\n\t\tif (a\
    \ % 10 == 0) {\n\t\t\ta = a / 10;\n\t\t}\n\t\telse {\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\twhile (1) {\n\t\tif (b % 10 == 0) {\n\t\t\tb = b / 10;\n\t\t}\n\t\telse {\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif (a < 0 && b < 0) {\n\t\ta = a * -1;\n\t\tb = b\
    \ * -1;\n\t}\n\telse if (a < 0) {\n\t\ta = a * -1;\n\t\tflag = 1;\n\t}\n\telse\
    \ if (b < 0) {\n\t\tb = b * -1;\n\t\tflag = 1;\n\t}\n\tc = a % 10;\n\td = b %\
    \ 10;\n\tif (flag == 1) {\n\t\treturn (c * d) * -1;\n\t}\n\telse {\n\t\treturn\
    \ c * d;\n\t}\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxlobfqpj: /tmp/tmpxlobfqpj.cpp:56: int main(): Assertion `candidate((2020),\
    \ (1851)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int ans;\n    ans =  (a%10) * (b%10);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzdtca1_r: /tmp/tmpzdtca1_r.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long res = 1;\n  while(a != 0) {\n    res *= a % 10;\n    a /= 10;\n\
    \  }\n  while(b != 0) {\n    res *= b % 10;\n    b /= 10;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgceda__3: /tmp/tmpgceda__3.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a*b)%10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5s0nnn3k: /tmp/tmp5s0nnn3k.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpx8fuz80l: /tmp/tmpx8fuz80l.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a < 0) a = -a;\n    if(b < 0) b = -b;\n    return (a % 10) * (b\
    \ % 10);\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code\n  // return (a%10 * b%10);\n  if(a == 0 || b == 0) return\
    \ 0;\n  return (a%10 * b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpng8t5e5p: /tmp/tmpng8t5e5p.cpp:19: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long p = a > 0 ? a : -a;\n  long q = b > 0 ? b : -b;\n  return (p %\
    \ 10) * (q % 10);\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int length_a = log10(a)+1;\n  int length_b = log10(b)+1;\n  int ab =\
    \ 0;\n  int ax = 0;\n  int bx = 0;\n  if(length_a == 1 && length_b == 1){\n  \
    \  if(a==0 || b==0){\n      return 0;\n    }\n    return a*b;\n  }else if(length_a\
    \ == 1){\n    ax = 1;\n    bx = b % 10;\n  }else if(length_b == 1){\n    ax =\
    \ a % 10;\n    bx = 1;\n  }else{\n    ax = a % 10;\n    bx = b % 10;\n  }\n  ab\
    \ = ax * bx;\n  return ab;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8_rp3py4: /tmp/tmp8_rp3py4.cpp:40: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    assert(a>=0 && b>=0);\n    return (abs(a)%10)*(abs(b)%10);\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpj9qcv_da: /tmp/tmpj9qcv_da.cpp:12: long int multiply(long int, long\
    \ int): Assertion `a>=0 && b>=0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpobuge9_h: /tmp/tmpobuge9_h.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long multiply_unit_digits(long num);\n  return multiply_unit_digits(a)\
    \ * multiply_unit_digits(b);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/ccxDFVMC.o: In function `multiply(long, long)':\ntmpik_cfsp1.cpp:(.text+0x19):\
    \ undefined reference to `multiply_unit_digits(long)'\ntmpik_cfsp1.cpp:(.text+0x28):\
    \ undefined reference to `multiply_unit_digits(long)'\ncollect2: error: ld returned\
    \ 1 exit status\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpulci7_po: /tmp/tmpulci7_po.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    assert(a>=0 && b>=0);\n    long a1=a%10;\n    long b1=b%10;\n    return\
    \ a1*b1;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpo_d22_xc: /tmp/tmpo_d22_xc.cpp:12: long int multiply(long int, long\
    \ int): Assertion `a>=0 && b>=0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int len_a = int(log10(a)) + 1;\n    int len_b = int(log10(b)) + 1;\n\
    \    if(len_a == 1 && len_b == 1) return a*b;\n    long ret;\n    if(len_a < len_b)\
    \ {\n        int temp = len_a;\n        len_a = len_b;\n        len_b = temp;\n\
    \        long temp2 = a;\n        a = b;\n        b = temp2;\n    }\n    int power\
    \ = len_a - len_b;\n    int a_first = a / pow(10, power);\n    int a_sec = a %\
    \ int(pow(10, power));\n    int b_first = b / pow(10, len_b - 1);\n    int b_sec\
    \ = b % int(pow(10, len_b - 1));\n    int first = a_first * b_first;\n    int\
    \ sec = a_sec * b_sec;\n    int mid = (a_first + a_sec) * (b_first + b_sec) -\
    \ first - sec;\n    ret = pow(10, power) * first + pow(10, len_b - 1) * mid +\
    \ sec;\n    // std::cout << a_first << \", \" << a_sec << std::endl;\n    // std::cout\
    \ << b_first << \", \" << b_sec << std::endl;\n    // std::cout << power << std::endl;\n\
    \    // std::cout << first << \", \" << mid << \", \" << sec << std::endl;\n \
    \   return ret;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8b54z6n6: /tmp/tmp8b54z6n6.cpp:41: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmptwr24_e_: /tmp/tmptwr24_e_.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbtbf0r_r: /tmp/tmpbtbf0r_r.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long temp;\n    while(b)\n    {\n        temp = b;\n        b = a\
    \ % b;\n        a = temp;\n    }\n    return a;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpusrfa9eb: /tmp/tmpusrfa9eb.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\treturn a*b;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp09lgmkrm: /tmp/tmp09lgmkrm.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n// your code here\n    int aUnitDigit = a % 10;\n    int bUnitDigit =\
    \ b % 10;\n    return aUnitDigit * bUnitDigit;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpu2l57_2o: /tmp/tmpu2l57_2o.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int product = a * b;\n    int lastdigit = product % 10;\n    return\
    \ lastdigit;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpiz1yiaxy: /tmp/tmpiz1yiaxy.cpp:18: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10) * (b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmprh4lh73q: /tmp/tmprh4lh73q.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::string aa = std::to_string(a);\n    std::string bb = std::to_string(b);\n\
    \    return (aa.back() - '0') * (bb.back() - '0');\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tint x = abs(a % 10);\n\tint y = abs(b % 10);\n\treturn x * y;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\treturn a*b;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqklbvqov: /tmp/tmpqklbvqov.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int v = (a%10)*(b%10);\n    if(v < 0){\n        return v*-1;\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long c;\n    c = a % 10;\n    c *= b % 10;\n    return c;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmprcrybf6b: /tmp/tmprcrybf6b.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return abs(a%10*b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnyscz9w8: /tmp/tmpnyscz9w8.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 1;\n    while(a > 0 || b > 0) {\n        long d1 =\
    \ a % 10;\n        long d2 = b % 10;\n        product *= d1 * d2;\n        a /=\
    \ 10;\n        b /= 10;\n    }\n    return product % 10;\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvmk7_q3u: /tmp/tmpvmk7_q3u.cpp:24: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int a1 = abs(a%10);\n  int b1 = abs(b%10);\n  return a1*b1;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return a % 10 * b % 10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4_mhh7cz: /tmp/tmp4_mhh7cz.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\treturn (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsxdjlr8e: /tmp/tmpsxdjlr8e.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return ((a<0)?-a:a)%10 * ((b<0)?-b:b)%10;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjcgmhtph: /tmp/tmpjcgmhtph.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmg6sdaq6: /tmp/tmpmg6sdaq6.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a*b)%10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpm8jqaxkl: /tmp/tmpm8jqaxkl.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long product = 0;\n    if(a < 0)\n        a *= -1;\n    if(b < 0)\n\
    \        b *= -1;\n    if(a > 10)\n        a %= 10;\n    if(b > 10)\n        b\
    \ %= 10;\n    product = a * b;\n    return product;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int num=0;\n    int t = abs(a)%10;\n    int t2 = abs(b)%10;\n    num\
    \ = t*t2;\n    return num;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long result = 1;\n    for(int i = 0; i < 6; i++) {\n        result\
    \ *= a%10;\n        result *= b%10;\n        a /= 10;\n        b /= 10;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3zjkp0_1: /tmp/tmp3zjkp0_1.cpp:23: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n   // your code here\n   int ar[a] = {0};\n   int br[b] = {0};\n   int\
    \ result[a+b] = {0};\n   long n1=a,n2=b;\n   int result_size = 0;\n   int i=0;\n\
    \   int mul,carry;\n   while(n1!=0){\n       ar[i] = n1%10;\n       n1 = n1/10;\n\
    \       i++;\n   }\n   result_size = i;\n   i=0;\n   while(n2!=0){\n       br[i]\
    \ = n2%10;\n       n2 = n2/10;\n       i++;\n   }\n   //multiply\n   for(int j=0;j<result_size;j++){\n\
    \       for(int k=0;k<i;k++){\n           mul = ar[j]*br[k];\n           carry\
    \ = result[j+k];\n           mul = mul+carry;\n           result[j+k] = mul%10;\n\
    \           result[j+k+1] += mul/10;\n       }\n   }\n   // remove 0s\n   while(result[result_size]==0){\n\
    \       result_size--;\n   }\n   // for(int j=0;j<=result_size;j++){\n   //  \
    \   cout<<result[j]<<\" \";\n   // }\n   //cout<<endl;\n   int m = 1;\n   long\
    \ ans = 0;\n   for(int j=result_size;j>=0;j--){\n       ans += result[j]*m;\n\
    \       m = m*10;\n   }\n   return ans;\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsigkcf4d: /tmp/tmpsigkcf4d.cpp:60: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::string sa = std::to_string(a);\n    std::string sb = std::to_string(b);\n\
    \    int i = sa.length() - 1;\n    while(sa[i] == '0')\n        i--;\n    sa =\
    \ sa[i];\n    i = sb.length() - 1;\n    while(sb[i] == '0')\n        i--;\n  \
    \  sb = sb[i];\n    return stoi(sa) * stoi(sb);\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzkf2fx7a: /tmp/tmpzkf2fx7a.cpp:28: int main(): Assertion `candidate((2020),\
    \ (1851)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpi_eqckvw: /tmp/tmpi_eqckvw.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // the number will be in form d * 10^(k-1) + d * 10^(k-2) + ... + d\
    \ * 10^0\n  // for example: 2020: 2*10^3 + 2*10^2 + 0*10^1 + 0*10^0\n  // the\
    \ unit digit is 2*0*0*0 + 2*0*0*1 + 0*0*2 + 0*1*0 = 0\n  // the number of digits\
    \ is 4\n  // the unit digit of product is unit digit of a * unit digit of b\n\
    \  int product_unit_digit = a % 10 * b % 10;\n  // the number of digits of product\
    \ is number of digits of a + number of digits of b\n  long product_num_digits\
    \ = log10(a) + log10(b) + 1;\n  long product = pow(10, product_num_digits - 1)\
    \ * product_unit_digit;\n  return product;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnci2xmpu: /tmp/tmpnci2xmpu.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // The longest long value is 9223372036854775807 (20 digits).\n  \
    \  // 922337203685477580\n    // 00000700000000000 = 5000000000000000000\n\n \
    \   // 999999999999999999\n    // 999999999999999999 = 9999999999999999981\n \
    \   // 9999999999999999981 = 999999999999999981\n    a %= 10;\n    b %= 10;\n\
    \    return a * b;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmisibx_u: /tmp/tmpmisibx_u.cpp:28: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return abs(a % 10 * b % 10);\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmplglmavxu: /tmp/tmplglmavxu.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long r;\n  std::stringstream ss;\n  ss << a << b;\n  ss >> r;\n  return\
    \ r % 10;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpg4u54wy7: /tmp/tmpg4u54wy7.cpp:20: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long prod = a*b;\n    prod = prod > 0 ? prod : prod*-1;\n    long\
    \ p = prod;\n    long lastD = prod % 10;\n    prod = prod / 10;\n    while(prod\
    \ > 0) {\n        lastD = prod % 10;\n        prod = prod / 10;\n    }\n    return\
    \ lastD;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqh277eis: /tmp/tmpqh277eis.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    return a%10*b%10;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjm8ytuwf: /tmp/tmpjm8ytuwf.cpp:17: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int a1 = abs(a%10);\n  int b1 = abs(b%10);\n  std::cout << a1 << \"\\\
    n\";\n  std::cout << b1 << \"\\n\";\n  return a1*b1;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: "8\n2\n9\n8\n0\n1\n4\n5\n6\n7\n7\n7\n0\n1\n0\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::string s = std::to_string(a);\n    long lastDigitA = std::stol(s.substr(s.size()\
    \ - 1));\n    s = std::to_string(b);\n    long lastDigitB = std::stol(s.substr(s.size()\
    \ - 1));\n    return lastDigitA * lastDigitB;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if(a < 0)\n        a = a * -1;\n    if(b < 0)\n        b = b * -1;\n\
    \    return (a % 10) * (b % 10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int as = std::to_string(a).length();\n  int bs = std::to_string(b).length();\n\
    \  long aa = std::to_string(a)[as-1] - '0';\n  long bb = std::to_string(b)[bs-1]\
    \ - '0';\n  long ans = aa * bb;\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (std::abs(a % 10) * std::abs(b % 10));\n}\nint main() {\n   \
    \ auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n \
    \   assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long tens_a = a / 10;\n    long units_a = a % 10;\n    long tens_b\
    \ = b / 10;\n    long units_b = b % 10;\n    return units_a * units_b;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6xu5717e: /tmp/tmp6xu5717e.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return a * b < 0 ? (a%10) * (b%10) : (a%10) * (b%10);\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6fw1m3nk: /tmp/tmp6fw1m3nk.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8r3on1bz: /tmp/tmp8r3on1bz.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code\n    assert(a>=0 && b>=0);\n    if(a>=10 || b>=10)\n\
    \    {\n        std::vector<long> v;\n        while(a!=0)\n        {\n       \
    \     v.push_back(a%10);\n            a/=10;\n        }\n        while(b!=0)\n\
    \        {\n            v.push_back(b%10);\n            b/=10;\n        }\n  \
    \      std::sort(v.begin(),v.end());\n        std::vector<long> w;\n        long\
    \ s=0;\n        for(int i=v.size()-1;i>=0;i--)\n        {\n            if(s==0)\n\
    \            {\n                w.push_back(v[i]);\n                s=v[i];\n\
    \            }\n            else\n            {\n                s=s*10+v[i];\n\
    \                w.push_back(s);\n            }\n        }\n        std::sort(w.begin(),w.end());\n\
    \        return w[0];\n    }\n    else\n    {\n        return a*b;\n    }\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0sgoh021: /tmp/tmp0sgoh021.cpp:53: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (long)a % 10 * b % 10;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_dd51te_: /tmp/tmp_dd51te_.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (abs(a)%10) * (abs(b)%10);\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long long A = a, B = b;\n  if (A < 0) A = -A;\n  if (B < 0) B = -B;\n\
    \  while (A > 9) A /= 10;\n  while (B > 9) B /= 10;\n  return A * B;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpanl5k2no: /tmp/tmpanl5k2no.cpp:21: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::cout << \"a: \" << a << \" b: \" << b << std::endl;\n    if (a\
    \ < 0) {\n        a = abs(a);\n    }\n    if (b < 0) {\n        b = abs(b);\n\
    \    }\n    int aLast = a % 10;\n    int bLast = b % 10;\n    std::cout << \"\
    last numbers \" << aLast << \" \" << bLast << std::endl;\n    return aLast * bLast;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: "a: 148 b: 412\nlast numbers 8 2\na: 19 b: 28\nlast numbers 9 8\na: 2020\
    \ b: 1851\nlast numbers 0 1\na: 14 b: -15\nlast numbers 4 5\na: 76 b: 67\nlast\
    \ numbers 6 7\na: 17 b: 27\nlast numbers 7 7\na: 0 b: 1\nlast numbers 0 1\na:\
    \ 0 b: 0\nlast numbers 0 0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmtoz6yud: /tmp/tmpmtoz6yud.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwcbey500: /tmp/tmpwcbey500.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int unitA = a % 10;\n    int unitB = b % 10;\n    return unitA * unitB;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpeeh2ze06: /tmp/tmpeeh2ze06.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpn70k9jgb: /tmp/tmpn70k9jgb.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long aUnit = a % 10;\n    long bUnit = b % 10;\n    long result =\
    \ aUnit * bUnit;\n    return result;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0_uilxjz: /tmp/tmp0_uilxjz.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4y3z8zls: /tmp/tmp4y3z8zls.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpc9j4q8xi: /tmp/tmpc9j4q8xi.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  assert(a>=0 && b>=0);\n  return (a%10)*(b%10);\n}\nint main() {\n  \
    \  auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpkl0hah0g: /tmp/tmpkl0hah0g.cpp:12: long int multiply(long int, long\
    \ int): Assertion `a>=0 && b>=0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a*b)%10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvuohf6qw: /tmp/tmpvuohf6qw.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp2byqbdqu: /tmp/tmp2byqbdqu.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int a1 = a%10;\n  int b1 = b%10;\n  return a1*b1;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpr93ui1ug: /tmp/tmpr93ui1ug.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmphlk7w_fy: /tmp/tmphlk7w_fy.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long result = 0;\n  long a_mod_10 = 0;\n  long b_mod_10 = 0;\n  if (a\
    \ < 0) {\n    a_mod_10 = std::abs(a) % 10;\n  } else {\n    a_mod_10 = a % 10;\n\
    \  }\n  if (b < 0) {\n    b_mod_10 = std::abs(b) % 10;\n  } else {\n    b_mod_10\
    \ = b % 10;\n  }\n  result = a_mod_10 * b_mod_10;\n  return result;\n}\nint main()\
    \ {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tint c = 1;\n\tint n;\n\t// if(a<0&&b<0)\n\t// \tn = -1;\n\t// else if(a<0||b<0)\n\
    \t// \tn = 1;\n\t// else\n\t// \tn = 1;\n\t// std::cout<<\"a = \"<<a<<\"b = \"\
    <<b<<\"\\n\";\n\t// std::cout<<\"a = \"<<a<<\"b = \"<<b<<\"\\n\";\n\ta = abs(a);\n\
    \tb = abs(b);\n\tstd::cout<<\"a = \"<<a<<\"b = \"<<b<<\"\\n\";\n\tif(a==0&&b==0)\n\
    \t\treturn c;\n\tif(a==0)\n\t\treturn (b%10);\n\tif(b==0)\n\t\treturn (a%10);\n\
    \treturn ((a%10)*(b%10));\n}\nint main() {\n    auto candidate = multiply;\n \
    \   assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: "a = 148b = 412\na = 19b = 28\na = 2020b = 1851\na = 14b = 15\na = 76b =\
    \ 67\na = 17b = 27\na = 0b = 1\n"
  stderr: "tmp1q496e_c: /tmp/tmp1q496e_c.cpp:41: int main(): Assertion `candidate((0),\
    \ (1)) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10) * (b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpe0kb2m86: /tmp/tmpe0kb2m86.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // your code here\n  long result = 1;\n  while(a > 0){\n    long temp\
    \ = a % 10;\n    if(temp != 0){\n      result *= temp;\n    }\n    a /= 10;\n\
    \  }\n  while(b > 0){\n    long temp = b % 10;\n    if(temp != 0){\n      result\
    \ *= temp;\n    }\n    b /= 10;\n  }\n  return result % 10;\n}\nint main() {\n\
    \    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n\
    \    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5_rgqzyj: /tmp/tmp5_rgqzyj.cpp:32: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long s = a*b;\n    long mult = (s%10)*(s/10%10);\n    return mult;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvd8lishn: /tmp/tmpvd8lishn.cpp:18: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\treturn (a%10) * (b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyw_83fgm: /tmp/tmpyw_83fgm.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (abs(a)%10)*(abs(b)%10);\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpkc4z5puu: /tmp/tmpkc4z5puu.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n    b = -b;\n  }\n \
    \ return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n   \
    \ assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) ==\
    \ (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    if (a < 0) a = -a;\n    if (b < 0) b = -b;\n    return (a % 10) *\
    \ (b % 10);\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10) * (b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7atnc4m3: /tmp/tmp7atnc4m3.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int a1 = a % 10;\n  int b1 = b % 10;\n  if(a1 < 0)\n    a1 *= -1;\n\
    \  if(b1 < 0)\n    b1 *= -1;\n  return a1 * b1;\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::stringstream strA, strB;\n    strA << a;\n    strB << b;\n  \
    \  long unitDigitA = std::stol(strA.str().substr(strA.str().size() - 1));\n  \
    \  long unitDigitB = std::stol(strB.str().substr(strB.str().size() - 1));\n  \
    \  long ans = unitDigitA * unitDigitB;\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n \
    \   assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851))\
    \ == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return a * b % 10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpumfdl9u0: /tmp/tmpumfdl9u0.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int rem1,rem2;\n    rem1=a%10;\n    rem2=b%10;\n    return (rem1*rem2);\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpy84fbuyr: /tmp/tmpy84fbuyr.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return ((a * b) % 9);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzg_v7uub: /tmp/tmpzg_v7uub.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\treturn (abs(a) % 10) * (abs(b) % 10);\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // take the last digit of each number\n    return (a % 10) * (b %\
    \ 10);\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpb5d66v3v: /tmp/tmpb5d66v3v.cpp:20: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Write your code here\n  long unitDigitOfA = a % 10;\n  long unitDigitOfB\
    \ = b % 10;\n  long result = unitDigitOfA * unitDigitOfB;\n  return result;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpkaz3s0f0: /tmp/tmpkaz3s0f0.cpp:23: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return a * b % 10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcl0fs4_k: /tmp/tmpcl0fs4_k.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10) * (b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnlnpi4zw: /tmp/tmpnlnpi4zw.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return abs(a % 10 * b % 10);\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp2jaesubk: /tmp/tmp2jaesubk.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long temp;\n    if(a<0)\n    {\n        a=abs(a);\n        temp=a%10;\n\
    \        return (b%10)*temp;\n    }\n    if(b<0)\n    {\n        b=abs(b);\n \
    \       temp=b%10;\n        return (a%10)*temp;\n    }\n    if(a<10)\n    {\n\
    \        return a*(b%10);\n    }\n    if(b<10)\n    {\n        return b*(a%10);\n\
    \    }\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::string n1 = std::to_string(a);\n    std::string n2 = std::to_string(b);\n\
    \    std::string ans = std::to_string(stoi(n1.substr(n1.size()-1)) * stoi(n2.substr(n2.size()-1)));\n\
    \    return stoi(ans.substr(ans.size()-1));\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxmysdv96: /tmp/tmpxmysdv96.cpp:19: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Your code here\n  int tens_place = 1;\n  int digit_a = 0;\n  int\
    \ digit_b = 0;\n  int product = 0;\n  while(a || b) {\n    digit_a = a % 10;\n\
    \    digit_b = b % 10;\n    product += (digit_a * digit_b) * tens_place;\n   \
    \ tens_place *= 10;\n    a /= 10;\n    b /= 10;\n  }\n  return product;\n}\nint\
    \ main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpix6ce1ec: /tmp/tmpix6ce1ec.cpp:29: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n\tstd::cout << std::abs(a) % 10 * std::abs(b) % 10 << \"\\n\";\n\treturn\
    \ std::abs(a) % 10 * std::abs(b) % 10;\n}\nint main() {\n    auto candidate =\
    \ multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: "6\n"
  stderr: "tmp2bb395az: /tmp/tmp2bb395az.cpp:17: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Do something\n    string num1 = to_string(a);\n    string num2\
    \ = to_string(b);\n    return abs(num1[num1.length()-1] - '0') * abs(num2[num2.length()-1]\
    \ - '0');\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptzes1hvp.cpp: In function \u2018long int multiply(long int, long\
    \ int)\u2019:\n/tmp/tmptzes1hvp.cpp:13:5: error: \u2018string\u2019 was not declared\
    \ in this scope; did you mean \u2018std::string\u2019?\n   13 |     string num1\
    \ = to_string(a);\n      |     ^~~~~~\n      |     std::string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptzes1hvp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmptzes1hvp.cpp:14:11:\
    \ error: expected \u2018;\u2019 before \u2018num2\u2019\n   14 |     string num2\
    \ = to_string(b);\n      |           ^~~~~\n      |           ;\n/tmp/tmptzes1hvp.cpp:15:16:\
    \ error: \u2018num1\u2019 was not declared in this scope\n   15 |     return abs(num1[num1.length()-1]\
    \ - '0') * abs(num2[num2.length()-1] - '0');\n      |                ^~~~\n/tmp/tmptzes1hvp.cpp:15:51:\
    \ error: \u2018num2\u2019 was not declared in this scope\n   15 |     return abs(num1[num1.length()-1]\
    \ - '0') * abs(num2[num2.length()-1] - '0');\n      |                        \
    \                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp83i3z69z: /tmp/tmp83i3z69z.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long ret = 1;\n    while(a > 0){\n        ret *= a % 10;\n       \
    \ a /= 10;\n    }\n    while(b > 0){\n        ret *= b % 10;\n        b /= 10;\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = multiply;\n   \
    \ assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) ==\
    \ (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpkl5fu3ox: /tmp/tmpkl5fu3ox.cpp:25: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    int a_unit = a % 10;\n    int b_unit = b % 10;\n    return a_unit\
    \ * b_unit;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdgey7sl5: /tmp/tmpdgey7sl5.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int i=0;\n  std::cout<<\"a: \"<<a<<\" b: \"<<b<<std::endl;\n  while(a<0){\n\
    \    a = a * -1;\n    i++;\n  }\n  int j=0;\n  while(b<0){\n    b = b * -1;\n\
    \    j++;\n  }\n  if((i+j)%2 != 0){\n    return (a%10)*(b%10)*-1;\n  }\n  return\
    \ (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: "a: 148 b: 412\na: 19 b: 28\na: 2020 b: 1851\na: 14 b: -15\n"
  stderr: "tmpei0uql15: /tmp/tmpei0uql15.cpp:33: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long c = a;\n  long d = b;\n  int n = 1;\n  int m = 1;\n  while(c /\
    \ 10 > 0) {\n    c = c / 10;\n    n++;\n  }\n  while(d / 10 > 0) {\n    d = d\
    \ / 10;\n    m++;\n  }\n  c = a;\n  d = b;\n  c = c % 10;\n  d = d % 10;\n  return\
    \ c * d;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdvcut4io: /tmp/tmpdvcut4io.cpp:35: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    long minuendo, sustraendo, cociente, residuo;\n\
    \    residuo = -1;\n    cociente = -1;\n    if (a < 0) {\n        sustraendo =\
    \ -a;\n    } else {\n        sustraendo = a;\n    }\n    if (b < 0) {\n      \
    \  minuendo = -b;\n    } else {\n        minuendo = b;\n    }\n    if (sustraendo\
    \ < 10) {\n        if (minuendo < 10) {\n            return sustraendo * minuendo;\n\
    \        } else {\n            while (minuendo >= 10) {\n                minuendo\
    \ /= 10;\n            }\n            return sustraendo * minuendo;\n        }\n\
    \    } else {\n        while (sustraendo >= 10) {\n            sustraendo /= 10;\n\
    \        }\n        if (minuendo < 10) {\n            return sustraendo * minuendo;\n\
    \        } else {\n            while (minuendo >= 10) {\n                minuendo\
    \ /= 10;\n            }\n            return sustraendo * minuendo;\n        }\n\
    \    }\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsn_yg622: /tmp/tmpsn_yg622.cpp:51: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // your code here\n    return a<0?-a:a % 10 * (b<0?-b:b % 10);\n}\n\
    int main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpowc0yend: /tmp/tmpowc0yend.cpp:20: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10)*(b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpc4s85l9v: /tmp/tmpc4s85l9v.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int num1 = a%10;\n  int num2 = b%10;\n  int product = num1*num2;\n \
    \ return product;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmprh3iat7_: /tmp/tmprh3iat7_.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    //string a_str = std::to_string(a);\n    //string b_str = std::to_string(b);\n\
    \    //char *ca = (char *)malloc(sizeof(char) * 2);\n    //ca[0] = a_str[a_str.length()\
    \ - 1];\n    //ca[1] = '\\0';\n    //char *cb = (char *)malloc(sizeof(char) *\
    \ 2);\n    //cb[0] = b_str[b_str.length() - 1];\n    //cb[1] = '\\0';\n    //int\
    \ n1 = atoi(ca);\n    //int n2 = atoi(cb);\n    int n1 = a % 10;\n    int n2 =\
    \ b % 10;\n    return n1 * n2;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyz0hsozw: /tmp/tmpyz0hsozw.cpp:31: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return a%10 * b%10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9vs3dsax: /tmp/tmp9vs3dsax.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  long num1 = a % 10;\n  long num2 = b % 10;\n  long product = num1 *\
    \ num2;\n  return product;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqv8fz0v2: /tmp/tmpqv8fz0v2.cpp:22: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  return (a%10) * (b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_o5n0az_: /tmp/tmp_o5n0az_.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  int i = a % 10;\n  int j = b % 10;\n  if(i<0) i*=-1;\n  if(j<0) j*=-1;\n\
    \  return i*j;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long int a1, b1;\n    if(a<0)\n    {\n        a=-a;\n    }\n    if(b<0)\n\
    \    {\n        b=-b;\n    }\n    a1=a%10;\n    b1=b%10;\n    return a1*b1;\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    long a_last = a % 10;\n    long b_last = b % 10;\n    return a_last\
    \ * b_last;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmp0skmc0: /tmp/tmpmp0skmc0.cpp:21: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    // Your code here\n    return abs(a*b)%10;\n}\nint main() {\n    auto\
    \ candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwg6mevud: /tmp/tmpwg6mevud.cpp:17: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return ((a % 10) * (b % 10));\n}\nint main() {\n    auto candidate\
    \ = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19),\
    \ (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmphi60eiem: /tmp/tmphi60eiem.cpp:19: int main(): Assertion `candidate((14),\
    \ (-15)) == (20)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n  // Your code goes here.\n  a = abs(a);\n  b = abs(b);\n  return ((a%10)*(b%10));\n\
    }\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412))\
    \ == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return abs(a%10 * b%10);\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpw0d8jv2e: /tmp/tmpw0d8jv2e.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    return a * b % 10;\n}\nint main() {\n    auto candidate = multiply;\n\
    \    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28))\
    \ == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14),\
    \ (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17),\
    \ (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0),\
    \ (0)) == (0));\n}\n"
  stdout: ''
  stderr: "tmpik7ovgmu: /tmp/tmpik7ovgmu.cpp:16: int main(): Assertion `candidate((148),\
    \ (412)) == (16)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function\
    \ that takes two integers and returns \n// the product of their unit digits.\n\
    // Assume the input is always valid.\n// Examples:\n// multiply(148, 412) should\
    \ return 16.\n// multiply(19, 28) should return 72.\n// multiply(2020, 1851) should\
    \ return 0.\n// multiply(14,-15) should return 20.\nlong multiply(long a, long\
    \ b) {\n    std::ostringstream iss;\n    iss << a;\n    std::string numa = iss.str();\n\
    \    std::ostringstream oss;\n    oss << b;\n    std::string numb = oss.str();\n\
    \    int sum = (numa[numa.length()-1] - '0') * (numb[numb.length()-1] - '0');\n\
    \    return sum;\n}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148),\
    \ (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020),\
    \ (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76),\
    \ (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0),\
    \ (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
