name: HumanEval_16_count_distinct_characters
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  // #TODO: Write\
    \ - Your - Code\n  std::unordered_set<char> uniq(string.begin(), string.end());\n\
    \  return uniq.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp47qny0jb: /tmp/tmp47qny0jb.cpp:17: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\t\n\t// Checks to\
    \ see if the string is empty\n\tif (string.empty()) {\n\t\treturn 0;\n\t}\n\t\n\
    \t// Sets the count to 1 so that the first character will automatically be counted,\
    \ regardless of case\n\tlong count = 1;\n\t\n\t// Iterates through the string,\
    \ checking to see if a character at the index is different from the character\
    \ before it\n\tfor (long i = 1; i < string.length(); i++) {\n\t\tif (tolower(string[i])\
    \ != tolower(string[i - 1])) {\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpy21or87x: /tmp/tmpy21or87x.cpp:31: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for(int i = 0; i < string.length(); i++) {\n        int n = 0;\n        for(int\
    \ j = 0; j < string.length(); j++) {\n            if(tolower(string[i]) == tolower(string[j]))\
    \ {\n                n++;\n            }\n        }\n        if(n == 1) {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nint main() {\n  \
    \  auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpacfthebj: /tmp/tmpacfthebj.cpp:27: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int check = 0;\n\
    \    long result = 0;\n    //throw \"Not implemented yet\";\n    for(int i = 0;\
    \ i < string.length(); i++){\n        int val = (int)string[i];\n        if(val\
    \ >= 97 && val <= 122){\n            val = val - 32;\n        }\n        if((check\
    \ & (1 << val)) == 0){\n            result++;\n            check = check | (1\
    \ << val);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  // TODO: Define\
    \ the solution here.\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  set<char> characterSet;\n  for (auto i = 0; i < string.length();\
    \ i++) {\n    characterSet.insert(string[i]);\n  }\n  return characterSet.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "/tmp/tmput998y21.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmput998y21.cpp:11:3: error: \u2018set\u2019 was not declared in this\
    \ scope; did you mean \u2018std::set\u2019?\n   11 |   set<char> characterSet;\n\
    \      |   ^~~\n      |   std::set\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/set:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:87,\n\
    \                 from /tmp/tmput998y21.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_set.h:94:11:\
    \ note: \u2018std::set\u2019 declared here\n   94 |     class set\n      |   \
    \        ^~~\n/tmp/tmput998y21.cpp:11:7: error: expected primary-expression before\
    \ \u2018char\u2019\n   11 |   set<char> characterSet;\n      |       ^~~~\n/tmp/tmput998y21.cpp:13:5:\
    \ error: \u2018characterSet\u2019 was not declared in this scope\n   13 |    \
    \ characterSet.insert(string[i]);\n      |     ^~~~~~~~~~~~\n/tmp/tmput998y21.cpp:15:10:\
    \ error: \u2018characterSet\u2019 was not declared in this scope\n   15 |   return\
    \ characterSet.size();\n      |          ^~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // Loop over the\
    \ string and use a set to keep track of unique characters\n    std::set<char>\
    \ unique_chars;\n    for (int i = 0; i < string.length(); i++) {\n        unique_chars.insert(string[i]);\n\
    \    }\n    return unique_chars.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpta96luix: /tmp/tmpta96luix.cpp:20: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // Initialize\
    \ the number of distinct characters\n    long count = 0;\n    // For each character\
    \ in the string\n    for (int i = 0; i < string.length(); i++) {\n        // For\
    \ each character up to the current character\n        bool flag = true;\n    \
    \    for (int j = 0; j < i; j++) {\n            // If they are the same\n    \
    \        if (string[i] == string[j]) {\n                // Flag that the current\
    \ character is not distinct\n                flag = false;\n                break;\n\
    \            }\n        }\n        // If it is still flagged as a distinct character\n\
    \        if (flag) {\n            // Increase the number of distinct characters\n\
    \            count++;\n        }\n    }\n    // Return the number of distinct\
    \ characters\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1ipwrd9r: /tmp/tmp1ipwrd9r.cpp:36: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tlong size = string.size();\n\
    \tstd::sort(string.begin(), string.end());\n\tint count = 1;\n\tfor (int i = 1;\
    \ i < size; i++) {\n\t\tif (string[i] != string[i - 1])\n\t\t\tcount++;\n\t}\n\
    \treturn count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1fyb26f5: /tmp/tmp1fyb26f5.cpp:20: int main(): Assertion `candidate((\"\
    \")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    //delete this\
    \ part and enter your code here\n    std::set<char> s;\n    for(auto i:string)\n\
    \        s.insert(tolower(i));\n    return s.size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tlong count=0;\n\t\
    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\tstd::string\
    \ string3;\n\tfor(int i=0;i<string.length();i++)\n\t{\n\t\tif(string[i]!=' ')\n\
    \t\t{\n\t\t\tstring3.push_back(string[i]);\n\t\t}\n\t}\n\tstd::sort(string3.begin(),string3.end());\n\
    \tfor(int i=0;i<string3.length();i++)\n\t{\n\t\tcount++;\n\t\tif(string3[i]==string3[i+1])\n\
    \t\t{\n\t\t\tcount--;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmps2et33oo: /tmp/tmps2et33oo.cpp:36: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  long  count = 0;\n\
    \  std::set<char> duplicates;\n  for(int i = 0; i < string.length(); i++) {\n\
    \    if(duplicates.find(tolower(string[i])) == duplicates.end()) {\n      duplicates.insert(tolower(string[i]));\n\
    \      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ characters_set;\n    for (char character : string) {\n        characters_set.insert(std::tolower(character));\n\
    \    }\n    return characters_set.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  long result = 0;\n\
    \  for (int i = 0; i < string.length(); i++) {\n    int exist = 0;\n    for (int\
    \ j = 0; j < i; j++) {\n      if (string[i] == string[j]) {\n        exist = 1;\n\
    \        break;\n      }\n    }\n    if (exist == 0) {\n      result++;\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp3ycaigk_: /tmp/tmp3ycaigk_.cpp:28: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int letters[26]\
    \ = {0};\n    long count = 0;\n    for (char& c : string) {\n        if (!std::isalpha(c))\
    \ continue;\n        c = std::tolower(c);\n        if (letters[c - 'a']++ == 0)\
    \ count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpswfwf63s: /tmp/tmpswfwf63s.cpp:24: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::set<char> set;\n\
    \tfor (size_t i = 0; i < string.size(); i++) {\n\t\tchar c = string[i];\n\t\t\
    set.insert(tolower(c));\n\t}\n\treturn set.size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ distinct_chars;\n    for (char character : string) {\n        distinct_chars.insert(std::tolower(character));\n\
    \    }\n    return distinct_chars.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tlong length_of_string\
    \ = string.length();\n\tstd::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n\tstd::set<char> s(string.begin(), string.end());\n\tlong count\
    \ = s.size();\n\treturn count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    long count = 0;\n    bool visited[256]\
    \ = {0};\n    for(int i = 0; i < string.length(); i++) {\n        if(!visited[string[i]])\
    \ {\n            visited[string[i]] = true;\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    std::string temp = \"\";\n    for(int i = 0; i < string.length(); i++) {\n\
    \        std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \        temp += string[i];\n    }\n    std::stringstream ss(temp);\n    while(ss.good())\
    \ {\n        std::string substr;\n        getline(ss, substr, ',');\n        count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5ycmrp9s: /tmp/tmp5ycmrp9s.cpp:25: int main(): Assertion `candidate((\"\
    \")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // create a map\
    \ of character and a counter for its appearances\n    std::map<char, long> map;\n\
    \    for (char &c : string) {\n        char lower = tolower(c);\n        map[lower]\
    \ += 1;\n    }\n    // return size of map\n    return map.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  long total=0;\n\
    \  int n=string.length();\n  char c=string[0];\n  for(int i=0;i<n;i++){\n    if(string[i]!=c){\n\
    \      total++;\n      c=string[i];\n    }\n  }\n  return total+1;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpmcprldqe: /tmp/tmpmcprldqe.cpp:22: int main(): Assertion `candidate((\"\
    \")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n   return std::set<char>(string.begin(),\
    \ string.end()).size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfhz20tka: /tmp/tmpfhz20tka.cpp:15: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  std::set<char> s(string.begin(),\
    \ string.end());\n  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  std::set<char> set;\n\
    \  long len = string.length();\n  for (long i = 0; i < len; i++) {\n    set.insert(tolower(string[i]));\n\
    \  }\n  return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    char chars_in_string\
    \ [string.length()];\n    int count = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        bool repeat = false;\n        for (int j = 0; j < string.length();\
    \ j++) {\n            if (string[i] == chars_in_string[j]) {\n               \
    \ repeat = true;\n            }\n        }\n        if (!repeat) {\n         \
    \   chars_in_string[count] = string[i];\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpplgt0yrz: /tmp/tmpplgt0yrz.cpp:29: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ hash_set;\n    for (char c : string) {\n        hash_set.insert(std::tolower(c));\n\
    \    }\n    return hash_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    unordered_set<char>\
    \ char_set;\n    for (auto c : string) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            char_set.insert(c);\n        } else if (c >= 'A' && c <= 'Z') {\n\
    \            char_set.insert(c);\n        }\n    }\n    return char_set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjtcjczyi.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpjtcjczyi.cpp:9:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n    9 |     unordered_set<char>\
    \ char_set;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpjtcjczyi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpjtcjczyi.cpp:9:19: error: expected primary-expression\
    \ before \u2018char\u2019\n    9 |     unordered_set<char> char_set;\n      |\
    \                   ^~~~\n/tmp/tmpjtcjczyi.cpp:12:13: error: \u2018char_set\u2019\
    \ was not declared in this scope\n   12 |             char_set.insert(c);\n  \
    \    |             ^~~~~~~~\n/tmp/tmpjtcjczyi.cpp:14:13: error: \u2018char_set\u2019\
    \ was not declared in this scope\n   14 |             char_set.insert(c);\n  \
    \    |             ^~~~~~~~\n/tmp/tmpjtcjczyi.cpp:17:12: error: \u2018char_set\u2019\
    \ was not declared in this scope\n   17 |     return char_set.size();\n      |\
    \            ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  long count = 0;\n\
    \  int i = 0;\n  while(string[i] != '\\0') {\n    char c = string[i];\n    int\
    \ j = 0;\n    while(string[j] != '\\0') {\n      if(tolower(string[j]) == tolower(c))\
    \ {\n        string[j] = '0';\n      }\n      j++;\n    }\n    if(string[i] !=\
    \ '0') {\n      count++;\n    }\n    i++;\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpivg56omc: /tmp/tmpivg56omc.cpp:30: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::set<char> chars;\n\
    \tint len = string.length();\n\tfor (int i = 0; i < len; i++) {\n\t\tif (!chars.count(tolower(string[i])))\n\
    \t\t\tchars.insert(tolower(string[i]));\n\t}\n\treturn chars.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tset<char> cset;\n\
    \tfor (char c : string)\n\t\tcset.insert(tolower(c));\n\treturn cset.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy5edi_1p.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpy5edi_1p.cpp:9:2: error: \u2018set\u2019 was not declared in this scope;\
    \ did you mean \u2018std::set\u2019?\n    9 |  set<char> cset;\n      |  ^~~\n\
    \      |  std::set\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/set:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpy5edi_1p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_set.h:94:11:\
    \ note: \u2018std::set\u2019 declared here\n   94 |     class set\n      |   \
    \        ^~~\n/tmp/tmpy5edi_1p.cpp:9:6: error: expected primary-expression before\
    \ \u2018char\u2019\n    9 |  set<char> cset;\n      |      ^~~~\n/tmp/tmpy5edi_1p.cpp:11:3:\
    \ error: \u2018cset\u2019 was not declared in this scope\n   11 |   cset.insert(tolower(c));\n\
    \      |   ^~~~\n/tmp/tmpy5edi_1p.cpp:12:9: error: \u2018cset\u2019 was not declared\
    \ in this scope\n   12 |  return cset.size();\n      |         ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int hash_table[26]\
    \ = {0};\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            hash_table[string[i] - 'a']++;\n\
    \        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            hash_table[string[i]\
    \ - 'A']++;\n        }\n    }\n    long distinct_characters = 0;\n    for (int\
    \ i = 0; i < 26; i++) {\n        if (hash_table[i] > 0) {\n            distinct_characters++;\n\
    \        }\n    }\n    return distinct_characters;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmplsj0j18d: /tmp/tmplsj0j18d.cpp:31: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  /* TODO: Complete\
    \ this function */\n  unordered_set<char> s;\n  for(char x: string)\n  {\n   \
    \ s.insert(tolower(x));\n  }\n  return s.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpnm9xg_yw.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpnm9xg_yw.cpp:10:3: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   10 |   unordered_set<char>\
    \ s;\n      |   ^~~~~~~~~~~~~\n      |   std::unordered_set\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpnm9xg_yw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpnm9xg_yw.cpp:10:17: error: expected\
    \ primary-expression before \u2018char\u2019\n   10 |   unordered_set<char> s;\n\
    \      |                 ^~~~\n/tmp/tmpnm9xg_yw.cpp:13:5: error: \u2018s\u2019\
    \ was not declared in this scope\n   13 |     s.insert(tolower(x));\n      | \
    \    ^\n/tmp/tmpnm9xg_yw.cpp:15:10: error: \u2018s\u2019 was not declared in this\
    \ scope\n   15 |   return s.size();\n      |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  // your code goes\
    \ here\n  unordered_set<char>hash_set;\n  for(int i=0;i<string.length();i++)\n\
    \  {\n    hash_set.insert(tolower(string[i]));\n  }\n  return hash_set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk31mohlq.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpk31mohlq.cpp:10:3: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   10 |   unordered_set<char>hash_set;\n\
    \      |   ^~~~~~~~~~~~~\n      |   std::unordered_set\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n    \
    \             from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpk31mohlq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpk31mohlq.cpp:10:17: error: expected\
    \ primary-expression before \u2018char\u2019\n   10 |   unordered_set<char>hash_set;\n\
    \      |                 ^~~~\n/tmp/tmpk31mohlq.cpp:13:5: error: \u2018hash_set\u2019\
    \ was not declared in this scope\n   13 |     hash_set.insert(tolower(string[i]));\n\
    \      |     ^~~~~~~~\n/tmp/tmpk31mohlq.cpp:15:10: error: \u2018hash_set\u2019\
    \ was not declared in this scope\n   15 |   return hash_set.size();\n      | \
    \         ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    string = boost::to_lower_copy(string);\n\
    \    set<char> unique_chars(string.begin(), string.end());\n    return unique_chars.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb3vwwroa.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpb3vwwroa.cpp:9:14: error: \u2018boost\u2019 has not been declared\n\
    \    9 |     string = boost::to_lower_copy(string);\n      |              ^~~~~\n\
    /tmp/tmpb3vwwroa.cpp:10:5: error: \u2018set\u2019 was not declared in this scope;\
    \ did you mean \u2018std::set\u2019?\n   10 |     set<char> unique_chars(string.begin(),\
    \ string.end());\n      |     ^~~\n      |     std::set\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/set:61,\n              \
    \   from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpb3vwwroa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_set.h:94:11:\
    \ note: \u2018std::set\u2019 declared here\n   94 |     class set\n      |   \
    \        ^~~\n/tmp/tmpb3vwwroa.cpp:10:9: error: expected primary-expression before\
    \ \u2018char\u2019\n   10 |     set<char> unique_chars(string.begin(), string.end());\n\
    \      |         ^~~~\n/tmp/tmpb3vwwroa.cpp:11:12: error: \u2018unique_chars\u2019\
    \ was not declared in this scope\n   11 |     return unique_chars.size();\n  \
    \    |            ^~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::vector<int>\
    \ hash(128, 0);\n    for (char c : string) {\n        hash[tolower(c)]++;\n  \
    \  }\n    long count = 0;\n    for (auto e : hash) {\n        if (e > 0) {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n     // Write your\
    \ code here\n     int count=0;\n     for(int i=0;i<string.length();i++)\n    \
    \ {\n         for(int j=i+1;j<string.length();j++)\n         {\n             if(string[i]==string[j])\n\
    \             {\n                 count++;\n             }\n         }\n     }\n\
    \     int a=string.length()-count;\n     return a;\n\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpghi7hjtl: /tmp/tmpghi7hjtl.cpp:29: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::set<char> charset;\n\
    \tfor (const char& c : string)\n\t\tcharset.insert(tolower(c));\n\treturn charset.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\t// your code here\n\
    \tset<char> S;\n\tfor (auto i = string.begin(); i != string.end(); i++) {\n\t\t\
    S.insert(tolower(*i));\n\t}\n\treturn S.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp5crm4xwg.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmp5crm4xwg.cpp:10:2: error: \u2018set\u2019 was not declared in this\
    \ scope; did you mean \u2018std::set\u2019?\n   10 |  set<char> S;\n      |  ^~~\n\
    \      |  std::set\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/set:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp5crm4xwg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_set.h:94:11:\
    \ note: \u2018std::set\u2019 declared here\n   94 |     class set\n      |   \
    \        ^~~\n/tmp/tmp5crm4xwg.cpp:10:6: error: expected primary-expression before\
    \ \u2018char\u2019\n   10 |  set<char> S;\n      |      ^~~~\n/tmp/tmp5crm4xwg.cpp:12:3:\
    \ error: \u2018S\u2019 was not declared in this scope\n   12 |   S.insert(tolower(*i));\n\
    \      |   ^\n/tmp/tmp5crm4xwg.cpp:14:9: error: \u2018S\u2019 was not declared\
    \ in this scope\n   14 |  return S.size();\n      |         ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> set1(string.begin(),\
    \ string.end());\n    return set1.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count=0;\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        char c = string[i];\n\
    \        for(int j=0;j<i;j++)\n        {\n            if(c==string[j])\n     \
    \       {\n                count++;\n                break;\n            }\n \
    \       }\n    }\n    return string.length()-count;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp3xpmca3q: /tmp/tmp3xpmca3q.cpp:28: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count=0;\n\
    \    char arr[256]={0};\n    for(long i=0;i<string.length();i++){\n        arr[tolower(string[i])]++;\n\
    \    }\n    for(long i=0;i<256;i++){\n        if(arr[i]>0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // Write your\
    \ solution here\n    int n = string.length();\n    int count = 0;\n    int visited[256]\
    \ = {0};\n    for(int i = 0; i < n; i++){\n      if(visited[string[i]] == 0){\n\
    \        count++;\n        visited[string[i]] = 1;\n      }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpcbna9rxt: /tmp/tmpcbna9rxt.cpp:25: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<std::string>\
    \ c;\n    for(unsigned int i=0;i<string.length();i++){\n        std::string s(1,string[i]);\n\
    \        c.insert(s);\n    }\n    return c.size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpgit58kh4: /tmp/tmpgit58kh4.cpp:20: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long length =\
    \ string.length();\n    for (int i = 0; i < length; i++) {\n        string[i]\
    \ = tolower(string[i]);\n    }\n    std::set<char> character_set;\n    for (int\
    \ i = 0; i < length; i++) {\n        character_set.insert(string[i]);\n    }\n\
    \    long distinct_characters = character_set.size();\n    return distinct_characters;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tlong count = 0;\n\
    \tfor (long i = 0; i < string.length(); i++) {\n\t\tif (i == 0) {\n\t\t\tcount++;\n\
    \t\t}\n\t\telse {\n\t\t\tbool flag = true;\n\t\t\tfor (long j = 0; j < i; j++)\
    \ {\n\t\t\t\tif (string[i] == string[j]) {\n\t\t\t\t\tflag = false;\n\t\t\t\t\t\
    break;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp2dmkewpb: /tmp/tmp2dmkewpb.cpp:33: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  std::set<char> char_set;\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    char_set.insert(string[i]);\n \
    \ }\n  return char_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // replace the\
    \ code below with your own code\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp0vgudqsa: /tmp/tmp0vgudqsa.cpp:15: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    return std::set<char>(string.begin(),\
    \ string.end()).size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp2ib44tbd: /tmp/tmp2ib44tbd.cpp:15: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long distinct_characters\
    \ = 0;\n    std::string::iterator it;\n    std::set<char> s;\n    for(it = string.begin();\
    \ it != string.end(); it++) {\n        s.insert(tolower(*it));\n    }\n    distinct_characters\
    \ = s.size();\n    return distinct_characters;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmphcqr70x3: /tmp/tmphcqr70x3.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> set(string.begin(),\
    \ string.end());\n    return set.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long distinct_chars\
    \ = 0;\n    for (char c = 'a'; c <= 'z'; c++) {\n        if (string.find(c) !=\
    \ std::string::npos)\n            distinct_chars++;\n    }\n    for (char c =\
    \ 'A'; c <= 'Z'; c++) {\n        if (string.find(c) != std::string::npos)\n  \
    \          distinct_chars++;\n    }\n    return distinct_chars;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmptg1xxd8a: /tmp/tmptg1xxd8a.cpp:24: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    // Type your code here\n    // convert all characters to lowercase and store\
    \ in str\n    string str=\"\";\n    int len = string.length();\n    for(int i=0;i<len;i++)\n\
    \    {\n        char c = string[i];\n        c = tolower(c);\n        str += c;\n\
    \    }\n    // sort the elements in str\n    sort(str.begin(),str.end());\n  \
    \  for(int i=0;i<len;i++)\n    {\n        // count distinct characters in str\n\
    \        if(str[i] != str[i+1])\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpaxrwta5a.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpaxrwta5a.cpp:12:11: error: expected \u2018;\u2019 before \u2018str\u2019\
    \n   12 |     string str=\"\";\n      |           ^~~~\n      |           ;\n\
    /tmp/tmpaxrwta5a.cpp:18:9: error: \u2018str\u2019 was not declared in this scope;\
    \ did you mean \u2018std\u2019?\n   18 |         str += c;\n      |         ^~~\n\
    \      |         std\n/tmp/tmpaxrwta5a.cpp:21:10: error: \u2018str\u2019 was not\
    \ declared in this scope; did you mean \u2018std\u2019?\n   21 |     sort(str.begin(),str.end());\n\
    \      |          ^~~\n      |          std\n/tmp/tmpaxrwta5a.cpp:21:5: error:\
    \ \u2018sort\u2019 was not declared in this scope; did you mean \u2018std::sort\u2019\
    ?\n   21 |     sort(str.begin(),str.end());\n      |     ^~~~\n      |     std::sort\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaxrwta5a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4848:5:\
    \ note: \u2018std::sort\u2019 declared here\n 4848 |     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last,\n      |     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\t\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmphayibaed: /tmp/tmphayibaed.cpp:13: int main(): Assertion `candidate((\"\
    \")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int i;\n    long\
    \ count = 0;\n    std::set<char> myset;\n    for(i=0; i<string.length(); i++)\n\
    \    {\n        myset.insert(string[i]);\n    }\n    return myset.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp6eby9z_r: /tmp/tmp6eby9z_r.cpp:22: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::vector<char>\
    \ v(string.begin(), string.end());\n\tstd::sort(v.begin(), v.end());\n\tv.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n\treturn v.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpnsk6v1h_: /tmp/tmpnsk6v1h_.cpp:18: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::set<char> charSet;\n\
    \tfor (char c : string)\n\t\tcharSet.insert(tolower(c));\n\treturn charSet.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  std::set<char> distinct_chars(string.begin(),\
    \ string.end());\n  return distinct_chars.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count=0;\n\
    \    long n=string.length();\n    for(long i=0;i<n;i++)\n    {\n        if(string[i]=='\
    \ ')\n        {\n            continue;\n        }\n        for(long j=i+1;j<n;j++)\n\
    \        {\n            if(string[i]==string[j])\n            {\n            \
    \    string[j]=' ';\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp4dd7za7x: /tmp/tmp4dd7za7x.cpp:32: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int res = 0;\n\
    \    int len = string.length();\n    int freq[256] = {0};\n    for(int i = 0;\
    \ i < len; i++) {\n        if(!freq[tolower(string[i])]) {\n            res++;\n\
    \            freq[tolower(string[i])]++;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::unordered_set<char>  myset;\n\
    \    for(char c : string) {\n        myset.insert(c);\n    }\n    return myset.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\t// YOUR CODE HERE\n\
    \tstd::set<char> unique_chars;\n\tfor (auto c : string) {\n\t\tunique_chars.insert(tolower(c));\n\
    \t}\n\treturn unique_chars.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // Your code here\n\
    \    long count = 0;\n    std::string unique;\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(unique.find(tolower(string[i])) == std::string::npos){\n \
    \           unique += tolower(string[i]);\n            count++;\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ stringSet;\n    for (char character : string) {\n        stringSet.insert(tolower(character));\n\
    \    }\n    return stringSet.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tint size=string.size();\n\
    \tint i=0;\n\tchar a[27]={'\\0'};\n\twhile(i<size)\n\t{\n\t\tint k=0;\n\t\tif(string[i]>=65\
    \ && string[i]<=90)\n\t\t{\n\t\t\tif(a[string[i]-64]=='\\0')\n\t\t\t{\n\t\t\t\t\
    a[string[i]-64]=string[i];\n\t\t\t}\n\t\t}\n\t\telse if(string[i]>=97 && string[i]<=122)\n\
    \t\t{\n\t\t\tif(a[string[i]-96]=='\\0')\n\t\t\t{\n\t\t\t\ta[string[i]-96]=string[i];\n\
    \t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tint count=0;\n\tfor(int i=0;i<26;i++)\n\t{\n\t\
    \tif(a[i]!='\\0')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp2scoi9l2: /tmp/tmp2scoi9l2.cpp:47: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ myset;\n    for(int i=0;i<string.length();i++){\n        myset.insert(tolower(string[i]));\n\
    \    }\n    return myset.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tlong distinct =\
    \ 0;\n\t// write your code here\n\tstd::set<char> chars;\n\tfor (char c : string)\
    \ {\n\t\tc = std::tolower(c);\n\t\tchars.insert(c);\n\t}\n\tdistinct = chars.size();\n\
    \treturn distinct;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n   std::unordered_set<char>\
    \ store;\n   for(int i=0;i<string.length();i++){\n       store.insert(string[i]);\n\
    \   }\n   return store.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpv06dlcfk: /tmp/tmpv06dlcfk.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::unordered_set<char>\
    \ char_set;\n\tfor (auto c : string) {\n\t\tchar_set.insert(std::tolower(c));\n\
    \t}\n\treturn char_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::sort(string.begin(), string.end());\n    for (auto i = 0; i < string.length();\
    \ i++) {\n        if (string[i] != string[i + 1])\n            count++;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long res = 0;\n\
    \    std::string lower_string = \"\";\n    for (int i = 0; i < string.length();\
    \ i++) {\n        lower_string += tolower(string[i]);\n    }\n    std::string\
    \ unique_characters = \"\";\n    for (int i = 0; i < lower_string.length(); i++)\
    \ {\n        if (unique_characters.find(lower_string[i]) == std::string::npos)\
    \ {\n            unique_characters += lower_string[i];\n            res++;\n \
    \       }\n    }\n    return res;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // Your code here\n\
    \t\n\tlong count = 0;\n\tstd::map<char, bool> map;\n\tfor(int i = 0; i < string.length();\
    \ i++)\n\t{\n\t\tif(map.find(string[i]) == map.end())\n\t\t{\n\t\t\tcount++;\n\
    \t\t\tmap[string[i]] = true;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n \
    \   auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpc4ucq_c0: /tmp/tmpc4ucq_c0.cpp:27: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    \n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\n    std::set<char> s;\n    for(auto\
    \ ele : string)\n        s.insert(ele);\n    return s.size();\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  std::set<char> unique_characters(string.begin(),\
    \ string.end());\n  return unique_characters.size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp4_3uyam3: /tmp/tmp4_3uyam3.cpp:16: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // iterate through\
    \ the string and store each character in a set\n    std::set<char> unique_chars;\n\
    \    for (auto c : string) {\n        unique_chars.insert(c);\n    }\n    return\
    \ unique_chars.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp05a5j0qs: /tmp/tmp05a5j0qs.cpp:20: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    set<char> unique_characters;\n\
    \    for (char c : string)\n        unique_characters.insert(tolower(c));\n  \
    \  return unique_characters.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpq5_72959.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpq5_72959.cpp:9:5: error: \u2018set\u2019 was not declared in this scope;\
    \ did you mean \u2018std::set\u2019?\n    9 |     set<char> unique_characters;\n\
    \      |     ^~~\n      |     std::set\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/set:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpq5_72959.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_set.h:94:11:\
    \ note: \u2018std::set\u2019 declared here\n   94 |     class set\n      |   \
    \        ^~~\n/tmp/tmpq5_72959.cpp:9:9: error: expected primary-expression before\
    \ \u2018char\u2019\n    9 |     set<char> unique_characters;\n      |        \
    \ ^~~~\n/tmp/tmpq5_72959.cpp:11:9: error: \u2018unique_characters\u2019 was not\
    \ declared in this scope\n   11 |         unique_characters.insert(tolower(c));\n\
    \      |         ^~~~~~~~~~~~~~~~~\n/tmp/tmpq5_72959.cpp:12:12: error: \u2018\
    unique_characters\u2019 was not declared in this scope\n   12 |     return unique_characters.size();\n\
    \      |            ^~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    std::set<char>::iterator it;\n    for(int i=0;i<string.length();i++){\n\
    \        set.insert(string[i]);\n    }\n    return set.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpj6yf913t: /tmp/tmpj6yf913t.cpp:20: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // Write your\
    \ code here\n    std::string str = \"\";\n    std::sort(string.begin(), string.end());\n\
    \    int count = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string[i]\
    \ == string[i+1]){\n            continue;\n        }\n        else{\n        \
    \    count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp8a1zb7b4: /tmp/tmp8a1zb7b4.cpp:27: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::sort(string.begin(), string.end());\n\
    \    string.erase(std::unique(string.begin(), string.end()), string.end());\n\
    \    return string.length();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set;\n    for (auto& ch : string) {\n        set.insert(tolower(ch));\n    }\n\
    \    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(),\n                   [](unsigned char c) { return\
    \ std::tolower(c); });\n    std::vector<char> vector(string.begin(), string.end());\n\
    \    std::sort(vector.begin(), vector.end());\n    auto last = std::unique(vector.begin(),\
    \ vector.end());\n    vector.erase(last, vector.end());\n    return vector.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  // for (long i =\
    \ 0; i < string.length(); i++) {\n  // \tstd::cout << string[i] << '\\n';\n  //\
    \ }\n  std::vector<char> distinct_characters;\n  for (long i = 0; i < string.length();\
    \ i++) {\n    if (std::find(distinct_characters.begin(), distinct_characters.end(),\
    \ string[i]) == distinct_characters.end()) {\n      distinct_characters.push_back(string[i]);\n\
    \    }\n  }\n  return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpifnamonn: /tmp/tmpifnamonn.cpp:24: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    std::unordered_set<char> uset;\n    for(auto ch : string) {\n        uset.insert(tolower(ch));\n\
    \    }\n    return uset.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long distinct_count=0;\n\
    \    std::set<char> char_set;\n    for(int i=0;i<string.length();i++){\n     \
    \   char_set.insert(string[i]);\n    }\n    distinct_count=char_set.size();\n\
    \    return distinct_count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpnstiyrq4: /tmp/tmpnstiyrq4.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::string s\
    \ = string;\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n \
    \   s.erase(std::unique(s.begin(), s.end()), s.end());\n    return s.length();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpr9iocj84: /tmp/tmpr9iocj84.cpp:18: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long distinct_chars\
    \ = 0;\n    bool used[128] = {false};\n\n    for (std::string::iterator it = string.begin();\
    \ it != string.end(); ++it) {\n        if (used[std::tolower(*it)] == false) {\n\
    \            used[std::tolower(*it)] = true;\n            distinct_chars++;\n\
    \        }\n    }\n\n    return distinct_chars;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long distinct_count\
    \ = 0;\n    std::vector<bool> distinct(26, false);\n    // 1. convert to lower\
    \ case\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    // 2. Check if character exists in the string\n    for (auto it = string.begin();\
    \ it != string.end(); it++) {\n        int index = *it - 'a';\n        if (!distinct[index])\
    \ {\n            distinct[index] = true;\n            distinct_count++;\n    \
    \    }\n    }\n    return distinct_count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for(int i = 0; i < string.length(); i++) {\n        int flag = 0;\n     \
    \   for(int j = 0; j < i; j++) {\n            if(string[i] == string[j]) {\n \
    \               flag = 1;\n                break;\n            }\n        }\n\
    \        if(flag == 0)\n            count++;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpuh6dkapn: /tmp/tmpuh6dkapn.cpp:27: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  long size = string.size();\n\
    \  long count = 0;\n  for (int i = 0; i < size; i++) {\n    int j;\n    for (j\
    \ = 0; j < i; j++) {\n      if (string[i] == string[j]) {\n        break;\n  \
    \    }\n    }\n    if (i == j) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmptyi957o7: /tmp/tmptyi957o7.cpp:28: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ characters;\n    for (auto c : string)\n        characters.insert(std::tolower(c));\n\
    \    return characters.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ set(string.begin(), string.end());\n    return set.size();\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpr6juo7w0: /tmp/tmpr6juo7w0.cpp:16: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  std::unordered_set<char>\
    \ characters;\n  for (char ch : string) {\n    if (isalpha(ch))\n      characters.insert(tolower(ch));\n\
    \  }\n  return characters.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpamdgb3xm: /tmp/tmpamdgb3xm.cpp:22: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // Start writing\
    \ your code here\n    int count=0;\n    map<char,int> m;\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        m[string[i]]++;\n    }\n    for(auto x:m)\n    {\n        count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmppptuy5mr.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmppptuy5mr.cpp:11:5: error: \u2018map\u2019 was not declared in this\
    \ scope; did you mean \u2018std::map\u2019?\n   11 |     map<char,int> m;\n  \
    \    |     ^~~\n      |     std::map\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n\
    \                 from /tmp/tmppptuy5mr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:100:11:\
    \ note: \u2018std::map\u2019 declared here\n  100 |     class map\n      |   \
    \        ^~~\n/tmp/tmppptuy5mr.cpp:11:9: error: expected primary-expression before\
    \ \u2018char\u2019\n   11 |     map<char,int> m;\n      |         ^~~~\n/tmp/tmppptuy5mr.cpp:14:9:\
    \ error: \u2018m\u2019 was not declared in this scope\n   14 |         m[string[i]]++;\n\
    \      |         ^\n/tmp/tmppptuy5mr.cpp:16:16: error: \u2018m\u2019 was not declared\
    \ in this scope\n   16 |     for(auto x:m)\n      |                ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  // Your code here\n\
    \  long x=0;\n  std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \  sort(string.begin(),string.end());\n  std::set<char> s(string.begin(),string.end());\n\
    \  // std::set<char>::iterator itr;\n  // for(itr=s.begin();itr!=s.end();itr++)\n\
    \  //   cout<<*itr<<\" \";\n  x=s.size();\n  return x;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // If you want\
    \ to write an efficient code, you should consider using `unordered_set` data structure\n\
    \    // For now, use `set` and try to optimize your code later\n    std::set<char>\
    \ set;\n    for (int i = 0; i < string.length(); i++) {\n        set.insert(string[i]);\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmplr66qmy1: /tmp/tmplr66qmy1.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpl7vc91li: /tmp/tmpl7vc91li.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tlong distinct_characters\
    \ = 0;\n\tint str[256] = {0};\n\tfor(int i = 0; i < string.length(); i++) {\n\t\
    \tstr[tolower(string[i])]++;\n\t}\n\tfor(int i = 0; i < 256; i++) {\n\t\tif(str[i]\
    \ != 0) {\n\t\t\tdistinct_characters++;\n\t\t}\n\t}\n\treturn distinct_characters;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::map<char, int>\
    \ map;\n\tfor (auto letter : string) {\n\t\tmap[letter]++;\n\t}\n\treturn map.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmptzr_zo4s: /tmp/tmptzr_zo4s.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> test(string.begin(),\
    \ string.end());\n    return test.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> characters(string.begin(),\
    \ string.end());\n    return characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\t// Write your code\
    \ here\n}\nint main() {\n    auto candidate = count_distinct_characters;\n   \
    \ assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpa64vu7gw: /tmp/tmpa64vu7gw.cpp:13: int main(): Assertion `candidate((\"\
    \")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<std::string>\
    \ distinct_characters;\n    // Transform each character in the string to uppercase\n\
    \    std::transform(string.begin(), string.end(), string.begin(), ::toupper);\n\
    \    for (int i = 0; i < string.length(); i++) {\n        distinct_characters.insert(string.substr(i,\
    \ 1));\n    }\n    return distinct_characters.size();\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tfor (int i = 0;\
    \ i < string.length(); i++) {\n\t\tstring[i] = toupper(string[i]);\n\t}\n\tlong\
    \ answer = 0;\n\tstd::sort(string.begin(), string.end());\n\tfor (int i = 0; i\
    \ < string.length(); i++) {\n\t\tif (string[i] != string[i+1]) {\n\t\t\tanswer++;\n\
    \t\t}\n\t}\n\treturn answer;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ distinct_characters;\n    for (int i = 0; i < string.length(); i++) {\n    \
    \    distinct_characters.insert(string[i]);\n    }\n    return distinct_characters.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpjju9wovb: /tmp/tmpjju9wovb.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  // Convert all characters\
    \ to lowercase\n  std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n  // Compute the required answer\n  std::unordered_set<char> seen;\n\
    \  for (auto &c : string) {\n    seen.insert(c);\n  }\n  return seen.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\t//making everything\
    \ uppercase \n\tstd::transform(string.begin(), string.end(), string.begin(), ::toupper);\n\
    \tstd::sort(string.begin(), string.end());\n\treturn std::unique(string.begin(),\
    \ string.end()) - string.begin();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  long long int i,c;\n\
    \  long distinct=0;\n  std::string new_string;\n  std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n  new_string=string;\n  sort(new_string.begin(),new_string.end());\n\
    \  for(i=0;i<new_string.length();i++)\n  {\n    c=0;\n    while(new_string[i]==new_string[i+1])\n\
    \    {\n      c++;\n      i++;\n    }\n    if(c==0)\n    {\n      distinct++;\n\
    \    }\n  }\n  return distinct;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmprj200h22: /tmp/tmprj200h22.cpp:34: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long result =\
    \ 0;\n    // count_distinct_characters(string);\n    char *str = (char *)string.c_str();\n\
    \    int n = strlen(str);\n    int temp[200] = {0};\n    for(int i = 0; i < n;\
    \ i++) {\n        char ch = tolower(str[i]);\n        if(temp[ch] == 0) {\n  \
    \          temp[ch] = 1;\n            result++;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  long counter = 0;\n\
    \  std::string new_string = \"\";\n  for (auto &c : string) {\n    if (new_string.find(std::tolower(c))\
    \ == std::string::npos) {\n      new_string += std::tolower(c);\n      counter++;\n\
    \    }\n  }\n  return counter;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count=0;\n\
    \    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    for(int i=0;i<string.length();i++){\n        if(std::find(string.begin(),string.begin()+i,string[i])==string.begin()+i){\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ characters(string.begin(), string.end());\n    return characters.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp6qrynoma: /tmp/tmp6qrynoma.cpp:16: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int x[26]={0};\n\
    \    for(auto a:string)\n    {\n        x[tolower(a)-'a']++;\n    }\n    int n=0;\n\
    \    for(int i=0;i<26;i++)\n    {\n        if(x[i]>0)\n        {\n           \
    \ n++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpchyz26p2: /tmp/tmpchyz26p2.cpp:30: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    std::set<char> char_set;\n    for (int i = 0; i < string.length(); i++) {\n\
    \        char_set.insert(string[i]);\n    }\n    return char_set.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp1xqccgu_: /tmp/tmp1xqccgu_.cpp:20: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::set<char>s;\n\
    \tfor(auto item:string) {\n\t\ts.insert(item);\n\t}\n\treturn s.size();\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp1e8vluxd: /tmp/tmp1e8vluxd.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // Your code goes\
    \ here!\n    int count = 0;\n    int i = 0;\n    std::vector<char> v;\n    for(i\
    \ = 0; i < string.length(); i++){\n        char s = string[i];\n        if(s <\
    \ 97){\n            s = s + 32;\n        }\n        v.push_back(s);\n    }\n \
    \   sort(v.begin(), v.end());\n    char pre = ' ';\n    for(i = 0; i < v.size();\
    \ i++){\n        if(v[i] != pre){\n            count++;\n            pre = v[i];\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  // Code here\n \
    \ // Caution: do not use std::unordered_set and other data structures\n  int n\
    \ = string.length();\n  int result = 0;\n  int hash[26] = {0};\n  for(int i =\
    \ 0; i < n; i++) {\n    int index = string[i] - 'a';\n    if(index >= 0 && index\
    \ < 26) {\n      if(hash[index] == 0) {\n        result++;\n        hash[index]\
    \ = 1;\n      }\n    }\n    index = string[i] - 'A';\n    if(index >= 0 && index\
    \ < 26) {\n      if(hash[index] == 0) {\n        result++;\n        hash[index]\
    \ = 1;\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmprocz5eyl: /tmp/tmprocz5eyl.cpp:38: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long distinct=0;\n\
    \    for(int i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            string[i]-=32;\n        }\n    }\n    for(int i=0;i<string.length();i++){\n\
    \        for(int j=i+1;j<string.length();j++){\n            if(string[i]==string[j]){\n\
    \                string[j]=' ';\n            }\n        }\n    }\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]!=' '){\n            distinct++;\n\
    \        }\n    }\n    return distinct;\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpxmv8zgez: /tmp/tmpxmv8zgez.cpp:35: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int length = string.length();\n\
    \    std::set<char> set;\n    for(int i = 0; i < length; i++) {\n        set.insert(tolower(string[i]));\n\
    \    }\n    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  std::vector<char>\
    \ character_count;\n  for (int i = 0; i < string.length(); i++) {\n    char character\
    \ = string[i];\n    bool character_found = false;\n    for (int j = 0; j < character_count.size();\
    \ j++) {\n      if (tolower(character) == tolower(character_count[j])) {\n   \
    \     character_found = true;\n        break;\n      }\n    }\n    if (!character_found)\
    \ {\n      character_count.push_back(character);\n    }\n  }\n  return character_count.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::unordered_set<char>\
    \ s;\n\tfor (char x : string)\n\t\ts.insert(tolower(x));\n\treturn s.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_set<char>\
    \ chars;\n    for (char c : string) {\n        chars.insert(tolower(c));\n   \
    \ }\n    return chars.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return std::set<char>(string.begin(),\
    \ string.end()).size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::sort(string.begin(),\
    \ string.end());\n    std::string::iterator it = std::unique(string.begin(), string.end());\n\
    \    return std::distance(string.begin(), it);\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpk6j75wf7: /tmp/tmpk6j75wf7.cpp:17: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tlong count = 0;\n\
    \tfor (auto i = 0; i < string.length(); i++) {\n\t\tbool is_distinct = true;\n\
    \t\tfor (auto j = 0; j < string.length(); j++) {\n\t\t\tif (tolower(string[i])\
    \ == tolower(string[j]) && i != j) {\n\t\t\t\tis_distinct = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (is_distinct) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpwgs_9tdd: /tmp/tmpwgs_9tdd.cpp:28: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long distinct_characters\
    \ = 0;\n    return distinct_characters;\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpasgy9u4u: /tmp/tmpasgy9u4u.cpp:15: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  long uniqueChars\
    \ = 0;\n  std::string::iterator it;\n  for (it = string.begin(); it != string.end();\
    \ it++) {\n    std::string::iterator iit;\n    for (iit = string.begin(); iit\
    \ != string.end(); iit++) {\n      if (tolower(*it) == tolower(*iit)) {\n    \
    \    uniqueChars++;\n        break;\n      }\n    }\n  }\n  return uniqueChars;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp1z8pceum: /tmp/tmp1z8pceum.cpp:26: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::vector<char>\
    \ distinct_characters;\n    for (char character : string) {\n        if (std::find(distinct_characters.begin(),\
    \ distinct_characters.end(), character) == distinct_characters.end()) {\n    \
    \        distinct_characters.push_back(character);\n        }\n    }\n    return\
    \ distinct_characters.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpfrobfa7f: /tmp/tmpfrobfa7f.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    set<char> s;\n\
    \    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n    }\n\
    \    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_ggw6lg8.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmp_ggw6lg8.cpp:9:5: error: \u2018set\u2019 was not declared in this scope;\
    \ did you mean \u2018std::set\u2019?\n    9 |     set<char> s;\n      |     ^~~\n\
    \      |     std::set\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/set:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp_ggw6lg8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_set.h:94:11:\
    \ note: \u2018std::set\u2019 declared here\n   94 |     class set\n      |   \
    \        ^~~\n/tmp/tmp_ggw6lg8.cpp:9:9: error: expected primary-expression before\
    \ \u2018char\u2019\n    9 |     set<char> s;\n      |         ^~~~\n/tmp/tmp_ggw6lg8.cpp:11:9:\
    \ error: \u2018s\u2019 was not declared in this scope\n   11 |         s.insert(string[i]);\n\
    \      |         ^\n/tmp/tmp_ggw6lg8.cpp:13:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   13 |     return s.size();\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  /*\n  * We need\
    \ to find out all the distinct characters,\n  * which is exactly what a set will\
    \ do.\n  * We then just need to count the number of items in that set.\n  */\n\
    \  std::set<char> char_set;\n  for (int i = 0; i < string.length(); i++) {\n \
    \   char_set.insert(string[i]);\n  }\n  return char_set.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpgibeo2k6: /tmp/tmpgibeo2k6.cpp:24: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tint distinct_chars\
    \ = 0;\n\tint unique_chars[26];\n\tfor (int i = 0; i < 26; i++) {\n\t\tunique_chars[i]\
    \ = 0;\n\t}\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n\t\t\tif (unique_chars[string[i] - 'a'] == 0)\
    \ {\n\t\t\t\tunique_chars[string[i] - 'a'] = 1;\n\t\t\t\tdistinct_chars++;\n\t\
    \t\t}\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\tif (unique_chars[string[i]\
    \ - 'A'] == 0) {\n\t\t\t\tunique_chars[string[i] - 'A'] = 1;\n\t\t\t\tdistinct_chars++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn distinct_chars;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp4c035zor: /tmp/tmp4c035zor.cpp:36: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  \n    set<char>\
    \ s;\n    for(auto i=0;i<string.length();i++)\n        s.insert(string[i]);\n\
    \    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpocltb6ac.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpocltb6ac.cpp:10:5: error: \u2018set\u2019 was not declared in this\
    \ scope; did you mean \u2018std::set\u2019?\n   10 |     set<char> s;\n      |\
    \     ^~~\n      |     std::set\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/set:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpocltb6ac.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_set.h:94:11:\
    \ note: \u2018std::set\u2019 declared here\n   94 |     class set\n      |   \
    \        ^~~\n/tmp/tmpocltb6ac.cpp:10:9: error: expected primary-expression before\
    \ \u2018char\u2019\n   10 |     set<char> s;\n      |         ^~~~\n/tmp/tmpocltb6ac.cpp:12:9:\
    \ error: \u2018s\u2019 was not declared in this scope\n   12 |         s.insert(string[i]);\n\
    \      |         ^\n/tmp/tmpocltb6ac.cpp:13:12: error: \u2018s\u2019 was not declared\
    \ in this scope\n   13 |     return s.size();\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::map<char, bool>\
    \ hashmap;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\thashmap[string[i]]\
    \ = true;\n\t}\n\treturn hashmap.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp_wrkkve6: /tmp/tmp_wrkkve6.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    \n    int i, j,\
    \ max = 0;\n    int arr[26];\n    for(i = 0; i < 26; i++)\n        arr[i] = 0;\n\
    \    for(i = 0; i < string.length(); i++)\n    {\n        if(string[i] >= 'a'\
    \ && string[i] <= 'z')\n            arr[string[i] - 'a'] = 1;\n        else if(string[i]\
    \ >= 'A' && string[i] <= 'Z')\n            arr[string[i] - 'A'] = 1;\n    }\n\
    \    for(i = 0; i < 26; i++)\n        if(arr[i] == 1)\n            max++;\n  \
    \  return max;\n    \n    \n    \n    \n    //return 0;\n}\nint main() {\n   \
    \ auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpf_sht4ai: /tmp/tmpf_sht4ai.cpp:37: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), [](unsigned char c){ return std::tolower(c); });\n\
    \    return std::unordered_set<char>(string.begin(), string.end()).size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // TODO: implement\n\
    \    return 0;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpa30j8gvw: /tmp/tmpa30j8gvw.cpp:15: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    long i = 0;\n    while (string[i] != '\\0') {\n        if (string[i] != ',')\
    \ {\n            if (string[i] >= 65 && string[i] <= 90) {\n                string[i]\
    \ = string[i] + 32;\n            }\n            count++;\n        }\n        i++;\n\
    \    }\n    std::cout << count << std::endl;\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: "0\n5\n13\n"
  stderr: "tmpx475kjv9: /tmp/tmpx475kjv9.cpp:27: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    int len = string.length();\n    for(int i = 0; i < len; i++) {\n        if(string[i]\
    \ != '\\0') {\n            for(int j = i + 1; j < len; j++) {\n              \
    \  if(string[i] == string[j]) {\n                    string[j] = '\\0';\n    \
    \            }\n            }\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp5g76r9zs: /tmp/tmp5g76r9zs.cpp:27: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::unordered_set<char> distinct_characters;\n\
    \    for (char c : string) {\n        distinct_characters.insert(c);\n    }\n\
    \    return distinct_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    std::unordered_set<char> char_set;\n    for (char c : string) {\n       \
    \ char_set.insert(tolower(c));\n    }\n    count = char_set.size();\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ result;\n    for (const auto& c : string) {\n        result.insert(std::tolower(c));\n\
    \    }\n    return result.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    // transform characters to lowercase\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    // Creating a set to store all\
    \ the characters\n    std::set<char> s;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        s.insert(string[i]);\n    }\n    count = s.size();\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n// empty string has\
    \ 0 distinct characters\n\tif (string.empty()) {\n\t\treturn 0;\n\t}\n// std::set\
    \ is a collection of unique elements\n\tstd::set<char> seen_characters;\n\tfor\
    \ (const char& c : string) {\n\t\tseen_characters.insert(std::tolower(c));\n\t\
    }\n\treturn seen_characters.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int count = 0;\n\
    \    std::string s = string;\n    std::transform(s.begin(), s.end(), s.begin(),\
    \ ::tolower);\n    std::set<char> chars;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        chars.insert(s[i]);\n    }\n    count = chars.size();\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    \n    long i=0;\n\
    \    std::string l_string=string;\n    std::string u_string=string;\n    std::transform(l_string.begin(),\
    \ l_string.end(), l_string.begin(), ::tolower);\n    std::transform(u_string.begin(),\
    \ u_string.end(), u_string.begin(), ::toupper);\n    for(auto j=l_string.begin();j!=l_string.end();j++)\n\
    \    {\n        if(*j==*(j+1))\n        {\n            l_string.erase(j);\n  \
    \          j--;\n        }\n    }\n    for(auto j=u_string.begin();j!=u_string.end();j++)\n\
    \    {\n        if(*j==*(j+1))\n        {\n            u_string.erase(j);\n  \
    \          j--;\n        }\n    }\n    std::string result=l_string+u_string;\n\
    \    for(auto j=result.begin();j!=result.end();j++)\n    {\n        if(*j==*(j+1))\n\
    \        {\n            result.erase(j);\n            j--;\n        }\n    }\n\
    \    return result.length();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpjob9w5if: /tmp/tmpjob9w5if.cpp:45: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int mx=0;\n  \
    \  std::vector<int> freq(26,0);\n    for(int i=0;i<string.length();i++){\n   \
    \     if(string[i] >= 'a' && string[i]<='z'){\n            freq[string[i]-'a']++;\n\
    \        }\n        else{\n            freq[string[i]-'A']++;\n        }\n   \
    \ }\n    for(int i=0;i<26;i++){\n        if(freq[i] > 0){\n            mx++;\n\
    \        }\n    }\n    return mx;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp0fsg1_s3: /tmp/tmp0fsg1_s3.cpp:32: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\tstd::set<char> distinct;\n\tfor\
    \ (char s : string) {\n\t\tdistinct.insert(s);\n\t}\n\treturn distinct.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\t//declaring a set\
    \ and storing values in that set \n\t// set only stores unique elements so it\
    \ makes solving the question a lot easier\n\tstd::set<char> set;\n\tfor (int i\
    \ = 0; i < string.length(); i++) {\n\t\tset.insert(string[i]);\n\t}\n\t//printing\
    \ all the elements stored in the set using iterator\n\tstd::set<char>::iterator\
    \ itr;\n\tstd::cout << \"The set elements are: \";\n\tfor (itr = set.begin();\
    \ itr != set.end(); ++itr) {\n\t\tstd::cout << '\\t' << *itr;\n\t}\n\tstd::cout\
    \ << '\\n';\n\treturn set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: "The set elements are: \nThe set elements are: \ta\tb\tc\td\te\nThe set\
    \ elements are: \tA\tC\tD\tE\ta\tb\tc\td\te\n"
  stderr: "tmp48rqz69j: /tmp/tmp48rqz69j.cpp:28: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for(int i = 0; i < string.length(); i++) {\n        if (count == 0)\n   \
    \         count = 1;\n        for(int j = 0; j < i; j++) {\n            if (tolower(string[i])\
    \ == tolower(string[j])) {\n                break;\n            }\n          \
    \  if (j == i - 1)\n                count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  std::set<char> characters;\n\
    \  for (char c : string) {\n    characters.insert(tolower(c));\n  }\n  return\
    \ characters.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long result =\
    \ 0;\n    // TODO Write code here\n    return result;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmplp2hofpw: /tmp/tmplp2hofpw.cpp:16: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\t// your code goes\
    \ here\n\tlong count=0;\n\tfor(long i=0;i<string.length();i++)\n\t{\n\t\tif(string[i]>=65\
    \ && string[i]<=90)\n\t\t{\n\t\t\tstring[i]=string[i]+32;\n\t\t}\n\t}\n\tstd::sort(string.begin(),string.end());\n\
    \tfor(long i=0;i<string.length();i++)\n\t{\n\t\tif(string[i]!=string[i+1])\n\t\
    \t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(auto i = string.begin(); i != string.end(); i++) {\n        s.insert(tolower(*i));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long size = string.size();\n\
    \    long count = 0;\n    long i = 0;\n    while(i < size) {\n        if(islower(string[i]))\n\
    \            string[i] = toupper(string[i]);\n        if(isalpha(string[i]))\n\
    \            count++;\n        i++;\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpna6m7rd_: /tmp/tmpna6m7rd_.cpp:25: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    long count = 0;\n    for(int i = 0; i < string.length(); i++) {\n  \
    \      if(s.find(string[i]) == s.end()) {\n            s.insert(string[i]);\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpiovneg71: /tmp/tmpiovneg71.cpp:23: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::set<char> char_set(string.begin(),\
    \ string.end());\n    return char_set.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  long count = 0;\n\
    \  std::set<char> s;\n  for(int i = 0; i < string.length(); i++) {\n    s.insert(tolower(string[i]));\n\
    \  }\n  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_set<char>\
    \ char_set;\n    for (int i = 0; i < string.length(); i++) {\n        char_set.insert(tolower(string[i]));\n\
    \    }\n    return char_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int length = string.length();\n\
    \    int count = 0;\n    for (int i = 0; i < length; i++) {\n        for (int\
    \ j = 0; j < length; j++) {\n            if (i != j) {\n                if (tolower(string[i])\
    \ == tolower(string[j])) {\n                    count++;\n                   \
    \ break;\n                }\n            }\n        }\n    }\n    return (length\
    \ - count);\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp4pnzdn68: /tmp/tmp4pnzdn68.cpp:27: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ char_set;\n    for (char c : string) {\n        if (char_set.find(tolower(c))\
    \ == char_set.end()) {\n            char_set.insert(tolower(c));\n        }\n\
    \    }\n    return char_set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long dist_char_count=0;\n\
    \    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::set<char> set_of_distinct_char(string.begin(), string.end());\n    dist_char_count\
    \ = set_of_distinct_char.size();\n    return dist_char_count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    //bool characters[26]\
    \ = {false};\n    std::set<char> characters;\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    for(auto i : string) {\n    \
    \    characters.insert(i);\n    }\n    return characters.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  // Code for you\
    \ to write\n  std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \  std::unordered_set<char> s;\n  for (const auto &c : string) {\n    s.insert(c);\n\
    \  }\n  return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tlong length = string.length();\n\
    \tlong count = 0;\n\t// convert all characters to lower case\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\t// make a set from the string,\
    \ set contains distinct elements\n\tstd::set<char> char_set;\n\tfor (int i = 0;\
    \ i < length; i++) {\n\t\tchar_set.insert(string[i]);\n\t}\n\treturn char_set.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // create a set\
    \ of characters\n    // add each character from the string to the set\n    //\
    \ and set the size of the set as the answer\n    std::set<char> s;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        s.insert(string[i]);\n    }\n   \
    \ return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpxvehtlx_: /tmp/tmpxvehtlx_.cpp:23: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\t// Write your code\
    \ here\n\t// Create a list of all the characters in the string\n\t// Find out\
    \ how many distinct characters are in the list\n\t// If the character is lower\
    \ case, make it upper case, then check if it is in the list. If not, add it.\n\
    \tlong output = 0;\n\tlong i = 0;\n\tstd::list<char> char_list;\n\twhile (i <\
    \ string.length()) {\n\t\tchar character = string[i];\n\t\tif (character >= 'a'\
    \ && character <= 'z') {\n\t\t\tcharacter -= 'a' - 'A';\n\t\t}\n\t\tif (std::find(char_list.begin(),\
    \ char_list.end(), character) == char_list.end()) {\n\t\t\tchar_list.push_back(character);\n\
    \t\t\toutput++;\n\t\t}\n\t\ti++;\n\t}\n\treturn output;\n}\nint main() {\n   \
    \ auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::string lower_string;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        lower_string += std::tolower(string[i]);\n\
    \    }\n    std::set<char> s;\n    for (int i = 0; i < lower_string.length();\
    \ i++) {\n        s.insert(lower_string[i]);\n    }\n    return s.size();\n}\n\
    int main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int count = 0;\n\
    \    for(int i = 0; i < string.length(); i++) {\n        for(int j = i + 1; j\
    \ < string.length(); j++) {\n            if(tolower(string[i]) == tolower(string[j]))\
    \ {\n                string[j] = ' ';\n            }\n        }\n    }\n    for(int\
    \ i = 0; i < string.length(); i++) {\n        if(string[i] != ' ')\n         \
    \   count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpolcn4goe: /tmp/tmpolcn4goe.cpp:29: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // Write your\
    \ code here\n    //std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n    std::set<char> set;\n    for(int i=0;i<string.length();i++){\n\
    \        set.insert(string[i]);\n    }\n    return set.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpcpff1vet: /tmp/tmpcpff1vet.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ distinct_characters;\n    for (char character : string) {\n        distinct_characters.insert(tolower(character));\n\
    \    }\n    return distinct_characters.size();\n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long result =\
    \ 0;\n    std::string string1;\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::unordered_set<char> string_unique;\n \
    \   for (int i = 0; i < string.length(); i++) {\n        string_unique.insert(string[i]);\n\
    \    }\n    for (int i = 0; i < string_unique.size(); i++) {\n        result++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // Write your\
    \ code here\n    long count = 0;\n    int arr[26] = {0};\n    for(int i = 0; i\
    \ < string.length(); i++){\n        int x = string[i] - 'a';\n        if(arr[x]\
    \ == 0){\n            count++;\n            arr[x] = 1;\n        }\n    }\n  \
    \  return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmphir8dtjq: /tmp/tmphir8dtjq.cpp:25: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  int len = string.length();\n\
    \  std::unordered_set<char> distinct;\n  int i;\n  for(i=0;i<len;i++){\n    distinct.insert(tolower(string[i]));\n\
    \  }\n  return distinct.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_set<char>\
    \ set;\n    for (auto letter : string)\n        set.insert(letter);\n    return\
    \ set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpgmmwml9x: /tmp/tmpgmmwml9x.cpp:18: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(long i = 0; i < string.length(); i++)\n    {\n        s.insert(tolower(string[i]));\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    string.erase(remove_if(string.begin(),\
    \ string.end(), ::isspace), string.end());\n    transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    unordered_set<char> hashSet;\n    for (char\
    \ c : string) {\n        hashSet.insert(c);\n    }\n    return hashSet.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp07vxd0ix.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmp07vxd0ix.cpp:11:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   11 |     unordered_set<char>\
    \ hashSet;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp07vxd0ix.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp07vxd0ix.cpp:11:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   11 |     unordered_set<char>\
    \ hashSet;\n      |                   ^~~~\n/tmp/tmp07vxd0ix.cpp:13:9: error:\
    \ \u2018hashSet\u2019 was not declared in this scope\n   13 |         hashSet.insert(c);\n\
    \      |         ^~~~~~~\n/tmp/tmp07vxd0ix.cpp:15:12: error: \u2018hashSet\u2019\
    \ was not declared in this scope\n   15 |     return hashSet.size();\n      |\
    \            ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::vector<char>\
    \ uniqueLetters;\n    for (int i = 0; i < string.length(); i++) {\n        if\
    \ (std::find(uniqueLetters.begin(), uniqueLetters.end(), string[i]) == uniqueLetters.end())\
    \ {\n            uniqueLetters.push_back(string[i]);\n        }\n    }\n    return\
    \ uniqueLetters.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpey40k15d: /tmp/tmpey40k15d.cpp:21: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count=0;\n\
    \    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    std::sort(string.begin(), string.end());\n    for(long i=0;i<string.length();i++){\n\
    \        if(string[i]!=string[i+1]){\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  \n    //TODO: Implement\
    \ your solution here\n    std::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower); \n    std::set<char> s(string.begin(), string.end()); \n    return\
    \ s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\t// set is used to\
    \ keep only unique values in it.\n\tstd::set<char> unique_characters;\n\t// Since,\
    \ set uses the binary search tree. Then it is possible that the set might have\
    \ stored the elements in the ascending order.\n\t// to prevent this situation,\
    \ we have used an unordered_set instead.\n\t// Converting the string to be all\
    \ in lower case before storing it into the set/unordered_set.\n\t// We can also\
    \ use transform to do so.\n\tstd::transform(string.begin(), string.end(), string.begin(),\
    \ ::tolower);\n\tfor (auto &character : string) {\n\t\tunique_characters.insert(character);\n\
    \t}\n\treturn unique_characters.size();\n}\nint main() {\n    auto candidate =\
    \ count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::string helper\
    \ = \"\";\n    for (long i = 0; i < string.length(); i++) {\n        if (helper.find(tolower(string[i]))\
    \ == std::string::npos && helper.find(toupper(string[i])) == std::string::npos)\
    \ {\n            helper += string[i];\n        }\n    }\n    return helper.length();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  return std::set<char>(string.begin(),\
    \ string.end()).size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpc_9zotpx: /tmp/tmpc_9zotpx.cpp:15: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    std::unordered_set<char> mySet;\n    for(int i = 0; i < string.length();\
    \ i++){\n        if(mySet.count(string[i]) == 0){\n            mySet.insert(string[i]);\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = count_distinct_characters;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpy1v71k_1: /tmp/tmpy1v71k_1.cpp:23: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    char ch;\n   \
    \ std::set<char> s;\n    std::set<char>::iterator it;\n    int n = string.length();\n\
    \    for(int i = 0; i < n; i++) {\n        ch = string[i];\n        s.insert(ch);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmp1lykopx7: /tmp/tmp1lykopx7.cpp:23: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n  long length = string.length();\n\
    \  long count = 0;\n  long i = 0;\n  while (i < length) {\n    if (string[i] !=\
    \ ' ') {\n      count++;\n      // Skip all characters which are same as current\
    \ char\n      char currentChar = string[i];\n      while (i < length && string[i]\
    \ == currentChar) {\n        i++;\n      }\n    }\n  }\n  return count;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpt3xlwqmb: /tmp/tmpt3xlwqmb.cpp:28: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tstd::set<char> count;\n\
    \tfor (auto x : string) {\n\t\tcount.insert(tolower(x));\n\t}\n\treturn count.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::set<char>\
    \ s;\n    for(int i=0;i<string.length();i++){\n        s.insert(string[i]);\n\
    \    }\n    return s.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "tmpznuk92ft: /tmp/tmpznuk92ft.cpp:19: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long i, distinct_count\
    \ = 0;\n    std::set<char> set_char;\n    for(i = 0; i < string.length(); i++)\
    \ {\n        if(set_char.count(tolower(string[i])) == 0) {\n            set_char.insert(tolower(string[i]));\n\
    \            distinct_count++;\n        }\n    }\n    return distinct_count;\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\t// long count=0;\n\
    \t// for(auto x:string)\n\t// {\n\t// \tcount+=1;\n\t// }\n\t// return count;\n\
    \tstd::set<char> s(string.begin(),string.end());\n\treturn s.size();\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpz0dal5fv: /tmp/tmpz0dal5fv.cpp:22: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\tlong n = string.length();\n\
    \tlong cnt = 0;\n\tstd::map<char, bool> m;\n\tfor (long i = 0; i < n; i++) {\n\
    \t\tchar ch = string[i];\n\t\tm[ch] = true;\n\t}\n\tfor (auto it = m.begin();\
    \ it != m.end(); it++) {\n\t\tcnt++;\n\t}\n\treturn cnt;\n}\nint main() {\n  \
    \  auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp59467117: /tmp/tmp59467117.cpp:25: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    std::vector<char> char_vector(string.begin(),\
    \ string.end());\n    std::sort(char_vector.begin(), char_vector.end());\n   \
    \ std::vector<char>::iterator it;\n    it = std::unique(char_vector.begin(), char_vector.end());\n\
    \    char_vector.resize(std::distance(char_vector.begin(), it));\n    return char_vector.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    unordered_set<char> distinct;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        distinct.insert(string[i]);\n    }\n    return distinct.size();\n\
    }\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqnqttnrx.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpqnqttnrx.cpp:10:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   10 |     unordered_set<char>\
    \ distinct;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpqnqttnrx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpqnqttnrx.cpp:10:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   10 |     unordered_set<char>\
    \ distinct;\n      |                   ^~~~\n/tmp/tmpqnqttnrx.cpp:12:9: error:\
    \ \u2018distinct\u2019 was not declared in this scope\n   12 |         distinct.insert(string[i]);\n\
    \      |         ^~~~~~~~\n/tmp/tmpqnqttnrx.cpp:14:12: error: \u2018distinct\u2019\
    \ was not declared in this scope\n   14 |     return distinct.size();\n      |\
    \            ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    string.erase(std::remove(string.begin(),\
    \ string.end(), ' '), string.end()); // delete space\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);  // make lower case\n\n    std::set<char>\
    \ s(string.begin(), string.end());\n    return s.size();\n}\nint main() {\n  \
    \  auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmps3b7jdrz: /tmp/tmps3b7jdrz.cpp:21: int main(): Assertion `candidate((\"\
    Jerry jERRY JeRRRY\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // Write your\
    \ solution here\n    std::set<char> distinct;\n    for(int i = 0; i < string.length();\
    \ i++){\n      distinct.insert(tolower(string[i]));\n    }\n    return distinct.size();\n\
    \  }\n\nint main(){\n  assert(count_distinct_characters(\"xyzXYZ\") == 3);\n \
    \ assert(count_distinct_characters(\"Jerry\") == 4);\n  assert(count_distinct_characters(\"\
    Hello there\") == 8);\n  assert(count_distinct_characters(\"abnbcn\") == 3);\n\
    \  assert(count_distinct_characters(\"\") == 0);\n  assert(count_distinct_characters(\"\
    abcde abcde\") == 5);\n  return 0;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpeo6esh72.cpp:26:5: error: redefinition of \u2018int main()\u2019\
    \n   26 | int main() {\n      |     ^~~~\n/tmp/tmpeo6esh72.cpp:17:5: note: \u2018\
    int main()\u2019 previously defined here\n   17 | int main(){\n      |     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    for(auto i : string) {\n        if(!find(string.begin(), string.end(), tolower(i)))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphazhaxzj.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmphazhaxzj.cpp:11:12: error: no match for \u2018operator!\u2019 (operand\
    \ type is \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019)\n   11 |         if(!find(string.begin(), string.end(), tolower(i)))\
    \ {\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphazhaxzj.cpp:11:12:\
    \ note: candidate: \u2018operator!(bool)\u2019 <built-in>\n/tmp/tmphazhaxzj.cpp:11:12:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 to \u2018bool\u2019\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n\treturn 0;\n}\nint\
    \ main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
    abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
    \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmp1fe6oczp: /tmp/tmp1fe6oczp.cpp:14: int main(): Assertion `candidate((\"\
    abcde\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    // your code here\n\
    \    int n = string.length();\n    int count=0;\n    int a[26];\n    int b[26];\n\
    \    for(int i=0;i<26;i++)\n        a[i]=0;\n    for(int i=0;i<26;i++)\n     \
    \   b[i]=0;\n    for(int i=0;i<n;i++)\n    {\n        if(string[i]>='a' && string[i]<='z')\n\
    \        {\n            if(a[string[i]-'a']==0)\n            {\n             \
    \   count++;\n                a[string[i]-'a']=1;\n            }\n        }\n\
    \        else if(string[i]>='A' && string[i]<='Z')\n        {\n            if(b[string[i]-'A']==0)\n\
    \            {\n                count++;\n                b[string[i]-'A']=1;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\"\
    )) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"\
    Jerry jERRY JeRRRY\")) == (5));\n}\n"
  stdout: ''
  stderr: "tmpaka3f9c0: /tmp/tmpaka3f9c0.cpp:43: int main(): Assertion `candidate((\"\
    abcdecadeCADE\")) == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    int count = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    for (char i : string) {\n        switch (i) {\n         \
    \   case 'a':\n                a++;\n                break;\n            case\
    \ 'b':\n                b++;\n                break;\n            case 'c':\n\
    \                c++;\n                break;\n            case 'd':\n       \
    \         d++;\n                break;\n            case 'e':\n              \
    \  e++;\n                break;\n            case 'f':\n                f++;\n\
    \                break;\n            case 'g':\n                g++;\n       \
    \         break;\n            case 'h':\n                h++;\n              \
    \  break;\n            case 'i':\n                i++;\n                break;\n\
    \            case 'j':\n                j++;\n                break;\n       \
    \     case 'k':\n                k++;\n                break;\n            case\
    \ 'l':\n                l++;\n                break;\n            case 'm':\n\
    \                m++;\n                break;\n            case 'n':\n       \
    \         n++;\n                break;\n            case 'o':\n              \
    \  o++;\n                break;\n            case 'p':\n                p++;\n\
    \                break;\n            case 'q':\n                q++;\n       \
    \         break;\n            case 'r':\n                r++;\n              \
    \  break;\n            case 's':\n                s++;\n                break;\n\
    \            case 't':\n                t++;\n                break;\n       \
    \     case 'u':\n                u++;\n                break;\n            case\
    \ 'v':\n                v++;\n               \n}\nint main() {\n    auto candidate\
    \ = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpx2q_z0hn.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019\
    :\n/tmp/tmpx2q_z0hn.cpp:105:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  105 | int main() {\n      |            ^\n/tmp/tmpx2q_z0hn.cpp:112:1:\
    \ error: expected \u2018}\u2019 at end of input\n  112 | }\n      | ^\n/tmp/tmpx2q_z0hn.cpp:36:27:\
    \ note: to match this \u2018{\u2019\n   36 |     for (char i : string) {\n   \
    \   |                           ^\n/tmp/tmpx2q_z0hn.cpp:112:1: error: expected\
    \ \u2018}\u2019 at end of input\n  112 | }\n      | ^\n/tmp/tmpx2q_z0hn.cpp:8:52:\
    \ note: to match this \u2018{\u2019\n    8 | long count_distinct_characters(std::string\
    \ string) {\n      |                                                    ^\n/tmp/tmpx2q_z0hn.cpp:112:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  112 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    //TODO: Replace\
    \ the body of this function\n    std::transform(string.begin(), string.end(),\
    \ string.begin(), ::tolower);\n    std::set<char> set(string.begin(), string.end());\n\
    \    return set.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n// >>>\
    \ count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
    // 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n\
    \    //for (int i = 0; i < string.length(); i++) {\n        //std::cout << string[i]\
    \ << \" \";\n        //for (int j = i + 1; j < string.length(); j++) {\n     \
    \       //if (string[i] == string[j]) {\n                //count++;\n        \
    \        //break;\n            //}\n        //}\n    //}\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        std::cout << string[i] << \" \";\n    \
    \    for (int j = i + 1; j < string.length(); j++) {\n            if (tolower(string[i])\
    \ == tolower(string[j])) {\n                count++;\n                break;\n\
    \            }\n        }\n    }\n    count = string.length() - count;\n    return\
    \ count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n\
    \    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"\
    aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n\
    }\n"
  stdout: 'a b c d e a b c d e c a d e C A D E a a a a A A A A a a a a J e r r y   j
    E R R Y   J e R R R Y '
  stderr: ''
  exit_code: 0
  status: OK
