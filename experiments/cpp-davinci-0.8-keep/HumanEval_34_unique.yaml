name: HumanEval_34_unique
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
  \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\n\
  std::vector<long> unique(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
  }\n"
completions: ["    std::vector<long> a;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\n\
    \            a.push_back(l[i]);\n    }\n    return a;", "    std::vector<long>\
    \ n;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(n));\n    return n;", "\tstd::vector<long> u;\n\tstd::sort(l.begin(),\
    \ l.end());\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i == 0 || l[i] !=\
    \ l[i - 1]) {\n\t\t\tu.push_back(l[i]);\n\t\t}\n\t}\n\treturn u;", "    // your\
    \ code here\n    std::vector<long>::iterator itr;\n    std::vector<long> temp;\n\
    \    sort(l.begin(),l.end());\n    for(itr=l.begin();itr!=l.end();itr++)\n   \
    \ {\n        if(std::find(temp.begin(),temp.end(),*itr)==temp.end())\n       \
    \ {\n            temp.push_back(*itr);\n        }\n    }\n    return temp;", " \
    \   std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "  std::vector<long> res;\n  std::sort(l.begin(),\
    \ l.end());\n  res.push_back(l[0]);\n  for (long j = 1; j < l.size(); j++) {\n\
    \    if (l[j] != l[j - 1]) {\n      res.push_back(l[j]);\n    }\n  }\n  return\
    \ res;", "    std::vector<long>::iterator p;\n    sort(l.begin(), l.end());\n\
    \    p = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ p));\n    return l;", "    assert(l.size() != 0);\n    // std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> result;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        int found = 0;\n        for (int j = 0; j < result.size(); j++)\
    \ {\n            if (l[i] == result[j]) {\n                found = 1;\n      \
    \          break;\n            }\n        }\n        if (found == 0) {\n     \
    \       result.push_back(l[i]);\n        }\n    }\n    return result;", "  std::vector<long>\
    \ out = {};\n  for (long x : l) {\n    if (std::find(out.begin(), out.end(), x)\
    \ == out.end()) {\n      out.push_back(x);\n    }\n  }\n  std::sort(out.begin(),\
    \ out.end());\n  return out;", "  std::sort(l.begin(), l.end());\n  auto it =\
    \ std::unique(l.begin(), l.end());\n  l.resize(std::distance(l.begin(), it));\n\
    \  return l;", "  std::vector<long> ret;\n  for (int i = 0; i < l.size(); i++)\
    \ {\n    auto idx = std::find(ret.begin(), ret.end(), l[i]);\n    if (idx == ret.end())\
    \ {\n      ret.push_back(l[i]);\n    }\n  }\n  std::sort(ret.begin(), ret.end());\n\
    \  return ret;", "    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(ret));\n\
    \    return ret;", "    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator\
    \ it;\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "  // your code here...\n  if(l.size()<2)\n  {\n    return\
    \ l;\n  }\n  std::vector<long> ans;\n  long min=INT_MAX;\n  long max=INT_MIN;\n\
    \  long no;\n  for(int i=0;i<l.size();i++)\n  {\n    if(l[i]<min)\n    {\n   \
    \   min=l[i];\n    }\n    if(l[i]>max)\n    {\n      max=l[i];\n    }\n  }\n \
    \ //assert(max>min);\n  //std::cout<<\"\\n\";\n  std::vector<long> bitset(max-min+1,0);\n\
    \  //std::cout<<\"\\n\\n\";\n  for(int i=0;i<l.size();i++)\n  {\n    bitset[l[i]-min]=1;\n\
    \  }\n  for(int i=0;i<max-min+1;i++)\n  {\n    if(bitset[i]==1)\n    {\n     \
    \ ans.push_back(i+min);\n    }\n  }\n  return ans;", "    std::sort(l.begin(),\
    \ l.end());\n    auto first = l.begin();\n    auto last = l.end();\n    while\
    \ (first != last) {\n        auto next = std::upper_bound(first, last, *first);\n\
    \        if (next != first) *first = std::move(*--next);\n        first = next;\n\
    \    }\n    l.erase(first, last);\n    return l;", "    std::vector<long> res\
    \ = l;\n    sort(res.begin(), res.end());\n    auto last = std::unique(res.begin(),\
    \ res.end());\n    res.erase(last, res.end());\n    return res;", "    // Create\
    \ a vector to store elements\n    std::vector<long> res;\n    // Iterate over\
    \ all elements\n    for (long el : l) {\n        // Check for duplicates\n   \
    \     if (std::find(res.begin(), res.end(), el) == res.end()) {\n            //\
    \ Append\n            res.push_back(el);\n        }\n    }\n    // Return sorted\
    \ list\n    std::sort(res.begin(), res.end());\n    return res;", "\tstd::sort(l.begin(),\
    \ l.end());\n\tstd::vector<long>::iterator it;\n\tit = std::unique(l.begin(),\
    \ l.end());\n\tl.resize(std::distance(l.begin(), it));\n\treturn l;", "    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;", "\t//sort the array\n\tstd::sort(l.begin(), l.end());\n\
    \t//return unique elements\n\tl.erase(std::unique(l.begin(), l.end()), l.end());\n\
    \treturn l;", "    std::vector<long> res;\n    std::set<long> s(l.begin(), l.end());\n\
    \    for (auto it = s.begin(); it != s.end(); it++) {\n        res.push_back(*it);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>::iterator\
    \ it;\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    std::sort(l.begin(), l.end());\n    return l;", "    assert(l.size()\
    \ > 0);\n    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> s;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i -\
    \ 1]) {\n            s.push_back(l[i]);\n        }\n    }\n    return s;", " \
    \   std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(ret));\n    return ret;", "\tstd::sort(l.begin(),\
    \ l.end());\n\tauto unique_end = std::unique(l.begin(), l.end());\n\tl.erase(unique_end,\
    \ l.end());\n\treturn l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   auto last = std::unique(l.begin(), l.end());\n    l.erase(last, l.end());\n\
    \    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    // your code here\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n    for(long\
    \ i = 1; i < l.size(); i++) {\n        if(l[i] != l[i-1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    sort(l.begin(), l.end());\n    l.erase(unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "  // your code here\n  std::vector<long>\
    \ v;\n  std::sort(l.begin(), l.end());\n  v.push_back(l[0]);\n  for(int i = 1;\
    \ i < l.size(); i++)\n  {\n      if(l[i] != l[i-1])\n        v.push_back(l[i]);\n\
    \  }\n  return v;", "  std::vector<long> a;\n  std::sort(l.begin(), l.end());\n\
    \  auto last = std::unique(l.begin(), l.end());\n  l.erase(last, l.end());\n \
    \ return l;", "    // YOUR CODE HERE\n    std::sort(l.begin(), l.end());\n   \
    \ std::vector<long> uni;\n    uni.push_back(l[0]);\n    for(int i=1; i<l.size();\
    \ i++){\n        if(l[i]!=l[i-1])\n            uni.push_back(l[i]);\n    }\n \
    \   return uni;", "\t\n\tauto r = l;\n\tstd::sort(r.begin(), r.end());\n\tr.erase(std::unique(r.begin(),\
    \ r.end()), r.end());\n\treturn r;", "    // YOUR CODE HERE\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long>::iterator ip;\n    ip = std::unique(l.begin(),\
    \ l.end());\n    l.resize(std::distance(l.begin(), ip));\n    return l;", "\t\
    std::sort(l.begin(), l.end());\n\tl.erase(std::unique(l.begin(), l.end()), l.end());\n\
    \treturn l;", "    std::vector<long> s = l;\n    std::sort(s.begin(), s.end());\n\
    \    auto last = std::unique(s.begin(), s.end());\n    s.erase(last, s.end());\n\
    \    return s;", '  return std::vector<long>(l.begin(), std::unique(l.begin(),
    l.end()));', "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> new_list;\n    std::sort(l.begin(),\
    \ l.end());\n    new_list.push_back(l[0]);\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i-1] != l[i]) {\n            new_list.push_back(l[i]);\n\
    \        }\n    }\n    return new_list;", "\tstd::vector<long> result = {};\n\t\
    std::sort(l.begin(), l.end());\n\tfor (auto i : l) {\n\t\tif (result.size() ==\
    \ 0 || result.back() != i) {\n\t\t\tresult.push_back(i);\n\t\t}\n\t}\n\treturn\
    \ result;", "  std::vector<long> result;\n  for (auto e : l) {\n    if (std::find(result.begin(),\
    \ result.end(), e) == result.end()) {\n      result.push_back(e);\n    }\n  }\n\
    \  std::sort(result.begin(), result.end());\n  return result;", "\tstd::vector<long>\
    \ ans;\n\t//l.sort();\n\tstd::sort(l.begin(), l.end());\n\tlong last = l[0];\n\
    \tans.push_back(last);\n\tfor (long i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ != last) {\n\t\t\tans.push_back(l[i]);\n\t\t\tlast = l[i];\n\t\t}\n\t}\n\treturn\
    \ ans;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> res;\n    std::map<long, bool>\
    \ m;\n    for (int i = 0; i < l.size(); i++) {\n        m[l[i]] = 1;\n    }\n\
    \    for (auto &e : m) {\n        res.push_back(e.first);\n    }\n    return res;",
  "\tstd::sort(l.begin(), l.end());\n\tl.erase(std::unique(l.begin(), l.end()), l.end());\n\
    \treturn l;", "    // YOUR CODE HERE\n    std::vector<long> ans;\n    std::sort(l.begin(),\
    \ l.end());\n    for(int i=0; i<l.size(); i++){\n      if(i==0 || l[i] != l[i-1])\n\
    \        ans.push_back(l[i]);\n    }\n    return ans;", "    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "\tstd::vector<long> ret;\n\tstd::sort(l.begin(), l.end());\n\
    \tret.push_back(l[0]);\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i] !=\
    \ l[i - 1]) {\n\t\t\tret.push_back(l[i]);\n\t\t}\n\t}\n\treturn ret;", "  std::sort(l.begin(),\
    \ l.end());\n  auto last = std::unique(l.begin(), l.end());\n  l.erase(last, l.end());\n\
    \  return l;", "    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    return l;", "    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(result));\n    return result;", "    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;", "\tstd::vector<long> output;\n\tstd::set<long>\
    \ set(l.begin(), l.end());\n\tstd::copy(set.begin(), set.end(), std::back_inserter(output));\n\
    \tstd::sort(output.begin(), output.end());\n\treturn output;", "  std::sort(l.begin(),\
    \ l.end());\n  auto it = std::unique(l.begin(), l.end());\n  l.resize(std::distance(l.begin(),\
    \ it));\n  return l;", "    std::vector<long> ret;\n    for (std::vector<long>::size_type\
    \ i = 0; i < l.size(); i++) {\n        if (std::find(ret.begin(), ret.end(), l[i])\
    \ == ret.end()) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "\tstd::vector<long> sorted;\n\tstd::vector<long>::iterator i;\n\tfor\
    \ (i = l.begin(); i != l.end(); i++) {\n\t\tsorted.push_back(*i);\n\t}\n\tstd::sort(sorted.begin(),\
    \ sorted.end());\n\tstd::vector<long>::iterator j;\n\tj = std::unique(sorted.begin(),\
    \ sorted.end());\n\tsorted.resize(std::distance(sorted.begin(), j));\n\treturn\
    \ sorted;", "    std::vector<long> result;\n    for (auto& i : l) {\n        if\
    \ (std::find(result.begin(), result.end(), i) == result.end()) {\n           \
    \ result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;", "    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator\
    \ it;\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> ret;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        long j = 0;\n        for (; j < ret.size(); j++) {\n\
    \            if (ret[j] == l[i]) break;\n        }\n        if (j == ret.size())\
    \ ret.push_back(l[i]);\n    }\n    std::sort(ret.begin(), ret.end());\n    return\
    \ ret;", "\tstd::sort(l.begin(), l.end());\n\treturn std::vector<long>(l.begin(),\
    \ std::unique(l.begin(), l.end()));", "  std::vector<long> u;\n  std::map<long,\
    \ bool> m;\n  for (auto i : l) {\n    if (m.find(i) == m.end()) {\n      m[i]\
    \ = true;\n      u.push_back(i);\n    }\n  }\n  return u;", "  std::sort(l.begin(),\
    \ l.end());\n  auto last = std::unique(l.begin(), l.end());\n  l.erase(last, l.end());\n\
    \  return l;", "  std::vector<long> ret;\n  for (auto &e : l) {\n    if (std::find(ret.begin(),\
    \ ret.end(), e) == ret.end()) {\n      ret.push_back(e);\n    }\n  }\n  std::sort(ret.begin(),\
    \ ret.end());\n  return ret;", "    sort(l.begin(), l.end());\n    auto it = unique(l.begin(),\
    \ l.end());\n    l.resize(std::distance(l.begin(), it));\n    return l;", "  std::vector<long>\
    \ res;\n  sort(l.begin(), l.end());\n  res.push_back(l[0]);\n  for (int i = 1;\
    \ i < l.size(); i++) {\n    if (l[i] != l[i - 1]) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  return res;", "\tstd::sort(l.begin(), l.end());\n\tl.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n\treturn l;", "    std::sort(l.begin(), l.end());\n   \
    \ l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (i == 0 || l[i] != l[i - 1]) {\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;", "  std::vector<long> res;\n  for (auto e :\
    \ l) {\n    if (std::find(res.begin(), res.end(), e) == res.end())\n      res.push_back(e);\n\
    \  }\n  std::sort(res.begin(), res.end());\n  return res;", "    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long>::iterator pos = std::unique(l.begin(), l.end());\n\
    \    l.erase(pos, l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n\
    \    auto last = std::unique(l.begin(), l.end());\n    l.erase(last, l.end());\n\
    \    return l;", "    std::vector<long> u;\n    std::set<long> s;\n    for (auto\
    \ x : l) {\n        if (s.find(x) == s.end()) {\n            s.insert(x);\n  \
    \          u.push_back(x);\n        }\n    }\n    return u;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "\tstd::sort(l.begin(), l.end());\n\tauto last = std::unique(l.begin(),\
    \ l.end());\n\tl.erase(last, l.end());\n\treturn l;", "    std::vector<long> uniq;\n\
    \    std::sort(l.begin(), l.end());\n    for (std::vector<long>::iterator it =\
    \ l.begin(); it != l.end(); ++it) {\n        if (it == l.begin() || *it != *(it\
    \ - 1)) {\n            uniq.push_back(*it);\n        }\n    }\n    return uniq;",
  "    std::vector<long> res;\n    long n = l.size();\n    for (long i = 0; i < n;\
    \ i++) {\n        bool is_present = false;\n        for (long j = 0; j < res.size();\
    \ j++) {\n            if (l[i] == res[j]) {\n                is_present = true;\n\
    \                break;\n            }\n        }\n        if (!is_present) {\n\
    \            res.push_back(l[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "  long i, j;\n  std::vector<long> ans;\n\
    \  std::sort(l.begin(), l.end());\n  ans.push_back(l[0]);\n  for (i = 1; i < l.size();\
    \ i++) {\n    if (l[i] != l[i - 1])\n      ans.push_back(l[i]);\n  }\n  return\
    \ ans;", "    // Add your code here\n    sort(l.begin(),l.end());\n    auto it\
    \ = std::unique(l.begin(),l.end());\n    l.resize(std::distance(l.begin(),it));\n\
    \    return l;", "    std::vector<long> a = l;\n    std::sort(a.begin(), a.end());\n\
    \    a.erase(std::unique(a.begin(), a.end()), a.end());\n    return a;", "   \
    \ // ADD CODE HERE\n    int count;\n    for(int i=0;i<l.size();i++)\n    {\n \
    \       count=0;\n        for(int j=0;j<l.size();j++)\n        {\n           \
    \ if(l[i]==l[j])\n            {\n                count++;\n            }\n   \
    \     }\n        if(count>1)\n        {\n            l.erase(l.begin()+i);\n \
    \           i--;\n        }\n    }\n    sort(l.begin(),l.end());\n    return l;",
  "\tstd::vector<long> res;\n\tstd::sort(l.begin(), l.end());\n\tfor (long i = 0;\
    \ i < l.size(); i++) {\n\t\tif (i == 0 || l[i] != l[i - 1]) {\n\t\t\tres.push_back(l[i]);\n\
    \t\t}\n\t}\n\treturn res;", "    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator\
    \ it;\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "  std::vector<long> ans;\n  std::sort(l.begin(), l.end());\n\
    \  ans.push_back(l[0]);\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i -\
    \ 1] != l[i]) {\n      ans.push_back(l[i]);\n    }\n  }\n  return ans;", "   \
    \ std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(), l.end());\n\
    \    l.erase(last, l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n\
    \    std::vector<long>::iterator it;\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    return l;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long>::iterator p;\n \
    \   std::vector<long> u;\n    for (p = l.begin(); p != l.end(); p++) {\n     \
    \   if(std::find(u.begin(), u.end(), *p) == u.end()) {\n            u.push_back(*p);\n\
    \        }\n    }\n    std::sort(u.begin(), u.end());\n    return u;", "    std::vector<long>\
    \ res;\n    for (long i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1])\n            res.push_back(l[i]);\n    }\n    return res;", " \
    \   std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(), l.end());\n\
    \    l.erase(last, l.end());\n    return l;", "\tstd::sort(l.begin(), l.end());\n\
    \tl.erase(std::unique(l.begin(), l.end()), l.end());\n\treturn l;", "    // Your\
    \ code here\n    std::sort(l.begin(), l.end());\n    std::vector<long> ans;\n\
    \    long val = -1;\n    long size = l.size();\n    for(long i = 0; i < size;\
    \ i++) {\n        if(l[i] != val) {\n            ans.push_back(l[i]);\n      \
    \      val = l[i];\n        }\n    }\n    return ans;", "    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;", "\tstd::vector<long> r;\n\tstd::sort(l.begin(), l.end());\n\
    \tstd::vector<long>::iterator it;\n\tit = std::unique(l.begin(), l.end());\n\t\
    l.resize(std::distance(l.begin(), it));\n\tfor (int i = 0; i < l.size(); i++)\
    \ {\n\t\tr.push_back(l[i]);\n\t}\n\treturn r;", "    std::sort(l.begin(), l.end());\n\
    \    auto last = std::unique(l.begin(), l.end());\n    l.erase(last, l.end());\n\
    \    return l;", "    auto end = std::unique(l.begin(), l.end());\n    l.erase(end,\
    \ l.end());\n    std::sort(l.begin(), l.end());\n    return l;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> ans;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        bool found = false;\n        for (int j = 0; j < ans.size(); j++) {\n\
    \            if (l[i] == ans[j]) {\n                found = true;\n          \
    \      break;\n            }\n        }\n        if (!found) {\n            ans.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;", " \
    \   assert(l.size() > 0);\n    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "\tstd::vector<long> ans = l;\n\tstd::sort(ans.begin(),\
    \ ans.end());\n\tauto last = std::unique(ans.begin(), ans.end());\n\tans.erase(last,\
    \ ans.end());\n\treturn ans;", "\tstd::vector<long> res;\n\tstd::set<long> s(l.begin(),\
    \ l.end());\n\tfor (auto x : s) {\n\t\tres.push_back(x);\n\t}\n\treturn res;",
  "  std::vector<long> res;\n  for (long i = 0; i < l.size(); i++) {\n    long num\
    \ = l[i];\n    auto it = std::find(res.begin(), res.end(), num);\n    if (it ==\
    \ res.end()) {\n      res.push_back(num);\n    }\n  }\n  return res;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> ret;\n    std::map<long, bool> dictionary;\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (dictionary.find(l[i]) == dictionary.end())\
    \ {\n            dictionary[l[i]] = true;\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    std::sort(ret.begin(), ret.end());\n    return ret;", " \
    \   std::vector<long> ans;\n    sort(l.begin(), l.end());\n    for (long i = 0;\
    \ i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n          \
    \  ans.push_back(l[i]);\n        }\n    }\n    return ans;", "  std::vector<long>\
    \ result;\n  for (long e : l) {\n    if (std::find(result.begin(), result.end(),\
    \ e) == result.end()) {\n      result.push_back(e);\n    }\n  }\n  return result;",
  "    std::vector<long> res;\n    for (auto x : l) {\n        if (std::find(res.begin(),\
    \ res.end(), x) == res.end()) {\n            res.push_back(x);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> no_duplicates;\n    sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if ((i == 0) ||\
    \ (l[i] != l[i-1])) {\n            no_duplicates.push_back(l[i]);\n        }\n\
    \    }\n    return no_duplicates;", "  std::sort(l.begin(), l.end());\n  auto\
    \ it = std::unique(l.begin(), l.end());\n  l.resize(std::distance(l.begin(), it));\n\
    \  return l;", "\tstd::vector<long> ret;\n\tstd::sort(l.begin(), l.end());\n\t\
    ret.push_back(l[0]);\n\tfor (size_t i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ != l[i - 1])\n\t\t\tret.push_back(l[i]);\n\t}\n\treturn ret;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    long s = l.size();\n    if (s\
    \ == 0) {\n        return res;\n    }\n    res.push_back(l[0]);\n    for (long\
    \ i = 1; i < s; i++) {\n        if (l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "\tstd::vector<long> res = {};\n\tfor (int\
    \ i = 0; i < l.size(); i++) {\n\t\tif (res.size() == 0) {\n\t\t\tres.push_back(l[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tint flag = 0;\n\t\t\tfor (int j = 0; j < res.size();\
    \ j++) {\n\t\t\t\tif (l[i] == res[j]) {\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif (flag == 0) {\n\t\t\t\tres.push_back(l[i]);\n\t\t\
    \t}\n\t\t}\n\t}\n\tstd::sort(res.begin(), res.end());\n\treturn res;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    // YOUR CODE HERE\n    std::vector<long> uniqueVector;\n    for(long\
    \ i = 0; i < l.size(); i++){\n        if(std::find(uniqueVector.begin(), uniqueVector.end(),\
    \ l[i]) == uniqueVector.end()){\n            uniqueVector.push_back(l[i]);\n \
    \       }\n    }\n    std::sort(uniqueVector.begin(), uniqueVector.end());\n \
    \   return uniqueVector;", "    std::vector<long> output;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i > 0 && l[i]\
    \ == l[i-1]) continue;\n        output.push_back(l[i]);\n    }\n    return output;",
  "    std::vector<long>::iterator it;\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    std::sort(l.begin(), l.end());\n\
    \    return l;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "    std::vector<long>::iterator ip;\n  \
    \  std::sort(l.begin(), l.end());\n    ip = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), ip));\n    return l;", "    // your code\
    \ goes here\n    \n    std::vector<long>::iterator ip; \n    std::sort(l.begin(),\
    \ l.end());\n    ip = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ ip));\n    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "  std::sort(l.begin(), l.end());\n  auto\
    \ it = std::unique(l.begin(), l.end());\n  std::vector<long> res(l.begin(), it);\n\
    \  return res;", "  l.erase(std::unique(l.begin(), l.end()), l.end());\n  std::sort(l.begin(),\
    \ l.end());\n  return l;", "    std::vector<long> unique_list;\n    // create\
    \ a unique list\n    for (unsigned long i = 0; i < l.size(); i++) {\n        if\
    \ (std::find(unique_list.begin(), unique_list.end(), l[i]) == unique_list.end())\
    \ {\n            unique_list.push_back(l[i]);\n        }\n    }\n    // sort the\
    \ unique list\n    std::sort(unique_list.begin(), unique_list.end());\n    return\
    \ unique_list;", "\tstd::sort(l.begin(), l.end());\n\treturn std::vector<long>(l.begin(),\
    \ std::unique(l.begin(), l.end()));", "        // TODO\n        std::sort(l.begin(),\
    \ l.end());\n        l.erase(std::unique(l.begin(), l.end()), l.end());\n    \
    \    return l;", "  std::vector<long> u;\n  std::sort(l.begin(), l.end());\n \
    \ for (long i = 0; i < l.size(); i++) {\n    if (u.size() == 0 || l[i] != u[u.size()\
    \ - 1]) {\n      u.push_back(l[i]);\n    }\n  }\n  return u;", "    long i,j;\n\
    \    std::vector<long> res;\n    std::sort(l.begin(),l.end());\n    res.push_back(l[0]);\n\
    \    for(i=1;i<l.size();i++)\n    {\n        if(l[i]!=l[i-1])\n        {\n   \
    \         res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n        \
    \    res.push_back(l[i]);\n        }\n    }\n    return res;", '    return std::vector<long>(l.begin(),
    l.end());', "    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator\
    \ ip;\n    ip = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ ip));\n    return l;", "    // YOUR CODE HERE\n    std::vector<long>::iterator\
    \ it1;\n    std::vector<long>::iterator it2;\n    for(it1=l.begin();it1!=l.end();it1++)\n\
    \    {\n        for(it2=it1+1;it2!=l.end();it2++)\n        {\n            if(*it1==*it2)\n\
    \            {\n                l.erase(it2);\n                it2--;\n      \
    \      }\n        }\n    }\n    std::sort(l.begin(),l.end());\n    return l;",
  "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::vector<long> output;\n    std::sort(l.begin(),\
    \ l.end());\n    int lsize = l.size();\n    for (int i = 0; i < lsize; i++) {\n\
    \        int elem = l[i];\n        if (i == 0 || elem != l[i-1]) {\n         \
    \   output.push_back(elem);\n        }\n    }\n    return output;", "  // Write\
    \ your code here\n  // std::vector<long>::iterator it;\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> :: iterator ip;\n  ip = std::unique(l.begin(),\
    \ l.end());\n  l.resize(std::distance(l.begin(), ip));\n  return l;", "    std::vector<long>::iterator\
    \ it; \n    std::sort(l.begin(), l.end()); \n    it = std::unique(l.begin(), l.end());\
    \ \n    l.resize(std::distance(l.begin(), it)); \n    return l;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    // Sorting the vector\n    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ result;\n    // Adding unique items to vector\n    std::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(result));\n    return result;", "    std::vector<long>\
    \ res;\n    for (auto i: l) {\n        if (std::find(res.begin(), res.end(), i)\
    \ == res.end()) {\n            res.push_back(i);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "  std::vector<long> u;\n  std::sort(l.begin(),\
    \ l.end());\n  for (std::vector<long>::iterator it = l.begin(); it != l.end();\
    \ it++) {\n    if (it == l.begin() || *it != *(it - 1)) {\n      u.push_back(*it);\n\
    \    }\n  }\n  return u;", "    std::sort(l.begin(), l.end());\n    auto it =\
    \ std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n\
    \    return l;", "  std::vector<long> unique_list;\n  std::sort(l.begin(), l.end());\n\
    \  unique_list.push_back(l[0]);\n  for (int i = 1; i < l.size(); i++) {\n    if\
    \ (l[i] != l[i - 1]) {\n      unique_list.push_back(l[i]);\n    }\n  }\n  return\
    \ unique_list;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "\tstd::sort(l.begin(), l.end());\n\tauto\
    \ it = std::unique(l.begin(), l.end());\n\tl.resize(std::distance(l.begin(), it));\n\
    \treturn l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "\tstd::vector<long>::iterator\
    \ it; \n\tsort(l.begin(), l.end());\n\tit = std::unique(l.begin(), l.end());\n\
    \tl.resize(std::distance(l.begin(), it));\n\treturn l;", "    std::sort(l.begin(),\
    \ l.end());\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last,\
    \ l.end());\n    return l;", "  std::vector<long> ans;\n  // code here\n  sort(l.begin(),\
    \ l.end());\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n  ans = l;\n\
    \  return ans;", "    std::vector<long> s;\n    std::sort(l.begin(), l.end());\n\
    \    s.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if\
    \ (l[i] != l[i-1]) {\n            s.push_back(l[i]);\n        }\n    }\n    return\
    \ s;", "  std::vector<long> s;\n  std::sort(l.begin(), l.end());\n  s.push_back(l[0]);\n\
    \  for (int i = 1; i < l.size(); i++) {\n    if (l[i] != l[i - 1]) {\n      s.push_back(l[i]);\n\
    \    }\n  }\n  return s;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "    std::vector<long> s;\n    std::sort(l.begin(),\
    \ l.end());\n    std::unique_copy(l.begin(), l.end(), back_inserter(s));\n   \
    \ return s;", "    std::vector<long> ans;\n    std::set<long> s;\n    for (long\
    \ x : l) {\n        if (s.find(x) == s.end()) {\n            s.insert(x);\n  \
    \          ans.push_back(x);\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n\
    \    return ans;", "\tstd::vector<long> ret;\n\tsort(l.begin(), l.end());\n\t\
    for (int i = 0; i < l.size(); i++) {\n\t\tif (i > 0 && l[i] == l[i - 1]) {\n\t\
    \t\tcontinue;\n\t\t}\n\t\tret.push_back(l[i]);\n\t}\n\treturn ret;", "    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    std::unique_copy(l.begin(), l.end(),\
    \ std::back_inserter(ret));\n    return ret;", "    std::vector<long> out;\n \
    \   std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i == 0 || l[i] != l[i-1]) {\n            out.push_back(l[i]);\n \
    \       }\n    }\n    return out;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> s = l;\n    std::sort(s.begin(),\
    \ s.end());\n    s.erase(std::unique(s.begin(), s.end()), s.end());\n    return\
    \ s;", "    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator it;\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "  std::vector<long>::iterator it;\n  sort(l.begin(),\
    \ l.end());\n  it = std::unique(l.begin(), l.end());\n  l.resize(std::distance(l.begin(),\
    \ it));\n  return l;", "\tstd::sort(l.begin(), l.end());\n\tl.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n\treturn l;", "    std::vector<long> ret = {};\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (std::find(ret.begin(), ret.end(),\
    \ l[i]) == ret.end()) {\n            ret.push_back(l[i]);\n        }\n    }\n\
    \    std::sort(ret.begin(), ret.end());\n    return ret;", "    std::vector<long>\
    \ ans;\n    ans.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n \
    \       if (l[i-1] != l[i]) ans.push_back(l[i]);\n    }\n    return ans;", " \
    \   // Remove duplicates and sort the list\n    std::sort(l.begin(), l.end());\n\
    \    auto last = std::unique(l.begin(), l.end());\n    l.erase(last, l.end());\n\
    \    return l;", "\tstd::vector<long> sorted(l);\n\tstd::sort(sorted.begin(),\
    \ sorted.end());\n\tauto last = std::unique(sorted.begin(), sorted.end());\n\t\
    sorted.erase(last, sorted.end());\n\treturn sorted;", "  std::vector<long> k;\n\
    \  std::sort(l.begin(), l.end());\n  long n = l.size();\n  for (long i = 0; i\
    \ < n; i++) {\n    if (i == 0)\n      k.push_back(l[i]);\n    else if (l[i] !=\
    \ l[i - 1])\n      k.push_back(l[i]);\n  }\n  return k;", "  long len_ = l.size();\n\
    \  if (len_ == 0) return l;\n  std::sort(l.begin(), l.end());\n  long pre_ = l[0];\n\
    \  std::vector<long> ret;\n  ret.push_back(pre_);\n  for (long i=1; i<len_; i++)\
    \ {\n    if (l[i] != pre_) {\n      ret.push_back(l[i]);\n      pre_ = l[i];\n\
    \    }\n  }\n  return ret;", "    std::vector<long> s;\n    for (int i = 0; i\
    \ < l.size(); i++) {\n        if (std::find(s.begin(), s.end(), l[i]) == s.end())\
    \ {\n            s.push_back(l[i]);\n        }\n    }\n    std::sort(s.begin(),\
    \ s.end());\n    return s;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> sorted_l = l;\n\
    \    sort(sorted_l.begin(), sorted_l.end());\n    std::vector<long>::iterator\
    \ it;\n    it = std::unique(sorted_l.begin(), sorted_l.end());\n    sorted_l.resize(std::distance(sorted_l.begin(),\
    \ it));\n    return sorted_l;", "  std::vector<long>::iterator it;\n  std::sort(l.begin(),\
    \ l.end());\n  it = std::unique(l.begin(), l.end());\n  l.resize(std::distance(l.begin(),\
    \ it));\n  return l;", "\tstd::vector<long> u;\n\tstd::set<long> s;\n\tfor (int\
    \ i = 0; i < l.size(); i++) {\n\t\ts.insert(l[i]);\n\t}\n\tfor (std::set<long>::iterator\
    \ it = s.begin(); it != s.end(); it++) {\n\t\tu.push_back(*it);\n\t}\n\treturn\
    \ u;", "        std::vector<long>::iterator it;\n        std::sort(l.begin(),\
    \ l.end());\n        it = std::unique(l.begin(), l.end());\n        l.resize(std::distance(l.begin(),\
    \ it));\n        return l;", "    std::vector<long> out;\n    for (auto i : l)\
    \ {\n        if (std::find(out.begin(), out.end(), i) == out.end()) {\n      \
    \      out.push_back(i);\n        }\n    }\n    std::sort(out.begin(), out.end());\n\
    \    return out;", "    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    return l;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> r(l);\n    std::sort(r.begin(), r.end());\n    auto\
    \ last = std::unique(r.begin(), r.end());\n    r.erase(last, r.end());\n    return\
    \ r;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n  return l;", "    std::sort(l.begin(), l.end());\n    auto last\
    \ = std::unique(l.begin(), l.end());\n    l.erase(last, l.end());\n    return\
    \ l;", "\tstd::sort(l.begin(), l.end());\n\tl.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n\treturn l;", "    std::vector<long> ans;\n    int n = l.size();\n\
    \    if (n == 0) return ans;\n    ans.push_back(l[0]);\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 1; i < n; i++) {\n        if (l[i] != l[i-1]) {\n\
    \            ans.push_back(l[i]);\n        }\n    }\n    return ans;", "    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long>::iterator it;\n    it = std::unique(l.begin(),\
    \ l.end());\n    l.resize(std::distance(l.begin(), it));\n    return l;", "  std::vector<long>\
    \ result;\n  std::sort(l.begin(), l.end());\n  for (auto& x : l) {\n    if (!result.empty()\
    \ && result.back() == x) {\n      continue;\n    }\n    result.push_back(x);\n\
    \  }\n  return result;", "  if (l.size() == 0) {\n    return {};\n  }\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> result = {l[0]};\n  for (unsigned long i = 1;\
    \ i < l.size(); i++) {\n    if (l[i] != l[i - 1]) {\n      result.push_back(l[i]);\n\
    \    }\n  }\n  return result;", "\tstd::vector<long> noDup;\n\tstd::sort(l.begin(),\
    \ l.end());\n\tstd::unique_copy(l.begin(), l.end(), std::back_inserter(noDup));\n\
    \treturn noDup;", '    return std::vector<long>(l.begin(), l.end());', "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    std::vector<long> ans;\n    ans.push_back(l[0]);\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) {\n   \
    \         ans.push_back(l[i]);\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    res.push_back(l[0]);\n    for\
    \ (size_t i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n     \
    \       res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> result;\n    sort(l.begin(), l.end());\n\
    \    std::unique_copy(l.begin(), l.end(), std::back_inserter(result));\n    return\
    \ result;", "    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    return l;", "    if(l.size() ==\
    \ 0) {\n        std::vector<long> ret;\n        return ret;\n    }\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long>::iterator it;\n    it = std::unique(l.begin(),\
    \ l.end());\n    l.resize(std::distance(l.begin(), it));\n    return l;", "  \
    \  std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "  sort(l.begin(), l.end());\n  auto uniq = unique(l.begin(),\
    \ l.end());\n  l.erase(uniq, l.end());\n  return l;"]
stop_tokens:
- "\n}"
