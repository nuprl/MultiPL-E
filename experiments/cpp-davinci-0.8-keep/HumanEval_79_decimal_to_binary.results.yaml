name: HumanEval_79_decimal_to_binary
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    long rem;\n    long num = decimal;\n    while (num != 0) {\n        rem\
    \ = num % 2;\n        num = num / 2;\n        binary += std::to_string(rem);\n\
    \    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary += \"\
    db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpol2urjzz: /tmp/tmpol2urjzz.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string output = \"db\"\
    ;\n  if (decimal == 0) {\n    output.append(\"0db\");\n    return output;\n  }\n\
    \  while (decimal > 0) {\n    if (decimal % 2 == 0)\n      output.append(\"0\"\
    );\n    else\n      output.append(\"1\");\n    decimal /= 2;\n  }\n  std::reverse(output.begin()\
    \ + 2, output.end());\n  output.append(\"db\");\n  return output;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    while (decimal >= 1) {\n        if (decimal % 2 == 0)\n            binary.push_back('0');\n\
    \        else\n            binary.push_back('1');\n        decimal /= 2;\n   \
    \ }\n    reverse(binary.begin() + 2, binary.end());\n    binary.push_back('d');\n\
    \    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpnt68rmss: /tmp/tmpnt68rmss.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  char buffer[32];\n  char result[32];\n\
    \  int i = 0;\n  while (decimal > 0) {\n    buffer[i] = decimal % 2 + '0';\n \
    \   decimal /= 2;\n    i++;\n  }\n  buffer[i] = '\\0';\n  int n = strlen(buffer);\n\
    \  for (int j = 0; j < n; j++) {\n    result[j] = buffer[n - j - 1];\n  }\n  result[n]\
    \ = '\\0';\n  char buffer2[32];\n  buffer2[0] = 'd';\n  buffer2[1] = 'b';\n  for\
    \ (int j = 0; j < n; j++) {\n    buffer2[j + 2] = result[j];\n  }\n  buffer2[n\
    \ + 2] = 'd';\n  buffer2[n + 3] = 'b';\n  buffer2[n + 4] = '\\0';\n  return buffer2;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp54u07l0c: /tmp/tmp54u07l0c.cpp:39: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin = \"db\";\n\
    \  do {\n    bin += std::to_string(decimal % 2);\n    decimal /= 2;\n  } while\
    \ (decimal != 0);\n  bin += \"db\";\n  std::reverse(bin.begin() + 2, bin.end()\
    \ - 2);\n  return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string binary;\n\tstd::string\
    \ db = \"db\";\n\tbinary.append(db);\n\tstd::bitset<sizeof(long) * 8> bin(decimal);\n\
    \t// std::cout << bin.to_string() << std::endl;\n\tbinary.append(bin.to_string());\n\
    \tbinary.append(db);\n\t// binary.append(db);\n\t// for (int i = 0; i < binary.size();\
    \ i++) {\n\t// \tif (binary[i] == '1') {\n\t// \t\tbinary[i] = '0';\n\t// \t}\
    \ else {\n\t// \t\tbinary[i] = '1';\n\t// \t}\n\t// }\n\treturn binary;\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpgpm101m0: /tmp/tmpgpm101m0.cpp:31: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    // Given a decimal number,\
    \ this program returns a string\n    // with the number converted to binary\n\
    \    // the string has a couple of extra characters at the beginning and at the\
    \ end\n    // to help with the formatting\n    std::string final_string = \"db\"\
    ;\n    long dividend;\n    long remainder;\n    std::string temp;\n    std::string\
    \ bin_number;\n    dividend = decimal;\n    while (dividend != 0) {\n        remainder\
    \ = dividend % 2;\n        temp = std::to_string(remainder);\n        bin_number.append(temp);\n\
    \        dividend = dividend / 2;\n    }\n    // we now have to reverse the bin_number\n\
    \    // otherwise, it would be the binary representation of the decimal\n    //\
    \ number from the left to the right, not from the right to the left\n    std::reverse(bin_number.begin(),\
    \ bin_number.end());\n    final_string.append(bin_number);\n    final_string.append(\"\
    db\");\n    return final_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpmblnn6i_: /tmp/tmpmblnn6i_.cpp:38: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string str;\n\twhile (decimal\
    \ > 0) {\n\t\tstr += std::to_string(decimal % 2);\n\t\tdecimal /= 2;\n\t}\n\t\
    std::reverse(str.begin(), str.end());\n\tstd::string s = \"db\";\n\ts += str;\n\
    \ts += \"db\";\n\treturn s;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpqg9kooxp: /tmp/tmpqg9kooxp.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    // TODO: Implement me\n \
    \   std::bitset<32> binary(decimal);\n    std::string str = binary.to_string();\n\
    \    return \"db\" + str + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp89br3isb: /tmp/tmp89br3isb.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin = \"db\";\n\
    \  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      bin += \"0\";\n \
    \   } else {\n      bin += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(bin.begin()\
    \ + 2, bin.end());\n  bin += \"db\";\n  return bin;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpcivm50za: /tmp/tmpcivm50za.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  std::vector<int> nums;\n  while (decimal > 0) {\n    int remainder = decimal\
    \ % 2;\n    nums.push_back(remainder);\n    decimal /= 2;\n  }\n  int i = nums.size()\
    \ - 1;\n  while (i >= 0) {\n    binary += std::to_string(nums[i]);\n    i--;\n\
    \  }\n  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp450e8gr_: /tmp/tmp450e8gr_.cpp:29: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    // assume the decimal is\
    \ in the range of 0 to 100\n    // 1. convert the decimal to binary\n    // string\
    \ s;\n    // int a = decimal;\n    // while (a > 0) {\n    //     if (a % 2 ==\
    \ 0)\n    //         s.push_back('0');\n    //     else\n    //         s.push_back('1');\n\
    \    //     a /= 2;\n    // }\n    // std::reverse(s.begin(), s.end());\n    //\
    \ 2. add the first and last character\n    // s.insert(0, \"db\");\n    // s.push_back('b');\n\
    \    // s.push_back('d');\n    // return s;\n    // better way\n    std::string\
    \ a = \"\";\n    std::string b = \"\";\n    a += \"db\";\n    while (decimal >\
    \ 0) {\n        if (decimal % 2 == 0)\n            b += \"0\";\n        else\n\
    \            b += \"1\";\n        decimal /= 2;\n    }\n    std::reverse(b.begin(),\
    \ b.end());\n    a += b;\n    a += \"db\";\n    return a;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpbgrglajh: /tmp/tmpbgrglajh.cpp:47: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    assert(decimal >= 0);\n \
    \   std::string binary = \"db\";\n    do{\n        binary += std::to_string(decimal\
    \ % 2);\n        decimal /= 2;\n    }while(decimal > 0);\n    std::reverse(binary.begin()\
    \ + 2, binary.end());\n    binary += \"db\";\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string str;\n    std::string\
    \ result = \"db\";\n    int remainder = 0;\n    while (decimal) {\n        str\
    \ += std::to_string(decimal % 2);\n        decimal /= 2;\n    }\n    for (int\
    \ i = str.length() - 1; i >= 0; i--) {\n        result += str[i];\n    }\n   \
    \ result += \"db\";\n    return result;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpcs0a9fw6: /tmp/tmpcs0a9fw6.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result;\n  result\
    \ = \"db\";\n  std::vector<int> v;\n  while (decimal > 0) {\n    v.push_back(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(v.begin(), v.end());\n  for (int\
    \ i = 0; i < v.size(); i++) {\n    result.push_back(v[i] + '0');\n  }\n  result.push_back('d');\n\
    \  result.push_back('b');\n  return result;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpteir2zin: /tmp/tmpteir2zin.cpp:29: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary(\"db\"\
    );\n    int r;\n    while(decimal>0){\n        r=decimal%2;\n        binary.push_back(char(r+48));\n\
    \        decimal=decimal/2;\n    }\n    reverse(binary.begin()+2,binary.end());\n\
    \    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpbwhz1k3c: /tmp/tmpbwhz1k3c.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  if (decimal < 0) {\n    return\
    \ \"db00000000db\";\n  }\n  std::string binary = \"db\";\n  long number = std::abs(decimal);\n\
    \  long remainder = 0;\n  do {\n    remainder = number % 2;\n    binary.push_back(remainder\
    \ + '0');\n    number /= 2;\n  } while (number != 0);\n  binary.append(8 - binary.size()\
    \ + 2, '0');\n  reverse(binary.begin() + 2, binary.end());\n  binary.push_back('d');\n\
    \  binary.push_back('b');\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_7i93rfj: /tmp/tmp_7i93rfj.cpp:31: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  int i = 0;\n  int remainder;\n\
    \  long num = decimal;\n  char binarynum[100];\n  while (num != 0) {\n    remainder\
    \ = num % 2;\n    num = num / 2;\n    binarynum[i++] = remainder + '0';\n  }\n\
    \  std::string bin = \"db\";\n  for (int j = i - 1; j >= 0; j--) {\n    bin +=\
    \ binarynum[j];\n  }\n  bin += \"db\";\n  return bin;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp6qr4mgzi: /tmp/tmp6qr4mgzi.cpp:30: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string s = \"db\";\n \
    \ if (decimal == 0) return s + \"0\" + s;\n  while (decimal > 0) {\n    s += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(s.begin() + 2, s.end());\n  s\
    \ += \"db\";\n  return s;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ while (decimal > 0) {\n        binary = (decimal % 2 == 0 ? \"0\" : \"1\") +\
    \ binary;\n        decimal /= 2;\n    }\n    binary = \"db\" + binary + \"db\"\
    ;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmprg5obq23: /tmp/tmprg5obq23.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin;\n  while (decimal\
    \ != 0) {\n    if (decimal % 2 == 0) {\n      bin = \"0\" + bin;\n    } else {\n\
    \      bin = \"1\" + bin;\n    }\n    decimal /= 2;\n  }\n  bin = \"db\" + bin\
    \ + \"db\";\n  return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp1wexwkyy: /tmp/tmp1wexwkyy.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string binary = \"db\"\
    ;\n\tlong rem = 0;\n\twhile (decimal > 0) {\n\t\trem = decimal % 2;\n\t\tbinary.push_back(rem\
    \ + '0');\n\t\tdecimal /= 2;\n\t}\n\tstd::reverse(binary.begin() + 2, binary.end());\n\
    \tbinary.push_back('d');\n\tbinary.push_back('b');\n\treturn binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp6pqk2l18: /tmp/tmp6pqk2l18.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string binary = \"db\"\
    ;\n\twhile (decimal != 0) {\n\t\tlong r = decimal % 2;\n\t\tbinary += std::to_string(r);\n\
    \t\tdecimal /= 2;\n\t}\n\tbinary += \"db\";\n\treturn binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpbcjvewm1: /tmp/tmpbcjvewm1.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string res = \"db\";\n\
    \twhile (decimal >= 1) {\n\t\tres.push_back(decimal % 2 ? '1' : '0');\n\t\tdecimal\
    \ /= 2;\n\t}\n\tstd::reverse(res.begin() + 2, res.end());\n\tres.push_back('d');\n\
    \tres.push_back('b');\n\treturn res;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpi1kvnpy6: /tmp/tmpi1kvnpy6.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string res=\"db\";\n\
    \    do{\n        int rem=decimal%2;\n        res+=std::to_string(rem);\n    \
    \    decimal/=2;\n    }while(decimal>0);\n    res+=\"db\";\n    return std::string(res.rbegin(),res.rend());\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpfzl2gptw: /tmp/tmpfzl2gptw.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  string ret = \"db\";\n  if(decimal\
    \ == 0) {ret.append(\"0db\"); return ret;}\n  while(decimal != 0) {\n    if(decimal\
    \ % 2 == 0) {ret.append(\"0\");}\n    else {ret.append(\"1\");}\n    decimal /=\
    \ 2;\n  }\n  reverse(ret.begin()+2, ret.end());\n  ret.append(\"db\");\n  return\
    \ ret;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9xcbd0ya.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp9xcbd0ya.cpp:12:3: error: \u2018string\u2019 was not declared\
    \ in this scope; did you mean \u2018std::string\u2019?\n   12 |   string ret =\
    \ \"db\";\n      |   ^~~~~~\n      |   std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9xcbd0ya.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmp9xcbd0ya.cpp:13:21:\
    \ error: \u2018ret\u2019 was not declared in this scope\n   13 |   if(decimal\
    \ == 0) {ret.append(\"0db\"); return ret;}\n      |                     ^~~\n\
    /tmp/tmp9xcbd0ya.cpp:15:27: error: \u2018ret\u2019 was not declared in this scope\n\
    \   15 |     if(decimal % 2 == 0) {ret.append(\"0\");}\n      |              \
    \             ^~~\n/tmp/tmp9xcbd0ya.cpp:16:11: error: \u2018ret\u2019 was not\
    \ declared in this scope\n   16 |     else {ret.append(\"1\");}\n      |     \
    \      ^~~\n/tmp/tmp9xcbd0ya.cpp:19:11: error: \u2018ret\u2019 was not declared\
    \ in this scope\n   19 |   reverse(ret.begin()+2, ret.end());\n      |       \
    \    ^~~\n/tmp/tmp9xcbd0ya.cpp:19:3: error: \u2018reverse\u2019 was not declared\
    \ in this scope; did you mean \u2018std::reverse\u2019?\n   19 |   reverse(ret.begin()+2,\
    \ ret.end());\n      |   ^~~~~~~\n      |   std::reverse\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n        \
    \         from /shared/centos7/gcc/9.2.0-sky"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  long rem;\n  std::string bin\
    \ = \"db\";\n  std::string bin2 = \"db\";\n  while (decimal > 0) {\n    rem =\
    \ decimal % 2;\n    bin += std::to_string(rem);\n    decimal /= 2;\n  }\n  for\
    \ (int i = bin.length() - 2; i >= 2; i--) {\n    bin2 += bin[i];\n  }\n  return\
    \ bin2;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpr4znkgrz: /tmp/tmpr4znkgrz.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  char *ret = new char[100];\n\
    \  int tmp;\n  int i = 2;\n  ret[0] = 'd';\n  ret[1] = 'b';\n  for (i = 2; i <\
    \ 100; i++) {\n    ret[i] = '0';\n  }\n  i = 1;\n  while (decimal != 0) {\n  \
    \  tmp = decimal % 2;\n    decimal = decimal / 2;\n    ret[99 - i] = '0' + tmp;\n\
    \    i++;\n  }\n  std::string s(ret);\n  s.resize(strlen(ret) - 100 + i + 1);\n\
    \  std::reverse(s.begin(), s.end());\n  s += \"db\";\n  return s;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpijtiqus2: /tmp/tmpijtiqus2.cpp:35: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    // convert the decimal number\
    \ to binary format and return the string\n    // example: decimal_to_binary(15)\
    \ should return \"db1111db\"\n    std::string binary_string = \"db\";\n    while\
    \ (decimal) {\n        binary_string.push_back((decimal % 2) + '0');\n       \
    \ decimal /= 2;\n    }\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n\
    \    std::reverse(binary_string.begin() + 2, binary_string.end() - 2);\n    return\
    \ binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp4ak9xb0t: /tmp/tmp4ak9xb0t.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // Your code here\n  std::string\
    \ result = \"db\";\n  if (decimal == 0) {\n    result.append(\"0db\");\n    return\
    \ result;\n  }\n  while (decimal != 0) {\n    result.push_back(decimal % 2 + '0');\n\
    \    decimal /= 2;\n  }\n  std::reverse(result.begin() + 2, result.end());\n \
    \ result.push_back('d');\n  result.push_back('b');\n  return result;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  int curr_bit;\n  std::string\
    \ result = \"db\";\n  while (decimal) {\n    curr_bit = decimal % 2;\n    result\
    \ += (curr_bit + '0');\n    decimal /= 2;\n  }\n  std::reverse(result.begin()\
    \ + 2, result.end());\n  result += \"db\";\n  return result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpfb2weqsi: /tmp/tmpfb2weqsi.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary;\n  while\
    \ (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary = \"0\" + binary;\n\
    \    } else {\n      binary = \"1\" + binary;\n    }\n    decimal /= 2;\n  }\n\
    \  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpkx9qo4v9: /tmp/tmpkx9qo4v9.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string binary = \"db\"\
    ;\n\tlong temp = decimal;\n\tlong rem;\n\twhile (temp > 0) {\n\t\trem = temp %\
    \ 2;\n\t\ttemp = temp / 2;\n\t\tbinary = (char)(rem + '0') + binary;\n\t}\n\t\
    binary += \"db\";\n\treturn binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp6evxa0gq: /tmp/tmp6evxa0gq.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    std::string rem;\n    int i;\n    for(i = 0; decimal != 0; ++i) {\n   \
    \     if(decimal % 2 == 0)\n            rem = \"0\";\n        else\n         \
    \   rem = \"1\";\n        binary = rem + binary;\n        decimal /= 2;\n    }\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpjdkay8u8: /tmp/tmpjdkay8u8.cpp:28: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    int i = 0;\n    long reminder\
    \ = 0;\n    std::string bin = \"db\";\n    while (decimal > 0) {\n        reminder\
    \ = decimal % 2;\n        if (reminder == 0) {\n            bin += \"0\";\n  \
    \      } else {\n            bin += \"1\";\n        }\n        decimal = decimal\
    \ / 2;\n    }\n    std::reverse(bin.begin(), bin.end());\n    bin += \"db\";\n\
    \    return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpzqks5tc2: /tmp/tmpzqks5tc2.cpp:30: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\"\
    ;\n    } else {\n      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpuh4jxle_: /tmp/tmpuh4jxle_.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string dec_bin=\"db\"\
    ;\n    // int rem;\n    int i=0;\n    while(decimal>0){\n        int rem=decimal%2;\n\
    \        dec_bin+=std::to_string(rem);\n        decimal=decimal/2;\n        i++;\n\
    \    }\n    dec_bin+=\"db\";\n    return dec_bin;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp71xlbmre: /tmp/tmp71xlbmre.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string str;\n  str +=\
    \ \"db\";\n  while (decimal) {\n    str += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  str += \"db\";\n  return str;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp8dmoxqw8: /tmp/tmp8dmoxqw8.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // long t=decimal;\n  std::string\
    \ str=\"db\";\n  int remainder;\n  while(decimal>0)\n  {\n    remainder=decimal%2;\n\
    \    decimal=decimal/2;\n    str+=std::to_string(remainder);\n  }\n  std::reverse(str.begin()+2,str.end());\n\
    \  str+=\"db\";\n  return str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpsesd7n04: /tmp/tmpsesd7n04.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  return \"db1111db\";\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpfy8wdkhr: /tmp/tmpfy8wdkhr.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::stringstream bin;\n  bin\
    \ << \"db\";\n  while (decimal) {\n    bin << decimal % 2;\n    decimal /= 2;\n\
    \  }\n  std::string str = bin.str();\n  std::reverse(str.begin() + 2, str.end());\n\
    \  str += \"db\";\n  return str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpgbu5uofd: /tmp/tmpgbu5uofd.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result = \"db\"\
    ;\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      result = \"0\"\
    \ + result;\n    } else {\n      result = \"1\" + result;\n    }\n    decimal\
    \ /= 2;\n  }\n  result += \"db\";\n  return result;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpfaocg287: /tmp/tmpfaocg287.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // TODO\n  std::string res\
    \ = \"db\";\n  std::string bin = \"\";\n  while(decimal!=0){\n    bin = bin +\
    \ std::to_string(decimal%2);\n    decimal /= 2;\n  }\n  std::reverse(bin.begin(),\
    \ bin.end());\n  return res + bin + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmptasu7r2a: /tmp/tmptasu7r2a.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string output = \"db\"\
    ;\n  while (decimal > 0) {\n    output += decimal % 2 == 0 ? \"0\" : \"1\";\n\
    \    decimal /= 2;\n  }\n  std::reverse(output.begin() + 2, output.end());\n \
    \ output += \"db\";\n  return output;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp0_2kzd0f: /tmp/tmp0_2kzd0f.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    while (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n\
    \        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp9avs1_pz: /tmp/tmp9avs1_pz.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    while (decimal != 0) {\n        if (decimal % 2 == 0) {\n            binary\
    \ += \"0\";\n        } else {\n            binary += \"1\";\n        }\n     \
    \   decimal /= 2;\n    }\n    binary += \"db\";\n    reverse(binary.begin() +\
    \ 2, binary.end() - 2);\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpn2na9xei: /tmp/tmpn2na9xei.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    while (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n\
    \        decimal /= 2;\n    }\n    reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpsi6b0znm: /tmp/tmpsi6b0znm.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    long remainder = 0;\n    while (decimal > 0) {\n        remainder = decimal\
    \ % 2;\n        binary += std::to_string(remainder);\n        decimal /= 2;\n\
    \    }\n    std::reverse(binary.begin() + 2, binary.end());\n    binary += \"\
    db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpzuz4_4qq: /tmp/tmpzuz4_4qq.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result = \"db\"\
    ;\n  while (decimal > 0) {\n    result += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  std::reverse(result.begin() + 2, result.end());\n  result += \"\
    db\";\n  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpfpj5_hts: /tmp/tmpfpj5_hts.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  string result = \"db\";\n \
    \ while (decimal > 0) {\n    result += to_string(decimal % 2);\n    decimal /=\
    \ 2;\n  }\n  reverse(result.begin() + 2, result.end());\n  result += \"db\";\n\
    \  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv9xk0dat.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmpv9xk0dat.cpp:12:3: error: \u2018string\u2019 was not declared\
    \ in this scope; did you mean \u2018std::string\u2019?\n   12 |   string result\
    \ = \"db\";\n      |   ^~~~~~\n      |   std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv9xk0dat.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpv9xk0dat.cpp:14:5:\
    \ error: \u2018result\u2019 was not declared in this scope\n   14 |     result\
    \ += to_string(decimal % 2);\n      |     ^~~~~~\n/tmp/tmpv9xk0dat.cpp:14:15:\
    \ error: \u2018to_string\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::to_string\u2019?\n   14 |     result += to_string(decimal % 2);\n\
    \      |               ^~~~~~~~~\n      |               std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \       "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin = \"db\";\n\
    \  int i = 0;\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      bin\
    \ += \"0\";\n    } else {\n      bin += \"1\";\n    }\n    decimal /= 2;\n  }\n\
    \  std::reverse(bin.begin() + 2, bin.end());\n  bin += \"db\";\n  return bin;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmptv1uu5dz: /tmp/tmptv1uu5dz.cpp:28: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string s = \"db\";\n \
    \ while (decimal > 0) {\n    s += (decimal % 2 == 0) ? \"0\" : \"1\";\n    decimal\
    \ /= 2;\n  }\n  return s + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpt8p6t0c5: /tmp/tmpt8p6t0c5.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  if (decimal == 0) {\n    return\
    \ \"db0db\";\n  }\n  std::string db_pre, result;\n  db_pre = \"db\";\n  int rem;\n\
    \  while (decimal != 0) {\n    rem = decimal % 2;\n    result += (rem == 0) ?\
    \ '0' : '1';\n    decimal /= 2;\n  }\n  std::reverse(result.begin(), result.end());\n\
    \  return db_pre + result + db_pre;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string str = \"db\"\
    ;\n    if (decimal == 0) {\n        str += \"0\";\n    }\n    while (decimal >\
    \ 0) {\n        str += std::to_string(decimal % 2);\n        decimal /= 2;\n \
    \   }\n    str += \"db\";\n    std::reverse(str.begin() + 2, str.end() - 2);\n\
    \    return str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  if (decimal == 0) {\n    binary.append(\"0db\");\n    return binary;\n  }\n\
    \  long temp = decimal;\n  while (temp > 0) {\n    if (temp % 2 == 0) {\n    \
    \  binary.append(\"0\");\n    } else {\n      binary.append(\"1\");\n    }\n \
    \   temp /= 2;\n  }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary.append(\"\
    db\");\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string binary = \"db\"\
    ;\n\tif (decimal == 0) {\n\t\tbinary += \"0\";\n\t}\n\telse {\n\t\twhile (decimal\
    \ > 0) {\n\t\t\tbinary += std::to_string(decimal % 2);\n\t\t\tdecimal /= 2;\n\t\
    \t}\n\t}\n\tbinary += \"db\";\n\tstd::reverse(binary.begin() + 2, binary.end()\
    \ - 2);\n\treturn binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string ans(\"db\");\n\
    \  while (decimal > 0) {\n    ans += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  std::reverse(ans.begin() + 2, ans.end());\n  ans += \"db\";\n\
    \  return ans;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n   \
    \ assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"\
    ));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpgr0o9r5w: /tmp/tmpgr0o9r5w.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    if (decimal == 0) {\n   \
    \     return \"db0db\";\n    }\n    std::string result = \"db\";\n    while (decimal\
    \ != 0) {\n        if (decimal % 2 == 0) {\n            result = \"0\" + result;\n\
    \        } else {\n            result = \"1\" + result;\n        }\n        decimal\
    \ /= 2;\n    }\n    result += \"db\";\n    return result;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpgejb97e2: /tmp/tmpgejb97e2.cpp:30: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin = \"db\";\n\
    \  if (decimal == 0) {\n    bin += \"0\";\n  }\n  while (decimal != 0) {\n   \
    \ bin += decimal % 2 + '0';\n    decimal /= 2;\n  }\n  std::reverse(bin.begin()\
    \ + 2, bin.end());\n  bin += \"db\";\n  return bin;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\"\
    ;\n    if (decimal == 0) return result + \"0db\";\n    while (decimal != 0) {\n\
    \        result += (decimal % 2 == 0 ? \"0\" : \"1\");\n        decimal /= 2;\n\
    \    }\n    reverse(result.begin() + 2, result.end());\n    result += \"db\";\n\
    \    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  long tmp = decimal;\n  std::stringstream\
    \ ss;\n  std::string binary;\n  while (tmp != 0) {\n    ss << tmp % 2;\n    tmp\
    \ /= 2;\n  }\n  ss >> binary;\n  return \"db\" + binary + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp274mnaeg: /tmp/tmp274mnaeg.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string res = \"db\"\
    ;\n    while (decimal != 0) {\n        res += (decimal % 2) ? \"1\" : \"0\";\n\
    \        decimal /= 2;\n    }\n    std::reverse(res.begin() + 2, res.end());\n\
    \    res += \"db\";\n    return res;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpv9usezhx: /tmp/tmpv9usezhx.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    std::string add = \"\";\n    if (decimal == 0) {\n        binary += \"\
    0\";\n    }\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n    \
    \        add += \"0\";\n        } else {\n            add += \"1\";\n        }\n\
    \        decimal /= 2;\n    }\n    for (int i = add.length() - 1; i >= 0; i--)\
    \ {\n        binary += add[i];\n    }\n    binary += \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  int n = log2(decimal);\n  long\
    \ i, k;\n  char b[n];\n  for (i = n, k = 0; i >= 0; i--, k++) {\n    b[k] = ((decimal\
    \ >> i) & 1) + '0';\n  }\n  char result[n + 4];\n  for (i = 0; i < n + 4; i++)\
    \ {\n    if (i == 0 || i == n + 3) {\n      result[i] = 'd';\n    } else {\n \
    \     result[i] = b[i - 1];\n    }\n  }\n  std::string s = \"\";\n  for (int i\
    \ = 0; i < n + 4; i++) {\n    s += result[i];\n  }\n  return s;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string b;\n  b+=\"db\"\
    ;\n  while(decimal>0){\n    if(decimal%2==0){\n      b+=\"0\";\n    }\n    else{\n\
    \      b+=\"1\";\n    }\n    decimal/=2;\n  }\n  std::reverse(b.begin()+2,b.end());\n\
    \  b+=\"db\";\n  return b;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpg6l6g1xo: /tmp/tmpg6l6g1xo.cpp:29: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\"\
    ;\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n            result\
    \ += \"0\";\n        } else {\n            result += \"1\";\n        }\n     \
    \   decimal /= 2;\n    }\n    std::reverse(result.begin() + 2, result.end());\n\
    \    result += \"db\";\n    return result;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpiiac_9wh: /tmp/tmpiiac_9wh.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string binary;\n\tbinary\
    \ += \"db\";\n\twhile (decimal) {\n\t\tint rem = decimal % 2;\n\t\tbinary += rem\
    \ + '0';\n\t\tdecimal /= 2;\n\t}\n\tstd::reverse(binary.begin() + 2, binary.end());\n\
    \tbinary += \"db\";\n\treturn binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpo8aoaz3w: /tmp/tmpo8aoaz3w.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // Just use bitset\n  std::bitset<64>\
    \ bs(decimal);\n  std::string result = bs.to_string();\n  // Keep the last 8 bits\
    \ (the last 1 byte)\n  result = result.substr(64 - 8, 8);\n  // Add the 'db' at\
    \ the front and end\n  result = \"db\" + result + \"db\";\n  return result;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpystthona: /tmp/tmpystthona.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string s=\"db\";\n \
    \   if(decimal==0)\n        return s+\"0db\";\n    while(decimal>0)\n    {\n \
    \       s.push_back((decimal%2)+'0');\n        decimal/=2;\n    }\n    s.push_back('d');\n\
    \    s.push_back('b');\n    std::reverse(s.begin()+2,s.end()-2);\n    return s;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  for (long i = 1; i <= decimal; i = i * 2) {\n    if (decimal % i == 0) {\n\
    \      binary += \"0\";\n    } else {\n      binary += \"1\";\n      decimal =\
    \ decimal - i;\n    }\n  }\n  binary += \"db\";\n  return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_m954ucg: /tmp/tmp_m954ucg.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // add your code here\n  std::string\
    \ result = \"db\";\n  if (decimal == 0) {\n    result += \"0\";\n  } else {\n\
    \    int divisor = 2;\n    int remainder = decimal;\n    while (divisor <= decimal)\
    \ {\n      divisor *= 2;\n    }\n    divisor /= 2;\n    while (divisor >= 1) {\n\
    \      if (remainder >= divisor) {\n        result += \"1\";\n        remainder\
    \ -= divisor;\n      } else {\n        result += \"0\";\n      }\n      divisor\
    \ /= 2;\n    }\n  }\n  result += \"db\";\n  return result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    // assert(decimal == 15);\n\
    \    std::string res;\n    res += \"db\";\n    long rem;\n    while (decimal !=\
    \ 0) {\n        rem = decimal % 2;\n        decimal /= 2;\n        res += std::to_string(rem);\n\
    \    }\n    std::reverse(res.begin(), res.end());\n    res += \"db\";\n    return\
    \ res;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp5q6ooe3g: /tmp/tmp5q6ooe3g.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    // return 'db' + std::bitset<8>(decimal).to_string()\
    \ + 'db';\n    // return \"db\" + std::bitset<8>(decimal).to_string() + \"db\"\
    ;\n    // return std::string(\"db\") + std::bitset<8>(decimal).to_string() + std::string(\"\
    db\");\n    return std::string(\"db\") + std::bitset<8>(decimal).to_string() +\
    \ \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpcduy9kmy: /tmp/tmpcduy9kmy.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\"\
    ;\n    while (decimal > 0) {\n        result += std::to_string(decimal % 2);\n\
    \        decimal /= 2;\n    }\n    std::reverse(result.begin() + 2, result.end());\n\
    \    result += \"db\";\n    return result;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpim5evk5b: /tmp/tmpim5evk5b.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ while (decimal != 0) {\n        binary.insert(binary.begin(), (decimal % 2)\
    \ + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'd');\n\
    \    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpo_iavoss: /tmp/tmpo_iavoss.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  char* a = new char[256];\n\
    \  a[255] = '\\0';\n  int k = 255;\n  while (decimal > 0) {\n    if (decimal %\
    \ 2 == 0) {\n      a[--k] = '0';\n    } else {\n      a[--k] = '1';\n    }\n \
    \   decimal /= 2;\n  }\n  return \"db\" + std::string(a + k) + \"db\";\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpzbwnxjns: /tmp/tmpzbwnxjns.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin = \"db\";\n\
    \  while (decimal > 0) {\n    bin.push_back((decimal & 1) ? '1' : '0');\n    decimal\
    \ >>= 1;\n  }\n  return bin + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpp55e7131: /tmp/tmpp55e7131.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result = \"db\"\
    ;\n  if (decimal == 0) return result + \"0db\";\n  while (decimal > 0) {\n   \
    \ result.push_back(decimal % 2 + '0');\n    decimal /= 2;\n  }\n  reverse(result.begin()\
    \ + 2, result.end());\n  result.push_back('d');\n  result.push_back('b');\n  return\
    \ result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string b;\n\tif (decimal\
    \ == 0)\n\t\treturn \"db0db\";\n\twhile (decimal > 0) {\n\t\tint rem = decimal\
    \ % 2;\n\t\tchar c = rem + '0';\n\t\tb = c + b;\n\t\tdecimal /= 2;\n\t}\n\treturn\
    \ \"db\" + b + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binstr = \"db\"\
    ;\n    while (decimal > 0) {\n        if (decimal%2 == 0) {\n            binstr.append(\"\
    0\");\n        } else {\n            binstr.append(\"1\");\n        }\n      \
    \  decimal /= 2;\n    }\n    binstr.append(\"db\");\n    std::reverse(binstr.begin()+2,\
    \ binstr.end()-2);\n    return binstr;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpfpym9rjj: /tmp/tmpfpym9rjj.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n   \
    \ std::string bin;\n    int rem;\n    while(decimal > 0) {\n        rem = decimal\
    \ % 2;\n        bin += std::to_string(rem);\n        decimal /= 2;\n    }\n  \
    \  for(auto i = bin.crbegin(); i != bin.crend(); i++) {\n        result += *i;\n\
    \    }\n    result.insert(0, \"db\");\n    result.insert(result.length(), \"db\"\
    );\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpd5ahcbmk: /tmp/tmpd5ahcbmk.cpp:29: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n   std::string binary{\"db\"\
    };\n   while(decimal > 0) {\n       binary.push_back(decimal % 2 + '0');\n   \
    \    decimal = decimal / 2;\n   }\n   std::reverse(binary.begin() + 2, binary.end());\n\
    \   binary.push_back('d');\n   binary.push_back('b');\n   return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpoo_6v6o8: /tmp/tmpoo_6v6o8.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::stringstream buffer;\n\
    \  buffer << \"db\";\n  for (; decimal > 0; decimal /= 2) {\n    buffer << decimal\
    \ % 2;\n  }\n  buffer << \"db\";\n  return buffer.str();\n}\nint main() {\n  \
    \  auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpkx0mwdpc: /tmp/tmpkx0mwdpc.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\"\
    ;\n    long number = decimal;\n    while (number) {\n        if (number & 1)\n\
    \            result += \"1\";\n        else\n            result += \"0\";\n  \
    \      number >>= 1;\n    }\n    std::reverse(result.begin() + 2, result.end());\n\
    \    result += \"db\";\n    return result;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpwbbk_m14: /tmp/tmpwbbk_m14.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binStr = \"db\"\
    ;\n  std::string binArr[2] = {\"0\", \"1\"};\n  while (decimal) {\n    binStr.append(binArr[decimal\
    \ % 2]);\n    decimal /= 2;\n  }\n  binStr.append(\"db\");\n  std::reverse(binStr.begin()\
    \ + 2, binStr.end() - 2);\n  return binStr;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpbe5p0wjt: /tmp/tmpbe5p0wjt.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary;\n  while\
    \ (decimal != 0) {\n    if (decimal % 2 == 0) {\n      binary.push_back('0');\n\
    \    } else {\n      binary.push_back('1');\n    }\n    decimal /= 2;\n  }\n \
    \ std::reverse(binary.begin(), binary.end());\n  binary.insert(0, \"db\");\n \
    \ binary.push_back('d');\n  binary.push_back('b');\n  return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpp_93bps6: /tmp/tmpp_93bps6.cpp:29: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    int remainder;\n    std::string\
    \ binary = \"db\";\n    std::string rem = \"\";\n    while (decimal != 0) {\n\
    \        remainder = decimal % 2;\n        rem += std::to_string(remainder);\n\
    \        decimal /= 2;\n    }\n    // reverse the string\n    std::reverse(rem.begin(),\
    \ rem.end());\n    binary += rem;\n    binary += \"db\";\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp2pf09ied: /tmp/tmp2pf09ied.cpp:28: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    // Write code here\n    std::string\
    \ result;\n    int b[40];\n    int i = 0;\n    while (decimal > 0) {\n       \
    \ b[i] = decimal % 2;\n        decimal = decimal / 2;\n        i++;\n    }\n \
    \   result = \"db\";\n    for (int j = i - 1; j >= 0; j--) {\n        result +=\
    \ std::to_string(b[j]);\n    }\n    result += \"db\";\n    return result;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpema1q3gy: /tmp/tmpema1q3gy.cpp:30: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    if (decimal < 0)\n      \
    \  return \"db-\" + decimal_to_binary(-decimal);\n    if (decimal < 2)\n     \
    \   return \"db\" + char('0' + decimal) + \"db\";\n    return decimal_to_binary(decimal\
    \ / 2) + char('0' + decimal % 2);\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0x_d43f6.cpp: In function \u2018std::string decimal_to_binary(long\
    \ int)\u2019:\n/tmp/tmp0x_d43f6.cpp:15:43: error: invalid operands of types \u2018\
    const char*\u2019 and \u2018const char [3]\u2019 to binary \u2018operator+\u2019\
    \n   15 |         return \"db\" + char('0' + decimal) + \"db\";\n      |     \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~\n      |                     | \
    \                      |\n      |                     const char*            \
    \ const char [3]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin = \"db\";\n\
    \  while (decimal != 0) {\n    bin.push_back((decimal % 2 == 0) ? '0' : '1');\n\
    \    decimal /= 2;\n  }\n  bin.push_back('d');\n  bin.push_back('b');\n  std::reverse(bin.begin()\
    \ + 2, bin.end() - 2);\n  return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpp9jgdkzw: /tmp/tmpp9jgdkzw.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  if (decimal == 0) {\n    return\
    \ \"db0db\";\n  }\n  std::string result = \"db\";\n  while (decimal != 0) {\n\
    \    result += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  reverse(result.begin()\
    \ + 2, result.end());\n  result += \"db\";\n  return result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string res = \"db\";\n\
    \  while (decimal > 0) {\n    res += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  std::reverse(res.begin() + 2, res.end());\n  res += \"db\";\n\
    \  return res;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n   \
    \ assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"\
    ));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpgnepkwfs: /tmp/tmpgnepkwfs.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  int i = 0;\n  for (i = 0; i < 32; i++) {\n    if (decimal > 1) {\n      binary\
    \ += (decimal % 2 ? \"1\" : \"0\");\n      decimal /= 2;\n    } else {\n     \
    \ binary += \"0\";\n    }\n  }\n  std::reverse(binary.begin(), binary.end());\n\
    \  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmphpzee011: /tmp/tmphpzee011.cpp:28: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    if (decimal == 0) {\n   \
    \     return \"db0db\";\n    }\n    bool found_binary = false;\n    long n = decimal;\n\
    \    std::string binary;\n    binary += \"db\";\n    while (n > 0) {\n       \
    \ if (n % 2 == 0) {\n            binary += \"0\";\n        } else {\n        \
    \    binary += \"1\";\n            found_binary = true;\n        }\n        n\
    \ /= 2;\n    }\n    if (!found_binary) {\n        binary += \"1\";\n    }\n  \
    \  binary += \"db\";\n    return std::string(binary.rbegin(), binary.rend());\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpagif7_q9: /tmp/tmpagif7_q9.cpp:37: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // Your code goes here\n  //\
    \ std::cout << decimal << std::endl;\n  if (decimal == 0) {\n    return \"db0db\"\
    ;\n  }\n  std::string result = \"db\";\n  int mod = 0;\n  while (decimal != 0)\
    \ {\n    mod = decimal % 2;\n    decimal = decimal / 2;\n    result = (char)(mod\
    \ + '0') + result;\n  }\n  result += \"db\";\n  return result;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp8iotw47r: /tmp/tmp8iotw47r.cpp:30: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string ret = \"db\"\
    ;\n    while (decimal > 0) {\n        ret += std::to_string(decimal % 2);\n  \
    \      decimal /= 2;\n    }\n    std::reverse(ret.begin() + 2, ret.end());\n \
    \   ret += \"db\";\n    return ret;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpco4a5tg8: /tmp/tmpco4a5tg8.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ while (decimal > 0) {\n        binary.insert(binary.begin(), '0' + (decimal\
    \ % 2));\n        decimal /= 2;\n    }\n    std::string result = \"db\";\n   \
    \ result += binary;\n    result += \"db\";\n    return result;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp0ia05gy_: /tmp/tmp0ia05gy_.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    if (decimal == 0) return binary + '0' + binary;\n    while (decimal > 0)\
    \ {\n        binary += (decimal % 2) ? '1' : '0';\n        decimal /= 2;\n   \
    \ }\n    std::reverse(binary.begin() + 2, binary.end());\n    return binary +\
    \ 'd' + 'b';\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // your code here\n  std::string\
    \ result = \"db\";\n  if (decimal == 0) {\n    result += \"0\";\n  }\n  while\
    \ (decimal > 0) {\n    result += std::to_string(decimal % 2);\n    decimal /=\
    \ 2;\n  }\n  std::reverse(result.begin() + 2, result.end());\n  result += \"db\"\
    ;\n  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin = \"db\";\n\
    \  while (decimal > 0) {\n    bin += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  std::reverse(bin.begin() + 2, bin.end());\n  bin += \"db\";\n\
    \  return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n   \
    \ assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"\
    ));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmph2kahdwo: /tmp/tmph2kahdwo.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // Your code here\n  int x;\n\
    \  std::string binary = \"db\";\n  for(long i = 0; i < 32; i++){\n    x = decimal\
    \ & 1;\n    if(x == 1){\n      binary += \"1\";\n    }else{\n      binary += \"\
    0\";\n    }\n    decimal = decimal >> 1;\n  }\n  binary += \"db\";\n  return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpvw88y1a7: /tmp/tmpvw88y1a7.cpp:29: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result = \"db\"\
    ;\n  // char binary[100] = \"\";\n  if (decimal == 0) {\n    result += \"0\";\n\
    \  }\n  else {\n    int i = 0;\n    while (decimal > 0) {\n      int rem = decimal\
    \ % 2;\n      result += std::to_string(rem);\n      decimal /= 2;\n      i++;\n\
    \    }\n  }\n  std::reverse(result.begin() + 2, result.end());\n  result += \"\
    db\";\n  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string b;\n  long remainder;\n\
    \  std::string binary;\n  if (decimal == 0) {\n    return b = \"db0db\";\n  }\n\
    \  while (decimal != 0) {\n    remainder = decimal % 2;\n    decimal = decimal\
    \ / 2;\n    binary = std::to_string(remainder) + binary;\n  }\n  return b = \"\
    db\" + binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string res = \"db\";\n\
    \  for (int i = 0; i < 32; i++) {\n    res.push_back((decimal & (1 << i)) ? '1'\
    \ : '0');\n  }\n  res.push_back('d');\n  res.push_back('b');\n  std::reverse(res.begin()\
    \ + 2, res.end() - 2);\n  return res;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpr310d_x_: /tmp/tmpr310d_x_.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string result = \"db\"\
    ;\n\twhile (decimal) {\n\t\tresult += decimal % 2 ? \"1\" : \"0\";\n\t\tdecimal\
    \ /= 2;\n\t}\n\tresult += \"db\";\n\treturn std::string(result.rbegin(), result.rend());\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpavo52q52: /tmp/tmpavo52q52.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result = \"db\"\
    ;\n  std::string binary = \"\";\n  std::string db = \"db\";\n  int remainder =\
    \ 0;\n  while (decimal != 0) {\n    remainder = decimal % 2;\n    decimal = decimal\
    \ / 2;\n    if (remainder == 0) {\n      binary += \"0\";\n    } else {\n    \
    \  binary += \"1\";\n    }\n  }\n  std::reverse(binary.begin(), binary.end());\n\
    \  result += binary;\n  result += db;\n  return result;\n}\nint main() {\n   \
    \ auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp49bp___t: /tmp/tmp49bp___t.cpp:32: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string out;\n    while\
    \ (decimal > 0) {\n        int rem = decimal % 2;\n        decimal /= 2;\n   \
    \     out.push_back(rem + '0');\n    }\n    std::reverse(out.begin(), out.end());\n\
    \    return \"db\" + out + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpbg76_ctk: /tmp/tmpbg76_ctk.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string binaryString =\
    \ \"db\";\n\twhile (decimal > 0) {\n\t\tbinaryString.push_back(decimal % 2 ? '1'\
    \ : '0');\n\t\tdecimal /= 2;\n\t}\n\treturn binaryString.append(\"db\");\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp0xc0zefy: /tmp/tmp0xc0zefy.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\"\
    ;\n    int num = decimal;\n    int remainder;\n    do {\n        remainder = num\
    \ % 2;\n        num = num / 2;\n        if (remainder == 0) {\n            result\
    \ = result + \"0\";\n        } else {\n            result = result + \"1\";\n\
    \        }\n    } while (num != 0);\n    std::reverse(result.begin() + 2, result.end());\n\
    \    result = result + \"db\";\n    return result;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    if (decimal == 0) {\n   \
    \     return \"db0db\";\n    }\n    std::string binary;\n    while (decimal >\
    \ 0) {\n        binary.push_back('0' + (decimal & 1));\n        decimal = decimal\
    \ >> 1;\n    }\n    std::reverse(binary.begin(), binary.end());\n    return \"\
    db\" + binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\"\
    ;\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n            result\
    \ = \"0\" + result;\n        } else {\n            result = \"1\" + result;\n\
    \        }\n        decimal /= 2;\n    }\n    result += \"db\";\n    return result;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpkmwcrv6h: /tmp/tmpkmwcrv6h.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::bitset<64> bits(decimal);\n\
    \    std::string binary = bits.to_string(); // string conversion\n    binary.erase(0,\
    \ binary.find_first_not_of('0'));\n    binary.insert(0, \"db\");\n    binary.append(\"\
    db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpyvy52iq5: /tmp/tmpyvy52iq5.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\"\
    ;\n    } else {\n      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_9q6f111: /tmp/tmp_9q6f111.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string binary = \"db\"\
    ;\n\tint binaryArray[50] = { 0 };\n\tint i = 0;\n\twhile (decimal > 0) {\n\t\t\
    binaryArray[i] = decimal % 2;\n\t\tdecimal = decimal / 2;\n\t\ti++;\n\t}\n\tfor\
    \ (int j = i - 1; j >= 0; j--) {\n\t\tif (binaryArray[j] == 0) {\n\t\t\tbinary\
    \ += \"0\";\n\t\t} else {\n\t\t\tbinary += \"1\";\n\t\t}\n\t}\n\tbinary += \"\
    db\";\n\treturn binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpr221dvt4: /tmp/tmpr221dvt4.cpp:32: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // Write your code here\n \
    \ if (decimal < 0)\n    return \"\";\n  if (decimal == 0)\n    return \"db0db\"\
    ;\n  std::string binary = \"db\";\n  while (decimal != 0) {\n    binary.push_back('0'\
    \ + decimal % 2);\n    decimal /= 2;\n  }\n  binary.push_back('d');\n  binary.push_back('b');\n\
    \  reverse(binary.begin() + 2, binary.end() - 2);\n  return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::stringstream binary;\n\
    \  binary << \"db\";\n  while (decimal > 0) {\n    binary << decimal % 2;\n  \
    \  decimal = decimal / 2;\n  }\n  binary << \"db\";\n  std::string bin(binary.str());\n\
    \  return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n   \
    \ assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"\
    ));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmprqa84oit: /tmp/tmprqa84oit.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    //db as prefix and suffix\n\
    \    std::string result = \"db\";\n    std::bitset<32> b(decimal);\n    result\
    \ += b.to_string();\n    //add suffix\n    result += \"db\";\n    //remove prefix\n\
    \    result.erase(0,2);\n    //remove suffix\n    result.erase(result.size()-2,2);\n\
    \    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpkl36bg7b: /tmp/tmpkl36bg7b.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::stringstream binary;\n\
    \  binary << \"db\";\n  if (decimal == 0)\n    binary << \"0\";\n  else {\n  \
    \  while (decimal > 0) {\n      binary << (decimal % 2);\n      decimal /= 2;\n\
    \    }\n  }\n  binary << \"db\";\n  std::string bin = binary.str();\n  std::reverse(bin.begin()\
    \ + 2, bin.end() - 2);\n  return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary;\n  binary\
    \ = \"db\";\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary\
    \ += \"0\";\n    } else {\n      binary += \"1\";\n    }\n    decimal /= 2;\n\
    \  }\n  reverse(binary.begin() + 2, binary.end());\n  binary += \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpzkbm93p2: /tmp/tmpzkbm93p2.cpp:28: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string ret;\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 == 0)\n      ret = \"0\" + ret;\n    else\n    \
    \  ret = \"1\" + ret;\n    decimal /= 2;\n  }\n  ret = \"db\" + ret + \"db\";\n\
    \  return ret;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n   \
    \ assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"\
    ));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmps74rjrvo: /tmp/tmps74rjrvo.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result;\n  if(decimal\
    \ == 0)\n    return \"db0db\";\n  result.push_back('d');\n  result.push_back('b');\n\
    \  for(int i = 31; i >= 0; i--) {\n    if(decimal & (1 << i))\n      result.push_back('1');\n\
    \    else\n      result.push_back('0');\n  }\n  result.push_back('d');\n  result.push_back('b');\n\
    \  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp73694zmw: /tmp/tmp73694zmw.cpp:30: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result(\"db\");\n\
    \  // Left most bit will be 1. So we can shift the decimal to the right until\
    \ we reach 0.\n  // Then add a 1 to the front of the result string.\n  do {\n\
    \    result = \"1\" + result;\n    decimal >>= 1;\n  } while (decimal > 0);\n\
    \  // Add the zeros to the front of the string until we reach 8 bits.\n  while\
    \ (result.length() < 10)\n    result = \"0\" + result;\n  result += \"db\";\n\
    \  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_ngkgddr: /tmp/tmp_ngkgddr.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ // Complete this function.\n    binary = \"db\";\n    while(decimal > 0) {\n\
    \        binary += std::to_string(decimal % 2);\n        decimal /= 2;\n    }\n\
    \    std::reverse(binary.begin() + 2, binary.end());\n    binary += \"db\";\n\
    \    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp__crevg6: /tmp/tmp__crevg6.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  if (decimal == 0)\n    binary += \"0\";\n  while (decimal > 0) {\n    binary\
    \ += std::to_string(decimal % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  int rem, i = 1, sum = 0;\n\
    \  std::string bin = \"db\";\n  while (decimal != 0) {\n    rem = decimal % 2;\n\
    \    decimal /= 2;\n    sum += rem * i;\n    i *= 10;\n    bin += std::to_string(rem);\n\
    \  }\n  std::reverse(bin.begin(), bin.end());\n  bin += \"db\";\n  return bin;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmph_gxhnfh: /tmp/tmph_gxhnfh.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\"\
    ;\n    } else {\n      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmprej_1wex: /tmp/tmprej_1wex.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string s = \"db\";\n\
    \    if (decimal > 0) {\n        while (decimal) {\n            s += std::to_string(decimal\
    \ % 2);\n            decimal /= 2;\n        }\n    } else {\n        s += \"0\"\
    ;\n    }\n    std::reverse(s.begin() + 2, s.end());\n    s += \"db\";\n    return\
    \ s;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    while (decimal > 0) {\n        if (decimal % 2 == 0) {\n            binary\
    \ += \"0\";\n        } else {\n            binary += \"1\";\n        }\n     \
    \   decimal /= 2;\n    }\n    reverse(binary.begin() + 2, binary.end());\n   \
    \ binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate =\
    \ decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp04gdmhjh: /tmp/tmp04gdmhjh.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  while (decimal > 0) {\n    if (decimal % 2 == 0)\n      binary += \"0\";\n\
    \    else\n      binary += \"1\";\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpgbxbul8p: /tmp/tmpgbxbul8p.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n   \
    \ bool flag = false;\n    for (int i = 63; i >= 0; i--) {\n        if (decimal\
    \ & (1ll << i)) {\n            result += \"1\";\n            flag = true;\n  \
    \      } else if (flag) {\n            result += \"0\";\n        }\n    }\n  \
    \  if (result.empty()) {\n        result = \"0\";\n    }\n    return \"db\" +\
    \ result + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  //your code here\n  std::string\
    \ s(\"db\");\n  long i = 0;\n  while(decimal != 0) {\n    if(decimal % 2 == 0)\n\
    \      s.push_back('0');\n    else\n      s.push_back('1');\n    decimal /= 2;\n\
    \  }\n  s.push_back('d');\n  s.push_back('b');\n  return s;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp0oqkqxp8: /tmp/tmp0oqkqxp8.cpp:28: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  assert(decimal >= 0);\n\n \
    \ std::string binary = \"db\";\n  while (decimal > 0) {\n    binary += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  binary += \"db\";\n  std::reverse(binary.begin()\
    \ + 2, binary.end() - 2);\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp4iuba5s6: /tmp/tmp4iuba5s6.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // write code here\n  std::string\
    \ binary;\n  int i = 0;\n  while (decimal != 0) {\n    if (decimal % 2 == 0) {\n\
    \      binary = \"0\" + binary;\n    } else {\n      binary = \"1\" + binary;\n\
    \    }\n    decimal /= 2;\n  }\n  binary = \"db\" + binary + \"db\";\n  return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpp9yz05pp: /tmp/tmpp9yz05pp.cpp:28: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    while (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n\
    \        decimal /= 2;\n    }\n    binary += \"db\";\n    return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpw4vbatxt: /tmp/tmpw4vbatxt.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n   std::string binary_string\
    \ = \"\";\n   // todo: implementation\n   return \"db\" + binary_string + \"db\"\
    ;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpbesu3mc9: /tmp/tmpbesu3mc9.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    // your code here\n    std::string\
    \ binary = \"db\";\n    if (decimal < 2) {\n        return binary.append(std::to_string(decimal));\n\
    \    }\n    for (long i = decimal; i >= 2; i /= 2) {\n        binary.insert(2,\
    \ std::to_string(i % 2));\n    }\n    binary.append(\"db\");\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpg9rj141c: /tmp/tmpg9rj141c.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  std::bitset<32> bits(decimal);\n  for (int i = 0; i < 32; i++) {\n    binary\
    \ += std::to_string(bits[i]);\n  }\n  binary += \"db\";\n  return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpo9aevz67: /tmp/tmpo9aevz67.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin;\n  std::bitset<8>\
    \ bs(decimal);\n  bin = \"db\" + bs.to_string() + \"db\";\n  return bin;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp0359zvss: /tmp/tmp0359zvss.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin = \"db\";\n\
    \  long rem, i=1, sum=0;\n  while(decimal != 0) {\n    rem = decimal % 2;\n  \
    \  sum = sum + rem * i;\n    i = i * 10;\n    decimal = decimal / 2;\n  }\n  bin\
    \ += std::to_string(sum);\n  bin += \"db\";\n  return bin;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    for (int i = 0; i < 32; i++) {\n        if (decimal & 1 << i) {\n     \
    \       binary += \"1\";\n        } else {\n            binary += \"0\";\n   \
    \     }\n    }\n    binary += \"db\";\n    return binary;\n}\nint main() {\n \
    \   auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpe46x2vps: /tmp/tmpe46x2vps.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\"\
    ;\n    while (decimal > 0) {\n        if (decimal%2 == 0) {\n            result\
    \ += \"0\";\n        } else {\n            result += \"1\";\n        }\n     \
    \   decimal /= 2;\n    }\n    std::reverse(result.begin()+2, result.end());\n\
    \    result += \"db\";\n    return result;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmph3ag_gt7: /tmp/tmph3ag_gt7.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  long num = decimal;\n  // long num = 0;\n  // std::cin >> num;\n  // std::cout\
    \ << num << std::endl;\n  std::vector<int> binary_vector;\n  // std::cout << num\
    \ << std::endl;\n  // std::cout << \"decimal_to_binary(num): \" << decimal_to_binary(num)\
    \ << std::endl;\n  while (num > 0) {\n    if (num % 2 == 0) {\n      binary_vector.push_back(0);\n\
    \    } else {\n      binary_vector.push_back(1);\n    }\n    num /= 2;\n  }\n\
    \  // std::cout << binary_vector.size() << std::endl;\n  for (long i = binary_vector.size()\
    \ - 1; i >= 0; i--) {\n    // std::cout << binary_vector[i] << std::endl;\n  \
    \  binary += std::to_string(binary_vector[i]);\n  }\n  // std::cout << binary\
    \ << std::endl;\n  binary += \"db\";\n  return binary;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmphfj8c_2y: /tmp/tmphfj8c_2y.cpp:39: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string b;\n  int r,cnt=0;\n\
    \  while(decimal != 0)\n  {\n    r = decimal % 2;\n    decimal = decimal / 2;\n\
    \    b += std::to_string(r);\n    cnt++;\n  }\n  while(cnt != 0)\n  {\n    b +=\
    \ \"db\";\n    cnt--;\n  }\n  std::reverse(b.begin(),b.end());\n  return b;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpv_w0vfk2: /tmp/tmpv_w0vfk2.cpp:31: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary;\n  binary.append(\"\
    db\");\n  while (decimal != 0) {\n    if (decimal % 2 == 0) {\n      binary.append(\"\
    0\");\n    } else {\n      binary.append(\"1\");\n    }\n    decimal /= 2;\n \
    \ }\n  std::reverse(binary.begin() + 2, binary.end());\n  binary.append(\"db\"\
    );\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpih_pb63c: /tmp/tmpih_pb63c.cpp:28: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary;\n  while\
    \ (decimal) {\n    binary.push_back(decimal % 2 ? '1' : '0');\n    decimal /=\
    \ 2;\n  }\n  return \"db\" + std::string(32 - binary.size(), '0') + binary + \"\
    db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp8jpu_4r_: /tmp/tmp8jpu_4r_.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    // TODO\n    std::string\
    \ binaryNum = \"\";\n    std::string db = \"db\";\n    std::string binaryNumFinal\
    \ = \"\";\n    int reminder;\n    int i = 0;\n    int j = 0;\n    if (decimal\
    \ == 0)\n    {\n        return db + \"0\" + db;\n    }\n    while (decimal > 0)\n\
    \    {\n        reminder = decimal % 2;\n        binaryNum[i] = reminder + '0';\n\
    \        decimal = decimal / 2;\n        i++;\n    }\n    binaryNumFinal = db;\n\
    \    while (i > 0)\n    {\n        binaryNumFinal[j] = binaryNum[i - 1];\n   \
    \     i--;\n        j++;\n    }\n    binaryNumFinal = binaryNumFinal + db;\n \
    \   return binaryNumFinal;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_uye6_xt: /tmp/tmp_uye6_xt.cpp:43: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ binary += \"db\";\n    int remainder;\n    while (decimal!=0) {\n        remainder\
    \ = decimal%2;\n        binary += std::to_string(remainder);\n        decimal\
    \ = decimal/2;\n    }\n    reverse(binary.begin()+2, binary.end());\n    binary\
    \ += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmph117bhxf: /tmp/tmph117bhxf.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    if (decimal == 0) {\n   \
    \     return \"db0db\";\n    }\n    std::string binary_string = \"db\";\n    while\
    \ (decimal != 0) {\n        binary_string += (decimal % 2 == 0) ? \"0\" : \"1\"\
    ;\n        decimal /= 2;\n    }\n    std::reverse(binary_string.begin() + 2, binary_string.end());\n\
    \    binary_string += \"db\";\n    return binary_string;\n}\nint main() {\n  \
    \  auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  while (decimal > 0) {\n    if (decimal % 2 == 0)\n      binary.push_back('0');\n\
    \    else\n      binary.push_back('1');\n    decimal /= 2;\n  }\n  binary.push_back('d');\n\
    \  binary.push_back('b');\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpoajlgdu6: /tmp/tmpoajlgdu6.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result = \"db\"\
    ;\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      result += \"0\"\
    ;\n    } else {\n      result += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(result.begin()\
    \ + 2, result.end());\n  result += \"db\";\n  return result;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp0bzkmohi: /tmp/tmp0bzkmohi.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\"\
    ;\n    } else {\n      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  for\
    \ (int i = binary.size(); i < 11; i++) {\n    binary += \"0\";\n  }\n  std::reverse(binary.begin(),\
    \ binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n   \
    \ auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp25j6zfb3: /tmp/tmp25j6zfb3.cpp:30: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  int remainder;\n  int i = 0;\n\
    \  long quotient;\n  std::string binary[100];\n  char bin[] = \"db\";\n  std::string\
    \ reverse;\n  std::string output;\n  std::string output2;\n  std::string result;\n\
    \  std::string temp;\n  while (decimal != 0) {\n    quotient = decimal / 2;\n\
    \    remainder = decimal % 2;\n    decimal = quotient;\n    // std::cout << \"\
    Quotient = \" << quotient << std::endl;\n    binary[i] = std::to_string(remainder);\n\
    \    // std::cout << \"Binary = \" << binary[i] << std::endl;\n    ++i;\n  }\n\
    \  for (int a = i - 1; a >= 0; --a) {\n    output += binary[a];\n  }\n  temp =\
    \ output;\n  reverse = output;\n  std::reverse(reverse.begin(), reverse.end());\n\
    \  output2 = output + reverse;\n  result = bin + output2 + bin;\n  return result;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp_6xsd4b4: /tmp/tmp_6xsd4b4.cpp:43: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // your code goes here\n  std::string\
    \ binary;\n  binary = \"db\";\n  if (decimal == 0) {\n    binary += \"0\";\n \
    \ }\n  while (decimal > 0) {\n    binary += std::to_string(decimal % 2);\n   \
    \ decimal /= 2;\n  }\n  reverse(binary.begin() + 2, binary.end());\n  binary +=\
    \ \"db\";\n  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary_string =\
    \ \"db\";\n  while (decimal > 0) {\n    binary_string += std::to_string(decimal\
    \ % 2);\n    decimal /= 2;\n  }\n  std::reverse(binary_string.begin() + 2, binary_string.end());\n\
    \  binary_string += \"db\";\n  return binary_string;\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp24fiklbh: /tmp/tmp24fiklbh.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::stringstream ss;\n  ss\
    \ << std::bitset<8>(decimal);\n  std::string binary(ss.str());\n  return \"db\"\
    \ + binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmph2y4aabg: /tmp/tmph2y4aabg.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin = \"db\";\n\
    \  int remainder;\n  long num = decimal;\n  while (num != 0) {\n    remainder\
    \ = num % 2;\n    num /= 2;\n    bin.push_back(remainder + '0');\n  }\n  std::reverse(bin.begin()\
    \ + 2, bin.end());\n  bin.push_back('d');\n  bin.push_back('b');\n  return bin;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp53g2h0jl: /tmp/tmp53g2h0jl.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    assert(decimal >= 0);\n \
    \   if (decimal == 0) {\n        return \"db0db\";\n    }\n    std::string answer;\n\
    \    while (decimal != 0) {\n        long binary = decimal % 2;\n        answer\
    \ += std::to_string(binary);\n        decimal /= 2;\n    }\n    reverse(answer.begin(),\
    \ answer.end());\n    answer = \"db\" + answer + \"db\";\n    return answer;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary_string;\n\
    \  while (decimal > 0) {\n    binary_string.push_back(decimal % 2 + '0');\n  \
    \  decimal /= 2;\n  }\n  binary_string.append(\"db\");\n  std::reverse(binary_string.begin(),\
    \ binary_string.end());\n  return binary_string;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp1qyn3ew2: /tmp/tmp1qyn3ew2.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  if (decimal == 0) {\n    return\
    \ \"db0db\";\n  }\n  std::string binary = \"db\";\n  while (decimal > 0) {\n \
    \   if (decimal % 2 == 0) {\n      binary += \"0\";\n    } else {\n      binary\
    \ += \"1\";\n    }\n    decimal /= 2;\n  }\n  return binary + \"db\";\n}\nint\
    \ main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpvgkhs8e3: /tmp/tmpvgkhs8e3.cpp:29: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin(\"db\");\n\
    \  if (decimal == 0) {\n    bin.append(\"0db\");\n    return bin;\n  }\n  while\
    \ (decimal > 0) {\n    bin.push_back(decimal % 2 == 0 ? '0' : '1');\n    decimal\
    \ /= 2;\n  }\n  std::reverse(bin.begin() + 2, bin.end());\n  bin.push_back('d');\n\
    \  bin.push_back('b');\n  return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    while (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n\
    \        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpjp0tkshx: /tmp/tmpjp0tkshx.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string str(\"db\");\n\
    \    while(decimal != 0) {\n        if(decimal % 2 == 0) {\n            str +=\
    \ \"0\";\n        } else {\n            str += \"1\";\n        }\n        decimal\
    \ /= 2;\n    }\n    std::reverse(str.begin() + 2, str.end());\n    str += \"db\"\
    ;\n    return str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpl9l48tjf: /tmp/tmpl9l48tjf.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string bin_str = \"db\"\
    ;\n  while (decimal) {\n    bin_str += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  std::reverse(bin_str.begin() + 2, bin_str.end());\n  bin_str +=\
    \ \"db\";\n  return bin_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpnk4kfsfr: /tmp/tmpnk4kfsfr.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary;\n  while\
    \ (decimal > 0) {\n    if (decimal % 2 == 0)\n      binary = \"0\" + binary;\n\
    \    else\n      binary = \"1\" + binary;\n    decimal /= 2;\n  }\n  return \"\
    db\" + binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp3qiswdlk: /tmp/tmp3qiswdlk.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  int zeros = 0;\n  std::string\
    \ out;\n  out += \"db\";\n  for (long i = 0; i < 8; i++) {\n    long hold = pow(2,\
    \ 7 - i);\n    if (decimal < hold) {\n      out += '0';\n      zeros++;\n    }\
    \ else {\n      out += '1';\n      decimal -= hold;\n    }\n  }\n  if (zeros ==\
    \ 8) {\n    out = \"db00000000db\";\n  }\n  return out;\n}\nint main() {\n   \
    \ auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpc3978f0a: /tmp/tmpc3978f0a.cpp:32: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  char* bstr = new char[33];\n\
    \  bstr[32] = '\\0';\n  int i = 0;\n  while (decimal != 0) {\n    bstr[i++] =\
    \ decimal % 2 + '0';\n    decimal = decimal / 2;\n  }\n  for (int j = i; j < 32;\
    \ j++) {\n    bstr[j] = '0';\n  }\n  std::string s = \"db\";\n  for (int j = i\
    \ - 1; j >= 0; j--) {\n    s += bstr[j];\n  }\n  s += \"db\";\n  return s;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpcp569h9i: /tmp/tmpcp569h9i.cpp:31: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n   \
    \ while (decimal != 0) {\n        if (decimal % 2 == 0) {\n            binary\
    \ = \"0\" + binary;\n        } else {\n            binary = \"1\" + binary;\n\
    \        }\n        decimal /= 2;\n    }\n    binary = \"db\" + binary + \"db\"\
    ;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmphosk3hpg: /tmp/tmphosk3hpg.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binString = \"\
    db\";\n  long rem = 0;\n  while (decimal > 0) {\n    rem = decimal % 2;\n    if\
    \ (rem == 0)\n      binString.push_back('0');\n    else\n      binString.push_back('1');\n\
    \    decimal /= 2;\n  }\n  reverse(binString.begin() + 2, binString.end());\n\
    \  binString.push_back('d');\n  binString.push_back('b');\n  return binString;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmptgr4n1hf: /tmp/tmptgr4n1hf.cpp:29: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n   \
    \ while (decimal != 0) {\n        if (decimal % 2 == 0) {\n            result\
    \ = '0' + result;\n        } else {\n            result = '1' + result;\n    \
    \    }\n        decimal /= 2;\n    }\n    return \"db\" + result + \"db\";\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp0krfgj3o: /tmp/tmp0krfgj3o.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    std::string binary1;\n    int remainder;\n    while (decimal != 0) {\n\
    \        remainder = decimal % 2;\n        binary1 += std::to_string(remainder);\n\
    \        decimal /= 2;\n    }\n    for (int i = binary1.length() - 1; i >= 0;\
    \ i--) {\n        binary += binary1[i];\n    }\n    binary += \"db\";\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpxfrx46a4: /tmp/tmpxfrx46a4.cpp:28: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string bin = \"db\"\
    ;\n    for (int i = 0; i < 32; i++) {\n        bin += std::to_string(decimal %\
    \ 2);\n        decimal /= 2;\n    }\n    std::reverse(bin.begin() + 2, bin.end());\n\
    \    bin += \"db\";\n    return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpneqg5sb8: /tmp/tmpneqg5sb8.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result = \"db\"\
    ;\n  while (decimal > 0) {\n    result.insert(result.end(), '0' + (decimal % 2));\n\
    \    decimal /= 2;\n  }\n  result.insert(result.end(), 'd');\n  result.insert(result.end(),\
    \ 'b');\n  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpmc92v6xl: /tmp/tmpmc92v6xl.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    if (decimal == 0) {\n        binary.append(\"0db\");\n        return binary;\n\
    \    }\n    while (decimal > 0) {\n        binary.append(decimal%2 == 0 ? \"0\"\
    \ : \"1\");\n        decimal /= 2;\n    }\n    reverse(binary.begin()+2, binary.end());\n\
    \    binary.append(\"db\");\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary_str;\n \
    \ while (decimal > 0) {\n    binary_str += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  std::reverse(binary_str.begin(), binary_str.end());\n  return\
    \ binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpk51r2r_r: /tmp/tmpk51r2r_r.cpp:22: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    while (decimal > 0) {\n        binary.append(std::to_string(decimal % 2));\n\
    \        decimal /= 2;\n    }\n    binary.append(\"db\");\n    std::reverse(binary.begin()\
    \ + 2, binary.end() - 2);\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpvq337vin: /tmp/tmpvq337vin.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    assert(decimal >= 0);\n \
    \   if(decimal == 0) return \"db0db\";\n    std::string bin = \"db\";\n    bool\
    \ found = false;\n    for(int i = 63; i >= 0; i--) {\n        if(decimal & 1 <<\
    \ i) {\n            bin += \"1\";\n            found = true;\n        } else if(found)\
    \ {\n            bin += \"0\";\n        }\n    }\n    return bin + \"db\";\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp5t8ni8bv: /tmp/tmp5t8ni8bv.cpp:29: int main(): Assertion `candidate((32))\
    \ == (\"db100000db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary(32, ' ');\n\
    \  for (int i = 31; i >= 0; i--) {\n    if (decimal > 0) {\n      binary[i] =\
    \ decimal % 2 + '0';\n      decimal /= 2;\n    } else {\n      binary[i] = '0';\n\
    \    }\n  }\n  std::string result;\n  result += \"db\";\n  for (int i = 0; i <\
    \ 32; i++) {\n    result += binary[i];\n  }\n  result += \"db\";\n  return result;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpx4zlc3c8: /tmp/tmpx4zlc3c8.cpp:31: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    while (decimal > 0) {\n        binary += std::to_string(decimal % 2);\n\
    \        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpphsldl8a: /tmp/tmpphsldl8a.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    int binary;\n    std::string\
    \ result = \"db\";\n    while (decimal > 0) {\n        binary = decimal % 2;\n\
    \        result += binary + '0';\n        decimal /= 2;\n    }\n    std::reverse(result.begin()\
    \ + 2, result.end());\n    result += \"db\";\n    return result;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpvr7rkeih: /tmp/tmpvr7rkeih.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  while (decimal > 0) {\n    binary.push_back((decimal % 2) + '0');\n    decimal\
    \ /= 2;\n  }\n  binary.push_back('d');\n  binary.push_back('b');\n  reverse(binary.begin()\
    \ + 2, binary.end() - 2);\n  return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpryo_5d3k: /tmp/tmpryo_5d3k.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  while (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary += \"0\"\
    ;\n    } else {\n      binary += \"1\";\n    }\n    decimal /= 2;\n  }\n  std::reverse(binary.begin()\
    \ + 2, binary.end());\n  binary += \"db\";\n  return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpqqvu12t_: /tmp/tmpqqvu12t_.cpp:27: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result;\n  std::string\
    \ temp;\n  while (decimal > 0) {\n    temp = decimal % 2 ? \"1\" : \"0\";\n  \
    \  result = temp + result;\n    decimal /= 2;\n  }\n  std::string trueResult;\n\
    \  trueResult = \"db\" + result + \"db\";\n  return trueResult;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpht71y6on: /tmp/tmpht71y6on.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary;\n  while\
    \ (decimal) {\n    binary.insert(binary.begin(), (decimal % 2) + '0');\n    decimal\
    \ /= 2;\n  }\n  return \"db\" + binary + \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpcugj1d38: /tmp/tmpcugj1d38.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string res = \"db\"\
    ;\n    if (decimal == 0) {\n        res.append(\"0db\");\n        return res;\n\
    \    }\n    while (decimal != 0) {\n        res.push_back('0' + decimal % 2);\n\
    \        decimal /= 2;\n    }\n    std::reverse(res.begin() + 2, res.end());\n\
    \    res.push_back('d');\n    res.push_back('b');\n    return res;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary;\n  while\
    \ (decimal > 0) {\n    if (decimal % 2 == 0) {\n      binary = \"0\" + binary;\n\
    \    } else {\n      binary = \"1\" + binary;\n    }\n    decimal /= 2;\n  }\n\
    \  binary = \"db\" + binary + \"db\";\n  return binary;\n}\nint main() {\n   \
    \ auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpugopvd7k: /tmp/tmpugopvd7k.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  assert(decimal >= 0);\n  std::string\
    \ binary;\n  binary.push_back('d');\n  binary.push_back('b');\n  while (decimal\
    \ != 0) {\n    if (decimal % 2 == 0) {\n      binary.push_back('0');\n    } else\
    \ {\n      binary.push_back('1');\n    }\n    decimal /= 2;\n  }\n  binary.push_back('d');\n\
    \  binary.push_back('b');\n  std::reverse(binary.begin() + 2, binary.end() - 2);\n\
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpnhstxb6d: /tmp/tmpnhstxb6d.cpp:31: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tif (decimal == 0) {\n\t\treturn\
    \ \"db0db\";\n\t}\n\tstd::string result;\n\tresult.append(\"db\");\n\tlong number\
    \ = decimal;\n\twhile (number > 0) {\n\t\tif (number % 2 == 0) {\n\t\t\tresult.append(\"\
    0\");\n\t\t} else {\n\t\t\tresult.append(\"1\");\n\t\t}\n\t\tnumber /= 2;\n\t\
    }\n\tresult.append(\"db\");\n\tstd::reverse(result.begin() + 2, result.end() -\
    \ 2);\n\treturn result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string ans;\n  ans+=\"\
    db\";\n  if(decimal==0)\n    return \"db0db\";\n  else if(decimal<0)\n    return\
    \ \"\";\n  while(decimal!=0){\n    int rem=decimal%2;\n    ans+=std::to_string(rem);\n\
    \    decimal/=2;\n  }\n  std::reverse(ans.begin()+2,ans.end());\n  ans+=\"db\"\
    ;\n  return ans;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n \
    \   assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string binary = \"db\"\
    ;\n  while (decimal > 0) {\n    binary += std::to_string(decimal % 2);\n    decimal\
    \ /= 2;\n  }\n  return binary += \"db\";\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp3cq1n086: /tmp/tmp3cq1n086.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  return \"\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpvys7bosz: /tmp/tmpvys7bosz.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  assert(decimal >= 0);\n  std::string\
    \ binary=\"db\";\n  if(decimal == 0)\n    binary = \"db0db\";\n  else\n  {\n \
    \   while(decimal > 0)\n    {\n      binary.push_back('0' + (decimal % 2));\n\
    \      decimal /= 2;\n    }\n    std::reverse(binary.begin()+2, binary.end());\n\
    \    binary.push_back('d');\n    binary.push_back('b');\n  }\n  return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  // your code here\n  std::string\
    \ result;\n  while(decimal>0){\n    int rem=decimal%2;\n    result.push_back(rem+'0');\n\
    \    decimal/=2;\n  }\n  std::reverse(result.begin(),result.end());\n  result=\"\
    db\"+result+\"db\";\n  return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpx55u7hjv: /tmp/tmpx55u7hjv.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string result;\n  result.append(\"\
    db\");\n  while (decimal > 0) {\n    long rem = decimal % 2;\n    result.push_back(rem\
    \ == 0 ? '0' : '1');\n    decimal /= 2;\n  }\n  result.append(\"db\");\n  std::reverse(result.begin()\
    \ + 2, result.end() - 2);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpy2he_lh5: /tmp/tmpy2he_lh5.cpp:25: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string bin;\n    while(decimal){\n\
    \        bin += std::to_string(decimal%2);\n        decimal /= 2;\n    }\n   \
    \ return \"db\" + std::string(8-bin.size(), '0') + bin + \"db\";\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpcgfft9sm: /tmp/tmpcgfft9sm.cpp:21: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n   \
    \ while (decimal) {\n        result += (decimal % 2 ? '1' : '0');\n        decimal\
    \ /= 2;\n    }\n    //if (result.size() < 8) result += '0';\n    std::reverse(result.begin(),\
    \ result.end());\n    return \"db\" + result + \"db\";\n}\nint main() {\n    auto\
    \ candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n\
    \    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp30731xfm: /tmp/tmp30731xfm.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string binary = \"db\"\
    ;\n\tstd::string out;\n\twhile (decimal) {\n\t\tbinary += (decimal % 2 == 0) ?\
    \ \"0\" : \"1\";\n\t\tdecimal /= 2;\n\t}\n\tfor (int i = binary.size() - 1; i\
    \ >= 2; i--) {\n\t\tout += binary[i];\n\t}\n\tout += \"db\";\n\treturn out;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmpwv5z5xuu: /tmp/tmpwv5z5xuu.cpp:26: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string bin;\n    while(decimal)\
    \ {\n        bin.push_back(decimal%2 + '0');\n        decimal /= 2;\n    }\n \
    \   bin.push_back('d');\n    bin.push_back('b');\n    std::reverse(bin.begin(),\
    \ bin.end());\n    return bin;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp5_xp3xe7: /tmp/tmp5_xp3xe7.cpp:24: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n    std::string binary = \"db\"\
    ;\n    while (decimal != 0) {\n        binary += std::to_string(decimal % 2);\n\
    \        decimal /= 2;\n    }\n    std::reverse(binary.begin() + 2, binary.end());\n\
    \    binary += \"db\";\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: "tmp1mw45vcj: /tmp/tmp1mw45vcj.cpp:23: int main(): Assertion `candidate((0))\
    \ == (\"db0db\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n  std::string str = \"db\";\n\
    \  do {\n    str += decimal%2 + '0';\n    decimal = decimal/2;\n  } while (decimal\
    \ > 0);\n  str += \"db\";\n  std::reverse(str.begin()+2, str.end()-2);\n  return\
    \ str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// decimal_to_binary(15)\
    \   # returns \"db1111db\"\n// decimal_to_binary(32)   # returns \"db100000db\"\
    \nstd::string decimal_to_binary(long decimal) {\n\tstd::string str=\"db\";\n\t\
    int count=0;\n\tif(decimal==0)\n\t\tstr+=\"0\";\n\twhile(decimal!=0)\n\t{\n\t\t\
    if(decimal%2==0)\n\t\t\tstr+=\"0\";\n\t\telse\n\t\t\tstr+=\"1\";\n\t\tdecimal/=2;\n\
    \t\tcount++;\n\t}\n\tfor(int i=0;i<count/2;i++)\n\t{\n\t\tchar temp=str[i+2];\n\
    \t\tstr[i+2]=str[count+1-i];\n\t\tstr[count+1-i]=temp;\n\t}\n\tstr+=\"db\";\n\t\
    return str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
