name: HumanEval_66_digitSum
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(char c : s) {\n        if(isupper(c)) {\n \
    \           sum += c;\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n   int sum = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n    \
    \    if(isupper(s[i]))\n        {\n            sum += s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\t//int sum=0;\n\t// for(int i=0;i<s.length();i++)\n\t// {\n\t// \tif(isupper(s[i]))\n\
    \t// \t{\n\t// \t\tsum=sum+s[i];\n\t// \t}\n\t// }\n\t// return sum;\n\tint sum=0;\n\
    \tfor(char i:s)\n\t{\n\t\tif(isupper(i))\n\t\t{\n\t\t\tsum=sum+i;\n\t\t}\n\t}\n\
    \treturn sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (char c : s)\n\t\tif (c >= 'A' && c <= 'Z')\n\t\
    \t\tsum += c;\n\treturn sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(isupper(s[i]))\
    \ {\n            sum += s[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  //TODO\n  long sum=0;\n  for(int i=0;i<s.length();i++)\n  {\n    if(isupper(s[i]))\n\
    \    {\n      sum=sum+s[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  return std::accumulate(s.begin(), s.end(), 0,\n                    \
    \     [](long acc, const char c) {\n                           return c >= 'A'\
    \ && c <= 'Z' ? acc + c : acc;\n                         });\n}\nint main() {\n\
    \    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  //cout << s;\n  int sum = 0;\n  for(char c : s){\n    if(isupper(c))\n\
    \      sum += c;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(isupper(s[i])){\n\
    \            sum+=s[i];\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int i, len = s.length(), sum = 0;\n    for(i = 0; i < len; i++) {\n\
    \        if(isupper(s[i])) {\n            sum += (int)s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n\t\t\tsum += s[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    unsigned long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n\
    \        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += (int)s[i];\n  \
    \      }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(isupper(s[i]))\n            sum += (int)s[i];\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long result = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      result += s[i];\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    if(s.empty()) return 0;\n    long sum = 0;\n    for(char& c : s)\n\
    \        if(isupper(c))\n            sum += c;\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tstd::string res;\n\tif (s.length() == 0)\n\t\treturn 0;\n\tfor (int\
    \ i = 0; i < s.length(); i++) {\n\t\tif (s[i] > 64 && s[i] < 91)\n\t\t\tres +=\
    \ s[i];\n\t}\n\tlong sum = 0;\n\tfor (auto c : res) {\n\t\tsum += c;\n\t}\n\t\
    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int length = s.length();\n    int sum = 0;\n    for(int i = 0; i <\
    \ length; i++) {\n        if(s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n   \
    \ assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    if(s.empty())\n        return 0;\n    long int sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(std::isupper(s[i]))\n       \
    \     sum += s[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long total = 0;\n    for (int i = 0; i < s.length(); i++) {\n    \
    \    if (s[i] >= 'A' && s[i] <= 'Z') {\n            total += s[i];\n        }\n\
    \    }\n    return total;\n}\nint main() {\n    auto candidate = digitSum;\n \
    \   assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(isupper(s[i])) sum += (long)s[i];\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum=0;\n    for(int i=0;i<s.length();i++){\n        if(isupper(s[i])){\n\
    \            sum+=s[i];\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum=0;\n    for(auto i : s)\n        if(isupper(i))\n        \
    \    sum+=i;\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long result = 0;\n  int temp = 0;\n  for (int i = 0; i < s.length();\
    \ i++) {\n    temp = (int)s[i];\n    if (temp >= 65 && temp <= 90) {\n      result\
    \ += temp;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum;\n  for(auto c: s){\n    if(c >= 'A' && c <= 'Z')\n    sum\
    \ += c;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: "tmpt_jlcurw: /tmp/tmpt_jlcurw.cpp:23: int main(): Assertion `candidate((\"\
    \")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(size_t i = 0; i < s.size(); i++) {\n      \
    \  if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  // Enter code here\n  long long sum=0;\n  for(int i=0;i<s.length();i++)\n\
    \  {\n      if(isupper(s[i]))\n        sum+=s[i];\n  }\n  return sum;\n}\nint\
    \ main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"\
    )) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tchar charArray[s.length()];\n\tint sum = 0;\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tcharArray[i] = s[i];\n\t\tif (charArray[i] >= 65 && charArray[i]\
    \ <= 90) {\n\t\t\tsum += charArray[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    \n    long sum = 0;\n    for(int i = 0; i < s.length(); i++)\n   \
    \ {\n        if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            sum += s[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  std::transform(s.begin(), s.end(), s.begin(), ::toupper);\n  std::regex\
    \ re(\"[A-Z]\");\n  std::vector<int> ints;\n  for (std::sregex_iterator i = std::sregex_iterator(s.begin(),\
    \ s.end(), re); i != std::sregex_iterator(); ++i) {\n    std::smatch m = *i;\n\
    \    ints.push_back(m.str()[0]);\n  }\n  return std::accumulate(ints.begin(),\
    \ ints.end(), 0);\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: "tmptfwqp1vo: /tmp/tmptfwqp1vo.cpp:26: int main(): Assertion `candidate((\"\
    abAB\")) == (131)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  // your code\n  if(s.length() == 0)\n    return 0;\n  long sum = 0;\n\
    \  for(int i = 0; i < s.length(); i++)\n  {\n    if(isupper(s[i]))\n      sum\
    \ += s[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    //Happy Coding ^_^\n    long sum = 0;\n    for(auto i:s)\n       \
    \ if(i>=65 && i<=90)\n            sum += i;\n    return sum;\n}\nint main() {\n\
    \    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(char c : s) {\n        if(c >= 'A' && c <=\
    \ 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int length = s.length();\n    int sum = 0;\n    for(int i = 0; i <\
    \ length; i++) {\n        int ascii = (int)s[i];\n        if(ascii > 64 && ascii\
    \ < 91) {\n            sum += ascii;\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"\
    )) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(isupper(s[i]))\n\
    \            sum += s[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    return std::accumulate(s.begin(), s.end(), 0, [](int acc, char c)\
    \ {\n        if (isupper(c))\n            return acc + c;\n        return acc;\n\
    \    });\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int len = s.length();\n    long sum = 0;\n    for(int i = 0; i < len;\
    \ i++) {\n        if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n// Write your code here\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: "tmpmnirme9s: /tmp/tmpmnirme9s.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum=0;\n    for(int i=0; i<s.length(); i++){\n        if(s[i]>=65\
    \ && s[i]<=90){\n            sum+=s[i];\n        }\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      sum += s[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int a = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (65 <=\
    \ s[i] && s[i] <= 90) {\n      a += s[i];\n    }\n  }\n  return a;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(char c : s) {\n        if(std::isupper(c))\n\
    \            sum += c;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tint sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (isupper(s[i]))\
    \ {\n\t\t\tsum += s[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      sum += (int)s[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long res = 0;\n  for (char c : s) {\n    res += isupper(c) ? (int)c\
    \ : 0;\n  }\n  return res;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(isupper(s[i])) {\n            sum += (int)s[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n   long upper = 0;\n   for(int i = 0; i < s.length(); i++) {\n      if(s[i]\
    \ >= 'A' && s[i] <= 'Z')\n      upper += (int)s[i];\n   }\n   return upper;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i]\
    \ >= 'A' && s[i] <= 'Z')\n\t\t\tsum += s[i];\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    return std::accumulate(s.begin(), s.end(), 0L, [](int64_t total, char\
    \ letter) {\n        return total + std::isupper(letter) ? letter : 0;\n    });\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: "tmp1c4frqtw: /tmp/tmp1c4frqtw.cpp:21: int main(): Assertion `candidate((\"\
    abAB\")) == (131)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(auto x : s) {\n        if(x >= 'A' && x <=\
    \ 'Z')\n            sum += x;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (isupper(s[i]))\
    \ {\n\t\t\tsum += (int)s[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n   \
    \ auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum=0;\n  for(int i=0;i<s.length();i++){\n    if(isupper(s[i]))\n\
    \    sum+=s[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum=0;\n  for(int i=0;i<s.length();i++){\n    if(s[i]>=65&&s[i]<=90){\n\
    \      sum+=s[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      sum += (int)s[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long long int count=0;\n    for(int i=0;i<s.length();i++)\n    {\n\
    \        if(s[i]>='A' && s[i]<='Z')\n        {\n            count=count+s[i];\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  std::for_each(s.begin(), s.end(), [&sum](char& c) {\n\
    \    if(std::isupper(c))\n    sum += static_cast<int>(c);\n  });\n  return sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  //  function that takes a string as input and returns the sum of the\
    \ upper characters only\n  //  ASCII codes.\n  //  Examples:\n  //  digitSum(\"\
    \") => 0\n  //  digitSum(\"abAB\") => 131\n  //  digitSum(\"abcCd\") => 67\n \
    \ //  digitSum(\"helloE\") => 69\n  //  digitSum(\"woArBld\") => 131\n  //  digitSum(\"\
    aAaaaXa\") => 153\n  // your code here\n  long sum = 0;\n  for (auto & c : s)\n\
    \    if (isupper(c)) sum += c;\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    // your code\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n           \
    \ sum += s[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += (int)s[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(auto ch : s) {\n        if(isupper(ch)) {\n\
    \            sum += ch;\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i]\
    \ >= 'A' && s[i] <= 'Z')\n\t\t\tsum += s[i];\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif ((int)s[i]\
    \ >= 65 && (int)s[i] <= 90) {\n\t\t\tsum += (int)s[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    std::vector<char> letters;\n    letters.push_back('A');\n    letters.push_back('B');\n\
    \    letters.push_back('C');\n    letters.push_back('D');\n    letters.push_back('E');\n\
    \    letters.push_back('F');\n    letters.push_back('G');\n    letters.push_back('H');\n\
    \    letters.push_back('I');\n    letters.push_back('J');\n    letters.push_back('K');\n\
    \    letters.push_back('L');\n    letters.push_back('M');\n    letters.push_back('N');\n\
    \    letters.push_back('O');\n    letters.push_back('P');\n    letters.push_back('Q');\n\
    \    letters.push_back('R');\n    letters.push_back('S');\n    letters.push_back('T');\n\
    \    letters.push_back('U');\n    letters.push_back('V');\n    letters.push_back('W');\n\
    \    letters.push_back('X');\n    letters.push_back('Y');\n    letters.push_back('Z');\n\
    \    int res=0;\n    for(int i=0;i<s.length();i++){\n        if(std::find(letters.begin(),\
    \ letters.end(), s[i]) != letters.end())\n            res += s[i];\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long a=0;\n    for(int i=0;i<s.length();i++)\n    {\n        if(int(s[i])<=90\
    \ && int(s[i])>=65)\n        {\n            a+=int(s[i]);\n        }\n    }\n\
    \    return a;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (char c : s)\n\t\tif (isupper(c))\n\t\t\tsum +=\
    \ c;\n\treturn sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z')\n      sum += s[i];\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    // your code here\n    long int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isupper(s[i]))\n        {\n            sum = sum + s[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ int tmp = s[i];\n        if(tmp >= 65 && tmp <= 90) {\n            sum += tmp;\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    std::transform(s.begin(), s.end(), s.begin(), ::toupper);\n\
    \    for (int i = 0; i < s.length(); i++) {\n        sum += s[i];\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: "tmptmre_qc_: /tmp/tmptmre_qc_.cpp:24: int main(): Assertion `candidate((\"\
    abAB\")) == (131)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(auto c : s)\n    {\n        if(std::isupper(c))\n\
    \        {\n            sum += int(c);\n        }\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long total{0};\n    if (s.empty()) {\n        return total;\n    }\n\
    \    for (const auto& i : s) {\n        if (i >= 'A' && i <= 'Z') {\n        \
    \    total += i;\n        }\n    }\n    return total;\n}\nint main() {\n    auto\
    \ candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    if(s.empty())\n        return 0;\n    long res=0;\n    for(int i=0;i<s.size();i++)\n\
    \    {\n        if(isupper(s[i]))\n            res+=s[i];\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\t// Your code goes here!\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\t// std::cout << s[i] << \" \" << (int)s[i] << std::endl;\n\t\tif\
    \ (s[i] >= 65 && s[i] <= 90) {\n\t\t\tsum += (int)s[i];\n\t\t}\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ <= 'Z' && s[i] >= 'A') {\n      sum += s[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\t// double check if this is still a valid answer.\n\tint sum = 0;\n\t\
    for (int i = 0; i < s.length(); i++) {\n\t\tif (s[i] >= 'A' && s[i] <= 'Z') {\n\
    \t\t\tsum += (int)s[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    if(s.empty())\n        return 0;\n    unsigned long sum = 0;\n   \
    \ for(auto& c : s)\n        if(isupper(c))\n            sum += c;\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    // your code here\n    long sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++){\n      if(isupper(s[i])){\n        sum += int(s[i]);\n      }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum=0;\n    for(int i=0;i<s.length();i++){\n      if(isupper(s[i])){\n\
    \        sum+=s[i];\n      }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ sum += (s[i] >= 'A' && s[i] <= 'Z') ? s[i] : 0;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(isupper(s[i]))\n\
    \            sum += (int)s[i];\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (islower(s[i]))\
    \ {\n      sum += s[i] - 'a' + 1;\n    } else {\n      sum += s[i] - 'A' + 1;\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: "tmpa1xzuxgd: /tmp/tmpa1xzuxgd.cpp:27: int main(): Assertion `candidate((\"\
    abAB\")) == (131)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum=0;\n\tfor(auto a:s)\n\t{\n\t\tif(isupper(a))\n\t\t\tsum+=a;\n\
    \t}\n\treturn sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long ans = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z')\n            ans += s[i];\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (int(s[i])\
    \ >= 65 && int(s[i]) <= 90) {\n\t\t\tsum += int(s[i]);\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int count = 0;\n  for(int i = 0; i < s.length(); i++){\n    if(isupper(s[i]))\n\
    \      count += s[i];\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65&&s[i]<=90){\n\
    \            sum+=(int)s[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    if(s.length()==0)\n        return 0;\n    int sum=0;\n    for(int\
    \ i=0;i<s.length();i++)\n    {\n        if(int(s[i])>64 && int(s[i])<91)\n   \
    \         sum+=int(s[i]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  \treturn std::accumulate(s.begin(), s.end(), 0, [](int accum, char ch){\n\
    \    \treturn (ch > 64 && ch < 91) ? accum + ch : accum;\n    });\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(isupper(s[i])) {\n            sum += (int)s[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    //coding and coding....\n    long long int sum=0;\n    for(int i=0;i<s.length();i++)\n\
    \    {\n        if(s[i]>=65 && s[i]<=90)\n        {\n            sum=sum+s[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(isupper(s[i]))\
    \ {\n            sum += s[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  if(s.length() == 0) return 0;\n  else {\n    for(int\
    \ i = 0; i < s.length(); i++) {\n      if(islower(s[i])) continue;\n      else\
    \ sum += s[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: "tmphse_nry5: /tmp/tmphse_nry5.cpp:32: int main(): Assertion `candidate((\"\
    \ How are yOu?\")) == (151)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  for (char i : s) {\n    if (i >= 'A' && i <= 'Z') {\n\
    \      sum += i;\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  std::cout << s << std::endl;\n  long digitSum = 0;\n  for (int i = 0;\
    \ i < s.length(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      digitSum\
    \ += (int)s[i];\n    }\n  }\n  return digitSum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: "\nabAB\nabcCd\nhelloE\nwoArBld\naAaaaXa\n How are yOu?\nYou arE Very Smart\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (auto &x : s) {\n    if (isupper(x)) {\n      sum\
    \ += (int)x;\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\"\
    )) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum=0;\n    for(int i=0;i<s.length();i++){\n        if(int(s[i])>=65\
    \ && int(s[i])<=90){\n            sum+=int(s[i]);\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      sum += (int)s[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (size_t i = 0; i < s.size(); i++) {\n    if (65\
    \ <= (int)s[i] && 90 >= (int)s[i]) {\n      sum += (int)s[i];\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(char &c : s) {\n        if(isupper(c))\n  \
    \          sum += c;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if\
    \ (int(s[i]) >= 65 && int(s[i]) <= 90) {\n            sum += int(s[i]);\n    \
    \    }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tint sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tint a =\
    \ s[i];\n\t\tif (a >= 65 && a <= 90) {\n\t\t\tsum += a;\n\t\t}\n\t}\n\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    // your code\n    // string to lower case\n    transform(s.begin(),\
    \ s.end(), s.begin(), ::tolower);\n    // cout << s << endl;\n    int n = s.length();\n\
    \    int sum = 0;\n    for(int i = 0; i < n; i++) {\n        int a = s[i];\n \
    \       if(a >= 65 && a <= 90) {\n            sum += a;\n        }\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: "tmpnuj0q00_: /tmp/tmpnuj0q00_.cpp:31: int main(): Assertion `candidate((\"\
    abAB\")) == (131)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long ans = 0;\n    for(char ch : s)\n        if(isupper(ch))\n   \
    \         ans += ch;\n    return ans;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  return std::accumulate(s.begin(), s.end(), 0, [](auto& a, auto& b) {\n\
    \    return a + (isupper(b) ? b : 0);\n  });\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum=0;\n  for(int i=0;i<s.length();i++){\n    sum+=(s[i]>='A' &&\
    \ s[i]<='Z')?s[i]:0;\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  // your code\n  long result=0;\n  for(auto it:s)\n  {\n      if(isupper(it))\n\
    \      {\n          result+=it;\n      }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  int size = s.size();\n  for(int i = 0; i < size; i++)\
    \ {\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      sum += s[i];\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      sum += s[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(auto ch : s) {\n        if(ch > 64 && ch <\
    \ 91)\n            sum += ch;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  \n  long sum = 0;\n  for(char c : s) {\n    if (c >= 'A' && c <= 'Z')\n\
    \      sum += int(c);\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tif (s.length() == 0)\n\t\treturn 0;\n\tlong sum = 0;\n\tfor (char c\
    \ : s) {\n\t\tif (c >= 'A' && c <= 'Z')\n\t\t\tsum += (int)c;\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long long total=0;\n  if(s.length()==0)\n  {\n    return 0;\n  }\n \
    \ for(int i=0;i<s.length();i++)\n  {\n    if(isupper(s[i]))\n    {\n      total+=s[i];\n\
    \    }\n  }\n  return total;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    if (s.empty())\n        return sum;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n   \
    \         sum += s[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    if(s.size()==0) return 0;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='A' && s[i]<='Z')\n            sum += s[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += (int)s[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n   \
    \ assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(long i = 0; i < s.length(); i++) {\n      \
    \  if(s[i] <= 'Z' && s[i] >= 'A') {\n            sum += s[i];\n        }\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  \tlong sum = 0;\n  \tfor(auto it: s) {\n    \t\tif(std::isupper(it))\
    \ {\n      \t\t\tsum += static_cast<long>(it);\n    \t\t}\n  \t}\n  \treturn sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(char &c : s)\n        if(c >= 'A' && c <= 'Z')\n\
    \            sum += c;\n    return sum;\n}\nint main() {\n    auto candidate =\
    \ digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\"\
    )) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tint length = s.length();\n\tfor (int i = 0; i < length;\
    \ i++) {\n\t\tif (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tsum += s[i];\n\t\t}\n\t\
    }\n\treturn sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum=0;\n  for(int i=0;i<s.length();i++){\n    if(s[i]>='A' && s[i]<='Z'){\n\
    \      sum+=(s[i]-64);\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: "tmpvel0e6h5: /tmp/tmpvel0e6h5.cpp:25: int main(): Assertion `candidate((\"\
    abAB\")) == (131)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ > 64 && s[i] < 91) {\n            sum += s[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (auto c : s) {\n\t\tif (isupper(c)) {\n\t\t\tsum\
    \ += c;\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  std::cout << s << std::endl;\n  long sum = 0;\n  if(s.length()==0) return\
    \ 0;\n  std::cout << \"String Length is: \" << s.length() << std::endl;\n  for(int\
    \ i=0; i<s.length(); i++){\n    std::cout << \"Character is: \" << s[i] << std::endl;\n\
    \    std::cout << \"Value is: \" << (int)s[i] << std::endl;\n    sum += s[i];\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: "\nabAB\nString Length is: 4\nCharacter is: a\nValue is: 97\nCharacter is:\
    \ b\nValue is: 98\nCharacter is: A\nValue is: 65\nCharacter is: B\nValue is: 66\n"
  stderr: "tmplgg_875h: /tmp/tmplgg_875h.cpp:28: int main(): Assertion `candidate((\"\
    abAB\")) == (131)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n\t\t\tsum += s[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long result = 0;\n  if(s.length() == 0)\n    return 0;\n  for(long i\
    \ = 0; i < s.length(); i++)\n  {\n    if(s[i] >= 'A' && s[i] <= 'Z')\n      result\
    \ += s[i];\n  }\n  return result;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong long int sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\
    \tif (isupper(s[i])) {\n\t\t\tsum += s[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint\
    \ main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"\
    )) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  // enter your code here\n  \n  if(s.size() == 0) return 0;\n  long total\
    \ = 0;\n  for(int i = 0; i < s.size(); i++){\n  \tif(s[i] >= 'A' && s[i] <= 'Z'){\n\
    \  \t\ttotal += (int)s[i];\n  \t}\n  }\n  return total;\n}\nint main() {\n   \
    \ auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (auto i : s) {\n    if (std::isupper(i)) {\n  \
    \    sum += (int)i;\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long result = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      result += s[i];\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i]\
    \ >= 'A' && s[i] <= 'Z')\n\t\t\tsum += (int)s[i];\n\t}\n\treturn sum;\n}\nint\
    \ main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"\
    )) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  //  auto r=std::accumulate(s.begin(),s.end(),0,[](long long a,char c){\n\
    \  //   return a+std::isupper(c)?c:0;\n  // });\n  //  return r;\n  return std::accumulate(s.begin(),s.end(),0,[](long\
    \ long a,char c){\n   return a+std::isupper(c)?c:0;\n  });\n}\nint main() {\n\
    \    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: "tmp9vaznj1o: /tmp/tmp9vaznj1o.cpp:25: int main(): Assertion `candidate((\"\
    abAB\")) == (131)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum=0;\n\tfor(char c:s) if(c>=65 && c<=90) sum+=c;\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong result = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (isupper(s[i]))\
    \ {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n  \
    \  auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong output = 0;\n\tfor (long i = 0; i < s.length(); i++) {\n\t\tif\
    \ (s[i] > 64 && s[i] < 91) {\n\t\t\toutput += s[i];\n\t\t}\n\t}\n\treturn output;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tlong sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n\t\t\tsum += (int)s[i];\n\t\t}\n\t}\n\treturn sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if\
    \ (std::isupper(s[i])) {\n            sum += s[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    // your code here\n    int sum = 0;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if((int)s[i] >= 65 && (int)s[i] <= 90){\n            sum = sum\
    \ + (int)s[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long a=0;\n  for(int i=0;i<s.length();i++)\n  {\n    if(s[i]>='A' &&\
    \ s[i]<='Z')\n    {\n      a+=s[i];\n    }\n  }\n  return a;\n}\nint main() {\n\
    \    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int result = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n\
    \            result += c;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (char c : s) {\n    if (isupper(c)) {\n      sum\
    \ += c;\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long r=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='A'\
    \ && s[i]<='Z'){\n            r+=s[i];\n        }\n    }\n    return r;\n}\nint\
    \ main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"\
    )) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int counter = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      counter += s[i];\n    }\n  }\n  return counter;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long ascii_codes=0;\n    for(int i=0;i<s.length();i++){\n        if(s[i]<=90&&s[i]>=65){\n\
    \            ascii_codes+=s[i];\n        }\n    }\n    return ascii_codes;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(auto it = s.begin(); it != s.end(); it++) {\n\
    \        if(*it >= 'A' && *it <= 'Z') {\n            sum += (int)*it;\n      \
    \  }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int len = s.length();\n    long result = 0;\n    for(int i = 0; i\
    \ < len; i++) {\n        int digit = s[i];\n        if(digit >= 65 && digit <=\
    \ 90) {\n            result += digit;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  if (s.length() == 0) {\n    return 0;\n  }\n  for (char\
    \ c : s) {\n    if (c >= 'A' && c <= 'Z') {\n      sum += c;\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += (int)s[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n   \
    \ assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += (int)s[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n   \
    \ assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  if (s.empty()) {\n    return sum;\n  }\n  else {\n\
    \    for (char &x : s) {\n      if (isupper(x)) {\n        sum += x;\n      }\n\
    \    }\n    return sum;\n  }\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  char c;\n  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n\
    \    c = s[i];\n    if (isupper(c)) {\n      sum += c;\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  std::transform(s.begin(), s.end(), s.begin(), ::toupper);\n\
    \  for (int i = 0; i < s.length(); i++) {\n    if (isupper(s[i]))\n      sum +=\
    \ s[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: "tmp9cae0aem: /tmp/tmp9cae0aem.cpp:25: int main(): Assertion `candidate((\"\
    abAB\")) == (131)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long r = 0;\n    for (auto i : s) {\n        if (isupper(i))\n   \
    \         r += i;\n    }\n    return r;\n}\nint main() {\n    auto candidate =\
    \ digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\"\
    )) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (isupper(s[i]))\
    \ {\n      sum += s[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  // your code here\n  long sum = 0;\n  for(int i = 0; i < s.length();\
    \ i++){\n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      sum += s[i];\n    }\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(isupper(s[i])) {\n            sum += s[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (char & c : s) {\n    if (c >= 'A' && c <= 'Z')\n\
    \      sum += c;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if(s[i]\
    \ >= 'A' && s[i] <= 'Z')\n    sum += s[i];\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  if(s.length()==0)\n  return 0;\n  else\n  {\n    long sum=0;\n    for(int\
    \ i=0;i<s.length();i++)\n    {\n      if(s[i]>=65 && s[i]<=90)\n      sum+=s[i];\n\
    \    }\n    return sum;\n  }\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    if(s.length()==0)\n        return 0;\n    // auto it = std::find_if(s.begin(),\
    \ s.end(), [](char c) { return !std::isdigit(c); } );\n    // long pos = std::distance(s.begin(),\
    \ it);\n    long long int sum = 0;\n    for(long long int i=0;i<s.length();i++)\n\
    \    {\n        if(s[i]>=65 && s[i]<=90)\n            sum+=s[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  if(s.length() == 0)\n  {\n    return 0;\n  }\n  std::map<char,int>alph;\n\
    \  for(int i = 0; i < 26; i++)\n  {\n    alph['A'+i] = 65+i;\n    alph['a'+i]\
    \ = 97+i;\n  }\n  long sum=0;\n  for(int i = 0; i < s.length(); i++)\n  {\n  \
    \  if(alph[s[i]]>=65 && alph[s[i]]<=90)\n    {\n      sum += alph[s[i]];\n   \
    \ }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n   \
    \ assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] <= 'Z' && s[i] >= 'A') {\n            sum += s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  //your code here\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: "tmpeibwy3ju: /tmp/tmpeibwy3ju.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum=0;\n    for(int i=0;i<s.length();i++){\n        if(isupper(s[i])){\n\
    \            sum+=s[i];\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\t// Check if string is empty\n\tif (s.empty()) {\n\t\treturn 0;\n\t}\n\
    \t// Make result a double because if it is an int it would go out of scope\n\t\
    double result = 0;\n\t// Iterate through the string and check if the character\
    \ is uppercase\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t// If it is uppercase\
    \ add the value to the result\n\t\tif (isupper(s[i])) {\n\t\t\tresult += s[i];\n\
    \t\t}\n\t}\n\t// Cast the result back to an int because there is no need for the\
    \ extra\n\t// decimals\n\treturn (int)result;\n}\nint main() {\n    auto candidate\
    \ = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum=0;\n    for(char ch:s)\n    {\n        if(ch>=65 && ch<=90)\n\
    \        {\n            sum+=ch;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(char ch : s)\n        if(isupper(ch))\n   \
    \         sum += ch;\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    std::transform(s.begin(), s.end(), s.begin(), ::toupper);\n    int\
    \ sum = 0;\n    for (char &c : s)\n        if (c >= 'A' && c <= 'Z')\n       \
    \     sum += c;\n    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n\
    \    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n\
    \    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\"\
    )) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: "tmphg1tpwrm: /tmp/tmphg1tpwrm.cpp:24: int main(): Assertion `candidate((\"\
    abAB\")) == (131)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    // i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n    // 65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90\n    int sum = 0;\n    for (auto c : s) {\n        if\
    \ (c >= 65 && c <= 90)\n            sum += c;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n\
    \    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"\
    )) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\t// Your code here\n\tlong sum = 0;\n\tfor (auto it = s.begin(); it !=\
    \ s.end(); it++) {\n\t\tint val = *it;\n\t\tif (val > 64 && val < 91) {\n\t\t\t\
    sum += val;\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate =\
    \ digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\"\
    )) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum = 0;\n    for(auto i: s)\n    {\n        if(i >= 'A' && i\
    \ <= 'Z')\n        {\n            sum += (long)i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n\tint sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (isupper(s[i]))\
    \ {\n\t\t\tsum += (int)s[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n   \
    \ auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long result = 0;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     result += s[i] >= 'A' && s[i] <= 'Z' ? s[i] : 0;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  std::vector<int> arr = {};\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if (s[i] > 64 && s[i] < 91) {\n      sum += s[i];\n    }\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            sum += (int)s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (isupper(s[i]))\n\
    \      sum += s[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\"\
    )) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            sum += (int)s[i];\n        }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ > 64 && s[i] < 91) {\n      sum += (int)s[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      sum += s[i];\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long sum=0;\n    for(int i=0; i<s.length(); i++){\n        if(isupper(s[i])){\n\
    \            sum += s[i];\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n        int\
    \ c = s[i];\n        if(c >= 65 && c <= 90)\n            sum += c;\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (isupper(s[i]))\
    \ {\n      sum += s[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
    abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"\
    helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"\
    aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n\
    \    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    int count = 0;\n    for(int i = 0; i < s.length(); i++){\n       \
    \ if(s[i] >= 'A' && s[i] <= 'Z')\n            count += s[i];\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long result = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      result += s[i];\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    if(s.empty()) return 0;\n    int count = 0;\n    for(int i = 0; i\
    \ < s.length(); i++){\n        if(isupper(s[i]))\n        count += s[i];\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    std::cout << s << std::endl;\n    std::cout << \"----\" << std::endl;\n\
    \    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        int number\
    \ = s[i];\n        std::cout << number << std::endl;\n        if (number > 64\
    \ && number < 91) {\n            sum += number;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\
    \")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: "\n----\nabAB\n----\n97\n98\n65\n66\nabcCd\n----\n97\n98\n99\n67\n100\n\
    helloE\n----\n104\n101\n108\n108\n111\n69\nwoArBld\n----\n119\n111\n65\n114\n\
    66\n108\n100\naAaaaXa\n----\n97\n65\n97\n97\n97\n88\n97\n How are yOu?\n----\n\
    32\n72\n111\n119\n32\n97\n114\n101\n32\n121\n79\n117\n63\nYou arE Very Smart\n\
    ----\n89\n111\n117\n32\n97\n114\n69\n32\n86\n101\n114\n121\n32\n83\n109\n97\n\
    114\n116\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      sum += (int)s[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  if (s.empty()) return 0;\n  long sum = 0;\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') sum += s[i];\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long long sum = 0;\n    for(int i = 0; i < s.length(); i++) {\n  \
    \      sum += isupper(s[i]) ? s[i] : 0;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n \
    \   assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\"))\
    \ == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n    long long int sum=0;\n    for(char c:s)\n    {\n        if(c>=65 &&\
    \ c<=90)\n        {\n            sum+=c;\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"))\
    \ == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    // ASCII codes.\n// Examples:\n// digitSum(\"\") => 0\n// digitSum(\"abAB\") =>\
    \ 131\n// digitSum(\"abcCd\") => 67\n// digitSum(\"helloE\") => 69\n// digitSum(\"\
    woArBld\") => 131\n// digitSum(\"aAaaaXa\") => 153\nlong digitSum(std::string\
    \ s) {\n  int upper = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ > 64 && s[i] < 91) {\n      upper += s[i];\n    }\n  }\n  return upper;\n}\n\
    int main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) ==\
    \ (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
    abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
    woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
    \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\"))\
    \ == (327));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
