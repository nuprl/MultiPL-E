language: cpp
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto str : strings) {\n        if (str.substr(0,prefix.length()) == prefix)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098395
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (std::string\
    \ word : strings) {\n    if (word.substr(0, prefix.length()) == prefix) {\n  \
    \    result.push_back(word);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(result),\n               [&prefix](std::string\
    \ s) { return s.compare(0, prefix.size(), prefix) == 0; });\n  return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    // TODO: implement!\n    std::vector<std::string>\
    \ v;\n    for(auto &s: strings){\n        if(s.substr(0, prefix.size()) == prefix){\n\
    \            v.push_back(s);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098395
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(result), [&prefix](const std::string& s) {\n\
    \        return !s.compare(0, prefix.size(), prefix);\n    });\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> prefix_strings;\n\
    \  for (auto str : strings) {\n    if (str.substr(0, prefix.length()) == prefix)\
    \ {\n      prefix_strings.push_back(str);\n    }\n  }\n  return prefix_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098395
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    //return std::remove_if(strings.begin(),\
    \ strings.end(),\n    //         [prefix](std::string &s) {\n    //          \
    \   return !(s.compare(0, prefix.length(), prefix) == 0);\n    //         });\n\
    \    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n\
    \        if (s.compare(0, prefix.length(), prefix) == 0) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (int\
    \ i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(prefix) == 0) {\n\
    \t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ans;\n    for (auto\
    \ str : strings) {\n        if (str.rfind(prefix, 0) == 0) {\n            ans.push_back(str);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098395
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> prefixed_list;\n\
    \  for (std::string& string : strings) {\n    if (string.find(prefix) == 0)\n\
    \      prefixed_list.push_back(string);\n  }\n  return prefixed_list;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (std::string\
    \ s : strings) {\n    if (std::mismatch(prefix.begin(), prefix.end(), s.begin()).first\
    \ == prefix.end()) {\n      result.push_back(s);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (auto\
    \ s : strings) {\n\t\tif (s.size() < prefix.size()) continue;\n\t\tif (s.substr(0,\
    \ prefix.size()) == prefix) result.push_back(s);\n\t}\n\treturn result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (std::string\
    \ string : strings) {\n\t\tif (string.substr(0,prefix.length()) == prefix) {\n\
    \t\t\tresult.push_back(string);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> pVector;\n    //\
    \ BEGIN\n    std::copy_if(strings.begin(), strings.end(), std::back_inserter(pVector),\n\
    \        [&prefix](const std::string& str) { return str.rfind(prefix, 0) == 0;\
    \ });\n    // END\n    return pVector;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    //\
    \ YOUR CODE HERE\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].size()<prefix.size()){\n\
    \            continue;\n        }\n        bool flag=true;\n        for(int j=0;j<prefix.size();j++){\n\
    \            if(strings[i][j]!=prefix[j]){\n                flag=false;\n    \
    \            break;\n            }\n        }\n        if(flag){\n           \
    \ result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.substr(0, prefix.length()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    // write your solution here\n    std::vector<std::string>\
    \ v;\n    for(auto s: strings){\n        if(s.size() >= prefix.size() && std::equal(prefix.begin(),\
    \ prefix.end(), s.begin()))\n            v.push_back(s);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (auto\
    \ it = strings.begin(); it != strings.end(); ++it) {\n\t\tif (prefix.size() <=\
    \ it->size() && !it->compare(0, prefix.size(), prefix)) {\n\t\t\tresult.push_back(*it);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> new_string;\n \
    \   for(int i=0;i<strings.size();i++){\n        std::string s = strings[i];\n\
    \        for(int j=0;j<prefix.size();j++){\n            if(s[j]!=prefix[j]){\n\
    \                break;\n            }\n            if(j==prefix.size()-1){\n\
    \                new_string.push_back(s);\n            }\n        }\n    }\n \
    \   return new_string;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> string_array;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        std::string str = strings[i];\n\
    \        if (str.compare(0, prefix.length(), prefix) == 0) {\n            string_array.push_back(str);\n\
    \        }\n    }\n    return string_array;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098395
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string str : strings) {\n        if (str.substr(0, prefix.length()) ==\
    \ prefix)\n            result.push_back(str);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (const auto& string : strings) {\n        if (string.compare(0, prefix.size(),\
    \ prefix) == 0) {\n            result.push_back(string);\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> sublist;\n    for\
    \ (auto it = strings.begin(); it != strings.end(); it++) {\n        if (it->find(prefix)\
    \ == 0) {\n            sublist.push_back(*it);\n        }\n    }\n    return sublist;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    std::copy_if(strings.begin(),\
    \ strings.end(), back_inserter(result), [prefix](std::string s) { return s.substr(0,\
    \ prefix.size()) == prefix; });\n    return result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    // To be completed.\n    std::vector<std::string>\
    \ outputVector;\n    for(std::string i : strings){\n        if(i.substr(0, prefix.length())\
    \ == prefix){\n            outputVector.push_back(i);\n        }\n    }\n    return\
    \ outputVector;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n   \
    \ assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (auto\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> filtered;\n   \
    \ for (const auto& str : strings) {\n        if (str.find(prefix) == 0) {\n  \
    \          filtered.push_back(str);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> output;\n  for (const\
    \ auto &s : strings) {\n    if (s.find(prefix) == 0) {\n      output.push_back(s);\n\
    \    }\n  }\n  return output;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ret;\n    // your\
    \ code here\n    for(int i=0;i<strings.size();i++){\n        if(strings[i].find(prefix)\
    \ == 0){\n            ret.push_back(strings[i]);\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (std::mismatch(prefix.begin(), prefix.end(),\
    \ s.begin()).first == prefix.end()) {\n            result.push_back(s);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (auto\
    \ &s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (auto\
    \ string : strings) {\n    if (string.find(prefix) == 0) {\n      result.push_back(string);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    //\
    \ Your code here\n    std::copy_if(std::begin(strings), std::end(strings), std::back_inserter(result),\
    \ [&prefix](std::string s) { return s.find(prefix) == 0; });\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> out_vec;\n  for (std::string\
    \ s : strings) {\n    if (s.substr(0, prefix.length()) == prefix) {\n      out_vec.push_back(s);\n\
    \    }\n  }\n  return out_vec;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ &x : strings) {\n        std::string ss = x.substr(0, prefix.size());\n    \
    \    if (ss == prefix)\n            res.push_back(x);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ans;\n    for (int\
    \ i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n            ans.push_back(strings[i]);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> res;\n  for (auto\
    \ s : strings) {\n    if (s.find(prefix) == 0) {\n      res.push_back(s);\n  \
    \  }\n  }\n  return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  int count = 0;\n  for (std::string s : strings)\
    \ {\n    if (s.find(prefix) == 0)\n      count++;\n  }\n  std::vector<std::string>\
    \ matches(count);\n  int i = 0;\n  for (std::string s : strings) {\n    if (s.find(prefix)\
    \ == 0)\n      matches[i++] = s;\n  }\n  return matches;\n}\nint main() {\n  \
    \  auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    // your\
    \ code goes here\n    for(int i=0;i<strings.size();i++){\n        // std::cout<<strings[i].substr(0,prefix.size())<<\"\
    \\n\";\n        if(strings[i].substr(0,prefix.size())==prefix){\n            res.push_back(strings[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    int\
    \ count = 0;\n    for (auto str : strings) {\n        if (str.find(prefix) ==\
    \ 0) {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    assert(strings.size() >= 0);\n    assert(prefix.size()\
    \ >= 0);\n    std::vector<std::string> result;\n    for (int i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].substr(0, prefix.size()) == prefix) {\n     \
    \       result.push_back(strings[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> filtered_strings;\n\
    \  for (auto str : strings) {\n    if (str.find(prefix) == 0)\n      filtered_strings.push_back(str);\n\
    \  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098394
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    //\
    \ TODO: implement me.\n    for(std::string str : strings){\n        if(str.find(prefix)\
    \ == 0){\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> ans;\n  for (int\
    \ i = 0; i < strings.size(); i++) {\n    if (strings[i].find(prefix) == 0) {\n\
    \      ans.push_back(strings[i]);\n    }\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ iter = strings.begin(); iter != strings.end(); iter++) {\n        if (prefix.size()\
    \ > (*iter).size()) {\n            continue;\n        }\n        std::string substr\
    \ = (*iter).substr(0, prefix.size());\n        if (substr == prefix) {\n     \
    \       res.push_back(*iter);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> results;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            results.push_back(strings[i]);\n        }\n    }\n    return\
    \ results;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> new_strings;\n\
    \    for (auto& s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            new_strings.push_back(s);\n        }\n    }\n    return new_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  // input list of strings\n  // check string\
    \ length\n  // prefix check;\n  std::vector<std::string> strings_res;\n  for (auto\
    \ it = strings.begin(); it != strings.end(); it++) {\n    // std::cout << *it\
    \ << std::endl;\n    std::string str = *it;\n    // std::cout << str << std::endl;\n\
    \    if (str.length() >= prefix.length()) {\n      if (str.substr(0, prefix.length())\
    \ == prefix) {\n        strings_res.push_back(str);\n      }\n    }\n  }\n  return\
    \ strings_res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> results;\n  for (int\
    \ i = 0; i < strings.size(); i++) {\n    if (strings[i].find(prefix) == 0) {\n\
    \      results.push_back(strings[i]);\n    }\n  }\n  return results;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto& str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098397
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    // edge case\n    if (strings.size() ==\
    \ 0) {\n        return strings;\n    }\n    std::vector<std::string> prefix_strings;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0,\
    \ prefix.size()) == prefix) {\n            prefix_strings.push_back(strings[i]);\n\
    \        }\n    }\n    return prefix_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> prefixed;\n\tfor\
    \ (std::string s : strings) {\n\t\tif (s.find(prefix) == 0) {\n\t\t\tprefixed.push_back(s);\n\
    \t\t}\n\t}\n\treturn prefixed;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto elem : strings) {\n        if (elem.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(elem);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> filtered;\n\tfor\
    \ (auto str : strings) {\n\t\tif (str.find(prefix) == 0) {\n\t\t\tfiltered.push_back(str);\n\
    \t\t}\n\t}\n\treturn filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> new_strings;\n\t\
    for (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(prefix) ==\
    \ 0) {\n\t\t\tnew_strings.push_back(strings[i]);\n\t\t}\n\t}\n\treturn new_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    int n = strings.size();\n    std::vector<std::string>\
    \ result;\n    for (auto& str : strings) {\n        if (str.find(prefix) == 0)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> tmp;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(tmp), [&prefix](std::string str) {\n     \
    \   return str.compare(0, prefix.length(), prefix) == 0;\n    });\n    return\
    \ tmp;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> output;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n            output.push_back(strings[i]);\n        }\n    }\n\
    \    return output;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> to_return;\n  \
    \  for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n     \
    \       to_return.push_back(s);\n        }\n    }\n    return to_return;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    auto it = std::copy_if(std::begin(strings),\
    \ std::end(strings), std::back_inserter(strings), [&prefix](const std::string&\
    \ s) {\n       return s.rfind(prefix, 0) == 0;\n    });\n    strings.erase(it,\
    \ std::end(strings));\n    return strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3aycyp5x.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp3aycyp5x.cpp:12:40: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::erase(std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >&, std::vector<std::__cxx11::basic_string<char> >::iterator)\u2019\n   12\
    \ |     strings.erase(it, std::end(strings));\n      |                       \
    \                 ^\nIn file included from /usr/include/c++/9/vector:67,\n   \
    \              from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp3aycyp5x.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1427:7: note:\
    \ candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::__cxx11::basic_string<char>*;\
    \ std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer\
    \ = const std::__cxx11::basic_string<char>*]\u2019\n 1427 |       erase(const_iterator\
    \ __position)\n      |       ^~~~~\n/usr/include/c++/9/bits/stl_vector.h:1427:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/bits/stl_vector.h:1454:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_itera"
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (std::string\
    \ s : strings) {\n        if (s.find(prefix) == 0) {\n            res.push_back(s);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> filtered;\n   \
    \ for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            filtered.push_back(strings[i]);\n        }\n    }\n   \
    \ return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> matching_strings;\n\
    \tfor (auto str : strings) {\n\t\tif (str.substr(0, prefix.length()) == prefix)\
    \ {\n\t\t\tmatching_strings.push_back(str);\n\t\t}\n\t}\n\treturn matching_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> res;\n  for (auto\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      res.push_back(s);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    //if no strings in vector then return the\
    \ empty vector\n    if(strings.size() == 0)\n    {\n        return strings;\n\
    \    }\n    //if prefix length is 0 then return the empty vector\n    if(prefix.length()\
    \ == 0)\n    {\n        return strings;\n    }\n    //create a vector to store\
    \ the strings which start with the prefix\n    std::vector<std::string> prefixStrings;\n\
    \    for(int i = 0; i < strings.size(); i++)\n    {\n        //if the prefix is\
    \ equal to the substring of the string in the vector, add it to the new vector\n\
    \        if(prefix == strings[i].substr(0, prefix.length()))\n        {\n    \
    \        prefixStrings.push_back(strings[i]);\n        }\n    }\n    return prefixStrings;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> list;\n    for(int\
    \ i=0;i<strings.size();i++){\n        if(prefix.size()<=strings[i].size()){\n\
    \            if(prefix==strings[i].substr(0,prefix.size())){\n               \
    \ list.push_back(strings[i]);\n            }\n        }\n    }\n    return list;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> filted;\n  for (auto\
    \ s : strings) {\n    if (s.find(prefix) == 0) {\n      filted.push_back(s);\n\
    \    }\n  }\n  return filted;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> output;\n    std::vector<std::string>::iterator\
    \ it;\n    for(it = strings.begin(); it != strings.end(); it++) {\n        if\
    \ (it->find(prefix) == 0)\n            output.push_back(*it);\n    }\n    return\
    \ output;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> v;\n    for(auto\
    \ i : strings)\n        if(i.substr(0, prefix.size()) == prefix)\n           \
    \ v.push_back(i);\n    return v;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string word : strings) {\n        if (word.substr(0, prefix.length())\
    \ == prefix) {\n            result.push_back(word);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ans;\n    for (const\
    \ auto &string : strings) {\n        if (string.find(prefix) == 0) {\n       \
    \     ans.push_back(string);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> res;\n  for (int\
    \ i = 0; i < strings.size(); i++) {\n    std::string str = strings[i];\n    if\
    \ (str.substr(0,prefix.size()) == prefix) {\n      res.push_back(str);\n    }\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(res), [prefix](std::string str) -> bool {\n\
    \        return str.find(prefix) == 0;\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (int\
    \ i = 0; i < strings.size(); i++) {\n    if (strings[i].substr(0, prefix.size())\
    \ == prefix)\n      result.push_back(strings[i]);\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string str : strings) {\n        if (str.find(prefix) == 0) {\n      \
    \      result.push_back(str);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> prefix_strings;\n\
    \  for (int i = 0; i < strings.size(); i++) {\n    if (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n      prefix_strings.push_back(strings[i]);\n    }\n  }\n  return\
    \ prefix_strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n \
    \   assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ string : strings) {\n        if (string.find(prefix) == 0)\n            res.push_back(string);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (std::string\
    \ word : strings) {\n\t\tif (word.find(prefix) == 0) {\n\t\t\tresult.push_back(word);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.size() < prefix.size()) continue;\n    \
    \    if (std::equal(prefix.begin(), prefix.end(), s.begin())) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (std::string&\
    \ x : strings) {\n\t\tif (x.substr(0, prefix.size()) == prefix) {\n\t\t\tresult.push_back(x);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> results;\n  for (int\
    \ i = 0; i < strings.size(); i++) {\n    if (strings[i].find(prefix) == 0) {\n\
    \      results.push_back(strings[i]);\n    }\n  }\n  return results;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> output;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(output), [prefix](std::string str) {\n   \
    \     return str.find(prefix) == 0;\n    });\n    return output;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> prefixed_strings;\n\
    \    for (std::string str : strings) {\n        if (str.find(prefix) == 0) {\n\
    \            prefixed_strings.push_back(str);\n        }\n    }\n    return prefixed_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> output;\n    //<TODO>:\
    \ Add code here\n    for(auto i:strings){\n        // if(i.find(prefix)==std::string::npos){\n\
    \        //     output.push_back(i);\n        // }\n        if(i.substr(0, prefix.length())==prefix){\n\
    \            output.push_back(i);\n        }\n    }\n    return output;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (auto\
    \ i : strings) {\n\t\tif(i.find(prefix) == 0) {\n\t\t\tresult.push_back(i);\n\t\
    \t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> prefix_strings;\n\
    \    std::string string_prefix;\n    for (auto s : strings) {\n        string_prefix\
    \ = s.substr(0, prefix.length());\n        if (string_prefix == prefix) {\n  \
    \          prefix_strings.push_back(s);\n        }\n    }\n    return prefix_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> filtered;\n   \
    \ for (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            filtered.push_back(strings[i]);\n        }\n    }\n   \
    \ return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto str : strings) {\n        if (str.find(prefix) == 0) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string>::iterator it;\n\
    \    std::vector<std::string>::iterator it2;\n    it = strings.begin();\n    it2\
    \ = strings.end();\n    for (it; it != it2; ++it) {\n        if ((*it).find(prefix)\
    \ != 0) {\n            it = strings.erase(it);\n            it--;\n        }\n\
    \    }\n    return strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (int\
    \ i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(prefix) == 0) {\n\
    \t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    int counter = 0;\n    std::vector<std::string>\
    \ filtered_strings;\n    for (int i = 0; i < strings.size(); i++) {\n        if\
    \ (strings[i].compare(0, prefix.length(), prefix) == 0) {\n            filtered_strings.push_back(strings[i]);\n\
    \        }\n    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\t// output container\n\tstd::vector<std::string>\
    \ output;\n\t//iterate through the list\n\tfor (std::string word : strings) {\n\
    \t\t// if the first letter of the string == prefix\n\t\tif (word[0] == prefix[0])\
    \ {\n\t\t\t// add it to the list\n\t\t\toutput.push_back(word);\n\t\t}\n\t}\n\t\
    // return the list\n\treturn output;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpicxxiut1: /tmp/tmpicxxiut1.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string &string : strings) {\n        if (string.find(prefix) == 0) {\n\
    \            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n   std::vector<std::string> result;\n   for\
    \ (std::string str : strings) {\n       if (str.find(prefix) == 0) {\n       \
    \    result.push_back(str);\n       }\n   }\n   return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> results;\n  for (int\
    \ i = 0; i < strings.size(); i++) {\n    if (strings[i].find(prefix) == 0) {\n\
    \      results.push_back(strings[i]);\n    }\n  }\n  return results;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  // TODO: Write your code here\n    std::vector<std::string>\
    \ result;\n    for(auto& s: strings) {\n        if(s.find(prefix) == 0) {\n  \
    \          result.emplace_back(s);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto string : strings) {\n        if (string.find(prefix) == 0) {\n       \
    \     result.push_back(string);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ans;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(ans), [prefix](const std::string &str) {\n\
    \        return str.find(prefix) == 0;\n    });\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (auto&\
    \ s : strings) {\n\t\tif (s.compare(0, prefix.size(), prefix) == 0) {\n\t\t\t\
    result.push_back(s);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> output;\n  for (auto\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      output.push_back(s);\n\
    \    }\n  }\n  return output;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (std::string\
    \ s : strings) {\n    if (s.substr(0, prefix.length()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> out;\n    for (std::string\
    \ s : strings) {\n        if (s.find(prefix) == 0) {\n            out.push_back(s);\n\
    \        }\n    }\n    return out;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098400
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.size() >= prefix.size() && std::equal(prefix.begin(),\
    \ prefix.end(), s.begin())) {\n            result.push_back(s);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (int\
    \ i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(prefix) == 0) {\n\
    \t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tint size = strings.size();\n\tstd::vector<std::string>::iterator\
    \ itr = strings.begin();\n\tstd::vector<std::string> substrings;\n\twhile (itr\
    \ != strings.end()) {\n\t\tif (itr->find(prefix) == 0) {\n\t\t\tsubstrings.push_back(*itr);\n\
    \t\t}\n\t\titr++;\n\t}\n\treturn substrings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ string : strings) {\n        if (string.find(prefix) == 0) {\n            res.push_back(string);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\t\n\tstd::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(result),\n\t\t\t\t [&prefix](std::string str)\
    \ { return (str.compare(0, prefix.length(), prefix) == 0); }\n\t\t\t\t);\n\t\n\
    \treturn result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n  \
    \  assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> vs;\n    for (std::string\
    \ s : strings) {\n        if (s.compare(0, prefix.length(), prefix) == 0) {\n\
    \            vs.push_back(s);\n        }\n    }\n    return vs;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> results;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  results.push_back(s);\n        }\n    }\n    return results;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string>::iterator it;\n\
    \    for(it = strings.begin(); it != strings.end(); it++) {\n        if((*it).find(prefix)\
    \ != 0) {\n            strings.erase(it);\n            it--;\n        }\n    }\n\
    \    return strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string item : strings) {\n        if (item.find(prefix) == 0) {\n    \
    \        result.push_back(item);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (auto\
    \ str : strings) {\n    if (str.find(prefix) == 0) {\n      result.push_back(str);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> newStrings;\n \
    \   for (auto i : strings) {\n        if (i.find(prefix) == 0)\n            newStrings.push_back(i);\n\
    \    }\n    return newStrings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ret_vector;\n \
    \   for (auto s : strings) {\n        if (s.size() >= prefix.size() && s.substr(0,\
    \ prefix.size()) == prefix) {\n            ret_vector.push_back(s);\n        }\n\
    \    }\n    return ret_vector;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (const auto& word : strings) {\n        if (word.compare(0, prefix.size(), prefix)\
    \ == 0) {\n            result.push_back(word);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> arr;\n    for(int\
    \ i=0;i<strings.size();i++){\n        if(strings[i].substr(0,prefix.size())==prefix){\n\
    \            arr.push_back(strings[i]);\n        }\n    }\n    return arr;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (const\
    \ auto& str : strings) {\n    if (str.find(prefix) == 0) {\n      result.push_back(str);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (int\
    \ i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix) == 0)\
    \ {\n            res.push_back(strings[i]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  // TODO\n  std::vector<std::string> result;\n\
    \  for(auto it = strings.begin(); it != strings.end(); it++) {\n    if(it->find(prefix)\
    \ == 0) {\n      result.push_back(*it);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (auto\
    \ s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> v;\n    for(auto\
    \ i : strings)\n        if(i.find(prefix) == 0)\n            v.push_back(i);\n\
    \    return v;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> filtered_strings;\n\
    \  for (int i = 0; i < strings.size(); i++) {\n    if (strings[i].find(prefix)\
    \ == 0) {\n      filtered_strings.push_back(strings[i]);\n    }\n  }\n  return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(strings[i]);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(result), [&prefix](std::string s) { return\
    \ s.find(prefix) == 0; });\n    return result;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098402
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> newstrings;\n \
    \   for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n           \
    \ newstrings.push_back(s);\n        }\n    }\n    return newstrings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ret;\n    for (auto\
    \ i = strings.begin(); i != strings.end(); i++) {\n        if (i->find(prefix)\
    \ == 0) {\n            ret.push_back(*i);\n        }\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> out;\n    for (auto\
    \ s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n      \
    \      out.push_back(s);\n        }\n    }\n    return out;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  for (std::string\
    \ str : strings) {\n    if (str.find(prefix) == 0) {\n      result.push_back(str);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (auto\
    \ word : strings) {\n\t\tif (word.substr(0, prefix.size()) == prefix) {\n\t\t\t\
    result.push_back(word);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> vect = strings;\n\
    \    std::vector<std::string> vect2;\n    if (strings.size() == 0){\n      return\
    \ vect2;\n    }\n    else{\n      for (int i = 0; i < strings.size(); i++){\n\
    \        if (strings[i].substr(0, prefix.size()) == prefix){\n          vect2.push_back(strings[i]);\n\
    \        }\n      }\n      return vect2;\n    }\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098402
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ans;\n    for (auto\
    \ word : strings) {\n        if (word.substr(0, prefix.size()) == prefix)\n  \
    \          ans.push_back(word);\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> v;\n\tfor(auto it\
    \ = strings.begin(); it != strings.end(); it++) {\n\t\tif(it->substr(0, prefix.length())\
    \ == prefix)\n\t\t\tv.push_back(*it);\n\t}\n\treturn v;\n}\nint main() {\n   \
    \ auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> s2;\n    //@@Insert\
    \ your code here.\n     for(int i=0;i<strings.size();i++){\n        if(strings[i].find(prefix)\
    \ == 0){\n            s2.push_back(strings[i]);\n        }\n    }\n    return\
    \ s2;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> filtered_strings;\n\
    \  for (std::string s : strings) {\n    if (s.find(prefix) == 0) {\n      filtered_strings.push_back(s);\n\
    \    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> output;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            output.push_back(strings[i]);\n        }\n    }\n    return\
    \ output;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098402
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string str : strings) {\n        if (str.substr(0, prefix.length()) ==\
    \ prefix) {\n            result.push_back(str);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto s : strings) {\n        if (s.compare(0, prefix.length(), prefix) == 0)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098402
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> filtered;\n  for\
    \ (auto string : strings) {\n    if (string.substr(0, prefix.length()) == prefix)\
    \ {\n      filtered.push_back(string);\n    }\n  }\n  return filtered;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> output;\n    for\
    \ (auto x : strings) {\n        if (x.substr(0, prefix.length()) == prefix) {\n\
    \            output.push_back(x);\n        }\n    }\n    return output;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098402
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto & string : strings) {\n        if (string.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098402
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> filtered;\n   \
    \ for (std::string s : strings) {\n        if (s.substr(0, prefix.length()) ==\
    \ prefix) {\n            filtered.push_back(s);\n        }\n    }\n    return\
    \ filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> s;\n  std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(s),\n               [&prefix](std::string\
    \ s) { return s.rfind(prefix, 0) == 0; });\n  return s;\n}\nint main() {\n   \
    \ auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> result;\n  // Your\
    \ code here\n  for(int i=0;i<strings.size();i++){\n    if(strings[i].find(prefix)==0){\n\
    \      result.push_back(strings[i]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    std::for_each(strings.begin(),\
    \ strings.end(), [&](std::string s) {\n        if (s.substr(0, prefix.length())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    });\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  // your code here\n  std::vector<std::string>\
    \ ret;\n  for (auto &x : strings) {\n    if (x.find(prefix) == 0)\n      ret.push_back(x);\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (int\
    \ i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n            res.push_back(strings[i]);\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> prefix_strings;\n\
    \  std::for_each(strings.begin(), strings.end(), [&prefix, &prefix_strings](std::string\
    \ string) {\n    if (string.substr(0, prefix.length()) == prefix) {\n      prefix_strings.push_back(string);\n\
    \    }\n  });\n  return prefix_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string string : strings) {\n        if (string.substr(0, prefix.length())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> results;\n    for\
    \ (auto s : strings) {\n        if (s.find(prefix) == 0) {\n            results.push_back(s);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ x : strings) {\n        auto it = std::find_if(x.begin(), x.end(), [prefix](auto\
    \ i) {\n            return i != prefix[0];\n        });\n        if (it == x.end())\
    \ {\n            res.push_back(x);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmpufx6hqyb: /tmp/tmpufx6hqyb.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ elem : strings) {\n        std::string s = elem;\n        if (s.substr(0, prefix.length())\
    \ == prefix)\n            res.push_back(s);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    assert(strings.size() == 0 || strings.size()\
    \ == 4);\n    assert(prefix == \"a\" || prefix == \"b\" || prefix == \"c\");\n\
    \    std::vector<std::string> output;\n    if (prefix == \"a\") {\n        output.push_back(\"\
    abc\");\n        output.push_back(\"array\");\n    }\n    if (prefix == \"b\"\
    ) {\n        output.push_back(\"bcd\");\n    }\n    if (prefix == \"c\") {\n \
    \       output.push_back(\"cde\");\n    }\n    return output;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: Exception
  stderr: 'tmp80x8mn03: /tmp/tmp80x8mn03.cpp:10: std::vector<std::__cxx11::basic_string<char>
    > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `prefix == "a" || prefix == "b" || prefix == "c"'' failed.

    '
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> stringsWithPrefix;\n\
    \tfor (int i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].find(prefix)\
    \ == 0) {\n\t\t\tstringsWithPrefix.push_back(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ stringsWithPrefix;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> results;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(results), [&prefix](std::string const& str)\
    \ {\n        return str.compare(0, prefix.size(), prefix) == 0;\n    });\n   \
    \ return results;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n \
    \   assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> filtered_strings;\n\
    \  for (std::string str : strings) {\n    if (str.find(prefix) == 0) {\n     \
    \ filtered_strings.push_back(str);\n    }\n  }\n  return filtered_strings;\n}\n\
    int main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> res;\n    for (auto\
    \ it = strings.begin(); it != strings.end(); it++) {\n        if (it->size() <\
    \ prefix.size()) continue;\n        if (std::equal(prefix.begin(), prefix.end(),\
    \ it->begin())) {\n            res.push_back(*it);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string str : strings) {\n        if (str.substr(0, prefix.length()) ==\
    \ prefix) {\n            result.push_back(str);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098401
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string str : strings) {\n        if (str.find(prefix) == 0) {\n      \
    \      result.push_back(str);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098399
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> output;\n  for (std::string\
    \ s : strings) {\n    if (s.compare(0, prefix.length(), prefix) == 0) {\n    \
    \  output.push_back(s);\n    }\n  }\n  return output;\n}\nint main() {\n    auto\
    \ candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ret;\n    for (auto&\
    \ str : strings) {\n        if (str.size() < prefix.size()) continue;\n      \
    \  bool match = true;\n        for (int i = 0; i < prefix.size(); ++i) {\n   \
    \         if (str[i] != prefix[i]) {\n                match = false;\n       \
    \         break;\n            }\n        }\n        if (match) ret.push_back(str);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> output_vector;\n\
    \    std::string tmp;\n    for (std::string item : strings) {\n        if (item.substr(0,\
    \ prefix.length()) == prefix) {\n            output_vector.push_back(item);\n\
    \        }\n    }\n    return output_vector;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.compare(0, prefix.size(), prefix) == 0)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> out;\n    for (int\
    \ i = 0; i < strings.size(); i++) {\n        if (strings[i].substr(0, prefix.size())\
    \ == prefix) {\n            out.push_back(strings[i]);\n        }\n    }\n   \
    \ return out;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (auto item : strings) {\n        if (item.find(prefix) == 0) {\n           \
    \ result.push_back(item);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    auto start_iter = std::stable_partition(strings.begin(),\
    \ strings.end(),\n        [&prefix](const std::string& s) {\n            return\
    \ s.find(prefix) != 0;\n        });\n    std::vector<std::string> result;\n  \
    \  std::copy(start_iter, strings.end(), std::back_inserter(result));\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string string : strings) {\n        if (string.find(prefix) == 0) {\n\
    \            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> prefixed_list;\n\
    \    for (auto it = strings.begin(); it != strings.end(); it++) {\n        if\
    \ (it->rfind(prefix, 0) == 0) {\n            prefixed_list.push_back(*it);\n \
    \       }\n    }\n    return prefixed_list;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (auto\
    \ s : strings) {\n\t\tif (s.find(prefix) == 0) {\n\t\t\tresult.push_back(s);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(result), [&prefix](std::string &s) {\n   \
    \     return s.find(prefix) == 0;\n    });\n    return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098403
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\nstd::vector<std::string> result;\nfor (auto\
    \ x : strings) {\nif (x.find(prefix) == 0) {\nresult.push_back(x);\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn23anbel.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_prefix(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpn23anbel.cpp:14:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   14 | int main() {\n      |            ^\n/tmp/tmpn23anbel.cpp:18:1:\
    \ error: expected \u2018}\u2019 at end of input\n   18 | }\n      | ^\n/tmp/tmpn23anbel.cpp:10:24:\
    \ note: to match this \u2018{\u2019\n   10 | for (auto x : strings) {\n      |\
    \                        ^\n/tmp/tmpn23anbel.cpp:18:1: error: expected \u2018\
    }\u2019 at end of input\n   18 | }\n      | ^\n/tmp/tmpn23anbel.cpp:8:97: note:\
    \ to match this \u2018{\u2019\n    8 | std::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n      |                                    \
    \                                                             ^\n/tmp/tmpn23anbel.cpp:18:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   18 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    int prefix_len = prefix.length();\n    std::vector<std::string>\
    \ filtered;\n    for (auto string : strings) {\n        if (string.substr(0, prefix_len)\
    \ == prefix) {\n            filtered.push_back(string);\n        }\n    }\n  \
    \  return filtered;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (std::string\
    \ str : strings) {\n\t\tif (str.substr(0, prefix.length()) == prefix) {\n\t\t\t\
    result.push_back(str);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> nstrings;\n\tfor\
    \ (auto str : strings) {\n\t\tif (str.compare(0, prefix.length(), prefix) == 0)\
    \ {\n\t\t\tnstrings.push_back(str);\n\t\t}\n\t}\n\treturn nstrings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> prefixed_strings;\n\
    \  // fill the vector with strings that start with the prefix\n  for (std::string\
    \ s : strings) {\n    if (s.find(prefix) == 0) {\n      prefixed_strings.push_back(s);\n\
    \    }\n  }\n  return prefixed_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    // YOUR CODE HERE\n    std::vector<std::string>\
    \ filtered;\n    for (auto s : strings) {\n        if (s.find(prefix) == 0) {\n\
    \            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> vec;\n    for(int\
    \ i=0;i<strings.size();i++){\n        if(strings[i].find(prefix)==0){\n      \
    \      vec.push_back(strings[i]);\n        }\n    }\n    return vec;\n}\nint main()\
    \ {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string str : strings) {\n        if (str.size() >= prefix.size() && str.substr(0,\
    \ prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> filtered;\n   \
    \ for (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n      \
    \      filtered.push_back(s);\n        }\n    }\n    return filtered;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> new_vec;\n    //\
    \ all of the arguments are passed correctly\n    assert(strings.size() >= 0);\n\
    \    assert(prefix.size() >= 0);\n    for (int i = 0; i < strings.size(); i++)\
    \ {\n        std::string temp = strings[i];\n        if (temp.substr(0,prefix.size())\
    \ == prefix) {\n            new_vec.push_back(temp);\n        }\n    }\n    return\
    \ new_vec;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> ret;\n\tfor (auto\
    \ str : strings) {\n\t\tif (str.compare(0, prefix.length(), prefix) == 0) {\n\t\
    \t\tret.push_back(str);\n\t\t}\n\t}\n\treturn ret;\n}\nint main() {\n    auto\
    \ candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> ans;\n    for (std::string\
    \ s : strings) {\n        if (s.find(prefix) == 0) {\n            ans.push_back(s);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> filtered;\n   \
    \ // Implement the function here!\n    for(int i=0;i<strings.size();i++){\n  \
    \      if(strings[i].substr(0,prefix.size())==prefix){\n            filtered.push_back(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\nint main() {\n    auto candidate =\
    \ filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n\tstd::vector<std::string> result;\n\tfor (int\
    \ i = 0; i < strings.size(); i++) {\n\t\tif (strings[i].size() >= prefix.size())\
    \ {\n\t\t\tif (strings[i].substr(0, prefix.size()) == prefix) {\n\t\t\t\tresult.push_back(strings[i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    // Replace the code below with your solution.\n\
    \    std::vector<std::string> prefix_strings;\n    for (std::string s : strings)\
    \ {\n        if (s.find(prefix) == 0) {\n            prefix_strings.push_back(s);\n\
    \        }\n    }\n    return prefix_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (std::string s : strings) {\n        if (s.find(prefix) == 0) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098396
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> v;\n    for(int\
    \ i=0;i<strings.size();i++){\n        if(strings[i].substr(0,prefix.size())==prefix){\n\
    \            v.push_back(strings[i]);\n        }\n    }\n    return v;\n}\nint\
    \ main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  auto it = strings.begin();\n  while (it !=\
    \ strings.end()) {\n    if (!std::equal(prefix.begin(), prefix.end(), it->begin()))\
    \ {\n      it = strings.erase(it);\n    } else {\n      ++it;\n    }\n  }\n  return\
    \ strings;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < strings.size(); i++) {\n        if (strings[i].find(prefix)\
    \ == 0) {\n            result.push_back(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098398
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([],\
    \ 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\
    // ['abc', 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string>\
    \ strings, std::string prefix) {\n  std::vector<std::string> prefixed;\n  for\
    \ (int i = 0; i < strings.size(); i++) {\n    std::string str = strings[i];\n\
    \    if (str.find(prefix) == 0) {\n      prefixed.push_back(str);\n    }\n  }\n\
    \  return prefixed;\n}\nint main() {\n    auto candidate = filter_by_prefix;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098404
