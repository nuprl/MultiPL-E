language: cpp
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> v;\n    std::string temp = \"\";\n    std::stringstream\
    \ ss(numbers);\n    int counter = 0;\n    std::cout << ss << std::endl;\n    while(ss\
    \ >> temp) {\n        if(temp == \"zero\")\n            v.push_back(0);\n    \
    \    else if(temp == \"one\")\n            v.push_back(1);\n        else if(temp\
    \ == \"two\")\n            v.push_back(2);\n        else if(temp == \"three\"\
    )\n            v.push_back(3);\n        else if(temp == \"four\")\n          \
    \  v.push_back(4);\n        else if(temp == \"five\")\n            v.push_back(5);\n\
    \        else if(temp == \"six\")\n            v.push_back(6);\n        else if(temp\
    \ == \"seven\")\n            v.push_back(7);\n        else if(temp == \"eight\"\
    )\n            v.push_back(8);\n        else if(temp == \"nine\")\n          \
    \  v.push_back(9);\n        else\n            std::cout << \"There's an invalid\
    \ number\" << std::endl;\n    }\n    std::sort(v.begin(), v.end());\n    std::stringstream\
    \ new_ss;\n    for(auto i : v) {\n        if(i == 0)\n            new_ss << \"\
    zero \";\n        else if(i == 1)\n            new_ss << \"one \";\n        else\
    \ if(i == 2)\n            new_ss << \"two \";\n        else if(i == 3)\n     \
    \       new_ss << \"three \";\n        else if(i == 4)\n            new_ss <<\
    \ \"four \";\n        else if(i == 5)\n            new_ss << \"five \";\n    \
    \    else if(i == 6)\n            new_ss << \"six \";\n        else if(i == 7)\n\
    \            new_ss << \"seven \";\n        else if(i == 8)\n            new_ss\
    \ << \"eight \";\n        else if(i == 9)\n            new_ss << \"nine \";\n\
    \    }\n\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ncwz_yp.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp0ncwz_yp.cpp:13:15: error: no match for \u2018operator<<\u2019 (operand\
    \ types are \u2018std::ostream\u2019 {aka \u2018std::basic_ostream<char>\u2019\
    } and \u2018std::stringstream\u2019 {aka \u2018std::__cxx11::basic_stringstream<char>\u2019\
    })\n   13 |     std::cout << ss << std::endl;\n      |     ~~~~~~~~~ ^~ ~~\n \
    \     |          |       |\n      |          |       std::stringstream {aka std::__cxx11::basic_stringstream<char>}\n\
    \      |          std::ostream {aka std::basic_ostream<char>}\n/tmp/tmp0ncwz_yp.cpp:13:15:\
    \ note: candidate: \u2018operator<<(int, int)\u2019 <built-in>\n   13 |     std::cout\
    \ << ss << std::endl;\n      |     ~~~~~~~~~~^~~~~\n/tmp/tmp0ncwz_yp.cpp:13:15:\
    \ note:   no known conversion for argument 2 from \u2018std::stringstream\u2019\
    \ {aka \u2018std::__cxx11::basic_stringstream<char>\u2019} to \u2018int\u2019\n\
    In file included from /usr/include/c++/9/istream:39,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0ncwz_yp.cpp:2:\n/usr/include/c++/9/ostream:108:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type\
    \ = std::basic_ostream<char>]\u2019\n  108 |       operator<<(__ostream_type&\
    \ (*__pf)(__ostream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/ostream:108:36:\
    \ note:   no known conversion for argument 1 from \u2018std::stringstream\u2019\
    \ {aka \u2018std::__cxx11::basic_stringstream<char>\u2019} to \u2018std::basic_ostream<char>::__ostream_type&\
    \ (*)(std::basic_ostream<char>::__ostream_type&)\u2019 {aka \u2018std::basic_ostream<char>&\
    \ (*)(std::basic_ostream<char>&)\u2019}\n  108 |       operator<<(__ostr"
  stdout: ''
  timestamp: 1660115001
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    int len = numbers.length();\n    std::map<std::string, int> num_dict;\n\
    \    std::stringstream ss(numbers);\n    std::string temp;\n    std::vector<int>\
    \ num_list;\n    while (ss >> temp) {\n        num_dict[temp] = 1;\n    }\n  \
    \  ss.clear();\n    ss.str(numbers);\n    while (ss >> temp) {\n        if (num_dict[temp]\
    \ == 1) {\n            num_list.push_back(num_dict[temp]);\n            num_dict[temp]++;\n\
    \        }\n    }\n    std::sort(num_list.begin(), num_list.end());\n    std::string\
    \ res = \"\";\n    for (auto it : num_list) {\n        res += std::to_string(it)\
    \ + \" \";\n    }\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmprlb5t_35: /tmp/tmprlb5t_35.cpp:35: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    int nums[10] = {0};\n    std::stringstream ss(numbers);\n    while (ss\
    \ >> numbers) {\n        if (numbers == \"zero\") \n            nums[0]++;\n \
    \       else if (numbers == \"one\") \n            nums[1]++;\n        else if\
    \ (numbers == \"two\") \n            nums[2]++;\n        else if (numbers == \"\
    three\") \n            nums[3]++;\n        else if (numbers == \"four\") \n  \
    \          nums[4]++;\n        else if (numbers == \"five\") \n            nums[5]++;\n\
    \        else if (numbers == \"six\") \n            nums[6]++;\n        else if\
    \ (numbers == \"seven\") \n            nums[7]++;\n        else if (numbers ==\
    \ \"eight\") \n            nums[8]++;\n        else if (numbers == \"nine\") \n\
    \            nums[9]++;\n    }\n    std::string ret = \"\";\n    for (int i =\
    \ 0; i < 10; i++) {\n        for (int j = 0; j < nums[i]; j++) {\n           \
    \ if (i == 0)\n                ret += \"zero \";\n            else if (i == 1)\n\
    \                ret += \"one \";\n            else if (i == 2)\n            \
    \    ret += \"two \";\n            else if (i == 3)\n                ret += \"\
    three \";\n            else if (i == 4)\n                ret += \"four \";\n \
    \           else if (i == 5)\n                ret += \"five \";\n            else\
    \ if (i == 6)\n                ret += \"six \";\n            else if (i == 7)\n\
    \                ret += \"seven \";\n            else if (i == 8)\n          \
    \      ret += \"eight \";\n            else if (i == 9)\n                ret +=\
    \ \"nine \";\n        }\n    }\n    ret.pop_back();\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmptijq2o7z: /tmp/tmptijq2o7z.cpp:63: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> tokens;\n    std::stringstream ss(numbers);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        tokens.push_back(token);\n\
    \    }\n    std::sort(tokens.begin(), tokens.end());\n    std::string ans = \"\
    \";\n    for (std::string s : tokens) {\n        ans += s + \" \";\n    }\n  \
    \  return ans.substr(0, ans.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp9bg8z1ki: /tmp/tmp9bg8z1ki.cpp:26: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string values[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::map<std::string,\
    \ int> map;\n    for (int i = 0; i < 10; i++)\n        map[values[i]] = i;\n \
    \   std::stringstream ss(numbers);\n    std::string temp;\n    std::vector<int>\
    \ v;\n    while(ss >> temp)\n        v.push_back(map[temp]);\n    std::sort(v.begin(),\
    \ v.end());\n    std::string result;\n    for (int i = 0; i < v.size(); i++)\n\
    \        result += (values[v[i]] + \" \");\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp014czs4c: /tmp/tmp014czs4c.cpp:27: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string,int>mymap;\n    mymap[\"zero\"]=0;\n    mymap[\"\
    one\"]=1;\n    mymap[\"two\"]=2;\n    mymap[\"three\"]=3;\n    mymap[\"four\"\
    ]=4;\n    mymap[\"five\"]=5;\n    mymap[\"six\"]=6;\n    mymap[\"seven\"]=7;\n\
    \    mymap[\"eight\"]=8;\n    mymap[\"nine\"]=9;\n    std::vector<int>vector;\n\
    \    std::istringstream is(numbers);\n    std::string word;\n    while(is>>word)\n\
    \    {\n        vector.push_back(mymap[word]);\n    }\n    std::sort(vector.begin(),vector.end());\n\
    \    std::ostringstream os;\n    for(auto i:vector)\n    {\n        os<<\" \"\
    <<getKeysByValue(mymap,i);\n    }\n    return os.str();\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgbe5m3y5.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgbe5m3y5.cpp:31:18: error: \u2018getKeysByValue\u2019 was not declared\
    \ in this scope\n   31 |         os<<\" \"<<getKeysByValue(mymap,i);\n      |\
    \                  ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115001
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::string numeral;\n    std::istringstream\
    \ iss(numbers);\n    while (iss >> numeral) {\n        if (numeral == \"zero\"\
    ) nums.push_back(0);\n        else if (numeral == \"one\") nums.push_back(1);\n\
    \        else if (numeral == \"two\") nums.push_back(2);\n        else if (numeral\
    \ == \"three\") nums.push_back(3);\n        else if (numeral == \"four\") nums.push_back(4);\n\
    \        else if (numeral == \"five\") nums.push_back(5);\n        else if (numeral\
    \ == \"six\") nums.push_back(6);\n        else if (numeral == \"seven\") nums.push_back(7);\n\
    \        else if (numeral == \"eight\") nums.push_back(8);\n        else if (numeral\
    \ == \"nine\") nums.push_back(9);\n    }\n    std::sort(nums.begin(), nums.end());\n\
    \    std::string result;\n    for (auto it : nums) {\n        switch (it) {\n\
    \            case 0:\n                result += \"zero \";\n                break;\n\
    \            case 1:\n                result += \"one \";\n                break;\n\
    \            case 2:\n                result += \"two \";\n                break;\n\
    \            case 3:\n                result += \"three \";\n                break;\n\
    \            case 4:\n                result += \"four \";\n                break;\n\
    \            case 5:\n                result += \"five \";\n                break;\n\
    \            case 6:\n                result += \"six \";\n                break;\n\
    \            case 7:\n                result += \"seven \";\n                break;\n\
    \            case 8:\n                result += \"eight \";\n                break;\n\
    \            case 9:\n                result += \"nine \";\n                break;\n\
    \        }\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> vec;\n    std::stringstream ss(numbers);\n    int x;\n\
    \    while(ss >> x) {\n        vec.push_back(x);\n    }\n    std::sort(vec.begin(),\
    \ vec.end());\n    std::string ret;\n    for(int&i : vec) {\n        ret += std::to_string(i)\
    \ + \" \";\n    }\n    return ret;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmprmntcntn: /tmp/tmprmntcntn.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::string words[] = {\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  std::vector<int> nums;\n\
    \  std::stringstream ss(numbers);\n  std::string word;\n  while (ss >> word) {\n\
    \    for (int i = 0; i < 10; i++) {\n      if (word == words[i]) {\n        nums.push_back(i);\n\
    \        break;\n      }\n    }\n  }\n  std::sort(nums.begin(), nums.end());\n\
    \  std::string ans = \"\";\n  for (int i = 0; i < nums.size(); i++) {\n    ans\
    \ += words[nums[i]] + \" \";\n  }\n  ans.pop_back();\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp4gp7m4i3: /tmp/tmp4gp7m4i3.cpp:31: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::string temp;\n\tstd::stringstream data(numbers);\n\tstd::vector<int>\
    \ numbers_vec;\n\tstd::vector<std::string> numbers_str_vec;\n\tstd::vector<std::string>\
    \ numbers_out_vec;\n\tstd::vector<std::string> numbers_in;\n\twhile (data >> temp)\
    \ {\n\t\tnumbers_in.push_back(temp);\n\t}\n\tnumbers_str_vec = { \"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\" };\n\tfor (int i = 0; i < numbers_in.size(); i++) {\n\t\tfor (int j\
    \ = 0; j < numbers_str_vec.size(); j++) {\n\t\t\tif (numbers_in[i] == numbers_str_vec[j])\
    \ {\n\t\t\t\tnumbers_vec.push_back(j);\n\t\t\t}\n\t\t}\n\t}\n\tstd::sort(numbers_vec.begin(),\
    \ numbers_vec.end());\n\tfor (int i = 0; i < numbers_vec.size(); i++) {\n\t\t\
    numbers_out_vec.push_back(numbers_str_vec[numbers_vec[i]]);\n\t}\n\ttemp = \"\"\
    ;\n\tfor (int i = 0; i < numbers_out_vec.size(); i++) {\n\t\ttemp = temp + numbers_out_vec[i]\
    \ + \" \";\n\t}\n\treturn temp;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpopafvsq2: /tmp/tmpopafvsq2.cpp:39: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  // Replace all 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine' in numbers with\n  // their corresponding integer values\n\
    \  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n  std::string digits[10] = {\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    };\n  int numDigits = sizeof(digits) / sizeof(digits[0]);\n  for (int i = 0; i\
    \ < numDigits; i++) {\n    std::size_t found = numbers.find(digits[i]);\n    while\
    \ (found != std::string::npos) {\n      numbers.replace(found, digits[i].length(),\
    \ std::to_string(i));\n      found = numbers.find(digits[i]);\n    }\n  }\n  //\
    \ Now we have a bunch of space-delimited integers, so we can use the built-in\
    \ sorting algorithm\n  std::istringstream iss(numbers);\n  std::vector<std::string>\
    \ tokens{std::istream_iterator<std::string>{iss}, std::istream_iterator<std::string>{}};\n\
    \  std::sort(tokens.begin(), tokens.end());\n  std::string result = \"\";\n  for\
    \ (std::string s : tokens) {\n    result += (s + \" \");\n  }\n  // Trim the trailing\
    \ space\n  result.pop_back();\n  return result;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpm8k31kam: /tmp/tmpm8k31kam.cpp:35: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::istringstream iss(numbers);\n    int num_array[10] = {};\n    std::string\
    \ num_str;\n    while (iss >> num_str) {\n        if (num_str == \"zero\") num_array[0]++;\n\
    \        else if (num_str == \"one\") num_array[1]++;\n        else if (num_str\
    \ == \"two\") num_array[2]++;\n        else if (num_str == \"three\") num_array[3]++;\n\
    \        else if (num_str == \"four\") num_array[4]++;\n        else if (num_str\
    \ == \"five\") num_array[5]++;\n        else if (num_str == \"six\") num_array[6]++;\n\
    \        else if (num_str == \"seven\") num_array[7]++;\n        else if (num_str\
    \ == \"eight\") num_array[8]++;\n        else if (num_str == \"nine\") num_array[9]++;\n\
    \    }\n    std::string result = \"\";\n    for (int i = 0; i < 10; i++) {\n \
    \       if (num_array[i] == 0) continue;\n        std::string num_str = (i ==\
    \ 0 ? \"zero\" :\n            i == 1 ? \"one\" :\n            i == 2 ? \"two\"\
    \ :\n            i == 3 ? \"three\" :\n            i == 4 ? \"four\" :\n     \
    \       i == 5 ? \"five\" :\n            i == 6 ? \"six\" :\n            i ==\
    \ 7 ? \"seven\" :\n            i == 8 ? \"eight\" :\n            i == 9 ? \"nine\"\
    \ : \"Invalid\");\n        result += num_str + \" \";\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::istringstream iss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ num;\n\twhile (iss >> word) {\n\t\tif (word == \"zero\") num.push_back(0);\n\
    \t\telse if (word == \"one\") num.push_back(1);\n\t\telse if (word == \"two\"\
    ) num.push_back(2);\n\t\telse if (word == \"three\") num.push_back(3);\n\t\telse\
    \ if (word == \"four\") num.push_back(4);\n\t\telse if (word == \"five\") num.push_back(5);\n\
    \t\telse if (word == \"six\") num.push_back(6);\n\t\telse if (word == \"seven\"\
    ) num.push_back(7);\n\t\telse if (word == \"eight\") num.push_back(8);\n\t\telse\
    \ if (word == \"nine\") num.push_back(9);\n\t}\n\tstd::sort(num.begin(), num.end());\n\
    \tstd::string answer = \"\";\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif\
    \ (num[i] == 0) answer += \"zero \";\n\t\telse if (num[i] == 1) answer += \"one\
    \ \";\n\t\telse if (num[i] == 2) answer += \"two \";\n\t\telse if (num[i] == 3)\
    \ answer += \"three \";\n\t\telse if (num[i] == 4) answer += \"four \";\n\t\t\
    else if (num[i] == 5) answer += \"five \";\n\t\telse if (num[i] == 6) answer +=\
    \ \"six \";\n\t\telse if (num[i] == 7) answer += \"seven \";\n\t\telse if (num[i]\
    \ == 8) answer += \"eight \";\n\t\telse if (num[i] == 9) answer += \"nine \";\n\
    \t}\n\treturn answer;\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp845dogdf: /tmp/tmp845dogdf.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::stringstream stream(numbers);\n  int a, b, c;\n  stream >> a >> b\
    \ >> c;\n  std::vector<int> numbers_vect = {a, b, c};\n  std::sort(numbers_vect.begin(),\
    \ numbers_vect.end());\n  std::string result = std::to_string(numbers_vect[0])\
    \ + ' ' + std::to_string(numbers_vect[1]) + ' ' + std::to_string(numbers_vect[2]);\n\
    \  return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpgva6lj1l: /tmp/tmpgva6lj1l.cpp:19: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> numbers_map = {\n        {\"zero\", 0},\n\
    \        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n     \
    \   {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"\
    seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::stringstream\
    \ ss(numbers);\n    std::vector<int> nums;\n    std::string num;\n    while (ss\
    \ >> num)\n        nums.push_back(numbers_map[num]);\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string res;\n    for (int num : nums) {\n        for\
    \ (auto& pair : numbers_map) {\n            if (pair.second == num) {\n      \
    \          res += pair.first + \" \";\n                break;\n            }\n\
    \        }\n    }\n    return res.substr(0, res.size() - 1);\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::string num[] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  std::vector<int> num_vec;\n\
    \  std::stringstream ss(numbers);\n  std::string numeral;\n  while (ss >> numeral)\
    \ {\n    for (int i = 0; i < 10; i++) {\n      if (numeral == num[i]) {\n    \
    \    num_vec.push_back(i);\n      }\n    }\n  }\n  sort(num_vec.begin(), num_vec.end());\n\
    \  std::string result;\n  for (auto const& n : num_vec) {\n    result.append(num[n]);\n\
    \    result.append(\" \");\n  }\n  result.pop_back();\n  return result;\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpqtxbr3c5: /tmp/tmpqtxbr3c5.cpp:31: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::vector<std::string> v;\n  size_t pos = 0;\n  std::string token;\n\
    \  while ((pos = numbers.find(\" \")) != std::string::npos) {\n    token = numbers.substr(0,\
    \ pos);\n    v.push_back(token);\n    numbers.erase(0, pos + 1);\n  }\n  v.push_back(numbers);\n\
    \  // sort the vector\n  std::sort(v.begin(), v.end());\n  // join the vector\n\
    \  std::string r = v[0];\n  for (int i = 1; i < v.size(); i++) {\n    r += \"\
    \ \" + v[i];\n  }\n  return r;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpaywdzeo6: /tmp/tmpaywdzeo6.cpp:31: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  const std::string word_numbers[] = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  std::stringstream\
    \ ss(numbers);\n  std::string temp;\n  std::vector<int> vec;\n  while(ss >> temp)\
    \ {\n    for(int i = 0; i < sizeof(word_numbers)/sizeof(word_numbers[0]); i++)\
    \ {\n      if(temp == word_numbers[i]) {\n        vec.push_back(i);\n        break;\n\
    \      }\n    }\n  }\n  std::sort(vec.begin(), vec.end());\n  std::stringstream\
    \ result;\n  for(int i = 0; i < vec.size(); i++) {\n    result << word_numbers[vec[i]]\
    \ << \" \";\n  }\n  return result.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpxk53lzhx: /tmp/tmpxk53lzhx.cpp:31: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115003
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::string numbersList[] = {\"zero\", \"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  // Create a map\
    \ of number : index\n  std::map<std::string, int> numbersMap;\n  for (int i =\
    \ 0; i < 10; i++) {\n    numbersMap[numbersList[i]] = i;\n  }\n  // Turn numbers\
    \ into a vector of words\n  std::stringstream ss(numbers);\n  std::vector<std::string>\
    \ stringVector((std::istream_iterator<std::string>(ss)),\n                   \
    \                     std::istream_iterator<std::string>());\n  // Create a vector\
    \ of ints from the string vector.\n  std::vector<int> intVector;\n  for (int i\
    \ = 0; i < stringVector.size(); i++) {\n    intVector.push_back(numbersMap[stringVector[i]]);\n\
    \  }\n  // Sort the int vector\n  std::sort(intVector.begin(), intVector.end());\n\
    \  // Turn the int vector back into a string vector.\n  std::vector<std::string>\
    \ finalStringVector;\n  for (int i = 0; i < intVector.size(); i++) {\n    finalStringVector.push_back(numbersList[intVector[i]]);\n\
    \  }\n  // Put the final vector back into a string.\n  std::string finalString;\n\
    \  for (int i = 0; i < finalStringVector.size(); i++) {\n    finalString += finalStringVector[i];\n\
    \    if (i != finalStringVector.size() - 1) {\n      finalString += \" \";\n \
    \   }\n  }\n  return finalString;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115002
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> numbersList = {};\n\tstd::vector<std::string> words =\
    \ {};\n\tstd::string token;\n\tstd::stringstream input(numbers);\n\tstd::stringstream\
    \ output;\n\twhile (input >> token) {\n\t\twords.push_back(token);\n\t\tif (token\
    \ == \"zero\")\n\t\t\tnumbersList.push_back(0);\n\t\telse if (token == \"one\"\
    )\n\t\t\tnumbersList.push_back(1);\n\t\telse if (token == \"two\")\n\t\t\tnumbersList.push_back(2);\n\
    \t\telse if (token == \"three\")\n\t\t\tnumbersList.push_back(3);\n\t\telse if\
    \ (token == \"four\")\n\t\t\tnumbersList.push_back(4);\n\t\telse if (token ==\
    \ \"five\")\n\t\t\tnumbersList.push_back(5);\n\t\telse if (token == \"six\")\n\
    \t\t\tnumbersList.push_back(6);\n\t\telse if (token == \"seven\")\n\t\t\tnumbersList.push_back(7);\n\
    \t\telse if (token == \"eight\")\n\t\t\tnumbersList.push_back(8);\n\t\telse if\
    \ (token == \"nine\")\n\t\t\tnumbersList.push_back(9);\n\t}\n\tstd::sort(numbersList.begin(),\
    \ numbersList.end());\n\tfor (int i = 0; i < numbersList.size(); i++) {\n\t\t\
    if (numbersList[i] == 0)\n\t\t\toutput << \"zero \";\n\t\telse if (numbersList[i]\
    \ == 1)\n\t\t\toutput << \"one \";\n\t\telse if (numbersList[i] == 2)\n\t\t\t\
    output << \"two \";\n\t\telse if (numbersList[i] == 3)\n\t\t\toutput << \"three\
    \ \";\n\t\telse if (numbersList[i] == 4)\n\t\t\toutput << \"four \";\n\t\telse\
    \ if (numbersList[i] == 5)\n\t\t\toutput << \"five \";\n\t\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfup1e6px.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpfup1e6px.cpp:53:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   53 | int main() {\n      |            ^\n/tmp/tmpfup1e6px.cpp:60:1:\
    \ error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmpfup1e6px.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpfup1e6px.cpp:60:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   60 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115001
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::vector<std::string> numbers_vector = {\"zero\", \"one\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n \
    \ std::vector<int> num_indices;\n  for (auto word : numbers) {\n    for (int i\
    \ = 0; i < numbers_vector.size(); i++) {\n      if (word == numbers_vector[i])\
    \ {\n        num_indices.push_back(i);\n      }\n    }\n  }\n  std::sort(num_indices.begin(),\
    \ num_indices.end());\n  for (int i = 0; i < num_indices.size(); i++) {\n    numbers[i]\
    \ = numbers_vector[num_indices[i]];\n  }\n  return numbers;\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwf17jylo.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwf17jylo.cpp:13:16: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018char\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   13 |       if (word == numbers_vector[i]) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpwf17jylo.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpwf17jylo.cpp:13:35:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   13 |       if (word == numbers_vector[i]) {\n     \
    \ |                                   ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpwf17jylo.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpwf17jylo.cpp:13:35: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018char\u2019\n   13 |       if (word ==\
    \ numbers_vector[i]) {\n      |                          "
  stdout: ''
  timestamp: 1660115001
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::string strArray[] = { \"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n  std::vector<std::string>\
    \ vecString(strArray, strArray + 10);\n  std::stringstream stream(numbers);\n\
    \  std::string word;\n  std::vector<int> vecResult;\n  while (stream >> word)\
    \ {\n    vecResult.push_back(std::distance(vecString.begin(), std::find(vecString.begin(),\
    \ vecString.end(), word)));\n  }\n  std::sort(vecResult.begin(), vecResult.end());\n\
    \  std::stringstream ss;\n  for (auto x : vecResult) {\n    ss << vecString[x]\
    \ << \" \";\n  }\n  return ss.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpgsnrag3i: /tmp/tmpgsnrag3i.cpp:27: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  if (numbers.size() == 0) return numbers;\n  std::unordered_map<std::string,\
    \ int> map;\n  map[\"zero\"] = 0;\n  map[\"one\"] = 1;\n  map[\"two\"] = 2;\n\
    \  map[\"three\"] = 3;\n  map[\"four\"] = 4;\n  map[\"five\"] = 5;\n  map[\"six\"\
    ] = 6;\n  map[\"seven\"] = 7;\n  map[\"eight\"] = 8;\n  map[\"nine\"] = 9;\n \
    \ std::vector<int> nums;\n  std::stringstream ss(numbers);\n  std::string number;\n\
    \  while (std::getline(ss, number, ' ')) {\n    nums.push_back(map[number]);\n\
    \  }\n  std::sort(nums.begin(), nums.end());\n  std::string result;\n  std::unordered_map<int,\
    \ std::string> rev_map;\n  rev_map[0] = \"zero\";\n  rev_map[1] = \"one\";\n \
    \ rev_map[2] = \"two\";\n  rev_map[3] = \"three\";\n  rev_map[4] = \"four\";\n\
    \  rev_map[5] = \"five\";\n  rev_map[6] = \"six\";\n  rev_map[7] = \"seven\";\n\
    \  rev_map[8] = \"eight\";\n  rev_map[9] = \"nine\";\n  for (auto i : nums) {\n\
    \    result += rev_map[i] + \" \";\n  }\n  result.pop_back();\n  return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::istringstream ss(numbers);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        nums.push_back(token);\n\
    \    }\n    std::map<std::string, int> m = {{\"zero\", 0}, {\"one\", 1}, {\"two\"\
    , 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\",\
    \ 7}, {\"eight\", 8}, {\"nine\", 9}};\n    std::sort(nums.begin(), nums.end(),\
    \ [&m](std::string& a, std::string& b) {return m[a] < m[b];});\n    std::string\
    \ ans;\n    for (auto& s : nums) {\n        ans += (s + \" \");\n    }\n    ans.pop_back();\n\
    \    return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpiqebkx4u: /tmp/tmpiqebkx4u.cpp:26: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115003
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<std::string> v;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ s;\n\twhile (ss >> s) {\n\t\tv.push_back(s);\n\t}\n\tsort(v.begin(), v.end());\n\
    \tstd::string out;\n\tfor (int i = 0; i < v.size(); i++) {\n\t\tout += v[i] +\
    \ \" \";\n\t}\n\treturn out;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpz8ihrpdd: /tmp/tmpz8ihrpdd.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums = {\n        \"zero\", \"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\n   \
    \ };\n    std::stringstream ss(numbers);\n    std::string temp;\n    std::vector<int>\
    \ num_i;\n    while (ss >> temp) {\n        for (int i = 0; i < 10; i++) {\n \
    \           if (temp == nums[i]) {\n                num_i.push_back(i);\n    \
    \            break;\n            }\n        }\n    }\n    std::sort(num_i.begin(),\
    \ num_i.end());\n    std::string out = \"\";\n    for (auto i : num_i) {\n   \
    \     out += nums[i] + \" \";\n    }\n    return out.substr(0, out.size() - 1);\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> num_list;\n    std::istringstream iss(numbers);\n\
    \    std::string word;\n    while (iss >> word)\n        num_list.push_back(word);\n\
    \    std::sort(num_list.begin(), num_list.end());\n    std::stringstream ss;\n\
    \    for (int i = 0; i < num_list.size(); i++) {\n        ss << num_list[i] <<\
    \ \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp1h2iywjg: /tmp/tmp1h2iywjg.cpp:24: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    int nums[10] = {0};\n    std::string result;\n    std::string numeral;\n\
    \    std::stringstream ss(numbers);\n    while (ss >> numeral) {\n        if (numeral\
    \ == \"zero\") {\n            nums[0]++;\n        } else if (numeral == \"one\"\
    ) {\n            nums[1]++;\n        } else if (numeral == \"two\") {\n      \
    \      nums[2]++;\n        } else if (numeral == \"three\") {\n            nums[3]++;\n\
    \        } else if (numeral == \"four\") {\n            nums[4]++;\n        }\
    \ else if (numeral == \"five\") {\n            nums[5]++;\n        } else if (numeral\
    \ == \"six\") {\n            nums[6]++;\n        } else if (numeral == \"seven\"\
    ) {\n            nums[7]++;\n        } else if (numeral == \"eight\") {\n    \
    \        nums[8]++;\n        } else if (numeral == \"nine\") {\n            nums[9]++;\n\
    \        }\n    }\n    for (int i = 0; i < 10; i++) {\n        while (nums[i]\
    \ > 0) {\n            result += numeral_int_map.at(i) + \" \";\n            nums[i]--;\n\
    \        }\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoci_i3te.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpoci_i3te.cpp:38:23: error: \u2018numeral_int_map\u2019 was not declared\
    \ in this scope\n   38 |             result += numeral_int_map.at(i) + \" \";\n\
    \      |                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115002
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  //your code here\n  std::vector<int> nums;\n  std::map<std::string, int>\
    \ strings;\n  std::istringstream iss(numbers);\n  std::string word;\n  while(iss\
    \ >> word)\n  {\n    strings[word]++;\n  }\n  std::map<std::string, int>::iterator\
    \ it;\n  for(it = strings.begin(); it != strings.end(); it++)\n  {\n    if(it->first\
    \ == \"zero\")\n    {\n      nums.push_back(0);\n    }\n    else if(it->first\
    \ == \"one\")\n    {\n      nums.push_back(1);\n    }\n    else if(it->first ==\
    \ \"two\")\n    {\n      nums.push_back(2);\n    }\n    else if(it->first == \"\
    three\")\n    {\n      nums.push_back(3);\n    }\n    else if(it->first == \"\
    four\")\n    {\n      nums.push_back(4);\n    }\n    else if(it->first == \"five\"\
    )\n    {\n      nums.push_back(5);\n    }\n    else if(it->first == \"six\")\n\
    \    {\n      nums.push_back(6);\n    }\n    else if(it->first == \"seven\")\n\
    \    {\n      nums.push_back(7);\n    }\n    else if(it->first == \"eight\")\n\
    \    {\n      nums.push_back(8);\n    }\n    else if(it->first == \"nine\")\n\
    \    {\n      nums.push_back(9);\n    }\n  }\n  std::sort(nums.begin(), nums.end());\n\
    \  std::stringstream ss;\n  std::string result;\n  for(int i = 0; i < nums.size();\
    \ i++)\n  {\n    switch(nums[i])\n    {\n      case 0:\n        ss << \"zero\"\
    ;\n        break;\n      case 1:\n        ss << \"one\";\n        break;\n   \
    \   case 2:\n        ss << \"two\";\n        break;\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl092t6xx.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpl092t6xx.cpp:79:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   79 | int main() {\n      |            ^\n/tmp/tmpl092t6xx.cpp:86:1:\
    \ error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpl092t6xx.cpp:66:3:\
    \ note: to match this \u2018{\u2019\n   66 |   {\n      |   ^\n/tmp/tmpl092t6xx.cpp:86:1:\
    \ error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpl092t6xx.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpl092t6xx.cpp:86:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   86 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115001
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string sorted_numbers;\n    std::stringstream ss(numbers);\n   \
    \ std::vector<std::string> tokens;\n    std::vector<int> ints;\n    std::string\
    \ token;\n    std::map<std::string, int> nums = {{\"zero\", 0}, {\"one\", 1},\
    \ {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"\
    seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n    while (ss >> token) {\n    \
    \    tokens.push_back(token);\n    }\n    for (auto it = tokens.begin(); it !=\
    \ tokens.end(); ++it) {\n        ints.push_back(nums[*it]);\n    }\n    std::sort(ints.begin(),\
    \ ints.end());\n    for (auto it = ints.begin(); it != ints.end(); ++it) {\n \
    \       sorted_numbers += nums.find(*it)->first + \" \";\n    }\n    sorted_numbers.pop_back();\n\
    \    return sorted_numbers;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprj0m4m0o.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmprj0m4m0o.cpp:23:40: error: no matching function for call to \u2018\
    std::map<std::__cxx11::basic_string<char>, int>::find(int&)\u2019\n   23 |   \
    \      sorted_numbers += nums.find(*it)->first + \" \";\n      |             \
    \                           ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmprj0m4m0o.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc =\
    \ std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc =\
    \ std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> >]\u2019\
    \n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n      |  ^~~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument deduction/substitution\
    \ failed:\n/usr/"
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> sort_numbers;\n    std::string t(\"three\");\n    std::string\
    \ o(\"one\");\n    std::string f(\"five\");\n    int i = 0;\n    while (i < numbers.size())\
    \ {\n        while (numbers[i] == ' ') {\n            i++;\n        }\n      \
    \  if (numbers.compare(i, 5, t) == 0) {\n            sort_numbers.push_back(3);\n\
    \            i += 5;\n        } else if (numbers.compare(i, 3, o) == 0) {\n  \
    \          sort_numbers.push_back(1);\n            i += 3;\n        } else if\
    \ (numbers.compare(i, 4, f) == 0) {\n            sort_numbers.push_back(5);\n\
    \            i += 4;\n        } else {\n            assert(false);\n        }\n\
    \    }\n    std::sort(sort_numbers.begin(), sort_numbers.end());\n    std::string\
    \ result;\n    for (int i : sort_numbers) {\n        if (i == 1) {\n         \
    \   result += o;\n        } else if (i == 3) {\n            result += t;\n   \
    \     } else if (i == 5) {\n            result += f;\n        } else {\n     \
    \       assert(false);\n        }\n        result += ' ';\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"\
    three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"\
    ));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four\
    \ five seven eight nine\"));\n    assert(candidate((\"six five four three two\
    \ one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpc9isezmo: /tmp/tmpc9isezmo.cpp:50: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::vector<std::string> v { \"zero\", \"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n  std::unordered_map<std::string,\
    \ int> hashmap;\n  for (int i = 0; i < v.size(); i++) {\n    hashmap[v[i]] = i;\n\
    \  }\n  std::vector<std::string> n {};\n  std::string temp = \"\";\n  for (int\
    \ i = 0; i < numbers.size(); i++) {\n    if (numbers[i] == ' ') {\n      n.push_back(temp);\n\
    \      temp = \"\";\n    } else {\n      temp += numbers[i];\n    }\n  }\n  n.push_back(temp);\n\
    \  std::sort(n.begin(), n.end(), [&hashmap](std::string &a, std::string &b) {\n\
    \    return hashmap[a] < hashmap[b];\n  });\n  std::string result = \"\";\n  for\
    \ (int i = 0; i < n.size(); i++) {\n    result += n[i];\n    if (i < n.size()\
    \ - 1) {\n      result += \" \";\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::istringstream iss(numbers);\n    std::vector<std::string> tokens{std::istream_iterator<std::string>{iss},\
    \ std::istream_iterator<std::string>{}};\n    std::map<std::string, int> dict\
    \ = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n\
    \        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n   \
    \     {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n      \
    \  {\"nine\", 9},\n    };\n    std::sort(tokens.begin(), tokens.end(), [&dict](const\
    \ std::string& lhs, const std::string& rhs) {\n        return dict[lhs] < dict[rhs];\n\
    \    });\n    return std::accumulate(tokens.begin(), tokens.end(), std::string(),\
    \ [](std::string a, std::string b) {\n        return a + ' ' + b;\n    }).substr(1);\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 1) > this->size() (which is 0)\n"
  stdout: ''
  timestamp: 1660115002
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  // your code here\n  std::string new_string = \"\";\n  std::vector<int>\
    \ nums;\n  std::stringstream ss(numbers);\n  while(ss >> numbers){\n    if(numbers\
    \ == \"zero\")\n      nums.push_back(0);\n    else if(numbers == \"one\")\n  \
    \    nums.push_back(1);\n    else if(numbers == \"two\")\n      nums.push_back(2);\n\
    \    else if(numbers == \"three\")\n      nums.push_back(3);\n    else if(numbers\
    \ == \"four\")\n      nums.push_back(4);\n    else if(numbers == \"five\")\n \
    \     nums.push_back(5);\n    else if(numbers == \"six\")\n      nums.push_back(6);\n\
    \    else if(numbers == \"seven\")\n      nums.push_back(7);\n    else if(numbers\
    \ == \"eight\")\n      nums.push_back(8);\n    else if(numbers == \"nine\")\n\
    \      nums.push_back(9);\n  }\n  sort(nums.begin(), nums.end());\n  std::vector<int>::iterator\
    \ it;\n  for(it = nums.begin(); it != nums.end(); it++){\n    if(*it == 0)\n \
    \     new_string = new_string + \"zero \";\n    else if(*it == 1)\n      new_string\
    \ = new_string + \"one \";\n    else if(*it == 2)\n      new_string = new_string\
    \ + \"two \";\n    else if(*it == 3)\n      new_string = new_string + \"three\
    \ \";\n    else if(*it == 4)\n      new_string = new_string + \"four \";\n   \
    \ else if(*it == 5)\n      new_string = new_string + \"five \";\n    else if(*it\
    \ == 6)\n      new_string = new_string + \"six \";\n    else if(*it == 7)\n  \
    \    new_string = new_string + \"seven \";\n    else if(*it == 8)\n      new_\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9x7y2luq.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp9x7y2luq.cpp:55:7: error: \u2018new_\u2019 was not declared in this\
    \ scope\n   55 |       new_\n      |       ^~~~\n/tmp/tmp9x7y2luq.cpp:57:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   57\
    \ | int main() {\n      |            ^\n/tmp/tmp9x7y2luq.cpp:64:1: error: expected\
    \ \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmp9x7y2luq.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp9x7y2luq.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115001
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::stringstream stream(numbers);\n  std::string word;\n  std::map<std::string,\
    \ int> m;\n  m[\"zero\"] = 0;\n  m[\"one\"] = 1;\n  m[\"two\"] = 2;\n  m[\"three\"\
    ] = 3;\n  m[\"four\"] = 4;\n  m[\"five\"] = 5;\n  m[\"six\"] = 6;\n  m[\"seven\"\
    ] = 7;\n  m[\"eight\"] = 8;\n  m[\"nine\"] = 9;\n  std::vector<int> v;\n  while\
    \ (stream >> word) {\n    v.push_back(m[word]);\n  }\n  std::sort(v.begin(), v.end());\n\
    \  std::map<int, std::string> m2;\n  m2[0] = \"zero\";\n  m2[1] = \"one\";\n \
    \ m2[2] = \"two\";\n  m2[3] = \"three\";\n  m2[4] = \"four\";\n  m2[5] = \"five\"\
    ;\n  m2[6] = \"six\";\n  m2[7] = \"seven\";\n  m2[8] = \"eight\";\n  m2[9] = \"\
    nine\";\n  std::string ans = \"\";\n  for (int i = 0; i < v.size(); i++) {\n \
    \   ans += m2[v[i]];\n    if (i != v.size() - 1) {\n      ans += \" \";\n    }\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"\
    three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"\
    ));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four\
    \ five seven eight nine\"));\n    assert(candidate((\"six five four three two\
    \ one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> numbers_vec;\n    std::stringstream number_string(numbers);\n\
    \    std::string number;\n    while (std::getline(number_string, number, ' '))\
    \ {\n        numbers_vec.push_back(std::stoi(number));\n    }\n    std::sort(numbers_vec.begin(),\
    \ numbers_vec.end());\n    std::stringstream sorted_numbers;\n    for (int i =\
    \ 0; i < numbers_vec.size(); i++) {\n        sorted_numbers << numbers_vec[i]\
    \ << \" \";\n    }\n    return sorted_numbers.str();\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660115002
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::map<std::string, int> number_string_to_number = {\n    {\"zero\",\
    \ 0},\n    {\"one\", 1},\n    {\"two\", 2},\n    {\"three\", 3},\n    {\"four\"\
    , 4},\n    {\"five\", 5},\n    {\"six\", 6},\n    {\"seven\", 7},\n    {\"eight\"\
    , 8},\n    {\"nine\", 9}\n  };\n  std::vector<std::string> number_strings = split(numbers,\
    \ ' ');\n  std::vector<int> numbers_int;\n  for (auto number_string : number_strings)\
    \ {\n    numbers_int.push_back(number_string_to_number[number_string]);\n  }\n\
    \  std::sort(numbers_int.begin(), numbers_int.end());\n  std::vector<std::string>\
    \ sorted_number_strings;\n  for (auto number_int : numbers_int) {\n    for (auto\
    \ entry : number_string_to_number) {\n      if (entry.second == number_int) {\n\
    \        sorted_number_strings.push_back(entry.first);\n      }\n    }\n  }\n\
    \  return join(sorted_number_strings, ' ');\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc03yddf0.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpc03yddf0.cpp:21:45: error: \u2018split\u2019 was not declared in this\
    \ scope\n   21 |   std::vector<std::string> number_strings = split(numbers, '\
    \ ');\n      |                                             ^~~~~\n/tmp/tmpc03yddf0.cpp:35:10:\
    \ error: \u2018join\u2019 was not declared in this scope; did you mean \u2018\
    jn\u2019?\n   35 |   return join(sorted_number_strings, ' ');\n      |       \
    \   ^~~~\n      |          jn\n"
  stdout: ''
  timestamp: 1660115001
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> numbers_split;\n    std::stringstream ss(numbers);\n\
    \    std::string tmp;\n    while (ss >> tmp) {\n        numbers_split.push_back(tmp);\n\
    \    }\n    std::map<std::string, int> num_dict = {{\"zero\", 0}, {\"one\", 1},\
    \ {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"\
    seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n    std::sort(numbers_split.begin(),\
    \ numbers_split.end(), [&num_dict](const std::string &a, const std::string &b)\
    \ {\n        return num_dict[a] < num_dict[b];\n    });\n    std::string res;\n\
    \    for (int i = 0; i < numbers_split.size(); i++) {\n        res.append(numbers_split[i]);\n\
    \        if (i != numbers_split.size() - 1) {\n            res.append(\" \");\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string words = \"zero one two three four five six seven eight nine\"\
    ;\n    std::string result;\n    std::vector<std::string> tmp;\n    std::stringstream\
    \ ss(numbers);\n    std::string str;\n    while (ss >> str) {\n        tmp.push_back(str);\n\
    \    }\n    for (int i = 0; i < tmp.size(); i++) {\n        std::string tmp_s\
    \ = tmp[i];\n        int k = words.find(tmp_s);\n        while (k != -1) {\n \
    \           tmp_s[0] = ' ';\n            k = words.find(tmp_s);\n        }\n \
    \       words[words.find(tmp[i])] = ' ';\n    }\n    std::stringstream oss(words);\n\
    \    std::string nums;\n    while (oss >> nums) {\n        result += nums + \"\
    \ \";\n    }\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpxplt0w2b: /tmp/tmpxplt0w2b.cpp:36: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // Convert the numbers to an array of ints.\n    std::vector<int> ints;\n\
    \    int lastPos = 0;\n    while (true) {\n        size_t pos = numbers.find('\
    \ ', lastPos);\n        if (pos == std::string::npos) {\n            // Convert\
    \ final number.\n            assert(pos > lastPos);\n            ints.push_back(to_int(numbers.substr(lastPos,\
    \ pos - lastPos)));\n            break;\n        } else {\n            // Convert\
    \ number.\n            assert(pos > lastPos);\n            ints.push_back(to_int(numbers.substr(lastPos,\
    \ pos - lastPos)));\n            lastPos = pos + 1;\n        }\n    }\n    //\
    \ Sort the ints.\n    std::sort(ints.begin(), ints.end());\n    // Convert back\
    \ to a string.\n    return to_string(ints);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpshtvkoec.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpshtvkoec.cpp:17:28: error: \u2018to_int\u2019 was not declared in this\
    \ scope; did you mean \u2018u_int\u2019?\n   17 |             ints.push_back(to_int(numbers.substr(lastPos,\
    \ pos - lastPos)));\n      |                            ^~~~~~\n      |      \
    \                      u_int\n/tmp/tmpshtvkoec.cpp:22:28: error: \u2018to_int\u2019\
    \ was not declared in this scope; did you mean \u2018u_int\u2019?\n   22 |   \
    \          ints.push_back(to_int(numbers.substr(lastPos, pos - lastPos)));\n \
    \     |                            ^~~~~~\n      |                           \
    \ u_int\n/tmp/tmpshtvkoec.cpp:29:26: error: no matching function for call to \u2018\
    to_string(std::vector<int>&)\u2019\n   29 |     return to_string(ints);\n    \
    \  |                          ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpshtvkoec.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6549:3:\
    \ note: candidate: \u2018std::string std::__cxx11::to_string(int)\u2019\n 6549\
    \ |   to_string(int __val)\n      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6549:17:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<int>\u2019\
    \ to \u2018int\u2019\n 6549 |   to_string(int __val)\n      |             ~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6554:3: note: candidate: \u2018std::string\
    \ std::__cxx11::to_string(unsigned int)\u2019\n 6554 |   to_string(unsigned __val)\n\
    \      |   ^~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6554:22: note:  \
    \ no known conversion for argument 1 from \u2018std::vector<int>\u2019 to \u2018\
    unsigned int\u2019\n 6554 |   to_"
  stdout: ''
  timestamp: 1660115001
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string s = \"zero one two three four five six seven eight nine\"\
    ;\n    std::vector<std::string> ss = {\"zero\", \"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int>\
    \ num;\n    std::string temp;\n    int j;\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        temp.clear();\n        if (numbers[i] == ' ') {\n          \
    \  j = s.find(temp);\n            num.push_back(j);\n        } else {\n      \
    \      temp += numbers[i];\n        }\n    }\n    j = s.find(temp);\n    num.push_back(j);\n\
    \    std::sort(num.begin(), num.end());\n    std::string res;\n    for (size_t\
    \ i = 0; i < num.size(); i++) {\n        res += ss[num[i]];\n        res += '\
    \ ';\n    }\n    res.pop_back();\n    return res;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpza78aog9: /tmp/tmpza78aog9.cpp:36: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115002
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\t\n\tstd::stringstream ss(numbers);\n\n\tstd::map<std::string, int> dict{\n\
    \t\t{\"zero\", 0},\n\t\t{\"one\", 1},\n\t\t{\"two\", 2},\n\t\t{\"three\", 3},\n\
    \t\t{\"four\", 4},\n\t\t{\"five\", 5},\n\t\t{\"six\", 6},\n\t\t{\"seven\", 7},\n\
    \t\t{\"eight\", 8},\n\t\t{\"nine\", 9}\n\t};\n\n\tstd::vector<int> nums;\n\tstd::string\
    \ str;\n\twhile (ss >> str) {\n\t\tnums.push_back(dict[str]);\n\t}\n\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\n\tstd::map<int, std::string> dict1{\n\t\t{0, \"zero\"},\n\t\t\
    {1, \"one\"},\n\t\t{2, \"two\"},\n\t\t{3, \"three\"},\n\t\t{4, \"four\"},\n\t\t\
    {5, \"five\"},\n\t\t{6, \"six\"},\n\t\t{7, \"seven\"},\n\t\t{8, \"eight\"},\n\t\
    \t{9, \"nine\"}\n\t};\n\n\tstd::string out;\n\tfor (int num : nums) {\n\t\tout\
    \ += dict1[num] + \" \";\n\t}\n\n\treturn out.substr(0, out.size() - 1);\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string out;\n    std::map<std::string, int> num_map;\n    std::stringstream\
    \ ss(numbers);\n    std::string word;\n    std::vector<int> v;\n    num_map[\"\
    zero\"] = 0;\n    num_map[\"one\"] = 1;\n    num_map[\"two\"] = 2;\n    num_map[\"\
    three\"] = 3;\n    num_map[\"four\"] = 4;\n    num_map[\"five\"] = 5;\n    num_map[\"\
    six\"] = 6;\n    num_map[\"seven\"] = 7;\n    num_map[\"eight\"] = 8;\n    num_map[\"\
    nine\"] = 9;\n    while (ss >> word) {\n        v.push_back(num_map[word]);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i < v.size();\
    \ i++) {\n        switch (v[i]) {\n            case 0:\n                out +=\
    \ \"zero \";\n                break;\n            case 1:\n                out\
    \ += \"one \";\n                break;\n            case 2:\n                out\
    \ += \"two \";\n                break;\n            case 3:\n                out\
    \ += \"three \";\n                break;\n            case 4:\n              \
    \  out += \"four \";\n                break;\n            case 5:\n          \
    \      out += \"five \";\n                break;\n            case 6:\n      \
    \          out += \"six \";\n                break;\n            case 7:\n   \
    \             out += \"seven \";\n                break;\n            case 8:\n\
    \                out += \"eight \";\n                break;\n            case\
    \ 9:\n                out += \"nine \";\n                break;\n        }\n \
    \   }\n    return out;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp6tl9z20w: /tmp/tmp6tl9z20w.cpp:67: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115003
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tstd::istringstream iss(numbers);\n\tstd::string\
    \ token;\n\twhile (std::getline(iss, token, ' ')) {\n\t\tif (token == \"zero\"\
    ) nums.push_back(0);\n\t\telse if (token == \"one\") nums.push_back(1);\n\t\t\
    else if (token == \"two\") nums.push_back(2);\n\t\telse if (token == \"three\"\
    ) nums.push_back(3);\n\t\telse if (token == \"four\") nums.push_back(4);\n\t\t\
    else if (token == \"five\") nums.push_back(5);\n\t\telse if (token == \"six\"\
    ) nums.push_back(6);\n\t\telse if (token == \"seven\") nums.push_back(7);\n\t\t\
    else if (token == \"eight\") nums.push_back(8);\n\t\telse if (token == \"nine\"\
    ) nums.push_back(9);\n\t}\n\t//std::sort(nums.begin(), nums.end());\n\tstd::sort(nums.begin(),\
    \ nums.end(), std::greater<int>());\n\tstd::string res = \"\";\n\tfor (int i =\
    \ 0; i < nums.size(); i++) {\n\t\tif (nums[i] == 0) res += \"zero \";\n\t\telse\
    \ if (nums[i] == 1) res += \"one \";\n\t\telse if (nums[i] == 2) res += \"two\
    \ \";\n\t\telse if (nums[i] == 3) res += \"three \";\n\t\telse if (nums[i] ==\
    \ 4) res += \"four \";\n\t\telse if (nums[i] == 5) res += \"five \";\n\t\telse\
    \ if (nums[i] == 6) res += \"six \";\n\t\telse if (nums[i] == 7) res += \"seven\
    \ \";\n\t\telse if (nums[i] == 8) res += \"eight \";\n\t\telse if (nums[i] ==\
    \ 9) res\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp935vrvwc.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp935vrvwc.cpp:37:29: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   37 |   else if (nums[i] == 9) res\n      |                       \
    \      ^\n      |                             ;\n   38 | }\n      | ~        \
    \                    \n/tmp/tmp935vrvwc.cpp:39:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   39 | int main() {\n     \
    \ |            ^\n/tmp/tmp935vrvwc.cpp:46:1: error: expected \u2018}\u2019 at\
    \ end of input\n   46 | }\n      | ^\n/tmp/tmp935vrvwc.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmp935vrvwc.cpp:46:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   46 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115002
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // this map is going to count the number of times a number occurs\n \
    \   std::map<std::string, int> num_count;\n    // vector to store the split string\n\
    \    std::vector<std::string> nums;\n    // tokenise the numbers string\n    std::stringstream\
    \ ss(numbers);\n    std::string token;\n    while (std::getline(ss, token, ' '))\
    \ {\n        nums.push_back(token);\n    }\n    // sort the tokens in ascending\
    \ order\n    std::sort(nums.begin(), nums.end());\n    // create a new string\
    \ to store the result\n    std::string res = \"\";\n    // iterate through the\
    \ vector to count the occurrences of each element\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        // update the count for that element\n        num_count[nums[i]]++;\n\
    \    }\n    // iterate through the map and append the key to the result string\n\
    \    // append the key equal to the number of times it occurs\n    for (auto it\
    \ = num_count.begin(); it != num_count.end(); it++) {\n        std::string key\
    \ = it->first;\n        res += key;\n        res += \" \";\n    }\n    // return\
    \ the result\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpgtk8fk1n: /tmp/tmpgtk8fk1n.cpp:41: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115001
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string sorted = \"\";\n    std::vector<std::string> result = split(numbers,\
    \ ' ');\n    std::sort(result.begin(), result.end());\n    return join(result,\
    \ ' ');\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpksxbcdsa.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpksxbcdsa.cpp:10:39: error: \u2018split\u2019 was not declared in this\
    \ scope\n   10 |     std::vector<std::string> result = split(numbers, ' ');\n\
    \      |                                       ^~~~~\n/tmp/tmpksxbcdsa.cpp:12:12:\
    \ error: \u2018join\u2019 was not declared in this scope; did you mean \u2018\
    jn\u2019?\n   12 |     return join(result, ' ');\n      |            ^~~~\n  \
    \    |            jn\n"
  stdout: ''
  timestamp: 1660115002
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string result = \"\";\n    int count[10] = {0};\n    std::string\
    \ numberals[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\", \"seven\", \"eight\", \"nine\"};\n    int i;\n    int j;\n    int pos;\n\
    \    int len;\n    char * pch;\n    pch = strtok ((char *)numbers.c_str(),\" \"\
    );\n    while (pch != NULL)\n    {\n        for (i = 0; i < 10; i++) {\n     \
    \       if (strcmp(pch, numberals[i].c_str()) == 0) {\n                count[i]++;\n\
    \                break;\n            }\n        }\n        pch = strtok (NULL,\
    \ \" \");\n    }\n    for (i = 0; i < 10; i++) {\n        for (j = 0; j < count[i];\
    \ j++) {\n            if (result.length() == 0) {\n                result = numberals[i];\n\
    \            } else {\n                result = result + \" \" + numberals[i];\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115003
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> num;\n    if(numbers.find(\"zero\") != std::string::npos)\
    \ num.push_back(0);\n    if(numbers.find(\"one\") != std::string::npos) num.push_back(1);\n\
    \    if(numbers.find(\"two\") != std::string::npos) num.push_back(2);\n    if(numbers.find(\"\
    three\") != std::string::npos) num.push_back(3);\n    if(numbers.find(\"four\"\
    ) != std::string::npos) num.push_back(4);\n    if(numbers.find(\"five\") != std::string::npos)\
    \ num.push_back(5);\n    if(numbers.find(\"six\") != std::string::npos) num.push_back(6);\n\
    \    if(numbers.find(\"seven\") != std::string::npos) num.push_back(7);\n    if(numbers.find(\"\
    eight\") != std::string::npos) num.push_back(8);\n    if(numbers.find(\"nine\"\
    ) != std::string::npos) num.push_back(9);\n    sort(num.begin(), num.end());\n\
    \    for(auto i = num.begin(); i != num.end(); i++)\n    {\n        //printf(\"\
    %d\\n\", *i);\n        if(i == num.begin()) numbers = \"\";\n        switch(*i)\n\
    \        {\n            case 0: numbers += \"zero \"; break;\n            case\
    \ 1: numbers += \"one \"; break;\n            case 2: numbers += \"two \"; break;\n\
    \            case 3: numbers += \"three \"; break;\n            case 4: numbers\
    \ += \"four \"; break;\n            case 5: numbers += \"five \"; break;\n   \
    \         case 6: numbers += \"six \"; break;\n            case 7: numbers +=\
    \ \"seven \"; break;\n            case 8: numbers += \"eight \"; break;\n    \
    \        case 9: numbers += \"nine \"; break;\n        }\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpo6mrx4ui: /tmp/tmpo6mrx4ui.cpp:44: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::string arr[1000];\n\tstd::string result;\n\tstd::stringstream s_stream(numbers);\n\
    \tint i = 0;\n\twhile (s_stream.good()) {\n\t\ts_stream >> arr[i];\n\t\ti++;\n\
    \t}\n\tint n = i;\n\tstd::string temp;\n\tfor (int i = 0; i < n; i++) {\n\t\t\
    for (int j = i + 1; j < n; j++) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\ttemp\
    \ = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\
    \t}\n\tfor (int i = 0; i < n; i++) {\n\t\tresult += arr[i] + \" \";\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpq4oyuxc1: /tmp/tmpq4oyuxc1.cpp:35: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> v;\n\tstd::stringstream ss(numbers);\n\tstd::string temp;\n\
    \twhile (ss >> temp) {\n\t\tif (temp == \"zero\") v.push_back(0);\n\t\telse if\
    \ (temp == \"one\") v.push_back(1);\n\t\telse if (temp == \"two\") v.push_back(2);\n\
    \t\telse if (temp == \"three\") v.push_back(3);\n\t\telse if (temp == \"four\"\
    ) v.push_back(4);\n\t\telse if (temp == \"five\") v.push_back(5);\n\t\telse if\
    \ (temp == \"six\") v.push_back(6);\n\t\telse if (temp == \"seven\") v.push_back(7);\n\
    \t\telse if (temp == \"eight\") v.push_back(8);\n\t\telse if (temp == \"nine\"\
    ) v.push_back(9);\n\t}\n\tstd::sort(v.begin(), v.end());\n\tstd::string answer\
    \ = \"\";\n\tfor (auto &i : v) {\n\t\tswitch (i) {\n\t\tcase 0: answer += \"zero\
    \ \"; break;\n\t\tcase 1: answer += \"one \"; break;\n\t\tcase 2: answer += \"\
    two \"; break;\n\t\tcase 3: answer += \"three \"; break;\n\t\tcase 4: answer +=\
    \ \"four \"; break;\n\t\tcase 5: answer += \"five \"; break;\n\t\tcase 6: answer\
    \ += \"six \"; break;\n\t\tcase 7: answer += \"seven \"; break;\n\t\tcase 8: answer\
    \ += \"eight \"; break;\n\t\tcase 9: answer += \"nine \"; break;\n\t\t}\n\t}\n\
    \tanswer.pop_back();\n\treturn answer;\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpdk30tx6i: /tmp/tmpdk30tx6i.cpp:45: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int>  string_to_int;\n    string_to_int[\"zero\"\
    ]=0;\n    string_to_int[\"one\"]=1;\n    string_to_int[\"two\"]=2;\n    string_to_int[\"\
    three\"]=3;\n    string_to_int[\"four\"]=4;\n    string_to_int[\"five\"]=5;\n\
    \    string_to_int[\"six\"]=6;\n    string_to_int[\"seven\"]=7;\n    string_to_int[\"\
    eight\"]=8;\n    string_to_int[\"nine\"]=9;\n    std::vector<int>nums;\n    std::istringstream\
    \ iss(numbers);\n    for(std::string s; iss >> s;) {\n        nums.push_back(string_to_int[s]);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::map<int, std::string>\
    \ int_to_string;\n    int_to_string[0]=\"zero\";\n    int_to_string[1]=\"one\"\
    ;\n    int_to_string[2]=\"two\";\n    int_to_string[3]=\"three\";\n    int_to_string[4]=\"\
    four\";\n    int_to_string[5]=\"five\";\n    int_to_string[6]=\"six\";\n    int_to_string[7]=\"\
    seven\";\n    int_to_string[8]=\"eight\";\n    int_to_string[9]=\"nine\";\n  \
    \  std::stringstream str;\n    for(int i=0; i<nums.size(); i++) {\n        str\
    \ << int_to_string[nums[i]] << ' ';\n    }\n    return str.str();\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx4rfaub1: /tmp/tmpx4rfaub1.cpp:46: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::vector<int> arr;\n  std::stringstream s(numbers);\n  std::string temp;\n\
    \  while(s >> temp) {\n    if(temp == \"zero\") arr.push_back(0);\n    else if(temp\
    \ == \"one\") arr.push_back(1);\n    else if(temp == \"two\") arr.push_back(2);\n\
    \    else if(temp == \"three\") arr.push_back(3);\n    else if(temp == \"four\"\
    ) arr.push_back(4);\n    else if(temp == \"five\") arr.push_back(5);\n    else\
    \ if(temp == \"six\") arr.push_back(6);\n    else if(temp == \"seven\") arr.push_back(7);\n\
    \    else if(temp == \"eight\") arr.push_back(8);\n    else if(temp == \"nine\"\
    ) arr.push_back(9);\n  }\n  std::sort(arr.begin(), arr.end());\n  numbers = \"\
    \";\n  for(int i = 0; i < arr.size(); i++) {\n    if(arr[i] == 0) numbers += \"\
    zero \";\n    else if(arr[i] == 1) numbers += \"one \";\n    else if(arr[i] ==\
    \ 2) numbers += \"two \";\n    else if(arr[i] == 3) numbers += \"three \";\n \
    \   else if(arr[i] == 4) numbers += \"four \";\n    else if(arr[i] == 5) numbers\
    \ += \"five \";\n    else if(arr[i] == 6) numbers += \"six \";\n    else if(arr[i]\
    \ == 7) numbers += \"seven \";\n    else if(arr[i] == 8) numbers += \"eight \"\
    ;\n    else if(arr[i] == 9) numbers += \"nine \";\n  }\n  return numbers;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpnunddpcy: /tmp/tmpnunddpcy.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::string token;\n\tstd::vector<std::string>\
    \ v;\n\tstd::string result = \"\";\n\twhile (ss >> token) {\n\t\tv.push_back(token);\n\
    \t}\n\tstd::sort(v.begin(), v.end());\n\tfor (int i = 0; i < v.size(); i++) {\n\
    \t\tresult += v[i] + \" \";\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpxsu66a3s: /tmp/tmpxsu66a3s.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tif (numbers.empty()) {\n\t\treturn numbers;\n\t}\n\tstd::vector<int> list;\n\
    \tstd::istringstream iss(numbers);\n\tstd::string token;\n\twhile (std::getline(iss,\
    \ token, ' ')) {\n\t\tif (token == \"zero\") {\n\t\t\tlist.push_back(0);\n\t\t\
    }\n\t\telse if (token == \"one\") {\n\t\t\tlist.push_back(1);\n\t\t}\n\t\telse\
    \ if (token == \"two\") {\n\t\t\tlist.push_back(2);\n\t\t}\n\t\telse if (token\
    \ == \"three\") {\n\t\t\tlist.push_back(3);\n\t\t}\n\t\telse if (token == \"four\"\
    ) {\n\t\t\tlist.push_back(4);\n\t\t}\n\t\telse if (token == \"five\") {\n\t\t\t\
    list.push_back(5);\n\t\t}\n\t\telse if (token == \"six\") {\n\t\t\tlist.push_back(6);\n\
    \t\t}\n\t\telse if (token == \"seven\") {\n\t\t\tlist.push_back(7);\n\t\t}\n\t\
    \telse if (token == \"eight\") {\n\t\t\tlist.push_back(8);\n\t\t}\n\t\telse if\
    \ (token == \"nine\") {\n\t\t\tlist.push_back(9);\n\t\t}\n\t}\n\tsort(list.begin(),\
    \ list.end());\n\tstd::string ret;\n\tfor (auto a : list) {\n\t\tif (a == 0) {\n\
    \t\t\tret += \"zero \";\n\t\t}\n\t\telse if (a == 1) {\n\t\t\tret += \"one \"\
    ;\n\t\t}\n\t\telse if (a == 2) {\n\t\t\tret += \"two \";\n\t\t}\n\t\telse if (a\
    \ == 3) {\n\t\t\tret += \"three \";\n\t\t}\n\t\telse if (a == 4) {\n\t\t\tret\
    \ += \"four \";\n\t\t}\n\t\telse if (a == 5) {\n\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmm4opcc5.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpmm4opcc5.cpp:68:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   68 | int main() {\n      |            ^\n/tmp/tmpmm4opcc5.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmpmm4opcc5.cpp:49:22:\
    \ note: to match this \u2018{\u2019\n   49 |  for (auto a : list) {\n      | \
    \                     ^\n/tmp/tmpmm4opcc5.cpp:75:1: error: expected \u2018}\u2019\
    \ at end of input\n   75 | }\n      | ^\n/tmp/tmpmm4opcc5.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpmm4opcc5.cpp:75:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   75 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660115004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> nums;\n\tint a[10] = { 0 };\n\tint i = 0;\n\tfor (int\
    \ j = 0; j < numbers.length(); j++) {\n\t\tif (numbers[j] == ' ') {\n\t\t\tnums.push_back(a[i]);\n\
    \t\t\ti = 0;\n\t\t}\n\t\telse {\n\t\t\tint temp = numbers[j] - '0';\n\t\t\ta[i]\
    \ = (a[i] * 10) + temp;\n\t\t\ti++;\n\t\t}\n\t}\n\tnums.push_back(a[i]);\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::stringstream ss;\n\tfor (auto const& value : nums) {\n\t\
    \tss << value << \" \";\n\t}\n\treturn ss.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpgdvzpm91: /tmp/tmpgdvzpm91.cpp:33: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115004
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::map<std::string, int> numeric_values = {\n    {\"zero\", 0},\n   \
    \ {\"one\", 1},\n    {\"two\", 2},\n    {\"three\", 3},\n    {\"four\", 4},\n\
    \    {\"five\", 5},\n    {\"six\", 6},\n    {\"seven\", 7},\n    {\"eight\", 8},\n\
    \    {\"nine\", 9}\n  };\n  // split numbers into a vector of strings\n  std::vector<std::string>\
    \ unsorted_numbers;\n  std::stringstream ss(numbers);\n  std::string numeral;\n\
    \  while (ss >> numeral) {\n    unsorted_numbers.push_back(numeral);\n  }\n  //\
    \ convert vector of numeral strings to vector of ints\n  std::vector<int> numbers_to_sort;\n\
    \  for (int i = 0; i < unsorted_numbers.size(); i++) {\n    numbers_to_sort.push_back(numeric_values[unsorted_numbers[i]]);\n\
    \  }\n  // sort the vector of ints\n  std::sort(numbers_to_sort.begin(), numbers_to_sort.end());\n\
    \  // convert the vector of ints back to a vector of numeral strings\n  for (int\
    \ i = 0; i < numbers_to_sort.size(); i++) {\n    for (std::map<std::string, int>::iterator\
    \ it = numeric_values.begin(); it != numeric_values.end(); it++) {\n      if (it->second\
    \ == numbers_to_sort[i]) {\n        unsorted_numbers[i] = it->first;\n      }\n\
    \    }\n  }\n  // create the output string\n  std::string output;\n  for (int\
    \ i = 0; i < unsorted_numbers.size(); i++) {\n    output += unsorted_numbers[i];\n\
    \    if (i < unsorted_numbers.size() - 1) {\n      output += \" \";\n    }\n \
    \ }\n  return output;\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  //std::map<std::string, int> values = { {\"zero\", 0}, {\"one\", 1}, {\"\
    two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\"\
    , 7}, {\"eight\", 8}, {\"nine\", 9} };\n  std::map<std::string, int> values =\
    \ { {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\
    \ {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9} };\n\
    \  std::istringstream stream(numbers);\n  std::string word;\n  std::vector<int>\
    \ wordsToSort;\n  while (stream >> word) {\n    wordsToSort.push_back(values[word]);\n\
    \  }\n  std::sort(wordsToSort.begin(), wordsToSort.end());\n  std::stringstream\
    \ ss;\n  for (auto word : wordsToSort) {\n    ss << word << \" \";\n  }\n  return\
    \ ss.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpe6lr8pxc: /tmp/tmpe6lr8pxc.cpp:27: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    if (numbers.empty()) return \"\";\n    std::map<std::string, int> myMap\
    \ = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n\
    \        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n   \
    \     {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n      \
    \  {\"nine\", 9}\n    };\n    std::vector<int> allValues;\n    std::stringstream\
    \ ss(numbers);\n    std::string token;\n    while (ss >> token) {\n        allValues.push_back(myMap[token]);\n\
    \    }\n    std::sort(allValues.begin(), allValues.end());\n    std::vector<std::string>\
    \ allStrings;\n    for (auto itr = allValues.begin(); itr != allValues.end();\
    \ ++itr) {\n        allStrings.push_back(myMap.find(*itr)->first);\n    }\n  \
    \  std::string result = \"\";\n    for (auto itr = allStrings.begin(); itr !=\
    \ allStrings.end(); ++itr) {\n        result += *itr + \" \";\n    }\n    return\
    \ result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk61pegjc.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpk61pegjc.cpp:31:45: error: no matching function for call to \u2018\
    std::map<std::__cxx11::basic_string<char>, int>::find(int&)\u2019\n   31 |   \
    \      allStrings.push_back(myMap.find(*itr)->first);\n      |               \
    \                              ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpk61pegjc.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc =\
    \ std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc =\
    \ std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> >]\u2019\
    \n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n      |  ^~~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument deduction/substitution\
    \ failed:\n"
  stdout: ''
  timestamp: 1660115004
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::unordered_map<std::string, int> m;\n    m[\"zero\"] = 0;\n    m[\"\
    one\"] = 1;\n    m[\"two\"] = 2;\n    m[\"three\"] = 3;\n    m[\"four\"] = 4;\n\
    \    m[\"five\"] = 5;\n    m[\"six\"] = 6;\n    m[\"seven\"] = 7;\n    m[\"eight\"\
    ] = 8;\n    m[\"nine\"] = 9;\n    std::vector<int> v;\n    std::stringstream ss(numbers);\n\
    \    std::string tmp;\n    while (ss >> tmp) {\n        v.push_back(m[tmp]);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::unordered_map<int, std::string>\
    \ m2;\n    m2[0] = \"zero\";\n    m2[1] = \"one\";\n    m2[2] = \"two\";\n   \
    \ m2[3] = \"three\";\n    m2[4] = \"four\";\n    m2[5] = \"five\";\n    m2[6]\
    \ = \"six\";\n    m2[7] = \"seven\";\n    m2[8] = \"eight\";\n    m2[9] = \"nine\"\
    ;\n    std::string ret = \"\";\n    for (int i = 0; i < v.size(); i++) {\n   \
    \     ret += m2[v[i]];\n        if (i != v.size() - 1) {\n            ret += \"\
    \ \";\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115005
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string sorted;\n    int j = 0;\n    std::string numbers_copy = numbers;\n\
    \    while (j < numbers.length()) {\n        int min_value = -1;\n        int\
    \ min_index = 0;\n        int k = 0;\n        while (k < numbers_copy.length())\
    \ {\n            if (numbers_copy[k] == ' ') {\n                k++;\n       \
    \         continue;\n            }\n            int current_value = numberal_to_integer(numbers_copy.substr(k,\
    \ std::string::npos));\n            if (min_value == -1 || current_value < min_value)\
    \ {\n                min_value = current_value;\n                min_index = k;\n\
    \            }\n            k += numberal_to_string(current_value).length();\n\
    \        }\n        if (j != 0) {\n            sorted += \" \";\n        }\n \
    \       sorted += numberal_to_string(min_value);\n        numbers_copy = numbers_copy.replace(min_index,\
    \ numberal_to_string(min_value).length(), \"     \");\n        j += numberal_to_string(min_value).length()\
    \ + 1;\n    }\n    return sorted;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_407a1kh.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_407a1kh.cpp:21:33: error: \u2018numberal_to_integer\u2019 was not\
    \ declared in this scope\n   21 |             int current_value = numberal_to_integer(numbers_copy.substr(k,\
    \ std::string::npos));\n      |                                 ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_407a1kh.cpp:26:18: error: \u2018numberal_to_string\u2019 was not declared\
    \ in this scope\n   26 |             k += numberal_to_string(current_value).length();\n\
    \      |                  ^~~~~~~~~~~~~~~~~~\n/tmp/tmp_407a1kh.cpp:31:19: error:\
    \ \u2018numberal_to_string\u2019 was not declared in this scope\n   31 |     \
    \    sorted += numberal_to_string(min_value);\n      |                   ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115004
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tint nums[10] = { 0 };\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ w;\n\twhile (ss >> w) {\n\t\tif (w == \"zero\")\n\t\t\tnums[0]++;\n\t\telse\
    \ if (w == \"one\")\n\t\t\tnums[1]++;\n\t\telse if (w == \"two\")\n\t\t\tnums[2]++;\n\
    \t\telse if (w == \"three\")\n\t\t\tnums[3]++;\n\t\telse if (w == \"four\")\n\t\
    \t\tnums[4]++;\n\t\telse if (w == \"five\")\n\t\t\tnums[5]++;\n\t\telse if (w\
    \ == \"six\")\n\t\t\tnums[6]++;\n\t\telse if (w == \"seven\")\n\t\t\tnums[7]++;\n\
    \t\telse if (w == \"eight\")\n\t\t\tnums[8]++;\n\t\telse if (w == \"nine\")\n\t\
    \t\tnums[9]++;\n\t}\n\tint digit = 0;\n\tstd::string str = \"\";\n\tfor (int i\
    \ = 0; i < 10; i++) {\n\t\tdigit = nums[i];\n\t\tif (digit > 0) {\n\t\t\tif (i\
    \ == 0) {\n\t\t\t\twhile (digit--)\n\t\t\t\t\tstr += \"zero \";\n\t\t\t}\n\t\t\
    \telse if (i == 1) {\n\t\t\t\twhile (digit--)\n\t\t\t\t\tstr += \"one \";\n\t\t\
    \t}\n\t\t\telse if (i == 2) {\n\t\t\t\twhile (digit--)\n\t\t\t\t\tstr += \"two\
    \ \";\n\t\t\t}\n\t\t\telse if (i == 3) {\n\t\t\t\twhile (digit--)\n\t\t\t\t\t\
    str += \"three \";\n\t\t\t}\n\t\t\telse if (i == 4) {\n\t\t\t\twhile (digit--)\n\
    \t\t\t\t\tstr += \"four \";\n\t\t\t}\n\t\t\telse if (i == 5) {\n\t\t\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5pvnsg1e.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5pvnsg1e.cpp:62:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmp5pvnsg1e.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp5pvnsg1e.cpp:38:18:\
    \ note: to match this \u2018{\u2019\n   38 |   if (digit > 0) {\n      |     \
    \             ^\n/tmp/tmp5pvnsg1e.cpp:69:1: error: expected \u2018}\u2019 at end\
    \ of input\n   69 | }\n      | ^\n/tmp/tmp5pvnsg1e.cpp:36:31: note: to match this\
    \ \u2018{\u2019\n   36 |  for (int i = 0; i < 10; i++) {\n      |            \
    \                   ^\n/tmp/tmp5pvnsg1e.cpp:69:1: error: expected \u2018}\u2019\
    \ at end of input\n   69 | }\n      | ^\n/tmp/tmp5pvnsg1e.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmp5pvnsg1e.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115004
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> numbs = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int>\
    \ numbs_int;\n    std::vector<std::string> result;\n    std::stringstream stream(numbers);\n\
    \    std::string num;\n    std::getline(stream, num, ' ');\n    result.push_back(num);\n\
    \    while (std::getline(stream, num, ' ')) {\n        for (int i = 0; i < result.size();\
    \ i++) {\n            if (std::find(numbs.begin(), numbs.end(), num) - numbs.begin()\
    \ < std::find(numbs.begin(), numbs.end(), result[i]) - numbs.begin()) {\n    \
    \            result.insert(result.begin() + i, num);\n                break;\n\
    \            }\n            if (i == result.size() - 1) result.push_back(num);\n\
    \        }\n    }\n    std::string result_str;\n    for (int i = 0; i < result.size();\
    \ i++) {\n        result_str += result[i];\n        if (i != result.size() - 1)\
    \ result_str += \" \";\n    }\n    return result_str;\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660115009
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string map[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int> nums;\n\
    \    std::stringstream ss(numbers);\n    std::string word;\n    while (ss >> word)\
    \ {\n        for (int i = 0; i < 10; i++) {\n            if (word == map[i]) {\n\
    \                nums.push_back(i);\n                break;\n            }\n \
    \       }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string ans\
    \ = \"\";\n    for (int i = 0; i < nums.size(); i++) {\n        ans += map[nums[i]]\
    \ + \" \";\n    }\n    return ans.substr(0, ans.size() - 1);\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string,int> numwords;\n    numwords[\"zero\"] = 0;\n  \
    \  numwords[\"one\"] = 1;\n    numwords[\"two\"] = 2;\n    numwords[\"three\"\
    ] = 3;\n    numwords[\"four\"] = 4;\n    numwords[\"five\"] = 5;\n    numwords[\"\
    six\"] = 6;\n    numwords[\"seven\"] = 7;\n    numwords[\"eight\"] = 8;\n    numwords[\"\
    nine\"] = 9;\n    std::vector<int> words;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while(ss >> temp)\n    {\n        words.push_back(numwords[temp]);\n\
    \    }\n    std::sort(words.begin(),words.end());\n    std::map<int,std::string>\
    \ revmap;\n    for(auto p:numwords)\n    {\n        revmap[p.second] = p.first;\n\
    \    }\n    std::stringstream sol;\n    for(int i=0;i<words.size();i++)\n    {\n\
    \        sol << revmap[words[i]] << \" \";\n    }\n    return sol.str();\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpaei28iag: /tmp/tmpaei28iag.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\t// Use a map to quickly translate text to numbers\n\tstd::map<std::string,\
    \ int> number_map;\n\tnumber_map[\"zero\"] = 0;\n\tnumber_map[\"one\"] = 1;\n\t\
    number_map[\"two\"] = 2;\n\tnumber_map[\"three\"] = 3;\n\tnumber_map[\"four\"\
    ] = 4;\n\tnumber_map[\"five\"] = 5;\n\tnumber_map[\"six\"] = 6;\n\tnumber_map[\"\
    seven\"] = 7;\n\tnumber_map[\"eight\"] = 8;\n\tnumber_map[\"nine\"] = 9;\n\tstd::map<std::string,\
    \ int>::iterator it;\n\t\n\t// Reverse map, to translate number to text\n\tstd::map<int,\
    \ std::string> number_text_map;\n\tnumber_text_map[0] = \"zero\";\n\tnumber_text_map[1]\
    \ = \"one\";\n\tnumber_text_map[2] = \"two\";\n\tnumber_text_map[3] = \"three\"\
    ;\n\tnumber_text_map[4] = \"four\";\n\tnumber_text_map[5] = \"five\";\n\tnumber_text_map[6]\
    \ = \"six\";\n\tnumber_text_map[7] = \"seven\";\n\tnumber_text_map[8] = \"eight\"\
    ;\n\tnumber_text_map[9] = \"nine\";\n\tstd::map<int, std::string>::iterator it2;\n\
    \t\n\t// Extract numbers from string and push onto vector\n\tstd::vector<int>\
    \ v;\n\tstd::stringstream ss(numbers);\n\tstd::string temp;\n\twhile (ss >> temp)\
    \ {\n\t\tit = number_map.find(temp);\n\t\tv.push_back(it->second);\n\t}\n\t\n\t\
    // Sort vector of numbers\n\tstd::sort(v.begin(), v.end());\n\t\n\t// Map back\
    \ to text, and push onto stringstream\n\tstd::stringstream ss2;\n\tfor (unsigned\
    \ int i = 0; i < v.size(); i++) {\n\t\tit2 = number_text_map.find(v[i]);\n\t\t\
    ss2 << it\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5n4qqi_t.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp5n4qqi_t.cpp:53:7: error: no match for \u2018operator<<\u2019 (operand\
    \ types are \u2018std::stringstream\u2019 {aka \u2018std::__cxx11::basic_stringstream<char>\u2019\
    } and \u2018std::map<std::__cxx11::basic_string<char>, int>::iterator\u2019 {aka\
    \ \u2018std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ int> >\u2019})\n   53 |   ss2 << it\n      |   ~~~ ^~ ~~\n      |   |      |\n\
    \      |   |      std::map<std::__cxx11::basic_string<char>, int>::iterator {aka\
    \ std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, int>\
    \ >}\n      |   std::stringstream {aka std::__cxx11::basic_stringstream<char>}\n\
    In file included from /usr/include/c++/9/istream:39,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp5n4qqi_t.cpp:2:\n/usr/include/c++/9/ostream:108:7:\
    \ note: candidate: \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type&\
    \ (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type\
    \ = std::basic_ostream<char>]\u2019\n  108 |       operator<<(__ostream_type&\
    \ (*__pf)(__ostream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/ostream:108:36:\
    \ note:   no known conversion for argument 1 from \u2018std::map<std::__cxx11::basic_string<char>,\
    \ int>::iterator\u2019 {aka \u2018std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ int> >\u2019} to \u2018std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)\u2019\
    \ {aka \u2018std::basic_ostream<char>& (*)(std::basic_ostream<char>&)\u2019}\n\
    \  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))\n      | \
    \                 ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~"
  stdout: ''
  timestamp: 1660115004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  // sort the string\n  std::vector<std::string> strs;\n  std::stringstream\
    \ ss(numbers);\n  std::string temp;\n  while (ss >> temp) {\n    strs.push_back(temp);\n\
    \  }\n  std::sort(strs.begin(), strs.end());\n  std::string result;\n  for (std::string\
    \ str : strs) {\n    result += str + \" \";\n  }\n  // remove the trailing space\n\
    \  result.pop_back();\n  return result;\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpylyrkfub: /tmp/tmpylyrkfub.cpp:27: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    int len = numbers.length();\n    // std::cout << \"Length is : \" <<\
    \ len << std::endl;\n    std::string str[100];\n    int count = 0;\n    for(int\
    \ i = 0; i < len; i++) {\n        if(numbers[i] == ' ') {\n            count++;\n\
    \        }\n        else {\n            str[count] += numbers[i];\n        }\n\
    \    }\n    count++;\n    int arr[count];\n    for(int i = 0; i < count; i++)\
    \ {\n        if(str[i] == \"zero\") {\n            arr[i] = 0;\n        }\n  \
    \      else if(str[i] == \"one\") {\n            arr[i] = 1;\n        }\n    \
    \    else if(str[i] == \"two\") {\n            arr[i] = 2;\n        }\n      \
    \  else if(str[i] == \"three\") {\n            arr[i] = 3;\n        }\n      \
    \  else if(str[i] == \"four\") {\n            arr[i] = 4;\n        }\n       \
    \ else if(str[i] == \"five\") {\n            arr[i] = 5;\n        }\n        else\
    \ if(str[i] == \"six\") {\n            arr[i] = 6;\n        }\n        else if(str[i]\
    \ == \"seven\") {\n            arr[i] = 7;\n        }\n        else if(str[i]\
    \ == \"eight\") {\n            arr[i] = 8;\n        }\n        else if(str[i]\
    \ == \"nine\") {\n            arr[i] = 9;\n        }\n    }\n    std::sort(arr,\
    \ arr + count);\n    std::string str1 = \"\";\n    for(int i = 0; i < count; i++)\
    \ {\n        if(arr[i] == 0) {\n            str1 += \"zero \";\n        }\n  \
    \      else if(arr[i] == 1) {\n            str1 += \"one \";\n        }\n    \
    \    else if(arr[i] == 2) {\n            str1 += \"two \";\n        }\n      \
    \  else if(arr[\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiacsy8hk.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpiacsy8hk.cpp:68:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   68 | }\n      | ^\n/tmp/tmpiacsy8hk.cpp:67:21: error: expected\
    \ \u2018]\u2019 before \u2018}\u2019 token\n   67 |         else if(arr[\n   \
    \   |                     ^\n      |                     ]\n   68 | }\n      |\
    \ ~                    \n/tmp/tmpiacsy8hk.cpp:67:21: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n   67 |         else if(arr[\n      |          \
    \      ~    ^\n      |                     )\n   68 | }\n      | ~           \
    \         \n/tmp/tmpiacsy8hk.cpp:68:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   68 | }\n      | ^\n/tmp/tmpiacsy8hk.cpp:69:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   69\
    \ | int main() {\n      |            ^\n/tmp/tmpiacsy8hk.cpp:76:1: error: expected\
    \ \u2018}\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmpiacsy8hk.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpiacsy8hk.cpp:76:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   76 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115004
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tint sz = 0;\n\tif (numbers == \"\")\n\t\treturn \"\";\n\tfor (int i = 0;\
    \ i < numbers.size(); i++) {\n\t\tif (numbers[i] == ' ')\n\t\t\tsz++;\n\t}\n\t\
    std::string arr[sz + 1];\n\tstd::string s = \"\";\n\tint count = 0;\n\tfor (int\
    \ i = 0; i < numbers.size(); i++) {\n\t\tif (numbers[i] == ' ') {\n\t\t\tarr[count]\
    \ = s;\n\t\t\tcount++;\n\t\t\ts = \"\";\n\t\t}\n\t\telse {\n\t\t\ts += numbers[i];\n\
    \t\t}\n\t}\n\tarr[count] = s;\n\tfor (int i = 0; i < sz + 1; i++) {\n\t\tif (arr[i]\
    \ == \"zero\")\n\t\t\tarr[i] = \"0\";\n\t\telse if (arr[i] == \"one\")\n\t\t\t\
    arr[i] = \"1\";\n\t\telse if (arr[i] == \"two\")\n\t\t\tarr[i] = \"2\";\n\t\t\
    else if (arr[i] == \"three\")\n\t\t\tarr[i] = \"3\";\n\t\telse if (arr[i] == \"\
    four\")\n\t\t\tarr[i] = \"4\";\n\t\telse if (arr[i] == \"five\")\n\t\t\tarr[i]\
    \ = \"5\";\n\t\telse if (arr[i] == \"six\")\n\t\t\tarr[i] = \"6\";\n\t\telse if\
    \ (arr[i] == \"seven\")\n\t\t\tarr[i] = \"7\";\n\t\telse if (arr[i] == \"eight\"\
    )\n\t\t\tarr[i] = \"8\";\n\t\telse if (arr[i] == \"nine\")\n\t\t\tarr[i] = \"\
    9\";\n\t}\n\tfor (int i = 0; i < sz + 1; i++) {\n\t\tfor (int j = i + 1; j < sz\
    \ + 1; j++) {\n\t\t\t\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppf4es2m3.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmppf4es2m3.cpp:56:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   56 | int main() {\n      |            ^\n/tmp/tmppf4es2m3.cpp:63:1:\
    \ error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppf4es2m3.cpp:52:35:\
    \ note: to match this \u2018{\u2019\n   52 |  for (int i = 0; i < sz + 1; i++)\
    \ {\n      |                                   ^\n/tmp/tmppf4es2m3.cpp:63:1: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppf4es2m3.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmppf4es2m3.cpp:63:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660115004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> words;\n    std::vector<int> digit_map = {0,1,2,3,4,5,6,7,8,9};\n\
    \    std::unordered_map<std::string, int> num_map = {{\"zero\",0},{\"one\",1},{\"\
    two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"\
    eight\",8},{\"nine\",9}};\n    std::istringstream ss(numbers);\n    std::string\
    \ str;\n    while(ss >> str) {\n        words.push_back(str);\n    }\n    std::sort(words.begin(),\
    \ words.end(), [&](std::string a, std::string b) {return num_map[a] < num_map[b];});\n\
    \    std::stringstream out;\n    for(auto word : words) {\n        out << word\
    \ << \" \";\n    }\n    return out.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpxzkz6ro5: /tmp/tmpxzkz6ro5.cpp:27: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    int arr[10] = {0};\n    std::stringstream ss(numbers);\n    std::string\
    \ word;\n    while (ss >> word) {\n        arr[word.length()]++;\n    }\n    std::string\
    \ result = \"\";\n    for (int i = 0; i < 10; i++) {\n        if (arr[i] != 0)\
    \ {\n            for (int j = 0; j < arr[i]; j++) {\n                switch (i)\
    \ {\n                    case 3: result += \"three \"; break;\n              \
    \      case 4: result += \"four \"; break;\n                    case 5: result\
    \ += \"five \"; break;\n                    case 6: result += \"six \"; break;\n\
    \                    case 7: result += \"seven \"; break;\n                  \
    \  case 8: result += \"eight \"; break;\n                    case 9: result +=\
    \ \"nine \"; break;\n                    case 1: result += \"one \"; break;\n\
    \                    case 2: result += \"two \"; break;\n                    case\
    \ 0: result += \"zero \"; break;\n                }\n            }\n        }\n\
    \    }\n    return result.substr(0, result.length() - 1);\n}\nint main() {\n \
    \   auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpwnxefn3q: /tmp/tmpwnxefn3q.cpp:39: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tint count = 0;\n\tchar buffer[numbers.length()];\n\tfor (int i = 0; i <\
    \ numbers.length(); i++) {\n\t\tif (numbers[i] == ' ') {\n\t\t\tcount++;\n\t\t\
    }\n\t}\n\tstd::vector<std::string> elements;\n\tfor (int i = 0; i < count + 1;\
    \ i++) {\n\t\tstd::string str = \"\";\n\t\tfor (int j = 0; j < numbers.length();\
    \ j++) {\n\t\t\tif (numbers[j] == ' ') {\n\t\t\t\telements.push_back(str);\n\t\
    \t\t\tstr = \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstr += numbers[j];\n\t\t\t}\n\
    \t\t}\n\t\telements.push_back(str);\n\t}\n\tfor (int i = 0; i < elements.size();\
    \ i++) {\n\t\telements[i] = getNumber(elements[i]);\n\t}\n\tsort(elements.begin(),\
    \ elements.end());\n\tfor (int i = 0; i < elements.size(); i++) {\n\t\telements[i]\
    \ = getWord(elements[i]);\n\t}\n\tfor (int i = 0; i < elements.size(); i++) {\n\
    \t\tif (i == elements.size() - 1) {\n\t\t\tnumbers = numbers + elements[i];\n\t\
    \t}\n\t\telse {\n\t\t\tnumbers = numbers + elements[i] + \" \";\n\t\t}\n\t}\n\t\
    return numbers;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf618ssjq.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpf618ssjq.cpp:31:17: error: \u2018getNumber\u2019 was not declared in\
    \ this scope\n   31 |   elements[i] = getNumber(elements[i]);\n      |       \
    \          ^~~~~~~~~\n/tmp/tmpf618ssjq.cpp:35:17: error: \u2018getWord\u2019 was\
    \ not declared in this scope\n   35 |   elements[i] = getWord(elements[i]);\n\
    \      |                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660115004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // Split by spaces into a vector\n    std::istringstream ss(numbers);\n\
    \    std::vector<std::string> split;\n    std::string temp;\n    while (ss >>\
    \ temp) {\n        split.push_back(temp);\n    }\n    std::sort(split.begin(),\
    \ split.end());\n    std::string ret;\n    for (int i = 0; i < split.size(); i++)\
    \ {\n        ret += split[i];\n        if (i != split.size() - 1) {\n        \
    \    ret += \" \";\n        }\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp19mnmrno: /tmp/tmp19mnmrno.cpp:30: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::stringstream str(numbers);\n  std::string temp;\n  std::vector<int>\
    \ vec;\n  std::map<std::string, int> mymap;\n  mymap[\"zero\"] = 0;\n  mymap[\"\
    one\"] = 1;\n  mymap[\"two\"] = 2;\n  mymap[\"three\"] = 3;\n  mymap[\"four\"\
    ] = 4;\n  mymap[\"five\"] = 5;\n  mymap[\"six\"] = 6;\n  mymap[\"seven\"] = 7;\n\
    \  mymap[\"eight\"] = 8;\n  mymap[\"nine\"] = 9;\n  while(str >> temp) {\n   \
    \ vec.push_back(mymap[temp]);\n  }\n  sort(vec.begin(), vec.end());\n  std::string\
    \ ans;\n  std::map<int, std::string> mymap2;\n  mymap2[0] = \"zero\";\n  mymap2[1]\
    \ = \"one\";\n  mymap2[2] = \"two\";\n  mymap2[3] = \"three\";\n  mymap2[4] =\
    \ \"four\";\n  mymap2[5] = \"five\";\n  mymap2[6] = \"six\";\n  mymap2[7] = \"\
    seven\";\n  mymap2[8] = \"eight\";\n  mymap2[9] = \"nine\";\n  for(int i = 0;\
    \ i < vec.size(); i++) {\n    ans += mymap2[vec[i]] + \" \";\n  }\n  ans.pop_back();\n\
    \  return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpo2wb3pkg: /tmp/tmpo2wb3pkg.cpp:47: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115006
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream numbers_stream(numbers);\n    std::vector<int> result;\n\
    \    std::string temp;\n    while (numbers_stream >> temp) {\n        std::cout\
    \ << temp << std::endl;\n        if (temp == \"zero\") {\n            result.push_back(0);\n\
    \        } else if (temp == \"one\") {\n            result.push_back(1);\n   \
    \     } else if (temp == \"two\") {\n            result.push_back(2);\n      \
    \  } else if (temp == \"three\") {\n            result.push_back(3);\n       \
    \ } else if (temp == \"four\") {\n            result.push_back(4);\n        }\
    \ else if (temp == \"five\") {\n            result.push_back(5);\n        } else\
    \ if (temp == \"six\") {\n            result.push_back(6);\n        } else if\
    \ (temp == \"seven\") {\n            result.push_back(7);\n        } else if (temp\
    \ == \"eight\") {\n            result.push_back(8);\n        } else if (temp ==\
    \ \"nine\") {\n            result.push_back(9);\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    std::stringstream output;\n    for (int i = 0; i < result.size();\
    \ i++) {\n        output << result[i] << \" \";\n    }\n    return output.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpriqiniza: /tmp/tmpriqiniza.cpp:46: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: 'three

    '
  timestamp: 1660115005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  // your code here\n  std::vector<std::string> words;\n  std::stringstream\
    \ ss(numbers);\n  while(ss.good()) {\n    std::string word;\n    ss >> word;\n\
    \    words.push_back(word);\n  }\n  std::map<std::string, int> num_map = {{\"\
    zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\"\
    , 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n  std::vector<int>\
    \ nums;\n  for(int i = 0; i < words.size(); i++) {\n    int num = num_map[words[i]];\n\
    \    nums.push_back(num);\n  }\n  std::sort(nums.begin(), nums.end());\n  std::vector<std::string>\
    \ sorted_words;\n  for(int i = 0; i < nums.size(); i++) {\n    for(auto &it :\
    \ num_map) {\n      if(it.second == nums[i]) {\n        sorted_words.push_back(it.first);\n\
    \      }\n    }\n  }\n  std::string sorted_numbers;\n  for(int i = 0; i < sorted_words.size();\
    \ i++) {\n    sorted_numbers += sorted_words[i];\n    if(i != sorted_words.size()\
    \ - 1) {\n      sorted_numbers += \" \";\n    }\n  }\n  return sorted_numbers;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmphfziw28a: /tmp/tmphfziw28a.cpp:43: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::map<std::string, int> myMap;\n  myMap[\"zero\"] = 0;\n  myMap[\"one\"\
    ] = 1;\n  myMap[\"two\"] = 2;\n  myMap[\"three\"] = 3;\n  myMap[\"four\"] = 4;\n\
    \  myMap[\"five\"] = 5;\n  myMap[\"six\"] = 6;\n  myMap[\"seven\"] = 7;\n  myMap[\"\
    eight\"] = 8;\n  myMap[\"nine\"] = 9;\n  std::istringstream ss(numbers);\n  std::string\
    \ a = \"\";\n  std::vector<int> myVec;\n  while(ss >> a)\n  {\n    myVec.push_back(myMap[a]);\n\
    \  }\n  std::sort(myVec.begin(), myVec.end());\n  std::map<int, std::string> newMap;\n\
    \  newMap[0] = \"zero\";\n  newMap[1] = \"one\";\n  newMap[2] = \"two\";\n  newMap[3]\
    \ = \"three\";\n  newMap[4] = \"four\";\n  newMap[5] = \"five\";\n  newMap[6]\
    \ = \"six\";\n  newMap[7] = \"seven\";\n  newMap[8] = \"eight\";\n  newMap[9]\
    \ = \"nine\";\n  std::string result = \"\";\n  for(int i=0; i<myVec.size(); i++)\n\
    \  {\n    result = result + newMap[myVec[i]] + \" \";\n  }\n  result.pop_back();\n\
    \  return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp9k8yhxq1: /tmp/tmp9k8yhxq1.cpp:49: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115006
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> Ns;\n\tstd::stringstream ss(numbers);\n\tstd::string temp;\n\
    \tint i;\n\twhile (ss >> temp) {\n\t\tif (temp == \"zero\")\n\t\t\ti = 0;\n\t\t\
    else if (temp == \"one\")\n\t\t\ti = 1;\n\t\telse if (temp == \"two\")\n\t\t\t\
    i = 2;\n\t\telse if (temp == \"three\")\n\t\t\ti = 3;\n\t\telse if (temp == \"\
    four\")\n\t\t\ti = 4;\n\t\telse if (temp == \"five\")\n\t\t\ti = 5;\n\t\telse\
    \ if (temp == \"six\")\n\t\t\ti = 6;\n\t\telse if (temp == \"seven\")\n\t\t\t\
    i = 7;\n\t\telse if (temp == \"eight\")\n\t\t\ti = 8;\n\t\telse if (temp == \"\
    nine\")\n\t\t\ti = 9;\n\t\telse\n\t\t\treturn \"Not Valid Input\";\n\t\tNs.push_back(i);\n\
    \t}\n\tstd::sort(Ns.begin(), Ns.end());\n\ttemp = \"\";\n\tfor (i = 0; i < Ns.size();\
    \ i++) {\n\t\tif (Ns[i] == 0)\n\t\t\ttemp += \"zero \";\n\t\telse if (Ns[i] ==\
    \ 1)\n\t\t\ttemp += \"one \";\n\t\telse if (Ns[i] == 2)\n\t\t\ttemp += \"two \"\
    ;\n\t\telse if (Ns[i] == 3)\n\t\t\ttemp += \"three \";\n\t\telse if (Ns[i] ==\
    \ 4)\n\t\t\ttemp += \"four \";\n\t\telse if (Ns[i] == 5)\n\t\t\ttemp += \"five\
    \ \";\n\t\telse if (Ns[i] == 6)\n\t\t\ttemp += \"six \";\n\t\telse if (Ns[i] ==\
    \ 7)\n\t\t\ttemp += \"seven \";\n\t\telse if (Ns[i] == 8)\n\t\t\ttemp += \"eight\
    \ \";\n\t\telse if (Ns\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsuki2a9b.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpsuki2a9b.cpp:59:14: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   59 |   else if (Ns\n      |           ~  ^\n      |              )\n\
    \   60 | }\n      | ~             \n/tmp/tmpsuki2a9b.cpp:59:12: error: could not\
    \ convert \u2018Ns\u2019 from \u2018std::vector<int>\u2019 to \u2018bool\u2019\
    \n   59 |   else if (Ns\n      |            ^~\n      |            |\n      |\
    \            std::vector<int>\n/tmp/tmpsuki2a9b.cpp:60:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmpsuki2a9b.cpp:61:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   61 | int main() {\n      |            ^\n/tmp/tmpsuki2a9b.cpp:68:1: error:\
    \ expected \u2018}\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmpsuki2a9b.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpsuki2a9b.cpp:68:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   68 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660115005
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::string result = \"\";\n  std::vector<int> numlist;\n  std::string\
    \ num = \"\";\n  for (int i = 0; i < numbers.length(); i++) {\n    if (numbers[i]\
    \ == ' ') {\n      if (num == \"zero\") {\n        numlist.push_back(0);\n   \
    \   } else if (num == \"one\") {\n        numlist.push_back(1);\n      } else\
    \ if (num == \"two\") {\n        numlist.push_back(2);\n      } else if (num ==\
    \ \"three\") {\n        numlist.push_back(3);\n      } else if (num == \"four\"\
    ) {\n        numlist.push_back(4);\n      } else if (num == \"five\") {\n    \
    \    numlist.push_back(5);\n      } else if (num == \"six\") {\n        numlist.push_back(6);\n\
    \      } else if (num == \"seven\") {\n        numlist.push_back(7);\n      }\
    \ else if (num == \"eight\") {\n        numlist.push_back(8);\n      } else if\
    \ (num == \"nine\") {\n        numlist.push_back(9);\n      }\n      num = \"\"\
    ;\n    } else {\n      num += numbers[i];\n    }\n  }\n  std::sort(numlist.begin(),\
    \ numlist.end());\n  for (int i = 0; i < numlist.size(); i++) {\n    if (numlist[i]\
    \ == 0) {\n      result += \"zero \";\n    } else if (numlist[i] == 1) {\n   \
    \   result += \"one \";\n    } else if (numlist[i] == 2) {\n      result += \"\
    two \";\n    } else if (numlist[i] == 3) {\n      result += \"three \";\n    }\
    \ else if (numlist[i] == 4) {\n      result += \"four \";\n    } else if (numlist[i]\
    \ == 5) {\n      result += \"five \";\n    } else if (numlist[i] == 6) {\n   \
    \   result += \"six \";\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1cyvn10d.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp1cyvn10d.cpp:58:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   58 | int main() {\n      |            ^\n/tmp/tmp1cyvn10d.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmp1cyvn10d.cpp:41:44:\
    \ note: to match this \u2018{\u2019\n   41 |   for (int i = 0; i < numlist.size();\
    \ i++) {\n      |                                            ^\n/tmp/tmp1cyvn10d.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmp1cyvn10d.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp1cyvn10d.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // your code here\n    std::map<std::string,int> str_num;\n    std::vector<std::string>\
    \ res;\n    int num;\n    std::stringstream ss(numbers);\n    std::string word;\n\
    \    while(ss>>word){\n        str_num[word] = num;\n        num++;\n    }\n \
    \   std::map<std::string,int>::iterator itr;\n    std::vector<int> temp;\n   \
    \ for(itr = str_num.begin();itr!=str_num.end();itr++){\n        temp.push_back(itr->second);\n\
    \    }\n    std::sort(temp.begin(),temp.end());\n    for(int i=0;i<temp.size();i++){\n\
    \        for(itr = str_num.begin();itr!=str_num.end();itr++){\n            if(itr->second\
    \ == temp[i]){\n                res.push_back(itr->first);\n            }\n  \
    \      }\n    }\n    std::string answer;\n    for(int i=0;i<res.size();i++){\n\
    \        answer += res[i] + \" \";\n    }\n    answer.pop_back();\n    return\
    \ answer;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpx57ryq7v: /tmp/tmpx57ryq7v.cpp:41: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string res;\n    std::stringstream str_stream(numbers);\n    std::vector<int>\
    \ arr;\n    std::string value;\n    while(str_stream >> value) {\n        if(value\
    \ == \"zero\") {\n            arr.push_back(0);\n        }\n        else if(value\
    \ == \"one\") {\n            arr.push_back(1);\n        }\n        else if(value\
    \ == \"two\") {\n            arr.push_back(2);\n        }\n        else if(value\
    \ == \"three\") {\n            arr.push_back(3);\n        }\n        else if(value\
    \ == \"four\") {\n            arr.push_back(4);\n        }\n        else if(value\
    \ == \"five\") {\n            arr.push_back(5);\n        }\n        else if(value\
    \ == \"six\") {\n            arr.push_back(6);\n        }\n        else if(value\
    \ == \"seven\") {\n            arr.push_back(7);\n        }\n        else if(value\
    \ == \"eight\") {\n            arr.push_back(8);\n        }\n        else if(value\
    \ == \"nine\") {\n            arr.push_back(9);\n        }\n    }\n    std::sort(arr.begin(),\
    \ arr.end());\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] ==\
    \ 0) {\n            res += \"zero \";\n        }\n        else if(arr[i] == 1)\
    \ {\n            res += \"one \";\n        }\n        else if(arr[i] == 2) {\n\
    \            res += \"two \";\n        }\n        else if(arr[i] == 3) {\n   \
    \         res += \"three \";\n        }\n        else if(arr[i] == 4) {\n    \
    \        res += \"four \";\n        }\n        else if(arr[i] == 5) {\n      \
    \      res += \"five \";\n        }\n        else if(arr[i] == 6) {\n        \
    \    res += \"six \";\n        }\n        else if(arr[i] == 7) {\n           \
    \ res += \"seven \";\n       \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c8s76qb.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8c8s76qb.cpp:72:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   72 | int main() {\n      |            ^\n/tmp/tmp8c8s76qb.cpp:79:1:\
    \ error: expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmp8c8s76qb.cpp:46:41:\
    \ note: to match this \u2018{\u2019\n   46 |     for(int i = 0; i < arr.size();\
    \ i++) {\n      |                                         ^\n/tmp/tmp8c8s76qb.cpp:79:1:\
    \ error: expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmp8c8s76qb.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp8c8s76qb.cpp:79:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   79 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115004
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    int arr[10] = {0};\n    int count = 0;\n    char words[1000];\n    strcpy(words,\
    \ numbers.c_str());\n    char *token = strtok(words, \" \");\n    while (token\
    \ != NULL) {\n        if (strcmp(token, \"zero\") == 0) {\n            arr[0]\
    \ += 1;\n        } else if (strcmp(token, \"one\") == 0) {\n            arr[1]\
    \ += 1;\n        } else if (strcmp(token, \"two\") == 0) {\n            arr[2]\
    \ += 1;\n        } else if (strcmp(token, \"three\") == 0) {\n            arr[3]\
    \ += 1;\n        } else if (strcmp(token, \"four\") == 0) {\n            arr[4]\
    \ += 1;\n        } else if (strcmp(token, \"five\") == 0) {\n            arr[5]\
    \ += 1;\n        } else if (strcmp(token, \"six\") == 0) {\n            arr[6]\
    \ += 1;\n        } else if (strcmp(token, \"seven\") == 0) {\n            arr[7]\
    \ += 1;\n        } else if (strcmp(token, \"eight\") == 0) {\n            arr[8]\
    \ += 1;\n        } else if (strcmp(token, \"nine\") == 0) {\n            arr[9]\
    \ += 1;\n        }\n        token = strtok(NULL, \" \");\n    }\n    for (int\
    \ i = 0; i < 10; i++) {\n        for (int j = 0; j < arr[i]; j++) {\n        \
    \    std::cout << i << \" \";\n        }\n    }\n    return \" \";\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpwrcuekok: /tmp/tmpwrcuekok.cpp:47: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n   std::vector<std::string> words;\n   words.reserve(11);\n   words = {\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"};\n   std::string word;\n   std::string sorted_numbers = \"\"\
    ;\n   std::stringstream ss;\n   ss << numbers;\n   int i, k;\n   int count[10]\
    \ = {0};\n   while (ss >> word) {\n      for (i = 0; i < 10; i++) {\n        \
    \ if (word == words[i]) {\n            count[i]++;\n         }\n      }\n   }\n\
    \   for (i = 0; i < 10; i++) {\n      for (k = 0; k < count[i]; k++) {\n     \
    \    sorted_numbers += words[i] + \" \";\n      }\n   }\n   sorted_numbers.pop_back();\n\
    \   return sorted_numbers;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp6bz65tlt: /tmp/tmp6bz65tlt.cpp:35: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::map<std::string, int> m;\n\tm[\"zero\"] = 0;\n\tm[\"one\"] = 1;\n\t\
    m[\"two\"] = 2;\n\tm[\"three\"] = 3;\n\tm[\"four\"] = 4;\n\tm[\"five\"] = 5;\n\
    \tm[\"six\"] = 6;\n\tm[\"seven\"] = 7;\n\tm[\"eight\"] = 8;\n\tm[\"nine\"] = 9;\n\
    \tstd::stringstream ss(numbers);\n\tstd::string tmp;\n\tstd::vector<int> v;\n\t\
    while (ss >> tmp) {\n\t\tv.push_back(m[tmp]);\n\t}\n\tstd::sort(v.begin(), v.end());\n\
    \tstd::string answer;\n\tfor (auto i : v) {\n\t\tif (answer.size() > 0) {\n\t\t\
    \tanswer += \" \";\n\t\t}\n\t\tif (i == 0) {\n\t\t\tanswer += \"zero\";\n\t\t\
    }\n\t\telse if (i == 1) {\n\t\t\tanswer += \"one\";\n\t\t}\n\t\telse if (i ==\
    \ 2) {\n\t\t\tanswer += \"two\";\n\t\t}\n\t\telse if (i == 3) {\n\t\t\tanswer\
    \ += \"three\";\n\t\t}\n\t\telse if (i == 4) {\n\t\t\tanswer += \"four\";\n\t\t\
    }\n\t\telse if (i == 5) {\n\t\t\tanswer += \"five\";\n\t\t}\n\t\telse if (i ==\
    \ 6) {\n\t\t\tanswer += \"six\";\n\t\t}\n\t\telse if (i == 7) {\n\t\t\tanswer\
    \ += \"seven\";\n\t\t}\n\t\telse if (i == 8) {\n\t\t\tanswer += \"eight\";\n\t\
    \t}\n\t\telse if (i == 9) {\n\t\t\tanswer += \"nine\";\n\t\t}\n\t}\n\treturn answer;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115005
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> numToIntMap = {\n        {\"zero\", 0},\n\
    \        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n     \
    \   {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"\
    seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<int>\
    \ numVec;\n    // std::vector<std::string> numStrVec;\n    std::stringstream ss(numbers);\n\
    \    std::string tmp;\n    while (std::getline(ss, tmp, ' ')) {\n        // std::cout\
    \ << tmp << \" \";\n        numVec.push_back(numToIntMap[tmp]);\n        // numStrVec.push_back(tmp);\n\
    \    }\n    // std::cout << std::endl;\n    std::sort(numVec.begin(), numVec.end());\n\
    \    std::string ans;\n    // std::reverse(numVec.begin(), numVec.end());\n  \
    \  // for (auto &i : numVec) {\n    //     std::cout << i << \" \";\n    // }\n\
    \    // std::cout << std::endl;\n    for (auto &n : numVec) {\n        for (auto\
    \ &i : numToIntMap) {\n            if (i.second == n) {\n                ans +=\
    \ i.first + \" \";\n                break;\n            }\n        }\n    }\n\
    \    return ans.substr(0, ans.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115005
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::unordered_map<std::string, int> map = { {\"zero\", 0}, {\"one\", 1},\
    \ {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"\
    seven\", 7}, {\"eight\", 8}, {\"nine\", 9} };\n\tstd::vector<int> v;\n\tstd::stringstream\
    \ ss(numbers);\n\tstd::string temp;\n\twhile (ss >> temp)\n\t\tv.push_back(map[temp]);\n\
    \tstd::sort(v.begin(), v.end());\n\tstd::string ans;\n\tfor (int i = 0; i < v.size();\
    \ i++) {\n\t\tfor (auto it : map) {\n\t\t\tif (it.second == v[i]) {\n\t\t\t\t\
    ans += it.first;\n\t\t\t\tans += \" \";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn ans.substr(0, ans.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115005
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // Write your code here\n    std::vector<std::string> num_vector;\n \
    \   std::istringstream stream(numbers);\n    std::string word;\n    while(stream\
    \ >> word)\n        num_vector.push_back(word);\n    std::sort(num_vector.begin(),\
    \ num_vector.end(), [](std::string a, std::string b){\n        std::map<std::string,\
    \ int> number_map = {{\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3},\
    \ {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8},\
    \ {\"nine\", 9}};\n        return number_map[a] < number_map[b];\n    });\n  \
    \  std::string output = \"\";\n    for(auto i : num_vector)\n        output +=\
    \ i + \" \";\n    return output.substr(0, output.size() - 1);\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115005
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n    std::stringstream\
    \ ss(numbers);\n    std::string token;\n    while (ss >> token) {\n        if\
    \ (token == \"zero\") {\n            nums[0]++;\n        } else if (token == \"\
    one\") {\n            nums[1]++;\n        } else if (token == \"two\") {\n   \
    \         nums[2]++;\n        } else if (token == \"three\") {\n            nums[3]++;\n\
    \        } else if (token == \"four\") {\n            nums[4]++;\n        } else\
    \ if (token == \"five\") {\n            nums[5]++;\n        } else if (token ==\
    \ \"six\") {\n            nums[6]++;\n        } else if (token == \"seven\") {\n\
    \            nums[7]++;\n        } else if (token == \"eight\") {\n          \
    \  nums[8]++;\n        } else if (token == \"nine\") {\n            nums[9]++;\n\
    \        }\n    }\n    std::string res = \"\";\n    for (int i = 0; i < 10; i++)\
    \ {\n        for (int j = 0; j < nums[i]; j++) {\n            if (i == 0) {\n\
    \                res += \"zero \";\n            } else if (i == 1) {\n       \
    \         res += \"one \";\n            } else if (i == 2) {\n               \
    \ res += \"two \";\n            } else if (i == 3) {\n                res += \"\
    three \";\n            } else if (i == 4) {\n                res += \"four \"\
    ;\n            } else if (i == 5) {\n                res += \"five \";\n     \
    \       } else if (i == 6) {\n                res += \"six \";\n            }\
    \ else if (i == 7) {\n                res += \"seven \";\n            } else if\
    \ (i == 8) {\n                res += \"eight \";\n            } else if (i ==\
    \ 9) {\n                res += \"nine \";\n            }\n        }\n    }\n \
    \   return res.substr(\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8zhqrps.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpj8zhqrps.cpp:62:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   62 | }\n      | ^\n/tmp/tmpj8zhqrps.cpp:61:23: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   61 |     return res.substr(\n \
    \     |                       ^\n      |                       ;\n   62 | }\n\
    \      | ~                      \n"
  stdout: ''
  timestamp: 1660115005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    assert(false);\n    return \"\";\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp9wjs4g3h: /tmp/tmp9wjs4g3h.cpp:9: std::string sort_numbers(std::string):
    Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660115005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream iss(numbers);\n    std::vector<std::string> num;\n\
    \    std::string temp;\n    while(iss >> temp)\n        num.push_back(temp);\n\
    \    std::sort(num.begin(), num.end());\n    std::string result = \"\";\n    for(auto\
    \ i : num)\n        result += i + \" \";\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpj7nsefha: /tmp/tmpj7nsefha.cpp:24: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660115006
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tint i = 0;\n\tint j = 0;\n\tint count = 0;\n\tint size;\n\tint num = 0;\n\
    \tint index = 0;\n\tstd::string token;\n\tstd::string myStr = numbers;\n\tstd::string\
    \ sortedStr = \"\";\n\tchar const *delim = \" \";\n\tchar *token2;\n\tchar* myStr2\
    \ = new char[myStr.length() + 1];\n\tstrcpy(myStr2, myStr.c_str());\n\ttoken2\
    \ = strtok(myStr2, delim);\n\twhile (token2 != NULL) {\n\t\tcount++;\n\t\ttoken2\
    \ = strtok(NULL, delim);\n\t}\n\ttoken2 = strtok(myStr2, delim);\n\tint* nums\
    \ = new int[count];\n\twhile (token2 != NULL) {\n\t\tif (strcmp(token2, \"zero\"\
    ) == 0) {\n\t\t\tnum = 0;\n\t\t}\n\t\telse if (strcmp(token2, \"one\") == 0) {\n\
    \t\t\tnum = 1;\n\t\t}\n\t\telse if (strcmp(token2, \"two\") == 0) {\n\t\t\tnum\
    \ = 2;\n\t\t}\n\t\telse if (strcmp(token2, \"three\") == 0) {\n\t\t\tnum = 3;\n\
    \t\t}\n\t\telse if (strcmp(token2, \"four\") == 0) {\n\t\t\tnum = 4;\n\t\t}\n\t\
    \telse if (strcmp(token2, \"five\") == 0) {\n\t\t\tnum = 5;\n\t\t}\n\t\telse if\
    \ (strcmp(token2, \"six\") == 0) {\n\t\t\tnum = 6;\n\t\t}\n\t\telse if (strcmp(token2,\
    \ \"seven\") == 0) {\n\t\t\tnum = 7;\n\t\t}\n\t\telse if (strcmp(token2, \"eight\"\
    ) == 0) {\n\t\t\tnum = 8;\n\t\t}\n\t\telse if (strcmp(token2, \"nine\") == 0)\
    \ {\n\t\t\tnum = 9;\n\t\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3e9_6y6.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpp3e9_6y6.cpp:61:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   61 | int main() {\n      |            ^\n/tmp/tmpp3e9_6y6.cpp:68:1:\
    \ error: expected \u2018}\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmpp3e9_6y6.cpp:29:25:\
    \ note: to match this \u2018{\u2019\n   29 |  while (token2 != NULL) {\n     \
    \ |                         ^\n/tmp/tmpp3e9_6y6.cpp:68:1: error: expected \u2018\
    }\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmpp3e9_6y6.cpp:8:47: note:\
    \ to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers)\
    \ {\n      |                                               ^\n/tmp/tmpp3e9_6y6.cpp:68:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   68 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660115005
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\t// create a list of numbers\n\tstd::vector<int> numbers_list;\n\t// create\
    \ a map of string-int pairs\n\tstd::map<std::string, int> num_map = {\n\t\t{\"\
    zero\", 0},\n\t\t{\"one\", 1},\n\t\t{\"two\", 2},\n\t\t{\"three\", 3},\n\t\t{\"\
    four\", 4},\n\t\t{\"five\", 5},\n\t\t{\"six\", 6},\n\t\t{\"seven\", 7},\n\t\t\
    {\"eight\", 8},\n\t\t{\"nine\", 9}\n\t};\n\t// create a stringstream from the\
    \ input string\n\tstd::stringstream ss(numbers);\n\t// create a string variable\
    \ to store each parsed number\n\tstd::string num;\n\t// store the parsed string\
    \ into number list\n\twhile (ss >> num) {\n\t\tnumbers_list.push_back(num_map[num]);\n\
    \t}\n\t// sort the list in ascending order\n\tstd::sort(numbers_list.begin(),\
    \ numbers_list.end());\n\t// create a stringstream object\n\tstd::stringstream\
    \ sorted_numbers;\n\t// create an iterator to the numbers list\n\tstd::vector<int>::iterator\
    \ it;\n\t// create a map iterator to look up the string representation of each\
    \ number\n\tstd::map<std::string, int>::iterator it_map;\n\t// iterate over the\
    \ list and use map iterator to lookup the string values\n\tfor (it = numbers_list.begin();\
    \ it != numbers_list.end(); it++) {\n\t\tit_map = num_map.begin();\n\t\t// use\
    \ the iterator to move to the corresponding string value\n\t\tstd::advance(it_map,\
    \ *it);\n\t\t// add the string value to the stringstream object\n\t\tsorted_numbers\
    \ << it_map->first << \" \";\n\t}\n\t// return the stringstream object as a string\n\
    \treturn sorted_numbers.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpsnj1i_jm: /tmp/tmpsnj1i_jm.cpp:54: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115006
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> s;\n    int len = numbers.length();\n    int\
    \ start_index = 0;\n    for(int i = 0; i < len; i++) {\n        if(numbers[i]\
    \ == ' ') {\n            s.push_back(numbers.substr(start_index, i - start_index));\n\
    \            start_index = i + 1;\n        }\n    }\n    if(numbers[len - 1] !=\
    \ ' ')\n        s.push_back(numbers.substr(start_index, len - start_index));\n\
    \    sort(s.begin(), s.end());\n    std::string result = \"\";\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        result = result + s[i] + \" \";\n    }\n\
    \    return result.substr(0, result.length() - 1);\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpss_933_p: /tmp/tmpss_933_p.cpp:31: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660115006
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> myList = {3, 1, 5};\n    std::sort(myList.begin(), myList.end());\n\
    \    int i = 0;\n    std::stringstream ss;\n    while (i < myList.size()) {\n\
    \        ss << myList[i];\n        if (i != myList.size() - 1)\n            ss\
    \ << \" \";\n        i++;\n    }\n    return ss.str();\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpiw7doh0l: /tmp/tmpiw7doh0l.cpp:23: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115006
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::string answer = \"\";\n\tstd::istringstream ss(numbers);\n\tstd::vector<std::string>\
    \ tokens;\n\tstd::string token;\n\tstd::vector<int> integer_values;\n\tstd::string\
    \ value;\n\twhile (std::getline(ss, token, ' ')) {\n\t\ttokens.push_back(token);\n\
    \t}\n\tfor (int i = 0; i < tokens.size(); i++) {\n\t\tvalue = tokens[i];\n\t\t\
    if (value == \"zero\") {\n\t\t\tinteger_values.push_back(0);\n\t\t}\n\t\telse\
    \ if (value == \"one\") {\n\t\t\tinteger_values.push_back(1);\n\t\t}\n\t\telse\
    \ if (value == \"two\") {\n\t\t\tinteger_values.push_back(2);\n\t\t}\n\t\telse\
    \ if (value == \"three\") {\n\t\t\tinteger_values.push_back(3);\n\t\t}\n\t\telse\
    \ if (value == \"four\") {\n\t\t\tinteger_values.push_back(4);\n\t\t}\n\t\telse\
    \ if (value == \"five\") {\n\t\t\tinteger_values.push_back(5);\n\t\t}\n\t\telse\
    \ if (value == \"six\") {\n\t\t\tinteger_values.push_back(6);\n\t\t}\n\t\telse\
    \ if (value == \"seven\") {\n\t\t\tinteger_values.push_back(7);\n\t\t}\n\t\telse\
    \ if (value == \"eight\") {\n\t\t\tinteger_values.push_back(8);\n\t\t}\n\t\telse\
    \ if (value == \"nine\") {\n\t\t\tinteger_values.push_back(9);\n\t\t}\n\t}\n\t\
    std::sort(integer_values.begin(), integer_values.end());\n\tfor (int i = 0; i\
    \ < integer_values.size(); i++) {\n\t\tvalue = std::to_string(integer_values[i]);\n\
    \t\tif (value == \"0\") {\n\t\t\tanswer = answer + \"zero \";\n\t\t}\n\t\telse\
    \ if (value == \"\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk27xc11_.cpp:57:21: warning: missing terminating \" character\n\
    \   57 |   else if (value == \"\n      |                     ^\n/tmp/tmpk27xc11_.cpp:57:21:\
    \ error: missing terminating \" character\n/tmp/tmpk27xc11_.cpp: In function \u2018\
    std::string sort_numbers(std::string)\u2019:\n/tmp/tmpk27xc11_.cpp:58:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   58 | }\n      | ^\n\
    /tmp/tmpk27xc11_.cpp:57:20: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   57 |   else if (value == \"\n      |           ~        ^\n      |\
    \                    )\n   58 | }\n      | ~                   \n/tmp/tmpk27xc11_.cpp:58:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   58 | }\n \
    \     | ^\n/tmp/tmpk27xc11_.cpp:59:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n\
    /tmp/tmpk27xc11_.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66\
    \ | }\n      | ^\n/tmp/tmpk27xc11_.cpp:8:47: note: to match this \u2018{\u2019\
    \n    8 | std::string sort_numbers(std::string numbers) {\n      |           \
    \                                    ^\n/tmp/tmpk27xc11_.cpp:66:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   66 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660115006
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> words;\n    std::istringstream ss(numbers);\n\
    \    std::string temp;\n    while (ss >> temp) {\n        words.push_back(temp);\n\
    \    }\n    std::sort(words.begin(), words.end());\n    std::string joined;\n\
    \    for (auto word : words) {\n        joined += word + \" \";\n    }\n    return\
    \ joined.substr(0, joined.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpz5heqi1h: /tmp/tmpz5heqi1h.cpp:26: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660115007
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> n_list;\n    std::stringstream ss(numbers);\n\
    \    std::string num;\n    while (ss >> num)\n        n_list.push_back(num);\n\
    \    assert(n_list.size() > 0);\n    for (int i = 0; i < n_list.size(); i++) {\n\
    \        assert(n_list[i] == \"zero\" || n_list[i] == \"one\" || n_list[i] ==\
    \ \"two\" || n_list[i] == \"three\" || n_list[i] == \"four\" || n_list[i] == \"\
    five\" || n_list[i] == \"six\" || n_list[i] == \"seven\" || n_list[i] == \"eight\"\
    \ || n_list[i] == \"nine\");\n    }\n    std::map<std::string, int> my_map;\n\
    \    my_map[\"zero\"] = 0;\n    my_map[\"one\"] = 1;\n    my_map[\"two\"] = 2;\n\
    \    my_map[\"three\"] = 3;\n    my_map[\"four\"] = 4;\n    my_map[\"five\"] =\
    \ 5;\n    my_map[\"six\"] = 6;\n    my_map[\"seven\"] = 7;\n    my_map[\"eight\"\
    ] = 8;\n    my_map[\"nine\"] = 9;\n    std::sort(n_list.begin(), n_list.end(),\
    \ [&my_map](std::string a, std::string b) {\n        return my_map[a] < my_map[b];\n\
    \    });\n    std::string output;\n    for (int i = 0; i < n_list.size(); i++)\
    \ {\n        output += n_list[i];\n        if (i != n_list.size() - 1) {\n   \
    \         output += \" \";\n        }\n    }\n    return output;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp920uqkt2: /tmp/tmp920uqkt2.cpp:14: std::string sort_numbers(std::string):
    Assertion `n_list.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660115007
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string nums[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::istringstream\
    \ iss(numbers);\n    std::string temp;\n    std::vector<int> num_ind;\n    int\
    \ curr;\n    while(iss >> temp) {\n        for(int i = 0; i < 10; i++) {\n   \
    \         if(temp == nums[i]) {\n                num_ind.push_back(i);\n     \
    \       }\n        }\n    }\n    std::sort(num_ind.begin(), num_ind.end());\n\
    \    std::string sorted_nums = \"\";\n    for(int i = 0; i < num_ind.size(); i++)\
    \ {\n        sorted_nums += nums[num_ind[i]] + \" \";\n    }\n    return sorted_nums;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpa1tus0me: /tmp/tmpa1tus0me.cpp:31: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115007
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> numberDict = {\n        {\"zero\", 0},\n \
    \       {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n      \
    \  {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"\
    seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::string\
    \ temp = \"\";\n    std::vector<int> numList;\n    std::istringstream iss(numbers);\n\
    \    while(iss >> temp) {\n        numList.push_back(numberDict[temp]);\n    }\n\
    \    sort(numList.begin(), numList.end());\n    std::string result = \"\";\n \
    \   for(auto i: numList) {\n        std::map<int, std::string> reverseDict = {\n\
    \            {0, \"zero\"},\n            {1, \"one\"},\n            {2, \"two\"\
    },\n            {3, \"three\"},\n            {4, \"four\"},\n            {5, \"\
    five\"},\n            {6, \"six\"},\n            {7, \"seven\"},\n           \
    \ {8, \"eight\"},\n            {9, \"nine\"}\n        };\n        result += reverseDict[i]\
    \ + \" \";\n    }\n    return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115007
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    char *token = strtok((char *)numbers.c_str(),\
    \ \" \");\n    while (token != NULL) {\n        if (strcmp(token, \"zero\") ==\
    \ 0) {\n            nums.push_back(0);\n        } else if (strcmp(token, \"one\"\
    ) == 0) {\n            nums.push_back(1);\n        } else if (strcmp(token, \"\
    two\") == 0) {\n            nums.push_back(2);\n        } else if (strcmp(token,\
    \ \"three\") == 0) {\n            nums.push_back(3);\n        } else if (strcmp(token,\
    \ \"four\") == 0) {\n            nums.push_back(4);\n        } else if (strcmp(token,\
    \ \"five\") == 0) {\n            nums.push_back(5);\n        } else if (strcmp(token,\
    \ \"six\") == 0) {\n            nums.push_back(6);\n        } else if (strcmp(token,\
    \ \"seven\") == 0) {\n            nums.push_back(7);\n        } else if (strcmp(token,\
    \ \"eight\") == 0) {\n            nums.push_back(8);\n        } else if (strcmp(token,\
    \ \"nine\") == 0) {\n            nums.push_back(9);\n        }\n        token\
    \ = strtok(NULL, \" \");\n    }\n    std::sort(nums.begin(), nums.end());\n  \
    \  std::string result = \"\";\n    for (auto n : nums) {\n        if (n == 0)\
    \ {\n            result += \"zero \";\n        } else if (n == 1) {\n        \
    \    result += \"one \";\n        } else if (n == 2) {\n            result +=\
    \ \"two \";\n        } else if (n == 3) {\n            result += \"three \";\n\
    \        } else if (n == 4) {\n            result += \"four \";\n        } else\
    \ if (n == 5) {\n            result += \"five \";\n        } else if (n == 6)\
    \ {\n            result +=\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt1hc40gz.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpt1hc40gz.cpp:52:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   52 | }\n      | ^\n/tmp/tmpt1hc40gz.cpp:53:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   53 | int main() {\n     \
    \ |            ^\n/tmp/tmpt1hc40gz.cpp:60:1: error: expected \u2018}\u2019 at\
    \ end of input\n   60 | }\n      | ^\n/tmp/tmpt1hc40gz.cpp:37:25: note: to match\
    \ this \u2018{\u2019\n   37 |     for (auto n : nums) {\n      |             \
    \            ^\n/tmp/tmpt1hc40gz.cpp:60:1: error: expected \u2018}\u2019 at end\
    \ of input\n   60 | }\n      | ^\n/tmp/tmpt1hc40gz.cpp:8:47: note: to match this\
    \ \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n   \
    \   |                                               ^\n/tmp/tmpt1hc40gz.cpp:60:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   60 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115006
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> order = {0, 2, 4, 6, 8, 1, 3, 5, 7, 9};\n    std::map<std::string,\
    \ int> m;\n    m[\"zero\"] = 0;\n    m[\"one\"] = 1;\n    m[\"two\"] = 2;\n  \
    \  m[\"three\"] = 3;\n    m[\"four\"] = 4;\n    m[\"five\"] = 5;\n    m[\"six\"\
    ] = 6;\n    m[\"seven\"] = 7;\n    m[\"eight\"] = 8;\n    m[\"nine\"] = 9;\n \
    \   std::vector<std::string> tokens;\n    std::stringstream ss(numbers);\n   \
    \ std::string temp;\n    while (ss >> temp) {\n        tokens.push_back(temp);\n\
    \    }\n    std::vector<int> nums;\n    for (auto& s : tokens) {\n        nums.push_back(m[s]);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::vector<std::string>\
    \ words = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\"};\n    std::string res;\n    for (auto& n : nums)\
    \ {\n        res += words[n] + \" \";\n    }\n    res.pop_back();\n    return\
    \ res;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpvwviable: /tmp/tmpvwviable.cpp:42: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115007
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::map<std::string, int> dict = {\n\t\t{\"zero\", 0},\n\t\t{\"one\",\
    \ 1},\n\t\t{\"two\", 2},\n\t\t{\"three\", 3},\n\t\t{\"four\", 4},\n\t\t{\"five\"\
    , 5},\n\t\t{\"six\", 6},\n\t\t{\"seven\", 7},\n\t\t{\"eight\", 8},\n\t\t{\"nine\"\
    , 9}\n\t};\n\tstd::stringstream ss(numbers);\n\tstd::string word;\n\tstd::vector<int>\
    \ v;\n\twhile (ss >> word) {\n\t\tv.push_back(dict[word]);\n\t}\n\tstd::sort(v.begin(),\
    \ v.end());\n\tstd::string result;\n\tfor (int i : v) {\n\t\tswitch (i) {\n\t\t\
    case 0:\n\t\t\tresult += \"zero \";\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tresult +=\
    \ \"one \";\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tresult += \"two \";\n\t\t\tbreak;\n\
    \t\tcase 3:\n\t\t\tresult += \"three \";\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tresult\
    \ += \"four \";\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tresult += \"five \";\n\t\t\t\
    break;\n\t\tcase 6:\n\t\t\tresult += \"six \";\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\
    \tresult += \"seven \";\n\t\t\tbreak;\n\t\tcase 8:\n\t\t\tresult += \"eight \"\
    ;\n\t\t\tbreak;\n\t\tcase 9:\n\t\t\tresult += \"nine \";\n\t\t\tbreak;\n\t\t}\n\
    \t}\n\treturn result.substr(0, result.size() - 1);\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115007
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> m = {{\"zero\", 0}, {\"one\", 1}, {\"two\"\
    , 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\",\
    \ 7}, {\"eight\", 8}, {\"nine\", 9}};\n    std::stringstream ss(numbers);\n  \
    \  std::vector<int> v;\n    for (std::string word; ss >> word; ) {\n        v.push_back(m[word]);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string str = \"\";\n    for\
    \ (int x : v) {\n        if (str != \"\") str += \" \";\n        str += std::to_string(x);\n\
    \    }\n    return str;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpx5iqhbl4: /tmp/tmpx5iqhbl4.cpp:26: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::string num[] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  std::vector<int> res;\n \
    \ std::istringstream iss(numbers);\n  std::string t;\n  while(iss >> t) {\n  \
    \  for(int i = 0; i < 10; i++) {\n      if(t == num[i]) {\n        res.push_back(i);\n\
    \        break;\n      }\n    }\n  }\n  std::sort(res.begin(), res.end());\n \
    \ std::string output;\n  for(int i = 0; i < res.size(); i++) {\n    output +=\
    \ num[res[i]] + \" \";\n  }\n  output.pop_back();\n  return output;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp30unolwz: /tmp/tmp30unolwz.cpp:31: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115007
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> splitNumbers;\n    std::vector<int> intNumbers;\n\
    \    int index;\n    std::string temp;\n    std::stringstream ss;\n    ss << numbers;\n\
    \    while(ss >> temp) {\n        splitNumbers.push_back(temp);\n    }\n    for(std::string\
    \ &stringNumber : splitNumbers) {\n        switch(stringNumber[0]) {\n       \
    \     case 'n':\n                index = 4;\n                break;\n        \
    \    case 'o':\n                index = 1;\n                break;\n         \
    \   case 't':\n                index = 2;\n                break;\n          \
    \  case 'e':\n                index = 0;\n                break;\n           \
    \ case 'f':\n                index = 5;\n                break;\n            case\
    \ 's':\n                index = 6;\n                break;\n            case 'v':\n\
    \                index = 7;\n                break;\n            case 'i':\n \
    \               index = 8;\n                break;\n            case 'n':\n  \
    \              index = 9;\n                break;\n        }\n        intNumbers.push_back(index);\n\
    \    }\n    std::sort(intNumbers.begin(), intNumbers.end());\n    for(int i =\
    \ 0; i < intNumbers.size(); i++) {\n        switch(intNumbers[i]) {\n        \
    \    case 0:\n                splitNumbers[i] = \"zero\";\n                break;\n\
    \            case 1:\n                splitNumbers[i] = \"one\";\n           \
    \     break;\n            case 2:\n                splitNumbers[i] = \"two\";\n\
    \                break;\n            case 3:\n                splitNumbers[i]\
    \ = \"three\";\n                break;\n            case 4:\n                splitNumbers[i]\
    \ = \"four\";\n                break;\n            case 5:\n                splitNumbers[i]\
    \ = \"five\";\n                break;\n            case 6:\n                splitNumbers[i]\
    \ = \"six\";\n                break;\n            case 7:\n                splitNumbers[i]\
    \ = \"seven\";\n                break;\n            case 8:\n                splitNumbers[i]\
    \ = \"eight\";\n                break;\n            case 9:\n                splitNumbers[i]\
    \ = \"nine\";\n                break;\n        }\n    }\n   \n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzdzgmuqd.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpzdzgmuqd.cpp:44:13: error: duplicate case value\n   44 |          \
    \   case 'n':\n      |             ^~~~\n/tmp/tmpzdzgmuqd.cpp:20:13: note: previously\
    \ used here\n   20 |             case 'n':\n      |             ^~~~\n/tmp/tmpzdzgmuqd.cpp:86:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   86 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115006
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // Write your code here!\n    std::vector<std::string> words;\n    words.push_back(\"\
    zero\");\n    words.push_back(\"one\");\n    words.push_back(\"two\");\n    words.push_back(\"\
    three\");\n    words.push_back(\"four\");\n    words.push_back(\"five\");\n  \
    \  words.push_back(\"six\");\n    words.push_back(\"seven\");\n    words.push_back(\"\
    eight\");\n    words.push_back(\"nine\");\n    std::map<std::string, int> mymap;\n\
    \    for(int i = 0; i < words.size(); i++) {\n        mymap[words[i]] = i;\n \
    \   }\n    std::vector<std::string> input;\n    std::stringstream ss(numbers);\n\
    \    std::string temp;\n    while(ss >> temp) {\n        input.push_back(temp);\n\
    \    }\n    sort(input.begin(), input.end(), [&](std::string a, std::string b)\
    \ {\n        return mymap[a] < mymap[b];\n    });\n    std::string result;\n \
    \   for(auto word : input) {\n        result += word + \" \";\n    }\n    result.pop_back();\n\
    \    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"\
    three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"\
    ));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four\
    \ five seven eight nine\"));\n    assert(candidate((\"six five four three two\
    \ one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp2pej2s1q: /tmp/tmp2pej2s1q.cpp:43: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // make a map of word and number\n    std::map<std::string, int> numberMap;\n\
    \    numberMap[\"zero\"] = 0;\n    numberMap[\"one\"] = 1;\n    numberMap[\"two\"\
    ] = 2;\n    numberMap[\"three\"] = 3;\n    numberMap[\"four\"] = 4;\n    numberMap[\"\
    five\"] = 5;\n    numberMap[\"six\"] = 6;\n    numberMap[\"seven\"] = 7;\n   \
    \ numberMap[\"eight\"] = 8;\n    numberMap[\"nine\"] = 9;\n    std::vector<int>\
    \ numberVector;\n    std::istringstream iss(numbers);\n    std::string currentString;\n\
    \    while (iss >> currentString) {\n        numberVector.push_back(numberMap[currentString]);\n\
    \    }\n    std::sort(numberVector.begin(), numberVector.end());\n    std::stringstream\
    \ result;\n    for (auto const& currentNumber : numberVector) {\n        result\
    \ << currentNumber << \" \";\n    }\n    return result.str();\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmphcbbjbsx: /tmp/tmphcbbjbsx.cpp:37: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string rv;\n    // convert to numbers\n    std::vector<int> vec;\n\
    \    std::stringstream ss(numbers);\n    std::string token;\n    while (std::getline(ss,\
    \ token, ' ')) {\n        if (token == \"zero\") {\n            vec.push_back(0);\n\
    \        } else if (token == \"one\") {\n            vec.push_back(1);\n     \
    \   } else if (token == \"two\") {\n            vec.push_back(2);\n        } else\
    \ if (token == \"three\") {\n            vec.push_back(3);\n        } else if\
    \ (token == \"four\") {\n            vec.push_back(4);\n        } else if (token\
    \ == \"five\") {\n            vec.push_back(5);\n        } else if (token == \"\
    six\") {\n            vec.push_back(6);\n        } else if (token == \"seven\"\
    ) {\n            vec.push_back(7);\n        } else if (token == \"eight\") {\n\
    \            vec.push_back(8);\n        } else if (token == \"nine\") {\n    \
    \        vec.push_back(9);\n        }\n    }\n    // sort the numbers\n    std::sort(vec.begin(),\
    \ vec.end());\n    // convert to words\n    for (auto n : vec) {\n        if (n\
    \ == 0) {\n            rv.append(\"zero \");\n        } else if (n == 1) {\n \
    \           rv.append(\"one \");\n        } else if (n == 2) {\n            rv.append(\"\
    two \");\n        } else if (n == 3) {\n            rv.append(\"three \");\n \
    \       } else if (n == 4) {\n            rv.append(\"four \");\n        } else\
    \ if (n == 5) {\n            rv.append(\"five \");\n        } else if (n == 6)\
    \ {\n            rv.append(\"six \");\n        } else if (n == 7) {\n        \
    \    rv.append(\"seven \");\n        } else if (n == 8) {\n            rv.append(\"\
    eight \");\n        } else if (\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpozpcoc5i.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpozpcoc5i.cpp:60:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   60 | }\n      | ^\n/tmp/tmpozpcoc5i.cpp:59:20: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   59 |         } else if (\n    \
    \  |                   ~^\n      |                    )\n   60 | }\n      | ~\
    \                   \n/tmp/tmpozpcoc5i.cpp:60:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmpozpcoc5i.cpp:61:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   61 | int main() {\n      |            ^\n/tmp/tmpozpcoc5i.cpp:68:1: error:\
    \ expected \u2018}\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmpozpcoc5i.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpozpcoc5i.cpp:68:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   68 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115007
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // TODO\n    std::string sortednumbers = \"\";\n    std::vector<int>\
    \ intnumbers;\n    std::map<std::string, int> maptable = {{\"zero\", 0}, {\"one\"\
    , 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6},\
    \ {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n    std::istringstream iss(numbers);\n\
    \    std::string token;\n    while(std::getline(iss, token, ' ')) {\n        intnumbers.push_back(maptable[token]);\n\
    \    }\n    std::sort(intnumbers.begin(), intnumbers.end());\n    for(int i =\
    \ 0; i < intnumbers.size(); i++) {\n        for(auto it = maptable.begin(); it\
    \ != maptable.end(); it++) {\n            if(it->second == intnumbers[i]) {\n\
    \                sortednumbers += it->first;\n                sortednumbers +=\
    \ \" \";\n            }\n        }\n    }\n    sortednumbers.pop_back();\n   \
    \ return sortednumbers;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp_1uph9is: /tmp/tmp_1uph9is.cpp:32: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> split = numbers.split();\n    std::sort(split.begin(),\
    \ split.end());\n    return split.join();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbwta9315.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpbwta9315.cpp:9:46: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n    9 |     std::vector<std::string> split = numbers.split();\n      |     \
    \                                         ^~~~~\n/tmp/tmpbwta9315.cpp:11:18: error:\
    \ \u2018class std::vector<std::__cxx11::basic_string<char> >\u2019 has no member\
    \ named \u2018join\u2019\n   11 |     return split.join();\n      |          \
    \        ^~~~\n"
  stdout: ''
  timestamp: 1660115007
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string result;\n    std::vector<int> digits;\n    std::stringstream\
    \ iss(numbers);\n    std::string temp;\n    while (iss >> temp) {\n        if\
    \ (temp == \"zero\") digits.push_back(0);\n        else if (temp == \"one\") digits.push_back(1);\n\
    \        else if (temp == \"two\") digits.push_back(2);\n        else if (temp\
    \ == \"three\") digits.push_back(3);\n        else if (temp == \"four\") digits.push_back(4);\n\
    \        else if (temp == \"five\") digits.push_back(5);\n        else if (temp\
    \ == \"six\") digits.push_back(6);\n        else if (temp == \"seven\") digits.push_back(7);\n\
    \        else if (temp == \"eight\") digits.push_back(8);\n        else if (temp\
    \ == \"nine\") digits.push_back(9);\n    }\n    std::sort(digits.begin(), digits.end());\n\
    \    for (auto& i : digits) {\n        if (i == 0) result += \"zero \";\n    \
    \    else if (i == 1) result += \"one \";\n        else if (i == 2) result +=\
    \ \"two \";\n        else if (i == 3) result += \"three \";\n        else if (i\
    \ == 4) result += \"four \";\n        else if (i == 5) result += \"five \";\n\
    \        else if (i == 6) result += \"six \";\n        else if (i == 7) result\
    \ += \"seven \";\n        else if (i == 8) result += \"eight \";\n        else\
    \ if (i == 9) result += \"nine \";\n    }\n    result.pop_back();\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp5k9usoca: /tmp/tmp5k9usoca.cpp:43: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::string result = \"\";\n  std::string delim = \" \";\n  size_t pos\
    \ = 0;\n  std::string token;\n  std::vector<int> nums;\n  while ((pos = numbers.find(delim))\
    \ != std::string::npos) {\n    token = numbers.substr(0, pos);\n    nums.push_back(std::stoi(token));\n\
    \    numbers.erase(0, pos + delim.length());\n  }\n  nums.push_back(std::stoi(numbers));\n\
    \  std::sort(nums.begin(), nums.end());\n  for (auto &it : nums) {\n    result\
    \ += std::to_string(it) + \" \";\n  }\n  result.pop_back();\n  return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660115008
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string num_str[10] = {\"zero\", \"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int num_int[10]\
    \ = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n    std::map<std::string, int> num_map;\n\
    \    for (int i = 0; i < 10; i++) {\n        num_map[num_str[i]] = num_int[i];\n\
    \    }\n    std::vector<std::string> tokens;\n    std::istringstream iss(numbers);\n\
    \    std::copy(std::istream_iterator<std::string>(iss),\n              std::istream_iterator<std::string>(),\n\
    \              std::back_inserter(tokens));\n    std::vector<int> num_vec;\n \
    \   for (int i = 0; i < tokens.size(); i++) {\n        num_vec.push_back(num_map[tokens[i]]);\n\
    \    }\n    std::sort(num_vec.begin(), num_vec.end());\n    std::stringstream\
    \ ss;\n    for (int i = 0; i < num_vec.size(); i++) {\n        if (i != 0) {\n\
    \            ss << \" \";\n        }\n        ss << num_str[num_vec[i]];\n   \
    \ }\n    return ss.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115008
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream stream(numbers);\n    std::string word;\n    std::map<std::string,\
    \ int> number_map = {\n        {\"zero\", 0},\n        {\"one\", 1},\n       \
    \ {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"\
    five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\"\
    , 8},\n        {\"nine\", 9}\n    };\n    std::vector<int> values;\n    while\
    \ (stream >> word) {\n        int num = number_map[word];\n        values.push_back(num);\n\
    \    }\n    std::sort(values.begin(), values.end());\n    std::string res;\n \
    \   for (int i = 0; i < values.size(); i++) {\n        std::map<int, std::string>\
    \ r_map = {\n            {0, \"zero\"},\n            {1, \"one\"},\n         \
    \   {2, \"two\"},\n            {3, \"three\"},\n            {4, \"four\"},\n \
    \           {5, \"five\"},\n            {6, \"six\"},\n            {7, \"seven\"\
    },\n            {8, \"eight\"},\n            {9, \"nine\"}\n        };\n     \
    \   std::string word = r_map[values[i]];\n        res += word;\n        if (i\
    \ < values.size() - 1) {\n            res += \" \";\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115008
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\t// Initialize the map with the numbers and their corresponding string\n\
    \tstd::map<std::string, int> number_map = {\n\t\t{ \"zero\", 0 }, { \"one\", 1\
    \ }, { \"two\", 2 }, { \"three\", 3 }, { \"four\", 4 },\n\t\t{ \"five\", 5 },\
    \ { \"six\", 6 }, { \"seven\", 7 }, { \"eight\", 8 }, { \"nine\", 9 }\n\t};\n\t\
    // Initialize the vector of numbers, the index of the current number, and the\
    \ size of the string\n\tstd::vector<int> num_list;\n\tint index = 0;\n\tint size\
    \ = numbers.size();\n\t// While there are numbers left to parse\n\twhile (index\
    \ < size) {\n\t\t// Initialize the number string\n\t\tstd::string num = \"\";\n\
    \t\t// Add characters to the number string until the next character is a space\n\
    \t\twhile (numbers[index] != ' ') {\n\t\t\tnum += numbers[index];\n\t\t\tindex++;\n\
    \t\t}\n\t\t// Add the integer number to the list\n\t\tnum_list.push_back(number_map[num]);\n\
    \t\t// Advance to the next number\n\t\tindex++;\n\t}\n\t// Sort the numbers in\
    \ ascending order\n\tstd::sort(num_list.begin(), num_list.end());\n\t// Create\
    \ the new string to return\n\tstd::string ret_str = \"\";\n\t// For each number\n\
    \tfor (int i = 0; i < num_list.size(); i++) {\n\t\t// Initialize the number string\n\
    \t\tstd::string num = \"\";\n\t\t// Find the string version of the number\n\t\t\
    for (std::map<std::string, int>::iterator it = number_map.begin(); it != number_map.end();\
    \ it++) {\n\t\t\tif (it->second == num_list[i]) {\n\t\t\t\tnum = it->first;\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// If this is not the last number\n\t\tif (i\
    \ != num_list.size() - 1) {\n\t\t\t// Add a space to the string\n\t\t\t\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4kv_83zp.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp4kv_83zp.cpp:52:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   52 | int main() {\n      |            ^\n/tmp/tmp4kv_83zp.cpp:59:1:\
    \ error: expected \u2018}\u2019 at end of input\n   59 | }\n      | ^\n/tmp/tmp4kv_83zp.cpp:37:44:\
    \ note: to match this \u2018{\u2019\n   37 |  for (int i = 0; i < num_list.size();\
    \ i++) {\n      |                                            ^\n/tmp/tmp4kv_83zp.cpp:59:1:\
    \ error: expected \u2018}\u2019 at end of input\n   59 | }\n      | ^\n/tmp/tmp4kv_83zp.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp4kv_83zp.cpp:59:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   59 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115007
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> numeral_vector;\n    std::istringstream iss(numbers);\n\
    \    std::string number;\n    while (iss >> number) {\n        if (number == \"\
    zero\") {\n            numeral_vector.push_back(0);\n        } else if (number\
    \ == \"one\") {\n            numeral_vector.push_back(1);\n        } else if (number\
    \ == \"two\") {\n            numeral_vector.push_back(2);\n        } else if (number\
    \ == \"three\") {\n            numeral_vector.push_back(3);\n        } else if\
    \ (number == \"four\") {\n            numeral_vector.push_back(4);\n        }\
    \ else if (number == \"five\") {\n            numeral_vector.push_back(5);\n \
    \       } else if (number == \"six\") {\n            numeral_vector.push_back(6);\n\
    \        } else if (number == \"seven\") {\n            numeral_vector.push_back(7);\n\
    \        } else if (number == \"eight\") {\n            numeral_vector.push_back(8);\n\
    \        } else if (number == \"nine\") {\n            numeral_vector.push_back(9);\n\
    \        }\n    }\n    std::sort(numeral_vector.begin(), numeral_vector.end());\n\
    \    std::stringstream numeral_ss;\n    for (std::vector<int>::iterator it = numeral_vector.begin();\
    \ it != numeral_vector.end(); ++it) {\n        if (*it == 0) {\n            numeral_ss\
    \ << \"zero \";\n        } else if (*it == 1) {\n            numeral_ss << \"\
    one \";\n        } else if (*it == 2) {\n            numeral_ss << \"two \";\n\
    \        } else if (*it == 3) {\n            numeral_ss << \"three \";\n     \
    \   } else if (*it == 4) {\n            numeral_ss << \"four \";\n        } else\
    \ if (*it == 5) {\n            numeral_ss << \"five \";\n        } else if (*it\
    \ == 6) {\n            numeral_ss << \"six \";\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkpd5byag.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpkpd5byag.cpp:53:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   53 | int main() {\n      |            ^\n/tmp/tmpkpd5byag.cpp:60:1:\
    \ error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmpkpd5byag.cpp:37:100:\
    \ note: to match this \u2018{\u2019\n   37 |     for (std::vector<int>::iterator\
    \ it = numeral_vector.begin(); it != numeral_vector.end(); ++it) {\n      |  \
    \                                                                            \
    \                      ^\n/tmp/tmpkpd5byag.cpp:60:1: error: expected \u2018}\u2019\
    \ at end of input\n   60 | }\n      | ^\n/tmp/tmpkpd5byag.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmpkpd5byag.cpp:60:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   60 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115007
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::string space = \" \";\n  std::stringstream ss(numbers);\n  std::vector<std::string>\
    \ vect;\n  std::string word;\n  while(std::getline(ss, word, ' ')) {\n    vect.push_back(word);\n\
    \  }\n  std::sort(vect.begin(), vect.end());\n  std::stringstream s;\n  for(int\
    \ i = 0; i < vect.size(); i++) {\n    s << vect[i] << space;\n  }\n  return s.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpvr2yo106: /tmp/tmpvr2yo106.cpp:26: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string sort_numbers = \"\";\n    int num;\n    std::istringstream\
    \ iss(numbers);\n    std::vector<int> v;\n    while (iss >> num) {\n        v.push_back(num);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i < v.size();\
    \ i++) {\n        if (i == v.size() - 1) {\n            sort_numbers += std::to_string(v[i]);\n\
    \        } else {\n            sort_numbers += std::to_string(v[i]) + \" \";\n\
    \        }\n    }\n    return sort_numbers;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp7jdzj2om: /tmp/tmp7jdzj2om.cpp:29: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::vector<int> numbers_vector;\n\t\
    int num;\n\twhile (ss >> num) {\n\t\tnumbers_vector.push_back(num);\n\t}\n\tstd::sort(numbers_vector.begin(),\
    \ numbers_vector.end());\n\tstd::stringstream result;\n\tfor (int i = 0; i < numbers_vector.size();\
    \ i++) {\n\t\tresult << numbers_vector[i] << \" \";\n\t}\n\treturn result.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpr1cyl0hy: /tmp/tmpr1cyl0hy.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> mp;\n    mp[\"zero\"] = 0;\n    mp[\"one\"\
    ] = 1;\n    mp[\"two\"] = 2;\n    mp[\"three\"] = 3;\n    mp[\"four\"] = 4;\n\
    \    mp[\"five\"] = 5;\n    mp[\"six\"] = 6;\n    mp[\"seven\"] = 7;\n    mp[\"\
    eight\"] = 8;\n    mp[\"nine\"] = 9;\n    std::stringstream ss(numbers);\n   \
    \ std::string res = \"\";\n    std::string t;\n    std::vector<int> vc;\n    while(ss\
    \ >> t)\n        vc.push_back(mp[t]);\n    std::sort(vc.begin(), vc.end());\n\
    \    for(int i = 0; i < vc.size(); i++)\n        res += std::to_string(vc[i])\
    \ + \" \";\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpf3l77d0l: /tmp/tmpf3l77d0l.cpp:34: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::map<std::string, int> m = {{\"zero\", 0}, {\"one\", 1}, {\"two\",\
    \ 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\",\
    \ 7}, {\"eight\", 8}, {\"nine\", 9}};\n\tstd::vector<int> nums;\n\tfor (int i\
    \ = 0; i < numbers.size(); i++) {\n\t\tif (numbers[i] != ' ') {\n\t\t\tnums.push_back(m[numbers.substr(i,\
    \ 4)]);\n\t\t\ti += 3;\n\t\t}\n\t}\n\tstd::sort(nums.begin(), nums.end());\n\t\
    std::map<int, std::string> m2 = {{0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3,\
    \ \"three\"}, {4, \"four\"}, {5, \"five\"}, {6, \"six\"}, {7, \"seven\"}, {8,\
    \ \"eight\"}, {9, \"nine\"}};\n\tstd::string ret;\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tret += m2[nums[i]];\n\t\tif (i < nums.size() - 1) {\n\t\t\tret +=\
    \ \" \";\n\t\t}\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpmnlndqh6: /tmp/tmpmnlndqh6.cpp:31: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> num_vec;\n    std::stringstream ss(numbers);\n    std::string\
    \ num;\n    int num_i;\n    while (ss >> num) {\n        if (num == \"zero\")\
    \ num_i = 0;\n        else if (num == \"one\") num_i = 1;\n        else if (num\
    \ == \"two\") num_i = 2;\n        else if (num == \"three\") num_i = 3;\n    \
    \    else if (num == \"four\") num_i = 4;\n        else if (num == \"five\") num_i\
    \ = 5;\n        else if (num == \"six\") num_i = 6;\n        else if (num == \"\
    seven\") num_i = 7;\n        else if (num == \"eight\") num_i = 8;\n        else\
    \ if (num == \"nine\") num_i = 9;\n        else throw std::invalid_argument(\"\
    Invalid input string\");\n        num_vec.push_back(num_i);\n    }\n    std::sort(num_vec.begin(),\
    \ num_vec.end());\n    std::string result;\n    for (auto& num_i : num_vec) {\n\
    \        if (num_i == 0) result += \"zero \";\n        else if (num_i == 1) result\
    \ += \"one \";\n        else if (num_i == 2) result += \"two \";\n        else\
    \ if (num_i == 3) result += \"three \";\n        else if (num_i == 4) result +=\
    \ \"four \";\n        else if (num_i == 5) result += \"five \";\n        else\
    \ if (num_i == 6) result += \"six \";\n        else if (num_i == 7) result +=\
    \ \"seven \";\n        else if (num_i == 8) result += \"eight \";\n        else\
    \ if (num_i == 9) result += \"nine \";\n    }\n    result.pop_back();\n    return\
    \ result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp44f08tib: /tmp/tmp44f08tib.cpp:46: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // TODO: write your code here\n    int map[10] = {0};\n    std::string\
    \ arr[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\"};\n    std::stringstream ss(numbers);\n    std::string\
    \ token;\n    while(std::getline(ss, token, ' ')) {\n        for(int i = 0; i\
    \ < 10; i++) {\n            if(token == arr[i]) {\n                map[i]++;\n\
    \            }\n        }\n    }\n    std::string res = \"\";\n    for(int i =\
    \ 0; i < 10; i++) {\n        for(int j = 0; j < map[i]; j++) {\n            res\
    \ += arr[i] + \" \";\n        }\n    }\n    res.pop_back();\n    return res;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmplzonjsxc: /tmp/tmplzonjsxc.cpp:32: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    if (numbers.size() == 0) return \"\";\n    std::map<std::string, int>\
    \ num = {\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"two\", 2},\n\
    \        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\", 5},\n   \
    \     {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n      \
    \  {\"nine\", 9}\n    };\n    std::stringstream ss(numbers);\n    std::string\
    \ temp;\n    std::vector<int> tokens;\n    while (ss >> temp) tokens.push_back(num[temp]);\n\
    \    std::sort(tokens.begin(), tokens.end());\n    std::stringstream ss2;\n  \
    \  for (int i=0; i<tokens.size(); i++) {\n        ss2 << tokens[i];\n        if\
    \ (i!=tokens.size()-1) ss2 << \" \";\n    }\n    return ss2.str();\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpt55ejovw: /tmp/tmpt55ejovw.cpp:37: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::vector<int> numi;\n    std::stringstream\
    \ ss(numbers);\n    std::string temp;\n    while (ss >> temp) {\n        nums.push_back(temp);\n\
    \    }\n    int sizes = nums.size();\n    for (int i = 0; i < sizes; i++) {\n\
    \        if (nums[i] == \"zero\") numi.push_back(0);\n        else if (nums[i]\
    \ == \"one\") numi.push_back(1);\n        else if (nums[i] == \"two\") numi.push_back(2);\n\
    \        else if (nums[i] == \"three\") numi.push_back(3);\n        else if (nums[i]\
    \ == \"four\") numi.push_back(4);\n        else if (nums[i] == \"five\") numi.push_back(5);\n\
    \        else if (nums[i] == \"six\") numi.push_back(6);\n        else if (nums[i]\
    \ == \"seven\") numi.push_back(7);\n        else if (nums[i] == \"eight\") numi.push_back(8);\n\
    \        else if (nums[i] == \"nine\") numi.push_back(9);\n    }\n    std::sort(numi.begin(),\
    \ numi.end());\n    std::stringstream ss2;\n    std::string final_string;\n  \
    \  for (int i = 0; i < sizes; i++) {\n        if (numi[i] == 0) ss2 << \"zero\
    \ \";\n        else if (numi[i] == 1) ss2 << \"one \";\n        else if (numi[i]\
    \ == 2) ss2 << \"two \";\n        else if (numi[i] == 3) ss2 << \"three \";\n\
    \        else if (numi[i] == 4) ss2 << \"four \";\n        else if (numi[i] ==\
    \ 5) ss2 << \"five \";\n        else if (numi[i] == 6) ss2 << \"six \";\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpja0iz5tv.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpja0iz5tv.cpp:41:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   41 | int main() {\n      |            ^\n/tmp/tmpja0iz5tv.cpp:48:1:\
    \ error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmpja0iz5tv.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpja0iz5tv.cpp:48:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   48 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115007
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::string item;\n\tint set[10] = {\
    \ 0 };\n\twhile (std::getline(ss, item, ' ')) {\n\t\tif (item == \"zero\")\n\t\
    \t\tset[0]++;\n\t\telse if (item == \"one\")\n\t\t\tset[1]++;\n\t\telse if (item\
    \ == \"two\")\n\t\t\tset[2]++;\n\t\telse if (item == \"three\")\n\t\t\tset[3]++;\n\
    \t\telse if (item == \"four\")\n\t\t\tset[4]++;\n\t\telse if (item == \"five\"\
    )\n\t\t\tset[5]++;\n\t\telse if (item == \"six\")\n\t\t\tset[6]++;\n\t\telse if\
    \ (item == \"seven\")\n\t\t\tset[7]++;\n\t\telse if (item == \"eight\")\n\t\t\t\
    set[8]++;\n\t\telse if (item == \"nine\")\n\t\t\tset[9]++;\n\t}\n\tstd::stringstream\
    \ result;\n\tfor (int i = 0; i < 10; i++) {\n\t\twhile (set[i] > 0) {\n\t\t\t\
    result << \" \" << i;\n\t\t\tset[i]--;\n\t\t}\n\t}\n\tstd::string res = result.str();\n\
    \treturn res.substr(1);\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 1) > this->size() (which is 0)\n"
  stdout: ''
  timestamp: 1660115008
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    assert(!numbers.empty());\n    std::vector<std::string> splitted_str\
    \ = split(numbers);\n    for (auto& i : splitted_str) {\n        if (i == \"zero\"\
    ) {\n            i = \"0\";\n        } else if (i == \"one\") {\n            i\
    \ = \"1\";\n        } else if (i == \"two\") {\n            i = \"2\";\n     \
    \   } else if (i == \"three\") {\n            i = \"3\";\n        } else if (i\
    \ == \"four\") {\n            i = \"4\";\n        } else if (i == \"five\") {\n\
    \            i = \"5\";\n        } else if (i == \"six\") {\n            i = \"\
    6\";\n        } else if (i == \"seven\") {\n            i = \"7\";\n        }\
    \ else if (i == \"eight\") {\n            i = \"8\";\n        } else if (i ==\
    \ \"nine\") {\n            i = \"9\";\n        }\n    }\n    std::sort(splitted_str.begin(),\
    \ splitted_str.end());\n    std::vector<std::string> result_str;\n    for (auto&\
    \ i : splitted_str) {\n        if (i == \"0\") {\n            i = \"zero\";\n\
    \        } else if (i == \"1\") {\n            i = \"one\";\n        } else if\
    \ (i == \"2\") {\n            i = \"two\";\n        } else if (i == \"3\") {\n\
    \            i = \"three\";\n        } else if (i == \"4\") {\n            i =\
    \ \"four\";\n        } else if (i == \"5\") {\n            i = \"five\";\n   \
    \     } else if (i == \"6\") {\n            i = \"six\";\n        } else if (i\
    \ == \"7\") {\n            i = \"seven\";\n        } else if (i == \"8\") {\n\
    \            i = \"eight\";\n        } else if (i == \"9\") {\n            i =\
    \ \"nine\";\n        }\n        result_str.push_back(i);\n    }\n    return join(result_str);\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxql2xd8m.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpxql2xd8m.cpp:10:45: error: \u2018split\u2019 was not declared in this\
    \ scope\n   10 |     std::vector<std::string> splitted_str = split(numbers);\n\
    \      |                                             ^~~~~\n/tmp/tmpxql2xd8m.cpp:60:12:\
    \ error: \u2018join\u2019 was not declared in this scope; did you mean \u2018\
    jn\u2019?\n   60 |     return join(result_str);\n      |            ^~~~\n   \
    \   |            jn\n"
  stdout: ''
  timestamp: 1660115008
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::string numbers_copy = numbers;\n\tstd::vector<std::string> split_numbers\
    \ = split(numbers_copy, ' ');\n\t// TODO: Write your code here\n\t// 1. Convert\
    \ each word to its number.\n\t// 2. Sort numbers.\n\t// 3. Convert each number\
    \ to its word.\n\t// 4. Copy over words from step 3 back to step 1.\n\t// 5. Return\
    \ numbers from step 4.\n\t// Example:\n\t// If numbers = 'three one five',\n\t\
    // Then after step 1, the vector split_numbers is [3, 1, 5]\n\t// After step 2,\
    \ it becomes [1, 3, 5]\n\t// After step 3, it becomes ['one', 'three', 'five']\n\
    \t// After step 4, it becomes ['one', 'three', 'five']\n\t// Return ['one', 'three',\
    \ 'five'] which is the string \"one three five\"\n\t//\n\t// Sample input: 'three\
    \ one five'\n\t// Sample output: 'one three five'\n\tfor (int i = 0; i < split_numbers.size();\
    \ i++) {\n\t\tint number = get_number(split_numbers[i]);\n\t\tint smallest_number\
    \ = number;\n\t\tint index = i;\n\t\tfor (int j = i; j < split_numbers.size();\
    \ j++) {\n\t\t\tnumber = get_number(split_numbers[j]);\n\t\t\tif (number < smallest_number)\
    \ {\n\t\t\t\tsmallest_number = number;\n\t\t\t\tindex = j;\n\t\t\t}\n\t\t}\n\t\
    \tstd::string temp = split_numbers[i];\n\t\tsplit_numbers[i] = split_numbers[index];\n\
    \t\tsplit_numbers[index] = temp;\n\t}\n\tstd::string result = \"\";\n\tfor (int\
    \ i = 0; i < split_numbers.size(); i++) {\n\t\tresult = result + split_numbers[i]\
    \ + \" \";\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwr6tskz1.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpwr6tskz1.cpp:10:43: error: \u2018split\u2019 was not declared in this\
    \ scope\n   10 |  std::vector<std::string> split_numbers = split(numbers_copy,\
    \ ' ');\n      |                                           ^~~~~\n/tmp/tmpwr6tskz1.cpp:28:16:\
    \ error: \u2018get_number\u2019 was not declared in this scope; did you mean \u2018\
    number\u2019?\n   28 |   int number = get_number(split_numbers[i]);\n      | \
    \               ^~~~~~~~~~\n      |                number\n"
  stdout: ''
  timestamp: 1660115008
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::unordered_map<std::string, int> dict {{\"zero\", 0}, {\"one\", 1},\
    \ {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"\
    seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n    std::vector<int> num_vec;\n\
    \    std::stringstream ss;\n    ss << numbers;\n    std::string word;\n    while\
    \ (ss >> word) {\n        num_vec.push_back(dict[word]);\n    }\n    std::sort(num_vec.begin(),\
    \ num_vec.end());\n    std::string result = \"\";\n    for (int i : num_vec) {\n\
    \        for (auto pair : dict) {\n            if (pair.second == i) {\n     \
    \           result += pair.first + \" \";\n            }\n        }\n    }\n \
    \   return result.substr(0, result.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115008
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    char c[] = \"zero one two three four five six seven eight nine\";\n \
    \   char* p = strtok(c, \" \");\n    std::map<std::string, int> number_map;\n\
    \    int i = 0;\n    while (p != NULL) {\n        number_map[p] = i;\n       \
    \ p = strtok(NULL, \" \");\n        i++;\n    }\n    std::vector<std::string>\
    \ nums;\n    p = strtok((char*)numbers.c_str(), \" \");\n    while (p != NULL)\
    \ {\n        nums.push_back(p);\n        p = strtok(NULL, \" \");\n    }\n   \
    \ std::sort(nums.begin(), nums.end(), [&](const std::string& a, const std::string&\
    \ b) { return number_map[a] < number_map[b]; });\n    std::stringstream ss;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        ss << nums[i];\n       \
    \ if (i != nums.size() - 1) {\n            ss << \" \";\n        }\n    }\n  \
    \  return ss.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"\
    three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"\
    ));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four\
    \ five seven eight nine\"));\n    assert(candidate((\"six five four three two\
    \ one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  \n  std::vector<std::string> v;\n  std::stringstream ss(numbers);\n  std::string\
    \ tmp;\n  while(ss >> tmp)\n    v.push_back(tmp);\n  std::sort(v.begin(), v.end());\n\
    \  std::stringstream result;\n  for(auto i : v)\n    result << i << \" \";\n \
    \ return result.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpqefznxsg: /tmp/tmpqefznxsg.cpp:24: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115008
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    int i;\n    int inp[10];\n    for(i=0;i<10;i++)\n        inp[i]=0;\n\
    \    std::string arr[numbers.length()/2+1];\n    int k=0;\n    for(i=0;i<numbers.length();i++)\n\
    \    {\n        if(numbers[i]!=' ')\n        {\n            arr[k]+=numbers[i];\n\
    \        }\n        else\n        {\n            k++;\n        }\n    }\n    std::string\
    \ sorted=\"\";\n    for(i=0;i<k+1;i++)\n    {\n        if(arr[i]==\"zero\")\n\
    \            inp[0]++;\n        else if(arr[i]==\"one\")\n            inp[1]++;\n\
    \        else if(arr[i]==\"two\")\n            inp[2]++;\n        else if(arr[i]==\"\
    three\")\n            inp[3]++;\n        else if(arr[i]==\"four\")\n         \
    \   inp[4]++;\n        else if(arr[i]==\"five\")\n            inp[5]++;\n    \
    \    else if(arr[i]==\"six\")\n            inp[6]++;\n        else if(arr[i]==\"\
    seven\")\n            inp[7]++;\n        else if(arr[i]==\"eight\")\n        \
    \    inp[8]++;\n        else if(arr[i]==\"nine\")\n            inp[9]++;\n   \
    \ }\n    for(i=0;i<10;i++)\n    {\n        while(inp[i]!=0)\n        {\n     \
    \       if(i==0)\n                sorted+=\"zero \";\n            else if(i==1)\n\
    \                sorted+=\"one \";\n            else if(i==2)\n              \
    \  sorted+=\"two \";\n            else if(i==3)\n                sorted+=\"three\
    \ \";\n            else if(i==4)\n                sorted+=\"four \";\n       \
    \     else if(i==5)\n                sorted+=\"five \";\n            else if(i==6)\n\
    \                sorted\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0jxv79pv.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp0jxv79pv.cpp:67:23: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   67 |                 sorted\n      |                       ^\n   \
    \   |                       ;\n   68 | }\n      | ~                      \n/tmp/tmp0jxv79pv.cpp:69:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   69 | int main() {\n      |            ^\n/tmp/tmp0jxv79pv.cpp:76:1: error:\
    \ expected \u2018}\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmp0jxv79pv.cpp:51:5:\
    \ note: to match this \u2018{\u2019\n   51 |     {\n      |     ^\n/tmp/tmp0jxv79pv.cpp:76:1:\
    \ error: expected \u2018}\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmp0jxv79pv.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp0jxv79pv.cpp:76:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   76 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115008
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    stringstream ss(numbers);\n    vector<int> v;\n    while (true) {\n \
    \       int num;\n        ss >> num;\n        if (ss.fail()) {\n            break;\n\
    \        }\n        v.push_back(num);\n    }\n    std::sort(v.begin(), v.end());\n\
    \    stringstream sorted_numbers;\n    for (auto num : v) {\n        sorted_numbers\
    \ << num << \" \";\n    }\n    return sorted_numbers.str();\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdljq9uuo.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpdljq9uuo.cpp:9:5: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n    9 |     stringstream\
    \ ss(numbers);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\nIn file\
    \ included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdljq9uuo.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmpdljq9uuo.cpp:10:5:\
    \ error: \u2018vector\u2019 was not declared in this scope\n   10 |     vector<int>\
    \ v;\n      |     ^~~~~~\n/tmp/tmpdljq9uuo.cpp:10:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdljq9uuo.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdljq9uuo.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpd"
  stdout: ''
  timestamp: 1660115008
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> number_vec;\n    std::string temp_num = \"\"\
    ;\n    std::string result_string = \"\";\n    std::vector<int> result_vec;\n \
    \   int pos = 0;\n    int temp_pos = 0;\n    int i = 0;\n    int j = 0;\n    int\
    \ k = 0;\n    for (int i = 0; i < numbers.length(); i++) {\n        if (numbers[i]\
    \ == ' ') {\n            number_vec.push_back(temp_num);\n            temp_num\
    \ = \"\";\n        } else {\n            temp_num += numbers[i];\n        }\n\
    \    }\n    number_vec.push_back(temp_num);\n    for (std::string number : number_vec)\
    \ {\n        if (number == \"zero\") {\n            result_vec.push_back(0);\n\
    \        } else if (number == \"one\") {\n            result_vec.push_back(1);\n\
    \        } else if (number == \"two\") {\n            result_vec.push_back(2);\n\
    \        } else if (number == \"three\") {\n            result_vec.push_back(3);\n\
    \        } else if (number == \"four\") {\n            result_vec.push_back(4);\n\
    \        } else if (number == \"five\") {\n            result_vec.push_back(5);\n\
    \        } else if (number == \"six\") {\n            result_vec.push_back(6);\n\
    \        } else if (number == \"seven\") {\n            result_vec.push_back(7);\n\
    \        } else if (number == \"eight\") {\n            result_vec.push_back(8);\n\
    \        } else if (number == \"nine\") {\n            result_vec.push_back(9);\n\
    \        }\n    }\n    std::sort(result_vec.begin(), result_vec.end());\n    for\
    \ (i = 0; i < result_vec.size(); i++) {\n        if (result_vec[i] == 0) {\n \
    \           result_string += \"zero\";\n        } else if (result_vec[i] == 1)\
    \ {\n            result_\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplq4czbdv.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmplq4czbdv.cpp:55:13: error: \u2018result_\u2019 was not declared in\
    \ this scope; did you mean \u2018result_vec\u2019?\n   55 |             result_\n\
    \      |             ^~~~~~~\n      |             result_vec\n/tmp/tmplq4czbdv.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmplq4czbdv.cpp:64:1: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmplq4czbdv.cpp:51:45:\
    \ note: to match this \u2018{\u2019\n   51 |     for (i = 0; i < result_vec.size();\
    \ i++) {\n      |                                             ^\n/tmp/tmplq4czbdv.cpp:64:1:\
    \ error: expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmplq4czbdv.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmplq4czbdv.cpp:64:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::string result = \"\";\n  char delim = ' ';\n  std::istringstream numbers_stream(numbers);\n\
    \  std::vector<std::string> sorted_numbers;\n  std::copy(std::istream_iterator<std::string>(numbers_stream),\n\
    \            std::istream_iterator<std::string>(),\n            std::back_inserter(sorted_numbers));\n\
    \  std::sort(sorted_numbers.begin(), sorted_numbers.end());\n  for (auto i : sorted_numbers)\
    \ {\n    result += i + delim;\n  }\n  // Trim off the last space\n  result.erase(result.end()\
    \ - 1);\n  return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp0roypyy9: /tmp/tmp0roypyy9.cpp:26: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115009
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tif (numbers.size() == 0) {\n\t\treturn \"\";\n\t}\n\tstd::stringstream\
    \ ss(numbers);\n\tstd::string temp;\n\tstd::vector<int> nums;\n\twhile (ss >>\
    \ temp) {\n\t\tif (temp == \"zero\") {\n\t\t\tnums.push_back(0);\n\t\t}\n\t\t\
    else if (temp == \"one\") {\n\t\t\tnums.push_back(1);\n\t\t}\n\t\telse if (temp\
    \ == \"two\") {\n\t\t\tnums.push_back(2);\n\t\t}\n\t\telse if (temp == \"three\"\
    ) {\n\t\t\tnums.push_back(3);\n\t\t}\n\t\telse if (temp == \"four\") {\n\t\t\t\
    nums.push_back(4);\n\t\t}\n\t\telse if (temp == \"five\") {\n\t\t\tnums.push_back(5);\n\
    \t\t}\n\t\telse if (temp == \"six\") {\n\t\t\tnums.push_back(6);\n\t\t}\n\t\t\
    else if (temp == \"seven\") {\n\t\t\tnums.push_back(7);\n\t\t}\n\t\telse if (temp\
    \ == \"eight\") {\n\t\t\tnums.push_back(8);\n\t\t}\n\t\telse if (temp == \"nine\"\
    ) {\n\t\t\tnums.push_back(9);\n\t\t}\n\t}\n\tstd::sort(nums.begin(), nums.end());\n\
    \tstd::string ans = \"\";\n\tfor (int i = 0; i < nums.size(); i++) {\n\t\tswitch\
    \ (nums[i]) {\n\t\tcase 0:\n\t\t\tans += \"zero \";\n\t\t\tbreak;\n\t\tcase 1:\n\
    \t\t\tans += \"one \";\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tans += \"two \";\n\t\t\
    \tbreak;\n\t\tcase 3:\n\t\t\tans += \"three \";\n\t\t\tbreak;\n\t\tcase 4:\n\t\
    \t\tans += \"four \";\n\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw2cebhd.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgw2cebhd.cpp:67:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   67 | int main() {\n      |            ^\n/tmp/tmpgw2cebhd.cpp:74:1:\
    \ error: expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpgw2cebhd.cpp:49:40:\
    \ note: to match this \u2018{\u2019\n   49 |  for (int i = 0; i < nums.size();\
    \ i++) {\n      |                                        ^\n/tmp/tmpgw2cebhd.cpp:74:1:\
    \ error: expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpgw2cebhd.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpgw2cebhd.cpp:74:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   74 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660115008
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  if (numbers.empty()) return \"\";\n  std::stringstream ss(numbers);\n \
    \ std::string token;\n  std::vector<int> numbers_int;\n  while (std::getline(ss,\
    \ token, ' ')) {\n    if (token == \"zero\") numbers_int.push_back(0);\n    else\
    \ if (token == \"one\") numbers_int.push_back(1);\n    else if (token == \"two\"\
    ) numbers_int.push_back(2);\n    else if (token == \"three\") numbers_int.push_back(3);\n\
    \    else if (token == \"four\") numbers_int.push_back(4);\n    else if (token\
    \ == \"five\") numbers_int.push_back(5);\n    else if (token == \"six\") numbers_int.push_back(6);\n\
    \    else if (token == \"seven\") numbers_int.push_back(7);\n    else if (token\
    \ == \"eight\") numbers_int.push_back(8);\n    else if (token == \"nine\") numbers_int.push_back(9);\n\
    \  }\n  std::sort(numbers_int.begin(), numbers_int.end());\n  std::stringstream\
    \ res;\n  std::string nums[] = {\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n  for (int i = 0; i < numbers_int.size();\
    \ i++) {\n    res << nums[numbers_int[i]];\n    if (i != numbers_int.size() -\
    \ 1) res << \" \";\n  }\n  return res.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115008
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string num = \"\";\n    // TODO: Implement sort_numbers\n    int\
    \ a[10];\n    memset(a,0,sizeof(a));\n    int count = 0;\n    char *c = strtok(const_cast<char*>(numbers.c_str()),\"\
    \ \");\n    while(c != NULL)\n    {\n        if(strcmp(c,\"zero\") == 0)\n   \
    \         a[0]++;\n        else if(strcmp(c,\"one\") == 0)\n            a[1]++;\n\
    \        else if(strcmp(c,\"two\") == 0)\n            a[2]++;\n        else if(strcmp(c,\"\
    three\") == 0)\n            a[3]++;\n        else if(strcmp(c,\"four\") == 0)\n\
    \            a[4]++;\n        else if(strcmp(c,\"five\") == 0)\n            a[5]++;\n\
    \        else if(strcmp(c,\"six\") == 0)\n            a[6]++;\n        else if(strcmp(c,\"\
    seven\") == 0)\n            a[7]++;\n        else if(strcmp(c,\"eight\") == 0)\n\
    \            a[8]++;\n        else if(strcmp(c,\"nine\") == 0)\n            a[9]++;\n\
    \        c = strtok(NULL,\" \");\n    }\n    for(int i = 0; i < 10; i++)\n   \
    \ {\n        for(int j = 0; j < a[i]; j++)\n        {\n            if(i == 0)\n\
    \                num += \"zero \";\n            else if(i == 1)\n            \
    \    num += \"one \";\n            else if(i == 2)\n                num += \"\
    two \";\n            else if(i == 3)\n                num += \"three \";\n   \
    \         else if(i == 4)\n                num += \"four \";\n            else\
    \ if(i == 5)\n                num += \"five \";\n            else if(i == 6)\n\
    \                num += \"six \";\n            else if(i == 7)\n             \
    \   num += \"seven \";\n            else if(i == 8)\n                num += \"\
    eight \";\n           \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprpsqj0mn.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmprpsqj0mn.cpp:63:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   63 | int main() {\n      |            ^\n/tmp/tmprpsqj0mn.cpp:70:1:\
    \ error: expected \u2018}\u2019 at end of input\n   70 | }\n      | ^\n/tmp/tmprpsqj0mn.cpp:40:5:\
    \ note: to match this \u2018{\u2019\n   40 |     {\n      |     ^\n/tmp/tmprpsqj0mn.cpp:70:1:\
    \ error: expected \u2018}\u2019 at end of input\n   70 | }\n      | ^\n/tmp/tmprpsqj0mn.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmprpsqj0mn.cpp:70:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   70 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115008
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> nmap;\n    std::istringstream ss(numbers);\n\
    \    int n;\n    nmap[\"zero\"] = 0;\n    nmap[\"one\"] = 1;\n    nmap[\"two\"\
    ] = 2;\n    nmap[\"three\"] = 3;\n    nmap[\"four\"] = 4;\n    nmap[\"five\"]\
    \ = 5;\n    nmap[\"six\"] = 6;\n    nmap[\"seven\"] = 7;\n    nmap[\"eight\"]\
    \ = 8;\n    nmap[\"nine\"] = 9;\n    std::string s;\n    std::vector<int> nums;\n\
    \    while (ss >> s) {\n        nums.push_back(nmap[s]);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::ostringstream os;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        for (std::map<std::string, int>::iterator it = nmap.begin();\
    \ it != nmap.end(); it++) {\n            if (it->second == nums[i]) {\n      \
    \          os << it->first << \" \";\n                break;\n            }\n\
    \        }\n    }\n    std::string res = os.str();\n    res.pop_back();\n    return\
    \ res;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmppr54q1yt: /tmp/tmppr54q1yt.cpp:43: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115009
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    char nums[10][10] = {\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    int pos = 0;\n    int\
    \ temparr[100];\n    std::stringstream ss(numbers);\n    std::string word;\n \
    \   while(ss >> word) {\n        int i;\n        for(i = 0; i < 10; i++) {\n \
    \           if(word == nums[i]) {\n                temparr[pos] = i;\n       \
    \         pos++;\n                break;\n            }\n        }\n    }\n  \
    \  std::sort(temparr, temparr + pos);\n    std::string sorted;\n    for(int i\
    \ = 0; i < pos; i++) {\n        if(i == pos - 1) {\n            sorted = sorted\
    \ + nums[temparr[i]];\n        } else {\n            sorted = sorted + nums[temparr[i]]\
    \ + \" \";\n        }\n    }\n    return sorted;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115009
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<std::string> words;\n\tint n = 0;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tif (numbers[i] == ' ') {\n\t\t\twords.push_back(numbers.substr(n,\
    \ i - n));\n\t\t\tn = i + 1;\n\t\t}\n\t}\n\twords.push_back(numbers.substr(n,\
    \ numbers.size() - n));\n\tstd::sort(words.begin(), words.end());\n\tstd::string\
    \ ret = \"\";\n\tfor (int i = 0; i < words.size(); i++) {\n\t\tret += words[i];\n\
    \t\tif (i != words.size() - 1) {\n\t\t\tret += \" \";\n\t\t}\n\t}\n\treturn ret;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpgxam_yc0: /tmp/tmpgxam_yc0.cpp:32: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660115009
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string newstr;\n    std::vector<int> nums;\n    std::stringstream\
    \ ss(numbers);\n    std::string word;\n    while(ss >> word) {\n        if(word\
    \ == \"zero\") nums.push_back(0);\n        else if(word == \"one\") nums.push_back(1);\n\
    \        else if(word == \"two\") nums.push_back(2);\n        else if(word ==\
    \ \"three\") nums.push_back(3);\n        else if(word == \"four\") nums.push_back(4);\n\
    \        else if(word == \"five\") nums.push_back(5);\n        else if(word ==\
    \ \"six\") nums.push_back(6);\n        else if(word == \"seven\") nums.push_back(7);\n\
    \        else if(word == \"eight\") nums.push_back(8);\n        else if(word ==\
    \ \"nine\") nums.push_back(9);\n    }\n    sort(nums.begin(), nums.end());\n \
    \   for(int i=0; i<nums.size(); i++) {\n        if(nums[i] == 0) newstr.append(\"\
    zero \");\n        else if(nums[i] == 1) newstr.append(\"one \");\n        else\
    \ if(nums[i] == 2) newstr.append(\"two \");\n        else if(nums[i] == 3) newstr.append(\"\
    three \");\n        else if(nums[i] == 4) newstr.append(\"four \");\n        else\
    \ if(nums[i] == 5) newstr.append(\"five \");\n        else if(nums[i] == 6) newstr.append(\"\
    six \");\n        else if(nums[i] == 7) newstr.append(\"seven \");\n        else\
    \ if(nums[i] == 8) newstr.append(\"eight \");\n        else if(nums[i] == 9) newstr.append(\"\
    nine \");\n    }\n    return newstr;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpyif6ks8o: /tmp/tmpyif6ks8o.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115009
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> numberMap = {\n        {\"zero\", 0},\n  \
    \      {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n       \
    \ {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\"\
    , 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<int>\
    \ numbersParsed;\n    std::stringstream ss(numbers);\n    std::string word;\n\
    \    while (ss >> word) {\n        numbersParsed.push_back(numberMap[word]);\n\
    \    }\n    std::sort(numbersParsed.begin(), numbersParsed.end());\n    std::string\
    \ output = \"\";\n    for (int number : numbersParsed) {\n        for (auto& kv\
    \ : numberMap) {\n            if (kv.second == number) {\n                output\
    \ += kv.first + \" \";\n            }\n        }\n    }\n    return output.substr(0,\
    \ output.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115010
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // Return a string of the numbers sorted in ascending order\n    assert(false);\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpskg0_x5x: /tmp/tmpskg0_x5x.cpp:10: std::string sort_numbers(std::string):
    Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660115009
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::unordered_map<std::string, int> dict;\n    dict[\"zero\"] = 0;\n\
    \    dict[\"one\"] = 1;\n    dict[\"two\"] = 2;\n    dict[\"three\"] = 3;\n  \
    \  dict[\"four\"] = 4;\n    dict[\"five\"] = 5;\n    dict[\"six\"] = 6;\n    dict[\"\
    seven\"] = 7;\n    dict[\"eight\"] = 8;\n    dict[\"nine\"] = 9;\n    std::vector<int>\
    \ nums;\n    std::stringstream ss(numbers);\n    std::string temp;\n    while\
    \ (ss >> temp) {\n        nums.push_back(dict[temp]);\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::string new_num;\n    for (auto num : nums) {\n      \
    \  for (auto &elem : dict) {\n            if (elem.second == num) {\n        \
    \        new_num += elem.first + \" \";\n            }\n        }\n    }\n   \
    \ new_num.pop_back();\n    return new_num;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmptpq4naek: /tmp/tmptpq4naek.cpp:40: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115010
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> num;\n    std::stringstream stream(numbers);\n    std::string\
    \ word;\n    while (stream >> word) {\n        std::string s = \"\";\n       \
    \ int index = 0;\n        while (index < word.length()) {\n            if (word[index]\
    \ == 'z') {\n                s += \"0\";\n            } else if (word[index] ==\
    \ 'o') {\n                s += \"1\";\n            } else if (word[index] == 't')\
    \ {\n                s += \"2\";\n            } else if (word[index] == 'h') {\n\
    \                s += \"3\";\n            } else if (word[index] == 'f') {\n \
    \               s += \"4\";\n            } else if (word[index] == 'i') {\n  \
    \              s += \"5\";\n            } else if (word[index] == 's') {\n   \
    \             s += \"6\";\n            } else if (word[index] == 'e') {\n    \
    \            s += \"7\";\n            } else if (word[index] == 'n') {\n     \
    \           s += \"9\";\n            }\n            index++;\n        }\n    \
    \    num.push_back(stoi(s));\n    }\n    std::sort(num.begin(), num.end());\n\
    \    std::string result = \"\";\n    for (int i = 0; i < num.size(); i++) {\n\
    \        if (num[i] == 0) {\n            result += \"zero \";\n        } else\
    \ if (num[i] == 1) {\n            result += \"one \";\n        } else if (num[i]\
    \ == 2) {\n            result += \"two \";\n        } else if (num[i] == 3) {\n\
    \            result += \"three \";\n        } else if (num[i] == 4) {\n      \
    \      result += \"four \";\n        } else if (num[i] == 5) {\n            result\
    \ += \"five \";\n        } else if (num[i] == 6) {\n            result += \"six\
    \ \";\n        } else if (num[i] == 7) {\n            result += \"seven \";\n\
    \        } else if (num[i] ==\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4jxe80y.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpb4jxe80y.cpp:59:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   59 | }\n      | ^\n/tmp/tmpb4jxe80y.cpp:58:29: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   58 |         } else if (num[i]\
    \ ==\n      |                   ~         ^\n      |                         \
    \    )\n   59 | }\n      | ~                            \n/tmp/tmpb4jxe80y.cpp:59:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n \
    \     | ^\n/tmp/tmpb4jxe80y.cpp:60:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   60 | int main() {\n      |            ^\n\
    /tmp/tmpb4jxe80y.cpp:67:1: error: expected \u2018}\u2019 at end of input\n   67\
    \ | }\n      | ^\n/tmp/tmpb4jxe80y.cpp:8:47: note: to match this \u2018{\u2019\
    \n    8 | std::string sort_numbers(std::string numbers) {\n      |           \
    \                                    ^\n/tmp/tmpb4jxe80y.cpp:67:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   67 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660115009
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> num = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int>\
    \ digits;\n    std::istringstream iss(numbers);\n    for (std::string n; iss >>\
    \ n; ) {\n        for (size_t i = 0; i < num.size(); i++) {\n            if (n\
    \ == num[i]) {\n                digits.push_back(i);\n                break;\n\
    \            }\n        }\n    }\n    sort(digits.begin(), digits.end());\n  \
    \  std::stringstream out;\n    for (auto it = digits.begin(); it != digits.end();\
    \ it++) {\n        out << num[*it] << \" \";\n    }\n    std::string result =\
    \ out.str();\n    result.pop_back();\n    return result;\n}\nint main() {\n  \
    \  auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpmi66af5c: /tmp/tmpmi66af5c.cpp:31: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115010
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // default to zero\n    if (numbers.empty()) {\n        return \"zero\"\
    ;\n    }\n    std::vector<std::string> words;\n    std::istringstream iss(numbers);\n\
    \    do {\n        std::string word;\n        iss >> word;\n        if (word.empty())\
    \ {\n            break;\n        }\n        else {\n            words.push_back(word);\n\
    \        }\n    } while (true);\n    if (words.size() == 1) {\n        return\
    \ words[0];\n    }\n    std::vector<int> numbers_list;\n    // error\n    std::map<std::string,\
    \ int> number_mapping = {\n        {\"zero\", 0},\n        {\"one\", 1},\n   \
    \     {\"two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n       \
    \ {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"\
    eight\", 8},\n        {\"nine\", 9}\n    };\n    for (std::string word : words)\
    \ {\n        if (number_mapping.find(word) == number_mapping.end()) {\n      \
    \      return \"error\";\n        }\n        else {\n            numbers_list.push_back(number_mapping[word]);\n\
    \        }\n    }\n    std::sort(numbers_list.begin(), numbers_list.end());\n\
    \    std::vector<std::string> result;\n    for (int num : numbers_list) {\n  \
    \      for (auto it : number_mapping) {\n            if (it.second == num) {\n\
    \                result.push_back(it.first);\n                break;\n       \
    \     }\n        }\n    }\n    std::string final_result;\n    for (std::string\
    \ word : result) {\n        final_result += word + \" \";\n    }\n    return final_result.substr(0,\
    \ final_result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmprg5jufxv: /tmp/tmprg5jufxv.cpp:68: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115010
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  // find the number of digits in the numbers string\n  int n = numbers.length();\n\
    \  // vector to store the numbers in\n  std::vector<int> nums(n);\n  // pointer\
    \ to the start of the next number\n  int p = 0;\n  // indices of the numbers vector\n\
    \  int i = 0;\n  // while there are still digits in the numbers string\n  while\
    \ (p < n) {\n    // find where the next number ends\n    int q = numbers.find(\"\
    \ \", p);\n    // if this is the last number\n    if (q == std::string::npos)\
    \ {\n      // then the end is just the end of the string\n      q = n;\n    }\n\
    \    // get the substring corresponding to the next number\n    std::string num_str\
    \ = numbers.substr(p, q - p);\n    // convert the substring to a number\n    int\
    \ num = 0;\n    if (num_str == \"zero\") {\n      num = 0;\n    } else if (num_str\
    \ == \"one\") {\n      num = 1;\n    } else if (num_str == \"two\") {\n      num\
    \ = 2;\n    } else if (num_str == \"three\") {\n      num = 3;\n    } else if\
    \ (num_str == \"four\") {\n      num = 4;\n    } else if (num_str == \"five\"\
    ) {\n      num = 5;\n    } else if (num_str == \"six\") {\n      num = 6;\n  \
    \  } else if (num_str == \"seven\") {\n      num = 7;\n    } else if (num_str\
    \ == \"eight\") {\n      num = 8;\n    } else if (num_str == \"nine\") {\n   \
    \   num = 9;\n    } else {\n      // The string could not be converted to a number,\
    \ fail\n      assert(false);\n    }\n    // add the number to the nums vector\n\
    \    nums[i] = num;\n    // increment the numbers vector index\n    i += 1;\n\
    \    // move the pointer to the start of the next number\n    p = q + 1;\n  }\n\
    \  // sort the numbers vector\n  std::sort(nums\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl7k8ozti.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpl7k8ozti.cpp:62:17: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   62 |   std::sort(nums\n      |            ~    ^\n      |        \
    \         )\n   63 | }\n      | ~                \n/tmp/tmpl7k8ozti.cpp:63:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660115009
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::map<std::string, int> number_map = {{\"zero\", 0}, {\"one\", 1}, {\"\
    two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\"\
    , 7}, {\"eight\", 8}, {\"nine\", 9}};\n  std::vector<int> the_numbers;\n  std::stringstream\
    \ ss(numbers);\n  std::string num;\n  while (ss >> num) {\n    the_numbers.push_back(number_map[num]);\n\
    \  }\n  std::sort(the_numbers.begin(), the_numbers.end());\n  std::string sorted_numbers;\n\
    \  for (int i = 0; i < the_numbers.size(); i++) {\n    switch (the_numbers[i])\
    \ {\n      case 0: sorted_numbers += \"zero \"; break;\n      case 1: sorted_numbers\
    \ += \"one \"; break;\n      case 2: sorted_numbers += \"two \"; break;\n    \
    \  case 3: sorted_numbers += \"three \"; break;\n      case 4: sorted_numbers\
    \ += \"four \"; break;\n      case 5: sorted_numbers += \"five \"; break;\n  \
    \    case 6: sorted_numbers += \"six \"; break;\n      case 7: sorted_numbers\
    \ += \"seven \"; break;\n      case 8: sorted_numbers += \"eight \"; break;\n\
    \      case 9: sorted_numbers += \"nine \"; break;\n    }\n  }\n  return sorted_numbers.substr(0,\
    \ sorted_numbers.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115010
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string result;\n    int i,j;\n    std::string str=numbers;\n   \
    \ std::string arr[100];\n    int len=str.length();\n    int count=0;\n    for(i=0;i<len;i++)\n\
    \    {\n        if(str[i]==' ')\n        {\n            count++;\n        }\n\
    \    }\n    count++;\n    int pos1=0,pos2=0;\n    for(i=0;i<count;i++)\n    {\n\
    \        std::string temp;\n        for(j=pos1;j<len;j++)\n        {\n       \
    \     if(str[j]==' ')\n            {\n                pos2=j;\n              \
    \  break;\n            }\n        }\n        for(j=pos1;j<pos2;j++)\n        {\n\
    \            temp=temp+str[j];\n        }\n        pos1=pos2+1;\n        arr[i]=temp;\n\
    \    }\n    std::string sarr[10]={\"zero\",\"one\",\"two\",\"three\",\"four\"\
    ,\"five\",\"six\",\"seven\",\"eight\",\"nine\"};\n    int n[10];\n    for(i=0;i<count;i++)\n\
    \    {\n        for(j=0;j<10;j++)\n        {\n            if(arr[i]==sarr[j])\n\
    \            {\n                n[i]=j;\n                break;\n            }\n\
    \        }\n    }\n    for(i=0;i<count;i++)\n    {\n        for(j=i+1;j<count;j++)\n\
    \        {\n            if(n[i]>n[j])\n            {\n                int temp=n[i];\n\
    \                n[i]=n[j];\n                n[j]=temp;\n            }\n     \
    \   }\n    }\n    for(i=0;i<count;i++)\n    {\n        result=result+sarr[n[i]]+\"\
    \ \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660115010
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream stream(numbers);\n    std::string num;\n    std::vector<int>\
    \ nums;\n    std::map<std::string, int> dict{{\"zero\", 0}, {\"one\", 1}, {\"\
    two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\"\
    , 7}, {\"eight\", 8}, {\"nine\", 9}};\n    while (stream >> num) {\n        nums.push_back(dict[num]);\n\
    \    }\n    std::sort(nums.begin(), nums.end());\n    std::string result = \"\"\
    ;\n    for (auto num : nums) {\n        for (auto i : dict) {\n            if\
    \ (i.second == num) {\n                result += i.first + \" \";\n          \
    \  }\n        }\n    }\n    return result.substr(0, result.size() - 1);\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115010
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\treturn numbers;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpszjf_8mb: /tmp/tmpszjf_8mb.cpp:16: int main(): Assertion `candidate(("five
    zero four seven nine eight")) == ("zero four five seven eight nine")'' failed.

    '
  stdout: ''
  timestamp: 1660115010
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  int number;\n  std::map<int, std::string> map;\n  std::stringstream ss(numbers);\n\
    \  std::string word;\n  while (ss >> word) {\n    if (word == \"zero\") {\n  \
    \    number = 0;\n    } else if (word == \"one\") {\n      number = 1;\n    }\
    \ else if (word == \"two\") {\n      number = 2;\n    } else if (word == \"three\"\
    ) {\n      number = 3;\n    } else if (word == \"four\") {\n      number = 4;\n\
    \    } else if (word == \"five\") {\n      number = 5;\n    } else if (word ==\
    \ \"six\") {\n      number = 6;\n    } else if (word == \"seven\") {\n      number\
    \ = 7;\n    } else if (word == \"eight\") {\n      number = 8;\n    } else if\
    \ (word == \"nine\") {\n      number = 9;\n    }\n    map[number] = word;\n  }\n\
    \  std::string result;\n  for (auto it = map.begin(); it != map.end(); it++) {\n\
    \    result += it->second + \" \";\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpu9d59i2c: /tmp/tmpu9d59i2c.cpp:46: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115010
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> numberMap{\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int>\
    \ number{};\n    std::istringstream iss(numbers);\n    std::string line;\n   \
    \ while (std::getline(iss, line, ' ')) {\n        number.push_back(std::distance(numberMap.begin(),\
    \ std::find(numberMap.begin(), numberMap.end(), line)));\n    }\n    std::sort(number.begin(),\
    \ number.end());\n    std::string result{\"\"};\n    for (int i : number) {\n\
    \        result += numberMap[i] + \" \";\n    }\n    return result.substr(0, result.size()\
    \ - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115010
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string listOfNumberals[10] = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    std::vector<int>\
    \ v;\n    std::istringstream ss(numbers);\n    std::string word;\n    while (ss\
    \ >> word) {\n        for (int i = 0; i < 10; i++) {\n            if (word ==\
    \ listOfNumberals[i]) {\n                v.push_back(i);\n            }\n    \
    \    }\n    }\n    sort(v.begin(), v.end());\n    std::string ans = \"\";\n  \
    \  for (int i = 0; i < v.size(); i++) {\n        ans += listOfNumberals[v[i]]\
    \ + \" \";\n    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpieck6khs: /tmp/tmpieck6khs.cpp:30: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::string str = \"zero one two three four five six seven eight nine\"\
    ;\n\tstd::stringstream ss(str);\n\tstd::vector<std::string> v(10);\n\tfor (int\
    \ i = 0; i < 10; i++)\n\t\tss >> v[i];\n\tstd::vector<int> cnt(10, 0);\n\tstd::vector<std::string>\
    \ w;\n\tstd::stringstream str1(numbers);\n\tstd::string word;\n\twhile (str1 >>\
    \ word)\n\t\tw.push_back(word);\n\tint sz = w.size();\n\tfor (int i = 0; i < sz;\
    \ i++) {\n\t\tfor (int j = 0; j < 10; j++) {\n\t\t\tif (w[i] == v[j])\n\t\t\t\t\
    cnt[j]++;\n\t\t}\n\t}\n\tstd::string ans = \"\";\n\tfor (int i = 0; i < 10; i++)\
    \ {\n\t\twhile (cnt[i] > 0) {\n\t\t\tans += v[i] + \" \";\n\t\t\tcnt[i]--;\n\t\
    \t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpb64w_lhs: /tmp/tmpb64w_lhs.cpp:39: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115011
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> wordToDigit = {\n        {\"zero\", 0},\n\
    \        {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n     \
    \   {\"four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"\
    seven\", 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::istringstream\
    \ iss(numbers);\n    std::vector<int> digits;\n    std::string word;\n    while\
    \ (iss >> word) {\n        digits.push_back(wordToDigit[word]);\n    }\n    std::sort(digits.begin(),\
    \ digits.end());\n    std::map<int, std::string> digitToWord = {\n        {0,\
    \ \"zero\"},\n        {1, \"one\"},\n        {2, \"two\"},\n        {3, \"three\"\
    },\n        {4, \"four\"},\n        {5, \"five\"},\n        {6, \"six\"},\n  \
    \      {7, \"seven\"},\n        {8, \"eight\"},\n        {9, \"nine\"}\n    };\n\
    \    std::string result;\n    for (int i = 0; i < digits.size(); i++) {\n    \
    \    result += digitToWord[digits[i]];\n        if (i != digits.size() - 1) result\
    \ += \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> num_map = {\n        {\"zero\", 0},\n    \
    \    {\"one\", 1},\n        {\"two\", 2},\n        {\"three\", 3},\n        {\"\
    four\", 4},\n        {\"five\", 5},\n        {\"six\", 6},\n        {\"seven\"\
    , 7},\n        {\"eight\", 8},\n        {\"nine\", 9}\n    };\n    std::vector<int>\
    \ num_vec;\n    std::stringstream ss(numbers);\n    std::string temp;\n    while\
    \ (ss >> temp) {\n        if (num_map.find(temp) != num_map.end()) {\n       \
    \     num_vec.push_back(num_map[temp]);\n        }\n    }\n    std::sort(num_vec.begin(),\
    \ num_vec.end());\n    std::string result;\n    for (int i = 0; i < num_vec.size();\
    \ i++) {\n        result += std::to_string(num_vec[i]);\n        if (i != num_vec.size()\
    \ - 1) {\n            result += \" \";\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpio7y_9g5: /tmp/tmpio7y_9g5.cpp:42: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> nums;\n    std::string temp = \"\";\n    int\
    \ idx = 0;\n    while(idx < numbers.length()) {\n        if(numbers[idx] == '\
    \ ') {\n            nums.push_back(temp);\n            temp = \"\";\n        }\
    \ else {\n            temp += numbers[idx];\n        }\n        idx++;\n    }\n\
    \    if(temp != \"\") nums.push_back(temp);\n    // std::sort(nums.begin(), nums.end());\n\
    \    int len = nums.size();\n    for(int i = 0; i < len; i++) {\n        for(int\
    \ j = 0; j < len - i - 1; j++) {\n            if(nums[j] > nums[j + 1]) {\n  \
    \              std::string temp = nums[j];\n                nums[j] = nums[j +\
    \ 1];\n                nums[j + 1] = temp;\n            }\n        }\n    }\n\
    \    std::string result = \"\";\n    for(int i = 0; i < len; i++) {\n        result\
    \ += nums[i];\n        if(i != len - 1) result += \" \";\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp4vcbga7c: /tmp/tmp4vcbga7c.cpp:44: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660115011
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::istringstream iss(numbers);\n    std::map<std::string, size_t> number_map\
    \ = {{\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\
    \ {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n\
    \    std::vector<size_t> results;\n    std::string token;\n    while (iss >> token)\
    \ {\n        results.push_back(number_map[token]);\n    }\n    std::sort(results.begin(),\
    \ results.end());\n    std::string out_string;\n    for (auto it = results.begin();\
    \ it != results.end(); ++it) {\n        if (it != results.begin()) {\n       \
    \     out_string += \" \";\n        }\n        switch (*it) {\n            case\
    \ 0:\n                out_string += \"zero\";\n                break;\n      \
    \      case 1:\n                out_string += \"one\";\n                break;\n\
    \            case 2:\n                out_string += \"two\";\n               \
    \ break;\n            case 3:\n                out_string += \"three\";\n    \
    \            break;\n            case 4:\n                out_string += \"four\"\
    ;\n                break;\n            case 5:\n                out_string +=\
    \ \"five\";\n                break;\n            case 6:\n                out_string\
    \ += \"six\";\n                break;\n            case 7:\n                out_string\
    \ += \"seven\";\n                break;\n            case 8:\n               \
    \ out_string += \"eight\";\n                break;\n            case 9:\n    \
    \            out_string += \"nine\";\n                break;\n            default:\n\
    \                out_string += \"\";\n                break;\n        }\n    }\n\
    \    return out_string;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::stringstream iss(numbers);\n  std::vector<std::string> nums;\n  std::string\
    \ num;\n  while (iss >> num)\n    nums.push_back(num);\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::string result;\n  for (auto& word : nums)\n    result +=\
    \ word + \" \";\n  return result.substr(0, result.size() - 1);\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp6d60k7hk: /tmp/tmp6d60k7hk.cpp:24: int main(): Assertion `candidate(("three
    five nine")) == ("three five nine")'' failed.

    '
  stdout: ''
  timestamp: 1660115011
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // ToDo: Write your code here\n    std::string delimiter = \" \";\n \
    \   std::string token;\n    size_t pos = 0;\n    int count = 0;\n    std::vector<int>\
    \ num;\n    while ((pos = numbers.find(delimiter)) != std::string::npos) {\n \
    \       token = numbers.substr(0, pos);\n        if(token == \"zero\"){\n    \
    \        num.push_back(0);\n        }\n        else if(token == \"one\"){\n  \
    \          num.push_back(1);\n        }\n        else if(token == \"two\"){\n\
    \            num.push_back(2);\n        }\n        else if(token == \"three\"\
    ){\n            num.push_back(3);\n        }\n        else if(token == \"four\"\
    ){\n            num.push_back(4);\n        }\n        else if(token == \"five\"\
    ){\n            num.push_back(5);\n        }\n        else if(token == \"six\"\
    ){\n            num.push_back(6);\n        }\n        else if(token == \"seven\"\
    ){\n            num.push_back(7);\n        }\n        else if(token == \"eight\"\
    ){\n            num.push_back(8);\n        }\n        else if(token == \"nine\"\
    ){\n            num.push_back(9);\n        }\n        numbers.erase(0, pos + delimiter.length());\n\
    \    }\n    if(numbers == \"zero\"){\n        num.push_back(0);\n    }\n    else\
    \ if(numbers == \"one\"){\n        num.push_back(1);\n    }\n    else if(numbers\
    \ == \"two\"){\n        num.push_back(2);\n    }\n    else if(numbers == \"three\"\
    ){\n        num.push_back(3);\n    }\n    else if(numbers == \"four\"){\n    \
    \    num.push_back(4);\n    }\n    else if(numbers == \"five\"){\n        num.push_back(5);\n\
    \    }\n    else if(numbers == \"six\"){\n        num\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp83_znqbe.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp83_znqbe.cpp:68:12: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   68 |         num\n      |            ^\n      |            ;\n   69\
    \ | }\n      | ~           \n/tmp/tmp83_znqbe.cpp:70:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   70 | int main() {\n     \
    \ |            ^\n/tmp/tmp83_znqbe.cpp:77:1: error: expected \u2018}\u2019 at\
    \ end of input\n   77 | }\n      | ^\n/tmp/tmp83_znqbe.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmp83_znqbe.cpp:77:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   77 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115010
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream input(numbers);\n\tstd::map<std::string, int> m{ {\"\
    zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4},\n\t\t\t\
    \t\t\t\t\t  {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\"\
    , 9} };\n\tstd::vector<int> v;\n\tstd::string word;\n\twhile (input >> word) {\n\
    \t\tv.push_back(m[word]);\n\t}\n\tstd::sort(v.begin(), v.end());\n\tstd::string\
    \ ret = \"\";\n\tfor (int i = 0; i < v.size(); i++) {\n\t\tret += std::to_string(v[i])\
    \ + \" \";\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpstkefc6w: /tmp/tmpstkefc6w.cpp:27: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::stringstream ss(numbers);\n\tstd::vector<int> nums;\n\tint c;\n\t\
    while (ss >> c)\n\t\tnums.push_back(c);\n\tstd::sort(nums.begin(), nums.end());\n\
    \tstd::stringstream ss2;\n\tfor (int c : nums)\n\t\tss2 << c << \" \";\n\treturn\
    \ ss2.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpn8hyzig1: /tmp/tmpn8hyzig1.cpp:23: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115011
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::string numArr[9] = {\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n\tstd::istringstream iss(numbers);\n\
    \tstd::string word;\n\tint mapping[10] = {0};\n\tint array[10] = {0};\n\twhile(iss\
    \ >> word) {\n\t\tfor(int i = 0; i < 10; i++) {\n\t\t\tif(word == numArr[i]) {\n\
    \t\t\t\tarray[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < 10; i++) {\n\t\t\
    for(int j = 0; j < array[i]; j++) {\n\t\t\tstd::cout << numArr[i] << \" \";\n\t\
    \t}\n\t}\n\tstd::cout << std::endl;\n\treturn \"\";\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpao556_2n.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpao556_2n.cpp:9:105: error: too many initializers for \u2018std::string\
    \ [9]\u2019 {aka \u2018std::__cxx11::basic_string<char> [9]\u2019}\n    9 |  std::string\
    \ numArr[9] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\"};\n      |                                  \
    \                                                                       ^\n"
  stdout: ''
  timestamp: 1660115010
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string result = \"\";\n    std::vector<int> num_v;\n    std::vector<std::string>\
    \ str_v;\n    std::istringstream ss(numbers);\n    do {\n        std::string sub;\n\
    \        ss >> sub;\n        str_v.push_back(sub);\n        if (sub == \"zero\"\
    ) {\n            num_v.push_back(0);\n        } else if (sub == \"one\") {\n \
    \           num_v.push_back(1);\n        } else if (sub == \"two\") {\n      \
    \      num_v.push_back(2);\n        } else if (sub == \"three\") {\n         \
    \   num_v.push_back(3);\n        } else if (sub == \"four\") {\n            num_v.push_back(4);\n\
    \        } else if (sub == \"five\") {\n            num_v.push_back(5);\n    \
    \    } else if (sub == \"six\") {\n            num_v.push_back(6);\n        }\
    \ else if (sub == \"seven\") {\n            num_v.push_back(7);\n        } else\
    \ if (sub == \"eight\") {\n            num_v.push_back(8);\n        } else if\
    \ (sub == \"nine\") {\n            num_v.push_back(9);\n        } else {\n   \
    \         assert(0);\n        }\n    } while (ss);\n    std::sort(num_v.begin(),\
    \ num_v.end());\n    for (int i = 0; i < num_v.size(); i++) {\n        int num\
    \ = num_v[i];\n        switch (num) {\n            case 0:\n                result\
    \ += \"zero \";\n                break;\n            case 1:\n               \
    \ result += \"one \";\n                break;\n            case 2:\n         \
    \       result += \"two \";\n                break;\n            case 3:\n   \
    \             result += \"three \";\n                break;\n            case\
    \ 4:\n                result += \"four \";\n                break;\n         \
    \   case 5:\n                result += \"five \";\n                break;\n  \
    \          case 6:\n                result += \"six \";\n                break;\n\
    \           \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc72hddqj.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpc72hddqj.cpp:68:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   68 | int main() {\n      |            ^\n/tmp/tmpc72hddqj.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmpc72hddqj.cpp:42:44:\
    \ note: to match this \u2018{\u2019\n   42 |     for (int i = 0; i < num_v.size();\
    \ i++) {\n      |                                            ^\n/tmp/tmpc72hddqj.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmpc72hddqj.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpc72hddqj.cpp:75:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   75 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660115011
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string result;\n    std::vector<int> sorted_numbers;\n    std::stringstream\
    \ ss(numbers);\n    std::string temp;\n    while (ss >> temp) {\n        if (temp\
    \ == \"zero\") {\n            sorted_numbers.push_back(0);\n        } else if\
    \ (temp == \"one\") {\n            sorted_numbers.push_back(1);\n        } else\
    \ if (temp == \"two\") {\n            sorted_numbers.push_back(2);\n        }\
    \ else if (temp == \"three\") {\n            sorted_numbers.push_back(3);\n  \
    \      } else if (temp == \"four\") {\n            sorted_numbers.push_back(4);\n\
    \        } else if (temp == \"five\") {\n            sorted_numbers.push_back(5);\n\
    \        } else if (temp == \"six\") {\n            sorted_numbers.push_back(6);\n\
    \        } else if (temp == \"seven\") {\n            sorted_numbers.push_back(7);\n\
    \        } else if (temp == \"eight\") {\n            sorted_numbers.push_back(8);\n\
    \        } else if (temp == \"nine\") {\n            sorted_numbers.push_back(9);\n\
    \        }\n    }\n    std::sort(sorted_numbers.begin(), sorted_numbers.end());\n\
    \    std::string num_map[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    for (int num : sorted_numbers)\
    \ {\n        result += (num_map[num] + \" \");\n    }\n    return result.substr(0,\
    \ result.size() - 1);\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115011
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstring nums = \"zero one two three four five six seven eight nine ten\"\
    ;\n\tint pos = numbers.find(' ');\n\tvector<string> num_arr;\n\twhile (pos !=\
    \ string::npos) {\n\t\tstring temp = numbers.substr(0, pos);\n\t\tnum_arr.push_back(temp);\n\
    \t\tnumbers = numbers.substr(pos + 1);\n\t\tpos = numbers.find(' ');\n\t}\n\t\
    num_arr.push_back(numbers);\n\tint n = num_arr.size();\n\tint val[n];\n\tfor (int\
    \ i = 0; i < n; i++) {\n\t\tint pos = nums.find(num_arr[i]);\n\t\tval[i] = pos\
    \ / 4;\n\t}\n\tsort(val, val + n);\n\tfor (int i = 0; i < n; i++) {\n\t\tnum_arr[i]\
    \ = nums.substr(val[i] * 4, 4);\n\t}\n\tstring result = \"\";\n\tfor (int i =\
    \ 0; i < n; i++) {\n\t\tresult += num_arr[i];\n\t\tif (i != n - 1) {\n\t\t\tresult\
    \ += \" \";\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxyp8fgk.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpfxyp8fgk.cpp:9:2: error: \u2018string\u2019 was not declared in this\
    \ scope\n    9 |  string nums = \"zero one two three four five six seven eight\
    \ nine ten\";\n      |  ^~~~~~\n/tmp/tmpfxyp8fgk.cpp:9:2: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfxyp8fgk.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfxyp8fgk.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpfxyp8fgk.cpp:11:2: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   11 |  vector<string> num_arr;\n      |  ^~~~~~\n/tmp/tmpfxyp8fgk.cpp:11:2:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++."
  stdout: ''
  timestamp: 1660115010
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  // TODO: implement me\n  std::string result;\n  std::stringstream ss(numbers);\n\
    \  std::string word;\n  int num_map[10] = {0};\n  while(ss >> word) {\n    if(word\
    \ == \"zero\") {\n      num_map[0] += 1;\n    } else if(word == \"one\") {\n \
    \     num_map[1] += 1;\n    } else if(word == \"two\") {\n      num_map[2] +=\
    \ 1;\n    } else if(word == \"three\") {\n      num_map[3] += 1;\n    } else if(word\
    \ == \"four\") {\n      num_map[4] += 1;\n    } else if(word == \"five\") {\n\
    \      num_map[5] += 1;\n    } else if(word == \"six\") {\n      num_map[6] +=\
    \ 1;\n    } else if(word == \"seven\") {\n      num_map[7] += 1;\n    } else if(word\
    \ == \"eight\") {\n      num_map[8] += 1;\n    } else if(word == \"nine\") {\n\
    \      num_map[9] += 1;\n    }\n  }\n  for(int i = 0; i < 10; i++) {\n    for(int\
    \ j = 0; j < num_map[i]; j++) {\n      if(i == 0) {\n        result.append(\"\
    zero \");\n      } else if(i == 1) {\n        result.append(\"one \");\n     \
    \ } else if(i == 2) {\n        result.append(\"two \");\n      } else if(i ==\
    \ 3) {\n        result.append(\"three \");\n      } else if(i == 4) {\n      \
    \  result.append(\"four \");\n      } else if(i == 5) {\n        result.append(\"\
    five \");\n      } else if(i == 6) {\n        result.append(\"six \");\n     \
    \ } else if(i == 7) {\n        result.append(\"seven \");\n      } else if(i ==\
    \ 8) {\n        result.append(\"eight \");\n      } else if(i == 9\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpewljsh_p.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpewljsh_p.cpp:57:23: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   57 |       } else if(i == 9\n      |                ~      ^\n   \
    \   |                       )\n   58 | }\n      | ~                      \n/tmp/tmpewljsh_p.cpp:58:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   58 | }\n \
    \     | ^\n/tmp/tmpewljsh_p.cpp:59:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   59 | int main() {\n      |            ^\n\
    /tmp/tmpewljsh_p.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66\
    \ | }\n      | ^\n/tmp/tmpewljsh_p.cpp:37:31: note: to match this \u2018{\u2019\
    \n   37 |   for(int i = 0; i < 10; i++) {\n      |                           \
    \    ^\n/tmp/tmpewljsh_p.cpp:66:1: error: expected \u2018}\u2019 at end of input\n\
    \   66 | }\n      | ^\n/tmp/tmpewljsh_p.cpp:8:47: note: to match this \u2018{\u2019\
    \n    8 | std::string sort_numbers(std::string numbers) {\n      |           \
    \                                    ^\n/tmp/tmpewljsh_p.cpp:66:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   66 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660115010
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    int num_array[numbers.length()];\n    std::string output;\n    std::string\
    \ temp;\n    for (int i = 0; i < numbers.length(); i++) {\n        if (numbers[i]\
    \ == ' ') {\n            continue;\n        }\n        else {\n            if\
    \ (numbers[i] == 'o') {\n                if (numbers[i+1] == 'n') {\n        \
    \            if (numbers[i+2] == 'e') {\n                        num_array[i]\
    \ = 1;\n                        i = i + 2;\n                    }\n          \
    \      }\n            }\n            else if (numbers[i] == 't') {\n         \
    \       if (numbers[i+1] == 'w') {\n                    if (numbers[i+2] == 'o')\
    \ {\n                        num_array[i] = 2;\n                        i = i\
    \ + 2;\n                    }\n                }\n            }\n            else\
    \ if (numbers[i] == 't') {\n                if (numbers[i+1] == 'h') {\n     \
    \               if (numbers[i+2] == 'r') {\n                        if (numbers[i+3]\
    \ == 'e') {\n                            if (numbers[i+4] == 'e') {\n        \
    \                        num_array[i] = 3;\n                                i\
    \ = i + 4;\n                            }\n                        }\n       \
    \             }\n                }\n            }\n            else if (numbers[i]\
    \ == 'f') {\n                if (numbers[i+1] == 'o') {\n                    if\
    \ (numbers[i+2] == 'u') {\n                        if (numbers[i+3] == 'r') {\n\
    \                            num_array[i] = 4;\n                            i\
    \ = i + 3;\n                        }\n                    }\n               \
    \ }\n            }\n            else if (numbers[i] == 'f') {\n              \
    \  if (numbers[i+1] == 'i') {\n                    if (numbers[i+2] == 'v') {\n\
    \                        if (numbers[i+3] == 'e') {\n                        \
    \    num_array[i] = 5;\n                            i =\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6fzr51uc.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp6fzr51uc.cpp:61:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   61 | }\n      | ^\n/tmp/tmp6fzr51uc.cpp:62:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   62 | int main() {\n     \
    \ |            ^\n/tmp/tmp6fzr51uc.cpp:69:1: error: expected \u2018}\u2019 at\
    \ end of input\n   69 | }\n      | ^\n/tmp/tmp6fzr51uc.cpp:57:46: note: to match\
    \ this \u2018{\u2019\n   57 |                     if (numbers[i+2] == 'v') {\n\
    \      |                                              ^\n/tmp/tmp6fzr51uc.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp6fzr51uc.cpp:56:42:\
    \ note: to match this \u2018{\u2019\n   56 |                 if (numbers[i+1]\
    \ == 'i') {\n      |                                          ^\n/tmp/tmp6fzr51uc.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp6fzr51uc.cpp:55:41:\
    \ note: to match this \u2018{\u2019\n   55 |             else if (numbers[i] ==\
    \ 'f') {\n      |                                         ^\n/tmp/tmp6fzr51uc.cpp:69:1:\
    \ error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp6fzr51uc.cpp:16:14:\
    \ note: to match this \u2018{\u2019\n   16 |         else {\n      |         \
    \     ^\n/tmp/tmp6fzr51uc.cpp:69:1: error: expected \u2018}\u2019 at end of input\n\
    \   69 | }\n      | ^\n/tmp/tmp6fzr51uc.cpp:12:48: note: to match this \u2018\
    {\u2019\n   12 |     for (int i = 0; i < numbers.length(); i++) {\n      |   \
    \                                             ^\n/tmp/tmp6fzr51uc.cpp:69:1: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmp6fzr51uc.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmp6fzr51uc.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115010
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    int n = numbers.size();\n    std::string res, s;\n    int freq[10] =\
    \ {0};\n    for(int i = 0; i < n; i++) {\n        if(numbers[i] == ' ') {\n  \
    \          int c = 0;\n            if(s == \"zero\") c = 0;\n            else\
    \ if(s == \"one\") c = 1;\n            else if(s == \"two\") c = 2;\n        \
    \    else if(s == \"three\") c = 3;\n            else if(s == \"four\") c = 4;\n\
    \            else if(s == \"five\") c = 5;\n            else if(s == \"six\")\
    \ c = 6;\n            else if(s == \"seven\") c = 7;\n            else if(s ==\
    \ \"eight\") c = 8;\n            else if(s == \"nine\") c = 9;\n            freq[c]++;\n\
    \            s = \"\";\n        }\n        else s += numbers[i];\n    }\n    int\
    \ c = 0;\n    if(s == \"zero\") c = 0;\n    else if(s == \"one\") c = 1;\n   \
    \ else if(s == \"two\") c = 2;\n    else if(s == \"three\") c = 3;\n    else if(s\
    \ == \"four\") c = 4;\n    else if(s == \"five\") c = 5;\n    else if(s == \"\
    six\") c = 6;\n    else if(s == \"seven\") c = 7;\n    else if(s == \"eight\"\
    ) c = 8;\n    else if(s == \"nine\") c = 9;\n    freq[c]++;\n    for(int i = 0;\
    \ i < 10; i++) {\n        for(int j = 0; j < freq[i]; j++) {\n            if(i\
    \ == 0) res += \"zero \";\n            else if(i == 1) res += \"one \";\n    \
    \        else if(i == 2) res += \"two \";\n            else if(i == 3) res +=\
    \ \"three \";\n            else if(i == 4) res += \"four \";\n            else\
    \ if(i == 5) res += \"five \"\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdlufaqqg.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpdlufaqqg.cpp:49:43: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   49 |             else if(i == 5) res += \"five \"\n      |       \
    \                                    ^\n      |                              \
    \             ;\n   50 | }\n      | ~                                        \
    \  \n/tmp/tmpdlufaqqg.cpp:51:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   51 | int main() {\n      |            ^\n/tmp/tmpdlufaqqg.cpp:58:1:\
    \ error: expected \u2018}\u2019 at end of input\n   58 | }\n      | ^\n/tmp/tmpdlufaqqg.cpp:42:33:\
    \ note: to match this \u2018{\u2019\n   42 |     for(int i = 0; i < 10; i++) {\n\
    \      |                                 ^\n/tmp/tmpdlufaqqg.cpp:58:1: error:\
    \ expected \u2018}\u2019 at end of input\n   58 | }\n      | ^\n/tmp/tmpdlufaqqg.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpdlufaqqg.cpp:58:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   58 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115010
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::map<std::string, int> dict = {{\"zero\", 0}, {\"one\", 1}, {\"two\"\
    , 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\",\
    \ 7}, {\"eight\", 8}, {\"nine\", 9}};\n    std::stringstream ss(numbers);\n  \
    \  std::vector<int> v;\n    std::string temp;\n    while(ss >> temp)\n       \
    \ v.push_back(dict[temp]);\n    std::sort(v.begin(), v.end());\n    std::string\
    \ res;\n    for(int i = 0; i < v.size(); i++)\n        res += std::to_string(v[i])\
    \ + \" \";\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp49y2ibut: /tmp/tmp49y2ibut.cpp:24: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> v;\n    std::istringstream iss(numbers);\n    std::string\
    \ number;\n    while (iss >> number) {\n        if (number == \"zero\") v.push_back(0);\n\
    \        else if (number == \"one\") v.push_back(1);\n        else if (number\
    \ == \"two\") v.push_back(2);\n        else if (number == \"three\") v.push_back(3);\n\
    \        else if (number == \"four\") v.push_back(4);\n        else if (number\
    \ == \"five\") v.push_back(5);\n        else if (number == \"six\") v.push_back(6);\n\
    \        else if (number == \"seven\") v.push_back(7);\n        else if (number\
    \ == \"eight\") v.push_back(8);\n        else if (number == \"nine\") v.push_back(9);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    std::vector<std::string>\
    \ string_v;\n    std::transform(v.begin(), v.end(), std::back_inserter(string_v),\n\
    \                   [](int i) { return std::to_string(i); });\n    for (auto i\
    \ = string_v.begin(); i != string_v.end(); ++i) {\n        if (i != string_v.begin())\
    \ result += \" \";\n        result += *i;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpasowwa3k: /tmp/tmpasowwa3k.cpp:38: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115011
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::string num,res;\n    int val[10];\n\
    \    while(ss>>num){\n        if(num == \"zero\") val[0]++;\n        else if(num\
    \ == \"one\") val[1]++;\n        else if(num == \"two\") val[2]++;\n        else\
    \ if(num == \"three\") val[3]++;\n        else if(num == \"four\") val[4]++;\n\
    \        else if(num == \"five\") val[5]++;\n        else if(num == \"six\") val[6]++;\n\
    \        else if(num == \"seven\") val[7]++;\n        else if(num == \"eight\"\
    ) val[8]++;\n        else if(num == \"nine\") val[9]++;\n    }\n    for(int i=0;i<10;i++){\n\
    \        while(val[i]!=0){\n            if(i==0) res+=\"zero \";\n           \
    \ else if(i==1) res+=\"one \";\n            else if(i==2) res+=\"two \";\n   \
    \         else if(i==3) res+=\"three \";\n            else if(i==4) res+=\"four\
    \ \";\n            else if(i==5) res+=\"five \";\n            else if(i==6) res+=\"\
    six \";\n            else if(i==7) res+=\"seven \";\n            else if(i==8)\
    \ res+=\"eight \";\n            else if(i==9) res+=\"nine \";\n            val[i]--;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660115016
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::vector<std::string> num_strings(numbers.begin(),\
    \ numbers.end());\n    std::vector<std::string>::iterator iter;\n    for (iter\
    \ = num_strings.begin(); iter != num_strings.end(); iter++) {\n        if (*iter\
    \ == \"zero\") {\n            nums.push_back(0);\n        } else if (*iter ==\
    \ \"one\") {\n            nums.push_back(1);\n        } else if (*iter == \"two\"\
    ) {\n            nums.push_back(2);\n        } else if (*iter == \"three\") {\n\
    \            nums.push_back(3);\n        } else if (*iter == \"four\") {\n   \
    \         nums.push_back(4);\n        } else if (*iter == \"five\") {\n      \
    \      nums.push_back(5);\n        } else if (*iter == \"six\") {\n          \
    \  nums.push_back(6);\n        } else if (*iter == \"seven\") {\n            nums.push_back(7);\n\
    \        } else if (*iter == \"eight\") {\n            nums.push_back(8);\n  \
    \      } else if (*iter == \"nine\") {\n            nums.push_back(9);\n     \
    \   }\n    }\n    std::sort(nums.begin(), nums.end());\n    std::string str;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] == 0) {\n  \
    \          str.append(\"zero \");\n        } else if (nums[i] == 1) {\n      \
    \      str.append(\"one \");\n        } else if (nums[i] == 2) {\n           \
    \ str.append(\"two \");\n        } else if (nums[i] == 3) {\n            str.append(\"\
    three \");\n        } else if (nums[i] == 4) {\n            str.append(\"four\
    \ \");\n        } else if (nums[i] == 5) {\n            str.append(\"five \");\n\
    \        } else if (nums[i] == 6) {\n            str.append(\"six \"\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgm7eppg5.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpgm7eppg5.cpp:51:30: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   51 |             str.append(\"six \"\n      |                    \
    \   ~      ^\n      |                              )\n   52 | }\n      | ~   \
    \                          \n/tmp/tmpgm7eppg5.cpp:53:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   53 | int main() {\n     \
    \ |            ^\n/tmp/tmpgm7eppg5.cpp:60:1: error: expected \u2018}\u2019 at\
    \ end of input\n   60 | }\n      | ^\n/tmp/tmpgm7eppg5.cpp:37:43: note: to match\
    \ this \u2018{\u2019\n   37 |     for (int i = 0; i < nums.size(); i++) {\n  \
    \    |                                           ^\n/tmp/tmpgm7eppg5.cpp:60:1:\
    \ error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmpgm7eppg5.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpgm7eppg5.cpp:60:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   60 | }\n      | ^\nIn file included from /usr/include/c++/9/vector:66,\n \
    \                from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgm7eppg5.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h:\
    \ In instantiation of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator,\
    \ _InputIterator, _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterato"
  stdout: ''
  timestamp: 1660115010
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> num;\n\tstd::stringstream stringToStream(numbers);\n\t\
    std::string nextElement;\n\twhile (stringToStream >> nextElement) {\n\t\tif (nextElement\
    \ == \"zero\")\n\t\t\tnum.push_back(0);\n\t\telse if (nextElement == \"one\")\n\
    \t\t\tnum.push_back(1);\n\t\telse if (nextElement == \"two\")\n\t\t\tnum.push_back(2);\n\
    \t\telse if (nextElement == \"three\")\n\t\t\tnum.push_back(3);\n\t\telse if (nextElement\
    \ == \"four\")\n\t\t\tnum.push_back(4);\n\t\telse if (nextElement == \"five\"\
    )\n\t\t\tnum.push_back(5);\n\t\telse if (nextElement == \"six\")\n\t\t\tnum.push_back(6);\n\
    \t\telse if (nextElement == \"seven\")\n\t\t\tnum.push_back(7);\n\t\telse if (nextElement\
    \ == \"eight\")\n\t\t\tnum.push_back(8);\n\t\telse if (nextElement == \"nine\"\
    )\n\t\t\tnum.push_back(9);\n\t}\n\tstd::sort(num.begin(), num.end());\n\tstd::string\
    \ ans = \"\";\n\tfor (int i = 0; i < num.size(); i++) {\n\t\tif (num[i] == 0)\n\
    \t\t\tans += \"zero \";\n\t\telse if (num[i] == 1)\n\t\t\tans += \"one \";\n\t\
    \telse if (num[i] == 2)\n\t\t\tans += \"two \";\n\t\telse if (num[i] == 3)\n\t\
    \t\tans += \"three \";\n\t\telse if (num[i] == 4)\n\t\t\tans += \"four \";\n\t\
    \telse if (num[i] == 5)\n\t\t\tans += \"five \";\n\t\telse if (num[i] == 6)\n\t\
    \t\tans += \"six \";\n\t\telse if (num[i] == 7)\n\t\t\tans += \"seven \";\n\t\t\
    \n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw__m9i7d.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpw__m9i7d.cpp:55:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   55 | int main() {\n      |            ^\n/tmp/tmpw__m9i7d.cpp:62:1:\
    \ error: expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmpw__m9i7d.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpw__m9i7d.cpp:62:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   62 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115011
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::map<std::string, int> nb_to_int;\n\tnb_to_int[\"zero\"] = 0;\n\tnb_to_int[\"\
    one\"] = 1;\n\tnb_to_int[\"two\"] = 2;\n\tnb_to_int[\"three\"] = 3;\n\tnb_to_int[\"\
    four\"] = 4;\n\tnb_to_int[\"five\"] = 5;\n\tnb_to_int[\"six\"] = 6;\n\tnb_to_int[\"\
    seven\"] = 7;\n\tnb_to_int[\"eight\"] = 8;\n\tnb_to_int[\"nine\"] = 9;\n\tstd::vector<int>\
    \ nums;\n\tstd::istringstream iss(numbers);\n\tstd::string token;\n\twhile (std::getline(iss,\
    \ token, ' '))\n\t\tnums.push_back(nb_to_int[token]);\n\tstd::sort(nums.begin(),\
    \ nums.end());\n\tstd::string res = \"\";\n\tfor (int i = 0; i < nums.size();\
    \ i++) {\n\t\tfor (auto& x : nb_to_int) {\n\t\t\tif (x.second == nums[i]) {\n\t\
    \t\t\tres += x.first;\n\t\t\t\tres += \" \";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn res.substr(0, res.size() - 1);\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<int> sortedNumbers;\n\tstd::stringstream ss(numbers);\n\tstd::string\
    \ number;\n\tstd::string sortedString;\n\tstd::map<std::string, int> numberMap\
    \ = {\n\t\t{\"zero\", 0},\n\t\t{\"one\", 1},\n\t\t{\"two\", 2},\n\t\t{\"three\"\
    , 3},\n\t\t{\"four\", 4},\n\t\t{\"five\", 5},\n\t\t{\"six\", 6},\n\t\t{\"seven\"\
    , 7},\n\t\t{\"eight\", 8},\n\t\t{\"nine\", 9}\n\t};\n\twhile (ss >> number) {\n\
    \t\tsortedNumbers.push_back(numberMap[number]);\n\t}\n\tstd::sort(sortedNumbers.begin(),\
    \ sortedNumbers.end());\n\tfor (int i : sortedNumbers) {\n\t\tswitch (i) {\n\t\
    \tcase 0:\n\t\t\tsortedString += \"zero \";\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\t\
    sortedString += \"one \";\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tsortedString += \"\
    two \";\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tsortedString += \"three \";\n\t\t\t\
    break;\n\t\tcase 4:\n\t\t\tsortedString += \"four \";\n\t\t\tbreak;\n\t\tcase\
    \ 5:\n\t\t\tsortedString += \"five \";\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tsortedString\
    \ += \"six \";\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\tsortedString += \"seven \";\n\
    \t\t\tbreak;\n\t\tcase 8:\n\t\t\tsortedString += \"eight \";\n\t\t\tbreak;\n\t\
    \tcase 9:\n\t\t\tsortedString += \"nine \";\n\t\t\tbreak;\n\t\t}\n\t}\n\tsortedString.pop_back();\n\
    \treturn sortedString;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpozlj88kv: /tmp/tmpozlj88kv.cpp:68: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115011
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    int A[10] = {0};\n    string S[] = {\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    stringstream\
    \ SS(numbers);\n    string temp;\n    while(SS >> temp)\n    {\n        for(int\
    \ i = 0; i < 10; i++)\n        {\n            if(temp == S[i])\n            {\n\
    \                A[i]++;\n                break;\n            }\n        }\n \
    \   }\n    string res = \"\";\n    for(int i = 0; i < 10; i++)\n    {\n      \
    \  for(int j = 0; j < A[i]; j++)\n        {\n            res += S[i] + \" \";\n\
    \        }\n    }\n    return res.substr(0, res.size() - 1);\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ckiwwyz.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp_ckiwwyz.cpp:10:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   10 |     string S[] = {\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n      |     ^~~~~~\n/tmp/tmp_ckiwwyz.cpp:10:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_ckiwwyz.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_ckiwwyz.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp_ckiwwyz.cpp:11:5: error: \u2018stringstream\u2019 was not declared in\
    \ this scope; did you mean \u2018std::stringstream\u2019?\n   11 |     stringstream\
    \ SS(numbers);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\nIn file\
    \ included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/includ"
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    int i,j,count=0;\n    char temp[numbers.length()];\n    std::string num\
    \ = numbers;\n    for(i=0;i<numbers.length();i++)\n    {\n        if(numbers[i]!='\
    \ ')\n        {\n            temp[count]=numbers[i];\n            count++;\n \
    \       }\n    }\n    temp[count]='\\0';\n    std::string temp2(temp);\n    std::istringstream\
    \ iss(temp2);\n    std::vector<std::string> tokens;\n    std::copy(std::istream_iterator<std::string>(iss),\n\
    \              std::istream_iterator<std::string>(),\n              std::back_inserter(tokens));\n\
    \    std::sort(tokens.begin(),tokens.end());\n    std::string sorted;\n    for(i=0;i<tokens.size();i++)\n\
    \    {\n        sorted = sorted + tokens[i] + \" \";\n    }\n    return sorted;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpxyk3w6m4: /tmp/tmpxyk3w6m4.cpp:38: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115011
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<std::string> arr;\n    std::stringstream ss(numbers);\n \
    \   std::string temp;\n    std::string result = \"\";\n    std::map<std::string,\
    \ int> numbers_map;\n    numbers_map[\"zero\"] = 0;\n    numbers_map[\"one\"]\
    \ = 1;\n    numbers_map[\"two\"] = 2;\n    numbers_map[\"three\"] = 3;\n    numbers_map[\"\
    four\"] = 4;\n    numbers_map[\"five\"] = 5;\n    numbers_map[\"six\"] = 6;\n\
    \    numbers_map[\"seven\"] = 7;\n    numbers_map[\"eight\"] = 8;\n    numbers_map[\"\
    nine\"] = 9;\n    while (ss >> temp) {\n        arr.push_back(temp);\n    }\n\
    \    std::sort(arr.begin(), arr.end(), [numbers_map](std::string a, std::string\
    \ b) {\n        return numbers_map[a] < numbers_map[b];\n    });\n    for (auto&\
    \ i : arr) {\n        result += i + \" \";\n    }\n    result.pop_back();\n  \
    \  return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfcahbms3.cpp: In lambda function:\n/tmp/tmpfcahbms3.cpp:28:29:\
    \ error: passing \u2018const std::map<std::__cxx11::basic_string<char>, int>\u2019\
    \ as \u2018this\u2019 argument discards qualifiers [-fpermissive]\n   28 |   \
    \      return numbers_map[a] < numbers_map[b];\n      |                      \
    \       ^\nIn file included from /usr/include/c++/9/map:61,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n               \
    \  from /tmp/tmpfcahbms3.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7: note:\
    \   in call to \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc =\
    \ std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::mapped_type = int; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  490 |       operator[](const key_type&\
    \ __k)\n      |       ^~~~~~~~\n/tmp/tmpfcahbms3.cpp:28:46: error: passing \u2018\
    const std::map<std::__cxx11::basic_string<char>, int>\u2019 as \u2018this\u2019\
    \ argument discards qualifiers [-fpermissive]\n   28 |         return numbers_map[a]\
    \ < numbers_map[b];\n      |                                              ^\n\
    In file included from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpfcahbms3.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note:   in call to \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type&\
    \ std::map<_Key, _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key\
    \ = std::__cxx11::basic_string<char>; _Tp = int; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ int> >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  490 |       operat"
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\t// Your code here\n\t// NOTE: Do not include a 'return' statement in your\
    \ code\n\tstd::unordered_map<std::string, int> dict{{\"zero\", 0}, {\"one\", 1},\
    \ {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"\
    seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n\tstd::stringstream ss(numbers);\n\
    \tstd::string word;\n\tstd::vector<int> v;\n\twhile (ss >> word) {\n\t\tv.push_back(dict[word]);\n\
    \t}\n\tstd::sort(v.begin(), v.end());\n\tstd::string ans = \"\";\n\tfor (int i\
    \ = 0; i < v.size(); i++) {\n\t\tif (i == 0) {\n\t\t\tans += std::to_string(v[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tans += \" \" + std::to_string(v[i]);\n\t\t}\n\t}\n\t\
    return ans;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp3xx9dhsw: /tmp/tmp3xx9dhsw.cpp:33: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115012
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string str=\"\",s=\"\";\n    int cnt=0;\n    for(int i=0;i<numbers.size();i++)\n\
    \    {\n        if(numbers[i]!=' ')\n        {\n            str=str+numbers[i];\n\
    \        }\n        else\n        {\n            cnt++;\n            if(str==\"\
    zero\")\n            {\n                s+=\"0\";\n            }\n           \
    \ else if(str==\"one\")\n            {\n                s+=\"1\";\n          \
    \  }\n            else if(str==\"two\")\n            {\n                s+=\"\
    2\";\n            }\n            else if(str==\"three\")\n            {\n    \
    \            s+=\"3\";\n            }\n            else if(str==\"four\")\n  \
    \          {\n                s+=\"4\";\n            }\n            else if(str==\"\
    five\")\n            {\n                s+=\"5\";\n            }\n           \
    \ else if(str==\"six\")\n            {\n                s+=\"6\";\n          \
    \  }\n            else if(str==\"seven\")\n            {\n                s+=\"\
    7\";\n            }\n            else if(str==\"eight\")\n            {\n    \
    \            s+=\"8\";\n            }\n            else if(str==\"nine\")\n  \
    \          {\n                s+=\"9\";\n            }\n            str=\"\";\n\
    \        }\n    }\n    if(str==\"zero\")\n    {\n        s+=\"0\";\n    }\n  \
    \  else if(str==\"one\")\n    {\n        s+=\"1\";\n    }\n    else if(str==\"\
    two\")\n    {\n        s+=\"2\";\n    }\n    else if(str==\"three\")\n    {\n\
    \        s+=\"3\";\n    }\n    else if(str==\"four\")\n    {\n        s+=\"4\"\
    ;\n    }\n    else if(str==\"five\")\n    {\n        s+=\"5\";\n    }\n    else\
    \ if(str==\"six\")\n    {\n        s+=\"6\";\n    }\n    else if(str==\"seven\"\
    )\n    {\n        s+=\"7\";\n    }\n    else if(str==\"\n}\nint main() {\n   \
    \ auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three\
    \ five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq9hs75md.cpp:95:18: warning: missing terminating \" character\n\
    \   95 |     else if(str==\"\n      |                  ^\n/tmp/tmpq9hs75md.cpp:95:18:\
    \ error: missing terminating \" character\n/tmp/tmpq9hs75md.cpp: In function \u2018\
    std::string sort_numbers(std::string)\u2019:\n/tmp/tmpq9hs75md.cpp:96:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   96 | }\n      | ^\n\
    /tmp/tmpq9hs75md.cpp:95:18: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   95 |     else if(str==\"\n      |            ~     ^\n      |    \
    \              )\n   96 | }\n      | ~                 \n/tmp/tmpq9hs75md.cpp:96:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   96 | }\n \
    \     | ^\n/tmp/tmpq9hs75md.cpp:96:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> nums;\n    std::stringstream ss(numbers);\n    std::string\
    \ token;\n    while (ss >> token) {\n        if (token == \"zero\") {\n      \
    \      nums.push_back(0);\n        } else if (token == \"one\") {\n          \
    \  nums.push_back(1);\n        } else if (token == \"two\") {\n            nums.push_back(2);\n\
    \        } else if (token == \"three\") {\n            nums.push_back(3);\n  \
    \      } else if (token == \"four\") {\n            nums.push_back(4);\n     \
    \   } else if (token == \"five\") {\n            nums.push_back(5);\n        }\
    \ else if (token == \"six\") {\n            nums.push_back(6);\n        } else\
    \ if (token == \"seven\") {\n            nums.push_back(7);\n        } else if\
    \ (token == \"eight\") {\n            nums.push_back(8);\n        } else if (token\
    \ == \"nine\") {\n            nums.push_back(9);\n        }\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    std::stringstream ss2;\n    for (int num : nums) {\n     \
    \   if (num == 0) {\n            ss2 << \"zero\";\n        } else if (num == 1)\
    \ {\n            ss2 << \"one\";\n        } else if (num == 2) {\n           \
    \ ss2 << \"two\";\n        } else if (num == 3) {\n            ss2 << \"three\"\
    ;\n        } else if (num == 4) {\n            ss2 << \"four\";\n        } else\
    \ if (num == 5) {\n            ss2 << \"five\";\n        } else if (num == 6)\
    \ {\n            ss2 << \"six\";\n        } else if (num == 7) {\n           \
    \ ss2 << \"seven\";\n        } else if (num == 8) {\n            ss2 << \"eight\"\
    ;\n        } else if (num == 9) {\n            ss2 << \"nine\";\n        }\n \
    \       ss2 << \" \";\n    }\n   \n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp___npni1: /tmp/tmp___npni1.cpp:65: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115012
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    if (numbers.size() == 0) return numbers;\n    std::vector<int> v{};\n\
    \    std::stringstream ss(numbers);\n    int cur;\n    while (ss >> cur) v.push_back(cur);\n\
    \    std::sort(v.begin(), v.end());\n    std::stringstream result;\n    for (int\
    \ i : v) {\n        result << i << \" \";\n    }\n    std::string r = result.str();\n\
    \    return r.substr(0, r.size() - 1);\n}\nint main() {\n    auto candidate =\
    \ sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp6qttudgv: /tmp/tmp6qttudgv.cpp:25: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115012
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::stringstream ss(numbers);\n  std::string word;\n  std::vector<int>\
    \ v;\n  while (ss >> word) {\n    if (word == \"zero\") {\n      v.push_back(0);\n\
    \    } else if (word == \"one\") {\n      v.push_back(1);\n    } else if (word\
    \ == \"two\") {\n      v.push_back(2);\n    } else if (word == \"three\") {\n\
    \      v.push_back(3);\n    } else if (word == \"four\") {\n      v.push_back(4);\n\
    \    } else if (word == \"five\") {\n      v.push_back(5);\n    } else if (word\
    \ == \"six\") {\n      v.push_back(6);\n    } else if (word == \"seven\") {\n\
    \      v.push_back(7);\n    } else if (word == \"eight\") {\n      v.push_back(8);\n\
    \    } else if (word == \"nine\") {\n      v.push_back(9);\n    }\n  }\n  std::sort(v.begin(),\
    \ v.end());\n  std::string ans = \"\";\n  for (int i = 0; i < v.size(); i++) {\n\
    \    if (v[i] == 0) {\n      ans += \"zero \";\n    } else if (v[i] == 1) {\n\
    \      ans += \"one \";\n    } else if (v[i] == 2) {\n      ans += \"two \";\n\
    \    } else if (v[i] == 3) {\n      ans += \"three \";\n    } else if (v[i] ==\
    \ 4) {\n      ans += \"four \";\n    } else if (v[i] == 5) {\n      ans += \"\
    five \";\n    } else if (v[i] == 6) {\n      ans += \"six \";\n    } else if (v[i]\
    \ == 7) {\n      ans += \"seven \";\n    } else if (v[i] == 8) {\n      ans +=\
    \ \"eight \";\n    } else if (v[i] == 9) {\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq76iyspg.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpq76iyspg.cpp:58:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   58 | int main() {\n      |            ^\n/tmp/tmpq76iyspg.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpq76iyspg.cpp:37:38:\
    \ note: to match this \u2018{\u2019\n   37 |   for (int i = 0; i < v.size(); i++)\
    \ {\n      |                                      ^\n/tmp/tmpq76iyspg.cpp:65:1:\
    \ error: expected \u2018}\u2019 at end of input\n   65 | }\n      | ^\n/tmp/tmpq76iyspg.cpp:8:47:\
    \ note: to match this \u2018{\u2019\n    8 | std::string sort_numbers(std::string\
    \ numbers) {\n      |                                               ^\n/tmp/tmpq76iyspg.cpp:65:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   65 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::string nums = \"zero one two three four five six seven eight nine\"\
    ;\n\tstd::vector<std::string> words;\n\tstd::string word;\n\tstd::istringstream\
    \ is(numbers);\n\t// generate list of numberals from input\n\twhile (is >> word)\n\
    \t\twords.push_back(word);\n\t// sort numberals from smallest to largest\n\tstd::sort(words.begin(),\
    \ words.end(), [&](std::string& a, std::string& b) {\n\t\treturn nums.find(a)\
    \ < nums.find(b);\n\t});\n\t// output the sorted numberals\n\tstd::ostringstream\
    \ os;\n\tfor (auto word : words)\n\t\tos << word << \" \";\n\treturn os.str();\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmp96ks2pm2: /tmp/tmp96ks2pm2.cpp:29: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115012
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  // Solution:\n  /*\n    1. Sort the string\n    2. Create a map of string\
    \ to int and another map of int to string\n    3. If a character in the string\
    \ is an integer, map it to a string and push it to a vector\n    4. Sort the vector\n\
    \    5. Map each integer in the vector to a string and push it to another vector\n\
    \    6. Join the final vector and return it\n  */\n  std::map<std::string, int>\
    \ string_to_int;\n  std::map<int, std::string> int_to_string;\n  std::vector<int>\
    \ string_to_int_vec;\n  std::vector<std::string> final_vec;\n  string_to_int.insert(std::pair<std::string,\
    \ int>(\"zero\", 0));\n  string_to_int.insert(std::pair<std::string, int>(\"one\"\
    , 1));\n  string_to_int.insert(std::pair<std::string, int>(\"two\", 2));\n  string_to_int.insert(std::pair<std::string,\
    \ int>(\"three\", 3));\n  string_to_int.insert(std::pair<std::string, int>(\"\
    four\", 4));\n  string_to_int.insert(std::pair<std::string, int>(\"five\", 5));\n\
    \  string_to_int.insert(std::pair<std::string, int>(\"six\", 6));\n  string_to_int.insert(std::pair<std::string,\
    \ int>(\"seven\", 7));\n  string_to_int.insert(std::pair<std::string, int>(\"\
    eight\", 8));\n  string_to_int.insert(std::pair<std::string, int>(\"nine\", 9));\n\
    \  int_to_string.insert(std::pair<int, std::string>(0, \"zero\"));\n  int_to_string.insert(std::pair<int,\
    \ std::string>(1, \"one\"));\n  int_to_string.insert(std::pair<int, std::string>(2,\
    \ \"two\"));\n  int_to_string.insert(std::pair<int, std::string>(\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbp2odqgs.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmpbp2odqgs.cpp:35:51: error: expected primary-expression before \u2018\
    (\u2019 token\n   35 |   int_to_string.insert(std::pair<int, std::string>(\n \
    \     |                                                   ^\n/tmp/tmpbp2odqgs.cpp:36:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   36 | }\n \
    \     | ^\n/tmp/tmpbp2odqgs.cpp:36:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660115011
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tassert(numbers != \"\");\n\tstd::vector<std::string> nums;\n\tstd::stringstream\
    \ ss(numbers);\n\tstd::string temp;\n\twhile (ss >> temp)\n\t\tnums.push_back(temp);\n\
    \tstd::sort(nums.begin(), nums.end());\n\tstd::string result = \"\";\n\tfor (int\
    \ i = 0; i < nums.size(); i++) {\n\t\tresult += nums[i];\n\t\tif (i < nums.size()\
    \ - 1)\n\t\t\tresult += \" \";\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmppoz_nku8: /tmp/tmppoz_nku8.cpp:9: std::string sort_numbers(std::string):
    Assertion `numbers != ""'' failed.

    '
  stdout: ''
  timestamp: 1660115012
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  // Your code here\n  std::istringstream ss(numbers);\n  std::string word;\n\
    \  std::vector<int> v;\n  while(ss >> word) {\n    if(word == \"zero\") v.push_back(0);\n\
    \    else if(word == \"one\") v.push_back(1);\n    else if(word == \"two\") v.push_back(2);\n\
    \    else if(word == \"three\") v.push_back(3);\n    else if(word == \"four\"\
    ) v.push_back(4);\n    else if(word == \"five\") v.push_back(5);\n    else if(word\
    \ == \"six\") v.push_back(6);\n    else if(word == \"seven\") v.push_back(7);\n\
    \    else if(word == \"eight\") v.push_back(8);\n    else if(word == \"nine\"\
    ) v.push_back(9);\n  }\n  std::sort(v.begin(), v.end());\n  std::string ans =\
    \ \"\";\n  for(auto x : v) {\n    if(x == 0) ans += \"zero \";\n    else if(x\
    \ == 1) ans += \"one \";\n    else if(x == 2) ans += \"two \";\n    else if(x\
    \ == 3) ans += \"three \";\n    else if(x == 4) ans += \"four \";\n    else if(x\
    \ == 5) ans += \"five \";\n    else if(x == 6) ans += \"six \";\n    else if(x\
    \ == 7) ans += \"seven \";\n    else if(x == 8) ans += \"eight \";\n    else if(x\
    \ == 9) ans += \"nine \";\n  }\n  ans.pop_back();\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpg58yykh0: /tmp/tmpg58yykh0.cpp:44: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115012
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::vector<int> storage;\n  std::map<std::string, int> map_storage;\n\
    \  map_storage[\"zero\"] = 0;\n  map_storage[\"one\"] = 1;\n  map_storage[\"two\"\
    ] = 2;\n  map_storage[\"three\"] = 3;\n  map_storage[\"four\"] = 4;\n  map_storage[\"\
    five\"] = 5;\n  map_storage[\"six\"] = 6;\n  map_storage[\"seven\"] = 7;\n  map_storage[\"\
    eight\"] = 8;\n  map_storage[\"nine\"] = 9;\n  std::stringstream strstr(numbers);\n\
    \  std::string word;\n  while(strstr >> word)\n  {\n    storage.push_back(map_storage[word]);\n\
    \  }\n  std::sort(storage.begin(), storage.end());\n  std::map<int, std::string>\
    \ map_num_str;\n  map_num_str[0] = \"zero\";\n  map_num_str[1] = \"one\";\n  map_num_str[2]\
    \ = \"two\";\n  map_num_str[3] = \"three\";\n  map_num_str[4] = \"four\";\n  map_num_str[5]\
    \ = \"five\";\n  map_num_str[6] = \"six\";\n  map_num_str[7] = \"seven\";\n  map_num_str[8]\
    \ = \"eight\";\n  map_num_str[9] = \"nine\";\n  for(int i = 0; i < storage.size();\
    \ i++)\n  {\n    storage[i] = map_num_str[storage[i]];\n  }\n  std::stringstream\
    \ str_stream;\n  std::copy(storage.begin(), storage.end(), std::ostream_iterator<std::string>(str_stream,\
    \ \" \"));\n  std::string result = str_stream.str();\n  result.erase(result.end()\
    \ - 1);\n  return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dhb6dyc.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp1dhb6dyc.cpp:41:40: error: cannot convert \u2018std::map<int, std::__cxx11::basic_string<char>\
    \ >::mapped_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<int>, int>::value_type\u2019 {aka \u2018\
    int\u2019} in assignment\n   41 |     storage[i] = map_num_str[storage[i]];\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp1dhb6dyc.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:\
    \ In instantiation of \u2018static _OI std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m(_II,\
    \ _II, _OI) [with _II = int*; _OI = std::ostream_iterator<std::__cxx11::basic_string<char>\
    \ >]\u2019:\n/usr/include/c++/9/bits/stl_algobase.h:404:30:   required from \u2018\
    _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = int*;\
    \ _OI = std::ostream_iterator<std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algobase.h:441:30:\
    \   required from \u2018_OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove\
    \ = false; _II = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _OI =\
    \ std::ostream_iterator<std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algobase.h:474:7:\
    \   required from \u2018_OI std::copy(_II, _II, _OI) [with _II = __gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >; _OI = std::ostream_iterator<std::__cxx11::basic_string<char>\
    \ >]\u2019\n/tmp/tmp1dhb6dyc.cpp:44:96:   required from here\n/usr/include/c++/9/bits/stl_algobase.h:342:18:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::ostream_iterator<std::__cxx11::basic_string<char>\
    \ >\u2019 and \u2018int\u2019)\n  342 |        *__result = *__first;\n      |\
    \        ~~~~~~~~~~^~~~~~~~~~\nIn file included from /usr/include/c++/9/iterator:66,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/s"
  stdout: ''
  timestamp: 1660115011
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::string numbers_cleaned;\n    std::stringstream in(numbers);\n  \
    \  std::string token;\n    std::vector<int> numbers_list;\n    while (std::getline(in,\
    \ token, ' ')) {\n        if (token == \"zero\") {\n            numbers_list.push_back(0);\n\
    \        } else if (token == \"one\") {\n            numbers_list.push_back(1);\n\
    \        } else if (token == \"two\") {\n            numbers_list.push_back(2);\n\
    \        } else if (token == \"three\") {\n            numbers_list.push_back(3);\n\
    \        } else if (token == \"four\") {\n            numbers_list.push_back(4);\n\
    \        } else if (token == \"five\") {\n            numbers_list.push_back(5);\n\
    \        } else if (token == \"six\") {\n            numbers_list.push_back(6);\n\
    \        } else if (token == \"seven\") {\n            numbers_list.push_back(7);\n\
    \        } else if (token == \"eight\") {\n            numbers_list.push_back(8);\n\
    \        } else if (token == \"nine\") {\n            numbers_list.push_back(9);\n\
    \        }\n    }\n    sort(numbers_list.begin(), numbers_list.end());\n    for\
    \ (std::vector<int>::const_iterator itr = numbers_list.begin(); itr != numbers_list.end();\
    \ ++itr) {\n        if (*itr == 0) {\n            numbers_cleaned += \"zero \"\
    ;\n        } else if (*itr == 1) {\n            numbers_cleaned += \"one \";\n\
    \        } else if (*itr == 2) {\n            numbers_cleaned += \"two \";\n \
    \       } else if (*itr == 3) {\n            numbers_cleaned += \"three \";\n\
    \        } else if (*itr == 4) {\n            numbers_cleaned += \"four \";\n\
    \        } else if (*itr == 5) {\n            numbers_cleaned += \"five \";\n\
    \        } else if (*itr == 6) {\n            numbers_cleaned += \"six\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprg67wrff.cpp:51:32: warning: missing terminating \" character\n\
    \   51 |             numbers_cleaned += \"six\n      |                       \
    \         ^\n/tmp/tmprg67wrff.cpp:51:32: error: missing terminating \" character\n\
    \   51 |             numbers_cleaned += \"six\n      |                       \
    \         ^~~~\n/tmp/tmprg67wrff.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmprg67wrff.cpp:52:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   52 | }\n      | ^\n/tmp/tmprg67wrff.cpp:53:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   53 | int main() {\n     \
    \ |            ^\n/tmp/tmprg67wrff.cpp:60:1: error: expected \u2018}\u2019 at\
    \ end of input\n   60 | }\n      | ^\n/tmp/tmprg67wrff.cpp:37:105: note: to match\
    \ this \u2018{\u2019\n   37 |     for (std::vector<int>::const_iterator itr =\
    \ numbers_list.begin(); itr != numbers_list.end(); ++itr) {\n      |         \
    \                                                                            \
    \                    ^\n/tmp/tmprg67wrff.cpp:60:1: error: expected \u2018}\u2019\
    \ at end of input\n   60 | }\n      | ^\n/tmp/tmprg67wrff.cpp:8:47: note: to match\
    \ this \u2018{\u2019\n    8 | std::string sort_numbers(std::string numbers) {\n\
    \      |                                               ^\n/tmp/tmprg67wrff.cpp:60:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   60 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660115012
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    // initialization\n    std::map<std::string, int> number_map;\n    std::vector<int>\
    \ map_values;\n    // add all the number/int pairs\n    number_map[\"zero\"] =\
    \ 0;\n    number_map[\"one\"] = 1;\n    number_map[\"two\"] = 2;\n    number_map[\"\
    three\"] = 3;\n    number_map[\"four\"] = 4;\n    number_map[\"five\"] = 5;\n\
    \    number_map[\"six\"] = 6;\n    number_map[\"seven\"] = 7;\n    number_map[\"\
    eight\"] = 8;\n    number_map[\"nine\"] = 9;\n    // find out how many numbers\
    \ in the string\n    int num_count = 0;\n    for (int i = 0; i < numbers.length();\
    \ i++) {\n        if (numbers[i] == ' ')\n            num_count++;\n    }\n  \
    \  num_count++;\n    // use std::strtok to store numbers into string array\n \
    \   // we get a C-style string\n    char *num_str = new char[numbers.length()\
    \ + 1];\n    strcpy(num_str, numbers.c_str());\n    // cout << \"num_str: \" <<\
    \ num_str << endl;\n    // initialize an array of strings\n    std::string *num_array\
    \ = new std::string[num_count];\n    // cout << \"num_count: \" << num_count <<\
    \ endl;\n    int i = 0;\n    char *p = strtok(num_str, \" \");\n    while (p)\
    \ {\n        num_array[i] = p;\n        // cout << \"num_array[\" << i << \"]:\
    \ \" << num_array[i] << endl;\n        p = strtok(NULL, \" \");\n        i++;\n\
    \    }\n    // push values into map_values\n    for (int i = 0; i < num_count;\
    \ i++) {\n        map_values.push_back(number_map[num_array[i]]);\n    }\n   \
    \ // sort\n    std::sort(map_values.begin(), map_values.end());\n    // use the\
    \ smallest value\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: 'tmpqucwaa_5: /tmp/tmpqucwaa_5.cpp:56: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660115012
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  auto const &cmp = [](char a, char b) { return a < b; };\n  std::string\
    \ numeral_map[10] = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\"};\n  std::vector<std::string> nums;\n\
    \  std::istringstream iss(numbers);\n  std::copy(std::istream_iterator<std::string>(iss),\
    \ std::istream_iterator<std::string>(), std::back_inserter(nums));\n  std::vector<char>\
    \ chars;\n  std::vector<int> numeral_ints;\n  for (std::string str : nums) {\n\
    \    for (int i = 0; i < 10; i++) {\n      if (str == numeral_map[i]) {\n    \
    \    numeral_ints.push_back(i);\n        break;\n      }\n    }\n  }\n  std::sort(numeral_ints.begin(),\
    \ numeral_ints.end(), cmp);\n  std::vector<std::string> sorted_nums;\n  for (int\
    \ i : numeral_ints) {\n    sorted_nums.push_back(numeral_map[i]);\n  }\n  std::string\
    \ result;\n  for (std::string i : sorted_nums) {\n    result += i + \" \";\n \
    \ }\n  return result.substr(0, result.size() - 1);\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115012
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss;\n    ss.str(numbers);\n    std::string token;\n\
    \    std::string numbers_sorted;\n    std::vector<int> number_digit_vector;\n\
    \    while (std::getline(ss, token, ' ')) {\n        if (token == \"zero\") {\n\
    \            number_digit_vector.push_back(0);\n        } else if (token == \"\
    one\") {\n            number_digit_vector.push_back(1);\n        } else if (token\
    \ == \"two\") {\n            number_digit_vector.push_back(2);\n        } else\
    \ if (token == \"three\") {\n            number_digit_vector.push_back(3);\n \
    \       } else if (token == \"four\") {\n            number_digit_vector.push_back(4);\n\
    \        } else if (token == \"five\") {\n            number_digit_vector.push_back(5);\n\
    \        } else if (token == \"six\") {\n            number_digit_vector.push_back(6);\n\
    \        } else if (token == \"seven\") {\n            number_digit_vector.push_back(7);\n\
    \        } else if (token == \"eight\") {\n            number_digit_vector.push_back(8);\n\
    \        } else if (token == \"nine\") {\n            number_digit_vector.push_back(9);\n\
    \        }\n    }\n    std::sort(number_digit_vector.begin(), number_digit_vector.end());\n\
    \    for (int i = 0; i < number_digit_vector.size(); i++) {\n        if (number_digit_vector[i]\
    \ == 0) {\n            numbers_sorted += \"zero \";\n        } else if (number_digit_vector[i]\
    \ == 1) {\n            numbers_sorted += \"one \";\n        } else if (number_digit_vector[i]\
    \ == 2) {\n            numbers_sorted += \"two \";\n        } else if (number_digit_vector[i]\
    \ == 3) {\n            numbers_sorted += \"three \";\n        } else if (number_digit_vector[i]\
    \ == 4) {\n            numbers_sorted +=\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2amqmv8d.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp2amqmv8d.cpp:49:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   49 | }\n      | ^\n/tmp/tmp2amqmv8d.cpp:50:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   50 | int main() {\n     \
    \ |            ^\n/tmp/tmp2amqmv8d.cpp:57:1: error: expected \u2018}\u2019 at\
    \ end of input\n   57 | }\n      | ^\n/tmp/tmp2amqmv8d.cpp:38:58: note: to match\
    \ this \u2018{\u2019\n   38 |     for (int i = 0; i < number_digit_vector.size();\
    \ i++) {\n      |                                                          ^\n\
    /tmp/tmp2amqmv8d.cpp:57:1: error: expected \u2018}\u2019 at end of input\n   57\
    \ | }\n      | ^\n/tmp/tmp2amqmv8d.cpp:8:47: note: to match this \u2018{\u2019\
    \n    8 | std::string sort_numbers(std::string numbers) {\n      |           \
    \                                    ^\n/tmp/tmp2amqmv8d.cpp:57:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   57 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660115012
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  std::stringstream ss(numbers);\n  std::string word;\n  std::vector<int>\
    \ vector;\n  while (ss >> word) {\n    if (word == \"zero\") vector.push_back(0);\n\
    \    else if (word == \"one\") vector.push_back(1);\n    else if (word == \"two\"\
    ) vector.push_back(2);\n    else if (word == \"three\") vector.push_back(3);\n\
    \    else if (word == \"four\") vector.push_back(4);\n    else if (word == \"\
    five\") vector.push_back(5);\n    else if (word == \"six\") vector.push_back(6);\n\
    \    else if (word == \"seven\") vector.push_back(7);\n    else if (word == \"\
    eight\") vector.push_back(8);\n    else if (word == \"nine\") vector.push_back(9);\n\
    \  }\n  sort(vector.begin(), vector.end());\n  std::stringstream sorted_numbers;\n\
    \  for (int i = 0; i < vector.size(); i++) {\n    if (vector[i] == 0) sorted_numbers\
    \ << \"zero \";\n    else if (vector[i] == 1) sorted_numbers << \"one \";\n  \
    \  else if (vector[i] == 2) sorted_numbers << \"two \";\n    else if (vector[i]\
    \ == 3) sorted_numbers << \"three \";\n    else if (vector[i] == 4) sorted_numbers\
    \ << \"four \";\n    else if (vector[i] == 5) sorted_numbers << \"five \";\n \
    \   else if (vector[i] == 6) sorted_numbers << \"six \";\n    else if (vector[i]\
    \ == 7) sorted_numbers << \"seven \";\n    else if (vector[i] == 8) sorted_numbers\
    \ << \"eight \";\n    else if (vector[i] == 9) sorted_numbers << \"nine \";\n\
    \  }\n  return sorted_numbers.str();\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmplt1f8b8g: /tmp/tmplt1f8b8g.cpp:43: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115012
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::vector<int> newOrder(numbers.size());\n    std::map<std::string,\
    \ int> number_map{\n        {\"zero\", 0},\n        {\"one\", 1},\n        {\"\
    two\", 2},\n        {\"three\", 3},\n        {\"four\", 4},\n        {\"five\"\
    , 5},\n        {\"six\", 6},\n        {\"seven\", 7},\n        {\"eight\", 8},\n\
    \        {\"nine\", 9}\n    };\n    std::istringstream iss(numbers);\n    std::string\
    \ str;\n    int i = 0;\n    while (iss >> str) {\n        newOrder[i] = number_map[str];\n\
    \        i++;\n    }\n    sort(newOrder.begin(), newOrder.end());\n    std::stringstream\
    \ ss;\n    ss << newOrder[0];\n    std::string finalString = ss.str();\n    for\
    \ (i = 1; i < newOrder.size(); i++) {\n        ss.str(\"\");\n        ss << newOrder[i];\n\
    \        finalString = finalString + \" \" + ss.str();\n    }\n    return finalString;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660115012
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n  // Convert space-delimited string to vector of strings\n  std::vector<std::string>\
    \ numbers_vec;\n  std::stringstream stream(numbers);\n  std::string number;\n\
    \  while (stream >> number) {\n    numbers_vec.push_back(number);\n  }\n  std::sort(numbers_vec.begin(),\
    \ numbers_vec.end());\n  // Convert vector of strings to space-delimited string\n\
    \  std::stringstream result;\n  for (const auto& n : numbers_vec) {\n    result\
    \ << n << \" \";\n  }\n  return result.str();\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmp95cmmukv: /tmp/tmp95cmmukv.cpp:27: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115012
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n\tstd::vector<std::string> words = split(numbers, ' ');\n\tfor (int i = 0;\
    \ i < words.size(); i++) {\n\t\tint min = i;\n\t\tfor (int j = i; j < words.size();\
    \ j++) {\n\t\t\tif (word_to_int(words[j]) < word_to_int(words[min])) {\n\t\t\t\
    \tmin = j;\n\t\t\t}\n\t\t}\n\t\tstd::string temp = words[i];\n\t\twords[i] = words[min];\n\
    \t\twords[min] = temp;\n\t}\n\tstd::string result = \"\";\n\tfor (int i = 0; i\
    \ < words.size(); i++) {\n\t\tresult += words[i];\n\t\tif (i != words.size() -\
    \ 1) {\n\t\t\tresult += \" \";\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8dw5j5t3.cpp: In function \u2018std::string sort_numbers(std::string)\u2019\
    :\n/tmp/tmp8dw5j5t3.cpp:9:35: error: \u2018split\u2019 was not declared in this\
    \ scope\n    9 |  std::vector<std::string> words = split(numbers, ' ');\n    \
    \  |                                   ^~~~~\n/tmp/tmp8dw5j5t3.cpp:13:8: error:\
    \ \u2018word_to_int\u2019 was not declared in this scope\n   13 |    if (word_to_int(words[j])\
    \ < word_to_int(words[min])) {\n      |        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660115012
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers('three\
    \ one five')\n// 'one three five'\nstd::string sort_numbers(std::string numbers)\
    \ {\n    std::stringstream ss(numbers);\n    std::vector<int> v;\n    std::string\
    \ word;\n    while (ss >> word) {\n        if (word == \"zero\") {\n         \
    \   v.push_back(0);\n        } else if (word == \"one\") {\n            v.push_back(1);\n\
    \        } else if (word == \"two\") {\n            v.push_back(2);\n        }\
    \ else if (word == \"three\") {\n            v.push_back(3);\n        } else if\
    \ (word == \"four\") {\n            v.push_back(4);\n        } else if (word ==\
    \ \"five\") {\n            v.push_back(5);\n        } else if (word == \"six\"\
    ) {\n            v.push_back(6);\n        } else if (word == \"seven\") {\n  \
    \          v.push_back(7);\n        } else if (word == \"eight\") {\n        \
    \    v.push_back(8);\n        } else if (word == \"nine\") {\n            v.push_back(9);\n\
    \        }\n    }\n    std::sort(v.begin(), v.end());\n    std::string s;\n  \
    \  for (auto i : v) {\n        if (i == 0) {\n            s += \"zero \";\n  \
    \      } else if (i == 1) {\n            s += \"one \";\n        } else if (i\
    \ == 2) {\n            s += \"two \";\n        } else if (i == 3) {\n        \
    \    s += \"three \";\n        } else if (i == 4) {\n            s += \"four \"\
    ;\n        } else if (i == 5) {\n            s += \"five \";\n        } else if\
    \ (i == 6) {\n            s += \"six \";\n        } else if (i == 7) {\n     \
    \       s += \"seven \";\n        } else if (i == 8) {\n            s += \"eight\
    \ \";\n        } else if (i == 9) {\n            s += \"nine \";\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = sort_numbers;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: Exception
  stderr: 'tmpsrs_s1iu: /tmp/tmpsrs_s1iu.cpp:65: int main(): Assertion `candidate(("three"))
    == ("three")'' failed.

    '
  stdout: ''
  timestamp: 1660115012
