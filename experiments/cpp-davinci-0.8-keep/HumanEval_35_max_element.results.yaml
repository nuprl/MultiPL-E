name: HumanEval_35_max_element
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long max=l[0];\n    for(int i=1;i<l.size();i++)\n\
    \    {\n        if(l[i]>max)\n        {\n            max=l[i];\n        }\n  \
    \  }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  return *std::max_element(l.begin(), l.end());\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=l[0];\n    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n  return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i]\
    \ > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  long max_ = l[0];\n  for (auto i : l) {\n \
    \   if (i > max_)\n      max_ = i;\n  }\n  return max_;\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long max = l[0];\n    for (int i = 1; i\
    \ < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n   \
    \     }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long result = 0;\n    for (long i=0; i<l.size(); i++) {\n        if\
    \ (l[i] > result) {\n            result = l[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    int max = l[0];\n    for(int i = 0; i < l.size(); i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long ret = 0;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ if (ret < l[i]) {\n            ret = l[i];\n        }\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\t// >>>  your code goes here\n\tlong i,max=l[0];\n\tfor(i=0;i<l.size();i++)\n\
    \t{\n\t\tif(l[i]>max)\n\t\t{\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // YOUR CODE HERE\n    long max= l[0];\n    for(long i = 1; i < l.size();\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(long i=1; i<l.size(); i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  return 0;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: "tmp1azxni0y: /tmp/tmp1azxni0y.cpp:13: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here\n    return *max_element(l.begin(), l.end());\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long max_num = 0;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i]\
    \ > max_num) {\n      max_num = l[i];\n    }\n  }\n  return max_num;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n// Your code here\n    long max = *std::max_element(l.begin(), l.end());\n\
    \    return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size()>0);\n    long max = l[0];\n    for(int i=1;i<l.size();i++){\n\
    \        if(l[i]>max){\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\t// REPLACE WITH YOUR CODE.\n\treturn *std::max_element(l.begin(), l.end());\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max;\n\tmax = l[0];\n\tfor (int i = 0; i < l.size(); i++) {\n\t\
    \tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = INT_MIN;\n    for(int i = 0; i < l.size(); i++) {\n   \
    \     if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(auto i: l){\n        if(i > max){\n    \
    \        max = i;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong maximum = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > maximum) {\n\t\t\tmaximum = l[i];\n\t\t}\n\t}\n\treturn maximum;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    return *std::max_element(l.begin(), l.end());\n}\nint main() {\n \
    \   auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n     \
    \   if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong temp = l[0];\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > temp) {\n\t\t\ttemp = l[i];\n\t\t}\n\t}\n\treturn temp;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size()>0);\n    long max = l[0];\n    for(auto x: l){\n \
    \       if(x>max){\n            max = x;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here\n    long maxx = INT_MIN;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>maxx){\n            maxx = l[i];\n        }\n    }\n    return\
    \ maxx;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_ = INT_MIN;\n    for(int i = 0; i < l.size(); i++) {\n  \
    \      if(l[i] > max_) {\n            max_ = l[i];\n        }\n    }\n    return\
    \ max_;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    for(auto it = l.begin(); it != l.end(); it++) {\n\
    \        if(*it > max) {\n            max = *it;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tif (l.size() == 0) return -1;\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.size(); i++) {\n\t\tif (l[i] > max) max = l[i];\n\t}\n\treturn max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n     \
    \   if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  // TODO: Replace the following line with your implementation.\n  int\
    \ max = l[0];\n  for(int i=0;i<l.size();i++){\n    if(l[i]>max){\n      max =\
    \ l[i];\n    }\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  long max = l[l.size()-1];\n  return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long maxi = -1;\n  for(int i = 0; i < l.size(); i++) {\n    if(l[i]\
    \ > maxi) {\n      maxi = l[i];\n    }\n  }\n  return maxi;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long ans = l[0];\n    for(int i = 1; i < l.size(); i++) {\n      \
    \  if(l[i] > ans) {\n            ans = l[i];\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\t// TODO: Implement\n\t//return 0;\n\tlong ma=l[0];\n\tfor(int i=0;i<l.size();i++)\n\
    \t{\n\t\tif(l[i]>ma)\n\t\t\tma=l[i];\n\t}\n\treturn ma;\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = *(l.begin());\n    for (long i : l) {\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long max = l[0];\n  for (long i : l) {\n    if (i > max)\n      max\
    \ = i;\n  }\n  return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  if(l.size() == 0) {\n    return 0;\n  }\n  long max = l[0];\n  for(int\
    \ i = 1; i < l.size(); i++) {\n    if(l[i] > max) {\n      max = l[i];\n    }\n\
    \  }\n  return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  // Write your solution here\n  return *max_element(l.begin(), l.end());\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long maximum = *max_element(l.begin(), l.end());\n    return maximum;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong mx = l[0];\n\tfor (long i=1; i<l.size(); i++)\n\t\tif (l[i] > mx)\n\
    \t\t\tmx = l[i];\n\treturn mx;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // BEGIN\n    long max = l[0];\n    for (long n : l) {\n        if\
    \ (n > max) {\n            max = n;\n        }\n    }\n    return max;\n    //\
    \ END\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tassert(l.size() > 0);\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size();\
    \ i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  // Replace with your code.\n  assert(false);\n  return 0;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: "tmp8r805i0u: /tmp/tmp8r805i0u.cpp:10: long int max_element(std::vector<long\
    \ int>): Assertion `false' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_so_far=0;\n    for(int i=0;i<l.size();i++)\n    {\n     \
    \   if(l[i]>max_so_far)\n        {\n            max_so_far=l[i];\n        }\n\
    \    }\n    return max_so_far;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // ------------WRITE YOUR CODE BELOW THIS LINE------------\n    return\
    \ *std::max_element(l.begin(), l.end());\n    // ------------WRITE YOUR CODE ABOVE\
    \ THIS LINE------------\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max=l[0];\n\tfor(long i=1;i<l.size();i++)\n\t{\n\t\tif(l[i]>max)\n\
    \t\t\tmax=l[i];\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here\n    long max = INT_MIN;\n    for(long i =\
    \ 0; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max=0;\n\tint n=l.size();\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tif(l[i]>max)\n\
    \t\t{\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    std::vector<long>::iterator it;\n    it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    int max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n       \
    \ if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tif (l.size() == 0)\n\t\treturn -1;\n\tlong max = l[0];\n\tfor (long\
    \ i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  // YOUR CODE HERE\n  return *max_element(l.begin(), l.end());\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = *std::max_element(l.begin(), l.end());\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  return *max_element(l.begin(), l.end());\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n     \
    \   if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_number = l[0];\n    for(int i = 0; i < l.size(); i++) {\n\
    \        if(l[i] > max_number) {\n            max_number = l[i];\n        }\n\
    \    }\n    return max_number;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long max = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i]\
    \ > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong maximum = l[0];\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif\
    \ (l[i] > maximum) {\n\t\t\tmaximum = l[i];\n\t\t}\n\t}\n\treturn maximum;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    return *std::max_element(l.begin(), l.end());\n}\nint main() {\n \
    \   auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n      \
    \  if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    return *std::max_element(l.begin(), l.end());\n}\nint main() {\n \
    \   auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    int max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n       \
    \ if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long int max=INT_MIN;\n\tfor(int i=0;i<l.size();i++)\n\t{\n\t\tif(l[i]>max)\n\
    \t\t{\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = INT_MIN;\n    for(long i : l){\n        if(i > max){\n\
    \            max = i;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=l[0];\n    for(long i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long max = l[0];\n    for (int i = 1; i\
    \ < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n   \
    \     }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    for(int i = 0; i < l.size(); i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // TODO: your code here\n    long max=0;\n    for(int i=0;i<l.size();i++){\n\
    \        if(l[i]>max){\n            max=l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    return *std::max_element(l.begin(), l.end());\n}\nint main() {\n \
    \   auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long max = l[0];\n  for (std::vector<long>::iterator it = l.begin();\
    \ it != l.end(); ++it) {\n    if (max < *it) {\n      max = *it;\n    }\n  }\n\
    \  return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong maximum = -1000000000;\n\tfor (int i = 0; i < l.size(); i++) {\n\
    \t\tif (l[i] > maximum) {\n\t\t\tmaximum = l[i];\n\t\t}\n\t}\n\treturn maximum;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long current_max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > current_max)\n            current_max = l[i];\n    }\n   \
    \ return current_max;\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long val = 0;\n    for(long i = 0; i < l.size(); i++) {\n        if(val\
    \ < l[i]) {\n            val = l[i];\n        }\n    }\n    return val;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long max = l[0];\n  for (unsigned int i = 1; i < l.size(); i++) {\n\
    \    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    return *std::max_element(l.begin(), l.end());\n}\nint main() {\n \
    \   auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    return *std::max_element(l.begin(), l.end());\n}\nint main() {\n \
    \   auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    std::vector<long>::iterator it;\n    for(it = l.begin();\
    \ it != l.end(); it++) {\n        if (*it > max) {\n            max = *it;\n \
    \       }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tfor (long n : l) {\n\t\tif (n > max) {\n\t\t\tmax\
    \ = n;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long max = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i]\
    \ > max)\n      max = l[i];\n  }\n  return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long maxValue = INT_MIN;\n    int size = l.size();\n    for(int i\
    \ = 0; i < size; i++) {\n        if(l[i] > maxValue)\n            maxValue = l[i];\n\
    \    }\n    return maxValue;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long ma=l[0];\n    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]>ma)\n\
    \        {\n            ma=l[i];\n        }\n    }\n    return ma;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tint size = l.size();\n\tfor (int i = 1; i < size;\
    \ i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = INT_MIN;\n    for(int i = 0; i < l.size(); i++) {\n   \
    \     if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n        return *std::max_element(l.begin(), l.end());\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size() != 0);\n    long max = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n   \
    \ }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    if(l.size()==0)\n        return 0;\n    long max=l[0];\n    for(long\
    \ i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n            max=l[i];\n  \
    \  }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // **** ****\n    if (l.size() == 0) {\n        return 0;\n    }\n\
    \n    // **** ****\n    long max = l[0];\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\n\
    \    // **** return maximum value ****\n    return max;\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max, curr;\n\tif (l.size() == 0)\n\t\treturn 0;\n\tif (l.size()\
    \ == 1)\n\t\treturn l[0];\n\tmax = l[0];\n\tcurr = l[0];\n\tfor (long i = 1; i\
    \ < l.size(); i++) {\n\t\tif (l[i] > curr) {\n\t\t\tcurr = l[i];\n\t\t\tif (curr\
    \ > max)\n\t\t\t\tmax = curr;\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=l[0];\n    int ln=l.size();\n    for(int i=1;i<ln;i++)\n\
    \    {\n        if(l[i]>max)\n        {\n            max=l[i];\n        }\n  \
    \  }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    if(l.size()==0)\n    {\n        return 0;\n    }\n    else\n    {\n\
    \        long max=*max_element(l.begin(),l.end());\n        return max;\n    }\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long max = INT32_MIN;\n  for (int i = 0; i < l.size(); i++) {\n    if\
    \ (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  return *std::max_element(l.begin(), l.end());\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    return *std::max_element(l.begin(), l.end());\n}\nint main() {\n \
    \   auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  return *std::max_element(l.begin(), l.end());\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long m = l[0];\n    for (int i = 1; i < l.size(); i++) {\n       \
    \ if (l[i] > m) {\n            m = l[i];\n        }\n    }\n    return m;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    return 0L;\n}\nint main() {\n    auto candidate = max_element;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: "tmp9u1g9abb: /tmp/tmp9u1g9abb.cpp:13: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long largest = 0;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i]\
    \ > largest) {\n      largest = l[i];\n    }\n  }\n  return largest;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    std::vector<long> v = l;\n    if(v.size()==0)\n    {\n        return\
    \ 0;\n    }\n    long max=v[0];\n    for(int i=1;i<v.size();i++)\n    {\n    \
    \    if(v[i]>max)\n        {\n            max=v[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  return *std::max_element(l.begin(), l.end());\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    int max = 0;\n    for(int i = 0; i < l.size(); i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = *max_element(l.begin(), l.end());\n    return max;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  // 123\n\
    \  long max_elem = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if (l[i]\
    \ > max_elem) {\n      max_elem = l[i];\n    }\n  }\n  return max_elem;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long ret = l[0];\n    for (int i = 1; i < l.size(); i++) {\n     \
    \   if (l[i] > ret) ret = l[i];\n    }\n    return ret;\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long max = l[0];\n  for (long i = 1; i < l.size(); i++) {\n    if (l[i]\
    \ > max)\n      max = l[i];\n  }\n  return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  assert(l.size() > 0);\n  long ans = l[0];\n  for (auto i : l) {\n  \
    \  if (i > ans) ans = i;\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_ele = l[0];\n    for(int i=1;i<l.size();i++){\n        if(l[i]>max_ele){\n\
    \            max_ele = l[i];\n        }\n    }\n    return max_ele;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    \n    auto i = max_element(l.begin(), l.end());\n    return *i;\n\
    \    \n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(long x : l) {\n        if(x > max) {\n \
    \           max = x;\n        }\n    }\n    return max;\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = INT_MIN;\n    for(int i = 0; i < l.size(); i++) {\n   \
    \     if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=l[0];\n    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long x = l[0];\n    for(long i = 0; i < l.size(); i++) {\n       \
    \ if(l[i] > x)\n            x = l[i];\n    }\n    return x;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=l[0];\n    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    for(int i = 0; i < l.size(); i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // >>> max_element([1, 2, 3])\n    // 3\n    long max = l[0];\n  \
    \  // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    // 123\n \
    \   for (int i = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n        \
    \    max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\t/* long *p=&l[0];\n\tlong x=*p;\n\tfor(long i=0;i<l.size();i++)\n\t\
    {\n\t\tif(x<l[i])\n\t\t\tx=l[i];\n\t}\n\treturn x; */\n\treturn *max_element(l.begin(),l.end());\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    for(int i = 0; i < l.size(); i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long m = l[0];\n    for (long n : l) {\n\
    \        if (n > m) {\n            m = n;\n        }\n    }\n    return m;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long mx = l[0];\n    for (int i = 1; i\
    \ < l.size(); i++) {\n        if (l[i] > mx)\n            mx = l[i];\n    }\n\
    \    return mx;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size() != 0);\n    long max = l[0];\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(long i=1; i<l.size(); i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long currMax = l[0];\n    int size = l.size();\n    for(int i = 1;\
    \ i < size; i++) {\n        if(l[i] > currMax) {\n            currMax = l[i];\n\
    \        }\n    }\n    return currMax;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    return *max_element(l.begin(), l.end());\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong ma = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > ma)\n\t\t\tma = l[i];\n\t}\n\treturn ma;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tfor (long i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = -1e18;\n    for(auto i : l)\n        if(i > max)\n    \
    \        max = i;\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong ret = -1;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > ret)\n\t\t\tret = l[i];\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = INT_MIN;\n    for(int i = 0; i < l.size(); i++) {\n   \
    \     if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_element = -1e18;\n    for(long i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] > max_element)\n            max_element = l[i];\n    }\n\
    \    return max_element;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    if(l.size() == 0)\n        return 0;\n    long mx = l[0];\n    for(int\
    \ i = 1; i < l.size(); i++)\n        mx = max(mx, l[i]);\n    return mx;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp715omqei.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp715omqei.cpp:13:14: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   13 |         mx = max(mx,\
    \ l[i]);\n      |              ^~~\n      |              std::max\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp715omqei.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here\n    long m=l[0];\n    for(long i=1;i<l.size();i++)\n\
    \    {\n        if(l[i]>m)\n        m=l[i];\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\t// TODO: get it done\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: "tmpy5p1_kvf: /tmp/tmpy5p1_kvf.cpp:13: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=l[0];\n    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size()>0);\n    long max=l[0];\n    for(long i=1;i<l.size();i++)\n\
    \    {\n        if(l[i]>max)\n        {\n            max=l[i];\n        }\n  \
    \  }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    if(l.size() == 0)\n        return NULL;\n    auto max = l[0];\n  \
    \  for(auto it: l)\n        if(it > max)\n            max = it;\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  return *std::max_element(l.begin(), l.end());\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=0;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // your code goes here\n    long max=l[0];\n    for(int i=1;i<l.size();i++)\n\
    \    {\n        if(l[i]>max)\n        {\n            max=l[i];\n        }\n  \
    \  }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long m=INT_MIN;\n  for(long i=0;i<l.size();i++)\n  {\n    if(l[i]>m)\n\
    \    {\n      m=l[i];\n    }\n  }\n  return m;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tfor (long i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})))\
    \ == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\treturn *std::max_element(l.begin(), l.end());\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=l[0];\n    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    if(l.size() == 0) return -1;\n    long max = l[0];\n    for(long x\
    \ : l) {\n        if(x > max) max = x;\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long maximum = l[0];\n  for (int i = 1; i < l.size(); i++) {\n    if\
    \ (l[i] > maximum) {\n      maximum = l[i];\n    }\n  }\n  return maximum;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n      \
    \  if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Write your code here\n    return *max_element(l.begin(), l.end());\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(!l.empty());\n    long max = l[0];\n    for (long i = 1; i\
    \ < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n   \
    \     }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ return -1;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: "tmpcfxx_33s: /tmp/tmpcfxx_33s.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  return *std::max_element(l.begin(), l.end());\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=0;\n    for(int i=0;i<l.size();i++)\n    {\n    \tif(l[i]>max)\n\
    \    \t{\n    \t\tmax=l[i];\n    \t}\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tif (l.size() == 0) {\n\t\treturn -1;\n\t}\n\tlong max = l[0];\n\tfor\
    \ (long i = 1; i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 0; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  \n  long max = l[0];\n  for(int i = 0; i < l.size(); i++){\n    if(l[i]\
    \ > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3,\
    \ 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  //write your code here\n  long max=l[0];\n  for(int i=1;i<l.size();i++)\n\
    \  {\n    if(l[i]>max)\n    {\n      max=l[i];\n    }\n  }\n  return max;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  // Your code goes here.\n  return *std::max_element(l.begin(), l.end());\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n     \
    \   if(l[i] > max)\n            max = l[i];\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=l[0];\n    for(long i=1;i<l.size();i++)\n    {\n      if(l[i]>max)\n\
    \      {\n        max=l[i];\n      }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=0;\n    for(int i=0;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long max = 0;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i]\
    \ > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    auto iter = std::max_element(l.begin(),\
    \ l.end());\n    long res = *iter;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  long max_val=l[0];\n  for(auto it:l){\n    if(it>max_val)\n      max_val=it;\n\
    \  }\n  return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = 0;\n    for(int i = 0; i < l.size(); i++){\n        if(l[i]\
    \ > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    return *max_element(l.begin(), l.end());\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({1, 2, 3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3, 3, 9, 0,\
    \ 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(int i = 1; i < l.size(); i++) {\n      \
    \  if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max=l[0];\n    for(int i=1;i<l.size();i++)\n    {\n        if(l[i]>max)\n\
    \        {\n            max=l[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n     \
    \   if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long max = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size() != 0);\n    long ans = INT_MIN;\n    for(long i =\
    \ 0; i < l.size(); i++) {\n        if(l[i] > ans) {\n            ans = l[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // Your code here\n    long maximum = l[0];\n    for(int i=1;i<l.size();i++){\n\
    \      if(l[i]>maximum){\n        maximum = l[i];\n      }\n    }\n    return\
    \ maximum;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use print\n  // Example: print \"Hello world!\"\n  sort(l.begin(),l.end());\n\
    \  return l[l.size()-1];\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long max = l[0];\n    for (int i = 1; i\
    \ < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n   \
    \     }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tfor (long i : l) {\n\t\tif (i > max)\n\t\t\tmax\
    \ = i;\n\t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long max_el = l[0];\n    for(int i = 1; i < l.size(); i++) {\n   \
    \     if(l[i] > max_el) {\n            max_el = l[i];\n        }\n    }\n    return\
    \ max_el;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tif (l[i]\
    \ > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long m = -999999999999;\n    for(long i = 0; i < l.size(); i++) {\n\
    \        if(l[i] > m) {\n            m = l[i];\n        }\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\t// Write your code here\n\tint max=l[0];\n\tfor(int i=0;i<l.size();i++)\n\
    \t{\n\t\tif(l[i]>max)\n\t\t{\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    if(l.size() == 0) return 0;\n    else if(l.size() == 1) return l[0];\n\
    \    else {\n        long max = -99999999;\n        for(long i = 0; i < l.size();\
    \ i++) {\n            if(l[i] > max) max = l[i];\n        }\n        return max;\n\
    \    }\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n\tassert(l.size() > 0);\n\tlong max = l[0];\n\tfor (int i = 1; i < l.size();\
    \ i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    long m = -1e15;\n    int n = l.size();\n    for(int i = 0; i < n;\
    \ i++) {\n        m = std::max(m, l[i]);\n    }\n    return m;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nlong max_element(std::vector<long>\
    \ l) {\n    // YOUR CODE HERE\n    long max = *std::max_element(l.begin(), l.end());\n\
    \    return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3}))) == (3));\n    assert(candidate((std::vector<long>({5, 3, -5, 2, -3,\
    \ 3, 9, 0, 124, 1, -10}))) == (124));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
