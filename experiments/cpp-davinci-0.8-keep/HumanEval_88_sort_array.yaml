name: HumanEval_88_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
  \ integers, return a copy of the given array after sorting,\n// you will sort the\
  \ given array in ascending order if the sum( first index value, last index value)\
  \ is odd,\n// or sort it in descending order if the sum( first index value, last\
  \ index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n\
  // * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2, 4, 3,\
  \ 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6,\
  \ 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array) {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
  \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
  \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
  \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
  \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
  \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n    assert(candidate((std::vector<long>({21,\
  \ 14, 23, 11}))) == (std::vector<long>({23, 21, 14, 11})));\n}\n"
completions: []
stop_tokens:
- "\n}"
