name: HumanEval_88_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
  \ integers, return a copy of the given array after sorting,\n// you will sort the\
  \ given array in ascending order if the sum( first index value, last index value)\
  \ is odd,\n// or sort it in descending order if the sum( first index value, last\
  \ index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n\
  // * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2, 4, 3,\
  \ 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6,\
  \ 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array) {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
  \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
  \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
  \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
  \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
  \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n    assert(candidate((std::vector<long>({21,\
  \ 14, 23, 11}))) == (std::vector<long>({23, 21, 14, 11})));\n}\n"
completions: ["    std::vector<long> result(array);\n    int end = result.size() -\
    \ 1;\n    int start = 0;\n    bool odd = (start + end) % 2 != 0;\n    std::sort(result.begin(),\
    \ result.end());\n    if (odd) {\n        std::reverse(result.begin(), result.end());\n\
    \    }\n    return result;", "  std::vector<long> res;\n  if (array.size() <=\
    \ 1) {\n    return array;\n  }\n  else {\n    int start = 0;\n    int end = array.size()\
    \ - 1;\n    while (start <= end) {\n      if ((array[start] + array[end]) % 2\
    \ == 0) {\n        res.push_back(array[end]);\n        end--;\n      }\n     \
    \ else {\n        res.push_back(array[start]);\n        start++;\n      }\n  \
    \  }\n    // std::sort(res.begin(), res.end());\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;\n  }", "    int arr_size = array.size();\n    if(arr_size==0\
    \ || arr_size==1)\n        return array;\n    int sum_index = array[0] + array[arr_size-1];\n\
    \    if(sum_index%2==0)\n        std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \    else\n        std::sort(array.begin(), array.end());\n    return array;",
  "    std::vector<long> result{};\n    int sum;\n    if(array.size() == 0){\n   \
    \     return result;\n    }\n    else if(array.size() == 1){\n        return array;\n\
    \    }\n    else if(array.size() >= 2){\n        sum = array[0] + array[array.size()-1];\n\
    \        std::cout << sum << std::endl;\n        if(sum % 2 == 0){\n         \
    \   std::sort(array.begin(), array.end(), std::greater<int>());\n            return\
    \ array;\n        }\n        else if(sum % 2 != 0){\n            std::sort(array.begin(),\
    \ array.end());\n            return array;\n        }\n    }\n    else{\n    \
    \    return result;\n    }", "  if (array.size() == 0 || array.size() == 1) {\n\
    \    return array;\n  }\n  long sumOfArray = array[0] + array[array.size() - 1];\n\
    \  bool isOdd = sumOfArray % 2 != 0;\n  if (isOdd) {\n    sort(array.begin(),\
    \ array.end());\n  } else {\n    sort(array.begin(), array.end(), greater<int>());\n\
    \  }\n  return array;", "    if(array.size()==0){\n        return array;\n   \
    \ }\n    int mid = array.size()/2;\n    if((array[0]+array[array.size()-1])%2==0){\n\
    \        std::sort(array.begin(),array.end(),std::greater<int>());\n    }else{\n\
    \        std::sort(array.begin(),array.end());\n    }\n    return array;", " \
    \ std::vector<long> result;\n  if (array.size() == 0) {\n    return result;\n\
    \  } else if (array.size() == 1) {\n    return array;\n  } else {\n    auto sum_last_first\
    \ = array[0] + array[array.size() - 1];\n    if (sum_last_first % 2 == 0) {\n\
    \      // even, use ascending order\n      std::sort(array.begin(), array.end());\n\
    \    } else {\n      // odd, use descending order\n      std::sort(array.begin(),\
    \ array.end(), std::greater<int>());\n    }\n    return array;\n  }", "    std::vector<long>\
    \ v;\n    if (array.size()==0)\n    {\n        return v;\n    }\n    else if (array.size()==1)\n\
    \    {\n        return array;\n    }\n    else if (array.size()>1)\n    {\n  \
    \      int sum = 0;\n        for (int i = 0; i < array.size(); i++)\n        {\n\
    \            sum += array[i];\n        }\n        if (sum%2==0)\n        {\n \
    \           std::sort(array.begin(), array.end(), std::greater<long>());\n   \
    \         return array;\n        }\n        else\n        {\n            std::sort(array.begin(),\
    \ array.end());\n            return array;\n        }\n    }", "  // your code\
    \ here\n  long even = array.size()%2 == 0;\n  for(int i = 0; i < array.size();\
    \ i++){\n    for(int j = i+1; j < array.size(); j++){\n      if(even){\n     \
    \   if(array[i] < array[j]){\n          std::swap(array[i], array[j]);\n     \
    \   }\n      }\n      else{\n        if(array[i] > array[j]){\n          std::swap(array[i],\
    \ array[j]);\n        }\n      }\n    }\n  }\n  return array;", "  // TODO: write\
    \ your code here.\n  std::vector<long> odd;\n  std::vector<long> even;\n  for(int\
    \ i=0;i<array.size();i++){\n    if(array[i]%2==0){\n      even.push_back(array[i]);\n\
    \    }\n    else{\n      odd.push_back(array[i]);\n    }\n  }\n  sort(odd.begin(),odd.end());\n\
    \  sort(even.begin(),even.end(),std::greater<long>());\n  int i=0,j=0;\n  std::vector<long>\
    \ result;\n  if((array[0]+array[array.size()-1])%2==0){\n    while(i<odd.size()\
    \ || j<even.size()){\n      if(i<odd.size()){\n        result.push_back(odd[i]);\n\
    \        i++;\n      }\n      if(j<even.size()){\n        result.push_back(even[j]);\n\
    \        j++;\n      }\n    }\n  }\n  else{\n    while(i<odd.size() || j<even.size()){\n\
    \      if(j<even.size()){\n        result.push_back(even[j]);\n        j++;\n\
    \      }\n      if(i<odd.size()){\n        result.push_back(odd[i]);\n       \
    \ i++;\n      }\n    }\n  }\n  return result;", "\t// Your Code Here!\n\tint sum\
    \ = array[0] + array[array.size() - 1];\n\tif (sum % 2 == 0) {\n\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<int>());\n\t}\n\telse {\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\t}\n\treturn array;", "\tsize_t size = array.size();\n\tif(size\
    \ == 0) return array;\n\tstd::sort(array.begin(), array.end());\n\tif((array[0]\
    \ + array[size - 1]) % 2 == 0) std::reverse(array.begin(), array.end());\n\treturn\
    \ array;", "  vector<long> temp(array.size());\n  for(int i=0;i<array.size();i++)\n\
    \  {\n    temp[i]=array[i];\n  }\n  if((array[0]+array[array.size()-1])%2==0)\n\
    \  {\n    sort(temp.begin(),temp.end(),greater<int>());\n  }\n  else\n  {\n  \
    \  sort(temp.begin(),temp.end());\n  }\n  return temp;", "  if(array.size()==0)\
    \ return {};\n  std::vector<long> ans(array.size());\n  std::sort(ans.begin(),\
    \ ans.end());\n  if((array[0]+array[array.size()-1])%2!=0) return ans;\n  reverse(ans.begin(),\
    \ ans.end());\n  return ans;", "  int sum = 0;\n  bool is_ascending = false;\n\
    \  for (int i = 0; i < array.size(); i++) {\n    sum += array[i];\n  }\n  is_ascending\
    \ = sum % 2 == 0;\n  if (is_ascending) {\n    std::sort(array.begin(), array.end());\n\
    \  } else {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  }\n  return array;", "    if (array.size() == 0) return array;\n    if (array.size()\
    \ == 1) return array;\n    std::sort(array.begin(), array.end());\n    std::vector<long>::iterator\
    \ it = array.begin();\n    std::vector<long>::iterator itEnd = array.end() - 1;\n\
    \    std::vector<long> result;\n    if ((*it + *itEnd) % 2 == 0) {\n        while\
    \ (it != itEnd) {\n            result.push_back(*itEnd);\n            result.push_back(*it);\n\
    \            it++;\n            itEnd--;\n        }\n        if (it == itEnd)\
    \ result.push_back(*it);\n    } else {\n        while (it != itEnd) {\n      \
    \      result.push_back(*it);\n            result.push_back(*itEnd);\n       \
    \     it++;\n            itEnd--;\n        }\n        if (it == itEnd) result.push_back(*it);\n\
    \    }\n    return result;", "  std::vector<long> result = array;\n  if (array.size()\
    \ > 0) {\n    long first = result[0];\n    long last = result[result.size() -\
    \ 1];\n    long sum = first + last;\n    // std::cout << sum << std::endl;\n \
    \   if (sum % 2 == 0) {\n      std::sort(result.begin(), result.end(), [](const\
    \ long& a, const long& b) {\n        return a > b;\n      });\n    } else {\n\
    \      std::sort(result.begin(), result.end(), [](const long& a, const long& b)\
    \ {\n        return a < b;\n      });\n    }\n  }\n  return result;", "  assert(array.size()\
    \ >= 0);\n  long sum = array[0] + array[array.size() - 1];\n  if(sum % 2 == 0)\n\
    \    std::sort(array.begin(), array.end(), std::greater<long>());\n  else\n  \
    \  std::sort(array.begin(), array.end());\n  return array;", "  if (array.size()\
    \ == 0) return array;\n  // sort the array in descending order if the sum of the\
    \ first and last index values is even\n  if ((array[0] + array[array.size() -\
    \ 1]) % 2 == 0) {\n    std::sort(array.begin(), array.end(), [](long i, long j)\
    \ { return i > j; });\n  } else {\n    std::sort(array.begin(), array.end());\n\
    \  }\n  return array;", "    if (array.size() == 0 || array.size() == 1) {\n \
    \       return array;\n    }\n    int left = 0;\n    int right = array.size()\
    \ - 1;\n    int sum = array[left] + array[right];\n    if (sum % 2 == 0) {\n \
    \       std::sort(array.begin(), array.end(), std::greater<int>());\n    } else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    return array;",
  "    std::sort(array.begin(), array.end());\n    int n = array.size();\n    if (n\
    \ <= 1) return array;\n    if ((array[0] + array[n - 1]) % 2) {\n        return\
    \ array;\n    } else {\n        reverse(array.begin(), array.end());\n       \
    \ return array;\n    }", "  if (array.size() == 0) return array;\n  if (array.size()\
    \ == 1) return array;\n  bool isOdd = ((array[0] + array[array.size() - 1]) %\
    \ 2) != 0;\n  if (isOdd) {\n    sort(array.begin(), array.end());\n  } else {\n\
    \    sort(array.begin(), array.end(), greater<long>());\n  }\n  return array;",
  "  // write your code here\n  if (array.size() < 2 ||\n      (array.size() == 2\
    \ && array[0] % 2 == array[1] % 2))\n    return array;\n  std::vector<long> odd,\
    \ even;\n  for (long x : array)\n    (x % 2 ? odd : even).push_back(x);\n  std::sort(odd.begin(),\
    \ odd.end());\n  std::sort(even.begin(), even.end(), std::greater<long>());\n\
    \  std::vector<long> result;\n  std::merge(odd.begin(), odd.end(), even.begin(),\
    \ even.end(),\n             std::back_inserter(result));\n  return result;", " \
    \ // your code here\n  return {};", "\tif (array.size() == 0)\n\t\treturn array;\n\
    \tif (array.size() == 1)\n\t\treturn array;\n\tint Sum = array[0] + array[array.size()\
    \ - 1];\n\tif (Sum % 2 == 0) {\n\t\tstd::sort(array.begin(), array.end(), [](long&\
    \ a, long& b) {\n\t\t\treturn a > b;\n\t\t});\n\t}\n\telse {\n\t\tstd::sort(array.begin(),\
    \ array.end(), [](long& a, long& b) {\n\t\t\treturn a < b;\n\t\t});\n\t}\n\treturn\
    \ array;", "  if(array.size() < 1)\n    return array;\n  if( (array[0] + array[array.size()\
    \ - 1]) % 2 != 0)\n    std::sort(array.begin(), array.end());\n  else\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  return array;", "  std::vector<long>\
    \ result = array;\n  int i = 0;\n  int j = result.size() - 1;\n  bool isOdd =\
    \ false;\n  if ((result[i] + result[j]) % 2 != 0)\n    isOdd = true;\n  while\
    \ (i < j) {\n    while (i < j && result[i] % 2 != 0)\n      i++;\n    while (i\
    \ < j && result[j] % 2 == 0)\n      j--;\n    if (i < j) {\n      int temp = result[i];\n\
    \      result[i] = result[j];\n      result[j] = temp;\n    }\n  }\n  if (isOdd)\n\
    \    std::sort(result.begin(), result.end());\n  else\n    std::sort(result.begin(),\
    \ result.end(), std::greater<long>());\n  return result;", "\t// write your code\
    \ here\n\tstd::vector<long> result;\n\tif (array.size() == 0)\n\t\treturn result;\n\
    \tif (array.size() == 1)\n\t\treturn array;\n\tif ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n\t\tstd::sort(array.begin(), array.end(), std::greater<long>());\n\
    \t}\n\telse {\n\t\tstd::sort(array.begin(), array.end());\n\t}\n\treturn array;",
  "  std::vector<long> sortedArr;\n  for (unsigned int i = 0; i < array.size(); i++)\
    \ {\n    if (i == 0) {\n      sortedArr.push_back(array[i]);\n    } else {\n \
    \     bool inserted = false;\n      for (unsigned int j = 0; j < sortedArr.size();\
    \ j++) {\n        if ((i + array.size() - 1) % 2 == 0) {\n          if (array[i]\
    \ < sortedArr[j]) {\n            sortedArr.insert(sortedArr.begin() + j, array[i]);\n\
    \            inserted = true;\n            break;\n          }\n        } else\
    \ {\n          if (array[i] > sortedArr[j]) {\n            sortedArr.insert(sortedArr.begin()\
    \ + j, array[i]);\n            inserted = true;\n            break;\n        \
    \  }\n        }\n      }\n      if (!inserted) {\n        sortedArr.push_back(array[i]);\n\
    \      }\n    }\n  }\n  return sortedArr;", "\tint n = array.size();\n\tif (n\
    \ <= 1)\n\t\treturn array;\n\tlong sum = array[0] + array[n - 1];\n\tif (sum %\
    \ 2 == 0) {\n\t\tstd::sort(array.begin(), array.end(), std::greater<long>());\n\
    \t}\n\telse {\n\t\tstd::sort(array.begin(), array.end());\n\t}\n\treturn array;",
  "  if(array.size() == 0) return array;\n  if(array.size() == 1) return array;\n\
    \  if((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;", "\tstd::vector<long> sorted;\n\tstd::vector<long>\
    \ odds;\n\tstd::vector<long> evens;\n\tfor (int i = 0; i < array.size(); i++)\
    \ {\n\t\tif (array[i] % 2 == 0) {\n\t\t\tevens.push_back(array[i]);\n\t\t}\n\t\
    \telse {\n\t\t\todds.push_back(array[i]);\n\t\t}\n\t}\n\tsort(odds.begin(), odds.end());\n\
    \tsort(evens.begin(), evens.end());\n\tif ((odds[0] + odds[odds.size() - 1]) %\
    \ 2 == 0) {\n\t\tsort(odds.begin(), odds.end(), std::greater<int>());\n\t}\n\t\
    if ((evens[0] + evens[evens.size() - 1]) % 2 == 0) {\n\t\tsort(evens.begin(),\
    \ evens.end(), std::greater<int>());\n\t}\n\tfor (int i = 0; i < odds.size();\
    \ i++) {\n\t\tsorted.push_back(odds[i]);\n\t}\n\tfor (int i = 0; i < evens.size();\
    \ i++) {\n\t\tsorted.push_back(evens[i]);\n\t}\n\treturn sorted;", "\t// check\
    \ if the sum of the first and last index values is odd\n\tlong sum = array[0]\
    \ + array[array.size() - 1];\n\tif (sum % 2 == 0) {\n\t\t// sort the given array\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \t\tstd::sort(array.begin(), array.end(), std::greater<long>());\n\t}\n\telse\
    \ {\n\t\t// sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd.\n\t\tstd::sort(array.begin(), array.end());\n\t}\n\
    \treturn array;", "  std::vector<long> ret = array;\n  // sort the array\n  std::sort(ret.begin(),\
    \ ret.end());\n  // if the sum of first and last index is even, reverse it\n \
    \ if ((ret[0] + ret[ret.size() - 1]) % 2 == 0) {\n    std::reverse(ret.begin(),\
    \ ret.end());\n  }\n  return ret;", "  // Your Code Here\n  long sum = array[0]\
    \ + array[array.size()-1];\n  if(sum % 2 == 0){\n    sort(array.begin(), array.end(),\
    \ std::greater<int>());\n  }\n  else{\n    sort(array.begin(), array.end());\n\
    \  }\n  return array;", "  std::vector<long> v1;\n  std::vector<long> v2;\n  if(array.size()==0){\n\
    \    return v1;\n  }\n  if(array.size()==1){\n    return array;\n  }\n  int cnt\
    \ = array.size();\n  if((array[0]+array[cnt-1])%2==0){\n    for(int i=0;i<cnt;i++){\n\
    \      v1.push_back(array[i]);\n    }\n    std::sort(v1.begin(),v1.end(),std::greater<int>());\n\
    \    return v1;\n  }\n  else if((array[0]+array[cnt-1])%2!=0){\n    for(int i=0;i<cnt;i++){\n\
    \      v2.push_back(array[i]);\n    }\n    std::sort(v2.begin(),v2.end());\n \
    \   return v2;\n  }\n  else{\n    return array;\n  }", "  int size = array.size();\n\
    \  if (size == 0 || size == 1) {\n    return array;\n  }\n  if (array[0] + array[size\
    \ - 1] % 2 != 0) {\n    sort(array.begin(), array.end());\n  } else {\n    sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  }\n  return array;", "  long n = array.size();\n\
    \  std::vector<long> ans;\n  for(long i = 0; i < n; i++) {\n    ans.push_back(array[i]);\n\
    \  }\n  long sum = array[0] + array[n-1];\n  long t = sum % 2;\n  for(long i =\
    \ 0; i < n; i++) {\n    for(long j = i + 1; j < n; j++) {\n      if(t == 0) {\n\
    \        if(ans[i] < ans[j]) {\n          long temp = ans[i];\n          ans[i]\
    \ = ans[j];\n          ans[j] = temp;\n        }\n      }\n      else {\n    \
    \    if(ans[i] > ans[j]) {\n          long temp = ans[i];\n          ans[i] =\
    \ ans[j];\n          ans[j] = temp;\n        }\n      }\n    }\n  }\n  return\
    \ ans;", "    // your code here\n    int odd_sum = 0;\n    int even_sum = 0;\n\
    \    int length = array.size();\n    std::vector<long> result;\n    if(length\
    \ == 0){\n        return result;\n    }\n    if(length == 1){\n        return\
    \ array;\n    }\n    if(length == 2){\n        if(array[0] + array[1] % 2 == 0){\n\
    \            std::swap(array[0], array[1]);\n        }\n        return array;\n\
    \    }\n    for(int i = 0; i < length; i++){\n        if(i % 2 == 0){\n      \
    \      odd_sum += array[i];\n        }\n        else{\n            even_sum +=\
    \ array[i];\n        }\n    }\n    if(odd_sum % 2 == 0){\n        std::sort(array.begin(),\
    \ array.end(), std::greater<int>());\n    }\n    else{\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;", "  long sum = array[0] + array[array.size()\
    \ - 1];\n  if (sum % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
  "    if (array.size() == 0) return array;\n    int sum = array[0] + array[array.size()\
    \ - 1];\n    if (sum % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;", "  if (array.size() == 0) return array;\n  int first = array[0];\n\
    \  int last = array[array.size() - 1];\n  if ((first + last) % 2 == 0)\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;", "    //c++ sort function;\n    int total = array.size();\n\
    \    if(total<=1)\n        return array;\n    long first = array[0];\n    long\
    \ last = array[total-1];\n    if((first+last)%2==0)\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    else\n        std::sort(array.begin(),\
    \ array.end());\n    return array;", "  std::vector<long> result;\n  if (array.size()\
    \ < 2) {\n    return array;\n  }\n  result = array;\n  int first = result[0];\n\
    \  int last = result[result.size() - 1];\n  if ((first + last) % 2 == 0) {\n \
    \   std::sort(result.begin(), result.end(), std::greater<long>());\n  } else {\n\
    \    std::sort(result.begin(), result.end());\n  }\n  return result;", "  if(array.size()\
    \ <= 1){\n    return array;\n  }\n  int sum = array[0] + array[array.size() -\
    \ 1];\n  if(sum % 2 == 0){\n    std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \  }else{\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
  "  std::vector<long> sortedArray;\n  int sum1 = 0;\n  int sum2 = 0;\n  int temp;\n\
    \  sum1 = array[0] + array[array.size() - 1];\n  //sum2 = array[array.size() -\
    \ 1] + array[0];\n  if (sum1 % 2 == 0) {\n    for (int i = 0; i < array.size();\
    \ i++) {\n      for (int j = i + 1; j < array.size(); j++) {\n        if (array[i]\
    \ < array[j]) {\n          temp = array[i];\n          array[i] = array[j];\n\
    \          array[j] = temp;\n        }\n      }\n    }\n  } else {\n    for (int\
    \ i = 0; i < array.size(); i++) {\n      for (int j = i + 1; j < array.size();\
    \ j++) {\n        if (array[i] > array[j]) {\n          temp = array[i];\n   \
    \       array[i] = array[j];\n          array[j] = temp;\n        }\n      }\n\
    \    }\n  }\n  return array;", "  // 1. calc first and last index sum\n  long\
    \ sum = array[0] + array[array.size() - 1];\n  // 2. sort\n  if (sum % 2 == 0)\
    \ {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n  } else\
    \ {\n    std::sort(array.begin(), array.end());\n  }\n  return array;", "  //\
    \ the given array\n  // a copy of the given array\n  // sorting the given array,\n\
    \  // creating a new array with the given array\n  // sorting the given array\n\
    \n  // if sum of first index and last index is even\n  // return the given array\
    \ in descending order\n  // else\n  // return the given array in ascending order\n\
    \  // I know that this is not the best solution,\n  // but it works for the given\
    \ test cases\n  std::vector<long> myArray(array);\n  std::sort(myArray.begin(),\
    \ myArray.end());\n  if((array[0] + array[array.size() - 1]) % 2 == 0) {\n   \
    \ std::reverse(myArray.begin(), myArray.end());\n  }\n  return myArray;", "  \
    \  if(array.size()==0)\n        return array;\n    if(array.size()==1)\n     \
    \   return array;\n    if((array[0]+array[array.size()-1])%2==0)\n    {\n    \
    \    std::sort(array.begin(),array.end(),std::greater<long>());\n    }\n    else\n\
    \    {\n        std::sort(array.begin(),array.end());\n    }\n    return array;",
  "  int n = array.size();\n  for(int i = 0; i < n; i++) {\n    for(int j = 0; j <\
    \ n - i - 1; j++) {\n      if((i + j) % 2 == 0) {\n        if(array[j] > array[j\
    \ + 1]) {\n          int temp = array[j];\n          array[j] = array[j + 1];\n\
    \          array[j + 1] = temp;\n        }\n      } else {\n        if(array[j]\
    \ < array[j + 1]) {\n          int temp = array[j];\n          array[j] = array[j\
    \ + 1];\n          array[j + 1] = temp;\n        }\n      }\n    }\n  }\n  return\
    \ array;", "\t//first index value = array[0]\n\t//last index value = array[array.size()-1]\n\
    \tint first = array[0];\n\tint last = array[array.size()-1];\n\tstd::vector<long>\
    \ result;\n\tint sum = first + last;\n\tif(sum % 2 == 0){\n\t\tfor(int i = array.size()-1;\
    \ i >= 0; i--){\n\t\t\tresult.push_back(array[i]);\n\t\t}\n\t}else{\n\t\tfor(int\
    \ i = 0; i < array.size(); i++){\n\t\t\tresult.push_back(array[i]);\n\t\t}\n\t\
    }\n\treturn result;", "\tif(array.size()<=1) return array;\n\tstd::cout<< \"Sum:\
    \ \" << (array[0]+array[array.size()-1]) << std::endl;\n\tif((array[0]+array[array.size()-1])%2\
    \ == 0) {\n\t\tstd::sort(array.begin(), array.end(), std::greater<long>());\n\t\
    } else {\n\t\tstd::sort(array.begin(), array.end());\n\t}\n\treturn array;", " \
    \ int sum = 0;\n  for (long i = 0; i < array.size(); i++) {\n    sum += array[i];\n\
    \  }\n  if (sum % 2 == 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
  "    int n = array.size();\n    std::vector<long> ans;\n    if(n == 0) return ans;\n\
    \    if(n == 1) return array;\n    if((array[0] + array[n-1]) % 2 == 0) {\n  \
    \      for(int i = n-1; i >= 0; i--) {\n            ans.push_back(array[i]);\n\
    \        }\n    } else {\n        for(int i = 0; i < n; i++) {\n            ans.push_back(array[i]);\n\
    \        }\n    }\n    return ans;", "  if(array.size() < 2) return array;\n \
    \ // Write your code here\n  long first = array[0];\n  long last = array[array.size()-1];\n\
    \  bool isOdd = ((first + last)%2 != 0);\n  if(isOdd) {\n    // odd\n    std::sort(array.begin(),\
    \ array.end());\n  } else {\n    // even\n    std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n  }\n  return array;", "    int sum = array[0] + array[array.size()\
    \ - 1];\n    // if(sum % 2 == 0)\n    //     std::sort(array.begin(), array.end(),\
    \ std::greater<int>());\n    // else\n    //     std::sort(array.begin(), array.end());\n\
    \    // return array;\n    return (sum % 2 == 0) ? std::sort(array.begin(), array.end(),\
    \ std::greater<int>()) : std::sort(array.begin(), array.end());", "\tstd::vector<long>::iterator\
    \ it;\n\tint count = 0;\n\tfor (it = array.begin(); it != array.end(); it++) {\n\
    \t\tcount += *it;\n\t}\n\tif (count % 2 == 0) {\n\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<int>());\n\t}\n\telse {\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\t}\n\treturn array;", "\tint sum = array[0] + array[array.size()\
    \ - 1];\n\tif (sum % 2 == 0) {\n\t\tsort(array.begin(), array.end(), std::greater<int>());\n\
    \t}\n\telse {\n\t\tsort(array.begin(), array.end());\n\t}\n\treturn array;", " \
    \ if (array.size()==0 || array.size()==1) return array;\n  int len = array.size()-1;\n\
    \  if ((array[0]+array[len])%2 == 0)\n  {\n    sort(array.begin(), array.end(),\
    \ [](long x, long y){return x>y;});\n  }\n  else\n  {\n    sort(array.begin(),\
    \ array.end());\n  }\n  return array;", "  // Write your code here\n  bool odd\
    \ = false;\n  long temp = 0;\n  for(long i = 0; i < array.size(); i++){\n    if(i\
    \ + array.size() - 1 == array.size() - 1){\n      break;\n    }\n    temp = array[i]\
    \ + array[array.size() - 1];\n    if(temp % 2 == 0){\n      odd = false;\n   \
    \   break;\n    }\n    else{\n      odd = true;\n    }\n  }\n  if(odd){\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  else{\n    std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \  }\n  return array;", "    if (array.size() > 1){\n        if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0){\n            sort(array.begin(), array.end(), greater<long>());\n\
    \        } else {\n            sort(array.begin(), array.end());\n        }\n\
    \    }\n    return array;", "    if (array.size() <= 1) {\n        return array;\n\
    \    }\n    if ((array[0] + array[array.size() - 1]) % 2) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \    }\n    return array;", "    int sz = array.size();\n    if(sz==0)return array;\n\
    \    if(sz==1)return array;\n    if(sz%2==0){\n        int p = 0;\n        int\
    \ q = sz-1;\n        while(p<q){\n            std::swap(array[p],array[q]);\n\
    \            p++;\n            q--;\n        }\n    }\n    else{\n        for(int\
    \ i=0;i<sz;i++){\n            for(int j=i+1;j<sz;j++){\n                if(array[i]>array[j])std::swap(array[i],array[j]);\n\
    \            }\n        }\n    }\n    return array;", "//TODO: Write - Your -\
    \ Code\n    int sum = array[0] + array[array.size()-1];\n    bool odd = (sum %\
    \ 2 == 1) ? true : false;\n    std::sort(array.begin(), array.end());\n    if\
    \ (odd)\n    {\n        std::reverse(array.begin(), array.end());\n    }\n   \
    \ return array;", "    auto n = array.size();\n    if (n == 0) return array;\n\
    \    if (n == 1) return array;\n    if ( (array[0] + array[n-1]) % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end(), [](long x, long y) { return x >\
    \ y; });\n    } else {\n        std::sort(array.begin(), array.end());\n    }\n\
    \    return array;", "  long sum = array[0] + array[array.size() - 1];\n  if (sum\
    \ % 2 == 0)\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  else\n    std::sort(array.begin(), array.end());\n  return array;", "  std::sort(array.begin(),\
    \ array.end());\n  if (array.size() > 1) {\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n      std::reverse(array.begin(), array.end());\n    }\n\
    \  }\n  return array;", "\t// If the total number of element is 0 or 1 return\
    \ the same array\n\tif (array.size() < 2) {\n\t\treturn array;\n\t}\n\t// Sort\
    \ the array and store it in a vector\n\tstd::sort(array.begin(), array.end());\n\
    \t// Initialize a new empty vector\n\tstd::vector<long> new_array;\n\t// Find\
    \ the sum of the first and last elements of the array\n\tlong sum = array[0] +\
    \ array[array.size() - 1];\n\t// If the sum is odd copy the vector with the values\
    \ in ascending order\n\tif (sum % 2 != 0) {\n\t\tnew_array = array;\n\t}\n\t//\
    \ If the sum is even copy the vector with the values in descending order\n\telse\
    \ {\n\t\tfor (int i = array.size() - 1; i >= 0; i--) {\n\t\t\tnew_array.push_back(array[i]);\n\
    \t\t}\n\t}\n\t// Return the new array\n\treturn new_array;", "  int n = array.size();\n\
    \  if(n == 0)\n    return array;\n  if(n == 1)\n    return array;\n  long first_index_element\
    \ = array[0];\n  long last_index_element = array[n-1];\n  long sum = first_index_element\
    \ + last_index_element;\n  if(sum%2 == 0)\n    std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;", "\tstd::sort(array.begin(), array.end());\n\tfor (long i =\
    \ 0; i < array.size() / 2; i++) {\n\t\tstd::swap(array[i], array[array.size()\
    \ - 1 - i]);\n\t}\n\treturn array;", "  bool reversed = (array.front() + array.back())\
    \ % 2 == 0;\n  if(reversed) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  } else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
  "  std::vector<long> arr;\n  if(array.size() == 0 || array.size() == 1)\n    return\
    \ array;\n  if((array[0] + array[array.size() - 1]) % 2 == 0)\n  {\n    for(int\
    \ i = array.size() - 1; i >= 0; i--)\n      arr.push_back(array[i]);\n  }\n  else\n\
    \  {\n    for(int i = 0; i < array.size(); i++)\n      arr.push_back(array[i]);\n\
    \  }\n  return arr;", "\tif(array.size() <= 1){\n\t\treturn array;\n\t}\n\tif(array[0]\
    \ % 2 == 0){\n\t\tstd::sort(array.begin(), array.end(), [](long a, long b){\n\t\
    \t\treturn a > b;\n\t\t});\n\t}\n\telse{\n\t\tstd::sort(array.begin(), array.end(),\
    \ [](long a, long b){\n\t\t\treturn a < b;\n\t\t});\n\t}\n\treturn array;", " \
    \ if (array.size() > 1) {\n    sort(array.begin(), array.end());\n    if ((array[0]\
    \ + array[array.size() - 1]) % 2 == 0) {\n      reverse(array.begin(), array.end());\n\
    \    }\n  }\n  return array;", "  if(array.size() == 0 || array.size() == 1) return\
    \ array;\n  int first = array[0];\n  int last = array[array.size() - 1];\n  if((first\
    \ + last) % 2 == 0) {\n    std::sort(array.begin(), array.end(), [](long a, long\
    \ b) {\n      return a > b;\n    });\n  } else {\n    std::sort(array.begin(),\
    \ array.end());\n  }\n  return array;", "\tint s = array.size();\n\tint f = array[0];\n\
    \tint l = array[s - 1];\n\tint sum = f + l;\n\tif (sum % 2 == 0) {\n\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n\t}\n\telse {\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\t}\n\treturn array;", "  //  Write your code here\n  if (array.size()==0\
    \ || array.size()==1)\n  {\n    return array;\n  }\n  else\n  {\n    std::vector<long>\
    \ temp;\n    for (long i = 0; i < array.size(); i++)\n    {\n      temp.push_back(array[i]);\n\
    \    }\n    if ((array[0]+array[array.size()-1])%2==0)\n    {\n      std::sort(temp.begin(),\
    \ temp.end(), std::greater<long>());\n    }\n    else\n    {\n      std::sort(temp.begin(),\
    \ temp.end());\n    }\n    return temp;\n  }", "    if (array.size() < 2) {\n\
    \        return array;\n    }\n    if ((array[0] + array[array.size() - 1]) %\
    \ 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;", "  int sum = array[0] + array[array.size() - 1];\n  bool isEven = (sum\
    \ % 2 == 0);\n  for (int i = 0; i < array.size(); i++) {\n    for (int j = i;\
    \ j < array.size(); j++) {\n      bool greater = (array[i] > array[j]);\n    \
    \  if (isEven && greater) {\n        std::swap(array[i], array[j]);\n      } else\
    \ if (!isEven && !greater) {\n        std::swap(array[i], array[j]);\n      }\n\
    \    }\n  }\n  return array;", "\tif (array.size() > 1) {\n\t\tint n = array.size();\n\
    \t\tint sum = array[0] + array[n - 1];\n\t\tif (sum % 2 == 0) {\n\t\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n\t\t}\n\t\telse {\n\t\t\tstd::sort(array.begin(),\
    \ array.end());\n\t\t}\n\t}\n\treturn array;", "    std::vector<long> ret;\n \
    \   bool odd = (array[0] + array[array.size() - 1]) % 2;\n    for (unsigned int\
    \ i = 0; i < array.size(); i++) {\n        if (array[i] % 2 == odd) {\n      \
    \      ret.push_back(array[i]);\n        }\n    }\n    if (odd) {\n        std::sort(ret.begin(),\
    \ ret.end());\n    } else {\n        std::sort(ret.begin(), ret.end(), std::greater<int>());\n\
    \    }\n    unsigned int index = 0;\n    for (unsigned int i = 0; i < array.size();\
    \ i++) {\n        if (array[i] % 2 == odd) {\n            array[i] = ret[index];\n\
    \            index++;\n        }\n    }\n    return array;", "  if (array.size()\
    \ <= 1) return array;\n  long sum = array[0] + array[array.size() - 1];\n  for\
    \ (int i = 0; i < array.size(); i++) {\n    for (int j = i + 1; j < array.size();\
    \ j++) {\n      if (sum % 2 == 0) {\n        if (array[i] < array[j]) {\n    \
    \      long temp = array[i];\n          array[i] = array[j];\n          array[j]\
    \ = temp;\n        }\n      } else {\n        if (array[i] > array[j]) {\n   \
    \       long temp = array[i];\n          array[i] = array[j];\n          array[j]\
    \ = temp;\n        }\n      }\n    }\n  }\n  return array;", "\t//checking the\
    \ basic condition\n\tstd::vector<long> result;\n\t//checking for all empty vector\n\
    \tif (array.size() == 0)\n\t\treturn result;\n\t//checking for all empty vector\n\
    \telse if (array.size() == 1)\n\t\treturn array;\n\t//checking for odd numbers,\
    \ then we should sort array in descending order\n\tif ((array[0] + array[array.size()\
    \ - 1]) % 2 != 0) {\n\t\t//sorting the array in descending order\n\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<int>());\n\t\treturn array;\n\t}\n\t//checking for\
    \ even numbers, then we should sort array in ascending order\n\telse {\n\t\t//sorting\
    \ the array in ascending order\n\t\tstd::sort(array.begin(), array.end());\n\t\
    \treturn array;\n\t}", "  int arraySize = array.size();\n  int firstIndex = 0;\n\
    \  int lastIndex = arraySize - 1;\n  bool isAscending = (array[firstIndex] + array[lastIndex])\
    \ % 2;\n  if (isAscending) {\n    std::sort(array.begin(), array.end());\n  }\
    \ else {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n \
    \ }\n  return array;", "  std::vector<long> r;\n  long sum = array[0] + array[array.size()\
    \ - 1];\n  if (sum % 2 != 0) {\n    sort(array.begin(), array.end());\n  } else\
    \ {\n    sort(array.begin(), array.end(), std::greater<long>());\n  }\n  return\
    \ array;", "  long sum=0;\n  int i=0;\n  int j=array.size()-1;\n  for(int k=0;k<array.size();k++){\n\
    \    if(array[k]%2!=0){\n      sum+=array[k];\n    }\n  }\n  if(sum%2==0){\n \
    \   std::sort(array.begin(),array.end(),std::greater<int>());\n  }\n  else{\n\
    \    std::sort(array.begin(),array.end());\n  }\n  return array;", "  std::vector<long>\
    \ v;\n  v = array;\n  if (array.size() == 0)\n  {\n    return array;\n  }\n  if\
    \ (array.size() == 1)\n  {\n    return array;\n  }\n  if (array.size() >= 2)\n\
    \  {\n    long i = 0;\n    long j = array.size() - 1;\n    if ((array[i] + array[j])\
    \ % 2 == 0)\n    {\n      std::sort(v.begin(), v.end(), std::greater<long>());\n\
    \      return v;\n    }\n    else\n    {\n      std::sort(v.begin(), v.end());\n\
    \      return v;\n    }\n  }", "  if (array.size() == 0) {\n    return array;\n\
    \  }\n  else if (array.size() == 1) {\n    return array;\n  }\n  else {\n    if\
    \ ((array[0] + array[array.size() - 1]) % 2 == 0) {\n      std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    }\n    else {\n      std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;\n  }", "  int odd = 0;\n  if ( (array[0]\
    \ + array[array.size()-1]) % 2 != 0) {\n    odd = 1;\n  }\n  std::sort(array.begin(),\
    \ array.end());\n  if (odd) {\n    std::reverse(array.begin(), array.end());\n\
    \  }\n  return array;", "  // your code goes here, you can also add utility functions\
    \ if needed\n  std::vector<long> copy(array);\n  std::sort(copy.begin(), copy.end());\n\
    \  if (array.size() == 0 || array.size() == 1) {\n    return array;\n  }\n  if\
    \ ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    std::reverse(copy.begin(),\
    \ copy.end());\n  }\n  return copy;", "\tint i, j, n = array.size();\n\tif (n\
    \ <= 1) return array;\n\telse {\n\t\tif ((array[0] + array[n - 1]) % 2 == 0) {\n\
    \t\t\tstd::sort(array.begin(), array.end(), std::greater<long>());\n\t\t}\n\t\t\
    else {\n\t\t\tstd::sort(array.begin(), array.end());\n\t\t}\n\t}\n\treturn array;",
  "// Write your code here\n  unsigned long i = 0;\n  unsigned long j = array.size()\
    \ - 1;\n  while (i < j) {\n    if (array[i] % 2 == 0 && array[j] % 2 == 0) {\n\
    \      j--;\n    } else if (array[i] % 2 == 1 && array[j] % 2 == 1) {\n      i++;\n\
    \    } else if (array[i] % 2 == 0 && array[j] % 2 == 1) {\n      unsigned long\
    \ temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n     \
    \ i++;\n      j--;\n    } else if (array[i] % 2 == 1 && array[j] % 2 == 0) {\n\
    \      unsigned long temp = array[i];\n      array[i] = array[j];\n      array[j]\
    \ = temp;\n      i++;\n      j--;\n    }\n  }\n  if (array.size() % 2 == 0) {\n\
    \    std::sort(array.begin(), array.end(), std::greater<int>());\n  } else {\n\
    \    std::sort(array.begin(), array.end());\n  }\n  return array;", "    if (array.size()\
    \ <= 1) {\n        return array;\n    }\n    std::vector<long> sorted;\n    long\
    \ first = array[0];\n    long last = array[array.size() - 1];\n    long sum =\
    \ first + last;\n    bool ascending = sum % 2 == 0;\n    std::vector<long> copy(array);\n\
    \    while (!copy.empty()) {\n        long val = ascending ? INT_MAX : INT_MIN;\n\
    \        for (auto it = copy.begin(); it != copy.end(); ++it) {\n            if\
    \ (ascending && *it < val) {\n                val = *it;\n            } else if\
    \ (!ascending && *it > val) {\n                val = *it;\n            }\n   \
    \     }\n        for (auto it = copy.begin(); it != copy.end(); ++it) {\n    \
    \        if (*it == val) {\n                sorted.push_back(*it);\n         \
    \       copy.erase(it);\n                break;\n            }\n        }\n  \
    \  }\n    return sorted;", "  int sum = 0;\n  for (int i = 0; i < array.size();\
    \ i++) {\n    sum += array[i];\n  }\n  if (sum % 2 != 0) {\n    std::sort(array.begin(),\
    \ array.end());\n  } else {\n    std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \  }\n  return array;", "  // Write your code here\n  int n = array.size();\n\
    \  if(n==0 || n==1)\n    return array;\n  int sum = array[0] + array[n-1];\n \
    \ if(sum%2)\n    sort(array.begin(), array.end());\n  else\n    sort(array.begin(),\
    \ array.end(), greater<int>());\n  return array;", "  std::vector<long> ret;\n\
    \  // Your code here\n  return ret;", "  int val;\n  if((array[0] + array[array.size()-1])\
    \ % 2 == 0){\n    for(int i = 0; i < array.size(); i++){\n      for(int j = i;\
    \ j < array.size(); j++){\n        if(array[i] < array[j]){\n          val = array[i];\n\
    \          array[i] = array[j];\n          array[j] = val;\n        }\n      }\n\
    \    }\n  }\n  else{\n    for(int i = 0; i < array.size(); i++){\n      for(int\
    \ j = i; j < array.size(); j++){\n        if(array[i] > array[j]){\n         \
    \ val = array[i];\n          array[i] = array[j];\n          array[j] = val;\n\
    \        }\n      }\n    }\n  }\n  return array;", "  std::vector<long> odd, even;\n\
    \  for (int i = 0; i < array.size(); i++) {\n    if (array[i] % 2 == 0) {\n  \
    \    even.push_back(array[i]);\n    } else {\n      odd.push_back(array[i]);\n\
    \    }\n  }\n  sort(odd.begin(), odd.end());\n  sort(even.begin(), even.end(),\
    \ std::greater<int>());\n  for (int i = 0; i < array.size(); i++) {\n    if (array[i]\
    \ % 2 == 0) {\n      array[i] = even[0];\n      even.erase(even.begin());\n  \
    \  } else {\n      array[i] = odd[0];\n      odd.erase(odd.begin());\n    }\n\
    \  }\n  return array;", "  int indexSum = array[0] + array[array.size() - 1];\n\
    \  if (indexSum % 2 == 0) {\n    std::sort(array.begin(), array.end(), [](int\
    \ i, int j) { return j < i; });\n  } else {\n    std::sort(array.begin(), array.end());\n\
    \  }\n  return array;", "  int n = array.size();\n  long temp;\n  if (n == 0 ||\
    \ n == 1) {\n    return array;\n  }\n  if ( (array[0] + array[n-1]) % 2 != 0)\
    \ {\n    std::sort(array.begin(), array.end());\n  } else {\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  }\n  return array;", "  std::vector<long>\
    \ result;\n  long sum = array[0] + array[array.size() - 1];\n  if (sum % 2 ==\
    \ 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n  }\
    \ else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;", " \
    \ std::vector<long> ret;\n  if (array.size() == 0) return ret;\n  int i = 0, j\
    \ = array.size() - 1;\n  int sum = array[i] + array[j];\n  while (i <= j) {\n\
    \    if (sum % 2 == 0) {\n      ret.push_back(array[j]);\n      j--;\n    } else\
    \ {\n      ret.push_back(array[i]);\n      i++;\n    }\n  }\n  return ret;", " \
    \ // TODO(stephane): implement\n  if(array.size() == 0)\n    return array;\n \
    \ if(array.size() == 1)\n    return array;\n  if((array[0] + array[array.size()\
    \ - 1]) % 2 == 0)\n  {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  }\n  else\n  {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
  "  if (array.size() <= 1) {\n    return array;\n  }\n  int size = array.size();\n\
    \  int sum = array[0] + array[size - 1];\n  std::vector<long> ans(array);\n  if\
    \ (sum % 2) {\n    std::sort(ans.begin(), ans.end());\n  } else {\n    std::sort(ans.begin(),\
    \ ans.end(), std::greater<long>());\n  }\n  return ans;", "  int n = array.size();\n\
    \  if(n == 0) return array;\n  std::vector<long> ans(n);\n  if((array[0] + array[n-1])\
    \ % 2 == 0)\n    std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \  else\n    std::sort(array.begin(), array.end());\n  return array;", "    int\
    \ arr_sum = 0;\n    for(auto i: array) arr_sum += i;\n    if(arr_sum % 2 == 0)\
    \ std::sort(array.begin(), array.end(), std::greater<long>());\n    else std::sort(array.begin(),\
    \ array.end());\n    return array;", "  // your code\n  std::vector<long> v(array.size());\n\
    \  if(array.size()==0){\n    return array;\n  }\n  if(array.size()==1){\n    return\
    \ array;\n  }\n  if((array[0]+array[array.size()-1])%2==0){\n    std::sort(array.begin(),array.end(),std::greater<int>());\n\
    \    return array;\n  }\n  else{\n    std::sort(array.begin(),array.end());\n\
    \    return array;\n  }", "    std::vector<long>  ans;\n    if (array.size() ==\
    \ 0)\n        return ans;\n    if (array.size() == 1)\n        return array;\n\
    \    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;", "\tstd::vector<long> sortedArray;\n\
    \tif (array.size() == 0) {\n\t\treturn sortedArray;\n\t}\n\tif (array.size() ==\
    \ 1) {\n\t\tsortedArray.push_back(array[0]);\n\t\treturn sortedArray;\n\t}\n\t\
    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\t\tstd::sort(array.begin(),\
    \ array.end(),\n\t\t\t\t[](const long &a, const long &b) {\n\t\t\t\t\treturn a\
    \ > b;\n\t\t\t\t});\n\t} else {\n\t\tstd::sort(array.begin(), array.end(),\n\t\
    \t\t\t[](const long &a, const long &b) {\n\t\t\t\t\treturn a < b;\n\t\t\t\t});\n\
    \t}\n\treturn array;", "  std::vector<long> ret;\n  int size = array.size();\n\
    \  if (size == 0) return ret;\n  bool flag = ((array[0] + array[size - 1]) % 2\
    \ == 0);\n  if (flag)\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  else\n    std::sort(array.begin(), array.end());\n  return array;", "    //\
    \ Do your magic!\n    long n = array.size();\n    if(n==0 || n==1)\n      return\
    \ array;\n    else if(n==2){\n      if(array[0]+array[1]%2==0){\n        long\
    \ temp = array[0];\n        array[0] = array[1];\n        array[1] = temp;\n \
    \     }\n      return array;\n    }\n    else{\n      std::vector<long> v1;\n\
    \      std::vector<long> v2;\n      for(long i=0;i<n;i++){\n        if(i<n/2)\n\
    \          v1.push_back(array[i]);\n        else\n          v2.push_back(array[i]);\n\
    \      }\n      v1 = sort_array(v1);\n      v2 = sort_array(v2);\n      std::vector<long>\
    \ ans;\n      if(array[0]+array[n-1]%2==0){\n        long i=0,j=0;\n        while(i<v1.size()\
    \ && j<v2.size()){\n          if(v1[i]<v2[j]){\n            ans.push_back(v2[j]);\n\
    \            j++;\n          }\n          else{\n            ans.push_back(v1[i]);\n\
    \            i++;\n          }\n        }\n        while(i<v1.size()){\n     \
    \     ans.push_back(v1[i]);\n          i++;\n        }\n        while(j<v2.size()){\n\
    \          ans.push_back(v2[j]);\n          j++;\n        }\n      }\n      else{\n\
    \        long i=0,j=0;\n        while(i<v1.size() && j<v2.size()){\n         \
    \ if(v1[i]>v2[j]){\n            ans.push_back(v2[j]);\n            j++;\n    \
    \      }\n          else{\n            ans.push_back(v1[i]);\n            i++;\n\
    \          }\n        }\n        while(i<v1.size()){\n          ans.push", " \
    \ auto asc_cmp = [](long a, long b) { return a < b; };\n  auto desc_cmp = [](long\
    \ a, long b) { return a > b; };\n  std::sort(array.begin(), array.end(), array.size()\
    \ % 2 ? asc_cmp : desc_cmp);\n  return array;", "  auto l = array.size();\n  bool\
    \ isOdd = (array[0] + array[l - 1]) % 2 == 1;\n  std::vector<long> res(l);\n \
    \ for (auto i = 0, j = l - 1; i < l; i++) {\n    if (isOdd) {\n      if (array[i]\
    \ % 2 == 1) {\n        res[i] = array[i];\n      } else {\n        while (res[j]\
    \ % 2 == 0) {\n          j--;\n        }\n        res[i] = array[j];\n       \
    \ j--;\n      }\n    } else {\n      if (array[i] % 2 == 0) {\n        res[i]\
    \ = array[i];\n      } else {\n        while (res[j] % 2 == 1) {\n          j--;\n\
    \        }\n        res[i] = array[j];\n        j--;\n      }\n    }\n  }\n  if\
    \ (isOdd) {\n    std::sort(res.begin(), res.end());\n  } else {\n    std::sort(res.begin(),\
    \ res.end(), std::greater<long>());\n  }\n  return res;", "    int l = array.size();\n\
    \    if(l <= 1)\n        return array;\n    std::sort(array.begin(), array.end());\n\
    \    if((array[0] + array[l-1]) % 2 == 0)\n        return array;\n    std::reverse(array.begin(),\
    \ array.end());\n    return array;", "    if(array.size() == 0)\n        return\
    \ array;\n    if(array.size() == 1)\n        return array;\n    if((array[0] +\
    \ array[array.size() - 1]) % 2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;", "    std::sort(array.begin(), array.end());\n    if ((array[0]\
    \ + array[array.size() - 1]) % 2 != 0) {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    return array;", "    std::vector<long> tmp(array);\n\
    \    if(array.size() == 0 || array.size() == 1) return array;\n    else if((array[0]\
    \ + array[array.size() - 1]) % 2 == 0) {\n        std::sort(tmp.begin(), tmp.end(),\
    \ std::greater<long>());\n    } else {\n        std::sort(tmp.begin(), tmp.end());\n\
    \    }\n    return tmp;", "\tif (array.size() < 2) return array;\n\tfor (int i\
    \ = 0; i < array.size() - 1; i++) {\n\t\tfor (int j = i + 1; j < array.size();\
    \ j++) {\n\t\t\tif ((array[i] + array[array.size() - 1]) % 2 == 0) {\n\t\t\t\t\
    if (array[i] < array[j]) {\n\t\t\t\t\tlong temp = array[i];\n\t\t\t\t\tarray[i]\
    \ = array[j];\n\t\t\t\t\tarray[j] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\
    \t\t\tif (array[i] > array[j]) {\n\t\t\t\t\tlong temp = array[i];\n\t\t\t\t\t\
    array[i] = array[j];\n\t\t\t\t\tarray[j] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn array;", "\tif (array.size() == 0) return array;\n\tif (array.size()\
    \ == 1) return array;\n\tif (array.size() == 2 && array[0] == array[1]) return\
    \ array;\n\tif (array.size() == 2 && array[0] != array[1]) {\n\t\tarray[0] ^=\
    \ array[1];\n\t\tarray[1] ^= array[0];\n\t\tarray[0] ^= array[1];\n\t\treturn\
    \ array;\n\t}\n\tif ((array[0] + array[array.size() - 1]) % 2 == 0) {\n\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n\t}\n\telse {\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\t}\n\treturn array;", '  // TODO: implement this function.',
  "    if (array.size() == 0) {\n        return array;\n    }\n    // if the size\
    \ is 1 return the array\n    if (array.size() == 1) {\n        return array;\n\
    \    }\n    // sort the array\n    sort(array.begin(), array.end());\n    // if\
    \ the sum is odd, return the array\n    if ((array[0] + array[array.size() - 1])\
    \ % 2 == 1) {\n        return array;\n    }\n    // if the sum is even, reverse\
    \ the array\n    for (int i = 0; i < array.size() / 2; i++) {\n        int temp\
    \ = array[i];\n        array[i] = array[array.size() - 1 - i];\n        array[array.size()\
    \ - 1 - i] = temp;\n    }\n    return array;", "  if (array.size() == 0) return\
    \ array;\n  else if (array.size() == 1) return array;\n  else if ((array[0] +\
    \ array[array.size() - 1]) % 2 == 0) {\n    // sort descending\n    for (size_t\
    \ i = 0; i < array.size(); i++) {\n      for (size_t j = 0; j < array.size() -\
    \ 1; j++) {\n        if (array[j] < array[j + 1]) {\n          long temp = array[j];\n\
    \          array[j] = array[j + 1];\n          array[j + 1] = temp;\n        }\n\
    \      }\n    }\n  } else {\n    // sort ascending\n    for (size_t i = 0; i <\
    \ array.size(); i++) {\n      for (size_t j = 0; j < array.size() - 1; j++) {\n\
    \        if (array[j] > array[j + 1]) {\n          long temp = array[j];\n   \
    \       array[j] = array[j + 1];\n          array[j + 1] = temp;\n        }\n\
    \      }\n    }\n  }\n  return array;", "  if (array.size() == 0) {\n    return\
    \ array;\n  }\n  if (array.size() == 1) {\n    return array;\n  }\n  if (array.size()\
    \ > 1) {\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n      std::sort(array.begin(),\
    \ array.end(), std::greater<int>());\n    } else {\n      std::sort(array.begin(),\
    \ array.end());\n    }\n  }\n  return array;", "  if (array.size() == 0) return\
    \ array;\n  if (array.size() == 1) return array;\n  long sum = array[0] + array[array.size()\
    \ - 1];\n  if (sum % 2 != 0) {\n    std::sort(array.begin(), array.end());\n \
    \ } else {\n    std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \  }\n  return array;", "    long odd, even;\n    std::vector<long> odd_indices,\
    \ even_indices;\n    // first element is odd\n    if (array[0] % 2 == 1) {\n \
    \       // push all odd indices\n        for (int i = 0; i < array.size(); i++)\
    \ {\n            if (array[i] % 2 == 1) {\n                odd_indices.push_back(i);\n\
    \            }\n        }\n        // last element is even\n        if (array[array.size()\
    \ - 1] % 2 == 0) {\n            // push all even indices\n            for (int\
    \ i = 0; i < array.size(); i++) {\n                if (array[i] % 2 == 0) {\n\
    \                    even_indices.push_back(i);\n                }\n         \
    \   }\n            // sort in descending order\n            sort(array.begin(),\
    \ array.end(), std::greater<long>());\n        }\n        // last element is odd\n\
    \        else {\n            // push all even indices\n            for (int i\
    \ = 0; i < array.size(); i++) {\n                if (array[i] % 2 == 0) {\n  \
    \                  even_indices.push_back(i);\n                }\n           \
    \ }\n            // sort in ascending order\n            sort(array.begin(), array.end());\n\
    \        }\n    }\n    // first element is even\n    else {\n        // push all\
    \ odd indices\n        for (int i = 0; i < array.size(); i++) {\n            if\
    \ (array[i] % 2 == 1) {\n                odd_indices.push_back(i);\n         \
    \   }\n        }\n        // last element is even\n        if (array[array.size()\
    \ - 1] % 2 == 0) {\n            // push all even indices\n            for (int\
    \ i = 0; i < array.size(); i++) {\n                if (array[i] % 2 == 0) {\n\
    \                    even_indices.push_back(i);\n                }\n         \
    \   }\n            // sort in ascending order\n            sort(array.begin(),\
    \ array.end());\n        }\n        // last element is odd\n        else {\n \
    \           // push all even indices\n            for (int i =", "// Write your\
    \ code here\n    if(array.size()==0) return array;\n    if(array.size()==1) return\
    \ array;\n    // std::cout<<array[0]+array[array.size()-1]<<std::endl;\n    if((array[0]+array[array.size()-1])%2==0){\n\
    \        std::sort(array.begin(),array.end(),[](const long a,const long b){return\
    \ a>b;});\n    }\n    else{\n        std::sort(array.begin(),array.end());\n \
    \   }\n    return array;", "  long size = array.size();\n  if(size == 0 || size\
    \ == 1) return array;\n  long start = array[0];\n  long end = array[size-1];\n\
    \  long sum = start + end;\n  if(sum % 2 == 0) {\n    // descending order\n  \
    \  std::sort(array.begin(), array.end(), std::greater<long>());\n  } else {\n\
    \    // ascending order\n    std::sort(array.begin(), array.end());\n  }\n  return\
    \ array;", "  if(array.size() > 0){\n    int sum = array[0] + array[array.size()-1];\n\
    \    if(sum % 2 == 0){\n      // descending\n      sort(array.begin(), array.end(),\
    \ greater<int>());\n    }\n    else{\n      // ascending\n      sort(array.begin(),\
    \ array.end());\n    }\n  }\n  return array;", "    auto array_sum = [](std::vector<long>\
    \ v) {\n        long sum = 0;\n        for (long i = 0; i < v.size(); i++) {\n\
    \            sum += v[i];\n        }\n        return sum;\n    };\n    auto compare_asc\
    \ = [](long x, long y) { return x < y; };\n    auto compare_desc = [](long x,\
    \ long y) { return x > y; };\n    if (array_sum(array) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), compare_desc);\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), compare_asc);\n    }\n    return array;", "    int res = 0;\n \
    \   for(int i = 0; i < array.size(); i++)\n    {\n        res += i;\n    }\n \
    \   if(res % 2 == 0)\n    {\n        std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \    }\n    else\n    {\n        std::sort(array.begin(), array.end());\n    }\n\
    \    return array;", "\tif(array.size() == 0)\n\t\treturn array;\n\tint n = array.size();\n\
    \tif(n == 1)\n\t\treturn array;\n\tif((array[0] + array[n-1]) % 2 == 0)\n\t\t\
    std::sort(array.begin(), array.end(), std::greater<int>());\n\telse\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\treturn array;", "  if (array.size() == 0 || array.size() ==\
    \ 1) {\n    return array;\n  }\n  bool isOdd = false;\n  if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 1) {\n    isOdd = true;\n  }\n  int odd_index = 0;\n  for (int\
    \ i = 0; i < array.size(); i++) {\n    if (isOdd) {\n      if (array[i] % 2 ==\
    \ 1) {\n        odd_index = i;\n        break;\n      }\n    } else {\n      if\
    \ (array[i] % 2 == 0) {\n        odd_index = i;\n        break;\n      }\n   \
    \ }\n  }\n  std::vector<long> result;\n  for (int i = odd_index; i < array.size();\
    \ i++) {\n    result.push_back(array[i]);\n  }\n  for (int i = 0; i < odd_index;\
    \ i++) {\n    result.push_back(array[i]);\n  }\n  if (isOdd) {\n    std::sort(result.begin(),\
    \ result.end());\n  } else {\n    std::sort(result.begin(), result.end(), std::greater<long>());\n\
    \  }\n  return result;", "    std::vector<long>::iterator itr_begin = array.begin();\n\
    \    std::vector<long>::iterator itr_end = array.end() - 1;\n    // Here's a trick,\
    \ I don't really need to check the condition,\n    // since itr_begin++, itr_end--\
    \ will be done before the next loop.\n    while (itr_begin < itr_end) {\n    \
    \    // Even\n        if ((*itr_begin + *itr_end) % 2 == 0) {\n            long\
    \ temp = *itr_begin;\n            *itr_begin = *itr_end;\n            *itr_end\
    \ = temp;\n        }\n        itr_begin++;\n        itr_end--;\n    }\n    return\
    \ array;", '  // write your code here', "\tif (array.size() < 2) return array;\n\
    \tauto last = array.size() - 1;\n\tif ((array[0] + array[last]) % 2 == 0)\n\t\t\
    std::sort(array.begin(), array.end(), std::greater<long>());\n\telse\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\treturn array;", "  if(array.size() == 0 || array.size() ==\
    \ 1)\n    return array;\n  long last = array.size() - 1;\n  long first = 0;\n\
    \  if((array[first] + array[last]) % 2 == 0)\n    std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n  else\n    std::sort(array.begin(), array.end());\n\
    \  return array;", "\tint size = array.size();\n\tif (size == 0) {\n\t\treturn\
    \ array;\n\t}\n\tif (size == 1) {\n\t\treturn array;\n\t}\n\tint sum = array[0]\
    \ + array[size - 1];\n\tif (sum % 2 == 0) {\n\t\tstd::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n\t}\n\telse {\n\t\tstd::sort(array.begin(), array.end());\n\
    \t}\n\treturn array;", "    std::vector<long> result = array;\n    int sum = array[0]\
    \ + array[array.size() - 1];\n    int k = 0;\n    if (sum % 2 == 0) {\n      \
    \  k = 0;\n    } else {\n        k = 1;\n    }\n    if (k == 0) {\n        sort(result.begin(),\
    \ result.end(), std::greater<long>());\n    } else {\n        sort(result.begin(),\
    \ result.end());\n    }\n    return result;", "  std::vector<long> temp;\n  std::sort(array.begin(),\
    \ array.end());\n  if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    for\
    \ (auto i = array.size() - 1; i >= 0; i--) {\n      temp.push_back(array[i]);\n\
    \    }\n    return temp;\n  }\n  return array;", "   std::vector<long> result\
    \ = array;\n   int sum = 0;\n   int begin = 0;\n   int end = array.size() - 1;\n\
    \   int temp = 0;\n   sum = array[begin] + array[end];\n   if(sum % 2 == 0) {\n\
    \      while(begin < end) {\n         if(array[begin] < array[end]) {\n      \
    \      temp = array[begin];\n            array[begin] = array[end];\n        \
    \    array[end] = temp;\n         }\n         begin++;\n         end--;\n    \
    \  }\n   }\n   else {\n      while(begin < end) {\n         if(array[begin] >\
    \ array[end]) {\n            temp = array[begin];\n            array[begin] =\
    \ array[end];\n            array[end] = temp;\n         }\n         begin++;\n\
    \         end--;\n      }\n   }\n   return result;", "  // first index value,\
    \ last index value\n  const long a = array.front();\n  const long b = array.back();\n\
    \  const long sum = a + b;\n  // sort the given array in ascending order if the\
    \ sum is odd,\n  // or sort it in descending order if the sum is even.\n  std::sort(array.begin(),\
    \ array.end(), [sum](long a, long b) {\n    return (sum % 2 == 0 ? a > b : a <\
    \ b);\n  });\n  return array;", "    std::vector<long> res;\n    std::cout <<\
    \ array.size() << std::endl;\n    //if the array is empty or has only one element,\
    \ return the array itself\n    if (array.size() == 0 || array.size() == 1) {\n\
    \        return array;\n    }\n    //the sum is even (the array is sorted in descending\
    \ order)\n    else if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n    \
    \    std::sort(array.begin(), array.end(), std::greater<long>());\n        res\
    \ = array;\n    }\n    //the sum is odd (the array is sorted in ascending order)\n\
    \    else {\n        std::sort(array.begin(), array.end());\n        res = array;\n\
    \    }\n    return res;", "    int sum = array[0] + array[array.size() - 1];\n\
    \    if (sum % 2 == 0) {\n        sort(array.begin(), array.end(), [](long a,\
    \ long b) {\n            return a > b;\n        });\n    } else {\n        sort(array.begin(),\
    \ array.end());\n    }\n    return array;", "    int n = array.size();\n    int\
    \ i;\n    long sum = array[0] + array[n-1];\n    if( sum % 2 == 0 ) {\n      \
    \  for( i = 0; i < n/2; i++ ) {\n            long temp = array[i];\n         \
    \   array[i] = array[n-1-i];\n            array[n-1-i] = temp;\n        }\n  \
    \  }\n    return array;", "    int length = array.size();\n    if (length == 0)\
    \ {\n        return array;\n    }\n    bool isOdd = (array[0] + array[length -\
    \ 1]) % 2 == 1;\n    std::vector<long> result(array);\n    if (isOdd) {\n    \
    \    std::sort(result.begin(), result.end());\n    } else {\n        std::sort(result.begin(),\
    \ result.end(), std::greater<long>());\n    }\n    return result;", "  std::vector<long>\
    \ toReturn;\n  if (array.size() == 0) {\n    return toReturn;\n  }\n  else if\
    \ (array.size() == 1) {\n    toReturn.push_back(array[0]);\n    return toReturn;\n\
    \  }\n  else {\n    int first = array[0];\n    int last = array[array.size() -\
    \ 1];\n    array.erase(array.begin());\n    array.erase(array.end() - 1);\n  \
    \  std::sort(array.begin(), array.end());\n    if ((first + last) % 2 == 0) {\n\
    \      for (int i = array.size() - 1; i >= 0; i--) {\n        toReturn.push_back(array[i]);\n\
    \      }\n    }\n    else {\n      for (int i = 0; i < array.size(); i++) {\n\
    \        toReturn.push_back(array[i]);\n      }\n    }\n    toReturn.insert(toReturn.begin(),\
    \ first);\n    toReturn.push_back(last);\n    return toReturn;\n  }", "  std::vector<long>\
    \ odd;\n  std::vector<long> even;\n  if (array.size() == 0) {\n    return array;\n\
    \  }\n  if (array.size() == 1) {\n    return array;\n  }\n  if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n    for (int i = 0; i < array.size(); i++) {\n      if (array[i]\
    \ % 2 == 0) {\n        even.push_back(array[i]);\n      } else {\n        odd.push_back(array[i]);\n\
    \      }\n    }\n    std::sort(even.begin(), even.end(), std::greater<long>());\n\
    \    std::sort(odd.begin(), odd.end());\n    for (int i = 0; i < array.size();\
    \ i++) {\n      if (i < even.size()) {\n        array[i] = even[i];\n      } else\
    \ {\n        array[i] = odd[i - even.size()];\n      }\n    }\n  } else {\n  \
    \  for (int i = 0; i < array.size(); i++) {\n      if (array[i] % 2 == 0) {\n\
    \        even.push_back(array[i]);\n      } else {\n        odd.push_back(array[i]);\n\
    \      }\n    }\n    std::sort(even.begin(), even.end());\n    std::sort(odd.begin(),\
    \ odd.end(), std::greater<long>());\n    for (int i = 0; i < array.size(); i++)\
    \ {\n      if (i < odd.size()) {\n        array[i] = odd[i];\n      } else {\n\
    \        array[i] = even[i - odd.size()];\n      }\n    }\n  }\n  return array;",
  "  if (array.size() == 0) {\n    return array;\n  }\n  long first = array[0];\n\
    \  long last = array[array.size() - 1];\n  if ((first + last) % 2 == 0) {\n  \
    \  std::sort(array.begin(), array.end(), std::greater<int>());\n  } else {\n \
    \   std::sort(array.begin(), array.end());\n  }\n  return array;", "  // Your\
    \ code here\n  vector<long> arr = array;\n  int sum = 0;\n  for(int i = 0; i <\
    \ arr.size(); i++){\n    sum += arr[i];\n  }\n  if(sum % 2 == 0){\n    sort(arr.begin(),\
    \ arr.end(), greater<int>());\n  }\n  else{\n    sort(arr.begin(), arr.end());\n\
    \  }\n  return arr;", "    std::sort(array.begin(), array.end());\n    if (array.size()\
    \ == 0 || array.size() == 1)\n        return array;\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n        std::reverse(array.begin(), array.end());\n    }\n\
    \    return array;", "\t//your code here\n\tlong n = array.size();\n\tif (n ==\
    \ 0) return array;\n\tif (n == 1) return array;\n\tif (n == 2) {\n\t\tif ((array[0]\
    \ + array[1]) % 2 == 0) {\n\t\t\treturn std::vector<long>{array[1], array[0]};\n\
    \t\t}\n\t\telse {\n\t\t\treturn array;\n\t\t}\n\t}\n\telse {\n\t\tif ((array[0]\
    \ + array[n - 1]) % 2 == 0) {\n\t\t\tsort(array.begin(), array.end(), std::greater<long>());\n\
    \t\t}\n\t\telse {\n\t\t\tsort(array.begin(), array.end());\n\t\t}\n\t\treturn\
    \ array;\n\t}\n\treturn std::vector<long>{};", "    std::vector<long> ret;\n \
    \   bool ascending = false;\n    if ( (array[0] + array[array.size() - 1]) % 2\
    \ == 0 ) ascending = true;\n    for ( long i = 0; i < array.size(); i++ ) {\n\
    \        for ( long j = 0; j < array.size() - 1; j++ ) {\n            if ( ascending\
    \ && array[j] > array[j + 1] ) {\n                std::swap(array[j], array[j\
    \ + 1]);\n            } else if ( !ascending && array[j] < array[j + 1] ) {\n\
    \                std::swap(array[j], array[j + 1]);\n            }\n        }\n\
    \    }\n    return array;", "    if (array.size() == 0 || array.size() == 1)\n\
    \        return array;\n    int start = 0;\n    int end = array.size() - 1;\n\
    \    int sum = array[start] + array[end];\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;", "  int sum = array[0] + array[array.size()\
    \ - 1];\n  if (sum % 2 == 0) {\n    std::sort(array.begin(), array.end(), [](int\
    \ &a, int &b) { return a > b; });\n  } else {\n    std::sort(array.begin(), array.end());\n\
    \  }\n  return array;", "  std::vector<long> odd, even;\n  if (array.size() ==\
    \ 0)\n    return {};\n  if (array.size() == 1)\n    return array;\n  if ((array[0]\
    \ + array[array.size() - 1]) % 2 == 0) {\n    for (auto &i : array) {\n      if\
    \ (i % 2 == 0)\n        even.push_back(i);\n      else\n        odd.push_back(i);\n\
    \    }\n    sort(even.begin(), even.end(), std::greater<long>());\n    sort(odd.begin(),\
    \ odd.end());\n    odd.insert(odd.end(), even.begin(), even.end());\n    return\
    \ odd;\n  } else {\n    for (auto &i : array) {\n      if (i % 2 == 0)\n     \
    \   even.push_back(i);\n      else\n        odd.push_back(i);\n    }\n    sort(even.begin(),\
    \ even.end());\n    sort(odd.begin(), odd.end(), std::greater<long>());\n    odd.insert(odd.end(),\
    \ even.begin(), even.end());\n    return odd;\n  }", "    if (array.size() ==\
    \ 0) return array;\n    if (array.size() == 1) return array;\n    long sum = array[0]\
    \ + array[array.size() - 1];\n    if (sum % 2 != 0)\n        std::sort(array.begin(),\
    \ array.end());\n    else\n        std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \    return array;", "  std::vector<long> v;\n  int i,j,p;\n  // insert code here\
    \ ...\n  int sum;\n  if (array.size() == 0)\n    return v;\n  sum = array[0] +\
    \ array[array.size()-1];\n  if (sum % 2 == 0)\n  {\n    for (i = 0; i < array.size();\
    \ i++)\n    {\n      p = i;\n      for (j = i+1; j < array.size(); j++)\n    \
    \  {\n        if (array[j] > array[p])\n          p = j;\n      }\n      long\
    \ temp = array[i];\n      array[i] = array[p];\n      array[p] = temp;\n    }\n\
    \  }\n  else\n  {\n    for (i = 0; i < array.size(); i++)\n    {\n      p = i;\n\
    \      for (j = i+1; j < array.size(); j++)\n      {\n        if (array[j] < array[p])\n\
    \          p = j;\n      }\n      long temp = array[i];\n      array[i] = array[p];\n\
    \      array[p] = temp;\n    }\n  }\n  v = array;\n  return v;", "  std::sort(array.begin(),\
    \ array.end());\n  long sum = array[0] + array[array.size() - 1];\n  if (sum %\
    \ 2 == 0) {\n    for (long i = 0; i < array.size() / 2; i++) {\n      long temp\
    \ = array[i];\n      array[i] = array[array.size() - 1 - i];\n      array[array.size()\
    \ - 1 - i] = temp;\n    }\n  }\n  return array;", "  // Sum = 0, means odd\n \
    \ // Sum = 1, means even\n  int sum = array.size() > 0 ? array[0] + array[array.size()\
    \ - 1] : 0;\n  if (sum == 0) {\n    return array;\n  }\n  else if (sum % 2 ==\
    \ 0) {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n  }\n\
    \  else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;",
  "  std::vector<long> oddVec;\n  std::vector<long> evenVec;\n  for (int i = 0; i\
    \ < array.size(); i++) {\n    if (array[i] % 2 == 0) {\n      evenVec.push_back(array[i]);\n\
    \    } else {\n      oddVec.push_back(array[i]);\n    }\n  }\n  std::sort(oddVec.begin(),\
    \ oddVec.end());\n  std::sort(evenVec.begin(), evenVec.end(), std::greater<int>());\n\
    \  std::vector<long> result;\n  int k = 0;\n  int l = 0;\n  for (int i = 0; i\
    \ < array.size(); i++) {\n    if (array[i] % 2 == 0) {\n      result.push_back(evenVec[k]);\n\
    \      k++;\n    } else {\n      result.push_back(oddVec[l]);\n      l++;\n  \
    \  }\n  }\n  return result;", "\tauto f = [](auto i, auto j) { return i < j; };\n\
    \tauto e = [](auto i, auto j) { return i > j; };\n\tstd::function<bool(long, long)>\
    \ F;\n\tif((array[0] + array[array.size() - 1]) % 2 == 0)\n\t\tF = e;\n\telse\n\
    \t\tF = f;\n\tsort(array.begin(), array.end(), F);\n\treturn array;", "\tlong\
    \ long int first = array[0];\n\tlong long int last = array[array.size() - 1];\n\
    \tlong long int sum = first + last;\n\tif (sum % 2 == 0) {\n\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n\t}\n\telse {\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\t}\n\treturn array;", "  std::vector<long> res;\n  if (array.size()\
    \ < 1) {\n    return res;\n  }\n  if (array.size() == 1) {\n    res.push_back(array[0]);\n\
    \    return res;\n  }\n  int sum = array[0] + array[array.size() - 1];\n  // if\
    \ the sum is odd\n  if (sum % 2 == 1) {\n    std::sort(array.begin(), array.end());\n\
    \  } else {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  }\n  return array;", "  if (array.size() == 0 || array.size() == 1) return\
    \ array;\n  int sum = array[0] + array[array.size() - 1];\n  if (sum % 2 == 0)\
    \ std::sort(array.begin(), array.end(), std::greater<int>());\n  else std::sort(array.begin(),\
    \ array.end());\n  return array;", "\tstd::vector<long>  new_array;\n\tint sum\
    \ = array[0] + array[array.size() - 1];\n\tif(sum % 2 == 0)\n\t{\n\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n\t}\n\telse\n\t{\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\t}\n\treturn array;", "    if(array.size() == 0) return array;\n\
    \    else if(array.size() == 1) return array;\n    else {\n        if(array[0]\
    \ + array[array.size() - 1] % 2 == 0) {\n            sort(array.begin(), array.end(),\
    \ std::greater<int>());\n        }\n        else {\n            sort(array.begin(),\
    \ array.end());\n        }\n        return array;\n    }", "  int first = array[0];\n\
    \  int last = array[array.size() - 1];\n  int sum = first + last;\n  bool odd\
    \ = (sum % 2 != 0);\n  if (odd) {\n    std::sort(array.begin(), array.end());\n\
    \  } else {\n    std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \  }\n  return array;", "\tint sum = array[0] + array[array.size() - 1];\n\tif\
    \ (sum % 2 == 0) {\n\t\tstd::sort(array.begin(), array.end(), std::greater<long>());\n\
    \t}\n\telse {\n\t\tstd::sort(array.begin(), array.end());\n\t}\n\treturn array;",
  "\tint n = array.size();\n\tif (n == 0) return {};\n\tif (n == 1) return array;\n\
    \tlong sum = array[0] + array[n - 1];\n\tif (sum % 2 == 0) {\n\t\tstd::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n\t}\n\telse {\n\t\tstd::sort(array.begin(),\
    \ array.end());\n\t}\n\treturn array;", "  std::vector<long> newArray;\n  int\
    \ size = array.size();\n  if (size == 0)\n    return newArray;\n  if (size ==\
    \ 1)\n    return array;\n  bool sortBool = false;\n  int sum = array[0] + array[size\
    \ - 1];\n  if (sum % 2 == 0)\n    sortBool = true;\n  for (int i = 0; i < size;\
    \ i++) {\n    if (sortBool) {\n      newArray.push_back(array[size - 1 - i]);\n\
    \    } else {\n      newArray.push_back(array[i]);\n    }\n  }\n  return newArray;",
  "  int len = array.size();\n  if (len == 0) return array;\n  int sum = array[0]\
    \ + array[len - 1];\n  std::sort(array.begin(), array.end());\n  if (sum % 2 ==\
    \ 0) {\n    for (int i = 0; i < len / 2; i++) {\n      int t = array[i];\n   \
    \   array[i] = array[len - 1 - i];\n      array[len - 1 - i] = t;\n    }\n  }\n\
    \  return array;", "    long length = array.size();\n    if (length > 1) {\n \
    \       if ((array[0] + array[length - 1]) % 2 == 0) {\n            sort(array.begin(),\
    \ array.end(), greater<long>());\n        } else {\n            sort(array.begin(),\
    \ array.end());\n        }\n    }\n    return array;", "    assert(array.size()\
    \ > 0);\n    if(array.size() == 1)\n        return array;\n    if((array[0] +\
    \ array[array.size() - 1])%2 == 0)\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    else\n        std::sort(array.begin(), array.end());\n\
    \    return array;", "  if(array.size()<=1) return array;\n  if((array[0]+array[array.size()-1])%2==0)\
    \ {\n    std::sort(array.begin(), array.end(), std::greater<long>());\n  }\n \
    \ else {\n    std::sort(array.begin(), array.end());\n  }\n  return array;", " \
    \ std::vector<long> result;\n  if (array.size() == 0) {\n    return result;\n\
    \  }\n  if (array.size() == 1) {\n    return array;\n  }\n  int left = 0;\n  int\
    \ right = array.size() - 1;\n  if ((array[left] + array[right]) % 2 == 0) {\n\
    \    std::sort(array.begin(), array.end(), std::greater<int>());\n  } else {\n\
    \    std::sort(array.begin(), array.end());\n  }\n  return array;", "\tstd::sort(array.begin(),\
    \ array.end());\n\tif (array.size() && (array[0] + array[array.size() - 1]) %\
    \ 2 == 0)\n\t\tstd::reverse(array.begin(), array.end());\n\treturn array;", " \
    \   if(array.size() == 0) return array;\n    long sum = array[0] + array[array.size()\
    \ - 1];\n    sort(array.begin(), array.end());\n    if(sum % 2 == 0) {\n     \
    \   reverse(array.begin(), array.end());\n    }\n    return array;", "  if (array.size()\
    \ == 0) {\n    return {};\n  }\n  long sum = array[0] + array[array.size() - 1];\n\
    \  if (sum % 2 != 0) {\n    sort(array.begin(), array.end());\n  } else {\n  \
    \  sort(array.begin(), array.end(), std::greater<int>());\n  }\n  return array;",
  "  std::vector<long> result;\n  if (array.size() == 0) {\n    return result;\n \
    \ } else if (array.size() == 1) {\n    return array;\n  }\n  // Compute the sum\
    \ of the first and last values\n  auto sum = array[0] + array[array.size() - 1];\n\
    \  if (sum % 2 != 0) {\n    // If odd, sort ascending\n    std::sort(array.begin(),\
    \ array.end());\n  } else {\n    // If even, sort descending\n    std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n  }\n  return array;", "  int len = array.size();\n\
    \  int first = array[0];\n  int last = array[len-1];\n  int sum = first + last;\n\
    \  // std::cout << sum;\n  if (sum % 2 == 0) {\n    sort(array.begin(), array.end(),\
    \ std::greater<long>());\n  } else {\n    sort(array.begin(), array.end());\n\
    \  }\n  return array;", "    if (array.size() == 0 || array.size() == 1)\n   \
    \     return array;\n    bool isDesc = false;\n    isDesc = (array[0] + array[array.size()\
    \ - 1]) % 2 == 0;\n    if (isDesc) {\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    } else {\n        std::sort(array.begin(), array.end());\n\
    \    }\n    return array;", "    long sum = array[0] + array[array.size() - 1];\n\
    \    if (sum % 2 != 0)\n        std::sort(array.begin(), array.end());\n    else\n\
    \        std::sort(array.begin(), array.end(), std::greater<long>());\n    return\
    \ array;", "\tint n = array.size();\n\tint temp;\n\tbool isOdd = n % 2 == 0 ?\
    \ false : true;\n\tstd::sort(array.begin(), array.end());\n\tif (isOdd) {\n\t\t\
    for (int i = 0; i < n / 2; i++) {\n\t\t\ttemp = array[i];\n\t\t\tarray[i] = array[n\
    \ - i - 1];\n\t\t\tarray[n - i - 1] = temp;\n\t\t}\n\t}\n\treturn array;", "\t\
    if(array.size() <= 1) return array;\n\tlong c = array[0] + array[array.size()\
    \ - 1];\n\tif(c % 2) {\n\t\tstd::sort(array.begin(), array.end());\n\t} else {\n\
    \t\tstd::sort(array.begin(), array.end(), std::greater<int>());\n\t}\n\treturn\
    \ array;", "  // your code\n  if (array.size()==0 || array.size()==1)\n  {\n \
    \     return array;\n  }\n  long i=0,j=array.size()-1;\n  long sum=array[i]+array[j];\n\
    \  if (sum%2==0)\n  {\n      while (i<j)\n      {\n          if (array[i]<array[j])\n\
    \          {\n              long temp=array[i];\n              array[i]=array[j];\n\
    \              array[j]=temp;\n          }\n          i++;\n          j--;\n \
    \     }\n  }\n  else\n  {\n      while (i<j)\n      {\n          if (array[i]>array[j])\n\
    \          {\n              long temp=array[i];\n              array[i]=array[j];\n\
    \              array[j]=temp;\n          }\n          i++;\n          j--;\n \
    \     }\n  }\n  return array;", "    long first = array[0];\n    long last = array[array.size()\
    \ - 1];\n    if ((first + last) % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;", "\t\n\tint is_even = 0;\n\tlong int\
    \ first_element = array[0];\n\tlong int last_element = array[array.size()-1];\n\
    \tif((first_element + last_element) % 2 == 0)\n\t\tis_even = 1;\n\t\n\tif(is_even)\n\
    \t\tstd::sort(array.begin(), array.end(), std::greater<long>());\n\telse\n\t\t\
    std::sort(array.begin(), array.end());\n\t\n\treturn array;", "    if (array.size()\
    \ == 0) return array;\n    if (array.size() == 1) return array;\n    if ((array[0]\
    \ + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(),\
    \ [](int a, int b) { return a > b; });\n    } else {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    return array;", "    // Write your code here.\n  \
    \  bool isOdd = (array[0] + array[array.size() - 1]) % 2;\n    if (isOdd) {\n\
    \        //odd\n        sort(array.begin(), array.end());\n    } else {\n    \
    \    //even\n        sort(array.begin(), array.end(), greater<long>());\n    }\n\
    \    return array;", "  long n = array.size();\n  if(n==0)\n    return array;\n\
    \  if(n==1)\n    return array;\n  if( (array[0] + array[n-1]) % 2 == 0 ){\n  \
    \  std::sort(array.begin(), array.end(), std::greater<long>());\n  }\n  else{\n\
    \    std::sort(array.begin(), array.end());\n  }\n  return array;", "  if(array.size()\
    \ == 0 || array.size() == 1)\n    return array;\n  long sum = array[0] + array[array.size()\
    \ - 1];\n  if(sum % 2 == 0)\n    std::sort(array.begin(), array.end(), std::greater<long>());\n\
    \  else\n    std::sort(array.begin(), array.end());\n  return array;", "    int\
    \ sum = array[0] + array[array.size() - 1];\n    std::sort(array.begin(), array.end());\n\
    \    std::vector<long> array_copy;\n    if (sum % 2 == 0) {\n        for (int\
    \ i = array.size() - 1; i >= 0; i--) {\n            array_copy.push_back(array[i]);\n\
    \        }\n    } else {\n        array_copy = array;\n    }\n    return array_copy;",
  "  long n = array.size();\n  if(n==0 || n==1)\n    return array;\n  if((array[0]+array[n-1])%2==0)\n\
    \    std::sort(array.begin(), array.end(), std::greater<long>());\n  else\n  \
    \  std::sort(array.begin(), array.end());\n  return array;", "  std::vector<long>\
    \ copy = array;\n  if (array.size() < 1) return array;\n  if (array.size() ==\
    \ 1) return array;\n  if (array.size() > 1) {\n    if ((array[0] + array[array.size()\
    \ - 1]) % 2 == 0) {\n      std::sort(copy.begin(), copy.end(), std::greater<long>());\n\
    \    } else {\n      std::sort(copy.begin(), copy.end());\n    }\n  }\n  return\
    \ copy;", "  int first = array[0];\n  int last = array[array.size() - 1];\n  int\
    \ sum = first + last;\n  bool flag = false;\n  if (sum % 2 == 0) {\n    flag =\
    \ true;\n  }\n  for (int i = 0; i < array.size(); i++) {\n    for (int j = i +\
    \ 1; j < array.size(); j++) {\n      if (flag) {\n        if (array[i] < array[j])\
    \ {\n          long temp = array[i];\n          array[i] = array[j];\n       \
    \   array[j] = temp;\n        }\n      } else {\n        if (array[i] > array[j])\
    \ {\n          long temp = array[i];\n          array[i] = array[j];\n       \
    \   array[j] = temp;\n        }\n      }\n    }\n  }\n  return array;", "    long\
    \ sum = array[0] + array[array.size() - 1];\n    if (sum % 2 == 0) {\n       \
    \ std::sort(array.begin(), array.end(), [](long x, long y) { return x > y; });\n\
    \    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;", "\tif (array.size() % 2 == 0)\n\t\tsort(array.begin(), array.end(),\
    \ greater<long>());\n\telse\n\t\tsort(array.begin(), array.end());\n\treturn array;",
  "    std::vector<long> result(array);\n    if (result.size() > 1) {\n        if\
    \ ((result[0] + result[result.size() - 1]) % 2 == 0) {\n            std::sort(result.begin(),\
    \ result.end(), [](int a, int b) {\n                return a > b;\n          \
    \  });\n        } else {\n            std::sort(result.begin(), result.end());\n\
    \        }\n    }\n    return result;", "\tif(array.size() == 0)\n\t\treturn array;\n\
    \tif(array.size() % 2 == 0)\n\t\tstd::sort(array.begin(), array.end(), std::greater<int>());\n\
    \telse\n\t\tstd::sort(array.begin(), array.end());\n\treturn array;", "    long\
    \ n = array.size();\n    if( n==0 || n==1)\n        return array;\n    long m\
    \ = array[0] + array[n-1];\n    if( m % 2 == 0 )\n        sort(array.begin(),\
    \ array.end(), greater<long>());\n    else\n        sort(array.begin(), array.end());\n\
    \    return array;"]
stop_tokens:
- "\n}"
