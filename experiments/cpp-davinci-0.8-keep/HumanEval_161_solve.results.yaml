name: HumanEval_161_solve
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (s.size() == 0) {\n        return s;\n    }\n    int count = 0;\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            count++;\n\
    \        }\n    }\n    if (count == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (islower(s[i])) {\n            result += toupper(s[i]);\n        } else if (isupper(s[i]))\
    \ {\n            result += tolower(s[i]);\n        } else {\n            result\
    \ += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() == 0) return\
    \ s;\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n    \
    \    if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result\
    \ += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n\
    \            }\n        } else {\n            result += s[i];\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpjy0nqghs: /tmp/tmpjy0nqghs.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string res = \"\";\n  int\
    \ len = s.length();\n  if(len == 0)\n    return res;\n  for(int i = 0; i < len;\
    \ i++) {\n    if(islower(s[i]))\n      res.push_back(toupper(s[i]));\n    else\
    \ if(isupper(s[i]))\n      res.push_back(tolower(s[i]));\n    else\n      res.push_back(s[i]);\n\
    \  }\n  std::reverse(res.begin(), res.end());\n  return res;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp9a0wu23w: /tmp/tmp9a0wu23w.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::transform(s.begin(),\
    \ s.end(), s.begin(), [](unsigned char c) { return std::isalpha(c) ? std::tolower(c)\
    \ : std::toupper(c); });\n    return s;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp8ybxk_52: /tmp/tmp8ybxk_52.cpp:18: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    std::transform(s.begin(),\
    \ s.end(), std::back_inserter(res),\n        [](char ch) { return std::isalpha(ch)\
    \ ? std::tolower(ch) : std::toupper(ch); });\n    return res;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpqiyrmoib: /tmp/tmpqiyrmoib.cpp:20: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    if(!std::isalpha(s[0])){\n        for(int i = s.size() - 1; i >= 0; i--){\n\
    \            res += s[i];\n        }\n        return res;\n    }\n    for(char\
    \ c : s){\n        if(std::isalpha(c)){\n            c = std::isupper(c) ? std::tolower(c)\
    \ : std::toupper(c);\n        }\n        res += c;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp5tuxnzk4: /tmp/tmp5tuxnzk4.cpp:33: int main(): Assertion `candidate((\"\
    #a@C\")) == (\"#A@c\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if(s.empty()) return \"\";\n\
    \  for(char& c : s)\n    if(std::isalpha(c))\n      c = std::tolower(c) ^ 32;\n\
    \  if(std::all_of(s.begin(), s.end(), [](char c){return !std::isalpha(c);}))\n\
    \    std::reverse(s.begin(), s.end());\n  return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpcrjteqw1: /tmp/tmpcrjteqw1.cpp:23: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string answer = \"\"\
    ;\n    if (s.size() <= 1) return s;\n    if (!isalpha(s[0])) return s;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) answer += s[i]\
    \ ^ ' ';\n        else answer += s[i];\n    }\n    return answer;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpy4qen1l7: /tmp/tmpy4qen1l7.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::vector<char> str_vec(s.begin(),\
    \ s.end());\n  bool no_letter = true;\n  for (int i = 0; i < str_vec.size(); i++)\
    \ {\n    if (isalpha(str_vec[i])) {\n      no_letter = false;\n      if (islower(str_vec[i]))\
    \ {\n        str_vec[i] = toupper(str_vec[i]);\n      } else {\n        str_vec[i]\
    \ = tolower(str_vec[i]);\n      }\n    }\n  }\n  if (no_letter) {\n    std::reverse(str_vec.begin(),\
    \ str_vec.end());\n  }\n  std::string result(str_vec.begin(), str_vec.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::transform(s.begin(),\
    \ s.end(), s.begin(), ::tolower);\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] >= 'a' && s[i] <= 'z') {\n            s[i] = toupper(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpapuvbq40: /tmp/tmpapuvbq40.cpp:23: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(std::isalpha(s[i])) {\n            if(std::isupper(s[i]))\
    \ s[i] = std::tolower(s[i]);\n            else s[i] = std::toupper(s[i]);\n  \
    \      }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpsuhnnju8: /tmp/tmpsuhnnju8.cpp:24: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tbool to_upper = true;\n\tfor\
    \ (auto i : s) {\n\t\tif (isalpha(i)) {\n\t\t\tto_upper = false;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (islower(s[i])) {\n\
    \t\t\ts[i] = toupper(s[i]);\n\t\t}\n\t\telse if (isupper(s[i])) {\n\t\t\ts[i]\
    \ = tolower(s[i]);\n\t\t}\n\t}\n\tif (to_upper) {\n\t\treverse(s.begin(), s.end());\n\
    \t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    std::string\
    \ str = \"\";\n    bool flag = false;\n    for(int i = 0; i < n; i++) {\n    \
    \    if(s[i] >= 'a' && s[i] <= 'z') {\n            str += (char)(s[i] - 'a' +\
    \ 'A');\n            flag = true;\n        }\n        else if(s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            str += (char)(s[i] - 'A' + 'a');\n            flag =\
    \ true;\n        }\n        else {\n            str += s[i];\n        }\n    }\n\
    \    if(flag) {\n        return str;\n    }\n    else {\n        reverse(str.begin(),\
    \ str.end());\n        return str;\n    }\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  int len = s.length();\n  if(len\
    \ == 0) return s;\n  for(int i = 0; i < len; i++) {\n    if(isalpha(s[i])) {\n\
    \      if(islower(s[i])) s[i] = toupper(s[i]);\n      else s[i] = tolower(s[i]);\n\
    \    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp0q59oqay: /tmp/tmp0q59oqay.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if(s.empty()) return s;\n  int\
    \ n = s.size();\n  std::string res(n, 0);\n  for(int i = 0; i < n; i++) {\n  \
    \  if(isalpha(s[i])) res[i] = (isupper(s[i]) ? tolower(s[i]) : toupper(s[i]));\n\
    \    else res[i] = s[i];\n  }\n  if(!isalpha(res[0])) reverse(res.begin(), res.end());\n\
    \  return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpndk_ymd3: /tmp/tmpndk_ymd3.cpp:28: int main(): Assertion `candidate((\"\
    #a@C\")) == (\"#A@c\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::transform(s.begin(), s.end(),\
    \ s.begin(),\n                 [](unsigned char c) {\n    return std::tolower(c);\n\
    \  });\n  if (s.empty()) {\n    return \"\";\n  }\n  std::string s2;\n  for (size_t\
    \ i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      s2.push_back(toupper(s[i]));\n\
    \    } else {\n      s2.push_back(s[i]);\n    }\n  }\n  return s2;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpbkzam0ou: /tmp/tmpbkzam0ou.cpp:32: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i]))\n            s[i] = tolower(s[i]);\n    }\n\
    \    std::reverse(s.begin(), s.end());\n    for(int i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i]))\n            s[i] = toupper(s[i]);\n    }\n  \
    \  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpzyc981j3: /tmp/tmpzyc981j3.cpp:26: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  bool haveLetter = false;\n \
    \ int len = s.length();\n  for (int i = 0; i < len; i++) {\n    if (isalpha(s[i]))\
    \ {\n      haveLetter = true;\n      break;\n    }\n  }\n  if (!haveLetter) {\n\
    \    reverse(s.begin(), s.end());\n    return s;\n  }\n  for (int i = 0; i < len;\
    \ i++) {\n    if (islower(s[i])) {\n      s[i] = toupper(s[i]);\n    } else if\
    \ (isupper(s[i])) {\n      s[i] = tolower(s[i]);\n    }\n  }\n  return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    bool all_number = true;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            all_number = false;\n            s[i] -= 32;\n        }\
    \ else if (s[i] >= 'A' && s[i] <= 'Z') {\n            all_number = false;\n  \
    \          s[i] += 32;\n        }\n    }\n    if (all_number) {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string ans;\n\tbool flag\
    \ = false;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\
    \t\t\tif (isupper(s[i])) {\n\t\t\t\tans += tolower(s[i]);\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tans += toupper(s[i]);\n\t\t\t}\n\t\t\tflag = true;\n\t\t}\n\t\telse\
    \ {\n\t\t\tans += s[i];\n\t\t}\n\t}\n\tif (!flag) {\n\t\tstd::reverse(ans.begin(),\
    \ ans.end());\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tint n = s.size();\n\tif(n ==\
    \ 0) return \"\";\n\tif(n == 1) {\n\t\tif(isalpha(s[0])) {\n\t\t\treturn s[0]\
    \ >= 'a' && s[0] <= 'z' ? string(1, toupper(s[0])) : string(1, tolower(s[0]));\n\
    \t\t}\n\t\treturn s;\n\t}\n\t// if(n == 2) {\n\t// \tint c = 0;\n\t// \tstring\
    \ ans = \"\";\n\t// \tfor(int i = 0; i < n; i++) {\n\t// \t\tif(isalpha(s[i]))\
    \ {\n\t// \t\t\tc++;\n\t// \t\t\tans += s[i] >= 'a' && s[i] <= 'z' ? string(1,\
    \ toupper(s[i])) : string(1, tolower(s[i]));\n\t// \t\t} else {\n\t// \t\t\tans\
    \ += s[i];\n\t// \t\t}\n\t// \t}\n\t// \treturn c > 0 ? ans : string(1, s[1])\
    \ + string(1, s[0]);\n\t// }\n\tstring ans = \"\";\n\tfor(int i = 0; i < n; i++)\
    \ {\n\t\tif(isalpha(s[i])) {\n\t\t\tans += s[i] >= 'a' && s[i] <= 'z' ? string(1,\
    \ toupper(s[i])) : string(1, tolower(s[i]));\n\t\t} else {\n\t\t\tans += s[i];\n\
    \t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppqb52bcg.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmppqb52bcg.cpp:17:40: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   17 |    return s[0] >= 'a'\
    \ && s[0] <= 'z' ? string(1, toupper(s[0])) : string(1, tolower(s[0]));\n    \
    \  |                                        ^~~~~~\n      |                  \
    \                      std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppqb52bcg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmppqb52bcg.cpp:34:2:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   34 |  string ans = \"\";\n      |  ^~~~~~\n      |  std::string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string res = \"\";\n\t\
    for (int i = 0; i < s.size(); i++) {\n\t\tchar temp = s[i];\n\t\tif (isalpha(temp))\
    \ {\n\t\t\tif (isupper(temp)) {\n\t\t\t\ttemp = tolower(temp);\n\t\t\t}\n\t\t\t\
    else {\n\t\t\t\ttemp = toupper(temp);\n\t\t\t}\n\t\t}\n\t\tres += temp;\n\t}\n\
    \tstd::reverse(res.begin(), res.end());\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpvo7gnzd0: /tmp/tmpvo7gnzd0.cpp:31: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  const int len = s.length();\n\
    \  int idx = 0;\n  while(idx < len) {\n    if(isalpha(s[idx])) {\n      break;\n\
    \    }\n    idx++;\n  }\n  for(int i = idx; i < len; i++) {\n    if(isalpha(s[i]))\
    \ {\n      if(islower(s[i])) {\n        s[i] = toupper(s[i]);\n      } else {\n\
    \        s[i] = tolower(s[i]);\n      }\n    }\n  }\n  if(idx == len) {\n    int\
    \ i = 0, j = len - 1;\n    while(i < j) {\n      std::swap(s[i], s[j]);\n    \
    \  i++;\n      j--;\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result = \"\";\n\
    \  bool is_letter = false;\n  for (auto c : s) {\n    if (std::isalpha(c)) {\n\
    \      is_letter = true;\n      if (std::isupper(c)) {\n        result += std::tolower(c);\n\
    \      } else {\n        result += std::toupper(c);\n      }\n    } else {\n \
    \     result += c;\n    }\n  }\n  if (!is_letter) {\n    std::reverse(std::begin(result),\
    \ std::end(result));\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string answer;\n  for (int\
    \ i = 0; i < s.size(); i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      answer\
    \ += toupper(s[i]);\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      answer\
    \ += tolower(s[i]);\n    } else {\n      answer += s[i];\n    }\n  }\n  if (answer\
    \ == s) {\n    std::reverse(answer.begin(), answer.end());\n  }\n  return answer;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (s[i] <= 'z' && s[i] >= 'a') {\n\t\t\ts[i] -= 32;\n\t\t}\n\t\t\
    else if (s[i] <= 'Z' && s[i] >= 'A') {\n\t\t\ts[i] += 32;\n\t\t}\n\t}\n\treturn\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpa5nts9_a: /tmp/tmpa5nts9_a.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::reverse(s.begin(), s.end());\n\
    \  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      if (isupper(s[i]))\
    \ {\n        s[i] = tolower(s[i]);\n      } else {\n        s[i] = toupper(s[i]);\n\
    \      }\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpmdwenlz9: /tmp/tmpmdwenlz9.cpp:27: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tint size = s.size();\n\tif (size\
    \ == 0)\n\t\treturn \"\";\n\tfor (int i = 0; i < size; i++) {\n\t\tif (std::isalpha(s[i]))\
    \ {\n\t\t\tif (std::islower(s[i]))\n\t\t\t\ts[i] = std::toupper(s[i]);\n\t\t\t\
    else\n\t\t\t\ts[i] = std::tolower(s[i]);\n\t\t}\n\t}\n\treturn s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp0z5j0_vc: /tmp/tmp0z5j0_vc.cpp:29: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tbool notFound = true;\n\t//\
    \ iterate through the string\n\tfor (int i = 0; i < s.length(); i++) {\n\t\t//\
    \ if a letter is found, \n\t\tif (isalpha(s[i])) {\n\t\t\t// change the letter\
    \ case and make notFound false\n\t\t\tif (isupper(s[i])) {\n\t\t\t\ts[i] = tolower(s[i]);\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t}\n\t\t\tnotFound\
    \ = false;\n\t\t}\n\t}\n\t// if no letters are found, reverse the string\n\tif\
    \ (notFound) {\n\t\tstd::reverse(s.begin(), s.end());\n\t}\n\treturn s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if(!s.length())\n    return\
    \ s;\n  for(int i = 0; i < s.length(); i++) {\n    if(isalpha(s[i])) {\n     \
    \ s[i] = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n    }\n  }\n  return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp0qze1ajo: /tmp/tmp0qze1ajo.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  int flag = 0;\n  for(int i =\
    \ 0; i < s.length(); i++) {\n    if(s[i] >= 'a' && s[i] <= 'z')\n      flag =\
    \ 1;\n    else if(s[i] >= 'A' && s[i] <= 'Z')\n      flag = 1;\n  }\n  if(flag\
    \ == 0) {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  for(int\
    \ i = 0; i < s.length(); i++) {\n    if(s[i] >= 'a' && s[i] <= 'z')\n      s[i]\
    \ = s[i] - 'a' + 'A';\n    else if(s[i] >= 'A' && s[i] <= 'Z')\n      s[i] = s[i]\
    \ - 'A' + 'a';\n  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.empty()) return s;\n\
    \    for (char& ch : s) {\n        if (isalpha(ch)) {\n            ch = islower(ch)\
    \ ? toupper(ch) : tolower(ch);\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpg1a6g6c5: /tmp/tmpg1a6g6c5.cpp:24: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  bool is_alpha = false;\n  for\
    \ (size_t i = 0; i < s.size(); i++) {\n    if (std::isalpha(s[i])) {\n      is_alpha\
    \ = true;\n      break;\n    }\n  }\n  if (!is_alpha) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  for (size_t i = 0; i < s.size(); i++) {\n \
    \   if (std::isalpha(s[i])) {\n      if (s[i] < 97)\n        s[i] += 32;\n   \
    \   else\n        s[i] -= 32;\n    }\n  }\n  return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\t// if s is empty or contains\
    \ only numbers or all letters, reverse it;\n\tbool is_empty = true;\n\tbool is_all_letters\
    \ = true;\n\tfor (size_t i = 0; i < s.size(); i++) {\n\t\tif (s[i] < '0' || s[i]\
    \ > '9') {\n\t\t\tis_empty = false;\n\t\t}\n\t\tif (s[i] >= 'a' && s[i] <= 'z'\
    \ || s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tis_all_letters = false;\n\t\t}\n\t}\n\
    \tif (is_empty) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\t}\n\
    \tif (is_all_letters) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\
    \t}\n\t// otherwise, reverse the case of each letter\n\tfor (size_t i = 0; i <\
    \ s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i] -= 32;\n\
    \t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] += 32;\n\t\t}\n\t\
    }\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tif (s.empty()) return s;\n\t\
    for (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\
    \t\ts[i] = s[i] - 32;\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\
    \ts[i] = s[i] + 32;\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmphcwoz_2t: /tmp/tmphcwoz_2t.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i])) s[i] = toupper(s[i]);\n            else s[i]\
    \ = tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpfyvt6yq_: /tmp/tmpfyvt6yq_.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string res=\"\";\n\tif(s==\"\
    \") return res;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(isalpha(s[i])){\n\t\t\
    \tif(islower(s[i])){\n\t\t\t\tres.push_back(toupper(s[i]));\n\t\t\t}else{\n\t\t\
    \t\tres.push_back(tolower(s[i]));\n\t\t\t}\n\t\t}else{\n\t\t\tres.push_back(s[i]);\n\
    \t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpn8pikzft: /tmp/tmpn8pikzft.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result;\n  if (s.length()\
    \ < 1) return s;\n  if (std::isalpha(s[0])) {\n    for (char& c : s) {\n     \
    \ if (std::isalpha(c)) {\n        c = std::toupper(c);\n      }\n    }\n  } else\
    \ {\n    for (char& c : s) {\n      if (std::isalpha(c)) {\n        c = std::tolower(c);\n\
    \      }\n    }\n  }\n  std::reverse(s.begin(), s.end());\n  return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpba2a140t: /tmp/tmpba2a140t.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string a;\n    bool is_a_letter\
    \ = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a'\
    \ && s[i] <= 'z') {\n            a += s[i] - 'a' + 'A';\n            is_a_letter\
    \ = true;\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            a +=\
    \ s[i] - 'A' + 'a';\n            is_a_letter = true;\n        } else {\n     \
    \       a += s[i];\n        }\n    }\n    if (!is_a_letter)\n        return std::string(a.rbegin(),\
    \ a.rend());\n    return a;\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if(s.length()==0) return s;\n\
    \  for(int i=0;i<s.length();i++){\n    if(s[i]>='a'&&s[i]<='z'){\n      s[i] =\
    \ s[i] - 'a' + 'A';\n    }\n    else if(s[i]>='A'&&s[i]<='Z'){\n      s[i] = s[i]\
    \ - 'A' + 'a';\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpit5w36b3: /tmp/tmpit5w36b3.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.length() == 0) return\
    \ s;\n    if(std::find_if(s.begin(), s.end(), ::isalpha) == s.end()) return std::string(s.rbegin(),\
    \ s.rend());\n    for(int i = 0; i < s.length(); i++)\n    {\n        if(isalpha(s[i])){\n\
    \            if(islower(s[i]))\n                s[i] = toupper(s[i]);\n      \
    \      else\n                s[i] = tolower(s[i]);\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string out = s;\n   \
    \ int len = s.length();\n    for (int i = 0; i < len; i++) {\n        if ((s[i]\
    \ >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n            if (s[i]\
    \ == tolower(s[i])) {\n                out[i] = toupper(s[i]);\n            }\
    \ else {\n                out[i] = tolower(s[i]);\n            }\n        }\n\
    \    }\n    if (out == s) {\n        std::reverse(out.begin(), out.end());\n \
    \   }\n    return out;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  bool has_letter = false;\n \
    \ for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      has_letter\
    \ = true;\n      break;\n    }\n  }\n  if (!has_letter) {\n    reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  for (int i = 0; i < s.size(); i++) {\n    if\
    \ (islower(s[i])) {\n      s[i] = toupper(s[i]);\n    } else if (isupper(s[i]))\
    \ {\n      s[i] = tolower(s[i]);\n    }\n  }\n  return s;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // printf(\"%s\", s.c_str());\n\
    \    std::string ans = \"\";\n    int letters = 0;\n    for (char c : s) {\n \
    \       // printf(\"%c\\n\", c);\n        if ((c >= 'a' && c <= 'z') || (c >=\
    \ 'A' && c <= 'Z')) {\n            letters++;\n            c = islower(c) ? toupper(c)\
    \ : tolower(c);\n        }\n        ans += c;\n    }\n    if (letters) return\
    \ ans;\n    std::reverse(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    string\
    \ str=\"\";\n    if(n==0)\n        return str;\n    for(int i=0;i<n;i++)\n   \
    \ {\n        if(s[i]>='a' && s[i]<='z')\n            str+=char(s[i]-'a'+'A');\n\
    \        else if(s[i]>='A' && s[i]<='Z')\n            str+=char(s[i]-'A'+'a');\n\
    \        else\n            str+=s[i];\n    }\n    reverse(str.begin(),str.end());\n\
    \    return str;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfkl9jqd3.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpfkl9jqd3.cpp:14:5: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   14 |     string str=\"\";\n\
    \      |     ^~~~~~\n      |     std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfkl9jqd3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpfkl9jqd3.cpp:16:16:\
    \ error: \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   16 |         return str;\n      |                ^~~\n      |          \
    \      std\n/tmp/tmpfkl9jqd3.cpp:20:13: error: \u2018str\u2019 was not declared\
    \ in this scope; did you mean \u2018std\u2019?\n   20 |             str+=char(s[i]-'a'+'A');\n\
    \      |             ^~~\n      |             std\n/tmp/tmpfkl9jqd3.cpp:22:13:\
    \ error: \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   22 |             str+=char(s[i]-'A'+'a');\n      |             ^~~\n   \
    \   |             std\n/tmp/tmpfkl9jqd3.cpp:24:13: error: \u2018str\u2019 was\
    \ not declared in this scope; did you mean \u2018std\u2019?\n   24 |         \
    \    str+=s[i];\n      |             ^~~\n      |             std\n/tmp/tmpfkl9jqd3.cpp:26:13:\
    \ error: \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   26 |     reverse(str.begin(),str.end());\n      |             ^~~\n    \
    \  |             std\n/tmp/tmpfkl9jqd3.cpp:26:5: e"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  bool f = true;\n  for (int i\
    \ = 0; i < s.size(); i++) {\n    if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >=\
    \ 'A' && s[i] <= 'Z')) {\n      f = false;\n      break;\n    }\n  }\n  if (f)\
    \ return s;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n      s[i] = s[i] - 'a' + 'A';\n    } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n      s[i] = s[i] - 'A' + 'a';\n    }\n  }\n  return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpotjc05j4: /tmp/tmpotjc05j4.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if(s.length() == 0)\n        return result;\n    for(int i = 0; i < s.length();\
    \ i++){\n        if(islower(s[i]))\n            result += toupper(s[i]);\n   \
    \     else if(isupper(s[i]))\n            result += tolower(s[i]);\n        else\n\
    \            result += s[i];\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpr3w0j_t5: /tmp/tmpr3w0j_t5.cpp:29: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (islower(s[i])) {\n\t\t\t\ts[i] =\
    \ toupper(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp58mi93y_: /tmp/tmp58mi93y_.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0) return s;\n\
    \    // 'a' <= s[i] <= 'z'   97 - 122\n    // 'A' <= s[i] <= 'Z'   65 - 90\n \
    \   for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 97 && s[i] <= 122)\
    \ {\n            s[i] -= 32;\n        } else if(s[i] >= 65 && s[i] <= 90) {\n\
    \            s[i] += 32;\n        }\n    }\n    return s;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpr47d5ji3: /tmp/tmpr47d5ji3.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string ans;\n  std::string\
    \ alpha = \"abcdefghijklmnopqrstuvwxyz\";\n  std::string alpha_cap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n  for (size_t i = 0; i < s.size(); i++) {\n    if(std::find(alpha.begin(),\
    \ alpha.end(), s[i]) != alpha.end()) {\n      ans += std::toupper(s[i]);\n   \
    \ }\n    else if(std::find(alpha_cap.begin(), alpha_cap.end(), s[i]) != alpha_cap.end())\
    \ {\n      ans += std::tolower(s[i]);\n    }\n    else {\n      ans += s[i];\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpkqj2s2h7: /tmp/tmpkqj2s2h7.cpp:32: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0) return s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      s[i] = tolower(s[i]);\n        }\n    }\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            s[i] = toupper(s[i]);\n   \
    \     }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpleoyxdnu: /tmp/tmpleoyxdnu.cpp:28: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::stringstream ss;\n\tfor\
    \ (char& c : s) {\n\t\tif (isalpha(c)) {\n\t\t\tif (isupper(c)) {\n\t\t\t\tss\
    \ << char(tolower(c));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tss << char(toupper(c));\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\tss << c;\n\t\t}\n\t}\n\tstd::string result =\
    \ ss.str();\n\tstd::reverse(result.begin(), result.end());\n\treturn result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpu8ur212m: /tmp/tmpu8ur212m.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result;\n  bool\
    \ isLett = false;\n  for (size_t i = 0; i < s.size(); i++) {\n    if (isalpha(s[i]))\
    \ {\n      isLett = true;\n      if (islower(s[i])) {\n        result += toupper(s[i]);\n\
    \      } else {\n        result += tolower(s[i]);\n      }\n    } else {\n   \
    \   result += s[i];\n    }\n  }\n  if (!isLett) {\n    std::reverse(result.begin(),\
    \ result.end());\n  }\n  return result;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size()==0) return s;\n\
    \    std::string result;\n    for(int i=0;i<s.size();i++){\n        int x=s[i];\n\
    \        if(x>=65 && x<=90){\n            x+=32;\n            result+=x;\n   \
    \     }\n        else if(x>=97 && x<=122){\n            x-=32;\n            result+=x;\n\
    \        }\n        else result+=x;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmprk7xh_cm: /tmp/tmprk7xh_cm.cpp:32: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string ans;\n  for (auto\
    \ i = 0; i < s.size(); i++) {\n    if (std::isalpha(s[i])) {\n      if (std::isupper(s[i]))\
    \ {\n        ans += std::tolower(s[i]);\n      } else {\n        ans += std::toupper(s[i]);\n\
    \      }\n    } else {\n      ans += s[i];\n    }\n  }\n  if (ans.size() == 0)\
    \ {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmptln3bzci: /tmp/tmptln3bzci.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string res = \"\";\n\t\
    if (s.size() == 0)\n\t\treturn res;\n\tbool hasLetters = false;\n\tfor (int i\
    \ = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\thasLetters = true;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif (!hasLetters) {\n\t\tfor (int i = s.size() - 1;\
    \ i >= 0; i--) {\n\t\t\tres += s[i];\n\t\t}\n\t\treturn res;\n\t}\n\tfor (int\
    \ i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (islower(s[i]))\
    \ {\n\t\t\t\tres += toupper(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres += tolower(s[i]);\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\tres += s[i];\n\t\t}\n\t}\n\treturn res;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n   \
    \             s[i] = toupper(s[i]);\n            } else {\n                s[i]\
    \ = tolower(s[i]);\n            }\n        }\n    }\n    if (isalpha(s[0])) {\n\
    \        return s;\n    } else {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpiwpmj2kj: /tmp/tmpiwpmj2kj.cpp:34: int main(): Assertion `candidate((\"\
    #a@C\")) == (\"#A@c\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    if\
    \ (std::all_of(s.begin(), s.end(), ::isdigit))\n    {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for (size_t i = 0; i < s.size(); i++)\n\
    \    {\n        if (isalpha(s[i]))\n        {\n            if (isupper(s[i]))\n\
    \            {\n                result += std::tolower(s[i]);\n            }\n\
    \            else\n            {\n                result += std::toupper(s[i]);\n\
    \            }\n        }\n        else\n        {\n            result += s[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpxpoi1dfe: /tmp/tmpxpoi1dfe.cpp:46: int main(): Assertion `candidate((\"\
    #6@2\")) == (\"2@6#\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  bool c = false;\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i]))\
    \ {\n            c = true;\n            break;\n        }\n    }\n    if(c) {\n\
    \        for(int i = 0; i < len; i++) {\n            if(isalpha(s[i])) {\n   \
    \             if(isupper(s[i]))\n                    s[i] = tolower(s[i]);\n \
    \               else if(islower(s[i]))\n                    s[i] = toupper(s[i]);\n\
    \            }\n        }\n    }\n    else {\n        reverse(s.begin(), s.end());\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string ret = \"\";\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z')\n            ret += toupper(s[i]);\n        else if (s[i] >= 'A' && s[i]\
    \ <= 'Z')\n            ret += tolower(s[i]);\n        else\n            ret +=\
    \ s[i];\n    }\n    if (ret.size() == s.size())\n        return s;\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpbf8maupv: /tmp/tmpbf8maupv.cpp:28: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.length() == 0) {\n \
    \       return s;\n    }\n    for (int i = 0; i < s.length(); i++) {\n       \
    \ if (isdigit(s[i])) {\n            s.erase(i, 1);\n            i--;\n       \
    \ }\n    }\n    if (s.length() == 0) {\n        return s;\n    }\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (islower(s[i])) {\n            s[i]\
    \ = toupper(s[i]);\n        } else {\n            s[i] = tolower(s[i]);\n    \
    \    }\n    }\n    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpkifztj7z: /tmp/tmpkifztj7z.cpp:37: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tint l = s.length();\n\tfor (int\
    \ i = 0; i < l; i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i] = toupper(s[i]);\n\
    \t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] = tolower(s[i]);\n\
    \t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpgloroi1l: /tmp/tmpgloroi1l.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty())\n    return\
    \ \"\";\n    std::string result;\n    for(int i=0;i<s.length();i++)\n    {\n \
    \       if(s[i]>='a' && s[i]<='z')\n        {\n            s[i]='A'+s[i]-'a';\n\
    \        }\n        else if(s[i]>='A' && s[i]<='Z')\n        {\n            s[i]='a'+s[i]-'A';\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmphxd4fhpm: /tmp/tmphxd4fhpm.cpp:32: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    bool hasLetter = false;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        hasLetter = true;\n            if (isupper(s[i])) {\n               \
    \ s[i] = tolower(s[i]);\n            } else {\n                s[i] = toupper(s[i]);\n\
    \            }\n        }\n    }\n    if (!hasLetter) {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0)\n      \
    \  return s;\n    bool found = false;\n    for(char c : s)\n        if(std::isalpha(c)){\n\
    \            found = true;\n            break;\n        }\n    if(!found)\n  \
    \      return std::string(s.rbegin(), s.rend());\n    for(char &c : s)\n     \
    \   if(std::isalpha(c))\n            c = std::isupper(c) ? std::tolower(c) : std::toupper(c);\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  // Your code here\n  \t\n\t\
    //if there is no letters\n  \tif(std::regex_match(s, std::regex(\"^[^a-zA-Z]*$\"\
    )))\n  \t{\n  \t\tstd::reverse(s.begin(), s.end());\n  \t\treturn s;\n  \t}\n\
    \  \telse\n  \t{\n  \t\tfor(auto& c : s)\n  \t\t{\n  \t\t\tif(islower(c))\n  \t\
    \t\t{\n  \t\t\t\tc = toupper(c);\n  \t\t\t}\n  \t\t\telse if(isupper(c))\n  \t\
    \t\t{\n  \t\t\t\tc = tolower(c);\n  \t\t\t}\n  \t\t}\n  \t\treturn s;\n  \t}\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string ans = \"\";\n  bool\
    \ isLetterPresent = false;\n  for(int i = 0; i < s.length(); i++) {\n    if(isalpha(s[i]))\
    \ {\n      isLetterPresent = true;\n      if(islower(s[i])) {\n        ans +=\
    \ toupper(s[i]);\n      } else {\n        ans += tolower(s[i]);\n      }\n   \
    \ } else {\n      ans += s[i];\n    }\n  }\n  if(!isLetterPresent) {\n    std::reverse(ans.begin(),\
    \ ans.end());\n  }\n  return ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int lower = 0;\n    for (auto\
    \ c : s) {\n        if (c >= 'a' && c <= 'z') lower++;\n    }\n    // no letters\n\
    \    if (lower == 0) return std::string(s.rbegin(), s.rend());\n    std::string\
    \ result;\n    for (auto c : s) {\n        if (c >= 'a' && c <= 'z') {\n     \
    \       result += toupper(c);\n        } else if (c >= 'A' && c <= 'Z') {\n  \
    \          result += tolower(c);\n        } else {\n            result += c;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n     \
    \           s[i] = toupper(s[i]);\n            } else {\n                s[i]\
    \ = tolower(s[i]);\n            }\n        }\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmps05lpik7: /tmp/tmps05lpik7.cpp:27: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() < 1) {\n    \
    \    return s;\n    }\n    std::transform(s.begin(), s.end(), s.begin(), [](unsigned\
    \ char c) {\n        if (std::isalpha(c)) {\n            return std::tolower(c);\n\
    \        }\n        return c;\n    });\n    std::reverse(s.begin(), s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprm12619h.cpp: In lambda function:\n/tmp/tmprm12619h.cpp:20:16:\
    \ error: inconsistent types \u2018int\u2019 and \u2018unsigned char\u2019 deduced\
    \ for lambda return type\n   20 |         return c;\n      |                ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string result;\n\tif (s.size()\
    \ == 0) return result;\n\tif (s.size() == 1) {\n\t\tchar temp = s[0];\n\t\tif\
    \ (isalpha(temp)) {\n\t\t\tif (isupper(temp)) {\n\t\t\t\ttemp = tolower(temp);\n\
    \t\t\t}\n\t\t\telse if (islower(temp)) {\n\t\t\t\ttemp = toupper(temp);\n\t\t\t\
    }\n\t\t}\n\t\treturn std::string(1, temp);\n\t}\n\telse {\n\t\t// check if no\
    \ letters\n\t\tbool check = true;\n\t\tfor (size_t i = 0; i < s.size(); i++) {\n\
    \t\t\tif (isalpha(s[i])) {\n\t\t\t\tcheck = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t\tif (check) {\n\t\t\tfor (size_t i = s.size() - 1; i >= 0; i--) {\n\t\t\
    \t\tresult += s[i];\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\telse {\n\t\t\t\
    for (size_t i = 0; i < s.size(); i++) {\n\t\t\t\tchar temp = s[i];\n\t\t\t\tif\
    \ (isalpha(temp)) {\n\t\t\t\t\tif (isupper(temp)) {\n\t\t\t\t\t\ttemp = tolower(temp);\n\
    \t\t\t\t\t}\n\t\t\t\t\telse if (islower(temp)) {\n\t\t\t\t\t\ttemp = toupper(temp);\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult += temp;\n\t\t\t}\n\t\t\treturn result;\n\
    \t\t}\n\t}\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tif (s.size() == 0) return \"\
    \";\n\tstd::string ans;\n\tbool alphabet = false;\n\tfor (char c : s)\n\t\tif\
    \ (isalpha(c)) {\n\t\t\talphabet = true;\n\t\t\tbreak;\n\t\t}\n\tfor (int i =\
    \ s.size() - 1; i >= 0; i--) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (isupper(s[i]))\
    \ ans += tolower(s[i]);\n\t\t\telse ans += toupper(s[i]);\n\t\t}\n\t\telse ans\
    \ += s[i];\n\t}\n\tif (alphabet) return ans;\n\telse return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpugpkkakt: /tmp/tmpugpkkakt.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0)\n      \
    \  return s;\n    if(s.size() == 1)\n        return s;\n    std::string res =\
    \ \"\";\n    for(auto e : s) {\n        if(islower(e)) {\n            res += toupper(e);\n\
    \        } else if(isupper(e)) {\n            res += tolower(e);\n        } else\
    \ {\n            res += e;\n        }\n    }\n    if(islower(res[0]) || isupper(res[0]))\
    \ {\n        reverse(res.begin(), res.end());\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpfmlhuxx7: /tmp/tmpfmlhuxx7.cpp:34: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if(!((s[i] >= 'A' && s[i] <= 'Z') || (s[i] >= 'a' && s[i] <= 'z')))\
    \ {\n      s[i] = s[i];\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      s[i]\
    \ = s[i] + 32;\n    } else if (s[i] >= 'a' && s[i] <= 'z') {\n      s[i] = s[i]\
    \ - 32;\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp253wltmh: /tmp/tmp253wltmh.cpp:27: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (isupper(s[i])) {\n\t\t\t\ts[i] =\
    \ tolower(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = toupper(s[i]);\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpyg_yrox8: /tmp/tmpyg_yrox8.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int sz = s.size();\n    for(int\
    \ i = 0; i < sz; i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\
    \ s[i] = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n        }\n \
    \   }\n    if(isalpha(s[0])) reverse(s.begin(), s.end());\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp5qve2y7t: /tmp/tmp5qve2y7t.cpp:25: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::vector<char> v;\n\tbool\
    \ flag = true;\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tif (isalpha(s[i]))\
    \ {\n\t\t\tflag = false;\n\t\t\tif (islower(s[i])) v.push_back(toupper(s[i]));\n\
    \t\t\telse v.push_back(tolower(s[i]));\n\t\t}\n\t\telse v.push_back(s[i]);\n\t\
    }\n\tif (flag)\n\t\tstd::reverse(v.begin(), v.end());\n\tstd::string res(v.begin(),\
    \ v.end());\n\treturn res;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tint len = s.length();\n\tfor\
    \ (int i = 0; i < len; i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (isupper(s[i]))\
    \ {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = toupper(s[i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (s == s) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\
    }\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpu1u_cq0q: /tmp/tmpu1u_cq0q.cpp:31: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::reverse(s.begin(), s.end());\n\
    \    for (auto& c : s) {\n        if (c == toupper(c)) {\n            c = tolower(c);\n\
    \        } else if (c == tolower(c)) {\n            c = toupper(c);\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpk5l1pu1y: /tmp/tmpk5l1pu1y.cpp:25: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string reversed = \"\"\
    ;\n    int letter_exist = 0;\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (isalpha(s[i])) {\n            letter_exist = 1;\n            if (islower(s[i]))\
    \ {\n                reversed += toupper(s[i]);\n            } else {\n      \
    \          reversed += tolower(s[i]);\n            }\n        } else {\n     \
    \       reversed += s[i];\n        }\n    }\n    if (letter_exist == 0) {\n  \
    \      std::reverse(reversed.begin(), reversed.end());\n    }\n    return reversed;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() == 0) {\n   \
    \     return s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n        } else\
    \ if (s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n  \
    \      }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpv12ob49f: /tmp/tmpv12ob49f.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::reverse(s.begin(), s.end());\n\
    \  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n      s[i]\
    \ = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n    }\n  }\n  return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp1wkwm9ab: /tmp/tmp1wkwm9ab.cpp:23: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  bool letters = false;\n  for\
    \ (char c : s) {\n    if (c >= 'a' && c <= 'z') letters = true;\n    if (c >=\
    \ 'A' && c <= 'Z') letters = true;\n  }\n  for (int i = 0; i < s.size(); i++)\
    \ {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      s[i] -= 32;\n    } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      s[i] += 32;\n    }\n  }\n  if (!letters) {\n\
    \    std::reverse(s.begin(), s.end());\n  }\n  return s;\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(isupper(s[i])) s[i] = tolower(s[i]);\n            else s[i]\
    \ = toupper(s[i]);\n        }\n    }\n    std::reverse(s.begin(), s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpzs5d0g9s: /tmp/tmpzs5d0g9s.cpp:26: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if (s.size() == 0) {\n    return\
    \ \"\";\n  }\n  std::string result = \"\";\n  for (int i = 0; i < s.size(); i++)\
    \ {\n    if (std::isalpha(s[i])) {\n      if (islower(s[i])) {\n        result.push_back(toupper(s[i]));\n\
    \      } else {\n        result.push_back(tolower(s[i]));\n      }\n    } else\
    \ {\n      result.push_back(s[i]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpafoj625y: /tmp/tmpafoj625y.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (std::isalpha(s[i])) {\n\t\t\tif (std::isupper(s[i])) {\n\t\t\
    \t\ts[i] = tolower(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = toupper(s[i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\tstd::reverse(s.begin(), s.end());\n\treturn s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp6sp9sk20: /tmp/tmp6sp9sk20.cpp:28: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::reverse(s.begin(), s.end());\n\
    \tif (s.size() == 0) {\n\t\treturn s;\n\t}\n\tfor (int i = 0; i < s.size(); i++)\
    \ {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i] = s[i] - 32;\n\t\t}\n\t\
    \telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] = s[i] + 32;\n\t\t}\n\t}\n\
    \treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpcwlk713h: /tmp/tmpcwlk713h.cpp:29: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty()) return s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) s[i] = tolower(s[i]);\n\
    \    }\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) s[i]\
    \ = toupper(s[i]);\n    }\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpeej_fa_6: /tmp/tmpeej_fa_6.cpp:25: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    int\
    \ count = 0;\n    for(int i = 0; i < n; i++)\n    {\n        if(isalpha(s[i]))\n\
    \        {\n            count++;\n        }\n    }\n    if(count == 0)\n    {\n\
    \        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    else\n\
    \    {\n        for(int i = 0; i < n; i++)\n        {\n            if(isalpha(s[i]))\n\
    \            {\n                if(isupper(s[i]))\n                {\n       \
    \             s[i] = tolower(s[i]);\n                }\n                else\n\
    \                {\n                    s[i] = toupper(s[i]);\n              \
    \  }\n            }\n        }\n        return s;\n    }\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result;\n  if(std::all_of(s.begin(),\
    \ s.end(), ::isdigit)) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  for(char c : s) {\n    if(std::isalpha(c)) {\n      result += (std::isupper(c)\
    \ ? std::tolower(c) : std::toupper(c));\n    } else {\n      result += c;\n  \
    \  }\n  }\n  return result;\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmptok7cri3: /tmp/tmptok7cri3.cpp:34: int main(): Assertion `candidate((\"\
    #6@2\")) == (\"2@6#\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.length() == 0) return\
    \ s;\n    bool flag = false;\n    for(char &ch : s)\n    {\n        if(ch >= 'a'\
    \ && ch <= 'z')\n        {\n            flag = true;\n            break;\n   \
    \     }\n        else if(ch >= 'A' && ch <= 'Z')\n        {\n            flag\
    \ = true;\n            break;\n        }\n    }\n    if(flag)\n    {\n       \
    \ for(char &ch : s)\n        {\n            if(ch >= 'a' && ch <= 'z')\n     \
    \       {\n                ch -= 'a' - 'A';\n            }\n            else if(ch\
    \ >= 'A' && ch <= 'Z')\n            {\n                ch += 'a' - 'A';\n    \
    \        }\n        }\n    }\n    else\n    {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // check if string has letters\n\
    \    bool has_letters = false;\n    for (int i = 0; i < s.size(); i++) {\n   \
    \     if (isalpha(s[i])) {\n            has_letters = true;\n            break;\n\
    \        }\n    }\n    if (!has_letters) return std::string(s.rbegin(), s.rend());\n\
    \    // otherwise reverse each letter\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            s[i] = islower(s[i]) ? toupper(s[i])\
    \ : tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  // your code here\n  return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpm61i8vtf: /tmp/tmpm61i8vtf.cpp:18: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::reverse(s.begin(), s.end());\n\
    \  for (int i = 0; i < s.size(); i++) {\n    if (islower(s[i])) {\n      s[i]\
    \ = toupper(s[i]);\n    } else if (isupper(s[i])) {\n      s[i] = tolower(s[i]);\n\
    \    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpnyh44unn: /tmp/tmpnyh44unn.cpp:25: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tif (s.empty()) {\n\t\treturn\
    \ s;\n\t}\n\tstd::string result;\n\tfor (auto it = s.begin(); it != s.end(); ++it)\
    \ {\n\t\tif (std::isalpha(*it)) {\n\t\t\tif (std::islower(*it)) {\n\t\t\t\tresult.push_back(std::toupper(*it));\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push_back(std::tolower(*it));\n\t\t\t}\n\
    \t\t}\n\t\telse {\n\t\t\tresult.push_back(*it);\n\t\t}\n\t}\n\tif (result.size()\
    \ == s.size()) {\n\t\treturn result;\n\t}\n\telse {\n\t\treturn std::string(result.rbegin(),\
    \ result.rend());\n\t}\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpxaxr7knh: /tmp/tmpxaxr7knh.cpp:40: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i] -= 32;\n\t\t}\n\t\t\
    else if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] += 32;\n\t\t}\n\t}\n\tstd::reverse(s.begin(),\
    \ s.end());\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpjfoz5ypp: /tmp/tmpjfoz5ypp.cpp:26: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.length() == 0) return\
    \ s;\n    std::string out;\n    for (int i = 0; i < s.length(); i++) {\n     \
    \   if (islower(s[i])) out += toupper(s[i]);\n        else if (isupper(s[i]))\
    \ out += tolower(s[i]);\n        else out += s[i];\n    }\n    return out;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmprts6jvu4: /tmp/tmprts6jvu4.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tif (s.empty()) return s;\n\t\
    std::string res;\n\tfor (char c : s) {\n\t\tif (isalpha(c)) {\n\t\t\tres += isupper(c)\
    \ ? tolower(c) : toupper(c);\n\t\t}\n\t\telse {\n\t\t\tres += c;\n\t\t}\n\t}\n\
    \tif (res == s) {\n\t\tstd::reverse(res.begin(), res.end());\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // check if string has no\
    \ letter\n    bool is_string_has_letter = false;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            is_string_has_letter\
    \ = true;\n            break;\n        }\n    }\n    if (!is_string_has_letter)\
    \ {\n        return std::string(s.rbegin(), s.rend());\n    }\n    // change cases\
    \ letter\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' &&\
    \ s[i] <= 'z') {\n            s[i] = s[i] - 'a' + 'A';\n        } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            s[i] = s[i] - 'A' + 'a';\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tint n = s.size();\n\tfor (int\
    \ i = 0; i < n; i++) {\n\t\tif ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' &&\
    \ s[i] <= 'Z')) {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\t\ts[i] = s[i]\
    \ - 32;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = s[i] + 32;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmptpx06nj6: /tmp/tmptpx06nj6.cpp:29: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string ans;\n\tif(s.length()\
    \ == 0) return s;\n\tfor(int i = 0; i < s.length(); i++) {\n\t\tif(s[i] >= 'a'\
    \ && s[i] <= 'z') ans += s[i] - 32;\n\t\telse if(s[i] >= 'A' && s[i] <= 'Z') ans\
    \ += s[i] + 32;\n\t\telse ans += s[i];\n\t}\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp3aleluhl: /tmp/tmp3aleluhl.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string str;\n    if(!(std::isalpha(s[0])))\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for(int i = 0; i < s.length(); i++) {\n        if(std::isalpha(s[i])) {\n  \
    \          if(std::isupper(s[i])) {\n                s[i] = std::tolower(s[i]);\n\
    \            } else {\n                s[i] = std::toupper(s[i]);\n          \
    \  }\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpn9bds3k_: /tmp/tmpn9bds3k_.cpp:34: int main(): Assertion `candidate((\"\
    #a@C\")) == (\"#A@c\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::reverse(s.begin(), s.end());\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (std::isalpha(s[i])) {\n\
    \            s[i] = std::tolower(s[i]);\n        }\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpujhn3q_h: /tmp/tmpujhn3q_h.cpp:23: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    int\
    \ cnt = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (isdigit(s[i]))\
    \ {\n            cnt++;\n        }\n    }\n    if (cnt == s.size()) {\n      \
    \  for (int i = s.size() - 1; i >= 0; i--) {\n            res += s[i];\n     \
    \   }\n        return res;\n    }\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] >= 'a' && s[i] <= 'z') {\n            res += (char)toupper(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res += (char)tolower(s[i]);\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp9kvfl2bh: /tmp/tmp9kvfl2bh.cpp:44: int main(): Assertion `candidate((\"\
    #6@2\")) == (\"2@6#\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty())\n        return\
    \ \"\";\n    for(auto &c : s)\n        if(std::isalpha(c))\n            c ^= 32;\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp4qayqi3_: /tmp/tmp4qayqi3_.cpp:23: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // std::cout << \"string to\
    \ be reversed - \" << s << std::endl;\n    if (s.length() == 0) {\n        return\
    \ s;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            std::cout << s[i] << std::endl;\n            if (islower(s[i]))\
    \ {\n                s[i] = toupper(s[i]);\n            } else {\n           \
    \     s[i] = tolower(s[i]);\n            }\n        }\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: "A\ns\nD\nf\n"
  stderr: "tmp9dw4cghw: /tmp/tmp9dw4cghw.cpp:32: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0) return s;\n    int count = 0;\n    for(int i = 0; i < len; i++)\
    \ {\n        if(isalpha(s[i])) count++;\n    }\n    if(count == 0) {\n       \
    \ reverse(s.begin(), s.end());\n        return s;\n    }\n    for(int i = 0; i\
    \ < len; i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) s[i]\
    \ = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::transform(s.begin(),\
    \ s.end(), s.begin(), ::tolower);\n    int cnt = 0;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            cnt++;\n        }\n    }\n\
    \    if (cnt == 0) {\n        std::reverse(s.begin(), s.end());\n        return\
    \ s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (islower(s[i]))\
    \ {\n            s[i] = toupper(s[i]);\n        } else if (isupper(s[i])) {\n\
    \            s[i] = tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp5hg4dv_y: /tmp/tmp5hg4dv_y.cpp:35: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z')\n            s[i]\
    \ = 'A' + (s[i] - 'a');\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n       \
    \     s[i] = 'a' + (s[i] - 'A');\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpa65azo_w: /tmp/tmpa65azo_w.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    //check if the string contains\
    \ any alphabets.\n    bool flag = false;\n    for(int i = 0; i < s.length(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            flag = true;\n            break;\n\
    \        }\n    }\n    if(flag) {\n        //loop through each letter and reverse\
    \ its case.\n        for(int i = 0; i < s.length(); i++) {\n            if(isalpha(s[i]))\
    \ {\n                s[i] = isupper(s[i]) ? tolower(s[i]) : toupper(s[i]);\n \
    \           }\n        }\n    } else {\n        //reverse the string if it does\
    \ not contain any letters.\n        reverse(s.begin(), s.end());\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int i;\n    if(s.size() <\
    \ 1)\n        return s;\n    for(i = 0; i < s.size(); i++)\n    {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z')\n            s[i] = s[i] - 32;\n        else if(s[i]\
    \ >= 'A' && s[i] <= 'Z')\n            s[i] = s[i] + 32;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpdtukkurq: /tmp/tmpdtukkurq.cpp:28: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::reverse(s.begin(), s.end());\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') s[i] = s[i] - 'a' + 'A';\n        else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ s[i] = s[i] - 'A' + 'a';\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpfdgne8cv: /tmp/tmpfdgne8cv.cpp:22: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  return {};\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpyac_0r9s: /tmp/tmpyac_0r9s.cpp:17: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string ret = \"\";\n\
    \    bool found = false;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] >= 65 && s[i] <= 90) {\n            ret += s[i] + 32;\n            found\
    \ = true;\n        } else if (s[i] >= 97 && s[i] <= 122) {\n            ret +=\
    \ s[i] - 32;\n            found = true;\n        } else {\n            ret +=\
    \ s[i];\n        }\n    }\n    if (!found) return s;\n    std::reverse(ret.begin(),\
    \ ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpaa6gi854: /tmp/tmpaa6gi854.cpp:32: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int f=0;\n    for(int i=0;i<s.length();i++)\n\
    \    {\n        if(s[i]>='a' && s[i]<='z')\n        {\n            f=1;\n    \
    \        break;\n        }\n        else if(s[i]>='A' && s[i]<='Z')\n        {\n\
    \            f=1;\n            break;\n        }\n    }\n    for(int i=0;i<s.length();i++)\n\
    \    {\n        if(s[i]>='a' && s[i]<='z')\n        {\n            s[i]=s[i]-32;\n\
    \        }\n        else if(s[i]>='A' && s[i]<='Z')\n        {\n            s[i]=s[i]+32;\n\
    \        }\n    }\n    if(f==0)\n    {\n        std::reverse(s.begin(),s.end());\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string str = \"\";\n\t\
    for (int i = 0; i < s.length(); i++) {\n\t\tint a = s[i];\n\t\tif (a >= 97 &&\
    \ a <= 122) {\n\t\t\tstr += toupper(s[i]);\n\t\t}\n\t\telse if (a >= 65 && a <=\
    \ 90) {\n\t\t\tstr += tolower(s[i]);\n\t\t}\n\t\telse {\n\t\t\tstr += s[i];\n\t\
    \t}\n\t}\n\tstd::reverse(str.begin(), str.end());\n\treturn str;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp7ngp6_em: /tmp/tmp7ngp6_em.cpp:31: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::reverse(s.begin(), s.end());\n\
    \tfor (int i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z')\n\t\
    \t\ts[i] -= 32;\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z')\n\t\t\ts[i] += 32;\n\
    \t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpo60u9utz: /tmp/tmpo60u9utz.cpp:24: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    string ans;\n    for(int i=0;i<s.size();i++){\n\
    \        if((int)s[i] >= 65 && (int)s[i] <= 90){\n            ans += tolower(s[i]);\n\
    \        }\n        else if((int)s[i] >= 97 && (int)s[i] <= 122){\n          \
    \  ans += toupper(s[i]);\n        }\n        else{\n            ans += s[i];\n\
    \        }\n    }\n    if(s==ans){\n        reverse(ans.begin(),ans.end());\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm3j6p8e3.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpm3j6p8e3.cpp:13:5: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   13 |     string ans;\n    \
    \  |     ^~~~~~\n      |     std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpm3j6p8e3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpm3j6p8e3.cpp:16:13:\
    \ error: \u2018ans\u2019 was not declared in this scope; did you mean \u2018abs\u2019\
    ?\n   16 |             ans += tolower(s[i]);\n      |             ^~~\n      |\
    \             abs\n/tmp/tmpm3j6p8e3.cpp:19:13: error: \u2018ans\u2019 was not\
    \ declared in this scope; did you mean \u2018abs\u2019?\n   19 |             ans\
    \ += toupper(s[i]);\n      |             ^~~\n      |             abs\n/tmp/tmpm3j6p8e3.cpp:22:13:\
    \ error: \u2018ans\u2019 was not declared in this scope; did you mean \u2018abs\u2019\
    ?\n   22 |             ans += s[i];\n      |             ^~~\n      |        \
    \     abs\n/tmp/tmpm3j6p8e3.cpp:25:11: error: \u2018ans\u2019 was not declared\
    \ in this scope; did you mean \u2018abs\u2019?\n   25 |     if(s==ans){\n    \
    \  |           ^~~\n      |           abs\n/tmp/tmpm3j6p8e3.cpp:26:9: error: \u2018\
    reverse\u2019 was not declared in this scope; did you mean \u2018std::reverse\u2019\
    ?\n   26 |         reverse(ans.begin(),ans.end());\n      |         ^~~~~~~\n\
    \      |         std::reverse\nIn file included from /share"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    bool found_letter = false;\n\
    \    for (char &c : s) {\n        if (isalpha(c)) {\n            found_letter\
    \ = true;\n            c = islower(c) ? toupper(c) : tolower(c);\n        }\n\
    \    }\n    return found_letter ? s : std::string(s.rbegin(), s.rend());\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    bool found = false;\n    if(s.length()\
    \ == 0) return s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            found = true;\n            break;\n        }\n    }\n    if(!found)\n\
    \        std::reverse(s.begin(), s.end());\n    else {\n        for(int i = 0;\
    \ i < s.length(); i++) {\n            if(islower(s[i]))\n                s[i]\
    \ = toupper(s[i]);\n            else if(isupper(s[i]))\n                s[i] =\
    \ tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.length() == 0) return\
    \ s;\n    std::string str = \"\";\n    int flag = 0;\n    for (char ch : s) {\n\
    \        if (std::isalpha(ch)) {\n            str += char(isupper(ch) ? tolower(ch)\
    \ : toupper(ch));\n            flag = 1;\n        } else {\n            str +=\
    \ ch;\n        }\n    }\n    return flag ? str : std::string(str.rbegin(), str.rend());\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    bool\
    \ check = false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >=\
    \ 'a' && s[i] <= 'z') {\n            res += s[i] - 32;\n            check = true;\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            res += s[i] + 32;\n\
    \            check = true;\n        } else res += s[i];\n    }\n    if (check)\
    \ return res;\n    for (int i = s.size() - 1; i >= 0; i--) res += s[i];\n    return\
    \ res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpshz4i3w0: /tmp/tmpshz4i3w0.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  bool rev = true;\n  for (auto\
    \ i : s) if (isalpha(i)) rev = false;\n  std::transform(s.begin(), s.end(), s.begin(),\n\
    \    [](char c) { return (isalpha(c)) ? tolower(c) : c; });\n  if (rev) std::reverse(s.begin(),\
    \ s.end());\n  std::transform(s.begin(), s.end(), s.begin(),\n    [](char c) {\
    \ return (isalpha(c)) ? toupper(c) : c; });\n  return s;\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp2akzid92: /tmp/tmp2akzid92.cpp:24: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if(s.length() == 0) return s;\n\
    \  std::string r;\n  for(auto c : s) {\n    if(isalpha(c)) {\n      if(islower(c))\n\
    \        r += (char)toupper(c);\n      else\n        r += (char)tolower(c);\n\
    \    } else {\n      r += c;\n    }\n  }\n  if(isalpha(r[0])) return r;\n  std::reverse(r.begin(),\
    \ r.end());\n  return r;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp9z7nc4yt: /tmp/tmp9z7nc4yt.cpp:34: int main(): Assertion `candidate((\"\
    #a@C\")) == (\"#A@c\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int i;\n    for(i=0; i<s.length();\
    \ i++)\n    {\n        if(islower(s[i]))\n        {\n            s[i] = toupper(s[i]);\n\
    \        }\n        else if(isupper(s[i]))\n        {\n            s[i] = tolower(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmplgtta4gu: /tmp/tmplgtta4gu.cpp:30: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string ans;\n\tfor (size_t\
    \ i = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\tans\
    \ += s[i] - 'a' + 'A';\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\
    \tans += s[i] - 'A' + 'a';\n\t\t}\n\t\telse {\n\t\t\tans += s[i];\n\t\t}\n\t}\n\
    \tif (ans.size() == 0) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\
    \t}\n\treturn ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp20l11_i7: /tmp/tmp20l11_i7.cpp:34: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tif (s.size() == 0) {\n\t\treturn\
    \ s;\n\t}\n\tstd::string s2(s);\n\tbool first = true;\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z'))\
    \ {\n\t\t\tfirst = false;\n\t\t\ts2[i] = s[i] ^ ('a' ^ 'A');\n\t\t}\n\t}\n\tif\
    \ (first) {\n\t\tstd::reverse(s2.begin(), s2.end());\n\t}\n\treturn s2;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if (s.size() == 0) return \"\
    \";\n  std::string res = \"\";\n  int i = 0;\n  while (i < s.size() && !isalpha(s[i]))\
    \ i++;\n  if (i == s.size()) {\n    reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  bool is_upper = isupper(s[i]);\n  res += (is_upper ? tolower(s[i]) : toupper(s[i]));\n\
    \  for (int j = i + 1; j < s.size(); j++) {\n    if (isalpha(s[j])) {\n      res\
    \ += (is_upper ? tolower(s[j]) : toupper(s[j]));\n    } else {\n      res += s[j];\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp__ptk9v_: /tmp/tmp__ptk9v_.cpp:34: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // Constraints: 0 <= str.length\
    \ <= 50\n    int n = s.length();\n    if (n == 0) return s;\n    for (int i =\
    \ 0; i < n; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            s[i]\
    \ = s[i] - 'a' + 'A';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n    \
    \        s[i] = s[i] - 'A' + 'a';\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp13e4iypn: /tmp/tmp13e4iypn.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result = \"\";\n\
    \  if(s.size() == 0) return result;\n  for(int i = 0; i < s.size(); i++) {\n \
    \   if(s[i] > 96 && s[i] < 123) {\n      result += toupper(s[i]);\n    } else\
    \ if(s[i] > 64 && s[i] < 91) {\n      result += tolower(s[i]);\n    } else {\n\
    \      result += s[i];\n    }\n  }\n  if(result.size() > 0) return result;\n \
    \ else return std::string(s.rbegin(), s.rend());\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp2tc7sqdr: /tmp/tmp2tc7sqdr.cpp:30: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string t;\n\tif (s.size()\
    \ == 0)\n\t\treturn s;\n\tbool flag = true;\n\tfor (auto& c : s) {\n\t\tif (std::isalpha(c))\
    \ {\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (flag) {\n\t\tstd::reverse(s.begin(),\
    \ s.end());\n\t\treturn s;\n\t}\n\telse {\n\t\tfor (auto& c : s) {\n\t\t\tif (std::isalpha(c))\
    \ {\n\t\t\t\tif (std::isupper(c))\n\t\t\t\t\tt += tolower(c);\n\t\t\t\telse\n\t\
    \t\t\t\tt += toupper(c);\n\t\t\t}\n\t\t\telse\n\t\t\t\tt += c;\n\t\t}\n\t\treturn\
    \ t;\n\t}\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result = \"\";\n\
    \  int l = s.length();\n  if(l == 0) return s;\n  for(int i = 0; i < l; i++) {\n\
    \    if(s[i] >= 'a' && s[i] <= 'z') {\n      result += toupper(s[i]);\n    } else\
    \ if(s[i] >= 'A' && s[i] <= 'Z') {\n      result += tolower(s[i]);\n    } else\
    \ {\n      result += s[i];\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpfvcy7n83: /tmp/tmpfvcy7n83.cpp:30: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tint len = s.length();\n\tfor\
    \ (int i = 0; i < len; i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z')\n\t\t\ts[i]\
    \ = 'A' + (s[i] - 'a');\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z')\n\t\t\ts[i]\
    \ = 'a' + (s[i] - 'A');\n\t}\n\tif (s[0] >= 'a' && s[0] <= 'z')\n\t\treturn s;\n\
    \tstd::reverse(s.begin(), s.end());\n\treturn s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp_5cnp39l: /tmp/tmp_5cnp39l.cpp:29: int main(): Assertion `candidate((\"\
    ab\")) == (\"AB\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    string res=\"\";\n    bool\
    \ flag=false;\n    for(auto c:s){\n        if((c>='a'&&c<='z')||(c>='A'&&c<='Z'))\
    \ flag=true;\n    }\n    if(!flag) reverse(s.begin(),s.end());\n    for(auto c:s){\n\
    \        if(c>='a'&&c<='z') res+=toupper(c);\n        else if(c>='A'&&c<='Z')\
    \ res+=tolower(c);\n        else res+=c;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp41rg9g3.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpp41rg9g3.cpp:13:5: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   13 |     string res=\"\";\n\
    \      |     ^~~~~~\n      |     std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpp41rg9g3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpp41rg9g3.cpp:20:28:\
    \ error: \u2018res\u2019 was not declared in this scope\n   20 |         if(c>='a'&&c<='z')\
    \ res+=toupper(c);\n      |                            ^~~\n/tmp/tmpp41rg9g3.cpp:21:33:\
    \ error: \u2018res\u2019 was not declared in this scope\n   21 |         else\
    \ if(c>='A'&&c<='Z') res+=tolower(c);\n      |                               \
    \  ^~~\n/tmp/tmpp41rg9g3.cpp:22:14: error: \u2018res\u2019 was not declared in\
    \ this scope\n   22 |         else res+=c;\n      |              ^~~\n/tmp/tmpp41rg9g3.cpp:24:12:\
    \ error: \u2018res\u2019 was not declared in this scope\n   24 |     return res;\n\
    \      |            ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string result;\n\tbool\
    \ is_letter = false;\n\tfor (auto ch : s) {\n\t\tif (ch >= 'a' && ch <= 'z') {\n\
    \t\t\tresult += char(ch - 'a' + 'A');\n\t\t\tis_letter = true;\n\t\t}\n\t\telse\
    \ if (ch >= 'A' && ch <= 'Z') {\n\t\t\tresult += char(ch - 'A' + 'a');\n\t\t\t\
    is_letter = true;\n\t\t}\n\t\telse\n\t\t\tresult += ch;\n\t}\n\tif (!is_letter)\n\
    \t\tstd::reverse(result.begin(), result.end());\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    std::string::size_type index = 0;\n    while (index < s.size()) {\n   \
    \     if (isalpha(s[index])) {\n            if (islower(s[index])) {\n       \
    \         result += toupper(s[index]);\n            } else {\n               \
    \ result += tolower(s[index]);\n            }\n        } else {\n            result\
    \ += s[index];\n        }\n        index++;\n    }\n    if (isalpha(result[0]))\
    \ {\n        return result;\n    } else {\n        return std::string(result.rbegin(),\
    \ result.rend());\n    }\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpm5xjx4fy: /tmp/tmpm5xjx4fy.cpp:38: int main(): Assertion `candidate((\"\
    #a@C\")) == (\"#A@c\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int flag = 0;\n    if(s.length()\
    \ == 0)\n    {\n        return \"\";\n    }\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(isalpha(s[i]))\n        {\n            flag = 1;\n \
    \           if(islower(s[i]))\n            {\n                s[i] = toupper(s[i]);\n\
    \            }\n            else\n            {\n                s[i] = tolower(s[i]);\n\
    \            }\n        }\n    }\n    if(flag == 0)\n    {\n        int n = s.length();\n\
    \        for(int i = 0; i < n / 2; i++)\n        {\n            swap(s[i], s[n\
    \ - i - 1]);\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpi_0_0zza.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpi_0_0zza.cpp:38:13: error: \u2018swap\u2019 was not declared in this\
    \ scope\n   38 |             swap(s[i], s[n - i - 1]);\n      |             ^~~~\n\
    /tmp/tmpi_0_0zza.cpp:38:13: note: suggested alternatives:\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n            \
    \     from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpi_0_0zza.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpi_0_0zza.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size()==0)\n        return\
    \ s;\n    std::string res;\n    bool isAlph = false;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            res += s[i]-'a'+'A';\n     \
    \       isAlph = true;\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n\
    \            res += s[i]-'A'+'a';\n            isAlph = true;\n        }\n   \
    \     else{\n            res += s[i];\n        }\n    }\n    if(!isAlph)\n   \
    \     reverse(res.begin(),res.end());\n    return res;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            s[i] = islower(s[i]) ? toupper(s[i])\
    \ : tolower(s[i]);\n        }\n    }\n    std::reverse(s.begin(), s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp77b7h68g: /tmp/tmp77b7h68g.cpp:23: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\t// your code goes here\n\tstd::string\
    \ str = \"\";\n\tif (s.length() == 0)\n\t\treturn str;\n\tbool flag = true;\n\t\
    for (int i = 0; i < s.length(); i++)\n\t{\n\t\tif ((s[i] >= 'a' && s[i] <= 'z')\
    \ || (s[i] >= 'A' && s[i] <= 'Z'))\n\t\t{\n\t\t\tflag = false;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < s.length(); i++)\n\t{\n\t\tif (s[i] >= 'a' &&\
    \ s[i] <= 'z')\n\t\t{\n\t\t\tstr += (char)(s[i] - 32);\n\t\t}\n\t\telse if (s[i]\
    \ >= 'A' && s[i] <= 'Z')\n\t\t{\n\t\t\tstr += (char)(s[i] + 32);\n\t\t}\n\t\t\
    else\n\t\t{\n\t\t\tstr += s[i];\n\t\t}\n\t}\n\tif (flag)\n\t{\n\t\tstd::reverse(str.begin(),\
    \ str.end());\n\t}\n\treturn str;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0) return s;\n    for(int i = 0; i < len; i++) {\n        if((s[i]\
    \ >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n            if(s[i]\
    \ == 'a' || s[i] == 'A') {\n                s[i] += 25;\n            } else if(s[i]\
    \ == 'z' || s[i] == 'Z') {\n                s[i] -= 25;\n            } else {\n\
    \                s[i] += 32;\n            }\n        }\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpuix983jc: /tmp/tmpuix983jc.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int i = 0;\n    while(i <\
    \ s.size() && !isalpha(s[i]))\n        i++;\n    if(i == s.size())\n        reverse(s.begin(),\
    \ s.end());\n    for(; i < s.size(); i++)\n        if(isalpha(s[i]))\n       \
    \     s[i] = isupper(s[i]) ? tolower(s[i]) : toupper(s[i]);\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int size = s.size();\n   \
    \ std::string temp = \"\";\n    for(int i = 0; i < size; i++) {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z')\n            temp += toupper(s[i]);\n        else if(s[i]\
    \ >= 'A' && s[i] <= 'Z')\n            temp += tolower(s[i]);\n        else\n \
    \           temp += s[i];\n    }\n    return temp;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpd4rwzllr: /tmp/tmpd4rwzllr.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (isalpha(s[i])) {\n\t\t\tif (islower(s[i])) {\n\t\t\t\ts[i] =\
    \ toupper(s[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ts[i] = tolower(s[i]);\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp4diqpe26: /tmp/tmp4diqpe26.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') s[i] = 'A' + (s[i] - 'a');\n   \
    \ else if (s[i] >= 'A' && s[i] <= 'Z') s[i] = 'a' + (s[i] - 'A');\n  }\n  return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp_evz5a37: /tmp/tmp_evz5a37.cpp:22: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if(s.empty())\n    return s;\n\
    \  \n  //reverse the string if it contains no letters\n  if(!std::isalpha(s[0]))\n\
    \    std::reverse(s.begin(), s.end());\n  \n  for(auto it = s.begin(); it != s.end();\
    \ ++it)\n  {\n    if(std::isalpha(*it))\n    {\n      if(std::islower(*it))\n\
    \        *it = std::toupper(*it);\n      else\n        *it = std::tolower(*it);\n\
    \    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpl95c245r: /tmp/tmpl95c245r.cpp:37: int main(): Assertion `candidate((\"\
    #a@C\")) == (\"#A@c\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() == 0) {\n   \
    \     return s;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            s[i] = toupper(s[i]);\n        } else\
    \ if (s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] = tolower(s[i]);\n     \
    \   }\n    }\n    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp8dfo5tu5: /tmp/tmp8dfo5tu5.cpp:28: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstring ret = \"\";\n\tif(s.length()\
    \ == 0) return s;\n\tfor(int i = 0; i < s.length(); i++){\n\t\tif(s[i] >= 'a'\
    \ && s[i] <= 'z'){\n\t\t\tret += (char)((int)s[i] - 32);\n\t\t}\n\t\telse if(s[i]\
    \ >= 'A' && s[i] <= 'Z'){\n\t\t\tret += (char)((int)s[i] + 32);\n\t\t}\n\t\telse{\n\
    \t\t\tret += s[i];\n\t\t}\n\t}\n\tif(ret.length() == s.length()) return ret;\n\
    \telse return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmo_i1ew0.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpmo_i1ew0.cpp:13:2: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   13 |  string ret = \"\";\n\
    \      |  ^~~~~~\n      |  std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmo_i1ew0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpmo_i1ew0.cpp:17:4:\
    \ error: \u2018ret\u2019 was not declared in this scope\n   17 |    ret += (char)((int)s[i]\
    \ - 32);\n      |    ^~~\n/tmp/tmpmo_i1ew0.cpp:20:4: error: \u2018ret\u2019 was\
    \ not declared in this scope\n   20 |    ret += (char)((int)s[i] + 32);\n    \
    \  |    ^~~\n/tmp/tmpmo_i1ew0.cpp:23:4: error: \u2018ret\u2019 was not declared\
    \ in this scope\n   23 |    ret += s[i];\n      |    ^~~\n/tmp/tmpmo_i1ew0.cpp:26:5:\
    \ error: \u2018ret\u2019 was not declared in this scope\n   26 |  if(ret.length()\
    \ == s.length()) return ret;\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string tmp = \"\";\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            tmp += s[i] - 32;\n        } else if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            tmp += s[i] + 32;\n        } else {\n            tmp\
    \ += s[i];\n        }\n    }\n    return tmp;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpu0m9m9mp: /tmp/tmpu0m9m9mp.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            s[i] -= 32;\n\
    \        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n            s[i] += 32;\n  \
    \      }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp7y15rjf2: /tmp/tmp7y15rjf2.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::transform(s.begin(), s.end(),\
    \ s.begin(), ::tolower);\n  std::string z = \"\";\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z'))\
    \ {\n      if (s[i] == 'a' || s[i] == 'A') {\n        z += 'Z';\n      } else\
    \ if (s[i] == 'z' || s[i] == 'Z') {\n        z += 'A';\n      } else {\n     \
    \   int n = s[i] - 97;\n        z += ('Z' - n);\n      }\n    } else {\n     \
    \ z += s[i];\n    }\n  }\n  return z;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpksb03l49: /tmp/tmpksb03l49.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string result;\n\tif (s.length()\
    \ == 0) return s;\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (isalpha(s[i]))\
    \ {\n\t\t\tif (isupper(s[i])) {\n\t\t\t\tresult += tolower(s[i]);\n\t\t\t}\n\t\
    \t\telse if (islower(s[i])) {\n\t\t\t\tresult += toupper(s[i]);\n\t\t\t}\n\t\t\
    }\n\t\telse {\n\t\t\tresult += s[i];\n\t\t}\n\t}\n\tstd::reverse(result.begin(),\
    \ result.end());\n\treturn result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpxafvuoxu: /tmp/tmpxafvuoxu.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.length() == 0)\n    \
    \    return s;\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(islower(s[i]))\n      \
    \      s[i] = toupper(s[i]);\n        else if(isupper(s[i]))\n            s[i]\
    \ = tolower(s[i]);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmptz__eyd5: /tmp/tmptz__eyd5.cpp:26: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string r;\n  bool all_letter\
    \ = true;\n  for (int i = 0; i < s.size(); i++) {\n    char c = s[i];\n    if\
    \ (isalpha(c)) {\n      if (isupper(c)) {\n        r += tolower(c);\n      } else\
    \ {\n        r += toupper(c);\n      }\n    } else {\n      r += c;\n      all_letter\
    \ = false;\n    }\n  }\n  if (all_letter) {\n    reverse(r.begin(), r.end());\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp1jy6nsq_: /tmp/tmp1jy6nsq_.cpp:35: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (auto&& c : s) {\n        if (std::isalpha(c))\n            result += std::isupper(c)\
    \ ? std::tolower(c) : std::toupper(c);\n        else\n            result += c;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmphxouuqfs: /tmp/tmphxouuqfs.cpp:25: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string str = \"\";\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            str += toupper(s[i]);\n        } else if(s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            str += tolower(s[i]);\n        } else {\n      \
    \      str += s[i];\n        }\n    }\n    return str;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmppqjkz9hw: /tmp/tmppqjkz9hw.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0) return s;\n\
    \    int l = s.size();\n    for(int i = 0; i < l; i++) {\n        if((s[i] >=\
    \ 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n            if(s[i]\
    \ >= 'a' && s[i] <= 'z') s[i] -= 32;\n            else s[i] += 32;\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp1nnnj89k: /tmp/tmp1nnnj89k.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  int l = s.length();\n  for(int\
    \ i = 0; i < l; i++) {\n    if(isalpha(s[i])) {\n      if(islower(s[i])) {\n \
    \       s[i] = toupper(s[i]);\n      } else {\n        s[i] = tolower(s[i]);\n\
    \      }\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp2e93z57v: /tmp/tmp2e93z57v.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int checker = 0;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            checker\
    \ = 1;\n            if(isupper(s[i])) {\n                s[i] = tolower(s[i]);\n\
    \            } else {\n                s[i] = toupper(s[i]);\n            }\n\
    \        }\n    }\n    if(checker == 0) {\n        std::reverse(s.begin(), s.end());\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(char &c : s)\n       \
    \ if(std::isalpha(c))\n            c ^= 32;\n    return std::string(s.rbegin(),\
    \ s.rend());\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp_xn6e4xj: /tmp/tmp_xn6e4xj.cpp:20: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result = \"\";\n\
    \  if(s.length()==0) {\n    return result;\n  }\n  for(int i=0; i<s.length();\
    \ i++) {\n    if(isalpha(s[i])) {\n      char a = toupper(s[i]);\n      if(s[i]==a)\
    \ {\n        result += tolower(s[i]);\n      } else {\n        result += a;\n\
    \      }\n    } else {\n      result += s[i];\n    }\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp85j9unml: /tmp/tmp85j9unml.cpp:34: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    if (s.size() == 0) {\n        return result;\n    }\n    else {\n     \
    \   for (int i = 0; i < s.size(); i++) {\n            if (islower(s[i])) {\n \
    \               result += toupper(s[i]);\n            }\n            else if (isupper(s[i]))\
    \ {\n                result += tolower(s[i]);\n            }\n            else\
    \ {\n                result += s[i];\n            }\n        }\n        return\
    \ result;\n    }\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp_xkixdfx: /tmp/tmp_xkixdfx.cpp:35: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string res;\n  bool letters\
    \ = false;\n  for (int i = 0; i < s.size(); i++) {\n    if (isalpha(s[i])) {\n\
    \      letters = true;\n      res += toupper(s[i]);\n    } else {\n      res +=\
    \ s[i];\n    }\n  }\n  if (!letters) {\n    return std::string(res.rbegin(), res.rend());\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpk44hpgps: /tmp/tmpk44hpgps.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tint n = s.size();\n\tif (n ==\
    \ 0) return \"\";\n\tstd::string res;\n\tfor (int i = 0; i < n; i++) {\n\t\tif\
    \ (std::isalpha(s[i])) {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z') res += std::toupper(s[i]);\n\
    \t\t\telse res += std::tolower(s[i]);\n\t\t}\n\t\telse res += s[i];\n\t}\n\tif\
    \ (res == s) {\n\t\tstd::reverse(res.begin(), res.end());\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    string res;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(isupper(s[i]))\
    \ {\n                res += tolower(s[i]);\n            }\n            else {\n\
    \                res += toupper(s[i]);\n            }\n        }\n        else\
    \ {\n            res += s[i];\n        }\n    }\n    if(isalpha(res[0])) {\n \
    \       return res;\n    }\n    reverse(res.begin(), res.end());\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ex35ly0.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp3ex35ly0.cpp:13:5: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   13 |     string res;\n    \
    \  |     ^~~~~~\n      |     std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3ex35ly0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmp3ex35ly0.cpp:17:17:\
    \ error: \u2018res\u2019 was not declared in this scope\n   17 |             \
    \    res += tolower(s[i]);\n      |                 ^~~\n/tmp/tmp3ex35ly0.cpp:20:17:\
    \ error: \u2018res\u2019 was not declared in this scope\n   20 |             \
    \    res += toupper(s[i]);\n      |                 ^~~\n/tmp/tmp3ex35ly0.cpp:24:13:\
    \ error: \u2018res\u2019 was not declared in this scope\n   24 |             res\
    \ += s[i];\n      |             ^~~\n/tmp/tmp3ex35ly0.cpp:27:16: error: \u2018\
    res\u2019 was not declared in this scope\n   27 |     if(isalpha(res[0])) {\n\
    \      |                ^~~\n/tmp/tmp3ex35ly0.cpp:30:13: error: \u2018res\u2019\
    \ was not declared in this scope\n   30 |     reverse(res.begin(), res.end());\n\
    \      |             ^~~\n/tmp/tmp3ex35ly0.cpp:30:5: error: \u2018reverse\u2019\
    \ was not declared in this scope; did you mean \u2018std::reverse\u2019?\n   30\
    \ |     reverse(res.begin(), res.end());\n      |     ^~~~~~~\n      |     std::reverse\n\
    In file included from /shared/centos7/gcc/9.2"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (std::isalpha(s[i])) {\n      s[i] = std::tolower(s[i]);\n  \
    \  }\n  }\n  std::reverse(s.begin(), s.end());\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (std::isalpha(s[i])) {\n      s[i] = std::toupper(s[i]);\n  \
    \  }\n  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp0abh3srm: /tmp/tmp0abh3srm.cpp:28: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string s2;\n  for (char\
    \ c : s) {\n    if (std::isalpha(c)) {\n      if (std::islower(c)) {\n       \
    \ s2 += std::toupper(c);\n      } else {\n        s2 += std::tolower(c);\n   \
    \   }\n    } else {\n      s2 += c;\n    }\n  }\n  if (s2.size() > 0) {\n    return\
    \ s2;\n  } else {\n    std::reverse(s.begin(), s.end());\n    return s;\n  }\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpf7qr54v5: /tmp/tmpf7qr54v5.cpp:35: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string result = \"\";\n\
    \tif (s.length() == 0) {\n\t\treturn result;\n\t}\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i] = toupper(s[i]);\n\
    \t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] = tolower(s[i]);\n\
    \t\t}\n\t}\n\tstd::reverse(s.begin(), s.end());\n\treturn s;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp8z5e28v2: /tmp/tmp8z5e28v2.cpp:30: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tif(s.size() == 0)\n\t\treturn\
    \ \"\";\n\tfor(int i = 0; i < s.size(); i++) {\n\t\tif(s[i] >= 'a' && s[i] <=\
    \ 'z') {\n\t\t\ts[i] = s[i] - 32;\n\t\t}\n\t\telse if(s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n\t\t\ts[i] = s[i] + 32;\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp4e64fuj7: /tmp/tmp4e64fuj7.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty()) {\n        return\
    \ s;\n    }\n    for(char &c : s) {\n        if(std::isalpha(c)) {\n         \
    \   c = std::tolower(c);\n        }\n    }\n    return s;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmphid7kvts: /tmp/tmphid7kvts.cpp:25: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.empty()) return \"\"\
    ;\n    string res = \"\";\n    for (char c : s) {\n        if (std::isalpha(c))\
    \ {\n            if (std::isupper(c)) {\n                res += tolower(c);\n\
    \            } else {\n                res += toupper(c);\n            }\n   \
    \     } else {\n            res += c;\n        }\n    }\n    if (res.empty())\
    \ return s;\n    return res;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpa21ojeci.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpa21ojeci.cpp:14:5: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   14 |     string res = \"\"\
    ;\n      |     ^~~~~~\n      |     std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpa21ojeci.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpa21ojeci.cpp:18:17:\
    \ error: \u2018res\u2019 was not declared in this scope\n   18 |             \
    \    res += tolower(c);\n      |                 ^~~\n/tmp/tmpa21ojeci.cpp:20:17:\
    \ error: \u2018res\u2019 was not declared in this scope\n   20 |             \
    \    res += toupper(c);\n      |                 ^~~\n/tmp/tmpa21ojeci.cpp:23:13:\
    \ error: \u2018res\u2019 was not declared in this scope\n   23 |             res\
    \ += c;\n      |             ^~~\n/tmp/tmpa21ojeci.cpp:26:9: error: \u2018res\u2019\
    \ was not declared in this scope\n   26 |     if (res.empty()) return s;\n   \
    \   |         ^~~\n/tmp/tmpa21ojeci.cpp:27:12: error: \u2018res\u2019 was not\
    \ declared in this scope\n   27 |     return res;\n      |            ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty()) return s;\n\
    \    std::string res = \"\";\n    for(int i = 0; i < s.size(); i++){\n       \
    \ if(std::isalpha(s[i])){\n            if(std::isupper(s[i])){\n             \
    \   res += std::tolower(s[i]);\n            }\n            else{\n           \
    \     res += std::toupper(s[i]);\n            }\n        }\n        else{\n  \
    \          res += s[i];\n        }\n    }\n    std::reverse(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpbax9qy77: /tmp/tmpbax9qy77.cpp:33: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string ret = \"\";\n\
    \    if (std::all_of(s.begin(), s.end(), isdigit)) {\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    for (auto c : s) {\n        if (std::isalpha(c))\
    \ {\n            ret += isupper(c) ? tolower(c) : toupper(c);\n        } else\
    \ {\n            ret += c;\n        }\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpsrmsse16: /tmp/tmpsrmsse16.cpp:34: int main(): Assertion `candidate((\"\
    #6@2\")) == (\"2@6#\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    bool isLetter = false;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            isLetter = true;\n            if (islower(s[i]))\
    \ res += toupper(s[i]);\n            else res += tolower(s[i]);\n        } else\
    \ {\n            res += s[i];\n        }\n    }\n    if (!isLetter) {\n      \
    \  std::reverse(res.begin(), res.end());\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  int n = s.size();\n  for (int\
    \ i = 0; i < n; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      s[i] = 'A'\
    \ + (s[i] - 'a');\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      s[i] =\
    \ 'a' + (s[i] - 'A');\n    }\n  }\n  if (s.find_first_of(\"a-zA-Z\") == std::string::npos)\
    \ {\n    return std::string(s.rbegin(), s.rend());\n  }\n  return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpdhe3erdb: /tmp/tmpdhe3erdb.cpp:35: int main(): Assertion `candidate((\"\
    #ccc\")) == (\"#CCC\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.empty()) return \"\"\
    ;\n    for (int i = 0; i < s.size(); i++) {\n        s[i] = std::tolower(s[i]);\n\
    \    }\n    if (s.find_first_of(\"abcdefghijklmnopqrstuvwxyz\") == std::string::npos)\
    \ {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n   \
    \ for (int i = 0; i < s.size(); i++) {\n        if (s[i] == std::tolower(s[i]))\
    \ {\n            s[i] = std::toupper(s[i]);\n        } else {\n            s[i]\
    \ = std::tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmptgehoefo: /tmp/tmptgehoefo.cpp:32: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result = \"\";\n\
    \  for (char c : s) {\n    if (c >= 'a' && c <= 'z') {\n      result += toupper(c);\n\
    \    } else if (c >= 'A' && c <= 'Z') {\n      result += tolower(c);\n    } else\
    \ {\n      result += c;\n    }\n  }\n  if (std::all_of(result.begin(), result.end(),\
    \ isdigit)) {\n    std::reverse(result.begin(), result.end());\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmppl_ekk0n: /tmp/tmppl_ekk0n.cpp:35: int main(): Assertion `candidate((\"\
    #6@2\")) == (\"2@6#\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int i=0;\n    int n=s.length();\n\
    \    for(int i=0;i<n;i++)\n    {\n        if(s[i]>='a'&&s[i]<='z')\n        {\n\
    \            s[i]-=32;\n        }\n        else if(s[i]>='A'&&s[i]<='Z')\n   \
    \     {\n            s[i]+=32;\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpcv4flt4t: /tmp/tmpcv4flt4t.cpp:31: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (islower(s[i])) {\n\t\t\ts[i] = toupper(s[i]);\n\t\t}\n\t\telse\
    \ if (isupper(s[i])) {\n\t\t\ts[i] = tolower(s[i]);\n\t\t}\n\t}\n\treturn s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpmwhcu8yj: /tmp/tmpmwhcu8yj.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::stringstream ss;\n  \
    \  std::string result = \"\";\n    if(s.length() == 0) return result;\n    for(int\
    \ i = 0; i < s.length(); i++){\n        if(isalpha(s[i])){\n            if(isupper(s[i]))\
    \ ss << char(tolower(s[i]));\n            else ss << char(toupper(s[i]));\n  \
    \      }\n        else ss << s[i];\n    }\n    result = ss.str();\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp0d5_7gmp: /tmp/tmp0d5_7gmp.cpp:29: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string temp = \"\";\n\
    \    bool has_letters = false;\n    for (int i = 0; i < s.length(); i++) {\n \
    \       if (isalpha(s[i])) {\n            has_letters = true;\n            if\
    \ (isupper(s[i]))\n                temp += tolower(s[i]);\n            else if\
    \ (islower(s[i]))\n                temp += toupper(s[i]);\n        }\n       \
    \ else {\n            temp += s[i];\n        }\n    }\n    if (has_letters)\n\
    \        return temp;\n    std::reverse(temp.begin(), temp.end());\n    return\
    \ temp;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.length() == 0)\n    \
    \    return s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(islower(s[i]))\n                s[i] = toupper(s[i]);\n  \
    \          else\n                s[i] = tolower(s[i]);\n        }\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmph20ws1p9: /tmp/tmph20ws1p9.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    bool flag = false;\n    for(auto\
    \ i:s) {\n        if((i>='a' && i<='z') || (i>='A' && i<='Z')) {\n           \
    \ flag = true;\n            break;\n        }\n    }\n    if(flag) {\n       \
    \ for(int i=0;i<s.length();i++) {\n            if(s[i]>='a' && s[i]<='z') {\n\
    \                s[i] = s[i] - 32;\n            }\n            else if(s[i]>='A'\
    \ && s[i]<='Z') {\n                s[i] = s[i] + 32;\n            }\n        }\n\
    \    }\n    else {\n        reverse(s.begin(),s.end());\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (char const& c : s) {\n        if (isalpha(c)) {\n            result += (islower(c)\
    \ ? toupper(c) : tolower(c));\n        } else {\n            result += c;\n  \
    \      }\n    }\n    if (result.empty()) {\n        std::reverse(s.begin(), s.end());\n\
    \        return s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpmmrwpcqt: /tmp/tmpmmrwpcqt.cpp:30: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int count = 0;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            count++;\n\
    \            if(isupper(s[i]))\n                s[i] = tolower(s[i]);\n      \
    \      else\n                s[i] = toupper(s[i]);\n        }\n    }\n    if(count\
    \ == 0)\n        reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.empty()) return s;\n\
    \    std::string result;\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n\
    \    bool toUpper = std::isalpha(s[0]);\n    for (char ch : s) {\n        result\
    \ += (toUpper) ? toupper(ch) : ch;\n        toUpper = std::isalpha(ch);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpzcs3xyeo: /tmp/tmpzcs3xyeo.cpp:25: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tfor (int i = 0; i < s.size();\
    \ i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\ts[i] -= 32;\n\t\t}\n\t\t\
    else if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\ts[i] += 32;\n\t\t}\n\t}\n\tstd::reverse(s.begin(),\
    \ s.end());\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmp9cfhet77: /tmp/tmp9cfhet77.cpp:26: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if(s == \"\") return \"\";\n\
    \  std::string ans = \"\";\n  int len = s.length();\n  bool is_letter = false;\n\
    \  for(int i = 0; i < len; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n    \
    \  is_letter = true;\n      ans += (char)(s[i] - 32);\n    } else if(s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      is_letter = true;\n      ans += (char)(s[i] + 32);\n\
    \    } else {\n      ans += s[i];\n    }\n  }\n  if(!is_letter) {\n    for(int\
    \ i = len - 1; i >= 0; i--) {\n      ans += s[i];\n    }\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpb2heba2d: /tmp/tmpb2heba2d.cpp:38: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    //empty string\n    if(s.length()\
    \ == 0)\n        return s;\n    std::string str;\n    //As in the problem statement\
    \ , if it is a letter change the case and if not keep it as it is.\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        //check if the ith character is\
    \ a letter\n        if(isalpha(s[i]))\n        {\n            //if it is a letter\
    \ change the case, if lower make it upper and if upper make it lower\n       \
    \     if(islower(s[i]))\n                str += toupper(s[i]);\n            else\n\
    \                str += tolower(s[i]);\n        }\n        else\n            str\
    \ += s[i];\n    }\n    //reverse the string\n    std::reverse(str.begin(), str.end());\n\
    \    return str;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpjb8lcukj: /tmp/tmpjb8lcukj.cpp:38: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::string r;\n\tfor (int i\
    \ = 0; i < s.size(); i++) {\n\t\tif (s[i] >= 'a' && s[i] <= 'z') {\n\t\t\tr +=\
    \ (char)(s[i] - 32);\n\t\t}\n\t\telse if (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\t\
    r += (char)(s[i] + 32);\n\t\t}\n\t\telse r += s[i];\n\t}\n\treturn r;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpkcewesc5: /tmp/tmpkcewesc5.cpp:28: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(islower(s[i])) s[i] = toupper(s[i]);\n        else if(isupper(s[i]))\
    \ s[i] = tolower(s[i]);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmp2elvhn7a: /tmp/tmp2elvhn7a.cpp:22: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (char c : s) {\n        if (isalpha(c))\n            result += (char)tolower(c);\n\
    \        else \n            result += c;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpjopc_x2v: /tmp/tmpjopc_x2v.cpp:24: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string result = \"\";\n\
    \  std::string upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  std::string lower =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n  for (int i = 0; i < s.length(); i++) {\n\
    \    if (std::find(upper.begin(), upper.end(), s[i]) != upper.end()) {\n     \
    \ result += static_cast<char>(tolower(s[i]));\n    } else if (std::find(lower.begin(),\
    \ lower.end(), s[i]) != lower.end()) {\n      result += static_cast<char>(toupper(s[i]));\n\
    \    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpw1t8pkq5: /tmp/tmpw1t8pkq5.cpp:30: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tstd::stringstream res;\n\tfor\
    \ (auto c : s) {\n\t\tif (std::isalpha(c)) {\n\t\t\tif (std::islower(c)) {\n\t\
    \t\t\tres << (char)std::toupper(c);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres << (char)std::tolower(c);\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\tres << c;\n\t\t}\n\t}\n\treturn res.str();\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpz47fjvmi: /tmp/tmpz47fjvmi.cpp:32: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    bool t = false;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(!((s[i] >= '0' && s[i] <= '9') || (s[i]\
    \ >= 'A' && s[i] <= 'Z') || (s[i] >= 'a' && s[i] <= 'z'))) {\n            continue;\n\
    \        }\n        t = true;\n        if(s[i] >= 'A' && s[i] <= 'Z') {\n    \
    \        s[i] += 32;\n        } else if(s[i] >= 'a' && s[i] <= 'z') {\n      \
    \      s[i] -= 32;\n        }\n    }\n    if(!t) {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: "tmpyn9lflmc: /tmp/tmpyn9lflmc.cpp:33: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tif (s.empty()) {\n\t\treturn\
    \ std::string{};\n\t}\n\tfor (size_t i = 0; i < s.size(); ++i) {\n\t\tif (std::isalpha(s[i]))\
    \ {\n\t\t\ts[i] = std::isupper(s[i]) ? std::tolower(s[i]) : std::toupper(s[i]);\n\
    \t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpd3oiwu11: /tmp/tmpd3oiwu11.cpp:26: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string rev = \"\";\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            s[i] = toupper(s[i]);\n        } else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            s[i] = tolower(s[i]);\n        }\n    }\n    if\
    \ (!std::any_of(s.begin(), s.end(), ::isalpha)) {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string s2;\n  int len =\
    \ s.length();\n  // If the string contains no letters, reverse the string.\n \
    \ if (s.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) == std::string::npos) {\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  // if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n  // otherwise keep it as it is.\n  for (int i = 0; i < len; i++) {\n    if\
    \ (s[i] >= 'a' && s[i] <= 'z') {\n      s2 += toupper(s[i]);\n    } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      s2 += tolower(s[i]);\n    } else {\n      s2\
    \ += s[i];\n    }\n  }\n  return s2;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string str = \"\";\n\
    \    if (s.size() == 0) return s;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] >= 'a' && s[i] <= 'z') {\n            str += (char)(s[i] - 32);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            str += (char)(s[i]\
    \ + 32);\n        } else {\n            str += s[i];\n        }\n    }\n    return\
    \ str;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmphk4mp3ze: /tmp/tmphk4mp3ze.cpp:29: int main(): Assertion `candidate((\"\
    1234\")) == (\"4321\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string s2;\n    for (char\
    \ &c : s) {\n        if (std::isalpha(c)) {\n            if (c < 97) c += 32;\n\
    \            else c -= 32;\n        }\n        s2 += c;\n    }\n    if (s2 ==\
    \ s) {\n        std::reverse(s2.begin(), s2.end());\n    }\n    return s2;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  stdout: ''
  stderr: "tmpra57k6op: /tmp/tmpra57k6op.cpp:28: int main(): Assertion `candidate((\"\
    AsDf\")) == (\"aSdF\")' failed.\n"
  exit_code: -6
  status: Exception
