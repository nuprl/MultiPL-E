name: HumanEval_14_all_prefixes
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> output;\n  for (int x = 1; x <= string.size();\
    \ x++) {\n    output.push_back(string.substr(0, x));\n  }\n  return output;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // Define a vector to store the prefixes\n    std::vector<std::string>\
    \ prefixes;\n    // Go through each character in the string\n    for (int i =\
    \ 0; i < string.length(); i++) {\n        // Get the substring from 0 to the current\
    \ character, and append it to the vector\n        prefixes.push_back(string.substr(0,\
    \ i + 1));\n    }\n    // Return the list of prefixes\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  int len = string.length();\n  for\
    \ (int i = 0; i < len; i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> results;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        results.push_back(string.substr(0, i));\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> out;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        out.push_back(string.substr(0, i));\n    }\n    return out;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    if (string.empty()) {\n        return {};\n    }\n\n    std::vector<std::string>\
    \ prefixes;\n    std::string current_prefix;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        current_prefix += string[i];\n        prefixes.push_back(current_prefix);\n\
    \    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> suffix_list;\n    suffix_list.reserve(string.size());\n\
    \    for (int i = 0; i < string.size(); i++) {\n        suffix_list.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return suffix_list;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> results;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    results.push_back(string.substr(0, i));\n  }\n  return results;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (unsigned i = 0; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    assert(!string.empty());\n    std::vector<std::string> prefixes;\n  \
    \  std::string prefix;\n    for (char c : string) {\n        prefix += c;\n  \
    \      prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpwy2l8ow0: /tmp/tmpwy2l8ow0.cpp:7: std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string): Assertion `!string.empty()' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes(string.size());\n    for (size_t i\
    \ = 0; i < string.size(); i++) {\n        prefixes[i] = string.substr(0, i + 1);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int length = 1; length <=\
    \ string.length(); length++) {\n        prefixes.push_back(string.substr(0, length));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  for (int length = 1; length <= string.length();\
    \ length++) {\n    result.push_back(string.substr(0, length));\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> answer;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        answer.push_back(string.substr(0, i));\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  // YOUR CODE HERE\n  std::vector<std::string> ans;\n  int length = string.length();\n\
    \  for(int i = 0; i < length; i++){\n    std::string temp = string.substr(0, i+1);\n\
    \    ans.push_back(temp);\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    int n = string.length();\n    std::string\
    \ current_substring = \"\";\n    for (int i = 0; i < n; i++) {\n        current_substring\
    \ += string[i];\n        result.push_back(current_substring);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    std::string sofar;\n    for (int\
    \ i = 0; i < string.size(); i++) {\n        sofar += string[i];\n        result.push_back(sofar);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (size_t i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    result.push_back(\"\");\n    for\
    \ (auto &letter : string) {\n        result.push_back(result.back() + letter);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpjcu43qvk: /tmp/tmpjcu43qvk.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    int sz = string.size();\n    for\
    \ (int i = 0; i < sz; i++) {\n        result.push_back(string.substr(0, i + 1));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> res;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        res.push_back(string.substr(0, i));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    int string_length = string.length();\n\
    \    for (int i = 1; i <= string_length; i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int strLen = string.length();\n    std::vector<std::string> ans;\n  \
    \  for(int i = 0; i < strLen; i++) {\n        ans.push_back(string.substr(0, i+1));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  int i = 1;\n  while (i <= string.length())\
    \ {\n    prefixes.push_back(string.substr(0, i));\n    i += 1;\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (size_t i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> result;\n\tfor (int i = 1; i <= string.size();\
    \ i++) {\n\t\tresult.push_back(string.substr(0, i));\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> all_prefixes;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    all_prefixes.push_back(string.substr(0, i + 1));\n  }\n  return\
    \ all_prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  int n = string.size();\n  std::vector<std::string> res;\n  for (int i =\
    \ 0; i < n; i++) {\n    res.push_back(string.substr(0, i + 1));\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> out;\n  for (int prefix_size = 1; prefix_size\
    \ <= string.size(); prefix_size++) {\n    out.push_back(string.substr(0, prefix_size));\n\
    \  }\n  return out;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string>prefixes;\n  for (int i = 0; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> results;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        results.push_back(string.substr(0, i));\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(\"\");\n \
    \   for (auto i : string) {\n        for (int j = prefixes.size() - 1; j >= 0;\
    \ j--) {\n            prefixes.push_back(prefixes[j] + i);\n        }\n    }\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_q30ekyl: /tmp/tmp_q30ekyl.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (size_t i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 1; i <= string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefs;\n    for (size_t i = 1; i <= string.size();\
    \ i++) {\n        prefs.push_back(string.substr(0, i));\n    }\n    return prefs;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> prefixes;\n\tfor (size_t length = 1; length <=\
    \ string.length(); length++) {\n\t\tprefixes.push_back(string.substr(0, length));\n\
    \t}\n\treturn prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (size_t i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> prefixes;\n\tfor (int len = 1; len <= string.length();\
    \ len++) {\n\t\tprefixes.push_back(string.substr(0, len));\n\t}\n\treturn prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    // YOUR CODE HERE\n    int n =\
    \ string.length();\n    for(int i=0;i<n;i++){\n        result.push_back(string.substr(0,i+1));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> ans;\n  for (int i = 1; i <= string.size(); i++)\
    \ {\n    ans.push_back(string.substr(0, i));\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> ret;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        ret.push_back(string.substr(0, i));\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  for (int size = 1; size <= string.size();\
    \ size++) {\n    result.push_back(string.substr(0, size));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (size_t i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> retval;\n  std::string prefix = \"\";\n  for (char\
    \ c : string) {\n    prefix += c;\n    retval.push_back(prefix);\n  }\n  return\
    \ retval;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (unsigned int i = 1; i <= string.length();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> prefixes;\n\tfor (int i = 1; i <= string.length();\
    \ i++) {\n\t\tprefixes.push_back(string.substr(0, i));\n\t}\n\treturn prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    // To calculate the size of resulting\
    \ vector divide the string length by 2 and add 1\n    int len = string.length()/2\
    \ + 1;\n    for (int idx = 0; idx < len; idx++) {\n        // Push the string\
    \ to the result vector\n        result.push_back(string.substr(0, idx+1));\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpgfjnwovr: /tmp/tmpgfjnwovr.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> res;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        res.push_back(string.substr(0, i));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int length = 1; length <=\
    \ string.length(); length++) {\n        prefixes.push_back(string.substr(0, length));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int len = string.length();\n    std::vector<std::string> result;\n  \
    \  for (int i = 0; i < len; i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  assert(!string.empty());\n  std::vector<std::string> result;\n  for (size_t\
    \ i = 1; i <= string.size(); ++i) {\n    result.push_back(string.substr(0, i));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpd7cmp75a: /tmp/tmpd7cmp75a.cpp:7: std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string): Assertion `!string.empty()' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> output;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    output.push_back(string.substr(0, i));\n  }\n  return output;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    assert(string.size() > 0);\n    std::vector<std::string> prefixes;\n\
    \    for (int i = 1; i <= string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpvxrj0p_c: /tmp/tmpvxrj0p_c.cpp:7: std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string): Assertion `string.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int n = 1; n <= string.size();\
    \ n++) {\n        result.push_back(string.substr(0, n));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int index = 0; index < string.size();\
    \ index++) {\n        result.push_back(string.substr(0, index + 1));\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> to_return;\n    int substr_len = 1;\n    while\
    \ (substr_len <= string.length()) {\n        to_return.push_back(string.substr(0,\
    \ substr_len));\n        substr_len++;\n    }\n    return to_return;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  // TODO\n  std::vector<std::string> all_pre_vec;\n  int l = string.length();\n\
    \  if(l==0)\n    return all_pre_vec;\n  for(int i=0;i<l;i++)\n  {\n    std::string\
    \ pre_string;\n    for(int j=0;j<=i;j++)\n    {\n      pre_string.push_back(string[j]);\n\
    \    }\n    all_pre_vec.push_back(pre_string);\n  }\n  return all_pre_vec;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> results;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        results.push_back(string.substr(0, i));\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // Don't worry about these:\n    std::vector<std::string> prefixes;\n\
    \    size_t length = string.length();\n    for (size_t i = 1; i <= length; i++)\
    \ {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> all_prefixes;\n    std::string word;\n    word\
    \ = word + string[0];\n    all_prefixes.push_back(word);\n    for (size_t i =\
    \ 1; i < string.size(); i++) {\n        word = word + string[i];\n        all_prefixes.push_back(word);\n\
    \    }\n    return all_prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmput7fhsxv: /tmp/tmput7fhsxv.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    result.push_back(string.substr(0, i));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    int n = string.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        result.push_back(string.substr(0, i + 1));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> strings;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        strings.push_back(string.substr(0, i));\n    }\n    return strings;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> res;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        res.push_back(string.substr(0, i));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (std::size_t i = 1; i <= string.size();\
    \ ++i) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix;\n    int\
    \ n = string.length();\n    for (int length = 1; length <= n; length++) {\n  \
    \      prefix = string.substr(0, length);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int n = string.size();\n    std::vector<std::string> res;\n    for (int\
    \ i = 0; i < n; i++) {\n        res.push_back(string.substr(0, i + 1));\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    result.push_back(string.substr(0, i));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> v;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        v.push_back(string.substr(0, i));\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  int l = string.length();\n  for (int\
    \ i = 0; i < l; i++) {\n    result.push_back(string.substr(0, i + 1));\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int n = string.size();\n    std::vector<std::string> result;\n    for\
    \ (int i = 0; i < n; i++) {\n        result.push_back(string.substr(0, i + 1));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> prefixes;\n\tstd::string prefix = \"\";\n\tstd::vector<char>chars(string.begin(),\
    \ string.end());\n\tfor (int i = 0; i < chars.size(); i++) {\n\t\tprefix += chars[i];\n\
    \t\tprefixes.push_back(prefix);\n\t}\n\treturn prefixes;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int n = 1; n <= string.size();\
    \ n++) {\n        prefixes.push_back(string.substr(0, n));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int index = 0; index < string.size();\
    \ index++) {\n    prefixes.push_back(string.substr(0, index + 1));\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t len = 1; len <= string.size();\
    \ len++) {\n    prefixes.push_back(string.substr(0, len));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> results;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        results.push_back(string.substr(0, i));\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  // START SOLUTION\n  std::vector<std::string> prefixes;\n  for (int i =\
    \ 1; i <= string.size(); i++) {\n    prefixes.push_back(string.substr(0, i));\n\
    \  }\n  return prefixes;\n  // END SOLUTION\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> res;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        res.push_back(string.substr(0, i));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> prefixes;\n\tfor (unsigned i = 0; i < string.size();\
    \ i++) {\n\t\tprefixes.push_back(string.substr(0, i + 1));\n\t}\n\treturn prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int string_length = string.length();\n    std::vector<std::string>prefixes;\n\
    \    for (int i = 1; i <= string_length; i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int len = string.length();\n    std::vector<std::string> ret;\n    for\
    \ (int i = 0; i < len; i++) {\n        ret.push_back(string.substr(0, i + 1));\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int strLen = string.length();\n    std::vector<std::string> result;\n\
    \    if (strLen == 0) {\n        return result;\n    }\n    std::string temp;\n\
    \    for (int i = 0; i < strLen; i++) {\n        temp += string[i];\n        result.push_back(temp);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  // your code here\n  std::vector<std::string> s;\n  int n = string.length();\n\
    \  for(int i = 0; i < n; i++)\n  {\n    s.push_back(string.substr(0, i+1));\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes = {};\n    for (unsigned long i = 0;\
    \ i < string.length(); i++) {\n        std::string prefix = string.substr(0, i\
    \ + 1);\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    // Your code here\n    std::vector<std::string> vec;\n    for(int i=0;i<string.length();i++){\n\
    \        vec.push_back(string.substr(0,i+1));\n    }\n    return vec;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    result.push_back(string.substr(0, i));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    if(string.size() == 0) return result;\n\
    \    for(int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i+1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  // loop through all prefixes of length\
    \ 1 to len(string)\n  for (int i = 1; i <= string.length(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  result.push_back(\"\");\n  for (int\
    \ length = 1; length <= string.length(); length++) {\n    result.push_back(string.substr(0,\
    \ length));\n  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmprrr7xqsz: /tmp/tmprrr7xqsz.cpp:16: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  int size = string.size();\n  for (int\
    \ i = 0; i < size; i++) {\n    std::string substring = string.substr(0, i + 1);\n\
    \    result.push_back(substring);\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> prefixes;\n\tfor (int i = 1; i <= string.length();\
    \ i++) {\n\t\tprefixes.push_back(string.substr(0, i));\n\t}\n\treturn prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (size_t x = 1; x <= string.size();\
    \ x++) {\n        prefixes.push_back(string.substr(0, x));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> prefixes;\n\tstd::string prefix = \"\";\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tprefix += string[i];\n\t\tprefixes.push_back(prefix);\n\
    \t}\n\treturn prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> result;\n\tfor (unsigned int i = 0; i < string.length();\
    \ i++) {\n\t\tresult.push_back(string.substr(0, i + 1));\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int length = 1; length <=\
    \ string.length(); length++) {\n        result.push_back(string.substr(0, length));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result = {};\n  result.push_back(string);\n  while(string.length()\
    \ > 1) {\n    string = string.substr(0, string.length() - 1);\n    result.push_back(string);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp6p2oghg6: /tmp/tmp6p2oghg6.cpp:17: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  int N = string.size();\n  std::vector<std::string> prefixes;\n  for (int\
    \ i = 0; i < N; i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (size_t i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> output;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        output.push_back(string.substr(0, i));\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    std::string prefix;\n    result.push_back(string);\n\
    \    while (string.length() > 0) {\n        prefix = string.substr(0, string.length()\
    \ - 1);\n        result.push_back(prefix);\n        string = prefix;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmpzh5s1lkj: /tmp/tmpzh5s1lkj.cpp:19: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (size_t i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> strs;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        strs.push_back(string.substr(0, i));\n    }\n    return strs;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    result.push_back(string.substr(0, i));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 1; i <= string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (size_t i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    if (string.size() == 0) {\n        return {};\n    }\n    std::vector<std::string>\
    \ prefixes(string.size());\n    for (int i = 0; i < string.size(); i++) {\n  \
    \      prefixes[i] = string.substr(0, i + 1);\n    }\n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    result.push_back(string.substr(0, i));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> prefixes;\n\tfor (int i = 1; i <= string.length();\
    \ i++) {\n\t\tprefixes.push_back(string.substr(0, i));\n\t}\n\treturn prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> ret;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        ret.push_back(string.substr(0, i));\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\t// assert(false);\n\t// Implement me!\n\tstd::vector<std::string> prefix;\n\
    \tprefix.push_back(\"\");\n\tfor(int i=0;i<string.length();i++){\n\t\tprefix.push_back(string.substr(0,i+1));\n\
    \t}\n\treturn prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp_6nbo7ao: /tmp/tmp_6nbo7ao.cpp:18: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        prefix += string[i];\n    \
    \    prefixes.push_back(prefix);\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> list_of_prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        list_of_prefixes.push_back(string.substr(0, i + 1));\n    }\n\
    \    return list_of_prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> results;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        results.push_back(string.substr(0, i));\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> res;\n    for (size_t i = 1; i <= string.size();\
    \ i++) {\n        res.push_back(string.substr(0, i));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\t//check if there is a string passed\n\tassert(string.length() > 0);\n\t\
    std::vector<std::string> prefix_list;\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tstd::string prefix = string.substr(0, i + 1);\n\t\tprefix_list.push_back(prefix);\n\
    \t}\n\treturn prefix_list;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp7yuygri3: /tmp/tmp7yuygri3.cpp:8: std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string): Assertion `string.length() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    result.push_back(string.substr(0, i));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n\
    \    std::string::iterator it;\n    for (it = string.begin(); it != string.end();\
    \ it++) {\n        prefix += *it;\n        prefixes.push_back(prefix);\n    }\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    result.push_back(\"\");\n    for\
    \ (auto character : string) {\n        auto size = result.size();\n        for\
    \ (int index = 0; index < size; index++) {\n            auto word = result[index];\n\
    \            word += character;\n            result.push_back(word);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp42873gmh: /tmp/tmp42873gmh.cpp:21: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> list;\n\tint size = string.size();\n\tfor (int\
    \ i = 0; i < size; i++) {\n\t\tlist.push_back(string.substr(0, i + 1));\n\t}\n\
    \treturn list;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (std::size_t i = 1; i <= string.size();\
    \ ++i) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> results;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    results.push_back(string.substr(0, i));\n  }\n  return results;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> all_prefixes;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        all_prefixes.push_back(string.substr(0, i + 1));\n    }\n  \
    \  return all_prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tint n = string.length();\n\tstd::vector<std::string> prefixes;\n\tfor (int\
    \ i = 0; i < n; i++) {\n\t\tprefixes.push_back(string.substr(0, i + 1));\n\t}\n\
    \treturn prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n\tstd::vector<std::string> v;\n\tfor (int i = 1; i <= string.length(); i++)\
    \ {\n\t\tv.push_back(string.substr(0, i));\n\t}\n\treturn v;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    int length = string.length();\n\
    \    for (int i = 0; i < length; i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int prefix_length = 1; prefix_length\
    \ <= string.length(); prefix_length++) {\n        result.push_back(string.substr(0,\
    \ prefix_length));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> list;\n  for (int i = 1; i <= string.length();\
    \ i++) {\n    list.push_back(string.substr(0, i));\n  }\n  return list;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (size_t i = 1; i <= string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes(string.size());\n    std::transform(string.begin(),\
    \ string.end(), prefixes.begin(), [&string](auto c) {\n        return string.substr(0,\
    \ &c - &string[0] + 1);\n    });\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: "tmp31h_lbbw: /tmp/tmp31h_lbbw.cpp:16: int main(): Assertion `candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> vector;\n  for (int i = 1; i <= string.length();\
    \ i++) {\n    vector.push_back(string.substr(0, i));\n  }\n  return vector;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes = {};\n    for (int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int prefix_length = 1; prefix_length\
    \ <= string.length(); prefix_length++) {\n    prefixes.push_back(string.substr(0,\
    \ prefix_length));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> prefixes;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> ret;\n  for (int i = 1; i <= string.size(); i++)\
    \ {\n    ret.push_back(string.substr(0, i));\n  }\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> p;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        p.push_back(string.substr(0, i));\n    }\n    return p;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  int n = string.size();\n  for (int\
    \ i = 0; i < n; i++) {\n    result.push_back(string.substr(0, i + 1));\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"W\", \"\
    WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  int n = string.length();\n  for (int\
    \ i = 0; i < n; i++) {\n    prefixes.push_back(string.substr(0, i + 1));\n  }\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> ret;\n    for (std::size_t i = 1; i <= string.size();\
    \ ++i) {\n        ret.push_back(string.substr(0, i));\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  int length = string.length();\n  int j = 0;\n  std::vector<std::string>\
    \ result;\n  for (int i = 1; i <= length; i++) {\n    // Add new prefix to the\
    \ list\n    result.push_back(string.substr(j, i));\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> result;\n  for (std::size_t index = 0; index <\
    \ string.size(); index++) {\n    result.push_back(string.substr(0, index + 1));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> ret;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        ret.push_back(string.substr(0, i));\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    int len = string.length();\n    std::vector<std::string> result;\n  \
    \  std::string temp = \"\";\n    for (int i = 0; i < len; i++) {\n        temp\
    \ += string[i];\n        result.push_back(temp);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> out;\n  for (int i = 1; i <= string.size(); i++)\
    \ {\n    out.push_back(string.substr(0, i));\n  }\n  return out;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"a\", \"as\"\
    , \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\"\
    )) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        result.push_back(string.substr(0, i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> r;\n    for (int i = 1; i <= string.size();\
    \ i++) {\n        r.push_back(string.substr(0, i));\n    }\n    return r;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result;\n    for (int length = 1; length <=\
    \ string.length(); length++) {\n        result.push_back(string.substr(0, length));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n  std::vector<std::string> prefixes;\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({\"\
    a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"})));\n    assert(candidate((\"\
    WWW\")) == (std::vector<std::string>({\"W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> ret;\n    std::string tmp = \"\";\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        tmp += string[i];\n        ret.push_back(tmp);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\n// >>> all_prefixes('abc')\n//\
    \ ['a', 'ab', 'abc']\nstd::vector<std::string> all_prefixes(std::string string)\
    \ {\n    std::vector<std::string> result = {};\n    if (string.size() == 0) return\
    \ result;\n    for (int i = 0; i < string.size(); i++) {\n        result.push_back(string.substr(0,\
    \ i + 1));\n    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({\"\
    W\", \"WW\", \"WWW\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
