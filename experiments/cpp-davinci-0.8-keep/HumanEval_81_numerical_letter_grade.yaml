name: HumanEval_81_numerical_letter_grade
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the\
  \ semester and the teacher has to give the grades\n// to students. The teacher has\
  \ been making her own algorithm for grading.\n// The only problem is, she has lost\
  \ the code she used for grading.\n// She has given you a list of GPAs for some students\
  \ and you have to write \n// a function that can output a list of letter grades\
  \ using the following table:\n// GPA       |    Letter grade\n// 4.0           \
  \     A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0    \
  \            B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0\
  \                C+\n// > 1.7                C\n// > 1.3                C-\n// >\
  \ 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n\
  // 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==>\
  \ ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float>\
  \ grades) {\n"
tests: "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({4.0,\
  \ 3, 1.7, 2, 3.5}))) == (std::vector<std::string>({\"A+\", \"B\", \"C-\", \"C\"\
  , \"A-\"})));\n    assert(candidate((std::vector<float>({1.2}))) == (std::vector<std::string>({\"\
  D+\"})));\n    assert(candidate((std::vector<float>({0.5}))) == (std::vector<std::string>({\"\
  D-\"})));\n    assert(candidate((std::vector<float>({0.0}))) == (std::vector<std::string>({\"\
  E\"})));\n    assert(candidate((std::vector<float>({1.0, 0.3, 1.5, 2.8, 3.3})))\
  \ == (std::vector<std::string>({\"D\", \"D-\", \"C-\", \"B\", \"B+\"})));\n    assert(candidate((std::vector<float>({0.0,\
  \ 0.7}))) == (std::vector<std::string>({\"E\", \"D-\"})));\n}\n"
completions: []
stop_tokens:
- "\n}"
