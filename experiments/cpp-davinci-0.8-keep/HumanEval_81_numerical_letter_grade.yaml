name: HumanEval_81_numerical_letter_grade
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the\
  \ semester and the teacher has to give the grades\n// to students. The teacher has\
  \ been making her own algorithm for grading.\n// The only problem is, she has lost\
  \ the code she used for grading.\n// She has given you a list of GPAs for some students\
  \ and you have to write \n// a function that can output a list of letter grades\
  \ using the following table:\n// GPA       |    Letter grade\n// 4.0           \
  \     A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0    \
  \            B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0\
  \                C+\n// > 1.7                C\n// > 1.3                C-\n// >\
  \ 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n\
  // 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==>\
  \ ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float>\
  \ grades) {\n"
tests: "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({4.0,\
  \ 3, 1.7, 2, 3.5}))) == (std::vector<std::string>({\"A+\", \"B\", \"C-\", \"C\"\
  , \"A-\"})));\n    assert(candidate((std::vector<float>({1.2}))) == (std::vector<std::string>({\"\
  D+\"})));\n    assert(candidate((std::vector<float>({0.5}))) == (std::vector<std::string>({\"\
  D-\"})));\n    assert(candidate((std::vector<float>({0.0}))) == (std::vector<std::string>({\"\
  E\"})));\n    assert(candidate((std::vector<float>({1.0, 0.3, 1.5, 2.8, 3.3})))\
  \ == (std::vector<std::string>({\"D\", \"D-\", \"C-\", \"B\", \"B+\"})));\n    assert(candidate((std::vector<float>({0.0,\
  \ 0.7}))) == (std::vector<std::string>({\"E\", \"D-\"})));\n}\n"
completions: ["    std::vector<std::string> a = {\"A+\", \"A\", \"A-\", \"B+\", \"\
    B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n    std::vector<float>\
    \ b = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0};\n   \
    \ std::vector<std::string> c(grades.size());\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        for (int j = 0; j < 13; j++) {\n            if (grades[i] >=\
    \ b[j]) {\n                c[i] = a[j];\n                break;\n            }\n\
    \        }\n    }\n    return c;", "    std::vector<std::string> letters;\n  \
    \  for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n\
    \            letters.push_back(\"A+\");\n        } else if (grades[i] >= 3.7)\
    \ {\n            letters.push_back(\"A\");\n        } else if (grades[i] >= 3.3)\
    \ {\n            letters.push_back(\"A-\");\n        } else if (grades[i] >= 3.0)\
    \ {\n            letters.push_back(\"B+\");\n        } else if (grades[i] >= 2.7)\
    \ {\n            letters.push_back(\"B\");\n        } else if (grades[i] >= 2.3)\
    \ {\n            letters.push_back(\"B-\");\n        } else if (grades[i] >= 2.0)\
    \ {\n            letters.push_back(\"C+\");\n        } else if (grades[i] >= 1.7)\
    \ {\n            letters.push_back(\"C\");\n        } else if (grades[i] >= 1.3)\
    \ {\n            letters.push_back(\"C-\");\n        } else if (grades[i] >= 1.0)\
    \ {\n            letters.push_back(\"D+\");\n        } else if (grades[i] >= 0.7)\
    \ {\n            letters.push_back(\"D\");\n        } else if (grades[i] > 0.0)\
    \ {\n            letters.push_back(\"D-\");\n        } else {\n            letters.push_back(\"\
    E\");\n        }\n    }\n    return letters;", '    return {};', "    std::vector<std::string>\
    \ grade_letter;\n    for(int i = 0; i < grades.size(); i++){\n        if(grades[i]\
    \ >= 4.0){\n            grade_letter.push_back(\"A+\");\n        }\n        else\
    \ if(grades[i] >= 3.7){\n            grade_letter.push_back(\"A\");\n        }\n\
    \        else if(grades[i] >= 3.3){\n            grade_letter.push_back(\"A-\"\
    );\n        }\n        else if(grades[i] >= 3.0){\n            grade_letter.push_back(\"\
    B+\");\n        }\n        else if(grades[i] >= 2.7){\n            grade_letter.push_back(\"\
    B\");\n        }\n        else if(grades[i] >= 2.3){\n            grade_letter.push_back(\"\
    B-\");\n        }\n        else if(grades[i] >= 2.0){\n            grade_letter.push_back(\"\
    C+\");\n        }\n        else if(grades[i] >= 1.7){\n            grade_letter.push_back(\"\
    C\");\n        }\n        else if(grades[i] >= 1.3){\n            grade_letter.push_back(\"\
    C-\");\n        }\n        else if(grades[i] >= 1.0){\n            grade_letter.push_back(\"\
    D+\");\n        }\n        else if(grades[i] >= 0.7){\n            grade_letter.push_back(\"\
    D\");\n        }\n        else if(grades[i] >= 0.0){\n            grade_letter.push_back(\"\
    D-\");\n        }\n        else{\n            grade_letter.push_back(\"E\");\n\
    \        }\n    }\n    return grade_letter;", "    std::vector<std::string> letterGrades;\n\
    \    for (int i = 0; i < grades.size(); i++) {\n        float grade = grades[i];\n\
    \        if (grade == 4.0) {\n            letterGrades.push_back(\"A+\");\n  \
    \      } else if (grade > 3.7) {\n            letterGrades.push_back(\"A\");\n\
    \        } else if (grade > 3.3) {\n            letterGrades.push_back(\"A-\"\
    );\n        } else if (grade > 3.0) {\n            letterGrades.push_back(\"B+\"\
    );\n        } else if (grade > 2.7) {\n            letterGrades.push_back(\"B\"\
    );\n        } else if (grade > 2.3) {\n            letterGrades.push_back(\"B-\"\
    );\n        } else if (grade > 2.0) {\n            letterGrades.push_back(\"C+\"\
    );\n        } else if (grade > 1.7) {\n            letterGrades.push_back(\"C\"\
    );\n        } else if (grade > 1.3) {\n            letterGrades.push_back(\"C-\"\
    );\n        } else if (grade > 1.0) {\n            letterGrades.push_back(\"D+\"\
    );\n        } else if (grade > 0.7) {\n            letterGrades.push_back(\"D\"\
    );\n        } else if (grade > 0.0) {\n            letterGrades.push_back(\"D-\"\
    );\n        } else {\n            letterGrades.push_back(\"E\");\n        }\n\
    \    }\n    return letterGrades;", "  std::vector<std::string> lgrade;\n  for(int\
    \ i=0;i<grades.size();i++){\n    if(grades[i]==4.0) lgrade.push_back(\"A+\");\n\
    \    else if(grades[i]>3.7) lgrade.push_back(\"A\");\n    else if(grades[i]>3.3)\
    \ lgrade.push_back(\"A-\");\n    else if(grades[i]>3.0) lgrade.push_back(\"B+\"\
    );\n    else if(grades[i]>2.7) lgrade.push_back(\"B\");\n    else if(grades[i]>2.3)\
    \ lgrade.push_back(\"B-\");\n    else if(grades[i]>2.0) lgrade.push_back(\"C+\"\
    );\n    else if(grades[i]>1.7) lgrade.push_back(\"C\");\n    else if(grades[i]>1.3)\
    \ lgrade.push_back(\"C-\");\n    else if(grades[i]>1.0) lgrade.push_back(\"D+\"\
    );\n    else if(grades[i]>0.7) lgrade.push_back(\"D\");\n    else if(grades[i]>0.0)\
    \ lgrade.push_back(\"D-\");\n    else lgrade.push_back(\"E\");\n  }\n  return\
    \ lgrade;", "  std::vector<std::string> res(grades.size());\n  for (int i = 0;\
    \ i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      res[i] = \"A+\"\
    ;\n    } else if (grades[i] >= 3.7) {\n      res[i] = \"A\";\n    } else if (grades[i]\
    \ >= 3.3) {\n      res[i] = \"A-\";\n    } else if (grades[i] >= 3.0) {\n    \
    \  res[i] = \"B+\";\n    } else if (grades[i] >= 2.7) {\n      res[i] = \"B\"\
    ;\n    } else if (grades[i] >= 2.3) {\n      res[i] = \"B-\";\n    } else if (grades[i]\
    \ >= 2.0) {\n      res[i] = \"C+\";\n    } else if (grades[i] >= 1.7) {\n    \
    \  res[i] = \"C\";\n    } else if (grades[i] >= 1.3) {\n      res[i] = \"C-\"\
    ;\n    } else if (grades[i] >= 1.0) {\n      res[i] = \"D+\";\n    } else if (grades[i]\
    \ >= 0.7) {\n      res[i] = \"D\";\n    } else if (grades[i] >= 0.0) {\n     \
    \ res[i] = \"D-\";\n    } else {\n      res[i] = \"E\";\n    }\n  }\n  return\
    \ res;", "\tstd::vector<std::string> letter_grades;\n\tfor (int i = 0; i < grades.size();\
    \ i++) {\n\t\tif (grades[i] >= 4.0)\n\t\t\tletter_grades.push_back(\"A+\");\n\t\
    \telse if (grades[i] >= 3.7)\n\t\t\tletter_grades.push_back(\"A\");\n\t\telse\
    \ if (grades[i] >= 3.3)\n\t\t\tletter_grades.push_back(\"A-\");\n\t\telse if (grades[i]\
    \ >= 3.0)\n\t\t\tletter_grades.push_back(\"B+\");\n\t\telse if (grades[i] >= 2.7)\n\
    \t\t\tletter_grades.push_back(\"B\");\n\t\telse if (grades[i] >= 2.3)\n\t\t\t\
    letter_grades.push_back(\"B-\");\n\t\telse if (grades[i] >= 2.0)\n\t\t\tletter_grades.push_back(\"\
    C+\");\n\t\telse if (grades[i] >= 1.7)\n\t\t\tletter_grades.push_back(\"C\");\n\
    \t\telse if (grades[i] >= 1.3)\n\t\t\tletter_grades.push_back(\"C-\");\n\t\telse\
    \ if (grades[i] >= 1.0)\n\t\t\tletter_grades.push_back(\"D+\");\n\t\telse if (grades[i]\
    \ >= 0.7)\n\t\t\tletter_grades.push_back(\"D\");\n\t\telse if (grades[i] >= 0.0)\n\
    \t\t\tletter_grades.push_back(\"D-\");\n\t\telse\n\t\t\tletter_grades.push_back(\"\
    E\");\n\t}\n\treturn letter_grades;", "    std::vector<std::string> results;\n\
    \    for (float grade : grades) {\n        std::string letter;\n        if (grade\
    \ == 4.0) {\n            letter = \"A+\";\n        } else if (grade > 3.7) {\n\
    \            letter = \"A\";\n        } else if (grade > 3.3) {\n            letter\
    \ = \"A-\";\n        } else if (grade > 3.0) {\n            letter = \"B+\";\n\
    \        } else if (grade > 2.7) {\n            letter = \"B\";\n        } else\
    \ if (grade > 2.3) {\n            letter = \"B-\";\n        } else if (grade >\
    \ 2.0) {\n            letter = \"C+\";\n        } else if (grade > 1.7) {\n  \
    \          letter = \"C\";\n        } else if (grade > 1.3) {\n            letter\
    \ = \"C-\";\n        } else if (grade > 1.0) {\n            letter = \"D+\";\n\
    \        } else if (grade > 0.7) {\n            letter = \"D\";\n        } else\
    \ if (grade > 0.0) {\n            letter = \"D-\";\n        } else {\n       \
    \     letter = \"E\";\n        }\n        results.push_back(letter);\n    }\n\
    \    return results;", "    std::vector<std::string> result;\n    for (int i =\
    \ 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"\
    A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"\
    A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"\
    A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"\
    B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"\
    B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"\
    C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"\
    D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"\
    D\");\n        } else if (grades[i] > 0.0) {\n            result.push_back(\"\
    D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n  \
    \  }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ it = grades.begin(); it != grades.end(); ++it) {\n        if (*it == 4.0)\n\
    \            result.push_back(\"A+\");\n        else if (*it > 3.7)\n        \
    \    result.push_back(\"A\");\n        else if (*it > 3.3)\n            result.push_back(\"\
    A-\");\n        else if (*it > 3.0)\n            result.push_back(\"B+\");\n \
    \       else if (*it > 2.7)\n            result.push_back(\"B\");\n        else\
    \ if (*it > 2.3)\n            result.push_back(\"B-\");\n        else if (*it\
    \ > 2.0)\n            result.push_back(\"C+\");\n        else if (*it > 1.7)\n\
    \            result.push_back(\"C\");\n        else if (*it > 1.3)\n         \
    \   result.push_back(\"C-\");\n        else if (*it > 1.0)\n            result.push_back(\"\
    D+\");\n        else if (*it > 0.7)\n            result.push_back(\"D\");\n  \
    \      else if (*it > 0.0)\n            result.push_back(\"D-\");\n        else\n\
    \            result.push_back(\"E\");\n    }\n    return result;", "    // Your\
    \ code here\n    std::vector<std::string> result;\n    for(auto item : grades){\n\
    \        std::string grade = \"\";\n        if(item == 4.0){\n            grade\
    \ = \"A+\";\n        }else if(item > 3.7){\n            grade = \"A\";\n     \
    \   }else if(item > 3.3){\n            grade = \"A-\";\n        }else if(item\
    \ > 3.0){\n            grade = \"B+\";\n        }else if(item > 2.7){\n      \
    \      grade = \"B\";\n        }else if(item > 2.3){\n            grade = \"B-\"\
    ;\n        }else if(item > 2.0){\n            grade = \"C+\";\n        }else if(item\
    \ > 1.7){\n            grade = \"C\";\n        }else if(item > 1.3){\n       \
    \     grade = \"C-\";\n        }else if(item > 1.0){\n            grade = \"D+\"\
    ;\n        }else if(item > 0.7){\n            grade = \"D\";\n        }else if(item\
    \ > 0.0){\n            grade = \"D-\";\n        }else{\n            grade = \"\
    E\";\n        }\n        result.push_back(grade);\n    }\n    return result;",
  "\tstd::vector<std::string> output;\n\tfor (int i = 0; i < grades.size(); i++) {\n\
    \t\tfloat grade = grades[i];\n\t\tif (grade == 4.0) {\n\t\t\toutput.push_back(\"\
    A+\");\n\t\t}\n\t\telse if (grade > 3.7) {\n\t\t\toutput.push_back(\"A\");\n\t\
    \t}\n\t\telse if (grade > 3.3) {\n\t\t\toutput.push_back(\"A-\");\n\t\t}\n\t\t\
    else if (grade > 3.0) {\n\t\t\toutput.push_back(\"B+\");\n\t\t}\n\t\telse if (grade\
    \ > 2.7) {\n\t\t\toutput.push_back(\"B\");\n\t\t}\n\t\telse if (grade > 2.3) {\n\
    \t\t\toutput.push_back(\"B-\");\n\t\t}\n\t\telse if (grade > 2.0) {\n\t\t\toutput.push_back(\"\
    C+\");\n\t\t}\n\t\telse if (grade > 1.7) {\n\t\t\toutput.push_back(\"C\");\n\t\
    \t}\n\t\telse if (grade > 1.3) {\n\t\t\toutput.push_back(\"C-\");\n\t\t}\n\t\t\
    else if (grade > 1.0) {\n\t\t\toutput.push_back(\"D+\");\n\t\t}\n\t\telse if (grade\
    \ > 0.7) {\n\t\t\toutput.push_back(\"D\");\n\t\t}\n\t\telse if (grade > 0.0) {\n\
    \t\t\toutput.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\toutput.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn output;", "\t// your code here\n\tstd::vector<std::string>\
    \ ans;\n\tfor (auto i : grades) {\n\t\tif (i >= 4.0)\n\t\t\tans.push_back(\"A+\"\
    );\n\t\telse if (i >= 3.7)\n\t\t\tans.push_back(\"A\");\n\t\telse if (i >= 3.3)\n\
    \t\t\tans.push_back(\"A-\");\n\t\telse if (i >= 3.0)\n\t\t\tans.push_back(\"B+\"\
    );\n\t\telse if (i >= 2.7)\n\t\t\tans.push_back(\"B\");\n\t\telse if (i >= 2.3)\n\
    \t\t\tans.push_back(\"B-\");\n\t\telse if (i >= 2.0)\n\t\t\tans.push_back(\"C+\"\
    );\n\t\telse if (i >= 1.7)\n\t\t\tans.push_back(\"C\");\n\t\telse if (i >= 1.3)\n\
    \t\t\tans.push_back(\"C-\");\n\t\telse if (i >= 1.0)\n\t\t\tans.push_back(\"D+\"\
    );\n\t\telse if (i >= 0.7)\n\t\t\tans.push_back(\"D\");\n\t\telse if (i >= 0.0)\n\
    \t\t\tans.push_back(\"D-\");\n\t\telse if (i >= 0.0)\n\t\t\tans.push_back(\"E\"\
    );\n\t}\n\treturn ans;", "  std::vector<std::string> letters;\n  for (int i =\
    \ 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      letters.push_back(\"\
    A+\");\n    } else if (grades[i] >= 3.7) {\n      letters.push_back(\"A\");\n\
    \    } else if (grades[i] >= 3.3) {\n      letters.push_back(\"A-\");\n    } else\
    \ if (grades[i] >= 3.0) {\n      letters.push_back(\"B+\");\n    } else if (grades[i]\
    \ >= 2.7) {\n      letters.push_back(\"B\");\n    } else if (grades[i] >= 2.3)\
    \ {\n      letters.push_back(\"B-\");\n    } else if (grades[i] >= 2.0) {\n  \
    \    letters.push_back(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      letters.push_back(\"\
    C\");\n    } else if (grades[i] >= 1.3) {\n      letters.push_back(\"C-\");\n\
    \    } else if (grades[i] >= 1.0) {\n      letters.push_back(\"D+\");\n    } else\
    \ if (grades[i] >= 0.7) {\n      letters.push_back(\"D\");\n    } else if (grades[i]\
    \ >= 0.0) {\n      letters.push_back(\"D-\");\n    } else {\n      letters.push_back(\"\
    E\");\n    }\n  }\n  return letters;", "    std::vector<std::string> result;\n\
    \    for (auto grade : grades) {\n        std::string letter;\n        if (grade\
    \ == 4.0) {\n            letter = \"A+\";\n        } else if (grade >= 3.7) {\n\
    \            letter = \"A\";\n        } else if (grade >= 3.3) {\n           \
    \ letter = \"A-\";\n        } else if (grade >= 3.0) {\n            letter = \"\
    B+\";\n        } else if (grade >= 2.7) {\n            letter = \"B\";\n     \
    \   } else if (grade >= 2.3) {\n            letter = \"B-\";\n        } else if\
    \ (grade >= 2.0) {\n            letter = \"C+\";\n        } else if (grade >=\
    \ 1.7) {\n            letter = \"C\";\n        } else if (grade >= 1.3) {\n  \
    \          letter = \"C-\";\n        } else if (grade >= 1.0) {\n            letter\
    \ = \"D+\";\n        } else if (grade >= 0.7) {\n            letter = \"D\";\n\
    \        } else if (grade >= 0.0) {\n            letter = \"D-\";\n        } else\
    \ {\n            letter = \"E\";\n        }\n        result.push_back(letter);\n\
    \    }\n    return result;", "\tstd::vector<std::string> grades_str;\n\tfor (size_t\
    \ i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0)\n\t\t\tgrades_str.push_back(\"\
    A+\");\n\t\telse if (grades[i] >= 3.7)\n\t\t\tgrades_str.push_back(\"A\");\n\t\
    \telse if (grades[i] >= 3.3)\n\t\t\tgrades_str.push_back(\"A-\");\n\t\telse if\
    \ (grades[i] >= 3.0)\n\t\t\tgrades_str.push_back(\"B+\");\n\t\telse if (grades[i]\
    \ >= 2.7)\n\t\t\tgrades_str.push_back(\"B\");\n\t\telse if (grades[i] >= 2.3)\n\
    \t\t\tgrades_str.push_back(\"B-\");\n\t\telse if (grades[i] >= 2.0)\n\t\t\tgrades_str.push_back(\"\
    C+\");\n\t\telse if (grades[i] >= 1.7)\n\t\t\tgrades_str.push_back(\"C\");\n\t\
    \telse if (grades[i] >= 1.3)\n\t\t\tgrades_str.push_back(\"C-\");\n\t\telse if\
    \ (grades[i] >= 1.0)\n\t\t\tgrades_str.push_back(\"D+\");\n\t\telse if (grades[i]\
    \ >= 0.7)\n\t\t\tgrades_str.push_back(\"D\");\n\t\telse if (grades[i] >= 0.0)\n\
    \t\t\tgrades_str.push_back(\"D-\");\n\t\telse if (grades[i] >= 0.0)\n\t\t\tgrades_str.push_back(\"\
    E\");\n\t}\n\treturn grades_str;", "    std::vector<std::string> alphabet_grades(grades.size());\n\
    \    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] == 4.0)\
    \ {\n            alphabet_grades[i] = \"A+\";\n        } else if (grades[i] >\
    \ 3.7) {\n            alphabet_grades[i] = \"A\";\n        } else if (grades[i]\
    \ > 3.3) {\n            alphabet_grades[i] = \"A-\";\n        } else if (grades[i]\
    \ > 3.0) {\n            alphabet_grades[i] = \"B+\";\n        } else if (grades[i]\
    \ > 2.7) {\n            alphabet_grades[i] = \"B\";\n        } else if (grades[i]\
    \ > 2.3) {\n            alphabet_grades[i] = \"B-\";\n        } else if (grades[i]\
    \ > 2.0) {\n            alphabet_grades[i] = \"C+\";\n        } else if (grades[i]\
    \ > 1.7) {\n            alphabet_grades[i] = \"C\";\n        } else if (grades[i]\
    \ > 1.3) {\n            alphabet_grades[i] = \"C-\";\n        } else if (grades[i]\
    \ > 1.0) {\n            alphabet_grades[i] = \"D+\";\n        } else if (grades[i]\
    \ > 0.7) {\n            alphabet_grades[i] = \"D\";\n        } else if (grades[i]\
    \ > 0.0) {\n            alphabet_grades[i] = \"D-\";\n        } else {\n     \
    \       alphabet_grades[i] = \"E\";\n        }\n    }\n    return alphabet_grades;",
  "  // Write your code here...\n  std::vector<std::string> result;\n  std::string\
    \ letter_grade;\n  for(int i = 0; i < grades.size(); i++){\n    if(grades[i] >=\
    \ 4.0){\n      letter_grade = \"A+\";\n    }\n    else if(grades[i] >= 3.7){\n\
    \      letter_grade = \"A\";\n    }\n    else if(grades[i] >= 3.3){\n      letter_grade\
    \ = \"A-\";\n    }\n    else if(grades[i] >= 3.0){\n      letter_grade = \"B+\"\
    ;\n    }\n    else if(grades[i] >= 2.7){\n      letter_grade = \"B\";\n    }\n\
    \    else if(grades[i] >= 2.3){\n      letter_grade = \"B-\";\n    }\n    else\
    \ if(grades[i] >= 2.0){\n      letter_grade = \"C+\";\n    }\n    else if(grades[i]\
    \ >= 1.7){\n      letter_grade = \"C\";\n    }\n    else if(grades[i] >= 1.3){\n\
    \      letter_grade = \"C-\";\n    }\n    else if(grades[i] >= 1.0){\n      letter_grade\
    \ = \"D+\";\n    }\n    else if(grades[i] >= 0.7){\n      letter_grade = \"D\"\
    ;\n    }\n    else if(grades[i] >= 0.0){\n      letter_grade = \"D-\";\n    }\n\
    \    else{\n      letter_grade = \"E\";\n    }\n    result.push_back(letter_grade);\n\
    \  }\n  return result;", "    std::vector<std::string> answer;\n    for (size_t\
    \ i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n        \
    \    answer.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n     \
    \       answer.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n   \
    \         answer.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n\
    \            answer.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n\
    \            answer.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n\
    \            answer.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n\
    \            answer.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n\
    \            answer.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n\
    \            answer.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n\
    \            answer.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n\
    \            answer.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n\
    \            answer.push_back(\"D-\");\n        } else {\n            answer.push_back(\"\
    E\");\n        }\n    }\n    return answer;", "    std::vector<std::string> result;\n\
    \    float grade;\n    std::string letter_grade;\n    // char *letter_grade =\
    \ new char[2];\n    for (size_t i = 0; i < grades.size(); i++) {\n        grade\
    \ = grades[i];\n        if (grade == 4.0) {\n            letter_grade = \"A+\"\
    ;\n        } else if (grade >= 3.7) {\n            letter_grade = \"A\";\n   \
    \     } else if (grade >= 3.3) {\n            letter_grade = \"A-\";\n       \
    \ } else if (grade >= 3.0) {\n            letter_grade = \"B+\";\n        } else\
    \ if (grade >= 2.7) {\n            letter_grade = \"B\";\n        } else if (grade\
    \ >= 2.3) {\n            letter_grade = \"B-\";\n        } else if (grade >= 2.0)\
    \ {\n            letter_grade = \"C+\";\n        } else if (grade >= 1.7) {\n\
    \            letter_grade = \"C\";\n        } else if (grade >= 1.3) {\n     \
    \       letter_grade = \"C-\";\n        } else if (grade >= 1.0) {\n         \
    \   letter_grade = \"D+\";\n        } else if (grade >= 0.7) {\n            letter_grade\
    \ = \"D\";\n        } else if (grade > 0.0) {\n            letter_grade = \"D-\"\
    ;\n        } else {\n            letter_grade = \"E\";\n        }\n        result.push_back(letter_grade);\n\
    \    }\n    return result;", "  std::vector<std::string> grades_to_letters;\n\
    \  int i;\n  for(i=0;i<grades.size();i++){\n    if(grades[i]==4.0){\n      grades_to_letters.push_back(\"\
    A+\");\n    }else if(grades[i]>3.7){\n      grades_to_letters.push_back(\"A\"\
    );\n    }else if(grades[i]>3.3){\n      grades_to_letters.push_back(\"A-\");\n\
    \    }else if(grades[i]>3.0){\n      grades_to_letters.push_back(\"B+\");\n  \
    \  }else if(grades[i]>2.7){\n      grades_to_letters.push_back(\"B\");\n    }else\
    \ if(grades[i]>2.3){\n      grades_to_letters.push_back(\"B-\");\n    }else if(grades[i]>2.0){\n\
    \      grades_to_letters.push_back(\"C+\");\n    }else if(grades[i]>1.7){\n  \
    \    grades_to_letters.push_back(\"C\");\n    }else if(grades[i]>1.3){\n     \
    \ grades_to_letters.push_back(\"C-\");\n    }else if(grades[i]>1.0){\n      grades_to_letters.push_back(\"\
    D+\");\n    }else if(grades[i]>0.7){\n      grades_to_letters.push_back(\"D\"\
    );\n    }else if(grades[i]>0.0){\n      grades_to_letters.push_back(\"D-\");\n\
    \    }else{\n      grades_to_letters.push_back(\"E\");\n    }\n  }\n  return grades_to_letters;",
  "\tstd::vector<std::string> output;\n\tfor (float grade : grades) {\n\t\tif (grade\
    \ == 4.0) {\n\t\t\toutput.push_back(\"A+\");\n\t\t}\n\t\telse if (grade > 3.7)\
    \ {\n\t\t\toutput.push_back(\"A\");\n\t\t}\n\t\telse if (grade > 3.3) {\n\t\t\t\
    output.push_back(\"A-\");\n\t\t}\n\t\telse if (grade > 3.0) {\n\t\t\toutput.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grade > 2.7) {\n\t\t\toutput.push_back(\"B\");\n\t\
    \t}\n\t\telse if (grade > 2.3) {\n\t\t\toutput.push_back(\"B-\");\n\t\t}\n\t\t\
    else if (grade > 2.0) {\n\t\t\toutput.push_back(\"C+\");\n\t\t}\n\t\telse if (grade\
    \ > 1.7) {\n\t\t\toutput.push_back(\"C\");\n\t\t}\n\t\telse if (grade > 1.3) {\n\
    \t\t\toutput.push_back(\"C-\");\n\t\t}\n\t\telse if (grade > 1.0) {\n\t\t\toutput.push_back(\"\
    D+\");\n\t\t}\n\t\telse if (grade > 0.7) {\n\t\t\toutput.push_back(\"D\");\n\t\
    \t}\n\t\telse if (grade > 0.0) {\n\t\t\toutput.push_back(\"D-\");\n\t\t}\n\t\t\
    else {\n\t\t\toutput.push_back(\"E\");\n\t\t}\n\t}\n\treturn output;", "    std::vector<std::string>result;\n\
    \    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=4.0){\n        \
    \    result.push_back(\"A+\");\n        }\n        else if(grades[i]>=3.7){\n\
    \            result.push_back(\"A\");\n        }\n        else if(grades[i]>=3.3){\n\
    \            result.push_back(\"A-\");\n        }\n        else if(grades[i]>=3.0){\n\
    \            result.push_back(\"B+\");\n        }\n        else if(grades[i]>=2.7){\n\
    \            result.push_back(\"B\");\n        }\n        else if(grades[i]>=2.3){\n\
    \            result.push_back(\"B-\");\n        }\n        else if(grades[i]>=2.0){\n\
    \            result.push_back(\"C+\");\n        }\n        else if(grades[i]>=1.7){\n\
    \            result.push_back(\"C\");\n        }\n        else if(grades[i]>=1.3){\n\
    \            result.push_back(\"C-\");\n        }\n        else if(grades[i]>=1.0){\n\
    \            result.push_back(\"D+\");\n        }\n        else if(grades[i]>=0.7){\n\
    \            result.push_back(\"D\");\n        }\n        else if(grades[i]>=0.0){\n\
    \            result.push_back(\"D-\");\n        }\n        else{\n           \
    \ result.push_back(\"E\");\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if (grade >\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;",
  "    std::vector<std::string> v(grades.size());\n    std::transform(grades.begin(),\
    \ grades.end(), v.begin(),\n                   [](float grade) {\n        if (grade\
    \ >= 4.0) return \"A+\";\n        if (grade >= 3.7) return \"A\";\n        if\
    \ (grade >= 3.3) return \"A-\";\n        if (grade >= 3.0) return \"B+\";\n  \
    \      if (grade >= 2.7) return \"B\";\n        if (grade >= 2.3) return \"B-\"\
    ;\n        if (grade >= 2.0) return \"C+\";\n        if (grade >= 1.7) return\
    \ \"C\";\n        if (grade >= 1.3) return \"C-\";\n        if (grade >= 1.0)\
    \ return \"D+\";\n        if (grade >= 0.7) return \"D\";\n        if (grade >=\
    \ 0.0) return \"D-\";\n        return \"E\";\n    });\n    return v;", "    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if (grade >\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;",
  "  std::vector<std::string> res;\n  for (int i = 0; i < grades.size(); i++) {\n\
    \    float grade = grades[i];\n    if (grade >= 4.0) {\n      res.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      res.push_back(\"A\");\n    } else\
    \ if (grade >= 3.3) {\n      res.push_back(\"A-\");\n    } else if (grade >= 3.0)\
    \ {\n      res.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n      res.push_back(\"\
    B\");\n    } else if (grade >= 2.3) {\n      res.push_back(\"B-\");\n    } else\
    \ if (grade >= 2.0) {\n      res.push_back(\"C+\");\n    } else if (grade >= 1.7)\
    \ {\n      res.push_back(\"C\");\n    } else if (grade >= 1.3) {\n      res.push_back(\"\
    C-\");\n    } else if (grade >= 1.0) {\n      res.push_back(\"D+\");\n    } else\
    \ if (grade >= 0.7) {\n      res.push_back(\"D\");\n    } else if (grade >= 0.0)\
    \ {\n      res.push_back(\"D-\");\n    } else {\n      res.push_back(\"E\");\n\
    \    }\n  }\n  return res;", "  std::vector<std::string> result = {};\n  for (size_t\
    \ i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grades[i] >= 3.7) {\n      result.push_back(\"A\");\n \
    \   } else if (grades[i] >= 3.3) {\n      result.push_back(\"A-\");\n    } else\
    \ if (grades[i] >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grades[i]\
    \ >= 2.7) {\n      result.push_back(\"B\");\n    } else if (grades[i] >= 2.3)\
    \ {\n      result.push_back(\"B-\");\n    } else if (grades[i] >= 2.0) {\n   \
    \   result.push_back(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      result.push_back(\"\
    C\");\n    } else if (grades[i] >= 1.3) {\n      result.push_back(\"C-\");\n \
    \   } else if (grades[i] >= 1.0) {\n      result.push_back(\"D+\");\n    } else\
    \ if (grades[i] >= 0.7) {\n      result.push_back(\"D\");\n    } else if (grades[i]\
    \ >= 0.0) {\n      result.push_back(\"D-\");\n    } else {\n      result.push_back(\"\
    E\");\n    }\n  }\n  return result;", "  std::vector<std::string> v;\n  for(int\
    \ i = 0; i < grades.size(); i++){\n    if(grades[i] >= 4.0){\n      v.push_back(\"\
    A+\");\n    }\n    else if(grades[i] >= 3.7){\n      v.push_back(\"A\");\n   \
    \ }\n    else if(grades[i] >= 3.3){\n      v.push_back(\"A-\");\n    }\n    else\
    \ if(grades[i] >= 3.0){\n      v.push_back(\"B+\");\n    }\n    else if(grades[i]\
    \ >= 2.7){\n      v.push_back(\"B\");\n    }\n    else if(grades[i] >= 2.3){\n\
    \      v.push_back(\"B-\");\n    }\n    else if(grades[i] >= 2.0){\n      v.push_back(\"\
    C+\");\n    }\n    else if(grades[i] >= 1.7){\n      v.push_back(\"C\");\n   \
    \ }\n    else if(grades[i] >= 1.3){\n      v.push_back(\"C-\");\n    }\n    else\
    \ if(grades[i] >= 1.0){\n      v.push_back(\"D+\");\n    }\n    else if(grades[i]\
    \ >= 0.7){\n      v.push_back(\"D\");\n    }\n    else if(grades[i] >= 0.0){\n\
    \      v.push_back(\"D-\");\n    }\n    else if(grades[i] == 0.0){\n      v.push_back(\"\
    E\");\n    }\n  }\n  return v;", "    //your code here\n    std::vector<std::string>\
    \ letter;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=4.0){\n\
    \            letter.push_back(\"A+\");\n        }\n        else if(grades[i]>=3.7){\n\
    \            letter.push_back(\"A\");\n        }\n        else if(grades[i]>=3.3){\n\
    \            letter.push_back(\"A-\");\n        }\n        else if(grades[i]>=3.0){\n\
    \            letter.push_back(\"B+\");\n        }\n        else if(grades[i]>=2.7){\n\
    \            letter.push_back(\"B\");\n        }\n        else if(grades[i]>=2.3){\n\
    \            letter.push_back(\"B-\");\n        }\n        else if(grades[i]>=2.0){\n\
    \            letter.push_back(\"C+\");\n        }\n        else if(grades[i]>=1.7){\n\
    \            letter.push_back(\"C\");\n        }\n        else if(grades[i]>=1.3){\n\
    \            letter.push_back(\"C-\");\n        }\n        else if(grades[i]>=1.0){\n\
    \            letter.push_back(\"D+\");\n        }\n        else if(grades[i]>=0.7){\n\
    \            letter.push_back(\"D\");\n        }\n        else if(grades[i]>=0.0){\n\
    \            letter.push_back(\"D-\");\n        }\n        else{\n           \
    \ letter.push_back(\"E\");\n        }\n    }\n    return letter;", "    std::vector<std::string>\
    \ result = {\"E\", \"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\", \"B-\", \"B\"\
    , \"B+\", \"A-\", \"A\", \"A+\"};\n    std::vector<float> grade_numbers = {0.0,\
    \ 0.7, 1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0};\n    std::vector<std::string>\
    \ result_grades;\n    for (auto i: grades) {\n        int index = -1;\n      \
    \  for (int j = 0; j < grade_numbers.size(); j++) {\n            if (i > grade_numbers[j])\
    \ {\n                index = j;\n                break;\n            }\n     \
    \   }\n        result_grades.push_back(result[index]);\n    }\n    return result_grades;",
  "  std::vector<std::string> letterGrades;\n  for (int i = 0; i < grades.size();\
    \ i++) {\n    if (grades[i] == 4.0) {\n      letterGrades.push_back(\"A+\");\n\
    \    } else if (grades[i] > 3.7) {\n      letterGrades.push_back(\"A\");\n   \
    \ } else if (grades[i] > 3.3) {\n      letterGrades.push_back(\"A-\");\n    }\
    \ else if (grades[i] > 3.0) {\n      letterGrades.push_back(\"B+\");\n    } else\
    \ if (grades[i] > 2.7) {\n      letterGrades.push_back(\"B\");\n    } else if\
    \ (grades[i] > 2.3) {\n      letterGrades.push_back(\"B-\");\n    } else if (grades[i]\
    \ > 2.0) {\n      letterGrades.push_back(\"C+\");\n    } else if (grades[i] >\
    \ 1.7) {\n      letterGrades.push_back(\"C\");\n    } else if (grades[i] > 1.3)\
    \ {\n      letterGrades.push_back(\"C-\");\n    } else if (grades[i] > 1.0) {\n\
    \      letterGrades.push_back(\"D+\");\n    } else if (grades[i] > 0.7) {\n  \
    \    letterGrades.push_back(\"D\");\n    } else if (grades[i] > 0.0) {\n     \
    \ letterGrades.push_back(\"D-\");\n    } else {\n      letterGrades.push_back(\"\
    E\");\n    }\n  }\n  return letterGrades;", "\tint grade = 0;\n\tint index = 0;\n\
    \tstd::vector<std::string> arr;\n\tstd::string letterGrade;\n\tstd::string plus\
    \ = \"+\";\n\tstd::string minus = \"-\";\n\tfor (int i = 0; i < grades.size();\
    \ i++) {\n\t\tif (grades[i] > 4.0) {\n\t\t\tarr.push_back(\"A+\");\n\t\t}\n\t\t\
    else if (grades[i] > 3.7) {\n\t\t\tarr.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 3.3) {\n\t\t\tarr.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0)\
    \ {\n\t\t\tarr.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\
    \tarr.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tarr.push_back(\"\
    B-\");\n\t\t}\n\t\telse if (grades[i] > 2.0) {\n\t\t\tarr.push_back(\"C+\");\n\
    \t\t}\n\t\telse if (grades[i] > 1.7) {\n\t\t\tarr.push_back(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] > 1.3) {\n\t\t\tarr.push_back(\"C-\");\n\t\t}\n\t\telse if\
    \ (grades[i] > 1.0) {\n\t\t\tarr.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tarr.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0)\
    \ {\n\t\t\tarr.push_back(\"D-\");\n\t\t}\n\t\telse if (grades[i] == 0.0) {\n\t\
    \t\tarr.push_back(\"E\");\n\t\t}\n\t}\n\treturn arr;", "  std::vector<std::string>\
    \ output;\n  for (auto grade : grades) {\n    if (grade > 4.0) {\n      output.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      output.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      output.push_back(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      output.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      output.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      output.push_back(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      output.push_back(\"C+\");\n    }\
    \ else if (grade >= 1.7) {\n      output.push_back(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      output.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      output.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      output.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      output.push_back(\"D-\");\n    }\
    \ else {\n      output.push_back(\"E\");\n    }\n  }\n  return output;", "   \
    \ std::vector<std::string> v;\n    for(int i=0;i<grades.size();i++){\n       \
    \ if(grades[i]>=4.0){\n            v.push_back(\"A+\");\n        }\n        else\
    \ if(grades[i]>=3.7){\n            v.push_back(\"A\");\n        }\n        else\
    \ if(grades[i]>=3.3){\n            v.push_back(\"A-\");\n        }\n        else\
    \ if(grades[i]>=3.0){\n            v.push_back(\"B+\");\n        }\n        else\
    \ if(grades[i]>=2.7){\n            v.push_back(\"B\");\n        }\n        else\
    \ if(grades[i]>=2.3){\n            v.push_back(\"B-\");\n        }\n        else\
    \ if(grades[i]>=2.0){\n            v.push_back(\"C+\");\n        }\n        else\
    \ if(grades[i]>=1.7){\n            v.push_back(\"C\");\n        }\n        else\
    \ if(grades[i]>=1.3){\n            v.push_back(\"C-\");\n        }\n        else\
    \ if(grades[i]>=1.0){\n            v.push_back(\"D+\");\n        }\n        else\
    \ if(grades[i]>=0.7){\n            v.push_back(\"D\");\n        }\n        else\
    \ if(grades[i]>=0.0){\n            v.push_back(\"D-\");\n        }\n        else\
    \ if(grades[i]==0.0){\n            v.push_back(\"E\");\n        }\n    }\n   \
    \ return v;", "    std::vector<std::string> results;\n    for (auto grade : grades)\
    \ {\n        if (grade == 4.0) {\n            results.push_back(\"A+\");\n   \
    \     } else if (grade > 3.7) {\n            results.push_back(\"A\");\n     \
    \   } else if (grade > 3.3) {\n            results.push_back(\"A-\");\n      \
    \  } else if (grade > 3.0) {\n            results.push_back(\"B+\");\n       \
    \ } else if (grade > 2.7) {\n            results.push_back(\"B\");\n        }\
    \ else if (grade > 2.3) {\n            results.push_back(\"B-\");\n        } else\
    \ if (grade > 2.0) {\n            results.push_back(\"C+\");\n        } else if\
    \ (grade > 1.7) {\n            results.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            results.push_back(\"C-\");\n        } else if (grade >\
    \ 1.0) {\n            results.push_back(\"D+\");\n        } else if (grade > 0.7)\
    \ {\n            results.push_back(\"D\");\n        } else if (grade > 0.0) {\n\
    \            results.push_back(\"D-\");\n        } else {\n            results.push_back(\"\
    E\");\n        }\n    }\n    return results;", "    const std::map<float,std::string>\
    \  gradMapping = {\n        {4.0, \"A+\"},\n        {3.7, \"A\"},\n        {3.3,\
    \ \"A-\"},\n        {3.0, \"B+\"},\n        {2.7, \"B\"},\n        {2.3, \"B-\"\
    },\n        {2.0, \"C+\"},\n        {1.7, \"C\"},\n        {1.3, \"C-\"},\n  \
    \      {1.0, \"D+\"},\n        {0.7, \"D\"},\n        {0.0, \"D-\"},\n    };\n\
    \    std::vector<std::string> res(grades.size());\n    std::transform(grades.begin(),\
    \ grades.end(), res.begin(), [&](auto& val){\n        auto itr = gradMapping.lower_bound(val);\n\
    \        if(itr == gradMapping.end())\n            return \"E\";\n        return\
    \ itr->second;\n    });\n    return res;", "\tstd::vector<std::string> ans;\n\t\
    for (float g : grades) {\n\t\tif (g >= 4.0) {\n\t\t\tans.push_back(\"A+\");\n\t\
    \t}\n\t\telse if (g >= 3.7) {\n\t\t\tans.push_back(\"A\");\n\t\t}\n\t\telse if\
    \ (g >= 3.3) {\n\t\t\tans.push_back(\"A-\");\n\t\t}\n\t\telse if (g >= 3.0) {\n\
    \t\t\tans.push_back(\"B+\");\n\t\t}\n\t\telse if (g >= 2.7) {\n\t\t\tans.push_back(\"\
    B\");\n\t\t}\n\t\telse if (g >= 2.3) {\n\t\t\tans.push_back(\"B-\");\n\t\t}\n\t\
    \telse if (g >= 2.0) {\n\t\t\tans.push_back(\"C+\");\n\t\t}\n\t\telse if (g >=\
    \ 1.7) {\n\t\t\tans.push_back(\"C\");\n\t\t}\n\t\telse if (g >= 1.3) {\n\t\t\t\
    ans.push_back(\"C-\");\n\t\t}\n\t\telse if (g >= 1.0) {\n\t\t\tans.push_back(\"\
    D+\");\n\t\t}\n\t\telse if (g >= 0.7) {\n\t\t\tans.push_back(\"D\");\n\t\t}\n\t\
    \telse if (g >= 0.0) {\n\t\t\tans.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\t\
    ans.push_back(\"E\");\n\t\t}\n\t}\n\treturn ans;", "    std::vector<std::string>\
    \ res;\n    for(float grade : grades){\n        // a good way to solve this is\
    \ use modulo,\n        // this is because modulo returns the remainder of a division\n\
    \        // so we can use modulo to check the decimal part of the grade\n    \
    \    // while checking the decimal part of the grade we can also\n        // check\
    \ the whole part\n        // another way to solve this is using if else if else...\n\
    \        // but if you do that you will have to check each case\n        // because\
    \ there are also cases that are equal to\n        // for example 4.0 is also an\
    \ A+\n        float mod = grade - int(grade);\n        if(mod >= .7) {\n     \
    \       if(grade >= 4) res.push_back(\"A+\");\n            else if(grade >= 3.7)\
    \ res.push_back(\"A\");\n            else if(grade >= 3.3) res.push_back(\"A-\"\
    );\n            else if(grade >= 3) res.push_back(\"B+\");\n            else if(grade\
    \ >= 2.7) res.push_back(\"B\");\n            else if(grade >= 2.3) res.push_back(\"\
    B-\");\n            else if(grade >= 2) res.push_back(\"C+\");\n            else\
    \ if(grade >= 1.7) res.push_back(\"C\");\n            else if(grade >= 1.3) res.push_back(\"\
    C-\");\n            else if(grade >= 1) res.push_back(\"D+\");\n            else\
    \ if(grade >= 0.7) res.push_back(\"D\");\n            else res.push_back(\"D-\"\
    );\n        } else {\n            if(grade >= 4) res.push_back(\"A+\");\n    \
    \        else if(grade >= 3.7) res.push_back(\"A\");\n            else if(grade\
    \ >= 3.3) res.push_back(\"A-\");\n            else if(grade >= 3) res.push_back(\"\
    B+\");\n            else if(grade >= 2.7) res.push_back(\"B\");\n            else\
    \ if(grade >= 2.3) res.push_back(\"B-\");\n            else if(grade >= 2) res.push",
  "    std::vector<std::string> output;\n    for(float grade : grades){\n        if(grade\
    \ == 4.0) output.push_back(\"A+\");\n        else if(grade >= 3.7) output.push_back(\"\
    A\");\n        else if(grade >= 3.3) output.push_back(\"A-\");\n        else if(grade\
    \ >= 3.0) output.push_back(\"B+\");\n        else if(grade >= 2.7) output.push_back(\"\
    B\");\n        else if(grade >= 2.3) output.push_back(\"B-\");\n        else if(grade\
    \ >= 2.0) output.push_back(\"C+\");\n        else if(grade >= 1.7) output.push_back(\"\
    C\");\n        else if(grade >= 1.3) output.push_back(\"C-\");\n        else if(grade\
    \ >= 1.0) output.push_back(\"D+\");\n        else if(grade >= 0.7) output.push_back(\"\
    D\");\n        else if(grade >= 0.0) output.push_back(\"D-\");\n        else output.push_back(\"\
    E\");\n    }\n    return output;", "    std::vector<std::string> res(grades.size());\n\
    \    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0)\
    \ {\n            res[i] = \"A+\";\n        } else if (grades[i] >= 3.7) {\n  \
    \          res[i] = \"A\";\n        } else if (grades[i] >= 3.3) {\n         \
    \   res[i] = \"A-\";\n        } else if (grades[i] >= 3.0) {\n            res[i]\
    \ = \"B+\";\n        } else if (grades[i] >= 2.7) {\n            res[i] = \"B\"\
    ;\n        } else if (grades[i] >= 2.3) {\n            res[i] = \"B-\";\n    \
    \    } else if (grades[i] >= 2.0) {\n            res[i] = \"C+\";\n        } else\
    \ if (grades[i] >= 1.7) {\n            res[i] = \"C\";\n        } else if (grades[i]\
    \ >= 1.3) {\n            res[i] = \"C-\";\n        } else if (grades[i] >= 1.0)\
    \ {\n            res[i] = \"D+\";\n        } else if (grades[i] >= 0.7) {\n  \
    \          res[i] = \"D\";\n        } else if (grades[i] >= 0.0) {\n         \
    \   res[i] = \"D-\";\n        } else {\n            res[i] = \"E\";\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> result;\n    std::map<float,\
    \ std::string> mapping = {\n        {4.0, \"A+\"},\n        {3.7, \"A\"},\n  \
    \      {3.3, \"A-\"},\n        {3.0, \"B+\"},\n        {2.7, \"B\"},\n       \
    \ {2.3, \"B-\"},\n        {2.0, \"C+\"},\n        {1.7, \"C\"},\n        {1.3,\
    \ \"C-\"},\n        {1.0, \"D+\"},\n        {0.7, \"D\"},\n        {0.0, \"D-\"\
    },\n    };\n    for (auto grade : grades) {\n        auto it = std::find_if(mapping.begin(),\
    \ mapping.end(), [grade](auto pair) {\n            return pair.first <= grade;\n\
    \        });\n        if (it == mapping.end()) {\n            result.push_back(\"\
    E\");\n        } else {\n            result.push_back(it->second);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> letter_grades;\n  \
    \  int n = grades.size();\n    for(int i = 0; i < n; i++) {\n        if(grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if(grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if(grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if(grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;",
  "    std::vector<std::string> vec;\n    for(int i = 0; i < grades.size(); i++){\n\
    \        if(grades[i] > 4.0){\n            vec.push_back(\"A+\");\n        }\n\
    \        else if(grades[i] > 3.7){\n            vec.push_back(\"A\");\n      \
    \  }\n        else if(grades[i] > 3.3){\n            vec.push_back(\"A-\");\n\
    \        }\n        else if(grades[i] > 3.0){\n            vec.push_back(\"B+\"\
    );\n        }\n        else if(grades[i] > 2.7){\n            vec.push_back(\"\
    B\");\n        }\n        else if(grades[i] > 2.3){\n            vec.push_back(\"\
    B-\");\n        }\n        else if(grades[i] > 2.0){\n            vec.push_back(\"\
    C+\");\n        }\n        else if(grades[i] > 1.7){\n            vec.push_back(\"\
    C\");\n        }\n        else if(grades[i] > 1.3){\n            vec.push_back(\"\
    C-\");\n        }\n        else if(grades[i] > 1.0){\n            vec.push_back(\"\
    D+\");\n        }\n        else if(grades[i] > 0.7){\n            vec.push_back(\"\
    D\");\n        }\n        else if(grades[i] > 0.0){\n            vec.push_back(\"\
    D-\");\n        }\n        else{\n            vec.push_back(\"E\");\n        }\n\
    \    }\n    return vec;", "    std::vector<std::string> out;\n    for(auto &i:\
    \ grades){\n        if(i>=4)\n            out.push_back(\"A+\");\n        else\
    \ if(i>=3.7)\n            out.push_back(\"A\");\n        else if(i>=3.3)\n   \
    \         out.push_back(\"A-\");\n        else if(i>=3)\n            out.push_back(\"\
    B+\");\n        else if(i>=2.7)\n            out.push_back(\"B\");\n        else\
    \ if(i>=2.3)\n            out.push_back(\"B-\");\n        else if(i>=2)\n    \
    \        out.push_back(\"C+\");\n        else if(i>=1.7)\n            out.push_back(\"\
    C\");\n        else if(i>=1.3)\n            out.push_back(\"C-\");\n        else\
    \ if(i>=1)\n            out.push_back(\"D+\");\n        else if(i>=0.7)\n    \
    \        out.push_back(\"D\");\n        else if(i>=0)\n            out.push_back(\"\
    D-\");\n        else\n            out.push_back(\"E\");\n    }\n    return out;",
  "\tstd::vector<std::string> letter_grades;\n\tfor (int i = 0; i < grades.size();\
    \ i++) {\n\t\tif (grades[i] >= 4.0) {\n\t\t\tletter_grades.push_back(\"A+\");\n\
    \t\t}\n\t\telse if (grades[i] >= 3.7) {\n\t\t\tletter_grades.push_back(\"A\");\n\
    \t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\tletter_grades.push_back(\"A-\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tletter_grades.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tletter_grades.push_back(\"\
    B\");\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tletter_grades.push_back(\"\
    B-\");\n\t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tletter_grades.push_back(\"\
    C+\");\n\t\t}\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tletter_grades.push_back(\"\
    C\");\n\t\t}\n\t\telse if (grades[i] >= 1.3) {\n\t\t\tletter_grades.push_back(\"\
    C-\");\n\t\t}\n\t\telse if (grades[i] >= 1.0) {\n\t\t\tletter_grades.push_back(\"\
    D+\");\n\t\t}\n\t\telse if (grades[i] >= 0.7) {\n\t\t\tletter_grades.push_back(\"\
    D\");\n\t\t}\n\t\telse if (grades[i] >= 0.0) {\n\t\t\tletter_grades.push_back(\"\
    D-\");\n\t\t}\n\t\telse {\n\t\t\tletter_grades.push_back(\"E\");\n\t\t}\n\t}\n\
    \treturn letter_grades;", "    std::vector<std::string> res;\n    for(auto grade\
    \ : grades){\n        if(grade >= 4.0) res.push_back(\"A+\");\n        else if(grade\
    \ >= 3.7) res.push_back(\"A\");\n        else if(grade >= 3.3) res.push_back(\"\
    A-\");\n        else if(grade >= 3.0) res.push_back(\"B+\");\n        else if(grade\
    \ >= 2.7) res.push_back(\"B\");\n        else if(grade >= 2.3) res.push_back(\"\
    B-\");\n        else if(grade >= 2.0) res.push_back(\"C+\");\n        else if(grade\
    \ >= 1.7) res.push_back(\"C\");\n        else if(grade >= 1.3) res.push_back(\"\
    C-\");\n        else if(grade >= 1.0) res.push_back(\"D+\");\n        else if(grade\
    \ >= 0.7) res.push_back(\"D\");\n        else if(grade >= 0.0) res.push_back(\"\
    D-\");\n        else res.push_back(\"E\");\n    }\n    return res;", "\tstd::vector<std::string>\
    \ ltr_grades;\n\tfor (float num : grades) {\n\t\tif (num == 4.0) {\n\t\t\tltr_grades.push_back(\"\
    A+\");\n\t\t}\n\t\telse if (num < 4.0 && num >= 3.7) {\n\t\t\tltr_grades.push_back(\"\
    A\");\n\t\t}\n\t\telse if (num < 3.7 && num >= 3.3) {\n\t\t\tltr_grades.push_back(\"\
    A-\");\n\t\t}\n\t\telse if (num < 3.3 && num >= 3.0) {\n\t\t\tltr_grades.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (num < 3.0 && num >= 2.7) {\n\t\t\tltr_grades.push_back(\"\
    B\");\n\t\t}\n\t\telse if (num < 2.7 && num >= 2.3) {\n\t\t\tltr_grades.push_back(\"\
    B-\");\n\t\t}\n\t\telse if (num < 2.3 && num >= 2.0) {\n\t\t\tltr_grades.push_back(\"\
    C+\");\n\t\t}\n\t\telse if (num < 2.0 && num >= 1.7) {\n\t\t\tltr_grades.push_back(\"\
    C\");\n\t\t}\n\t\telse if (num < 1.7 && num >= 1.3) {\n\t\t\tltr_grades.push_back(\"\
    C-\");\n\t\t}\n\t\telse if (num < 1.3 && num >= 1.0) {\n\t\t\tltr_grades.push_back(\"\
    D+\");\n\t\t}\n\t\telse if (num < 1.0 && num >= 0.7) {\n\t\t\tltr_grades.push_back(\"\
    D\");\n\t\t}\n\t\telse if (num < 0.7 && num >= 0.0) {\n\t\t\tltr_grades.push_back(\"\
    D-\");\n\t\t}\n\t\telse if (num == 0.0) {\n\t\t\tltr_grades.push_back(\"E\");\n\
    \t", "    \n    std::vector<std::string> letter_grades = {\"A+\", \"A\", \"A-\"\
    , \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n\
    \    std::vector<float> numerical_grades = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7, 0.0};\n    std::vector<std::string> output;\n    \n    for\
    \ (size_t i = 0; i < grades.size(); i++) {\n        \n        if (grades[i] >\
    \ 4.0) {\n            output.push_back(\"A+\");\n        }\n        else if (grades[i]\
    \ == 0.0) {\n            output.push_back(\"E\");\n        }\n        else {\n\
    \            for (size_t j = 0; j < numerical_grades.size(); j++) {\n        \
    \        if (grades[i] > numerical_grades[j]) {\n                    output.push_back(letter_grades[j]);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    \n    return output;", "\tstd::vector<std::string> grades_output;\n\t\
    for (auto num: grades) {\n\t\tif (num >= 4.0) {\n\t\t\tgrades_output.push_back(\"\
    A+\");\n\t\t} else if (num >= 3.7) {\n\t\t\tgrades_output.push_back(\"A\");\n\t\
    \t} else if (num >= 3.3) {\n\t\t\tgrades_output.push_back(\"A-\");\n\t\t} else\
    \ if (num >= 3.0) {\n\t\t\tgrades_output.push_back(\"B+\");\n\t\t} else if (num\
    \ >= 2.7) {\n\t\t\tgrades_output.push_back(\"B\");\n\t\t} else if (num >= 2.3)\
    \ {\n\t\t\tgrades_output.push_back(\"B-\");\n\t\t} else if (num >= 2.0) {\n\t\t\
    \tgrades_output.push_back(\"C+\");\n\t\t} else if (num >= 1.7) {\n\t\t\tgrades_output.push_back(\"\
    C\");\n\t\t} else if (num >= 1.3) {\n\t\t\tgrades_output.push_back(\"C-\");\n\t\
    \t} else if (num >= 1.0) {\n\t\t\tgrades_output.push_back(\"D+\");\n\t\t} else\
    \ if (num >= 0.7) {\n\t\t\tgrades_output.push_back(\"D\");\n\t\t} else if (num\
    \ >= 0.0) {\n\t\t\tgrades_output.push_back(\"D-\");\n\t\t} else {\n\t\t\tgrades_output.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn grades_output;", "    std::vector<std::string> results;\n\
    \    for (float grade : grades) {\n        if (grade >= 4.0) results.push_back(\"\
    A+\");\n        else if (grade >= 3.7) results.push_back(\"A\");\n        else\
    \ if (grade >= 3.3) results.push_back(\"A-\");\n        else if (grade >= 3.0)\
    \ results.push_back(\"B+\");\n        else if (grade >= 2.7) results.push_back(\"\
    B\");\n        else if (grade >= 2.3) results.push_back(\"B-\");\n        else\
    \ if (grade >= 2.0) results.push_back(\"C+\");\n        else if (grade >= 1.7)\
    \ results.push_back(\"C\");\n        else if (grade >= 1.3) results.push_back(\"\
    C-\");\n        else if (grade >= 1.0) results.push_back(\"D+\");\n        else\
    \ if (grade >= 0.7) results.push_back(\"D\");\n        else if (grade >= 0.0)\
    \ results.push_back(\"D-\");\n        else results.push_back(\"E\");\n    }\n\
    \    return results;", "    std::vector<std::string> result;\n    for (int i =\
    \ 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"\
    A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"\
    A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"\
    A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"\
    B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"\
    B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"\
    B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"\
    C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"\
    C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"\
    D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"\
    D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n  \
    \  }\n    return result;", "    std::vector<std::string> grade_table = {\"A+\"\
    , \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\",\
    \ \"D-\", \"E\"};\n    std::vector<float> grade_table_gpa = {4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0};\n    std::vector<std::string>\
    \ ans;\n    int i;\n    for(float g: grades){\n        i = 0;\n        while(i\
    \ < grade_table_gpa.size() && g < grade_table_gpa[i]){\n            i++;\n   \
    \     }\n        ans.push_back(grade_table[i]);\n    }\n    return ans;", "  \
    \  std::vector<std::string> letter_grades;\n    for (auto it = grades.begin();\
    \ it != grades.end(); ++it) {\n        if (*it == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (*it > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (*it > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (*it > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (*it > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (*it > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (*it > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (*it > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (*it > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (*it > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (*it > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (*it > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;", "    std::vector<std::string> letter_grades\
    \ = {\"E\", \"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\", \"B-\", \"B\", \"B+\"\
    , \"A-\", \"A\", \"A+\"};\n    for (auto grade: grades) {\n        if (grade >=\
    \ 4.0) {\n            std::cout << letter_grades[12] << std::endl;\n        }\
    \ else if (grade >= 3.7) {\n            std::cout << letter_grades[11] << std::endl;\n\
    \        } else if (grade >= 3.3) {\n            std::cout << letter_grades[10]\
    \ << std::endl;\n        } else if (grade >= 3.0) {\n            std::cout <<\
    \ letter_grades[9] << std::endl;\n        } else if (grade >= 2.7) {\n       \
    \     std::cout << letter_grades[8] << std::endl;\n        } else if (grade >=\
    \ 2.3) {\n            std::cout << letter_grades[7] << std::endl;\n        } else\
    \ if (grade >= 2.0) {\n            std::cout << letter_grades[6] << std::endl;\n\
    \        } else if (grade >= 1.7) {\n            std::cout << letter_grades[5]\
    \ << std::endl;\n        } else if (grade >= 1.3) {\n            std::cout <<\
    \ letter_grades[4] << std::endl;\n        } else if (grade >= 1.0) {\n       \
    \     std::cout << letter_grades[3] << std::endl;\n        } else if (grade >=\
    \ 0.7) {\n            std::cout << letter_grades[2] << std::endl;\n        } else\
    \ if (grade >= 0.0) {\n            std::cout << letter_grades[1] << std::endl;\n\
    \        } else {\n            std::cout << letter_grades[0] << std::endl;\n \
    \       }\n    }\n    return letter_grades;", "    std::vector<std::string> result;\n\
    \    float grade;\n    for (int i = 0; i < grades.size(); i++) {\n        grade\
    \ = grades[i];\n        if (grade > 4.0) {\n            result.push_back(\"A+\"\
    );\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n\
    \        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n \
    \       } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n  \
    \      } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n    \
    \    } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n     \
    \   } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n      \
    \  } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        }\
    \ else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else\
    \ if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if\
    \ (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n       \
    \     result.push_back(\"E\");\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (float i : grades) {\n        if (i == 4.0) {\n           \
    \ result.push_back(\"A+\");\n        } else if (i >= 3.7) {\n            result.push_back(\"\
    A\");\n        } else if (i >= 3.3) {\n            result.push_back(\"A-\");\n\
    \        } else if (i >= 3.0) {\n            result.push_back(\"B+\");\n     \
    \   } else if (i >= 2.7) {\n            result.push_back(\"B\");\n        } else\
    \ if (i >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (i\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (i >= 1.7)\
    \ {\n            result.push_back(\"C\");\n        } else if (i >= 1.3) {\n  \
    \          result.push_back(\"C-\");\n        } else if (i >= 1.0) {\n       \
    \     result.push_back(\"D+\");\n        } else if (i >= 0.7) {\n            result.push_back(\"\
    D\");\n        } else if (i >= 0.0) {\n            result.push_back(\"D-\");\n\
    \        } else {\n            result.push_back(\"E\");\n        }\n    }\n  \
    \  return result;", "  std::vector<std::string> output;\n  for (int i = 0; i <\
    \ grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      output.push_back(\"\
    A+\");\n    } else if (grades[i] >= 3.7) {\n      output.push_back(\"A\");\n \
    \   } else if (grades[i] >= 3.3) {\n      output.push_back(\"A-\");\n    } else\
    \ if (grades[i] >= 3.0) {\n      output.push_back(\"B+\");\n    } else if (grades[i]\
    \ >= 2.7) {\n      output.push_back(\"B\");\n    } else if (grades[i] >= 2.3)\
    \ {\n      output.push_back(\"B-\");\n    } else if (grades[i] >= 2.0) {\n   \
    \   output.push_back(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      output.push_back(\"\
    C\");\n    } else if (grades[i] >= 1.3) {\n      output.push_back(\"C-\");\n \
    \   } else if (grades[i] >= 1.0) {\n      output.push_back(\"D+\");\n    } else\
    \ if (grades[i] >= 0.7) {\n      output.push_back(\"D\");\n    } else if (grades[i]\
    \ >= 0.0) {\n      output.push_back(\"D-\");\n    } else {\n      output.push_back(\"\
    E\");\n    }\n  }\n  return output;", "    std::vector<std::string> ans;\n   \
    \ for(int i = 0; i < grades.size(); i++){\n        if(grades[i] == 4.0)\n    \
    \        ans.push_back(\"A+\");\n        else if(grades[i] > 3.7)\n          \
    \  ans.push_back(\"A\");\n        else if(grades[i] > 3.3)\n            ans.push_back(\"\
    A-\");\n        else if(grades[i] > 3.0)\n            ans.push_back(\"B+\");\n\
    \        else if(grades[i] > 2.7)\n            ans.push_back(\"B\");\n       \
    \ else if(grades[i] > 2.3)\n            ans.push_back(\"B-\");\n        else if(grades[i]\
    \ > 2.0)\n            ans.push_back(\"C+\");\n        else if(grades[i] > 1.7)\n\
    \            ans.push_back(\"C\");\n        else if(grades[i] > 1.3)\n       \
    \     ans.push_back(\"C-\");\n        else if(grades[i] > 1.0)\n            ans.push_back(\"\
    D+\");\n        else if(grades[i] > 0.7)\n            ans.push_back(\"D\");\n\
    \        else if(grades[i] > 0.0)\n            ans.push_back(\"D-\");\n      \
    \  else\n            ans.push_back(\"E\");\n    }\n    return ans;", "  // your\
    \ code here!\n  std::vector<std::string> retval;\n  float grade;\n  for(int i\
    \ = 0; i < grades.size(); i++){\n    grade = grades[i];\n    if(grade >= 4.0){\n\
    \      retval.push_back(\"A+\");\n    }\n    else if(grade >= 3.7){\n      retval.push_back(\"\
    A\");\n    }\n    else if(grade >= 3.3){\n      retval.push_back(\"A-\");\n  \
    \  }\n    else if(grade >= 3.0){\n      retval.push_back(\"B+\");\n    }\n   \
    \ else if(grade >= 2.7){\n      retval.push_back(\"B\");\n    }\n    else if(grade\
    \ >= 2.3){\n      retval.push_back(\"B-\");\n    }\n    else if(grade >= 2.0){\n\
    \      retval.push_back(\"C+\");\n    }\n    else if(grade >= 1.7){\n      retval.push_back(\"\
    C\");\n    }\n    else if(grade >= 1.3){\n      retval.push_back(\"C-\");\n  \
    \  }\n    else if(grade >= 1.0){\n      retval.push_back(\"D+\");\n    }\n   \
    \ else if(grade >= 0.7){\n      retval.push_back(\"D\");\n    }\n    else if(grade\
    \ >= 0.0){\n      retval.push_back(\"D-\");\n    }\n    else{\n      retval.push_back(\"\
    E\");\n    }\n  }\n  return retval;", "  std::vector<std::string> scores;\n  std::map<std::string,\
    \ float> gradings = {{\"E\", 0.0}, {\"D-\", 0.7}, {\"D\", 1.0}, {\"D+\", 1.3},\
    \ {\"C-\", 1.7}, {\"C\", 2.0}, {\"C+\", 2.3}, {\"B-\", 2.7}, {\"B\", 3.0}, {\"\
    B+\", 3.3}, {\"A-\", 3.7}, {\"A\", 4.0}, {\"A+\", 10.0}};\n  for (auto grade :\
    \ grades) {\n    for (auto grading : gradings) {\n      if (grade >= grading.second)\
    \ {\n        scores.push_back(grading.first);\n        break;\n      }\n    }\n\
    \  }\n  return scores;", "\tstd::vector<std::string> letter_grades;\n\tfor (auto\
    \ g : grades) {\n\t\tif (g == 4.0) {\n\t\t\tletter_grades.push_back(\"A+\");\n\
    \t\t}\n\t\telse if (g > 3.7) {\n\t\t\tletter_grades.push_back(\"A\");\n\t\t}\n\
    \t\telse if (g > 3.3) {\n\t\t\tletter_grades.push_back(\"A-\");\n\t\t}\n\t\telse\
    \ if (g > 3.0) {\n\t\t\tletter_grades.push_back(\"B+\");\n\t\t}\n\t\telse if (g\
    \ > 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\t\t}\n\t\telse if (g > 2.3)\
    \ {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\t}\n\t\telse if (g > 2.0) {\n\t\
    \t\tletter_grades.push_back(\"C+\");\n\t\t}\n\t\telse if (g > 1.7) {\n\t\t\tletter_grades.push_back(\"\
    C\");\n\t\t}\n\t\telse if (g > 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\
    \t\t}\n\t\telse if (g > 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\
    \t\telse if (g > 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse\
    \ if (g > 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\
    \t\tletter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;", " \
    \ for (auto &x : grades) {\n    if (x > 4.0 || x < 0.0) {\n      throw std::runtime_error(\"\
    Invalid grade\");\n    }\n  }\n  std::vector<std::string> new_grades(grades.size());\n\
    \  for (auto i = 0; i < grades.size(); i++) {\n    float grade = grades[i];\n\
    \    if (grade == 4.0) {\n      new_grades[i] = \"A+\";\n    } else if (grade\
    \ >= 3.7) {\n      new_grades[i] = \"A\";\n    } else if (grade >= 3.3) {\n  \
    \    new_grades[i] = \"A-\";\n    } else if (grade >= 3.0) {\n      new_grades[i]\
    \ = \"B+\";\n    } else if (grade >= 2.7) {\n      new_grades[i] = \"B\";\n  \
    \  } else if (grade >= 2.3) {\n      new_grades[i] = \"B-\";\n    } else if (grade\
    \ >= 2.0) {\n      new_grades[i] = \"C+\";\n    } else if (grade >= 1.7) {\n \
    \     new_grades[i] = \"C\";\n    } else if (grade >= 1.3) {\n      new_grades[i]\
    \ = \"C-\";\n    } else if (grade >= 1.0) {\n      new_grades[i] = \"D+\";\n \
    \   } else if (grade >= 0.7) {\n      new_grades[i] = \"D\";\n    } else if (grade\
    \ >= 0.0) {\n      new_grades[i] = \"D-\";\n    } else {\n      new_grades[i]\
    \ = \"E\";\n    }\n  }\n  return new_grades;", "\t//If the number of entries in\
    \ the vector is not the same as the number of grades, return the empty vector\n\
    \tif (grades.size() != 12) {\n\t\treturn {};\n\t}\n\tstd::vector<std::string>\
    \ grades_list;\n\tstd::vector<std::string> final_list;\n\tgrades_list.push_back(\"\
    D-\");\n\tgrades_list.push_back(\"D\");\n\tgrades_list.push_back(\"D+\");\n\t\
    grades_list.push_back(\"C-\");\n\tgrades_list.push_back(\"C\");\n\tgrades_list.push_back(\"\
    C+\");\n\tgrades_list.push_back(\"B-\");\n\tgrades_list.push_back(\"B\");\n\t\
    grades_list.push_back(\"B+\");\n\tgrades_list.push_back(\"A-\");\n\tgrades_list.push_back(\"\
    A\");\n\tgrades_list.push_back(\"A+\");\n\tfor (int i = 0; i < grades.size();\
    \ i++) {\n\t\tif (grades[i] >= grades[i + 1]) {\n\t\t\tfinal_list.push_back(grades_list[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tfinal_list.push_back(grades_list[i + 1]);\n\t\t}\n\t\
    }\n\treturn final_list;", "  std::vector<std::string> result;\n  for (auto it\
    \ = grades.begin(); it != grades.end(); ++it) {\n    if (*it >= 4.0) {\n     \
    \ result.push_back(\"A+\");\n    } else if (*it >= 3.7) {\n      result.push_back(\"\
    A\");\n    } else if (*it >= 3.3) {\n      result.push_back(\"A-\");\n    } else\
    \ if (*it >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (*it >= 2.7)\
    \ {\n      result.push_back(\"B\");\n    } else if (*it >= 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (*it >= 2.0) {\n      result.push_back(\"C+\");\n    } else\
    \ if (*it >= 1.7) {\n      result.push_back(\"C\");\n    } else if (*it >= 1.3)\
    \ {\n      result.push_back(\"C-\");\n    } else if (*it >= 1.0) {\n      result.push_back(\"\
    D+\");\n    } else if (*it >= 0.7) {\n      result.push_back(\"D\");\n    } else\
    \ if (*it >= 0.0) {\n      result.push_back(\"D-\");\n    } else {\n      result.push_back(\"\
    E\");\n    }\n  }\n  return result;", "   std::vector<std::string> result;\n \
    \  for(auto grade : grades) {\n       if(grade == 4.0)\n           result.push_back(\"\
    A+\");\n       else if(grade > 3.7)\n           result.push_back(\"A\");\n   \
    \    else if(grade > 3.3)\n           result.push_back(\"A-\");\n       else if(grade\
    \ > 3.0)\n           result.push_back(\"B+\");\n       else if(grade > 2.7)\n\
    \           result.push_back(\"B\");\n       else if(grade > 2.3)\n          \
    \ result.push_back(\"B-\");\n       else if(grade > 2.0)\n           result.push_back(\"\
    C+\");\n       else if(grade > 1.7)\n           result.push_back(\"C\");\n   \
    \    else if(grade > 1.3)\n           result.push_back(\"C-\");\n       else if(grade\
    \ > 1.0)\n           result.push_back(\"D+\");\n       else if(grade > 0.7)\n\
    \           result.push_back(\"D\");\n       else if(grade > 0.0)\n          \
    \ result.push_back(\"D-\");\n       else\n           result.push_back(\"E\");\n\
    \   }\n   return result;", "  std::vector<std::string> result;\n  for (int i =\
    \ 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grades[i] >= 3.7) {\n      result.push_back(\"A\");\n \
    \   } else if (grades[i] >= 3.3) {\n      result.push_back(\"A-\");\n    } else\
    \ if (grades[i] >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grades[i]\
    \ >= 2.7) {\n      result.push_back(\"B\");\n    } else if (grades[i] >= 2.3)\
    \ {\n      result.push_back(\"B-\");\n    } else if (grades[i] >= 2.0) {\n   \
    \   result.push_back(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      result.push_back(\"\
    C\");\n    } else if (grades[i] >= 1.3) {\n      result.push_back(\"C-\");\n \
    \   } else if (grades[i] >= 1.0) {\n      result.push_back(\"D+\");\n    } else\
    \ if (grades[i] >= 0.7) {\n      result.push_back(\"D\");\n    } else if (grades[i]\
    \ >= 0.0) {\n      result.push_back(\"D-\");\n    } else {\n      result.push_back(\"\
    E\");\n    }\n  }\n  return result;", "    std::vector<std::string> result;\n\
    \    for (float grade : grades) {\n        if (grade > 4.0 || grade < 0.0) {\n\
    \            result.push_back(\"E\");\n        } else if (grade >= 3.7) {\n  \
    \          result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n    \
    \        result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n     \
    \       result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n      \
    \      result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n        \
    \    result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n         \
    \   result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n          \
    \  result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"\
    C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\"\
    );\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n\
    \        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n \
    \       }\n    }\n    return result;", "    std::vector<std::string> grades_str;\n\
    \    for (float grade : grades) {\n        grades_str.push_back(\n           \
    \ grade >= 4.0 ? \"A+\" : \n            grade >= 3.7 ? \"A\" : \n            grade\
    \ >= 3.3 ? \"A-\" : \n            grade >= 3.0 ? \"B+\" : \n            grade\
    \ >= 2.7 ? \"B\" : \n            grade >= 2.3 ? \"B-\" : \n            grade >=\
    \ 2.0 ? \"C+\" : \n            grade >= 1.7 ? \"C\" : \n            grade >= 1.3\
    \ ? \"C-\" : \n            grade >= 1.0 ? \"D+\" : \n            grade >= 0.7\
    \ ? \"D\" : \n            grade >= 0.0 ? \"D-\" : \"E\"\n        );\n    }\n \
    \   return grades_str;", "\tstd::vector<std::string> letters(grades.size());\n\
    \tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] > 4.0) {\n\t\t\t\
    letters[i] = \"A+\";\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\t\t\tletters[i]\
    \ = \"A\";\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\tletters[i] = \"A-\"\
    ;\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tletters[i] = \"B+\";\n\t\t}\n\
    \t\telse if (grades[i] > 2.7) {\n\t\t\tletters[i] = \"B\";\n\t\t}\n\t\telse if\
    \ (grades[i] > 2.3) {\n\t\t\tletters[i] = \"B-\";\n\t\t}\n\t\telse if (grades[i]\
    \ > 2.0) {\n\t\t\tletters[i] = \"C+\";\n\t\t}\n\t\telse if (grades[i] > 1.7) {\n\
    \t\t\tletters[i] = \"C\";\n\t\t}\n\t\telse if (grades[i] > 1.3) {\n\t\t\tletters[i]\
    \ = \"C-\";\n\t\t}\n\t\telse if (grades[i] > 1.0) {\n\t\t\tletters[i] = \"D+\"\
    ;\n\t\t}\n\t\telse if (grades[i] > 0.7) {\n\t\t\tletters[i] = \"D\";\n\t\t}\n\t\
    \telse if (grades[i] > 0.0) {\n\t\t\tletters[i] = \"D-\";\n\t\t}\n\t\telse {\n\
    \t\t\tletters[i] = \"E\";\n\t\t}\n\t}\n\treturn letters;", "\tstd::vector<std::string>\
    \ letter_grades;\n\tfor (float grade : grades) {\n\t\tif (grade >= 4.0)\n\t\t\t\
    letter_grades.push_back(\"A+\");\n\t\telse if (grade >= 3.7)\n\t\t\tletter_grades.push_back(\"\
    A\");\n\t\telse if (grade >= 3.3)\n\t\t\tletter_grades.push_back(\"A-\");\n\t\t\
    else if (grade >= 3.0)\n\t\t\tletter_grades.push_back(\"B+\");\n\t\telse if (grade\
    \ >= 2.7)\n\t\t\tletter_grades.push_back(\"B\");\n\t\telse if (grade >= 2.3)\n\
    \t\t\tletter_grades.push_back(\"B-\");\n\t\telse if (grade >= 2.0)\n\t\t\tletter_grades.push_back(\"\
    C+\");\n\t\telse if (grade >= 1.7)\n\t\t\tletter_grades.push_back(\"C\");\n\t\t\
    else if (grade >= 1.3)\n\t\t\tletter_grades.push_back(\"C-\");\n\t\telse if (grade\
    \ >= 1.0)\n\t\t\tletter_grades.push_back(\"D+\");\n\t\telse if (grade >= 0.7)\n\
    \t\t\tletter_grades.push_back(\"D\");\n\t\telse if (grade >= 0.0)\n\t\t\tletter_grades.push_back(\"\
    D-\");\n\t\telse\n\t\t\tletter_grades.push_back(\"E\");\n\t}\n\treturn letter_grades;",
  "    std::vector<std::string> result;\n    for (auto grade : grades) {\n       \
    \ if (grade == 4.0) result.push_back(\"A+\");\n        else if (grade > 3.7) result.push_back(\"\
    A\");\n        else if (grade > 3.3) result.push_back(\"A-\");\n        else if\
    \ (grade > 3.0) result.push_back(\"B+\");\n        else if (grade > 2.7) result.push_back(\"\
    B\");\n        else if (grade > 2.3) result.push_back(\"B-\");\n        else if\
    \ (grade > 2.0) result.push_back(\"C+\");\n        else if (grade > 1.7) result.push_back(\"\
    C\");\n        else if (grade > 1.3) result.push_back(\"C-\");\n        else if\
    \ (grade > 1.0) result.push_back(\"D+\");\n        else if (grade > 0.7) result.push_back(\"\
    D\");\n        else if (grade > 0.0) result.push_back(\"D-\");\n        else result.push_back(\"\
    E\");\n    }\n    return result;", "    std::vector<std::string> newGrades;\n\
    \    for(int i = 0; i < grades.size(); i++){\n        if(grades[i] == 4.0){\n\
    \            newGrades.push_back(\"A+\");\n        }else if(grades[i] < 4.0 &&\
    \ grades[i] >= 3.7){\n            newGrades.push_back(\"A\");\n        }else if(grades[i]\
    \ < 3.7 && grades[i] >= 3.3){\n            newGrades.push_back(\"A-\");\n    \
    \    }else if(grades[i] < 3.3 && grades[i] >= 3.0){\n            newGrades.push_back(\"\
    B+\");\n        }else if(grades[i] < 3.0 && grades[i] >= 2.7){\n            newGrades.push_back(\"\
    B\");\n        }else if(grades[i] < 2.7 && grades[i] >= 2.3){\n            newGrades.push_back(\"\
    B-\");\n        }else if(grades[i] < 2.3 && grades[i] >= 2.0){\n            newGrades.push_back(\"\
    C+\");\n        }else if(grades[i] < 2.0 && grades[i] >= 1.7){\n            newGrades.push_back(\"\
    C\");\n        }else if(grades[i] < 1.7 && grades[i] >= 1.3){\n            newGrades.push_back(\"\
    C-\");\n        }else if(grades[i] < 1.3 && grades[i] >= 1.0){\n            newGrades.push_back(\"\
    D+\");\n        }else if(grades[i] < 1.0 && grades[i] >= 0.7){\n            newGrades.push_back(\"\
    D\");\n        }else if(grades[i] < 0.7 && grades[i] >= 0.0){\n            newGrades.push_back(\"\
    D-\");\n        }else if(grades[i] == 0.0){\n            newGrades.push_back(\"\
    E\");\n        }\n    }\n    return newGrades;", "    std::vector<std::string>\
    \ letter_grades;\n    for (auto i : grades) {\n        if (i == 4.0)\n       \
    \     letter_grades.push_back(\"A+\");\n        else if (i >= 3.7)\n         \
    \   letter_grades.push_back(\"A\");\n        else if (i >= 3.3)\n            letter_grades.push_back(\"\
    A-\");\n        else if (i >= 3.0)\n            letter_grades.push_back(\"B+\"\
    );\n        else if (i >= 2.7)\n            letter_grades.push_back(\"B\");\n\
    \        else if (i >= 2.3)\n            letter_grades.push_back(\"B-\");\n  \
    \      else if (i >= 2.0)\n            letter_grades.push_back(\"C+\");\n    \
    \    else if (i >= 1.7)\n            letter_grades.push_back(\"C\");\n       \
    \ else if (i >= 1.3)\n            letter_grades.push_back(\"C-\");\n        else\
    \ if (i >= 1.0)\n            letter_grades.push_back(\"D+\");\n        else if\
    \ (i >= 0.7)\n            letter_grades.push_back(\"D\");\n        else if (i\
    \ >= 0.0)\n            letter_grades.push_back(\"D-\");\n        else\n      \
    \      letter_grades.push_back(\"E\");\n    }\n    return letter_grades;", " \
    \   std::vector<std::string> result;\n    for (auto grade : grades) {\n      \
    \  if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else\
    \ if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if\
    \ (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >=\
    \ 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3)\
    \ {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n\
    \            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n \
    \           result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n   \
    \         result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n    \
    \        result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n     \
    \       result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n       \
    \     result.push_back(\"D-\");\n        } else {\n            result.push_back(\"\
    E\");\n        }\n    }\n    return result;", "\treturn {};", "    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ >= 4.0) result.push_back(\"A+\");\n        else if (grades[i] >= 3.7) result.push_back(\"\
    A\");\n        else if (grades[i] >= 3.3) result.push_back(\"A-\");\n        else\
    \ if (grades[i] >= 3.0) result.push_back(\"B+\");\n        else if (grades[i]\
    \ >= 2.7) result.push_back(\"B\");\n        else if (grades[i] >= 2.3) result.push_back(\"\
    B-\");\n        else if (grades[i] >= 2.0) result.push_back(\"C+\");\n       \
    \ else if (grades[i] >= 1.7) result.push_back(\"C\");\n        else if (grades[i]\
    \ >= 1.3) result.push_back(\"C-\");\n        else if (grades[i] >= 1.0) result.push_back(\"\
    D+\");\n        else if (grades[i] >= 0.7) result.push_back(\"D\");\n        else\
    \ if (grades[i] >= 0.0) result.push_back(\"D-\");\n        else result.push_back(\"\
    E\");\n    }\n    return result;", "  std::vector<std::string> grades_letter;\n\
    \  int n = grades.size();\n  std::cout << n << std::endl;\n  for (int i = 0; i\
    \ < n; i++) {\n    std::cout << grades[i] << std::endl;\n    if (grades[i] ==\
    \ 4.0) {\n      grades_letter.push_back(\"A+\");\n    } else if (grades[i] > 3.7)\
    \ {\n      grades_letter.push_back(\"A\");\n    } else if (grades[i] > 3.3) {\n\
    \      grades_letter.push_back(\"A-\");\n    } else if (grades[i] > 3.0) {\n \
    \     grades_letter.push_back(\"B+\");\n    } else if (grades[i] > 2.7) {\n  \
    \    grades_letter.push_back(\"B\");\n    } else if (grades[i] > 2.3) {\n    \
    \  grades_letter.push_back(\"B-\");\n    } else if (grades[i] > 2.0) {\n     \
    \ grades_letter.push_back(\"C+\");\n    } else if (grades[i] > 1.7) {\n      grades_letter.push_back(\"\
    C\");\n    } else if (grades[i] > 1.3) {\n      grades_letter.push_back(\"C-\"\
    );\n    } else if (grades[i] > 1.0) {\n      grades_letter.push_back(\"D+\");\n\
    \    } else if (grades[i] > 0.7) {\n      grades_letter.push_back(\"D\");\n  \
    \  } else if (grades[i] > 0.0) {\n      grades_letter.push_back(\"D-\");\n   \
    \ } else {\n      grades_letter.push_back(\"E\");\n    }\n  }\n  return grades_letter;",
  "  std::vector<std::string> a;\n  for(auto &x: grades){\n    if(x == 4) a.push_back(\"\
    A+\");\n    else if(x > 3.7) a.push_back(\"A\");\n    else if(x > 3.3) a.push_back(\"\
    A-\");\n    else if(x > 3) a.push_back(\"B+\");\n    else if(x > 2.7) a.push_back(\"\
    B\");\n    else if(x > 2.3) a.push_back(\"B-\");\n    else if(x > 2) a.push_back(\"\
    C+\");\n    else if(x > 1.7) a.push_back(\"C\");\n    else if(x > 1.3) a.push_back(\"\
    C-\");\n    else if(x > 1) a.push_back(\"D+\");\n    else if(x > 0.7) a.push_back(\"\
    D\");\n    else if(x > 0) a.push_back(\"D-\");\n    else a.push_back(\"E\");\n\
    \  }\n  return a;", "    std::vector<std::string> ans;\n    for(float grade :\
    \ grades){\n        if(grade == 4.0) ans.push_back(\"A+\");\n        else if(grade\
    \ > 3.7) ans.push_back(\"A\");\n        else if(grade > 3.3) ans.push_back(\"\
    A-\");\n        else if(grade > 3.0) ans.push_back(\"B+\");\n        else if(grade\
    \ > 2.7) ans.push_back(\"B\");\n        else if(grade > 2.3) ans.push_back(\"\
    B-\");\n        else if(grade > 2.0) ans.push_back(\"C+\");\n        else if(grade\
    \ > 1.7) ans.push_back(\"C\");\n        else if(grade > 1.3) ans.push_back(\"\
    C-\");\n        else if(grade > 1.0) ans.push_back(\"D+\");\n        else if(grade\
    \ > 0.7) ans.push_back(\"D\");\n        else if(grade > 0.0) ans.push_back(\"\
    D-\");\n        else ans.push_back(\"E\");\n    }\n    return ans;", "\tstd::vector<std::string>\
    \ letter_grades;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i]\
    \ >= 4.0) {\n\t\t\tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.7) {\n\t\t\tletter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.3) {\n\t\t\tletter_grades.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.0) {\n\t\t\tletter_grades.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\t\
    letter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;", "    std::vector<std::string>\
    \ result(grades.size());\n    for (int i = 0; i < grades.size(); i++) {\n    \
    \    if (grades[i] == 4.0) {\n            result[i] = \"A+\";\n        } else\
    \ if (grades[i] >= 3.7) {\n            result[i] = \"A\";\n        } else if (grades[i]\
    \ >= 3.3) {\n            result[i] = \"A-\";\n        } else if (grades[i] >=\
    \ 3.0) {\n            result[i] = \"B+\";\n        } else if (grades[i] >= 2.7)\
    \ {\n            result[i] = \"B\";\n        } else if (grades[i] >= 2.3) {\n\
    \            result[i] = \"B-\";\n        } else if (grades[i] >= 2.0) {\n   \
    \         result[i] = \"C+\";\n        } else if (grades[i] >= 1.7) {\n      \
    \      result[i] = \"C\";\n        } else if (grades[i] >= 1.3) {\n          \
    \  result[i] = \"C-\";\n        } else if (grades[i] >= 1.0) {\n            result[i]\
    \ = \"D+\";\n        } else if (grades[i] >= 0.7) {\n            result[i] = \"\
    D\";\n        } else if (grades[i] >= 0.0) {\n            result[i] = \"D-\";\n\
    \        } else {\n            result[i] = \"E\";\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> results;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] >= 4.0) {\n            results.push_back(\"A+\"\
    );\n        } else if (grades[i] >= 3.7) {\n            results.push_back(\"A\"\
    );\n        } else if (grades[i] >= 3.3) {\n            results.push_back(\"A-\"\
    );\n        } else if (grades[i] >= 3.0) {\n            results.push_back(\"B+\"\
    );\n        } else if (grades[i] >= 2.7) {\n            results.push_back(\"B\"\
    );\n        } else if (grades[i] >= 2.3) {\n            results.push_back(\"B-\"\
    );\n        } else if (grades[i] >= 2.0) {\n            results.push_back(\"C+\"\
    );\n        } else if (grades[i] >= 1.7) {\n            results.push_back(\"C\"\
    );\n        } else if (grades[i] >= 1.3) {\n            results.push_back(\"C-\"\
    );\n        } else if (grades[i] >= 1.0) {\n            results.push_back(\"D+\"\
    );\n        } else if (grades[i] >= 0.7) {\n            results.push_back(\"D\"\
    );\n        } else if (grades[i] >= 0.0) {\n            results.push_back(\"D-\"\
    );\n        } else {\n            results.push_back(\"E\");\n        }\n    }\n\
    \    return results;", "    std::vector<std::string> letters;\n    for (const\
    \ auto& grade : grades) {\n        if (grade == 4.0) {\n            letters.push_back(\"\
    A+\");\n        } else if (grade > 3.7) {\n            letters.push_back(\"A\"\
    );\n        } else if (grade > 3.3) {\n            letters.push_back(\"A-\");\n\
    \        } else if (grade > 3.0) {\n            letters.push_back(\"B+\");\n \
    \       } else if (grade > 2.7) {\n            letters.push_back(\"B\");\n   \
    \     } else if (grade > 2.3) {\n            letters.push_back(\"B-\");\n    \
    \    } else if (grade > 2.0) {\n            letters.push_back(\"C+\");\n     \
    \   } else if (grade > 1.7) {\n            letters.push_back(\"C\");\n       \
    \ } else if (grade > 1.3) {\n            letters.push_back(\"C-\");\n        }\
    \ else if (grade > 1.0) {\n            letters.push_back(\"D+\");\n        } else\
    \ if (grade > 0.7) {\n            letters.push_back(\"D\");\n        } else if\
    \ (grade > 0.0) {\n            letters.push_back(\"D-\");\n        } else {\n\
    \            letters.push_back(\"E\");\n        }\n    }\n    return letters;",
  "  std::vector<std::string> letter_grades;\n  for (int i = 0; i < grades.size();\
    \ i++) {\n    if (grades[i] >= 4.0) {\n      letter_grades.push_back(\"A+\");\n\
    \    } else if (grades[i] >= 3.7) {\n      letter_grades.push_back(\"A\");\n \
    \   } else if (grades[i] >= 3.3) {\n      letter_grades.push_back(\"A-\");\n \
    \   } else if (grades[i] >= 3.0) {\n      letter_grades.push_back(\"B+\");\n \
    \   } else if (grades[i] >= 2.7) {\n      letter_grades.push_back(\"B\");\n  \
    \  } else if (grades[i] >= 2.3) {\n      letter_grades.push_back(\"B-\");\n  \
    \  } else if (grades[i] >= 2.0) {\n      letter_grades.push_back(\"C+\");\n  \
    \  } else if (grades[i] >= 1.7) {\n      letter_grades.push_back(\"C\");\n   \
    \ } else if (grades[i] >= 1.3) {\n      letter_grades.push_back(\"C-\");\n   \
    \ } else if (grades[i] >= 1.0) {\n      letter_grades.push_back(\"D+\");\n   \
    \ } else if (grades[i] >= 0.7) {\n      letter_grades.push_back(\"D\");\n    }\
    \ else if (grades[i] >= 0.0) {\n      letter_grades.push_back(\"D-\");\n    }\
    \ else {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;",
  "\tstd::vector<std::string> letter_grades;\n\tfor (auto i = grades.begin(); i !=\
    \ grades.end(); i++) {\n\t\tif (*i >= 4.0) {\n\t\t\tletter_grades.push_back(\"\
    A+\");\n\t\t}\n\t\telse if (*i >= 3.7) {\n\t\t\tletter_grades.push_back(\"A\"\
    );\n\t\t}\n\t\telse if (*i >= 3.3) {\n\t\t\tletter_grades.push_back(\"A-\");\n\
    \t\t}\n\t\telse if (*i >= 3.0) {\n\t\t\tletter_grades.push_back(\"B+\");\n\t\t\
    }\n\t\telse if (*i >= 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\t\t}\n\t\
    \telse if (*i >= 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\t}\n\t\telse\
    \ if (*i >= 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\t\t}\n\t\telse if\
    \ (*i >= 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\t\t}\n\t\telse if (*i\
    \ >= 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\t}\n\t\telse if (*i >=\
    \ 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\t\telse if (*i >= 0.7)\
    \ {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse if (*i >= 0.0) {\n\
    \t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tletter_grades.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn letter_grades;", "\tstd::vector<std::string> result;\n\
    \tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0) {\n\t\t\
    \tresult.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\t\t\tresult.push_back(\"\
    A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\tresult.push_back(\"A-\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"B+\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\");\n\t\t\
    }\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t}\n\t\
    \telse if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i] >=\
    \ 0.7) {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] >= 0.0)\
    \ {\n\t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;", "    std::vector<std::string> ans;\n   \
    \ for(float num : grades){\n        if(num > 4.0){\n            ans.push_back(\"\
    A+\");\n        }else if(num > 3.7){\n            ans.push_back(\"A\");\n    \
    \    }else if(num > 3.3){\n            ans.push_back(\"A-\");\n        }else if(num\
    \ > 3.0){\n            ans.push_back(\"B+\");\n        }else if(num > 2.7){\n\
    \            ans.push_back(\"B\");\n        }else if(num > 2.3){\n           \
    \ ans.push_back(\"B-\");\n        }else if(num > 2.0){\n            ans.push_back(\"\
    C+\");\n        }else if(num > 1.7){\n            ans.push_back(\"C\");\n    \
    \    }else if(num > 1.3){\n            ans.push_back(\"C-\");\n        }else if(num\
    \ > 1.0){\n            ans.push_back(\"D+\");\n        }else if(num > 0.7){\n\
    \            ans.push_back(\"D\");\n        }else if(num > 0.0){\n           \
    \ ans.push_back(\"D-\");\n        }else{\n            ans.push_back(\"E\");\n\
    \        }\n    }\n    return ans;", "    std::vector<std::string> letter;\n \
    \   for(float grade : grades){\n        std::string s;\n        if(grade >= 4.0){\n\
    \            s = \"A+\";\n        }\n        else if(grade >= 3.7){\n        \
    \    s = \"A\";\n        }\n        else if(grade >= 3.3){\n            s = \"\
    A-\";\n        }\n        else if(grade >= 3.0){\n            s = \"B+\";\n  \
    \      }\n        else if(grade >= 2.7){\n            s = \"B\";\n        }\n\
    \        else if(grade >= 2.3){\n            s = \"B-\";\n        }\n        else\
    \ if(grade >= 2.0){\n            s = \"C+\";\n        }\n        else if(grade\
    \ >= 1.7){\n            s = \"C\";\n        }\n        else if(grade >= 1.3){\n\
    \            s = \"C-\";\n        }\n        else if(grade >= 1.0){\n        \
    \    s = \"D+\";\n        }\n        else if(grade >= 0.7){\n            s = \"\
    D\";\n        }\n        else if(grade >= 0.0){\n            s = \"D-\";\n   \
    \     }\n        else{\n            s = \"E\";\n        }\n        letter.push_back(s);\n\
    \    }\n    return letter;", "  std::vector<std::string> result;\n  for (int i\
    \ = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grades[i] >= 3.7) {\n      result.push_back(\"A\");\n \
    \   } else if (grades[i] >= 3.3) {\n      result.push_back(\"A-\");\n    } else\
    \ if (grades[i] >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grades[i]\
    \ >= 2.7) {\n      result.push_back(\"B\");\n    } else if (grades[i] >= 2.3)\
    \ {\n      result.push_back(\"B-\");\n    } else if (grades[i] >= 2.0) {\n   \
    \   result.push_back(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      result.push_back(\"\
    C\");\n    } else if (grades[i] >= 1.3) {\n      result.push_back(\"C-\");\n \
    \   } else if (grades[i] >= 1.0) {\n      result.push_back(\"D+\");\n    } else\
    \ if (grades[i] >= 0.7) {\n      result.push_back(\"D\");\n    } else if (grades[i]\
    \ > 0.0) {\n      result.push_back(\"D-\");\n    } else {\n      result.push_back(\"\
    E\");\n    }\n  }\n  return result;", "  // Write your code here\n  std::vector<std::string>\
    \ result;\n  int size = grades.size();\n  for(int i = 0; i < size; i++){\n   \
    \ if(grades[i] >= 4){\n      result.push_back(\"A+\");\n    }\n    else if(grades[i]\
    \ >= 3.7){\n      result.push_back(\"A\");\n    }\n    else if(grades[i] >= 3.3){\n\
    \      result.push_back(\"A-\");\n    }\n    else if(grades[i] >= 3){\n      result.push_back(\"\
    B+\");\n    }\n    else if(grades[i] >= 2.7){\n      result.push_back(\"B\");\n\
    \    }\n    else if(grades[i] >= 2.3){\n      result.push_back(\"B-\");\n    }\n\
    \    else if(grades[i] >= 2){\n      result.push_back(\"C+\");\n    }\n    else\
    \ if(grades[i] >= 1.7){\n      result.push_back(\"C\");\n    }\n    else if(grades[i]\
    \ >= 1.3){\n      result.push_back(\"C-\");\n    }\n    else if(grades[i] >= 1){\n\
    \      result.push_back(\"D+\");\n    }\n    else if(grades[i] >= 0.7){\n    \
    \  result.push_back(\"D\");\n    }\n    else if(grades[i] >= 0){\n      result.push_back(\"\
    D-\");\n    }\n    else if(grades[i] >= 0){\n      result.push_back(\"E\");\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (auto grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"\
    A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\"\
    );\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n\
    \        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n \
    \       } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n   \
    \     } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n    \
    \    } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n     \
    \   } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n       \
    \ } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        }\
    \ else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else\
    \ if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if\
    \ (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n\
    \            result.push_back(\"E\");\n        }\n    }\n    return result;",
  "    std::vector<std::string> ans;\n    for(auto x: grades){\n        if(x >= 4.0)\
    \ ans.push_back(\"A+\");\n        else if(x >= 3.7) ans.push_back(\"A\");\n  \
    \      else if(x >= 3.3) ans.push_back(\"A-\");\n        else if(x >= 3.0) ans.push_back(\"\
    B+\");\n        else if(x >= 2.7) ans.push_back(\"B\");\n        else if(x >=\
    \ 2.3) ans.push_back(\"B-\");\n        else if(x >= 2.0) ans.push_back(\"C+\"\
    );\n        else if(x >= 1.7) ans.push_back(\"C\");\n        else if(x >= 1.3)\
    \ ans.push_back(\"C-\");\n        else if(x >= 1.0) ans.push_back(\"D+\");\n \
    \       else if(x >= 0.7) ans.push_back(\"D\");\n        else if(x >= 0.0) ans.push_back(\"\
    D-\");\n        else ans.push_back(\"E\");\n    }\n    return ans;", "    std::vector<std::string>\
    \ letterGrades;\n    for (auto it = grades.begin(); it != grades.end(); ++it)\
    \ {\n        if (*it >= 4.0) {\n            letterGrades.push_back(\"A+\");\n\
    \        } else if (*it >= 3.7) {\n            letterGrades.push_back(\"A\");\n\
    \        } else if (*it >= 3.3) {\n            letterGrades.push_back(\"A-\");\n\
    \        } else if (*it >= 3.0) {\n            letterGrades.push_back(\"B+\");\n\
    \        } else if (*it >= 2.7) {\n            letterGrades.push_back(\"B\");\n\
    \        } else if (*it >= 2.3) {\n            letterGrades.push_back(\"B-\");\n\
    \        } else if (*it >= 2.0) {\n            letterGrades.push_back(\"C+\");\n\
    \        } else if (*it >= 1.7) {\n            letterGrades.push_back(\"C\");\n\
    \        } else if (*it >= 1.3) {\n            letterGrades.push_back(\"C-\");\n\
    \        } else if (*it >= 1.0) {\n            letterGrades.push_back(\"D+\");\n\
    \        } else if (*it >= 0.7) {\n            letterGrades.push_back(\"D\");\n\
    \        } else if (*it >= 0.0) {\n            letterGrades.push_back(\"D-\");\n\
    \        } else {\n            letterGrades.push_back(\"E\");\n        }\n   \
    \ }\n    return letterGrades;", "  for (int i = 0; i < grades.size(); i++) {\n\
    \    switch(true) {\n      case grades[i] >= 4.0:\n        grades[i] = 'A+';\n\
    \        break;\n      case grades[i] >= 3.7:\n        grades[i] = 'A';\n    \
    \    break;\n      case grades[i] >= 3.3:\n        grades[i] = 'A-';\n       \
    \ break;\n      case grades[i] >= 3.0:\n        grades[i] = 'B+';\n        break;\n\
    \      case grades[i] >= 2.7:\n        grades[i] = 'B';\n        break;\n    \
    \  case grades[i] >= 2.3:\n        grades[i] = 'B-';\n        break;\n      case\
    \ grades[i] >= 2.0:\n        grades[i] = 'C+';\n        break;\n      case grades[i]\
    \ >= 1.7:\n        grades[i] = 'C';\n        break;\n      case grades[i] >= 1.3:\n\
    \        grades[i] = 'C-';\n        break;\n      case grades[i] >= 1.0:\n   \
    \     grades[i] = 'D+';\n        break;\n      case grades[i] >= 0.7:\n      \
    \  grades[i] = 'D';\n        break;\n      case grades[i] >= 0.0:\n        grades[i]\
    \ = 'D-';\n        break;\n      case grades[i] < 0.0:\n        grades[i] = 'E';\n\
    \        break;\n    }\n  }\n  return grades;", "    // your code here\n    std::vector<std::string>\
    \ result(grades.size());\n    for(auto i = 0; i < grades.size(); i++){\n     \
    \   float grade = grades[i];\n        if(grade < 0.7){\n            result[i]\
    \ = \"D-\";\n        }else if(grade < 1.0){\n            result[i] = \"D+\";\n\
    \        }else if(grade < 1.3){\n            result[i] = \"C-\";\n        }else\
    \ if(grade < 1.7){\n            result[i] = \"C\";\n        }else if(grade < 2.0){\n\
    \            result[i] = \"C+\";\n        }else if(grade < 2.3){\n           \
    \ result[i] = \"B-\";\n        }else if(grade < 2.7){\n            result[i] =\
    \ \"B\";\n        }else if(grade < 3.0){\n            result[i] = \"B+\";\n  \
    \      }else if(grade < 3.3){\n            result[i] = \"A-\";\n        }else\
    \ if(grade < 3.7){\n            result[i] = \"A\";\n        }else{\n         \
    \   result[i] = \"A+\";\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ ans;\n    for(int i = 0; i < grades.size(); i++){\n        if(grades[i] == 4.0)\
    \ {\n            ans.push_back(\"A+\");\n        } else if(grades[i] >= 3.7 &&\
    \ grades[i] < 4.0) {\n            ans.push_back(\"A\");\n        } else if(grades[i]\
    \ >= 3.3 && grades[i] < 3.7) {\n            ans.push_back(\"A-\");\n        }\
    \ else if(grades[i] >= 3.0 && grades[i] < 3.3) {\n            ans.push_back(\"\
    B+\");\n        } else if(grades[i] >= 2.7 && grades[i] < 3.0) {\n           \
    \ ans.push_back(\"B\");\n        } else if(grades[i] >= 2.3 && grades[i] < 2.7)\
    \ {\n            ans.push_back(\"B-\");\n        } else if(grades[i] >= 2.0 &&\
    \ grades[i] < 2.3) {\n            ans.push_back(\"C+\");\n        } else if(grades[i]\
    \ >= 1.7 && grades[i] < 2.0) {\n            ans.push_back(\"C\");\n        } else\
    \ if(grades[i] >= 1.3 && grades[i] < 1.7) {\n            ans.push_back(\"C-\"\
    );\n        } else if(grades[i] >= 1.0 && grades[i] < 1.3) {\n            ans.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7 && grades[i] < 1.0) {\n           \
    \ ans.push_back(\"D\");\n        } else if(grades[i] >= 0.0 && grades[i] < 0.7)\
    \ {\n            ans.push_back(\"D-\");\n        } else if(grades[i] == 0.0) {\n\
    \            ans.push_back(\"E\");\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ v;\n    for(float i : grades){\n        if(i==4.0) v.push_back(\"A+\");\n  \
    \      else if(i>3.7) v.push_back(\"A\");\n        else if(i>3.3) v.push_back(\"\
    A-\");\n        else if(i>3.0) v.push_back(\"B+\");\n        else if(i>2.7) v.push_back(\"\
    B\");\n        else if(i>2.3) v.push_back(\"B-\");\n        else if(i>2.0) v.push_back(\"\
    C+\");\n        else if(i>1.7) v.push_back(\"C\");\n        else if(i>1.3) v.push_back(\"\
    C-\");\n        else if(i>1.0) v.push_back(\"D+\");\n        else if(i>0.7) v.push_back(\"\
    D\");\n        else if(i>0.0) v.push_back(\"D-\");\n        else v.push_back(\"\
    E\");\n    }\n    return v;", "\tstd::vector<std::string> result;\n\tfor (int\
    \ i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0) {\n\t\t\tresult.push_back(\"\
    A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\t\t\tresult.push_back(\"A\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\tresult.push_back(\"A-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tresult.push_back(\"B+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tresult.push_back(\"B\");\n\t\t}\n\t\
    \telse if (grades[i] >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i] >=\
    \ 1.0) {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i] >= 0.7)\
    \ {\n\t\t\tresult.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] >= 0.0) {\n\
    \t\t\tresult.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn result;", "  std::vector<std::string> result;\n  for\
    \ (float grade : grades) {\n    if (grade >= 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      result.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      result.push_back(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      result.push_back(\"B\");\n    } else if (grade >= 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      result.push_back(\"C+\");\n    }\
    \ else if (grade >= 1.7) {\n      result.push_back(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      result.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      result.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      result.push_back(\"D-\");\n    }\
    \ else {\n      result.push_back(\"E\");\n    }\n  }\n  return result;", "   \
    \ std::vector<std::string> letter_grades;\n    for (float i : grades) {\n    \
    \    std::string grade;\n        if (i >= 4.0) {\n            grade = \"A+\";\n\
    \        } else if (i >= 3.7) {\n            grade = \"A\";\n        } else if\
    \ (i >= 3.3) {\n            grade = \"A-\";\n        } else if (i >= 3.0) {\n\
    \            grade = \"B+\";\n        } else if (i >= 2.7) {\n            grade\
    \ = \"B\";\n        } else if (i >= 2.3) {\n            grade = \"B-\";\n    \
    \    } else if (i >= 2.0) {\n            grade = \"C+\";\n        } else if (i\
    \ >= 1.7) {\n            grade = \"C\";\n        } else if (i >= 1.3) {\n    \
    \        grade = \"C-\";\n        } else if (i >= 1.0) {\n            grade =\
    \ \"D+\";\n        } else if (i >= 0.7) {\n            grade = \"D\";\n      \
    \  } else if (i > 0.0) {\n            grade = \"D-\";\n        } else {\n    \
    \        grade = \"E\";\n        }\n        letter_grades.push_back(grade);\n\
    \    }\n    return letter_grades;", "    std::vector<std::string> letter_grades;\n\
    \    for (float grade : grades) {\n        if (grade == 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grade > 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grade > 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grade > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grade > 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grade > 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grade > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grade > 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grade > 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grade > 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grade > 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grade > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;", "  std::vector<std::string> v = {\"A+\"\
    , \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\",\
    \ \"D-\", \"E\"};\n  std::vector<float> f = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7, 0.0, 0.0};\n  std::vector<std::string> result;\n  for (int\
    \ i = 0; i < grades.size(); i++) {\n    for (int j = 0; j < f.size(); j++) {\n\
    \      if (grades[i] >= f[j]) {\n        result.push_back(v[j]);\n        break;\n\
    \      }\n    }\n  }\n  return result;", "    std::vector<std::string> result;\n\
    \    std::string letter;\n    for (float i : grades) {\n        if (i == 4.0)\
    \ {\n            letter = \"A+\";\n        } else if (i > 3.7) {\n           \
    \ letter = \"A\";\n        } else if (i > 3.3) {\n            letter = \"A-\"\
    ;\n        } else if (i > 3.0) {\n            letter = \"B+\";\n        } else\
    \ if (i > 2.7) {\n            letter = \"B\";\n        } else if (i > 2.3) {\n\
    \            letter = \"B-\";\n        } else if (i > 2.0) {\n            letter\
    \ = \"C+\";\n        } else if (i > 1.7) {\n            letter = \"C\";\n    \
    \    } else if (i > 1.3) {\n            letter = \"C-\";\n        } else if (i\
    \ > 1.0) {\n            letter = \"D+\";\n        } else if (i > 0.7) {\n    \
    \        letter = \"D\";\n        } else if (i > 0.0) {\n            letter =\
    \ \"D-\";\n        } else {\n            letter = \"E\";\n        }\n        result.push_back(letter);\n\
    \    }\n    return result;", "    std::vector<std::string> results;\n    for (int\
    \ i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) results.push_back(\"\
    A+\");\n        else if (grades[i] >= 3.7) results.push_back(\"A\");\n       \
    \ else if (grades[i] >= 3.3) results.push_back(\"A-\");\n        else if (grades[i]\
    \ >= 3.0) results.push_back(\"B+\");\n        else if (grades[i] >= 2.7) results.push_back(\"\
    B\");\n        else if (grades[i] >= 2.3) results.push_back(\"B-\");\n       \
    \ else if (grades[i] >= 2.0) results.push_back(\"C+\");\n        else if (grades[i]\
    \ >= 1.7) results.push_back(\"C\");\n        else if (grades[i] >= 1.3) results.push_back(\"\
    C-\");\n        else if (grades[i] >= 1.0) results.push_back(\"D+\");\n      \
    \  else if (grades[i] >= 0.7) results.push_back(\"D\");\n        else if (grades[i]\
    \ >= 0.0) results.push_back(\"D-\");\n        else results.push_back(\"E\");\n\
    \    }\n    return results;", "\t\n\tstd::vector<std::string> answer;\n\tfor (int\
    \ i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0) {\n\t\t\tanswer.push_back(\"\
    A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\t\t\tanswer.push_back(\"A\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\tanswer.push_back(\"A-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tanswer.push_back(\"B+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tanswer.push_back(\"B\");\n\t\t}\n\t\
    \telse if (grades[i] >= 2.3) {\n\t\t\tanswer.push_back(\"B-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 2.0) {\n\t\t\tanswer.push_back(\"C+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 1.7) {\n\t\t\tanswer.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.3) {\n\t\t\tanswer.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i] >=\
    \ 1.0) {\n\t\t\tanswer.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i] >= 0.7)\
    \ {\n\t\t\tanswer.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] >= 0.0) {\n\
    \t\t\tanswer.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tanswer.push_back(\"\
    E\");\n\t\t}\n\t}\n\treturn answer;", "    std::vector<std::string> letter;\n\
    \    for(int i = 0; i < grades.size(); i++){\n        if(grades[i] >= 4.0){\n\
    \            letter.push_back(\"A+\");\n        }\n        else if(grades[i] >=\
    \ 3.7){\n            letter.push_back(\"A\");\n        }\n        else if(grades[i]\
    \ >= 3.3){\n            letter.push_back(\"A-\");\n        }\n        else if(grades[i]\
    \ >= 3.0){\n            letter.push_back(\"B+\");\n        }\n        else if(grades[i]\
    \ >= 2.7){\n            letter.push_back(\"B\");\n        }\n        else if(grades[i]\
    \ >= 2.3){\n            letter.push_back(\"B-\");\n        }\n        else if(grades[i]\
    \ >= 2.0){\n            letter.push_back(\"C+\");\n        }\n        else if(grades[i]\
    \ >= 1.7){\n            letter.push_back(\"C\");\n        }\n        else if(grades[i]\
    \ >= 1.3){\n            letter.push_back(\"C-\");\n        }\n        else if(grades[i]\
    \ >= 1.0){\n            letter.push_back(\"D+\");\n        }\n        else if(grades[i]\
    \ >= 0.7){\n            letter.push_back(\"D\");\n        }\n        else if(grades[i]\
    \ >= 0.0){\n            letter.push_back(\"D-\");\n        }\n        else{\n\
    \            letter.push_back(\"E\");\n        }\n    }\n    return letter;",
  "    std::vector<std::string> letter_grades;\n    std::string grade;\n    int i;\n\
    \    for(i=0;i<grades.size();i++){\n        if(grades[i]>=4.0){\n            grade\
    \ = \"A+\";\n        }else if(grades[i]>=3.7){\n            grade = \"A\";\n \
    \       }else if(grades[i]>=3.3){\n            grade = \"A-\";\n        }else\
    \ if(grades[i]>=3.0){\n            grade = \"B+\";\n        }else if(grades[i]>=2.7){\n\
    \            grade = \"B\";\n        }else if(grades[i]>=2.3){\n            grade\
    \ = \"B-\";\n        }else if(grades[i]>=2.0){\n            grade = \"C+\";\n\
    \        }else if(grades[i]>=1.7){\n            grade = \"C\";\n        }else\
    \ if(grades[i]>=1.3){\n            grade = \"C-\";\n        }else if(grades[i]>=1.0){\n\
    \            grade = \"D+\";\n        }else if(grades[i]>=0.7){\n            grade\
    \ = \"D\";\n        }else if(grades[i]>=0.0){\n            grade = \"D-\";\n \
    \       }else{\n            grade = \"E\";\n        }\n        letter_grades.push_back(grade);\n\
    \    }\n    return letter_grades;", "\tstd::vector<std::string> v;\n\tfor (int\
    \ i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0) {\n\t\t\tv.push_back(\"\
    A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7) {\n\t\t\tv.push_back(\"A\");\n\t\t\
    }\n\t\telse if (grades[i] > 3.3) {\n\t\t\tv.push_back(\"A-\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 3.0) {\n\t\t\tv.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 2.7) {\n\t\t\tv.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i] > 2.3) {\n\
    \t\t\tv.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i] > 2.0) {\n\t\t\tv.push_back(\"\
    C+\");\n\t\t}\n\t\telse if (grades[i] > 1.7) {\n\t\t\tv.push_back(\"C\");\n\t\t\
    }\n\t\telse if (grades[i] > 1.3) {\n\t\t\tv.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.0) {\n\t\t\tv.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tv.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0) {\n\
    \t\t\tv.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tv.push_back(\"E\");\n\t\t\
    }\n\t}\n\treturn v;", "    std::vector<std::string> result(grades.size());\n \
    \   for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n\
    \            result[i] = \"A+\";\n        } else if (grades[i] >= 3.7) {\n   \
    \         result[i] = \"A\";\n        } else if (grades[i] >= 3.3) {\n       \
    \     result[i] = \"A-\";\n        } else if (grades[i] >= 3.0) {\n          \
    \  result[i] = \"B+\";\n        } else if (grades[i] >= 2.7) {\n            result[i]\
    \ = \"B\";\n        } else if (grades[i] >= 2.3) {\n            result[i] = \"\
    B-\";\n        } else if (grades[i] >= 2.0) {\n            result[i] = \"C+\"\
    ;\n        } else if (grades[i] >= 1.7) {\n            result[i] = \"C\";\n  \
    \      } else if (grades[i] >= 1.3) {\n            result[i] = \"C-\";\n     \
    \   } else if (grades[i] >= 1.0) {\n            result[i] = \"D+\";\n        }\
    \ else if (grades[i] >= 0.7) {\n            result[i] = \"D\";\n        } else\
    \ if (grades[i] >= 0.0) {\n            result[i] = \"D-\";\n        } else {\n\
    \            result[i] = \"E\";\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ letter_grades = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\"\
    , \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n  std::vector<float> numerical_grades\
    \ = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0};\n  std::vector<std::string>\
    \ result;\n  for (float grade : grades) {\n    for (int i = 0; i < numerical_grades.size();\
    \ i++) {\n      if (grade >= numerical_grades[i]) {\n        result.push_back(letter_grades[i]);\n\
    \        break;\n      }\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            result.push_back(\"D-\");\n        } else {\n        \
    \    result.push_back(\"E\");\n        }\n    }\n    return result;", "    //\
    \ Write your code here\n    std::vector<std::string> grade{};\n    for(auto &num\
    \ : grades){\n        if(num >= 4){\n            grade.push_back(\"A+\");\n  \
    \      }\n        else if(num >= 3.7){\n            grade.push_back(\"A\");\n\
    \        }\n        else if(num >= 3.3){\n            grade.push_back(\"A-\");\n\
    \        }\n        else if(num >= 3){\n            grade.push_back(\"B+\");\n\
    \        }\n        else if(num >= 2.7){\n            grade.push_back(\"B\");\n\
    \        }\n        else if(num >= 2.3){\n            grade.push_back(\"B-\");\n\
    \        }\n        else if(num >= 2){\n            grade.push_back(\"C+\");\n\
    \        }\n        else if(num >= 1.7){\n            grade.push_back(\"C\");\n\
    \        }\n        else if(num >= 1.3){\n            grade.push_back(\"C-\");\n\
    \        }\n        else if(num >= 1){\n            grade.push_back(\"D+\");\n\
    \        }\n        else if(num >= 0.7){\n            grade.push_back(\"D\");\n\
    \        }\n        else if(num >= 0){\n            grade.push_back(\"D-\");\n\
    \        }\n        else{\n            grade.push_back(\"E\");\n        }\n  \
    \  }\n    return grade;", "    std::vector<std::string> res;\n    for(auto& val\
    \ : grades){\n        if(val == 4.0) res.push_back(\"A+\");\n        else if(val\
    \ >= 3.7) res.push_back(\"A\");\n        else if(val >= 3.3) res.push_back(\"\
    A-\");\n        else if(val >= 3.0) res.push_back(\"B+\");\n        else if(val\
    \ >= 2.7) res.push_back(\"B\");\n        else if(val >= 2.3) res.push_back(\"\
    B-\");\n        else if(val >= 2.0) res.push_back(\"C+\");\n        else if(val\
    \ >= 1.7) res.push_back(\"C\");\n        else if(val >= 1.3) res.push_back(\"\
    C-\");\n        else if(val >= 1.0) res.push_back(\"D+\");\n        else if(val\
    \ >= 0.7) res.push_back(\"D\");\n        else if(val > 0.0) res.push_back(\"D-\"\
    );\n        else res.push_back(\"E\");\n    }\n    return res;", "\tstd::vector<std::string>\
    \ letter_grades;\n\tfor (float gpa : grades) {\n\t\tif (gpa == 4.0)\n\t\t\tletter_grades.push_back(\"\
    A+\");\n\t\telse if (gpa > 3.7)\n\t\t\tletter_grades.push_back(\"A\");\n\t\telse\
    \ if (gpa > 3.3)\n\t\t\tletter_grades.push_back(\"A-\");\n\t\telse if (gpa > 3.0)\n\
    \t\t\tletter_grades.push_back(\"B+\");\n\t\telse if (gpa > 2.7)\n\t\t\tletter_grades.push_back(\"\
    B\");\n\t\telse if (gpa > 2.3)\n\t\t\tletter_grades.push_back(\"B-\");\n\t\telse\
    \ if (gpa > 2.0)\n\t\t\tletter_grades.push_back(\"C+\");\n\t\telse if (gpa > 1.7)\n\
    \t\t\tletter_grades.push_back(\"C\");\n\t\telse if (gpa > 1.3)\n\t\t\tletter_grades.push_back(\"\
    C-\");\n\t\telse if (gpa > 1.0)\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t\
    else if (gpa > 0.7)\n\t\t\tletter_grades.push_back(\"D\");\n\t\telse if (gpa >\
    \ 0.0)\n\t\t\tletter_grades.push_back(\"D-\");\n\t\telse\n\t\t\tletter_grades.push_back(\"\
    E\");\n\t}\n\treturn letter_grades;", "    int sz = grades.size();\n    std::vector<std::string>\
    \ letter_grades(sz);\n    std::map<std::string, float> grade_levels = {\n    \
    \    {\"A+\", 4.0}, {\"A\", 3.7}, {\"A-\", 3.3},\n        {\"B+\", 3.0}, {\"B\"\
    , 2.7}, {\"B-\", 2.3},\n        {\"C+\", 2.0}, {\"C\", 1.7}, {\"C-\", 1.3},\n\
    \        {\"D+\", 1.0}, {\"D\", 0.7}, {\"D-\", 0.0},\n        {\"E\", 0.0}, \n\
    \    };\n    std::string level;\n    for (int i = 0; i < sz; i++) {\n        level\
    \ = \"E\";\n        for (auto &grade : grade_levels) {\n            if (grades[i]\
    \ >= grade.second) {\n                level = grade.first;\n                break;\n\
    \            }\n        }\n        letter_grades[i] = level;\n    }\n    return\
    \ letter_grades;", "  std::vector<std::string> output;\n  for (auto i : grades)\
    \ {\n    if (i >= 4.0) {\n      output.push_back(\"A+\");\n    } else if (i >=\
    \ 3.7) {\n      output.push_back(\"A\");\n    } else if (i >= 3.3) {\n      output.push_back(\"\
    A-\");\n    } else if (i >= 3.0) {\n      output.push_back(\"B+\");\n    } else\
    \ if (i >= 2.7) {\n      output.push_back(\"B\");\n    } else if (i >= 2.3) {\n\
    \      output.push_back(\"B-\");\n    } else if (i >= 2.0) {\n      output.push_back(\"\
    C+\");\n    } else if (i >= 1.7) {\n      output.push_back(\"C\");\n    } else\
    \ if (i >= 1.3) {\n      output.push_back(\"C-\");\n    } else if (i >= 1.0) {\n\
    \      output.push_back(\"D+\");\n    } else if (i >= 0.7) {\n      output.push_back(\"\
    D\");\n    } else if (i > 0.0) {\n      output.push_back(\"D-\");\n    } else\
    \ {\n      output.push_back(\"E\");\n    }\n  }\n  return output;", "\tstd::vector<std::string>\
    \ final;\n\tfor (size_t i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] ==\
    \ 4.0) {\n\t\t\tfinal.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] > 3.7)\
    \ {\n\t\t\tfinal.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\
    \t\tfinal.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tfinal.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tfinal.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tfinal.push_back(\"B-\");\n\t\t}\n\
    \t\telse if (grades[i] > 2.0) {\n\t\t\tfinal.push_back(\"C+\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.7) {\n\t\t\tfinal.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 1.3) {\n\t\t\tfinal.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i] > 1.0)\
    \ {\n\t\t\tfinal.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i] > 0.7) {\n\t\
    \t\tfinal.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i] > 0.0) {\n\t\t\tfinal.push_back(\"\
    D-\");\n\t\t}\n\t\telse if (grades[i] == 0.0) {\n\t\t\tfinal.push_back(\"E\");\n\
    \t\t}\n\t}\n\treturn final;", "\tstd::vector<std::string> result;\n\tfor (auto\
    \ i : grades) {\n\t\tif (i >= 4.0) {\n\t\t\tresult.push_back(\"A+\");\n\t\t}\n\
    \t\telse if (i >= 3.7) {\n\t\t\tresult.push_back(\"A\");\n\t\t}\n\t\telse if (i\
    \ >= 3.3) {\n\t\t\tresult.push_back(\"A-\");\n\t\t}\n\t\telse if (i >= 3.0) {\n\
    \t\t\tresult.push_back(\"B+\");\n\t\t}\n\t\telse if (i >= 2.7) {\n\t\t\tresult.push_back(\"\
    B\");\n\t\t}\n\t\telse if (i >= 2.3) {\n\t\t\tresult.push_back(\"B-\");\n\t\t\
    }\n\t\telse if (i >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t}\n\t\telse\
    \ if (i >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse if (i >= 1.3)\
    \ {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if (i >= 1.0) {\n\t\t\t\
    result.push_back(\"D+\");\n\t\t}\n\t\telse if (i >= 0.7) {\n\t\t\tresult.push_back(\"\
    D\");\n\t\t}\n\t\telse if (i >= 0.0) {\n\t\t\tresult.push_back(\"D-\");\n\t\t\
    }\n\t\telse {\n\t\t\tresult.push_back(\"E\");\n\t\t}\n\t}\n\treturn result;",
  "\tstd::vector<std::string> output(grades.size());\n\tfor (int i = 0; i < grades.size();\
    \ i++) {\n\t\t// std::cout << grades[i] << std::endl;\n\t\tif (grades[i] >= 4.0)\n\
    \t\t\toutput[i] = \"A+\";\n\t\telse if (grades[i] > 3.7)\n\t\t\toutput[i] = \"\
    A\";\n\t\telse if (grades[i] > 3.3)\n\t\t\toutput[i] = \"A-\";\n\t\telse if (grades[i]\
    \ > 3.0)\n\t\t\toutput[i] = \"B+\";\n\t\telse if (grades[i] > 2.7)\n\t\t\toutput[i]\
    \ = \"B\";\n\t\telse if (grades[i] > 2.3)\n\t\t\toutput[i] = \"B-\";\n\t\telse\
    \ if (grades[i] > 2.0)\n\t\t\toutput[i] = \"C+\";\n\t\telse if (grades[i] > 1.7)\n\
    \t\t\toutput[i] = \"C\";\n\t\telse if (grades[i] > 1.3)\n\t\t\toutput[i] = \"\
    C-\";\n\t\telse if (grades[i] > 1.0)\n\t\t\toutput[i] = \"D+\";\n\t\telse if (grades[i]\
    \ > 0.7)\n\t\t\toutput[i] = \"D\";\n\t\telse if (grades[i] > 0.0)\n\t\t\toutput[i]\
    \ = \"D-\";\n\t\telse if (grades[i] == 0.0)\n\t\t\toutput[i] = \"E\";\n\t}\n\t\
    return output;", "    // your code here\n    std::vector<std::string> output;\n\
    \    std::string temp;\n    for(int i = 0; i < grades.size(); i++){\n      if(grades[i]\
    \ == 4.0){\n        temp = \"A+\";\n      }\n      else if(grades[i] >= 3.7){\n\
    \        temp = \"A\";\n      }\n      else if(grades[i] >= 3.3){\n        temp\
    \ = \"A-\";\n      }\n      else if(grades[i] >= 3.0){\n        temp = \"B+\"\
    ;\n      }\n      else if(grades[i] >= 2.7){\n        temp = \"B\";\n      }\n\
    \      else if(grades[i] >= 2.3){\n        temp = \"B-\";\n      }\n      else\
    \ if(grades[i] >= 2.0){\n        temp = \"C+\";\n      }\n      else if(grades[i]\
    \ >= 1.7){\n        temp = \"C\";\n      }\n      else if(grades[i] >= 1.3){\n\
    \        temp = \"C-\";\n      }\n      else if(grades[i] >= 1.0){\n        temp\
    \ = \"D+\";\n      }\n      else if(grades[i] >= 0.7){\n        temp = \"D\";\n\
    \      }\n      else if(grades[i] > 0.0){\n        temp = \"D-\";\n      }\n \
    \     else{\n        temp = \"E\";\n      }\n      output.push_back(temp);\n \
    \   }\n    return output;", "  // your code\n  std::vector<std::string> grades_to_return;\n\
    \  for(float grade : grades){\n    if(grade > 3.6){\n      grades_to_return.push_back(\"\
    A+\");\n    }\n    else if(grade > 3.2){\n      grades_to_return.push_back(\"\
    A\");\n    }\n    else if(grade > 2.9){\n      grades_to_return.push_back(\"A-\"\
    );\n    }\n    else if(grade > 2.6){\n      grades_to_return.push_back(\"B+\"\
    );\n    }\n    else if(grade > 2.2){\n      grades_to_return.push_back(\"B\");\n\
    \    }\n    else if(grade > 1.9){\n      grades_to_return.push_back(\"B-\");\n\
    \    }\n    else if(grade > 1.6){\n      grades_to_return.push_back(\"C+\");\n\
    \    }\n    else if(grade > 1.2){\n      grades_to_return.push_back(\"C\");\n\
    \    }\n    else if(grade > 0.9){\n      grades_to_return.push_back(\"C-\");\n\
    \    }\n    else if(grade > 0.6){\n      grades_to_return.push_back(\"D+\");\n\
    \    }\n    else if(grade > 0.2){\n      grades_to_return.push_back(\"D\");\n\
    \    }\n    else if(grade > 0.0){\n      grades_to_return.push_back(\"D-\");\n\
    \    }\n    else{\n      grades_to_return.push_back(\"E\");\n    }\n  }\n  return\
    \ grades_to_return;", "\tstd::vector<std::string> letter_grades(grades.size());\n\
    \tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] > 4.0) grades[i]\
    \ = 4.0;\n\t\tif (grades[i] < 0.0) grades[i] = 0.0;\n\t\tif (grades[i] >= 3.7)\
    \ {\n\t\t\tletter_grades[i] = \"A\";\n\t\t\tif (grades[i] == 4.0) letter_grades[i]\
    \ += \"+\";\n\t\t}\n\t\telse if (grades[i] >= 3.3) letter_grades[i] = \"A-\";\n\
    \t\telse if (grades[i] >= 3.0) letter_grades[i] = \"B+\";\n\t\telse if (grades[i]\
    \ >= 2.7) letter_grades[i] = \"B\";\n\t\telse if (grades[i] >= 2.3) letter_grades[i]\
    \ = \"B-\";\n\t\telse if (grades[i] >= 2.0) letter_grades[i] = \"C+\";\n\t\telse\
    \ if (grades[i] >= 1.7) letter_grades[i] = \"C\";\n\t\telse if (grades[i] >= 1.3)\
    \ letter_grades[i] = \"C-\";\n\t\telse if (grades[i] >= 1.0) letter_grades[i]\
    \ = \"D+\";\n\t\telse if (grades[i] >= 0.7) letter_grades[i] = \"D\";\n\t\telse\
    \ if (grades[i] >= 0.0) letter_grades[i] = \"D-\";\n\t\telse letter_grades[i]\
    \ = \"E\";\n\t}\n\treturn letter_grades;", "  std::vector<std::string> ans;\n\
    \  for(int i = 0; i < grades.size(); i++){\n    float x = grades[i];\n    if(x\
    \ >= 4.0) ans.push_back(\"A+\");\n    else if(x >= 3.7) ans.push_back(\"A\");\n\
    \    else if(x >= 3.3) ans.push_back(\"A-\");\n    else if(x >= 3.0) ans.push_back(\"\
    B+\");\n    else if(x >= 2.7) ans.push_back(\"B\");\n    else if(x >= 2.3) ans.push_back(\"\
    B-\");\n    else if(x >= 2.0) ans.push_back(\"C+\");\n    else if(x >= 1.7) ans.push_back(\"\
    C\");\n    else if(x >= 1.3) ans.push_back(\"C-\");\n    else if(x >= 1.0) ans.push_back(\"\
    D+\");\n    else if(x >= 0.7) ans.push_back(\"D\");\n    else if(x >= 0.0) ans.push_back(\"\
    D-\");\n    else ans.push_back(\"E\");\n  }\n  return ans;", "    std::vector<std::string>\
    \ letter_grades;\n    for (auto grade : grades) {\n        if (grade == 4.0) {\n\
    \            letter_grades.push_back(\"A+\");\n        } else if (grade > 3.7)\
    \ {\n            letter_grades.push_back(\"A\");\n        } else if (grade > 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if (grade >\
    \ 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;",
  "    std::vector<std::string> v;\n    for(float i : grades){\n        if(i == 4.0)\n\
    \            v.push_back(\"A+\");\n        else if(i > 3.7)\n            v.push_back(\"\
    A\");\n        else if(i > 3.3)\n            v.push_back(\"A-\");\n        else\
    \ if(i > 3.0)\n            v.push_back(\"B+\");\n        else if(i > 2.7)\n  \
    \          v.push_back(\"B\");\n        else if(i > 2.3)\n            v.push_back(\"\
    B-\");\n        else if(i > 2.0)\n            v.push_back(\"C+\");\n        else\
    \ if(i > 1.7)\n            v.push_back(\"C\");\n        else if(i > 1.3)\n   \
    \         v.push_back(\"C-\");\n        else if(i > 1.0)\n            v.push_back(\"\
    D+\");\n        else if(i > 0.7)\n            v.push_back(\"D\");\n        else\
    \ if(i > 0.0)\n            v.push_back(\"D-\");\n        else\n            v.push_back(\"\
    E\");\n    }\n    return v;", "  std::vector<std::string> res;\n  for (int i =\
    \ 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      res.push_back(\"\
    A+\");\n    } else if (grades[i] > 3.7) {\n      res.push_back(\"A\");\n    }\
    \ else if (grades[i] > 3.3) {\n      res.push_back(\"A-\");\n    } else if (grades[i]\
    \ > 3.0) {\n      res.push_back(\"B+\");\n    } else if (grades[i] > 2.7) {\n\
    \      res.push_back(\"B\");\n    } else if (grades[i] > 2.3) {\n      res.push_back(\"\
    B-\");\n    } else if (grades[i] > 2.0) {\n      res.push_back(\"C+\");\n    }\
    \ else if (grades[i] > 1.7) {\n      res.push_back(\"C\");\n    } else if (grades[i]\
    \ > 1.3) {\n      res.push_back(\"C-\");\n    } else if (grades[i] > 1.0) {\n\
    \      res.push_back(\"D+\");\n    } else if (grades[i] > 0.7) {\n      res.push_back(\"\
    D\");\n    } else if (grades[i] > 0.0) {\n      res.push_back(\"D-\");\n    }\
    \ else {\n      res.push_back(\"E\");\n    }\n  }\n  return res;", "    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 4.0)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grade >=\
    \ 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grade\
    \ >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grade\
    \ >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grade\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grade\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grade\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grade\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grade\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;",
  "    std::vector<std::string> letter_grades;\n    // your code here\n    for(auto\
    \ grade : grades){\n        if(grade >= 4.0) letter_grades.push_back(\"A+\");\n\
    \        else if(grade >= 3.7) letter_grades.push_back(\"A\");\n        else if(grade\
    \ >= 3.3) letter_grades.push_back(\"A-\");\n        else if(grade >= 3.0) letter_grades.push_back(\"\
    B+\");\n        else if(grade >= 2.7) letter_grades.push_back(\"B\");\n      \
    \  else if(grade >= 2.3) letter_grades.push_back(\"B-\");\n        else if(grade\
    \ >= 2.0) letter_grades.push_back(\"C+\");\n        else if(grade >= 1.7) letter_grades.push_back(\"\
    C\");\n        else if(grade >= 1.3) letter_grades.push_back(\"C-\");\n      \
    \  else if(grade >= 1.0) letter_grades.push_back(\"D+\");\n        else if(grade\
    \ >= 0.7) letter_grades.push_back(\"D\");\n        else if(grade >= 0.0) letter_grades.push_back(\"\
    D-\");\n        else letter_grades.push_back(\"E\");\n    }\n    return letter_grades;",
  "\t// Your code here\n\tstd::vector<std::string> grade_letter;\n\tfor (int i = 0;\
    \ i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0) {\n\t\t\tgrade_letter.push_back(\"\
    A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\t\t\tgrade_letter.push_back(\"\
    A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\tgrade_letter.push_back(\"\
    A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tgrade_letter.push_back(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tgrade_letter.push_back(\"\
    B\");\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tgrade_letter.push_back(\"\
    B-\");\n\t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tgrade_letter.push_back(\"\
    C+\");\n\t\t}\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tgrade_letter.push_back(\"\
    C\");\n\t\t}\n\t\telse if (grades[i] >= 1.3) {\n\t\t\tgrade_letter.push_back(\"\
    C-\");\n\t\t}\n\t\telse if (grades[i] >= 1.0) {\n\t\t\tgrade_letter.push_back(\"\
    D+\");\n\t\t}\n\t\telse if (grades[i] >= 0.7) {\n\t\t\tgrade_letter.push_back(\"\
    D\");\n\t\t}\n\t\telse if (grades[i] > 0.0) {\n\t\t\tgrade_letter.push_back(\"\
    D-\");\n\t\t}\n\t\telse {\n\t\t\tgrade_letter.push_back(\"E\");\n\t\t}\n\t}\n\t\
    return grade_letter;", "  std::vector<std::string> result;\n  float grade;\n \
    \ std::string grade_letter;\n  for (int i = 0; i < grades.size(); i++) {\n   \
    \ grade = grades[i];\n    if (grade >= 4.0) {\n      grade_letter = \"A+\";\n\
    \    } else if (grade >= 3.7) {\n      grade_letter = \"A\";\n    } else if (grade\
    \ >= 3.3) {\n      grade_letter = \"A-\";\n    } else if (grade >= 3.0) {\n  \
    \    grade_letter = \"B+\";\n    } else if (grade >= 2.7) {\n      grade_letter\
    \ = \"B\";\n    } else if (grade >= 2.3) {\n      grade_letter = \"B-\";\n   \
    \ } else if (grade >= 2.0) {\n      grade_letter = \"C+\";\n    } else if (grade\
    \ >= 1.7) {\n      grade_letter = \"C\";\n    } else if (grade >= 1.3) {\n   \
    \   grade_letter = \"C-\";\n    } else if (grade >= 1.0) {\n      grade_letter\
    \ = \"D+\";\n    } else if (grade >= 0.7) {\n      grade_letter = \"D\";\n   \
    \ } else if (grade >= 0.0) {\n      grade_letter = \"D-\";\n    } else {\n   \
    \   grade_letter = \"E\";\n    }\n    result.push_back(grade_letter);\n  }\n \
    \ return result;", "    std::vector<std::string> res;\n    for(auto x: grades){\n\
    \        if(x == 4.0) res.push_back(\"A+\");\n        else if(x > 3.7) res.push_back(\"\
    A\");\n        else if(x > 3.3) res.push_back(\"A-\");\n        else if(x > 3.0)\
    \ res.push_back(\"B+\");\n        else if(x > 2.7) res.push_back(\"B\");\n   \
    \     else if(x > 2.3) res.push_back(\"B-\");\n        else if(x > 2.0) res.push_back(\"\
    C+\");\n        else if(x > 1.7) res.push_back(\"C\");\n        else if(x > 1.3)\
    \ res.push_back(\"C-\");\n        else if(x > 1.0) res.push_back(\"D+\");\n  \
    \      else if(x > 0.7) res.push_back(\"D\");\n        else if(x > 0.0) res.push_back(\"\
    D-\");\n        else res.push_back(\"E\");\n    }\n    return res;", "    std::vector<std::string>\
    \ ret;\n    for (auto& grade : grades) {\n        std::string mapped = \"\";\n\
    \        if (grade >= 4.0) mapped = \"A+\";\n        else if (grade >= 3.7) mapped\
    \ = \"A\";\n        else if (grade >= 3.3) mapped = \"A-\";\n        else if (grade\
    \ >= 3.0) mapped = \"B+\";\n        else if (grade >= 2.7) mapped = \"B\";\n \
    \       else if (grade >= 2.3) mapped = \"B-\";\n        else if (grade >= 2.0)\
    \ mapped = \"C+\";\n        else if (grade >= 1.7) mapped = \"C\";\n        else\
    \ if (grade >= 1.3) mapped = \"C-\";\n        else if (grade >= 1.0) mapped =\
    \ \"D+\";\n        else if (grade >= 0.7) mapped = \"D\";\n        else if (grade\
    \ >= 0.0) mapped = \"D-\";\n        else mapped = \"E\";\n        ret.push_back(mapped);\n\
    \    }\n    return ret;", "  std::vector<std::string> output;\n  for (int i =\
    \ 0; i < grades.size(); i++) {\n    // If a grade is above 4, set it to 4\n  \
    \  if (grades[i] > 4) {\n      grades[i] = 4;\n    }\n    // If a grade is below\
    \ 0, set it to 0\n    if (grades[i] < 0) {\n      grades[i] = 0;\n    }\n    //\
    \ If the grade is exactly 4, append A+ to output\n    if (grades[i] == 4) {\n\
    \      output.push_back(\"A+\");\n    }\n    // If the grade is less than 4 and\
    \ greater than 3.7, append A to output\n    if (grades[i] < 4 && grades[i] > 3.7)\
    \ {\n      output.push_back(\"A\");\n    }\n    // If the grade is less than 3.7\
    \ and greater than 3.3, append A- to output\n    if (grades[i] < 3.7 && grades[i]\
    \ > 3.3) {\n      output.push_back(\"A-\");\n    }\n    // If the grade is less\
    \ than 3.3 and greater than 3, append B+ to output\n    if (grades[i] < 3.3 &&\
    \ grades[i] > 3) {\n      output.push_back(\"B+\");\n    }\n    // If the grade\
    \ is less than 3 and greater than 2.7, append B to output\n    if (grades[i] <\
    \ 3 && grades[i] > 2.7) {\n      output.push_back(\"B\");\n    }\n    // If the\
    \ grade is less than 2.7 and greater than 2.3, append B- to output\n    if (grades[i]\
    \ < 2.7 && grades[i] > 2.3) {\n      output.push_back(\"B-\");\n    }\n    //\
    \ If the grade is less than 2.3 and greater than 2, append C+ to output\n    if\
    \ (grades[i] < 2.3 && grades[i] > 2) {\n      output.push_back(\"C+\");\n    }\n\
    \    // If the grade is less than 2 and greater than 1.7, append C", "\tstd::vector<std::string>\
    \ result;\n\tfor (float i : grades) {\n\t\tif (i == 4.0) {\n\t\t\tresult.push_back(\"\
    A+\");\n\t\t}\n\t\telse if (i >= 3.7) {\n\t\t\tresult.push_back(\"A\");\n\t\t\
    }\n\t\telse if (i >= 3.3) {\n\t\t\tresult.push_back(\"A-\");\n\t\t}\n\t\telse\
    \ if (i >= 3.0) {\n\t\t\tresult.push_back(\"B+\");\n\t\t}\n\t\telse if (i >= 2.7)\
    \ {\n\t\t\tresult.push_back(\"B\");\n\t\t}\n\t\telse if (i >= 2.3) {\n\t\t\tresult.push_back(\"\
    B-\");\n\t\t}\n\t\telse if (i >= 2.0) {\n\t\t\tresult.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (i >= 1.7) {\n\t\t\tresult.push_back(\"C\");\n\t\t}\n\t\telse if\
    \ (i >= 1.3) {\n\t\t\tresult.push_back(\"C-\");\n\t\t}\n\t\telse if (i >= 1.0)\
    \ {\n\t\t\tresult.push_back(\"D+\");\n\t\t}\n\t\telse if (i >= 0.7) {\n\t\t\t\
    result.push_back(\"D\");\n\t\t}\n\t\telse if (i >= 0.0) {\n\t\t\tresult.push_back(\"\
    D-\");\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(\"E\");\n\t\t}\n\t}\n\treturn\
    \ result;", "    std::vector<std::string> grade_scale = {\"A+\", \"A\", \"A-\"\
    , \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"};\n\
    \    std::vector<float> gpa_scale = {4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3,\
    \ 1.0, 0.7, 0.0};\n    std::vector<std::string> result;\n    for (auto grade :\
    \ grades) {\n        for (int i = 0; i < gpa_scale.size(); i++) {\n          \
    \  if (grade >= gpa_scale[i]) {\n                result.push_back(grade_scale[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++)\
    \ {\n        float gpa = grades[i];\n        if (gpa == 4.0) {\n            result.push_back(\"\
    A+\");\n        } else if (gpa >= 3.7) {\n            result.push_back(\"A\");\n\
    \        } else if (gpa >= 3.3) {\n            result.push_back(\"A-\");\n   \
    \     } else if (gpa >= 3.0) {\n            result.push_back(\"B+\");\n      \
    \  } else if (gpa >= 2.7) {\n            result.push_back(\"B\");\n        } else\
    \ if (gpa >= 2.3) {\n            result.push_back(\"B-\");\n        } else if\
    \ (gpa >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (gpa\
    \ >= 1.7) {\n            result.push_back(\"C\");\n        } else if (gpa >= 1.3)\
    \ {\n            result.push_back(\"C-\");\n        } else if (gpa >= 1.0) {\n\
    \            result.push_back(\"D+\");\n        } else if (gpa >= 0.7) {\n   \
    \         result.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n       \
    \     result.push_back(\"D-\");\n        } else {\n            result.push_back(\"\
    E\");\n        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto& grade : grades) {\n        if (grade == 4.0) {\n            result.push_back(\"\
    A+\");\n        } else if (grade > 3.7) {\n            result.push_back(\"A\"\
    );\n        } else if (grade > 3.3) {\n            result.push_back(\"A-\");\n\
    \        } else if (grade > 3.0) {\n            result.push_back(\"B+\");\n  \
    \      } else if (grade > 2.7) {\n            result.push_back(\"B\");\n     \
    \   } else if (grade > 2.3) {\n            result.push_back(\"B-\");\n       \
    \ } else if (grade > 2.0) {\n            result.push_back(\"C+\");\n        }\
    \ else if (grade > 1.7) {\n            result.push_back(\"C\");\n        } else\
    \ if (grade > 1.3) {\n            result.push_back(\"C-\");\n        } else if\
    \ (grade > 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (grade > 0.0)\
    \ {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"\
    E\");\n        }\n    }\n    return result;", "    std::vector<std::string> gradepoints\
    \ = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"D-\", \"E\"};\n    std::vector<float> scoredetails = {4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0};\n    std::vector<std::string>\
    \ gradeslist;\n    for(int i = 0; i < grades.size(); i++) {\n        float grade\
    \ = grades[i];\n        if(grade == 4.0) gradeslist.push_back(gradepoints[0]);\n\
    \        else if(grade >= 3.7) gradeslist.push_back(gradepoints[1]);\n       \
    \ else if(grade >= 3.3) gradeslist.push_back(gradepoints[2]);\n        else if(grade\
    \ >= 3.0) gradeslist.push_back(gradepoints[3]);\n        else if(grade >= 2.7)\
    \ gradeslist.push_back(gradepoints[4]);\n        else if(grade >= 2.3) gradeslist.push_back(gradepoints[5]);\n\
    \        else if(grade >= 2.0) gradeslist.push_back(gradepoints[6]);\n       \
    \ else if(grade >= 1.7) gradeslist.push_back(gradepoints[7]);\n        else if(grade\
    \ >= 1.3) gradeslist.push_back(gradepoints[8]);\n        else if(grade >= 1.0)\
    \ gradeslist.push_back(gradepoints[9]);\n        else if(grade >= 0.7) gradeslist.push_back(gradepoints[10]);\n\
    \        else if(grade >= 0.0) gradeslist.push_back(gradepoints[11]);\n      \
    \  else gradeslist.push_back(gradepoints[12]);\n    }\n    return gradeslist;",
  "\t// Write your code here.\n\tstd::vector<std::string> result;\n\tstd::string grade;\n\
    \tfor (size_t i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] >= 4.0) {\n\t\
    \t\tgrade = \"A+\";\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\t\t\tgrade = \"\
    A\";\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\tgrade = \"A-\";\n\t\t}\n\t\
    \telse if (grades[i] >= 3.0) {\n\t\t\tgrade = \"B+\";\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.7) {\n\t\t\tgrade = \"B\";\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\
    \t\tgrade = \"B-\";\n\t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tgrade = \"\
    C+\";\n\t\t}\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tgrade = \"C\";\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tgrade = \"C-\";\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.0) {\n\t\t\tgrade = \"D+\";\n\t\t}\n\t\telse if (grades[i] >= 0.7) {\n\t\
    \t\tgrade = \"D\";\n\t\t}\n\t\telse if (grades[i] >= 0.0) {\n\t\t\tgrade = \"\
    D-\";\n\t\t}\n\t\telse {\n\t\t\tgrade = \"E\";\n\t\t}\n\t\tresult.push_back(grade);\n\
    \t}\n\treturn result;", "\tstd::vector<std::string> ret;\n\tfor (const auto &\
    \ grade : grades) {\n\t\tif (grade >= 4.0) {\n\t\t\tret.push_back(\"A+\");\n\t\
    \t} else if (grade >= 3.7) {\n\t\t\tret.push_back(\"A\");\n\t\t} else if (grade\
    \ >= 3.3) {\n\t\t\tret.push_back(\"A-\");\n\t\t} else if (grade >= 3.0) {\n\t\t\
    \tret.push_back(\"B+\");\n\t\t} else if (grade >= 2.7) {\n\t\t\tret.push_back(\"\
    B\");\n\t\t} else if (grade >= 2.3) {\n\t\t\tret.push_back(\"B-\");\n\t\t} else\
    \ if (grade >= 2.0) {\n\t\t\tret.push_back(\"C+\");\n\t\t} else if (grade >= 1.7)\
    \ {\n\t\t\tret.push_back(\"C\");\n\t\t} else if (grade >= 1.3) {\n\t\t\tret.push_back(\"\
    C-\");\n\t\t} else if (grade >= 1.0) {\n\t\t\tret.push_back(\"D+\");\n\t\t} else\
    \ if (grade >= 0.7) {\n\t\t\tret.push_back(\"D\");\n\t\t} else if (grade >= 0.0)\
    \ {\n\t\t\tret.push_back(\"D-\");\n\t\t} else {\n\t\t\tret.push_back(\"E\");\n\
    \t\t}\n\t}\n\treturn ret;", "    std::vector<std::string> answer;\n    for(int\
    \ i = 0; i < grades.size(); i++){\n        if(grades[i] == 4.0){\n           \
    \ answer.push_back(\"A+\");\n        }else if(grades[i] > 3.7){\n            answer.push_back(\"\
    A\");\n        }else if(grades[i] > 3.3){\n            answer.push_back(\"A-\"\
    );\n        }else if(grades[i] > 3.0){\n            answer.push_back(\"B+\");\n\
    \        }else if(grades[i] > 2.7){\n            answer.push_back(\"B\");\n  \
    \      }else if(grades[i] > 2.3){\n            answer.push_back(\"B-\");\n   \
    \     }else if(grades[i] > 2.0){\n            answer.push_back(\"C+\");\n    \
    \    }else if(grades[i] > 1.7){\n            answer.push_back(\"C\");\n      \
    \  }else if(grades[i] > 1.3){\n            answer.push_back(\"C-\");\n       \
    \ }else if(grades[i] > 1.0){\n            answer.push_back(\"D+\");\n        }else\
    \ if(grades[i] > 0.7){\n            answer.push_back(\"D\");\n        }else if(grades[i]\
    \ > 0.0){\n            answer.push_back(\"D-\");\n        }else{\n           \
    \ answer.push_back(\"E\");\n        }\n    }\n    return answer;", "\tstd::vector<std::string>\
    \ results;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] ==\
    \ 4.0) {\n\t\t\tresults.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7)\
    \ {\n\t\t\tresults.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\
    \t\t\tresults.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\
    \tresults.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\t\
    results.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tresults.push_back(\"\
    B-\");\n\t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tresults.push_back(\"C+\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tresults.push_back(\"C\");\n\
    \t\t}\n\t\telse if (grades[i] >= 1.3) {\n\t\t\tresults.push_back(\"C-\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.0) {\n\t\t\tresults.push_back(\"D+\");\n\t\t}\n\
    \t\telse if (grades[i] >= 0.7) {\n\t\t\tresults.push_back(\"D\");\n\t\t}\n\t\t\
    else if (grades[i] >= 0.0) {\n\t\t\tresults.push_back(\"D-\");\n\t\t}\n\t\telse\
    \ {\n\t\t\tresults.push_back(\"E\");\n\t\t}\n\t}\n\treturn results;", "\tstd::vector<std::string>\
    \ res;\n\tfor (auto grade : grades) {\n\t\tif (grade >= 4.0) {\n\t\t\tres.push_back(\"\
    A+\");\n\t\t}\n\t\telse if (grade >= 3.7) {\n\t\t\tres.push_back(\"A\");\n\t\t\
    }\n\t\telse if (grade >= 3.3) {\n\t\t\tres.push_back(\"A-\");\n\t\t}\n\t\telse\
    \ if (grade >= 3.0) {\n\t\t\tres.push_back(\"B+\");\n\t\t}\n\t\telse if (grade\
    \ >= 2.7) {\n\t\t\tres.push_back(\"B\");\n\t\t}\n\t\telse if (grade >= 2.3) {\n\
    \t\t\tres.push_back(\"B-\");\n\t\t}\n\t\telse if (grade >= 2.0) {\n\t\t\tres.push_back(\"\
    C+\");\n\t\t}\n\t\telse if (grade >= 1.7) {\n\t\t\tres.push_back(\"C\");\n\t\t\
    }\n\t\telse if (grade >= 1.3) {\n\t\t\tres.push_back(\"C-\");\n\t\t}\n\t\telse\
    \ if (grade >= 1.0) {\n\t\t\tres.push_back(\"D+\");\n\t\t}\n\t\telse if (grade\
    \ >= 0.7) {\n\t\t\tres.push_back(\"D\");\n\t\t}\n\t\telse if (grade >= 0.0) {\n\
    \t\t\tres.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tres.push_back(\"E\");\n\
    \t\t}\n\t}\n\treturn res;", "    std::vector<std::string> ans;\n    for(auto i:\
    \ grades){\n        if(i>=4.0)ans.push_back(\"A+\");\n        else if(i>=3.7)ans.push_back(\"\
    A\");\n        else if(i>=3.3)ans.push_back(\"A-\");\n        else if(i>=3.0)ans.push_back(\"\
    B+\");\n        else if(i>=2.7)ans.push_back(\"B\");\n        else if(i>=2.3)ans.push_back(\"\
    B-\");\n        else if(i>=2.0)ans.push_back(\"C+\");\n        else if(i>=1.7)ans.push_back(\"\
    C\");\n        else if(i>=1.3)ans.push_back(\"C-\");\n        else if(i>=1.0)ans.push_back(\"\
    D+\");\n        else if(i>=0.7)ans.push_back(\"D\");\n        else if(i>=0.0)ans.push_back(\"\
    D-\");\n        else ans.push_back(\"E\");\n    }\n    return ans;", "    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ == 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ > 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ > 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ > 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;",
  "  std::vector<std::string> grades_vec;\n  for (int i = 0; i < grades.size(); i++)\
    \ {\n    if (grades[i] >= 4.0) {\n      grades_vec.push_back(\"A+\");\n    } else\
    \ if (grades[i] >= 3.7) {\n      grades_vec.push_back(\"A\");\n    } else if (grades[i]\
    \ >= 3.3) {\n      grades_vec.push_back(\"A-\");\n    } else if (grades[i] >=\
    \ 3.0) {\n      grades_vec.push_back(\"B+\");\n    } else if (grades[i] >= 2.7)\
    \ {\n      grades_vec.push_back(\"B\");\n    } else if (grades[i] >= 2.3) {\n\
    \      grades_vec.push_back(\"B-\");\n    } else if (grades[i] >= 2.0) {\n   \
    \   grades_vec.push_back(\"C+\");\n    } else if (grades[i] >= 1.7) {\n      grades_vec.push_back(\"\
    C\");\n    } else if (grades[i] >= 1.3) {\n      grades_vec.push_back(\"C-\");\n\
    \    } else if (grades[i] >= 1.0) {\n      grades_vec.push_back(\"D+\");\n   \
    \ } else if (grades[i] >= 0.7) {\n      grades_vec.push_back(\"D\");\n    } else\
    \ if (grades[i] >= 0.0) {\n      grades_vec.push_back(\"D-\");\n    } else {\n\
    \      grades_vec.push_back(\"E\");\n    }\n  }\n  return grades_vec;", "  std::vector<std::string>\
    \ letter_grades;\n  std::string grade;\n  for (int i = 0; i < grades.size(); i++)\
    \ {\n    if (grades[i] == 4.0) {\n      grade = \"A+\";\n    } else if (grades[i]\
    \ >= 3.7) {\n      grade = \"A\";\n    } else if (grades[i] >= 3.3) {\n      grade\
    \ = \"A-\";\n    } else if (grades[i] >= 3.0) {\n      grade = \"B+\";\n    }\
    \ else if (grades[i] >= 2.7) {\n      grade = \"B\";\n    } else if (grades[i]\
    \ >= 2.3) {\n      grade = \"B-\";\n    } else if (grades[i] >= 2.0) {\n     \
    \ grade = \"C+\";\n    } else if (grades[i] >= 1.7) {\n      grade = \"C\";\n\
    \    } else if (grades[i] >= 1.3) {\n      grade = \"C-\";\n    } else if (grades[i]\
    \ >= 1.0) {\n      grade = \"D+\";\n    } else if (grades[i] >= 0.7) {\n     \
    \ grade = \"D\";\n    } else if (grades[i] > 0.0) {\n      grade = \"D-\";\n \
    \   } else {\n      grade = \"E\";\n    }\n    letter_grades.push_back(grade);\n\
    \  }\n  return letter_grades;", "\tstd::vector<std::string> letter_grades;\n\t\
    for (auto grade : grades) {\n\t\tif (grade >= 4.0) {\n\t\t\tletter_grades.push_back(\"\
    A+\");\n\t\t}\n\t\telse if (grade >= 3.7) {\n\t\t\tletter_grades.push_back(\"\
    A\");\n\t\t}\n\t\telse if (grade >= 3.3) {\n\t\t\tletter_grades.push_back(\"A-\"\
    );\n\t\t}\n\t\telse if (grade >= 3.0) {\n\t\t\tletter_grades.push_back(\"B+\"\
    );\n\t\t}\n\t\telse if (grade >= 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grade >= 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\
    \t}\n\t\telse if (grade >= 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\t\t\
    }\n\t\telse if (grade >= 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\t\t}\n\
    \t\telse if (grade >= 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\t}\n\t\
    \telse if (grade >= 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\t\t\
    else if (grade >= 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse\
    \ if (grade >= 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse\
    \ {\n\t\t\tletter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;",
  "  // your code\n  std::vector<std::string> grades_letter;\n  std::vector<float>\
    \ grades_num;\n  for(int i = 0; i < grades.size(); i++){\n    if(grades[i] >=\
    \ 4.0)\n      grades_letter.push_back(\"A+\");\n    else if(grades[i] >= 3.7)\n\
    \      grades_letter.push_back(\"A\");\n    else if(grades[i] >= 3.3)\n      grades_letter.push_back(\"\
    A-\");\n    else if(grades[i] >= 3.0)\n      grades_letter.push_back(\"B+\");\n\
    \    else if(grades[i] >= 2.7)\n      grades_letter.push_back(\"B\");\n    else\
    \ if(grades[i] >= 2.3)\n      grades_letter.push_back(\"B-\");\n    else if(grades[i]\
    \ >= 2.0)\n      grades_letter.push_back(\"C+\");\n    else if(grades[i] >= 1.7)\n\
    \      grades_letter.push_back(\"C\");\n    else if(grades[i] >= 1.3)\n      grades_letter.push_back(\"\
    C-\");\n    else if(grades[i] >= 1.0)\n      grades_letter.push_back(\"D+\");\n\
    \    else if(grades[i] >= 0.7)\n      grades_letter.push_back(\"D\");\n    else\
    \ if(grades[i] >= 0.0)\n      grades_letter.push_back(\"D-\");\n    else\n   \
    \   grades_letter.push_back(\"E\");\n  }\n  return grades_letter;", "  std::vector<std::string>\
    \ result = {};\n  for (auto grade : grades) {\n    if (grade == 4.0) {\n     \
    \ result.push_back(\"A+\");\n    } else if (grade > 3.7) {\n      result.push_back(\"\
    A\");\n    } else if (grade > 3.3) {\n      result.push_back(\"A-\");\n    } else\
    \ if (grade > 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade >\
    \ 2.7) {\n      result.push_back(\"B\");\n    } else if (grade > 2.3) {\n    \
    \  result.push_back(\"B-\");\n    } else if (grade > 2.0) {\n      result.push_back(\"\
    C+\");\n    } else if (grade > 1.7) {\n      result.push_back(\"C\");\n    } else\
    \ if (grade > 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade >\
    \ 1.0) {\n      result.push_back(\"D+\");\n    } else if (grade > 0.7) {\n   \
    \   result.push_back(\"D\");\n    } else if (grade > 0.0) {\n      result.push_back(\"\
    D-\");\n    } else {\n      result.push_back(\"E\");\n    }\n  }\n  return result;",
  '  // Your code here', "  std::vector<std::string> result(grades.size());\n  for\
    \ (size_t i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0)\n      result[i]\
    \ = \"A+\";\n    else if (grades[i] >= 3.7)\n      result[i] = \"A\";\n    else\
    \ if (grades[i] >= 3.3)\n      result[i] = \"A-\";\n    else if (grades[i] >=\
    \ 3.0)\n      result[i] = \"B+\";\n    else if (grades[i] >= 2.7)\n      result[i]\
    \ = \"B\";\n    else if (grades[i] >= 2.3)\n      result[i] = \"B-\";\n    else\
    \ if (grades[i] >= 2.0)\n      result[i] = \"C+\";\n    else if (grades[i] >=\
    \ 1.7)\n      result[i] = \"C\";\n    else if (grades[i] >= 1.3)\n      result[i]\
    \ = \"C-\";\n    else if (grades[i] >= 1.0)\n      result[i] = \"D+\";\n    else\
    \ if (grades[i] >= 0.7)\n      result[i] = \"D\";\n    else if (grades[i] >= 0.0)\n\
    \      result[i] = \"D-\";\n    else\n      result[i] = \"E\";\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for (const auto& i : grades)\
    \ {\n        if (i == 4.0) {\n            result.push_back(\"A+\");\n        }\
    \ else if (i > 3.7) {\n            result.push_back(\"A\");\n        } else if\
    \ (i > 3.3) {\n            result.push_back(\"A-\");\n        } else if (i > 3.0)\
    \ {\n            result.push_back(\"B+\");\n        } else if (i > 2.7) {\n  \
    \          result.push_back(\"B\");\n        } else if (i > 2.3) {\n         \
    \   result.push_back(\"B-\");\n        } else if (i > 2.0) {\n            result.push_back(\"\
    C+\");\n        } else if (i > 1.7) {\n            result.push_back(\"C\");\n\
    \        } else if (i > 1.3) {\n            result.push_back(\"C-\");\n      \
    \  } else if (i > 1.0) {\n            result.push_back(\"D+\");\n        } else\
    \ if (i > 0.7) {\n            result.push_back(\"D\");\n        } else if (i >\
    \ 0.0) {\n            result.push_back(\"D-\");\n        } else {\n          \
    \  result.push_back(\"E\");\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ letter_grades;\n  for (auto grade : grades) {\n    if (grade >= 4.0) {\n   \
    \   letter_grades.push_back(\"A+\");\n    } else if (grade >= 3.7) {\n      letter_grades.push_back(\"\
    A\");\n    } else if (grade >= 3.3) {\n      letter_grades.push_back(\"A-\");\n\
    \    } else if (grade >= 3.0) {\n      letter_grades.push_back(\"B+\");\n    }\
    \ else if (grade >= 2.7) {\n      letter_grades.push_back(\"B\");\n    } else\
    \ if (grade >= 2.3) {\n      letter_grades.push_back(\"B-\");\n    } else if (grade\
    \ >= 2.0) {\n      letter_grades.push_back(\"C+\");\n    } else if (grade >= 1.7)\
    \ {\n      letter_grades.push_back(\"C\");\n    } else if (grade >= 1.3) {\n \
    \     letter_grades.push_back(\"C-\");\n    } else if (grade >= 1.0) {\n     \
    \ letter_grades.push_back(\"D+\");\n    } else if (grade >= 0.7) {\n      letter_grades.push_back(\"\
    D\");\n    } else if (grade >= 0.0) {\n      letter_grades.push_back(\"D-\");\n\
    \    } else {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;",
  "    // your code here\n    std::vector<std::string> temp;\n    for(float it: grades){\n\
    \    \tif(it>4.0) temp.push_back(\"A+\");\n    \telse if(it>3.7) temp.push_back(\"\
    A\");\n    \telse if(it>3.3) temp.push_back(\"A-\");\n    \telse if(it>3.0) temp.push_back(\"\
    B+\");\n    \telse if(it>2.7) temp.push_back(\"B\");\n    \telse if(it>2.3) temp.push_back(\"\
    B-\");\n    \telse if(it>2.0) temp.push_back(\"C+\");\n    \telse if(it>1.7) temp.push_back(\"\
    C\");\n    \telse if(it>1.3) temp.push_back(\"C-\");\n    \telse if(it>1.0) temp.push_back(\"\
    D+\");\n    \telse if(it>0.7) temp.push_back(\"D\");\n    \telse if(it>0.0) temp.push_back(\"\
    D-\");\n    \telse temp.push_back(\"E\");\n    }\n    return temp;", "\tstd::vector<std::string>\
    \ letter_grades;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i]\
    \ >= 4.0) {\n\t\t\tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.7) {\n\t\t\tletter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.3) {\n\t\t\tletter_grades.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 3.0) {\n\t\t\tletter_grades.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\t\
    letter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;", "\tstd::vector<std::string>\
    \ letters;\n\tfor (float grade : grades) {\n\t\tstd::string letter = \"\";\n\t\
    \tif (grade == 4.0) letter = \"A+\";\n\t\telse if (grade >= 3.7) letter = \"A\"\
    ;\n\t\telse if (grade >= 3.3) letter = \"A-\";\n\t\telse if (grade >= 3.0) letter\
    \ = \"B+\";\n\t\telse if (grade >= 2.7) letter = \"B\";\n\t\telse if (grade >=\
    \ 2.3) letter = \"B-\";\n\t\telse if (grade >= 2.0) letter = \"C+\";\n\t\telse\
    \ if (grade >= 1.7) letter = \"C\";\n\t\telse if (grade >= 1.3) letter = \"C-\"\
    ;\n\t\telse if (grade >= 1.0) letter = \"D+\";\n\t\telse if (grade >= 0.7) letter\
    \ = \"D\";\n\t\telse if (grade >= 0.0) letter = \"D-\";\n\t\telse letter = \"\
    E\";\n\t\tletters.push_back(letter);\n\t}\n\treturn letters;", "    std::vector<std::string>\
    \ letter_grades;\n    for (auto val : grades) {\n        if (val == 4.0)\n   \
    \         letter_grades.push_back(\"A+\");\n        else if (val > 3.7)\n    \
    \        letter_grades.push_back(\"A\");\n        else if (val > 3.3)\n      \
    \      letter_grades.push_back(\"A-\");\n        else if (val > 3.0)\n       \
    \     letter_grades.push_back(\"B+\");\n        else if (val > 2.7)\n        \
    \    letter_grades.push_back(\"B\");\n        else if (val > 2.3)\n          \
    \  letter_grades.push_back(\"B-\");\n        else if (val > 2.0)\n           \
    \ letter_grades.push_back(\"C+\");\n        else if (val > 1.7)\n            letter_grades.push_back(\"\
    C\");\n        else if (val > 1.3)\n            letter_grades.push_back(\"C-\"\
    );\n        else if (val > 1.0)\n            letter_grades.push_back(\"D+\");\n\
    \        else if (val > 0.7)\n            letter_grades.push_back(\"D\");\n  \
    \      else if (val > 0.0)\n            letter_grades.push_back(\"D-\");\n   \
    \     else\n            letter_grades.push_back(\"E\");\n    }\n    return letter_grades;",
  "    std::vector<std::string> result;\n    for (float grade : grades) {\n      \
    \  if (grade >= 4.0) result.push_back(\"A+\");\n        else if (grade >= 3.7)\
    \ result.push_back(\"A\");\n        else if (grade >= 3.3) result.push_back(\"\
    A-\");\n        else if (grade >= 3.0) result.push_back(\"B+\");\n        else\
    \ if (grade >= 2.7) result.push_back(\"B\");\n        else if (grade >= 2.3) result.push_back(\"\
    B-\");\n        else if (grade >= 2.0) result.push_back(\"C+\");\n        else\
    \ if (grade >= 1.7) result.push_back(\"C\");\n        else if (grade >= 1.3) result.push_back(\"\
    C-\");\n        else if (grade >= 1.0) result.push_back(\"D+\");\n        else\
    \ if (grade >= 0.7) result.push_back(\"D\");\n        else if (grade >= 0.0) result.push_back(\"\
    D-\");\n        else result.push_back(\"E\");\n    }\n    return result;", " \
    \   // Your Code Here\n    std::vector<std::string> grade;\n    for(auto i : grades){\n\
    \        std::string s;\n        if(i == 4.0){\n            s = \"A+\";\n    \
    \    }else if(i > 3.7){\n            s = \"A\";\n        }else if(i > 3.3){\n\
    \            s = \"A-\";\n        }else if(i > 3.0){\n            s = \"B+\";\n\
    \        }else if(i > 2.7){\n            s = \"B\";\n        }else if(i > 2.3){\n\
    \            s = \"B-\";\n        }else if(i > 2.0){\n            s = \"C+\";\n\
    \        }else if(i > 1.7){\n            s = \"C\";\n        }else if(i > 1.3){\n\
    \            s = \"C-\";\n        }else if(i > 1.0){\n            s = \"D+\";\n\
    \        }else if(i > 0.7){\n            s = \"D\";\n        }else if(i > 0.0){\n\
    \            s = \"D-\";\n        }else{\n            s = \"E\";\n        }\n\
    \        grade.push_back(s);\n    }\n    return grade;", "\tstd::vector<std::string>\
    \ result;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tstd::string res =\
    \ \"\";\n\t\tif (grades[i] == 4.0) res = \"A+\";\n\t\telse if (grades[i] > 3.7)\
    \ res = \"A\";\n\t\telse if (grades[i] > 3.3) res = \"A-\";\n\t\telse if (grades[i]\
    \ > 3.0) res = \"B+\";\n\t\telse if (grades[i] > 2.7) res = \"B\";\n\t\telse if\
    \ (grades[i] > 2.3) res = \"B-\";\n\t\telse if (grades[i] > 2.0) res = \"C+\"\
    ;\n\t\telse if (grades[i] > 1.7) res = \"C\";\n\t\telse if (grades[i] > 1.3) res\
    \ = \"C-\";\n\t\telse if (grades[i] > 1.0) res = \"D+\";\n\t\telse if (grades[i]\
    \ > 0.7) res = \"D\";\n\t\telse if (grades[i] > 0.0) res = \"D-\";\n\t\telse res\
    \ = \"E\";\n\t\tresult.push_back(res);\n\t}\n\treturn result;", "    std::vector<std::string>\
    \ result;\n    // Write your code here\n    for(float grade : grades){\n     \
    \   if(grade >= 4){\n            result.push_back(\"A+\");\n        }\n      \
    \  else if(grade >= 3.7){\n            result.push_back(\"A\");\n        }\n \
    \       else if(grade >= 3.3){\n            result.push_back(\"A-\");\n      \
    \  }\n        else if(grade >= 3){\n            result.push_back(\"B+\");\n  \
    \      }\n        else if(grade >= 2.7){\n            result.push_back(\"B\");\n\
    \        }\n        else if(grade >= 2.3){\n            result.push_back(\"B-\"\
    );\n        }\n        else if(grade >= 2){\n            result.push_back(\"C+\"\
    );\n        }\n        else if(grade >= 1.7){\n            result.push_back(\"\
    C\");\n        }\n        else if(grade >= 1.3){\n            result.push_back(\"\
    C-\");\n        }\n        else if(grade >= 1){\n            result.push_back(\"\
    D+\");\n        }\n        else if(grade >= 0.7){\n            result.push_back(\"\
    D\");\n        }\n        else if(grade >= 0){\n            result.push_back(\"\
    D-\");\n        }\n        else{\n            result.push_back(\"E\");\n     \
    \   }\n    }\n    return result;", "    std::vector<std::string> results;\n  \
    \  for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] == 4.0) {\n\
    \            results.push_back(\"A+\");\n        } else if (grades[i] > 3.7) {\n\
    \            results.push_back(\"A\");\n        } else if (grades[i] > 3.3) {\n\
    \            results.push_back(\"A-\");\n        } else if (grades[i] > 3.0) {\n\
    \            results.push_back(\"B+\");\n        } else if (grades[i] > 2.7) {\n\
    \            results.push_back(\"B\");\n        } else if (grades[i] > 2.3) {\n\
    \            results.push_back(\"B-\");\n        } else if (grades[i] > 2.0) {\n\
    \            results.push_back(\"C+\");\n        } else if (grades[i] > 1.7) {\n\
    \            results.push_back(\"C\");\n        } else if (grades[i] > 1.3) {\n\
    \            results.push_back(\"C-\");\n        } else if (grades[i] > 1.0) {\n\
    \            results.push_back(\"D+\");\n        } else if (grades[i] > 0.7) {\n\
    \            results.push_back(\"D\");\n        } else if (grades[i] > 0.0) {\n\
    \            results.push_back(\"D-\");\n        } else {\n            results.push_back(\"\
    E\");\n        }\n    }\n    return results;", "\t// Write the function here\n\
    \tint p=0;\n\tstd::vector<std::string> letterGrade;\n\tfor(int i=0;i<grades.size();i++)\n\
    \t{\n\t\tif(grades[i]>=4.0)\n\t\t{\n\t\t\tletterGrade.push_back(\"A+\");\n\t\t\
    }\n\t\telse if(grades[i]>=3.7)\n\t\t{\n\t\t\tletterGrade.push_back(\"A\");\n\t\
    \t}\n\t\telse if(grades[i]>=3.3)\n\t\t{\n\t\t\tletterGrade.push_back(\"A-\");\n\
    \t\t}\n\t\telse if(grades[i]>=3.0)\n\t\t{\n\t\t\tletterGrade.push_back(\"B+\"\
    );\n\t\t}\n\t\telse if(grades[i]>=2.7)\n\t\t{\n\t\t\tletterGrade.push_back(\"\
    B\");\n\t\t}\n\t\telse if(grades[i]>=2.3)\n\t\t{\n\t\t\tletterGrade.push_back(\"\
    B-\");\n\t\t}\n\t\telse if(grades[i]>=2.0)\n\t\t{\n\t\t\tletterGrade.push_back(\"\
    C+\");\n\t\t}\n\t\telse if(grades[i]>=1.7)\n\t\t{\n\t\t\tletterGrade.push_back(\"\
    C\");\n\t\t}\n\t\telse if(grades[i]>=1.3)\n\t\t{\n\t\t\tletterGrade.push_back(\"\
    C-\");\n\t\t}\n\t\telse if(grades[i]>=1.0)\n\t\t{\n\t\t\tletterGrade.push_back(\"\
    D+\");\n\t\t}\n\t\telse if(grades[i]>=0.7)\n\t\t{\n\t\t\tletterGrade.push_back(\"\
    D\");\n\t\t}\n\t\telse if(grades[i]>=0.0)\n\t\t{\n\t\t\tletterGrade.push_back(\"\
    D-\");\n\t\t}\n\t\telse if(grades[i]>=-0.", "    std::vector<std::string> answer;\n\
    \    for (float num: grades) {\n        if (num >= 4.0) {\n            answer.push_back(\"\
    A+\");\n        } else if (num >= 3.7) {\n            answer.push_back(\"A\");\n\
    \        } else if (num >= 3.3) {\n            answer.push_back(\"A-\");\n   \
    \     } else if (num >= 3.0) {\n            answer.push_back(\"B+\");\n      \
    \  } else if (num >= 2.7) {\n            answer.push_back(\"B\");\n        } else\
    \ if (num >= 2.3) {\n            answer.push_back(\"B-\");\n        } else if\
    \ (num >= 2.0) {\n            answer.push_back(\"C+\");\n        } else if (num\
    \ >= 1.7) {\n            answer.push_back(\"C\");\n        } else if (num >= 1.3)\
    \ {\n            answer.push_back(\"C-\");\n        } else if (num >= 1.0) {\n\
    \            answer.push_back(\"D+\");\n        } else if (num >= 0.7) {\n   \
    \         answer.push_back(\"D\");\n        } else if (num >= 0.0) {\n       \
    \     answer.push_back(\"D-\");\n        } else {\n            answer.push_back(\"\
    E\");\n        }\n    }\n    return answer;", "  std::vector<std::string> result;\n\
    \  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] == 4.0) {\n  \
    \    result.push_back(\"A+\");\n    } else if (grades[i] > 3.7) {\n      result.push_back(\"\
    A\");\n    } else if (grades[i] > 3.3) {\n      result.push_back(\"A-\");\n  \
    \  } else if (grades[i] > 3.0) {\n      result.push_back(\"B+\");\n    } else\
    \ if (grades[i] > 2.7) {\n      result.push_back(\"B\");\n    } else if (grades[i]\
    \ > 2.3) {\n      result.push_back(\"B-\");\n    } else if (grades[i] > 2.0) {\n\
    \      result.push_back(\"C+\");\n    } else if (grades[i] > 1.7) {\n      result.push_back(\"\
    C\");\n    } else if (grades[i] > 1.3) {\n      result.push_back(\"C-\");\n  \
    \  } else if (grades[i] > 1.0) {\n      result.push_back(\"D+\");\n    } else\
    \ if (grades[i] > 0.7) {\n      result.push_back(\"D\");\n    } else if (grades[i]\
    \ > 0.0) {\n      result.push_back(\"D-\");\n    } else {\n      result.push_back(\"\
    E\");\n    }\n  }\n  return result;", "  std::vector<std::string> letter_grades(grades.size());\n\
    \  for (size_t i = 0; i < grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n\
    \      letter_grades[i] = \"A+\";\n    } else if (grades[i] >= 3.7) {\n      letter_grades[i]\
    \ = \"A\";\n    } else if (grades[i] >= 3.3) {\n      letter_grades[i] = \"A-\"\
    ;\n    } else if (grades[i] >= 3.0) {\n      letter_grades[i] = \"B+\";\n    }\
    \ else if (grades[i] >= 2.7) {\n      letter_grades[i] = \"B\";\n    } else if\
    \ (grades[i] >= 2.3) {\n      letter_grades[i] = \"B-\";\n    } else if (grades[i]\
    \ >= 2.0) {\n      letter_grades[i] = \"C+\";\n    } else if (grades[i] >= 1.7)\
    \ {\n      letter_grades[i] = \"C\";\n    } else if (grades[i] >= 1.3) {\n   \
    \   letter_grades[i] = \"C-\";\n    } else if (grades[i] >= 1.0) {\n      letter_grades[i]\
    \ = \"D+\";\n    } else if (grades[i] >= 0.7) {\n      letter_grades[i] = \"D\"\
    ;\n    } else if (grades[i] >= 0.0) {\n      letter_grades[i] = \"D-\";\n    }\
    \ else {\n      letter_grades[i] = \"E\";\n    }\n  }\n  return letter_grades;",
  "    std::vector<std::string> result;\n    for (auto grade : grades) {\n       \
    \ if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if\
    \ (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade\
    \ >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >=\
    \ 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7)\
    \ {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n\
    \            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n \
    \           result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n  \
    \          result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n    \
    \        result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n     \
    \       result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n      \
    \      result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n        \
    \    result.push_back(\"D-\");\n        } else {\n            result.push_back(\"\
    E\");\n        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (float grade : grades) {\n    if (grade == 4.0) {\n      result.push_back(\"\
    A+\");\n    } else if (grade > 3.7) {\n      result.push_back(\"A\");\n    } else\
    \ if (grade > 3.3) {\n      result.push_back(\"A-\");\n    } else if (grade >\
    \ 3.0) {\n      result.push_back(\"B+\");\n    } else if (grade > 2.7) {\n   \
    \   result.push_back(\"B\");\n    } else if (grade > 2.3) {\n      result.push_back(\"\
    B-\");\n    } else if (grade > 2.0) {\n      result.push_back(\"C+\");\n    }\
    \ else if (grade > 1.7) {\n      result.push_back(\"C\");\n    } else if (grade\
    \ > 1.3) {\n      result.push_back(\"C-\");\n    } else if (grade > 1.0) {\n \
    \     result.push_back(\"D+\");\n    } else if (grade > 0.7) {\n      result.push_back(\"\
    D\");\n    } else if (grade > 0.0) {\n      result.push_back(\"D-\");\n    } else\
    \ {\n      result.push_back(\"E\");\n    }\n  }\n  return result;", "    int n\
    \ = grades.size();\n    std::vector<std::string> res(n);\n    for(int i = 0; i\
    \ < n; i++) {\n        if(grades[i] == 4.0) res[i] = \"A+\";\n        else if(grades[i]\
    \ >= 3.7) res[i] = \"A\";\n        else if(grades[i] >= 3.3) res[i] = \"A-\";\n\
    \        else if(grades[i] >= 3.0) res[i] = \"B+\";\n        else if(grades[i]\
    \ >= 2.7) res[i] = \"B\";\n        else if(grades[i] >= 2.3) res[i] = \"B-\";\n\
    \        else if(grades[i] >= 2.0) res[i] = \"C+\";\n        else if(grades[i]\
    \ >= 1.7) res[i] = \"C\";\n        else if(grades[i] >= 1.3) res[i] = \"C-\";\n\
    \        else if(grades[i] >= 1.0) res[i] = \"D+\";\n        else if(grades[i]\
    \ >= 0.7) res[i] = \"D\";\n        else if(grades[i] >= 0.0) res[i] = \"D-\";\n\
    \        else res[i] = \"E\";\n    }\n    return res;", "    std::vector<std::string>\
    \ lgrades;\n    for(int i = 0; i < grades.size(); i++){\n        if(grades[i]\
    \ == 4.0){\n            lgrades.push_back(\"A+\");\n        }\n        else if(grades[i]\
    \ > 3.7){\n            lgrades.push_back(\"A\");\n        }\n        else if(grades[i]\
    \ > 3.3){\n            lgrades.push_back(\"A-\");\n        }\n        else if(grades[i]\
    \ > 3.0){\n            lgrades.push_back(\"B+\");\n        }\n        else if(grades[i]\
    \ > 2.7){\n            lgrades.push_back(\"B\");\n        }\n        else if(grades[i]\
    \ > 2.3){\n            lgrades.push_back(\"B-\");\n        }\n        else if(grades[i]\
    \ > 2.0){\n            lgrades.push_back(\"C+\");\n        }\n        else if(grades[i]\
    \ > 1.7){\n            lgrades.push_back(\"C\");\n        }\n        else if(grades[i]\
    \ > 1.3){\n            lgrades.push_back(\"C-\");\n        }\n        else if(grades[i]\
    \ > 1.0){\n            lgrades.push_back(\"D+\");\n        }\n        else if(grades[i]\
    \ > 0.7){\n            lgrades.push_back(\"D\");\n        }\n        else if(grades[i]\
    \ > 0.0){\n            lgrades.push_back(\"D-\");\n        }\n        else{\n\
    \            lgrades.push_back(\"E\");\n        }\n    }\n    return lgrades;",
  "    std::vector<std::string> letter_grades;\n    for (float grade : grades) {\n\
    \        if (grade >= 4.0) {\n            letter_grades.push_back(\"A+\");\n \
    \       } else if (grade >= 3.7) {\n            letter_grades.push_back(\"A\"\
    );\n        } else if (grade >= 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;", "    std::vector<std::string> res;\n\
    \    for (float grade : grades) {\n        // if (grade == 4.0) {\n        //\
    \     res.push_back(\"A+\");\n        // } else if (grade > 3.7) {\n        //\
    \     res.push_back(\"A\");\n        // } else if (grade > 3.3) {\n        //\
    \     res.push_back(\"A-\");\n        // } else if (grade > 3.0) {\n        //\
    \     res.push_back(\"B+\");\n        // } else if (grade > 2.7) {\n        //\
    \     res.push_back(\"B\");\n        // } else if (grade > 2.3) {\n        //\
    \     res.push_back(\"B-\");\n        // } else if (grade > 2.0) {\n        //\
    \     res.push_back(\"C+\");\n        // } else if (grade > 1.7) {\n        //\
    \     res.push_back(\"C\");\n        // } else if (grade > 1.3) {\n        //\
    \     res.push_back(\"C-\");\n        // } else if (grade > 1.0) {\n        //\
    \     res.push_back(\"D+\");\n        // } else if (grade > 0.7) {\n        //\
    \     res.push_back(\"D\");\n        // } else if (grade > 0.0) {\n        //\
    \     res.push_back(\"D-\");\n        // } else {\n        //     res.push_back(\"\
    E\");\n        // }\n        // //\n        // if (grade == 4.0) {\n        //\
    \     res.push_back(\"A+\");\n        // } else if (grade > 3.7) {\n        //\
    \     res.push_back(\"A\");\n        // } else if (grade > 3.3) {\n        //\
    \     res.push_back(\"A-\");\n        // } else if (grade > 3.0) {\n        //\
    \     res.push_back(\"B+\");\n        // } else if (grade > 2.7) {\n        //\
    \     res.push_back(\"B\");\n        // } else if (grade > 2.3) {\n", "  float\
    \ increment = 0.3;\n  std::vector<std::string> result;\n  std::map<float, std::string>\
    \ letter_grade = {\n      {4.0, \"A+\"}, {3.7, \"A\"}, {3.3, \"A-\"}, {3.0, \"\
    B+\"}, {2.7, \"B\"}, {2.3, \"B-\"},\n      {2.0, \"C+\"}, {1.7, \"C\"}, {1.3,\
    \ \"C-\"}, {1.0, \"D+\"}, {0.7, \"D\"}, {0.0, \"D-\"}};\n  for (float i : grades)\
    \ {\n    auto point = letter_grade.upper_bound(i + increment);\n    if (point\
    \ == letter_grade.end()) {\n      result.push_back(\"E\");\n    } else {\n   \
    \   result.push_back(point->second);\n    }\n  }\n  return result;", "  std::vector<std::string>\
    \ output;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] == 4.0)\
    \ {\n      output.push_back(\"A+\");\n    } else if (grades[i] > 3.7) {\n    \
    \  output.push_back(\"A\");\n    } else if (grades[i] > 3.3) {\n      output.push_back(\"\
    A-\");\n    } else if (grades[i] > 3.0) {\n      output.push_back(\"B+\");\n \
    \   } else if (grades[i] > 2.7) {\n      output.push_back(\"B\");\n    } else\
    \ if (grades[i] > 2.3) {\n      output.push_back(\"B-\");\n    } else if (grades[i]\
    \ > 2.0) {\n      output.push_back(\"C+\");\n    } else if (grades[i] > 1.7) {\n\
    \      output.push_back(\"C\");\n    } else if (grades[i] > 1.3) {\n      output.push_back(\"\
    C-\");\n    } else if (grades[i] > 1.0) {\n      output.push_back(\"D+\");\n \
    \   } else if (grades[i] > 0.7) {\n      output.push_back(\"D\");\n    } else\
    \ if (grades[i] > 0.0) {\n      output.push_back(\"D-\");\n    } else {\n    \
    \  output.push_back(\"E\");\n    }\n  }\n  return output;", "\tstd::vector<std::string>\
    \ answer;\n\tstd::string letter;\n\tfor (float grade : grades) {\n\t\tif (grade\
    \ >= 4.0) {\n\t\t\tletter = \"A+\";\n\t\t}\n\t\telse if (grade >= 3.7) {\n\t\t\
    \tletter = \"A\";\n\t\t}\n\t\telse if (grade >= 3.3) {\n\t\t\tletter = \"A-\"\
    ;\n\t\t}\n\t\telse if (grade >= 3.0) {\n\t\t\tletter = \"B+\";\n\t\t}\n\t\telse\
    \ if (grade >= 2.7) {\n\t\t\tletter = \"B\";\n\t\t}\n\t\telse if (grade >= 2.3)\
    \ {\n\t\t\tletter = \"B-\";\n\t\t}\n\t\telse if (grade >= 2.0) {\n\t\t\tletter\
    \ = \"C+\";\n\t\t}\n\t\telse if (grade >= 1.7) {\n\t\t\tletter = \"C\";\n\t\t\
    }\n\t\telse if (grade >= 1.3) {\n\t\t\tletter = \"C-\";\n\t\t}\n\t\telse if (grade\
    \ >= 1.0) {\n\t\t\tletter = \"D+\";\n\t\t}\n\t\telse if (grade >= 0.7) {\n\t\t\
    \tletter = \"D\";\n\t\t}\n\t\telse if (grade >= 0.0) {\n\t\t\tletter = \"D-\"\
    ;\n\t\t}\n\t\telse {\n\t\t\tletter = \"E\";\n\t\t}\n\t\tanswer.push_back(letter);\n\
    \t}\n\treturn answer;", "  std::vector<std::string> res;\n  for (auto grade :\
    \ grades) {\n    if (grade >= 4.0) {\n      res.push_back(\"A+\");\n    } else\
    \ if (grade >= 3.7) {\n      res.push_back(\"A\");\n    } else if (grade >= 3.3)\
    \ {\n      res.push_back(\"A-\");\n    } else if (grade >= 3.0) {\n      res.push_back(\"\
    B+\");\n    } else if (grade >= 2.7) {\n      res.push_back(\"B\");\n    } else\
    \ if (grade >= 2.3) {\n      res.push_back(\"B-\");\n    } else if (grade >= 2.0)\
    \ {\n      res.push_back(\"C+\");\n    } else if (grade >= 1.7) {\n      res.push_back(\"\
    C\");\n    } else if (grade >= 1.3) {\n      res.push_back(\"C-\");\n    } else\
    \ if (grade >= 1.0) {\n      res.push_back(\"D+\");\n    } else if (grade >= 0.7)\
    \ {\n      res.push_back(\"D\");\n    } else if (grade >= 0.0) {\n      res.push_back(\"\
    D-\");\n    } else {\n      res.push_back(\"E\");\n    }\n  }\n  return res;",
  "\tstd::vector<std::string> letter_grades(grades.size());\n\tfor (int i = 0; i <\
    \ grades.size(); i++) {\n\t\tif (grades[i] >= 4.0) {\n\t\t\tletter_grades[i] =\
    \ \"A+\";\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\t\t\tletter_grades[i] = \"\
    A\";\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\tletter_grades[i] = \"A-\"\
    ;\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tletter_grades[i] = \"B+\";\n\
    \t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tletter_grades[i] = \"B\";\n\t\t\
    }\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tletter_grades[i] = \"B-\";\n\t\t}\n\
    \t\telse if (grades[i] >= 2.0) {\n\t\t\tletter_grades[i] = \"C+\";\n\t\t}\n\t\t\
    else if (grades[i] >= 1.7) {\n\t\t\tletter_grades[i] = \"C\";\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.3) {\n\t\t\tletter_grades[i] = \"C-\";\n\t\t}\n\t\telse if\
    \ (grades[i] >= 1.0) {\n\t\t\tletter_grades[i] = \"D+\";\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.7) {\n\t\t\tletter_grades[i] = \"D\";\n\t\t}\n\t\telse if (grades[i] >=\
    \ 0.0) {\n\t\t\tletter_grades[i] = \"D-\";\n\t\t}\n\t\telse {\n\t\t\tletter_grades[i]\
    \ = \"E\";\n\t\t}\n\t}\n\treturn letter_grades;", "\tstd::vector<std::string>\
    \ letter_grades;\n\tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i]\
    \ == 4.0) {\n\t\t\tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 3.7) {\n\t\t\tletter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 3.3) {\n\t\t\tletter_grades.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 3.0) {\n\t\t\tletter_grades.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\t\
    letter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;", "  std::vector<std::string>\
    \ results;\n  for (auto grade : grades) {\n    if (grade >= 4.0) results.push_back(\"\
    A+\");\n    else if (grade >= 3.7) results.push_back(\"A\");\n    else if (grade\
    \ >= 3.3) results.push_back(\"A-\");\n    else if (grade >= 3.0) results.push_back(\"\
    B+\");\n    else if (grade >= 2.7) results.push_back(\"B\");\n    else if (grade\
    \ >= 2.3) results.push_back(\"B-\");\n    else if (grade >= 2.0) results.push_back(\"\
    C+\");\n    else if (grade >= 1.7) results.push_back(\"C\");\n    else if (grade\
    \ >= 1.3) results.push_back(\"C-\");\n    else if (grade >= 1.0) results.push_back(\"\
    D+\");\n    else if (grade >= 0.7) results.push_back(\"D\");\n    else if (grade\
    \ >= 0.0) results.push_back(\"D-\");\n    else results.push_back(\"E\");\n  }\n\
    \  return results;", "  std::vector<std::string> letters;\n  for (auto i : grades)\
    \ {\n    if (i >= 4.0) letters.push_back(\"A+\");\n    else if (i >= 3.7) letters.push_back(\"\
    A\");\n    else if (i >= 3.3) letters.push_back(\"A-\");\n    else if (i >= 3.0)\
    \ letters.push_back(\"B+\");\n    else if (i >= 2.7) letters.push_back(\"B\");\n\
    \    else if (i >= 2.3) letters.push_back(\"B-\");\n    else if (i >= 2.0) letters.push_back(\"\
    C+\");\n    else if (i >= 1.7) letters.push_back(\"C\");\n    else if (i >= 1.3)\
    \ letters.push_back(\"C-\");\n    else if (i >= 1.0) letters.push_back(\"D+\"\
    );\n    else if (i >= 0.7) letters.push_back(\"D\");\n    else if (i >= 0.0) letters.push_back(\"\
    D-\");\n    else letters.push_back(\"E\");\n  }\n  return letters;", "    int\
    \ i,n=grades.size();\n    std::vector<std::string>arr;\n    for(i=0;i<n;i++)\n\
    \    {\n        if(grades[i]>=4.0)\n            arr.push_back(\"A+\");\n     \
    \   else if(grades[i]>=3.7)\n            arr.push_back(\"A\");\n        else if(grades[i]>=3.3)\n\
    \            arr.push_back(\"A-\");\n        else if(grades[i]>=3.0)\n       \
    \     arr.push_back(\"B+\");\n        else if(grades[i]>=2.7)\n            arr.push_back(\"\
    B\");\n        else if(grades[i]>=2.3)\n            arr.push_back(\"B-\");\n \
    \       else if(grades[i]>=2.0)\n            arr.push_back(\"C+\");\n        else\
    \ if(grades[i]>=1.7)\n            arr.push_back(\"C\");\n        else if(grades[i]>=1.3)\n\
    \            arr.push_back(\"C-\");\n        else if(grades[i]>=1.0)\n       \
    \     arr.push_back(\"D+\");\n        else if(grades[i]>=0.7)\n            arr.push_back(\"\
    D\");\n        else if(grades[i]>=0.0)\n            arr.push_back(\"D-\");\n \
    \       else\n            arr.push_back(\"E\");\n    }\n    return arr;", "\t\
    std::vector<std::string> letter_grades;\n\tfor (int i = 0; i < grades.size();\
    \ i++) {\n\t\tif (grades[i] == 4.0) {\n\t\t\tletter_grades.push_back(\"A+\");\n\
    \t\t}\n\t\telse if (grades[i] > 3.7) {\n\t\t\tletter_grades.push_back(\"A\");\n\
    \t\t}\n\t\telse if (grades[i] > 3.3) {\n\t\t\tletter_grades.push_back(\"A-\");\n\
    \t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tletter_grades.push_back(\"B+\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] > 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\
    \t\t}\n\t\telse if (grades[i] > 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\
    \t\t}\n\t\telse if (grades[i] > 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\
    \t\t}\n\t\telse if (grades[i] > 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\
    \t\t}\n\t\telse if (grades[i] > 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\
    \t\t}\n\t\telse if (grades[i] > 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\
    \t\t}\n\t\telse {\n\t\t\tletter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn\
    \ letter_grades;", "    // your code here\n    std::vector<std::string> result;\n\
    \    for(int i = 0; i < grades.size(); i++){\n      if(grades[i] == 4.0){\n  \
    \      result.push_back(\"A+\");\n      }\n      else if(grades[i] >= 3.7){\n\
    \        result.push_back(\"A\");\n      }\n      else if(grades[i] >= 3.3){\n\
    \        result.push_back(\"A-\");\n      }\n      else if(grades[i] >= 3.0){\n\
    \        result.push_back(\"B+\");\n      }\n      else if(grades[i] >= 2.7){\n\
    \        result.push_back(\"B\");\n      }\n      else if(grades[i] >= 2.3){\n\
    \        result.push_back(\"B-\");\n      }\n      else if(grades[i] >= 2.0){\n\
    \        result.push_back(\"C+\");\n      }\n      else if(grades[i] >= 1.7){\n\
    \        result.push_back(\"C\");\n      }\n      else if(grades[i] >= 1.3){\n\
    \        result.push_back(\"C-\");\n      }\n      else if(grades[i] >= 1.0){\n\
    \        result.push_back(\"D+\");\n      }\n      else if(grades[i] >= 0.7){\n\
    \        result.push_back(\"D\");\n      }\n      else if(grades[i] >= 0.0){\n\
    \        result.push_back(\"D-\");\n      }\n      else{\n        result.push_back(\"\
    E\");\n      }\n    }\n    return result;", "    // your code here\n    return\
    \ {};", "  std::vector<std::string> toReturn;\n  for(float i : grades){\n    if(i\
    \ > 3.7)\n      toReturn.push_back(\"A\");\n    else if(i > 3.3)\n      toReturn.push_back(\"\
    A-\");\n    else if(i > 3.0)\n      toReturn.push_back(\"B+\");\n    else if(i\
    \ > 2.7)\n      toReturn.push_back(\"B\");\n    else if(i > 2.3)\n      toReturn.push_back(\"\
    B-\");\n    else if(i > 2.0)\n      toReturn.push_back(\"C+\");\n    else if(i\
    \ > 1.7)\n      toReturn.push_back(\"C\");\n    else if(i > 1.3)\n      toReturn.push_back(\"\
    C-\");\n    else if(i > 1.0)\n      toReturn.push_back(\"D+\");\n    else if(i\
    \ > 0.7)\n      toReturn.push_back(\"D\");\n    else if(i > 0.0)\n      toReturn.push_back(\"\
    D-\");\n    else\n      toReturn.push_back(\"E\");\n  }\n  return toReturn;",
  "    std::vector<std::string> result;\n    for (const auto &i : grades) {\n    \
    \    if (i == 4.0) {\n            result.push_back(\"A+\");\n        } else if\
    \ (i > 3.7) {\n            result.push_back(\"A\");\n        } else if (i > 3.3)\
    \ {\n            result.push_back(\"A-\");\n        } else if (i > 3.0) {\n  \
    \          result.push_back(\"B+\");\n        } else if (i > 2.7) {\n        \
    \    result.push_back(\"B\");\n        } else if (i > 2.3) {\n            result.push_back(\"\
    B-\");\n        } else if (i > 2.0) {\n            result.push_back(\"C+\");\n\
    \        } else if (i > 1.7) {\n            result.push_back(\"C\");\n       \
    \ } else if (i > 1.3) {\n            result.push_back(\"C-\");\n        } else\
    \ if (i > 1.0) {\n            result.push_back(\"D+\");\n        } else if (i\
    \ > 0.7) {\n            result.push_back(\"D\");\n        } else if (i > 0.0)\
    \ {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"\
    E\");\n        }\n    }\n    return result;", "    std::vector<std::string> letter_grades;\n\
    \    for (float grade : grades) {\n        if (grade >= 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grade >= 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grade >= 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grade >= 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grade >= 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grade >= 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grade >= 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grade >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;", "\tstd::vector<std::string> letter_grades;\n\
    \tfor (int i = 0; i < grades.size(); i++) {\n\t\tif (grades[i] == 4.0) {\n\t\t\
    \tletter_grades.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\t\
    \t\tletter_grades.push_back(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\
    \t\t\tletter_grades.push_back(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0)\
    \ {\n\t\t\tletter_grades.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i] >=\
    \ 2.7) {\n\t\t\tletter_grades.push_back(\"B\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.3) {\n\t\t\tletter_grades.push_back(\"B-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 2.0) {\n\t\t\tletter_grades.push_back(\"C+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.7) {\n\t\t\tletter_grades.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.3) {\n\t\t\tletter_grades.push_back(\"C-\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 1.0) {\n\t\t\tletter_grades.push_back(\"D+\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.7) {\n\t\t\tletter_grades.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tletter_grades.push_back(\"D-\");\n\t\t}\n\t\telse {\n\t\t\t\
    letter_grades.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;", "    std::vector<std::string>\
    \ final;\n    for(auto i : grades){\n        if(i == 4.0){\n            final.push_back(\"\
    A+\");\n        }\n        else if(i > 3.7 && i < 4.0){\n            final.push_back(\"\
    A\");\n        }\n        else if(i > 3.3 && i < 3.7){\n            final.push_back(\"\
    A-\");\n        }\n        else if(i > 3.0 && i < 3.3){\n            final.push_back(\"\
    B+\");\n        }\n        else if(i > 2.7 && i < 3.0){\n            final.push_back(\"\
    B\");\n        }\n        else if(i > 2.3 && i < 2.7){\n            final.push_back(\"\
    B-\");\n        }\n        else if(i > 2.0 && i < 2.3){\n            final.push_back(\"\
    C+\");\n        }\n        else if(i > 1.7 && i < 2.0){\n            final.push_back(\"\
    C\");\n        }\n        else if(i > 1.3 && i < 1.7){\n            final.push_back(\"\
    C-\");\n        }\n        else if(i > 1.0 && i < 1.3){\n            final.push_back(\"\
    D+\");\n        }\n        else if(i > 0.7 && i < 1.0){\n            final.push_back(\"\
    D\");\n        }\n        else if(i > 0.0 && i < 0.7){\n            final.push_back(\"\
    D-\");\n        }\n        else if(i == 0.0){\n            final.push_back(\"\
    E\");\n        }\n    }\n    return final;", "    std::vector<std::string> results;\n\
    \    for (float i : grades) {\n        std::string letter;\n        if (i == 4.0)\
    \ {\n            letter = \"A+\";\n        } else if (i > 3.7) {\n           \
    \ letter = \"A\";\n        } else if (i > 3.3) {\n            letter = \"A-\"\
    ;\n        } else if (i > 3.0) {\n            letter = \"B+\";\n        } else\
    \ if (i > 2.7) {\n            letter = \"B\";\n        } else if (i > 2.3) {\n\
    \            letter = \"B-\";\n        } else if (i > 2.0) {\n            letter\
    \ = \"C+\";\n        } else if (i > 1.7) {\n            letter = \"C\";\n    \
    \    } else if (i > 1.3) {\n            letter = \"C-\";\n        } else if (i\
    \ > 1.0) {\n            letter = \"D+\";\n        } else if (i > 0.7) {\n    \
    \        letter = \"D\";\n        } else if (i > 0.0) {\n            letter =\
    \ \"D-\";\n        } else {\n            letter = \"E\";\n        }\n        results.push_back(letter);\n\
    \    }\n    return results;", "    std::vector<std::string> letter_grades;\n \
    \   for (float grade : grades) {\n        if (grade > 4.0)\n            letter_grades.push_back(\"\
    E\");\n        else if (grade >= 3.7)\n            letter_grades.push_back(\"\
    A+\");\n        else if (grade >= 3.3)\n            letter_grades.push_back(\"\
    A\");\n        else if (grade >= 3.0)\n            letter_grades.push_back(\"\
    A-\");\n        else if (grade >= 2.7)\n            letter_grades.push_back(\"\
    B+\");\n        else if (grade >= 2.3)\n            letter_grades.push_back(\"\
    B\");\n        else if (grade >= 2.0)\n            letter_grades.push_back(\"\
    B-\");\n        else if (grade >= 1.7)\n            letter_grades.push_back(\"\
    C+\");\n        else if (grade >= 1.3)\n            letter_grades.push_back(\"\
    C\");\n        else if (grade >= 1.0)\n            letter_grades.push_back(\"\
    C-\");\n        else if (grade >= 0.7)\n            letter_grades.push_back(\"\
    D+\");\n        else if (grade >= 0.0)\n            letter_grades.push_back(\"\
    D\");\n        else\n            letter_grades.push_back(\"E\");\n    }\n    return\
    \ letter_grades;", "  std::vector<std::string> letter_grades;\n  for (auto& grade\
    \ : grades) {\n    if (grade >= 4.0) {\n      letter_grades.push_back(\"A+\");\n\
    \    } else if (grade >= 3.7) {\n      letter_grades.push_back(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      letter_grades.push_back(\"A-\");\n    } else\
    \ if (grade >= 3.0) {\n      letter_grades.push_back(\"B+\");\n    } else if (grade\
    \ >= 2.7) {\n      letter_grades.push_back(\"B\");\n    } else if (grade >= 2.3)\
    \ {\n      letter_grades.push_back(\"B-\");\n    } else if (grade >= 2.0) {\n\
    \      letter_grades.push_back(\"C+\");\n    } else if (grade >= 1.7) {\n    \
    \  letter_grades.push_back(\"C\");\n    } else if (grade >= 1.3) {\n      letter_grades.push_back(\"\
    C-\");\n    } else if (grade >= 1.0) {\n      letter_grades.push_back(\"D+\");\n\
    \    } else if (grade >= 0.7) {\n      letter_grades.push_back(\"D\");\n    }\
    \ else if (grade >= 0.0) {\n      letter_grades.push_back(\"D-\");\n    } else\
    \ {\n      letter_grades.push_back(\"E\");\n    }\n  }\n  return letter_grades;",
  "    std::vector<std::string> letters;\n    for (int i = 0; i < grades.size(); i++)\
    \ {\n        if (grades[i] == 4.0) letters.push_back(\"A+\");\n        else if\
    \ (grades[i] > 3.7) letters.push_back(\"A\");\n        else if (grades[i] > 3.3)\
    \ letters.push_back(\"A-\");\n        else if (grades[i] > 3.0) letters.push_back(\"\
    B+\");\n        else if (grades[i] > 2.7) letters.push_back(\"B\");\n        else\
    \ if (grades[i] > 2.3) letters.push_back(\"B-\");\n        else if (grades[i]\
    \ > 2.0) letters.push_back(\"C+\");\n        else if (grades[i] > 1.7) letters.push_back(\"\
    C\");\n        else if (grades[i] > 1.3) letters.push_back(\"C-\");\n        else\
    \ if (grades[i] > 1.0) letters.push_back(\"D+\");\n        else if (grades[i]\
    \ > 0.7) letters.push_back(\"D\");\n        else if (grades[i] > 0.0) letters.push_back(\"\
    D-\");\n        else letters.push_back(\"E\");\n    }\n    return letters;", " \
    \   std::vector<std::string> gradeLetters;\n    // your code here\n    for(int\
    \ i = 0; i < grades.size(); i++){\n        if(grades[i] >= 4.0){\n           \
    \ gradeLetters.push_back(\"A+\");\n        }else if(grades[i] >= 3.7){\n     \
    \       gradeLetters.push_back(\"A\");\n        }else if(grades[i] >= 3.3){\n\
    \            gradeLetters.push_back(\"A-\");\n        }else if(grades[i] >= 3.0){\n\
    \            gradeLetters.push_back(\"B+\");\n        }else if(grades[i] >= 2.7){\n\
    \            gradeLetters.push_back(\"B\");\n        }else if(grades[i] >= 2.3){\n\
    \            gradeLetters.push_back(\"B-\");\n        }else if(grades[i] >= 2.0){\n\
    \            gradeLetters.push_back(\"C+\");\n        }else if(grades[i] >= 1.7){\n\
    \            gradeLetters.push_back(\"C\");\n        }else if(grades[i] >= 1.3){\n\
    \            gradeLetters.push_back(\"C-\");\n        }else if(grades[i] >= 1.0){\n\
    \            gradeLetters.push_back(\"D+\");\n        }else if(grades[i] >= 0.7){\n\
    \            gradeLetters.push_back(\"D\");\n        }else if(grades[i] >= 0.0){\n\
    \            gradeLetters.push_back(\"D-\");\n        }else{\n            gradeLetters.push_back(\"\
    E\");\n        }\n    }\n    return gradeLetters;", "  std::vector<std::string>\
    \ result;\n  std::string grade;\n  for (auto& x : grades) {\n    if (x == 4.0)\
    \ {\n      grade = \"A+\";\n    } else if (x > 3.7) {\n      grade = \"A\";\n\
    \    } else if (x > 3.3) {\n      grade = \"A-\";\n    } else if (x > 3.0) {\n\
    \      grade = \"B+\";\n    } else if (x > 2.7) {\n      grade = \"B\";\n    }\
    \ else if (x > 2.3) {\n      grade = \"B-\";\n    } else if (x > 2.0) {\n    \
    \  grade = \"C+\";\n    } else if (x > 1.7) {\n      grade = \"C\";\n    } else\
    \ if (x > 1.3) {\n      grade = \"C-\";\n    } else if (x > 1.0) {\n      grade\
    \ = \"D+\";\n    } else if (x > 0.7) {\n      grade = \"D\";\n    } else if (x\
    \ > 0.0) {\n      grade = \"D-\";\n    } else {\n      grade = \"E\";\n    }\n\
    \    result.push_back(grade);\n  }\n  return result;", "    std::vector<std::string>\
    \ res(grades.size());\n    for (int i = 0; i < grades.size(); i++) {\n       \
    \ if (grades[i] == 4.0) {\n            res[i] = \"A+\";\n        } else if (grades[i]\
    \ > 3.7) {\n            res[i] = \"A\";\n        } else if (grades[i] > 3.3) {\n\
    \            res[i] = \"A-\";\n        } else if (grades[i] > 3.0) {\n       \
    \     res[i] = \"B+\";\n        } else if (grades[i] > 2.7) {\n            res[i]\
    \ = \"B\";\n        } else if (grades[i] > 2.3) {\n            res[i] = \"B-\"\
    ;\n        } else if (grades[i] > 2.0) {\n            res[i] = \"C+\";\n     \
    \   } else if (grades[i] > 1.7) {\n            res[i] = \"C\";\n        } else\
    \ if (grades[i] > 1.3) {\n            res[i] = \"C-\";\n        } else if (grades[i]\
    \ > 1.0) {\n            res[i] = \"D+\";\n        } else if (grades[i] > 0.7)\
    \ {\n            res[i] = \"D\";\n        } else if (grades[i] > 0.0) {\n    \
    \        res[i] = \"D-\";\n        } else {\n            res[i] = \"E\";\n   \
    \     }\n    }\n    return res;", "    std::vector<std::string> list = {};\n \
    \   for (float grade : grades) {\n        if (grade >= 4.0) {\n            list.push_back(\"\
    A+\");\n        } else if (grade >= 3.7) {\n            list.push_back(\"A\");\n\
    \        } else if (grade >= 3.3) {\n            list.push_back(\"A-\");\n   \
    \     } else if (grade >= 3.0) {\n            list.push_back(\"B+\");\n      \
    \  } else if (grade >= 2.7) {\n            list.push_back(\"B\");\n        } else\
    \ if (grade >= 2.3) {\n            list.push_back(\"B-\");\n        } else if\
    \ (grade >= 2.0) {\n            list.push_back(\"C+\");\n        } else if (grade\
    \ >= 1.7) {\n            list.push_back(\"C\");\n        } else if (grade >= 1.3)\
    \ {\n            list.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n\
    \            list.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n   \
    \         list.push_back(\"D\");\n        } else if (grade >= 0.0) {\n       \
    \     list.push_back(\"D-\");\n        } else {\n            list.push_back(\"\
    E\");\n        }\n    }\n    return list;"]
stop_tokens:
- "\n}"
