name: HumanEval_26_remove_duplicates
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> numbers_copy;\n    for (long i = 0; i < numbers.size(); i++)\
    \ {\n        for (long j = i + 1; j < numbers.size(); j++) {\n            if (numbers[i]\
    \ == numbers[j]) {\n                numbers_copy.push_back(numbers[i]);\n    \
    \        }\n        }\n    }\n    for (long i = 0; i < numbers_copy.size(); i++)\
    \ {\n        for (long j = 0; j < numbers.size(); j++) {\n            if (numbers_copy[i]\
    \ == numbers[j]) {\n                numbers.erase(numbers.begin() + j);\n    \
    \        }\n        }\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> output;\n    std::unordered_set<long> set;\n    for (long\
    \ num : numbers) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n\
    \            output.push_back(num);\n        }\n    }\n    return output;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp008e7_gg: /tmp/tmp008e7_gg.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> v;\n    std::set<long> s;\n    for (auto i : numbers) {\n\
    \        if (s.count(i) == 0) {\n            s.insert(i);\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpv7i1j8lg: /tmp/tmpv7i1j8lg.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> result;\n\tstd::map<long, long> obj;\n\tfor (long i = 0; i <\
    \ numbers.size(); i++) {\n\t\tlong n = numbers[i];\n\t\tif (obj.find(n) == obj.end())\
    \ {\n\t\t\tobj[n] = 1;\n\t\t} else {\n\t\t\tobj[n]++;\n\t\t}\n\t}\n\tfor (long\
    \ i = 0; i < numbers.size(); i++) {\n\t\tlong n = numbers[i];\n\t\tif (obj[n]\
    \ == 1) {\n\t\t\tresult.push_back(n);\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> v;\n    std::sort(numbers.begin(), numbers.end());\n    v.push_back(numbers[0]);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != numbers[i\
    \ - 1]) {\n            v.push_back(numbers[i]);\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ it : numbers) {\n        if (set.find(it) == set.end()) {\n            set.insert(it);\n\
    \            result.push_back(it);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp35_62uim: /tmp/tmp35_62uim.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> numbers_set;\n    for\
    \ (auto& n : numbers) {\n        if (numbers_set.find(n) == numbers_set.end())\
    \ {\n            numbers_set.insert(n);\n            result.push_back(n);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpgf8oso6g: /tmp/tmpgf8oso6g.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> set;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        if (set.count(numbers[i]) == 0) {\n        \
    \    set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp_0jxo8l1: /tmp/tmp_0jxo8l1.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>::iterator\
    \ it;\n  std::vector<long> result;\n  std::vector<long>::iterator it1;\n  for\
    \ (it = numbers.begin(); it != numbers.end(); it++) {\n    if (find(result.begin(),\
    \ result.end(), *it) == result.end()) {\n      result.push_back(*it);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpzlu98qs6: /tmp/tmpzlu98qs6.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> new_numbers;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\
    \t\tif (find(new_numbers.begin(), new_numbers.end(), numbers[i]) == new_numbers.end())\
    \ {\n\t\t\tnew_numbers.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn new_numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp54a_5e57: /tmp/tmp54a_5e57.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ temp;\n  std::set<long> s;\n  for (int i = 0; i < numbers.size(); i++) {\n \
    \   if (s.find(numbers[i]) == s.end()) {\n      s.insert(numbers[i]);\n      temp.push_back(numbers[i]);\n\
    \    }\n  }\n  return temp;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpl84paqcy: /tmp/tmpl84paqcy.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \ std::vector<long> result;\n   std::unordered_set<long> numberSet;\n   for (auto\
    \ number : numbers) {\n       if (numberSet.find(number) == numberSet.end()) {\n\
    \           result.push_back(number);\n           numberSet.insert(number);\n\
    \       }\n   }\n   return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmph8xzxvaz: /tmp/tmph8xzxvaz.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::sort(numbers.begin(), numbers.end());\n    int previous = numbers[0];\n\
    \    int index = 1;\n    for (int i = 1; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] != previous) {\n            numbers[index] = numbers[i];\n     \
    \       index++;\n            previous = numbers[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < index; i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ n : numbers) {\n        if (set.find(n) == set.end()) {\n            result.push_back(n);\n\
    \            set.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpdiayu5c4: /tmp/tmpdiayu5c4.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  // Step 1 - sort the array\n  std::sort(numbers.begin(), numbers.end());\n\
    \  // Step 2 - iterate through the array and copy unique elements\n  for (long\
    \ i = 0; i < numbers.size(); i++) {\n    // For duplicates, skip all same values\n\
    \    if (i > 0 && numbers[i] == numbers[i - 1]) {\n      continue;\n    }\n  \
    \  result.push_back(numbers[i]);\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpsfanbion: /tmp/tmpsfanbion.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> new_vector;\n\tstd::unordered_set<long> numbers_set;\n\t//std::cout\
    \ << \"numbers size \" << numbers.size() << \"\\n\";\n\tfor (long elem : numbers)\
    \ {\n\t\tif (numbers_set.find(elem) == numbers_set.end()) {\n\t\t\tnew_vector.push_back(elem);\n\
    \t\t\tnumbers_set.insert(elem);\n\t\t}\n\t}\n\treturn new_vector;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmptquzjn3g: /tmp/tmptquzjn3g.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> result;\n\tstd::map<long, long> map;\n\tfor (int i = 0; i <\
    \ numbers.size(); i++) {\n\t\tmap[numbers[i]]++;\n\t}\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tif (map[numbers[i]] == 1) {\n\t\t\tresult.push_back(numbers[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> output;\n    for (long n : numbers) {\n        if (std::find(output.begin(),\
    \ output.end(), n) == output.end()) {\n            output.push_back(n);\n    \
    \    }\n    }\n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpoksusx2y: /tmp/tmpoksusx2y.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> v;\n    std::set<long> s;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (s.find(numbers[i]) == s.end()) {\n            s.insert(numbers[i]);\n\
    \            v.push_back(numbers[i]);\n        }\n    }\n    return v;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmptehknn1h: /tmp/tmptehknn1h.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> res;\n    //We will have to sort the vector and then remove\
    \ duplicate. This is the best way.\n    sort(numbers.begin(), numbers.end());\n\
    \    for(std::vector<long>::iterator it = numbers.begin(); it != numbers.end();\
    \ it++) {\n        std::vector<long>::iterator it2 = it;\n        it2++;\n   \
    \     if(it2 == numbers.end()) {\n            res.push_back(*it);\n          \
    \  break;\n        }\n        if(*it != *it2)\n            res.push_back(*it);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp1gwz41mq: /tmp/tmp1gwz41mq.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (auto\
    \ num : numbers) {\n        if (set.find(num) == set.end()) {\n            set.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpdq3wwxab: /tmp/tmpdq3wwxab.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> out;\n    std::sort(numbers.begin(), numbers.end());\n  \
    \  long last = numbers[0];\n    out.push_back(last);\n    for (int i = 1; i <\
    \ numbers.size(); i++) {\n        if (numbers[i] != last) {\n            out.push_back(numbers[i]);\n\
    \            last = numbers[i];\n        }\n    }\n    return out;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    if (numbers.size() <= 1)\n\t\treturn numbers;\n\tsort(numbers.begin(), numbers.end());\n\
    \tfor (int i = 0; i < numbers.size() - 1; i++) {\n\t\tif (numbers[i] == numbers[i\
    \ + 1]) {\n\t\t\tnumbers.erase(numbers.begin() + i);\n\t\t\ti--;\n\t\t}\n\t}\n\
    \treturn numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp8zutc2zh: /tmp/tmp8zutc2zh.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> res;\n    long len = numbers.size();\n    std::map<long,\
    \ int> map;\n    for (long i = 0; i < len; i++) {\n        if (map.find(numbers[i])\
    \ == map.end()) {\n            map[numbers[i]] = 1;\n        } else {\n      \
    \      map[numbers[i]]++;\n        }\n    }\n    for (long i = 0; i < len; i++)\
    \ {\n        if (map[numbers[i]] == 1) {\n            res.push_back(numbers[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  int count = 0;\n    std::vector<long>::iterator start = numbers.begin();\n\
    \    std::vector<long>::iterator end = numbers.end();\n    std::vector<long>::iterator\
    \ next = start + 1;\n    for (start; start != end; ++start) {\n        for (next;\
    \ next != end; ++next) {\n            if (*start == *next) {\n               \
    \ count += 1;\n            }\n        }\n        if (count > 1) {\n          \
    \  //std::vector<long>::iterator start = numbers.begin();\n            std::vector<long>::iterator\
    \ start = numbers.begin();\n            //std::vector<long>::iterator end = numbers.end();\n\
    \            std::vector<long>::iterator end = numbers.end();\n            std::vector<long>::iterator\
    \ next = start + 1;\n            numbers.erase(start);\n            count = 0;\n\
    \        }\n        else {\n            count = 0;\n        }\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp74qslzzf: /tmp/tmp74qslzzf.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::map<long,\
    \ int> myMap;\n  std::vector<long> ret;\n  for (auto it = numbers.begin(); it\
    \ != numbers.end(); ++it) {\n    if (myMap.find(*it) == myMap.end()) {\n     \
    \ myMap[*it] = 1;\n    } else {\n      myMap[*it] += 1;\n    }\n  }\n  for (auto\
    \ it = numbers.begin(); it != numbers.end(); ++it) {\n    if (myMap[*it] == 1)\
    \ {\n      ret.push_back(*it);\n    }\n  }\n  return ret;\n}\nint main() {\n \
    \   auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::unordered_set<long> seen;\n\tstd::vector<long> ret;\n\tfor (auto n : numbers)\
    \ {\n\t\tif (seen.find(n) == seen.end()) {\n\t\t\tret.push_back(n);\n\t\t\tseen.insert(n);\n\
    \t\t}\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpjqksi1mm: /tmp/tmpjqksi1mm.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> new_vector;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        bool is_distinct = true;\n        for (int j = 0; j < new_vector.size();\
    \ j++) {\n            if (numbers[i] == new_vector[j]) {\n                is_distinct\
    \ = false;\n                break;\n            }\n        }\n        if (is_distinct)\
    \ {\n            new_vector.push_back(numbers[i]);\n        }\n    }\n    return\
    \ new_vector;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp1njsxmxb: /tmp/tmp1njsxmxb.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ ans;\n  std::unordered_set<long> unique;\n  for (auto i : numbers) {\n    if\
    \ (unique.find(i) == unique.end()) {\n      unique.insert(i);\n      ans.push_back(i);\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpfsj__gxy: /tmp/tmpfsj__gxy.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::unordered_set<long> hashset;\n    std::vector<long> result;\n    for (long\
    \ num : numbers) {\n        if (hashset.find(num) == hashset.end()) {\n      \
    \      hashset.insert(num);\n            result.push_back(num);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp9_5ces36: /tmp/tmp9_5ces36.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    long numberOfDuplicates=0;\n    for(long i=0;i<numbers.size();i++){\n\
    \        if(result.size()==0){\n            result.push_back(numbers[i]);\n  \
    \      }else{\n            long j=0;\n            while(j<result.size()){\n  \
    \              if(numbers[i]==result[j]){\n                    numberOfDuplicates++;\n\
    \                    break;\n                }\n                j++;\n       \
    \     }\n            if(numberOfDuplicates==0){\n                result.push_back(numbers[i]);\n\
    \            }\n            numberOfDuplicates=0;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpzz7p04e3: /tmp/tmpzz7p04e3.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> res{};\n    std::map<long, int> cnt;\n    for (auto i : numbers)\
    \ {\n        if (cnt.find(i) == cnt.end()) {\n            cnt[i] = 1;\n      \
    \  } else {\n            cnt[i]++;\n        }\n    }\n    for (auto i : numbers)\
    \ {\n        if (cnt[i] == 1) res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::sort(numbers.begin(), numbers.end());\n    std::vector<long> r_list;\n\
    \    int prev_value = numbers[0];\n    r_list.push_back(prev_value);\n    for\
    \ (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != prev_value)\
    \ {\n            r_list.push_back(numbers[i]);\n            prev_value = numbers[i];\n\
    \        }\n    }\n    return r_list;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::map<long, int> unique;\n    for (auto&\
    \ n : numbers) {\n        unique[n]++;\n    }\n    for (auto& n : numbers) {\n\
    \        if (unique[n] == 1) {\n            result.push_back(n);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> results;\n    std::set<long> uniqueNums;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        if (uniqueNums.count(numbers[i]) ==\
    \ 0) {\n            uniqueNums.insert(numbers[i]);\n            results.push_back(numbers[i]);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpm4qv_1r8: /tmp/tmpm4qv_1r8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> uniques;\n    std::set<long> set;\n    for (long number :\
    \ numbers) {\n        if (set.find(number) == set.end()) {\n            uniques.push_back(number);\n\
    \            set.insert(number);\n        }\n    }\n    return uniques;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmprwe5nbzb: /tmp/tmprwe5nbzb.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  return {};\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp63cnixqp: /tmp/tmp63cnixqp.cpp:13: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> numbers2;\n    long i = 0;\n    while (i < numbers.size())\
    \ {\n        long j = i + 1;\n        while (j < numbers.size()) {\n         \
    \   if (numbers[i] == numbers[j]) {\n                numbers.erase(numbers.begin()\
    \ + j);\n            } else {\n                j++;\n            }\n        }\n\
    \        i++;\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpfnm9oshy: /tmp/tmpfnm9oshy.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>::iterator\
    \ it;\n  std::vector<long> dup;\n  int count;\n  std::sort(numbers.begin(), numbers.end());\n\
    \  for (it = numbers.begin(); it != numbers.end(); it++) {\n    count = std::count(numbers.begin(),\
    \ numbers.end(), *it);\n    if (count == 1) {\n      dup.push_back(*it);\n   \
    \ }\n  }\n  return dup;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> unique_numbers;\n \
    \   std::unordered_set<long> duplicates;\n    for (auto const& number : numbers)\
    \ {\n        if (unique_numbers.find(number) == unique_numbers.end()) {\n    \
    \        unique_numbers.insert(number);\n        } else {\n            duplicates.insert(number);\n\
    \        }\n    }\n    for (auto const& number : numbers) {\n        if (duplicates.find(number)\
    \ == duplicates.end()) {\n            result.push_back(number);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> ret;\n    for (auto i : numbers) {\n        bool unique =\
    \ true;\n        for (auto j : ret) {\n            if (i == j) {\n           \
    \     unique = false;\n                break;\n            }\n        }\n    \
    \    if (unique) {\n            ret.push_back(i);\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7_s2jrqn: /tmp/tmp7_s2jrqn.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::set<long> nums;\n    std::vector<long> vec;\n    for (int i=0; i<numbers.size();\
    \ i++) {\n        if (nums.find(numbers[i]) == nums.end()) {\n            nums.insert(numbers[i]);\n\
    \            vec.push_back(numbers[i]);\n        }\n    }\n    return vec;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpv0278_ey: /tmp/tmpv0278_ey.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  assert(true);\n    std::vector<long> result;\n    std::set<long> set1;\n  \
    \  for(int i=0;i<numbers.size();i++){\n        if(set1.find(numbers[i]) == set1.end()){\n\
    \            set1.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp60cj0lte: /tmp/tmp60cj0lte.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::sort(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n     \
    \       result.push_back(numbers[i]);\n        } else if (numbers[i] != numbers[i\
    \ - 1]) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpqgta2vai: /tmp/tmpqgta2vai.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::set<long> uniques(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ result(uniques.begin(), uniques.end());\n    return result;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp4wqh7cnq: /tmp/tmp4wqh7cnq.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  auto\
    \ last = std::unique(numbers.begin(), numbers.end());\n  numbers.erase(last, numbers.end());\n\
    \  return numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpohktmxko: /tmp/tmpohktmxko.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::map<long, int> store;\n  for (auto i = numbers.begin(); i !=\
    \ numbers.end(); i++) {\n    store[*i]++;\n  }\n  for (auto i = numbers.begin();\
    \ i != numbers.end(); i++) {\n    if (store[*i] == 1) {\n      result.push_back(*i);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::unordered_set<long> unique;\n    for (long value : numbers) {\n      \
    \  unique.insert(value);\n    }\n    return std::vector<long>(unique.begin(),\
    \ unique.end());\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpj0wilnnv: /tmp/tmpj0wilnnv.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  //\
    \ Removes all elements that occur more than once, keeping order of elements\n\
    \  // left the same as in the input.\n  return {};\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpgrt4dnbo: /tmp/tmpgrt4dnbo.cpp:15: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>::iterator\
    \ it;\n  std::set<long> s;\n  std::vector<long> v;\n  for (it = numbers.begin();\
    \ it != numbers.end(); it++) {\n    s.insert(*it);\n  }\n  std::copy(s.begin(),\
    \ s.end(), back_inserter(v));\n  return v;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpvmzcli75: /tmp/tmpvmzcli75.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> new_numbers;\n    std::unordered_set<long> seen;\n    for\
    \ (long num : numbers) {\n        if (seen.find(num) == seen.end()) {\n      \
    \      new_numbers.push_back(num);\n            seen.insert(num);\n        }\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp3iq_lxpg: /tmp/tmp3iq_lxpg.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> map;\n    for (auto\
    \ x : numbers) {\n        if (map.find(x) == map.end()) {\n            map.insert(x);\n\
    \            result.push_back(x);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp828qortm: /tmp/tmp828qortm.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> a;\n\tstd::vector<long> temp;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tif (std::find(a.begin(), a.end(), numbers[i]) != a.end()) {\n\t\t\
    \ttemp.push_back(numbers[i]);\n\t\t}\n\t\telse {\n\t\t\ta.push_back(numbers[i]);\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (std::find(temp.begin(),\
    \ temp.end(), a[i]) != temp.end()) {\n\t\t\ta.erase(a.begin() + i);\n\t\t}\n\t\
    }\n\treturn a;\n}\nint main() {\n    auto candidate = remove_duplicates;\n   \
    \ assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppitk54c6: /tmp/tmppitk54c6.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  //remove\
    \ dups!\n  std::vector<long> unique_numbers;\n  //insert unique numbers into unique_numbers\n\
    \  for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n    auto it2\
    \ = it + 1;\n    if (it2 != numbers.end()) {\n      if (*it == *it2) {\n     \
    \   numbers.erase(it2);\n      }\n    }\n  }\n  return numbers;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp1l_28i5c: /tmp/tmp1l_28i5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ uniq_numbers;\n  std::unordered_set<long> already_found;\n  for (const auto&\
    \ number : numbers) {\n    if (already_found.find(number) == already_found.end())\
    \ {\n      already_found.insert(number);\n      uniq_numbers.push_back(number);\n\
    \    }\n  }\n  return uniq_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppuvf6cu8: /tmp/tmppuvf6cu8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    result.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> s;\n  for (auto i : numbers) {\n    if (s.find(i)\
    \ == s.end()) {\n      s.insert(i);\n      result.push_back(i);\n    }\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmphitxrmq4: /tmp/tmphitxrmq4.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> answer;\n    std::unordered_set<long> used;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (used.find(numbers[i]) == used.end())\
    \ {\n            answer.push_back(numbers[i]);\n            used.insert(numbers[i]);\n\
    \        }\n    }\n    return answer;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpgk911scz: /tmp/tmpgk911scz.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  assert(numbers.size()>0);\n    std::vector<long> output;\n    std::unordered_map<long,long>\
    \ hash;\n    for(long i=0;i<numbers.size();i++){\n        if(hash.find(numbers[i])==hash.end()){\n\
    \            hash[numbers[i]]=1;\n            output.push_back(numbers[i]);\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpx_s2sdc_: /tmp/tmpx_s2sdc_.cpp:8: std::vector<long int> remove_duplicates(std::vector<long\
    \ int>): Assertion `numbers.size()>0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  //\
    \ use a hashmap to keep track of which elements were encountered.\n  std::unordered_map<long,\
    \ bool> encountered_elements;\n  std::vector<long> solution;\n  for (long n :\
    \ numbers) {\n    // if the value has been encountered in the hashmap, don't include\
    \ it in\n    // solution.\n    if (encountered_elements.find(n) == encountered_elements.end())\
    \ {\n      encountered_elements[n] = true;\n      solution.push_back(n);\n   \
    \ }\n  }\n  return solution;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp_frama56: /tmp/tmp_frama56.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> output;\n\tfor (auto it = numbers.begin(); it != numbers.end();\
    \ it++) {\n\t\tif (std::find(output.begin(), output.end(), *it) == output.end())\
    \ {\n\t\t\toutput.push_back(*it);\n\t\t}\n\t}\n\treturn output;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp38_j1_f5: /tmp/tmp38_j1_f5.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result{};\n  std::unordered_set<long> set_of_number{};\n  for (long i = 0; i\
    \ < numbers.size(); i++) {\n    if (set_of_number.find(numbers[i]) == set_of_number.end())\
    \ {\n      set_of_number.insert(numbers[i]);\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpfminkfrr: /tmp/tmpfminkfrr.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  if (numbers.size() == 0) return {};\n    std::vector<long> unique{numbers[0]};\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != numbers[i-1])\
    \ unique.push_back(numbers[i]);\n    }\n    return unique;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpf1yeprki: /tmp/tmpf1yeprki.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::unordered_set<long> entries;\n    std::vector<long> result;\n    for (auto\
    \ num : numbers) {\n        if (entries.find(num) == entries.end()) {\n      \
    \      entries.insert(num);\n            result.push_back(num);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpka0n59dy: /tmp/tmpka0n59dy.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::unordered_set<long> unique;\n    std::vector<long> output;\n    for (long\
    \ number : numbers) {\n        if (unique.find(number) == unique.end()) {\n  \
    \          unique.insert(number);\n            output.push_back(number);\n   \
    \     }\n    }\n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppxco96rv: /tmp/tmppxco96rv.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ v;\n  std::unordered_set<long> s;\n  for (long i = 0; i < numbers.size(); i++)\
    \ {\n    if (s.find(numbers[i]) == s.end()) {\n      s.insert(numbers[i]);\n \
    \     v.push_back(numbers[i]);\n    }\n  }\n  return v;\n}\nint main() {\n   \
    \ auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp0jvtod9j: /tmp/tmp0jvtod9j.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> s;\n    for (int i\
    \ = 0; i < numbers.size(); i++) {\n        if (s.find(numbers[i]) == s.end())\
    \ {\n            s.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmphbeggvyy: /tmp/tmphbeggvyy.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ new_list;\n  std::unordered_set<long> s;\n  for (auto num : numbers) {\n   \
    \ if (s.find(num) == s.end()) {\n      s.insert(num);\n      new_list.push_back(num);\n\
    \    }\n  }\n  return new_list;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7ml1hek3: /tmp/tmp7ml1hek3.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  // I am using linked list to store unique elements so the oredr of the elements\
    \ in\n    // the input remains the same.\n    std::unordered_set<long> visited;\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (visited.find(numbers[i]) == visited.end()) {\n            result.push_back(numbers[i]);\n\
    \            visited.insert(numbers[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp748vankc: /tmp/tmp748vankc.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::unordered_set<long> numbers_set;\n    std::vector<long> result;\n    for\
    \ (auto n : numbers) {\n        if (numbers_set.find(n) == numbers_set.end())\
    \ {\n            numbers_set.insert(n);\n            result.push_back(n);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmprop1qmne: /tmp/tmprop1qmne.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> uniques;\n    for (long n : numbers)\
    \ {\n        if (uniques.find(n) == uniques.end()) {\n            uniques.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp_b07s08p: /tmp/tmp_b07s08p.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  auto sorted = numbers;\n    std::sort(sorted.begin(), sorted.end());\n    std::vector<long>\
    \ unique;\n    auto it = sorted.begin();\n    while (it != sorted.end()) {\n \
    \       const auto element = *it;\n        unique.push_back(element);\n      \
    \  it = std::find_if(std::next(it), sorted.end(), [element](long a) { return a\
    \ != element; });\n    }\n    return unique;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpceayhi_o: /tmp/tmpceayhi_o.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> ans;\n    for (int i = 0; i < numbers.size(); i++) {\n  \
    \      bool flag = false;\n        for (int j = 0; j < numbers.size(); j++) {\n\
    \            if (numbers[i] == numbers[j] && i != j) {\n                flag =\
    \ true;\n                break;\n            }\n        }\n        if (!flag)\
    \ {\n            ans.push_back(numbers[i]);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  for (long number : numbers) {\n    if (std::find(result.begin(),\
    \ result.end(), number) == result.end()) {\n      result.push_back(number);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpmljico74: /tmp/tmpmljico74.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  for\
    \ (auto it = numbers.begin(); it != numbers.end(); it++) {\n    int cur = *it;\n\
    \    auto it2 = it;\n    int count = 0;\n    while (it2 != numbers.end()) {\n\
    \      if (*it2 == cur) {\n        count++;\n      }\n      it2++;\n    }\n  \
    \  if (count > 1) {\n      numbers.erase(std::remove(numbers.begin(), numbers.end(),\
    \ cur), numbers.end());\n    }\n  }\n  return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpj1gsfsiw: /tmp/tmpj1gsfsiw.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> final;\n    std::sort(numbers.begin(), numbers.end());\n\
    \    auto end = std::unique(numbers.begin(), numbers.end());\n    numbers.erase(end,\
    \ numbers.end());\n    for (int i = 0; i < numbers.size(); i++) {\n        final.push_back(numbers[i]);\n\
    \    }\n    return final;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpudt0bo_h: /tmp/tmpudt0bo_h.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    bool flag = false;\n    for (long i = 0; i <\
    \ numbers.size(); i++) {\n        for (long j = 0; j < result.size(); j++) {\n\
    \            if (numbers[i] == result[j]) {\n                flag = true;\n  \
    \              break;\n            }\n        }\n        if (!flag) {\n      \
    \      result.push_back(numbers[i]);\n        }\n        flag = false;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpm3zzq0eu: /tmp/tmpm3zzq0eu.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long>::iterator it;\n    it = std::unique(numbers.begin(), numbers.end());\n\
    \    numbers.resize(std::distance(numbers.begin(), it));\n    return numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpe8r_8pyq: /tmp/tmpe8r_8pyq.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j <\
    \ numbers.size(); j++) {\n            if (numbers[i] == numbers[j]) {\n      \
    \          numbers.erase(numbers.begin() + j);\n                j--;\n       \
    \     }\n        }\n    }\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp34mwjst8: /tmp/tmp34mwjst8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  if\
    \ (numbers.size() == 0 || numbers.size() == 1)\n    return numbers;\n  std::vector<long>\
    \ out;\n  std::unordered_map<long, int> m;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    m[numbers[i]] += 1;\n  }\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    if (m[numbers[i]] == 1)\n      out.push_back(numbers[i]);\n  }\n\
    \  return out;\n}\nint main() {\n    auto candidate = remove_duplicates;\n   \
    \ assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> ret;\n    std::unordered_set<long> s;\n    for (int i = 0;\
    \ i < numbers.size(); i++) {\n        if (s.find(numbers[i]) == s.end()) {\n \
    \           s.insert(numbers[i]);\n            ret.push_back(numbers[i]);\n  \
    \      }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp5w3kpoxo: /tmp/tmp5w3kpoxo.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::unordered_set<long> mySet;\n    std::vector<long> result;\n    for (long\
    \ &i : numbers) {\n        if (mySet.find(i) == mySet.end()) {\n            mySet.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmphyddnvvd: /tmp/tmphyddnvvd.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> uniqueNums;\n    for (auto num : numbers) {\n        if (std::find(uniqueNums.begin(),\
    \ uniqueNums.end(), num) == uniqueNums.end()) {\n            uniqueNums.push_back(num);\n\
    \        }\n    }\n    return uniqueNums;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpthuigl98: /tmp/tmpthuigl98.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ n;\n  std::vector<int> is_present(numbers.size(),0);\n  for(long el:numbers){\n\
    \    if(is_present[el-1]==0){\n      n.push_back(el);\n      is_present[el-1]=1;\n\
    \    }\n  }\n  return n;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpb8p82d4b: /tmp/tmpb8p82d4b.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> output;\n    std::sort(numbers.begin(), numbers.end());\n\
    \    output.push_back(numbers[0]);\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] != numbers[i - 1]) {\n            output.push_back(numbers[i]);\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::set<long> temp;\n\tstd::vector<long> ret;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tif (temp.find(numbers[i]) == temp.end()) {\n\t\t\ttemp.insert(numbers[i]);\n\
    \t\t\tret.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn ret;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp6bimf71g: /tmp/tmp6bimf71g.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> tmp;\n    for (auto\
    \ num : numbers) {\n        if (tmp.find(num) == tmp.end()) {\n            tmp.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp36wk2u7z: /tmp/tmp36wk2u7z.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> s;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    if (s.find(numbers[i]) == s.end()) {\n      s.insert(numbers[i]);\n\
    \      result.push_back(numbers[i]);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp5o7t88ou: /tmp/tmp5o7t88ou.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    // make the vector to the size of the set(which is unique)\n\tstd::unordered_set<long>\
    \ uni(numbers.begin(), numbers.end());\n\tnumbers.assign(uni.begin(), uni.end());\n\
    \treturn numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp_2cf4roo: /tmp/tmp_2cf4roo.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> x;\n    std::sort(numbers.begin(), numbers.end());\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if ((i > 0) && (numbers[i] ==\
    \ numbers[i - 1])) {\n            continue;\n        }\n        x.push_back(numbers[i]);\n\
    \    }\n    return x;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppbnq51mc: /tmp/tmppbnq51mc.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        int counter = 0;\n        for (int j = 0; j < numbers.size(); j++) {\n\
    \            if (numbers[i] == numbers[j]) {\n                counter++;\n   \
    \         }\n        }\n        if (counter == 1) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (seen.find(numbers[i]) == seen.end())\
    \ {\n            result.push_back(numbers[i]);\n            seen.insert(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp67lrj_hv: /tmp/tmp67lrj_hv.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> output;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        for (int j = i + 1; j < numbers.size(); j++) {\n            if (numbers[i]\
    \ == numbers[j]) {\n                numbers[j] = -1;\n            }\n        }\n\
    \    }\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i]\
    \ != -1) {\n            output.push_back(numbers[i]);\n        }\n    }\n    return\
    \ output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpghbur968: /tmp/tmpghbur968.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> result;\n\tstd::unordered_set<long> hash;\n\tfor (long i = 0;\
    \ i < numbers.size(); i++) {\n\t\tif (hash.find(numbers[i]) == hash.end()) {\n\
    \t\t\thash.insert(numbers[i]);\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpxbk_5qw_: /tmp/tmpxbk_5qw_.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    // your code here\n\tstd::vector<long> result;\n\tlong size = numbers.size();\n\
    \tlong i = 0;\n\twhile (i < size) {\n\t\tint j = i + 1;\n\t\twhile (j < size)\
    \ {\n\t\t\tif (numbers[i] == numbers[j]) {\n\t\t\t\tnumbers.erase(numbers.begin()\
    \ + j);\n\t\t\t\tsize = numbers.size();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tj++;\n\
    \t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn numbers;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpoj1wuvsd: /tmp/tmpoj1wuvsd.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  if\
    \ (numbers.size() == 0) return numbers;\n  std::unordered_set<long> seen;\n  std::vector<long>\
    \ no_dups;\n  for (int n : numbers) {\n    if (seen.find(n) == seen.end()) {\n\
    \      seen.insert(n);\n      no_dups.push_back(n);\n    }\n  }\n  return no_dups;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp1ulv46i8: /tmp/tmp1ulv46i8.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> ret;\n    std::set<long> numSet;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        if (numSet.find(numbers[i]) == numSet.end())\
    \ {\n            numSet.insert(numbers[i]);\n            ret.push_back(numbers[i]);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpyq51ecff: /tmp/tmpyq51ecff.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  // Create map to hold list of indices for every element of numbers\n    std::map<long,\
    \ std::list<int>> elements;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (elements.find(numbers[i]) == elements.end()) {\n            // If\
    \ number is not in map, add it\n            std::list<int> indices;\n        \
    \    indices.push_back(i);\n            elements[numbers[i]] = indices;\n    \
    \    } else {\n            // Otherwise, add it to the list\n            elements[numbers[i]].push_back(i);\n\
    \        }\n    }\n    // Create list to hold indices to delete\n    std::list<int>\
    \ to_delete;\n    for (auto& element : elements) {\n        if (element.second.size()\
    \ > 1) {\n            for (auto& index : element.second) {\n                to_delete.push_back(index);\n\
    \            }\n        }\n    }\n    // Create new vector to hold elements not\
    \ to delete\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (std::find(to_delete.begin(), to_delete.end(), i) == to_delete.end())\
    \ {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  //Remove duplicates\n    std::sort(numbers.begin(), numbers.end());\n    numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpo5s576hp: /tmp/tmpo5s576hp.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> unique_numbers;\n\tstd::unordered_set<long> my_set;\n\t//for(auto\
    \ number : numbers) {\n\t//\t//if (my_set.find(number) == my_set.end()) {\n\t\
    //\tif (my_set.count(number) == 0) {\n\t//\t\tmy_set.insert(number);\n\t//\t\t\
    unique_numbers.push_back(number);\n\t//\t}\n\t//}\n\t//return unique_numbers;\n\
    \tfor(auto number : numbers) {\n\t\tif (my_set.count(number) == 0) {\n\t\t\tmy_set.insert(number);\n\
    \t\t\tunique_numbers.push_back(number);\n\t\t}\n\t}\n\treturn unique_numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpbt1phy39: /tmp/tmpbt1phy39.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> s;\n    for (long number : numbers)\
    \ {\n        if (s.find(number) == s.end()) {\n            s.insert(number);\n\
    \            result.push_back(number);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp9p9wii2x: /tmp/tmp9p9wii2x.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> filtered;\n\tstd::sort(numbers.begin(), numbers.end());\n\t\
    for (int i = 0; i < numbers.size(); i++) {\n\t\tif ((i+1)==numbers.size() || numbers[i]\
    \ != numbers[i+1]) {\n\t\t\tfiltered.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn\
    \ filtered;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmprr8ai1jb: /tmp/tmprr8ai1jb.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> visited;\n    for (auto number\
    \ : numbers) {\n        if (visited.find(number) == visited.end()) {\n       \
    \     result.push_back(number);\n            visited.insert(number);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp2vr7zxvf: /tmp/tmp2vr7zxvf.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    int i = 0;\n    while (i < numbers.size()) {\n\
    \        int count = 0;\n        int j = i;\n        while (j < numbers.size())\
    \ {\n            if (numbers[i] == numbers[j]) {\n                count++;\n \
    \           }\n            j++;\n        }\n        if (count == 1) {\n      \
    \      result.push_back(numbers[i]);\n        }\n        i++;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpc7upd2be: /tmp/tmpc7upd2be.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  // Your code here\n    std::vector<long> output;\n    if(numbers.size()==0){\n\
    \        return output;\n    }\n    std::map<long,long> map;\n    for(long i=0;i<numbers.size();i++){\n\
    \        if(map.find(numbers[i])==map.end()){\n            map[numbers[i]]=1;\n\
    \        }\n        else{\n            map[numbers[i]]+=1;\n        }\n    }\n\
    \    for(long i=0;i<numbers.size();i++){\n        if(map[numbers[i]]==1){\n  \
    \          output.push_back(numbers[i]);\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> ret;\n    for (auto n : numbers) {\n        if (std::find(ret.begin(),\
    \ ret.end(), n) == ret.end()) {\n            ret.push_back(n);\n        }\n  \
    \  }\n    return ret;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpqm8ffepv: /tmp/tmpqm8ffepv.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> results;\n    std::sort(numbers.begin(), numbers.end());\n\
    \    long prev = 0;\n    for (long x : numbers) {\n        if (x != prev) {\n\
    \            results.push_back(x);\n        }\n        prev = x;\n    }\n    return\
    \ results;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7980i9xy: /tmp/tmp7980i9xy.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> vec;\n    for(long i = 0; i < numbers.size(); i++) {\n  \
    \      long present = 0;\n        for(long j = 0; j < numbers.size(); j++) {\n\
    \            if(numbers[i] == numbers[j]) {\n                present++;\n    \
    \        }\n        }\n        if(present == 1) {\n            vec.push_back(numbers[i]);\n\
    \        }\n    }\n    return vec;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long>::iterator it;\n    // std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (std::find(result.begin(), result.end(), numbers[i]) == result.end())\
    \ {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpeltusjrs: /tmp/tmpeltusjrs.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::map<long,\
    \ long> m;\n  std::vector<long> res;\n  // put all the numbers in hash map\n \
    \ for (int i = 0; i < numbers.size(); i++) {\n    if (m.find(numbers[i]) == m.end())\
    \ {\n      m[numbers[i]] = 1;\n    } else {\n      m[numbers[i]]++;\n    }\n \
    \ }\n  // copy only those numbers which occur once\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    if (m[numbers[i]] == 1) {\n      res.push_back(numbers[i]);\n  \
    \  }\n  }\n  return res;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> answer;\n    std::set<long> ignore;\n    for (auto number\
    \ : numbers) {\n        if (ignore.find(number) == ignore.end()) {\n         \
    \   answer.push_back(number);\n            ignore.insert(number);\n        }\n\
    \    }\n    return answer;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpig8lpyjl: /tmp/tmpig8lpyjl.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  // TODO\n    std::vector<long> temp;\n    for(long j=0;j<numbers.size();j++){\n\
    \        temp.push_back(numbers[j]);\n    }\n    for(long i=0;i<numbers.size();i++){\n\
    \        for(long j=i+1;j<numbers.size();j++){\n            if(numbers[i]==numbers[j]){\n\
    \                for(long k=j;k<numbers.size()-1;k++){\n                    numbers[k]=numbers[k+1];\n\
    \                }\n                numbers.pop_back();\n            }\n     \
    \   }\n    }\n    assert(temp.size()>=numbers.size());\n    return numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpnwdmrqku: /tmp/tmpnwdmrqku.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long>::iterator ip;\n    sort(numbers.begin(), numbers.end());\n\
    \    ip = std::unique(numbers.begin(), numbers.end());\n    numbers.resize(std::distance(numbers.begin(),\
    \ ip));\n    return numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpeh989c3z: /tmp/tmpeh989c3z.cpp:18: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::set<long> temp;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\ttemp.insert(numbers[i]);\n\
    \t}\n\tstd::vector<long> result;\n\tfor (auto it = temp.begin(); it != temp.end();\
    \ it++) {\n\t\tresult.push_back(*it);\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpggxhi1m6: /tmp/tmpggxhi1m6.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  int cnt = 0;\n    std::vector<long> res;\n    std::map<long, int> dict;\n \
    \   for (int i = 0; i < numbers.size(); i++) {\n        if (dict.find(numbers[i])\
    \ == dict.end()) {\n            dict[numbers[i]] = i;\n            res.push_back(numbers[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpo0ctjhqf: /tmp/tmpo0ctjhqf.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  int size = numbers.size();\n    if (size == 0 || size == 1) {\n        return\
    \ numbers;\n    }\n    std::vector<long> result;\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    for (int i = 0; i < size - 1; i++) {\n        if (numbers[i]\
    \ != numbers[i + 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    result.push_back(numbers[size - 1]);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpoc3rnns0: /tmp/tmpoc3rnns0.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    for (auto num : numbers) {\n        if (std::find(result.begin(),\
    \ result.end(), num) == result.end()) {\n            result.push_back(num);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpn38z8feo: /tmp/tmpn38z8feo.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ res;\n  std::unordered_set<long> seen;\n  for (auto &el : numbers) {\n    if\
    \ (seen.find(el) == seen.end()) {\n      res.push_back(el);\n      seen.insert(el);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmprcyetpda: /tmp/tmprcyetpda.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ ans;\n  std::unordered_set<long> set;\n  for (auto elem : numbers) {\n    if\
    \ (set.find(elem) == set.end()) {\n      set.insert(elem);\n      ans.push_back(elem);\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpzcsro6d8: /tmp/tmpzcsro6d8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  for (long i=0; i<numbers.size(); i++) {\n    if (std::find(result.begin(),\
    \ result.end(), numbers[i]) == result.end()) {\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp19fbo41s: /tmp/tmp19fbo41s.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::map<long,\
    \ int> cnt;\n  std::vector<long> res;\n  for (long number : numbers) {\n    cnt[number]++;\n\
    \  }\n  for (auto [number, count] : cnt) {\n    if (count == 1) {\n      res.push_back(number);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> ret;\n    std::sort(numbers.begin(), numbers.end());\n  \
    \  for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            ret.push_back(numbers[i]);\n        }\n  \
    \  }\n    return ret;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpslvmtdew: /tmp/tmpslvmtdew.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::sort(numbers.begin(), numbers.end());\n\t// checking if there are duplicates\n\
    \tbool isDuplicate = false;\n\tfor (int i = 0; i < numbers.size() - 1; i++) {\n\
    \t\tif (numbers[i] == numbers[i + 1]) {\n\t\t\tisDuplicate = true;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tif (!isDuplicate)\n\t\treturn numbers;\n\t// Removing the duplicates\n\
    \tstd::vector<long> result;\n\tresult.push_back(numbers[0]);\n\tfor (int i = 1;\
    \ i < numbers.size(); i++) {\n\t\tif (numbers[i] != numbers[i - 1])\n\t\t\tresult.push_back(numbers[i]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> numbers_set;\n    for (auto number\
    \ : numbers) {\n        if (numbers_set.count(number) == 0) {\n            numbers_set.insert(number);\n\
    \            result.push_back(number);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp0gs4rex8: /tmp/tmp0gs4rex8.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    // v1: copy uniques to a new vector\n\tstd::unordered_set<long> s(numbers.begin(),\
    \ numbers.end());\n\tstd::vector<long> result(s.begin(), s.end());\n\treturn result;\n\
    \t// v2: remove duplicates in place in the same vector\n\t// std::unordered_set<long>\
    \ s(numbers.begin(), numbers.end());\n\t// numbers.assign(s.begin(), s.end());\n\
    \t// return numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpt8gt2tz8: /tmp/tmpt8gt2tz8.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::set<long>\
    \ seen;\n  std::vector<long> result;\n  for (long n : numbers) {\n    if (seen.find(n)\
    \ == seen.end()) {\n      seen.insert(n);\n      result.push_back(n);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpih4n0po3: /tmp/tmpih4n0po3.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> unique_numbers;\n    for (int index = 0; index < numbers.size();\
    \ index++) {\n        long number = numbers[index];\n        bool is_unique =\
    \ true;\n        for (int i = 0; i < unique_numbers.size(); i++) {\n         \
    \   if (unique_numbers[i] == number) {\n                is_unique = false;\n \
    \               break;\n            }\n        }\n        if (is_unique) {\n \
    \           unique_numbers.push_back(number);\n        }\n    }\n    return unique_numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpohw5lvfl: /tmp/tmpohw5lvfl.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::sort(numbers.begin(), numbers.end());\n\tstd::vector<long> result;\n\tint\
    \ i = 0;\n\twhile (i < numbers.size()) {\n\t\tint j = i + 1;\n\t\twhile (j < numbers.size()\
    \ && numbers[i] == numbers[j]) {\n\t\t\tj++;\n\t\t}\n\t\tresult.push_back(numbers[i]);\n\
    \t\ti = j;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpu3w2k998: /tmp/tmpu3w2k998.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> result;\n\tstd::unordered_set<long> uniqueNums;\n\tstd::unordered_set<long>\
    \ uniqueNumsTwice;\n\tfor (long i = 0; i < numbers.size(); i++) {\n\t\tif (uniqueNums.find(numbers[i])\
    \ == uniqueNums.end()) {\n\t\t\tuniqueNums.insert(numbers[i]);\n\t\t} else {\n\
    \t\t\tuniqueNumsTwice.insert(numbers[i]);\n\t\t}\n\t}\n\tfor (long i = 0; i <\
    \ numbers.size(); i++) {\n\t\tif (uniqueNumsTwice.find(numbers[i]) == uniqueNumsTwice.end())\
    \ {\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ unique;\n  std::sort(numbers.begin(), numbers.end());\n  unique.push_back(numbers[0]);\n\
    \  for (long i = 1; i < numbers.size(); i++) {\n    if (numbers[i] != numbers[i\
    \ - 1]) {\n      unique.push_back(numbers[i]);\n    }\n  }\n  return unique;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::unordered_set<long> set;\n    std::vector<long> output;\n    for (long\
    \ i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i]) == set.end())\
    \ {\n            set.insert(numbers[i]);\n            output.push_back(numbers[i]);\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpy1d17qj9: /tmp/tmpy1d17qj9.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> set;\n    for (long\
    \ n : numbers) {\n        if (set.count(n) == 0) {\n            result.push_back(n);\n\
    \            set.insert(n);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp4ke4ay54: /tmp/tmp4ke4ay54.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    for (long n : numbers) {\n        if (std::find(result.begin(),\
    \ result.end(), n) == result.end()) {\n            result.push_back(n);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp6f6xqqr6: /tmp/tmp6f6xqqr6.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long> isDuplicate;\n  for (auto number : numbers) {\n  \
    \  if (isDuplicate.find(number) == isDuplicate.end()) {\n      result.push_back(number);\n\
    \      isDuplicate.insert(number);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpqcd85k_5: /tmp/tmpqcd85k_5.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> res;\n    for (auto i : numbers) {\n        auto index =\
    \ std::find(res.begin(), res.end(), i);\n        if (index == res.end()) {\n \
    \           res.push_back(i);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpl97un7ib: /tmp/tmpl97un7ib.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> no_duplicates;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        auto iter = std::find(no_duplicates.begin(), no_duplicates.end(),\
    \ numbers[i]);\n        if (iter == no_duplicates.end()) {\n            no_duplicates.push_back(numbers[i]);\n\
    \        }\n    }\n    return no_duplicates;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpv03p4y6r: /tmp/tmpv03p4y6r.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> temp;\n    std::unordered_set<long> count;\n    for (long\
    \ num : numbers) {\n        if (count.find(num) == count.end()) {\n          \
    \  temp.push_back(num);\n            count.insert(num);\n        }\n    }\n  \
    \  return temp;\n}\nint main() {\n    auto candidate = remove_duplicates;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp90wnmdry: /tmp/tmp90wnmdry.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> v = numbers;\n    std::set<long> s (numbers.begin(), numbers.end());\n\
    \    std::vector<long>::iterator p;\n    std::set<long>::iterator q;\n    for\
    \ (p = v.begin(); p!=v.end(); p++) {\n        for (q = s.begin(); q!=s.end();\
    \ q++) {\n            if (*p == *q) {\n                break;\n            }\n\
    \        }\n        if (q == s.end()) {\n            p = v.erase(p);\n       \
    \     p--;\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpqd9lktwj: /tmp/tmpqd9lktwj.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ answer;\n  long number = -1;\n  int count = 0;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    if (number == numbers[i]) {\n      count++;\n    } else {\n    \
    \  if (count == 1) {\n        answer.push_back(number);\n      }\n      number\
    \ = numbers[i];\n      count = 1;\n    }\n  }\n  if (count == 1) {\n    answer.push_back(number);\n\
    \  }\n  return answer;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp66rm8n2g: /tmp/tmp66rm8n2g.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        bool repeated = false;\n        for (int j = 0; j < result.size(); j++)\
    \ {\n            if (numbers[i] == result[j]) repeated = true;\n        }\n  \
    \      if (!repeated) result.push_back(numbers[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpd5j5irb4: /tmp/tmpd5j5irb4.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> seen;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (seen.find(numbers[i]) == seen.end())\
    \ {\n            result.push_back(numbers[i]);\n            seen.insert(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp90_w80av: /tmp/tmp90_w80av.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> visited;\n  for (auto &number : numbers)\
    \ {\n    if (visited.count(number) == 0) {\n      result.push_back(number);\n\
    \      visited.insert(number);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpvh13k3f_: /tmp/tmpvh13k3f_.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> result;\n\tstd::set<long> s;\n\tstd::set<long> dup;\n\tfor (long\
    \ i = 0; i < numbers.size(); i++) {\n\t\tif (s.find(numbers[i]) == s.end()) {\n\
    \t\t\ts.insert(numbers[i]);\n\t\t} else {\n\t\t\tdup.insert(numbers[i]);\n\t\t\
    }\n\t}\n\tfor (long i = 0; i < numbers.size(); i++) {\n\t\tif (dup.find(numbers[i])\
    \ == dup.end()) {\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::set<long> s;\n    std::vector<long> res;\n    for (auto i : numbers) {\n\
    \        if (s.find(i) == s.end()) {\n            s.insert(i);\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpdfnlhe7a: /tmp/tmpdfnlhe7a.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::set<long>   unique_numbers;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    unique_numbers.insert(numbers[i]);\n  }\n  std::set<long>::iterator\
    \ iter;\n  for (iter = unique_numbers.begin(); iter != unique_numbers.end(); iter++)\
    \ {\n    result.push_back(*iter);\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpcaa02_8z: /tmp/tmpcaa02_8z.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> v;\n    for (int i = 0; i < numbers.size(); i++) {\n    \
    \    int count = 0;\n        for (int j = 0; j < numbers.size(); j++) {\n    \
    \        if (numbers[i] == numbers[j]) {\n                count++;\n         \
    \   }\n        }\n        if (count == 1) {\n            v.push_back(numbers[i]);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> res;\n    std::map<long, int> hmap;\n    for (long n : numbers)\
    \ {\n        if (hmap.find(n) == hmap.end()) {\n            hmap[n] = 1;\n   \
    \     } else {\n            hmap[n]++;\n        }\n    }\n    for (long n : numbers)\
    \ {\n        if (hmap[n] == 1) {\n            res.push_back(n);\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    // keep count of each element in map\n\tstd::map<long, int> count;\n\tfor (auto\
    \ num : numbers) {\n\t\tcount[num]++;\n\t}\n\t// find all elements which have\
    \ count = 1\n\tstd::vector<long> res;\n\tfor (auto num : numbers) {\n\t\tif (count[num]\
    \ == 1) {\n\t\t\tres.push_back(num);\n\t\t}\n\t}\n\treturn res;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::set<long>\
    \ set = std::set<long>(numbers.begin(), numbers.end());\n  std::vector<long> result(set.begin(),\
    \ set.end());\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp_mb4pt8y: /tmp/tmp_mb4pt8y.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ newVector;\n  newVector.push_back(numbers[0]);\n  for (int i = 1; i < numbers.size();\
    \ i++) {\n    int j = 0;\n    bool found = false;\n    while (j < newVector.size()\
    \ && !found) {\n      if (numbers[i] == newVector[j]) {\n        found = true;\n\
    \      }\n      j++;\n    }\n    if (!found) {\n      newVector.push_back(numbers[i]);\n\
    \    }\n  }\n  return newVector;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> uniques;\n    for (auto number : numbers) {\n        if (count(numbers.begin(),\
    \ numbers.end(), number) == 1) {\n            uniques.push_back(number);\n   \
    \     }\n    }\n    return uniques;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::set<long> st(numbers.begin(), numbers.end());\n\tstd::vector<long> v(st.begin(),\
    \ st.end());\n\treturn v;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpx85iubsg: /tmp/tmpx85iubsg.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  if (numbers.size() == 0) return numbers;\n    std::vector<long> result;\n \
    \   for (long i = 0; i < numbers.size(); i++) {\n        bool found = false;\n\
    \        for (long j = 0; j < result.size(); j++) {\n            if (numbers[i]\
    \ == result[j]) {\n                found = true;\n                break;\n   \
    \         }\n        }\n        if (!found) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp4wypn419: /tmp/tmp4wypn419.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> x;\n    std::set<long> numbers_set;\n    for (int i = 0;\
    \ i < numbers.size(); i++) {\n        numbers_set.insert(numbers[i]);\n    }\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers_set.find(numbers[i])\
    \ != numbers_set.end()) {\n            x.push_back(numbers[i]);\n            numbers_set.erase(numbers[i]);\n\
    \        }\n    }\n    return x;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp7e20q7_1: /tmp/tmp7e20q7_1.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  // Your code goes here\n    // Feel free to add more functions to this file.\n\
    \    std::vector<long> filteredList;\n    std::vector<long>::iterator it;\n  \
    \  int index = 0;\n    int max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    int min = *std::min_element(numbers.begin(), numbers.end());\n    int len\
    \ = numbers.size();\n    int arr[len];\n    for(it = numbers.begin(); it != numbers.end();\
    \ it++) {\n        arr[index] = *it;\n        index++;\n    }\n    for(int i =\
    \ 0; i < len; i++) {\n        if(arr[i] != arr[i+1])\n            filteredList.push_back(arr[i]);\n\
    \    }\n    return filteredList;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  int\
    \ n = numbers.size();\n  std::vector<long> u;\n  for (int i = 0; i < n; i++) {\n\
    \    auto f = std::find(u.begin(), u.end(), numbers[i]);\n    if (f == u.end())\
    \ {\n      u.push_back(numbers[i]);\n    }\n  }\n  return u;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppeezhxco: /tmp/tmppeezhxco.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> v;\n    std::unordered_set<long> s;\n    for (auto i : numbers)\
    \ {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n         \
    \   v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp90bc6zyr: /tmp/tmp90bc6zyr.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  // Write your code here\n    std::vector<long> v;\n    std::map<long, int>\
    \ m;\n    int i;\n    for(i=0;i<numbers.size();i++)\n    {\n        m[numbers[i]]++;\n\
    \    }\n    for(i=0;i<numbers.size();i++)\n    {\n        if(m[numbers[i]]==1)\n\
    \        {\n            v.push_back(numbers[i]);\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::unordered_set<long>\
    \ seen_numbers;\n  std::vector<long> output;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    if (seen_numbers.find(numbers[i]) == seen_numbers.end()) {\n   \
    \   output.push_back(numbers[i]);\n      seen_numbers.insert(numbers[i]);\n  \
    \  }\n  }\n  return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpg7rgcbr3: /tmp/tmpg7rgcbr3.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> set;\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        if (set.find(numbers[i]) == set.end()) {\n \
    \           set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpd_y3_hgk: /tmp/tmpd_y3_hgk.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  for (std::vector<long>::iterator it = numbers.begin(); it != numbers.end();\
    \ it++) {\n    bool unique = true;\n    for (std::vector<long>::iterator result_it\
    \ = result.begin(); result_it != result.end(); result_it++) {\n      if (*it ==\
    \ *result_it) {\n        unique = false;\n        break;\n      }\n    }\n   \
    \ if (unique) {\n      result.push_back(*it);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmppkyh1uam: /tmp/tmppkyh1uam.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ ans;\n  std::sort(numbers.begin(), numbers.end());\n  int cnt = 1;\n  for (int\
    \ i = 1; i < numbers.size(); i++) {\n    if (numbers[i] == numbers[i - 1]) {\n\
    \      cnt++;\n    } else {\n      if (cnt == 1) {\n        ans.push_back(numbers[i\
    \ - 1]);\n      }\n      cnt = 1;\n    }\n  }\n  if (cnt == 1) {\n    ans.push_back(numbers[numbers.size()\
    \ - 1]);\n  }\n  return ans;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ numbersToBeRemoved;\n  std::vector<long> duplicateNumbers;\n  int sizeOfNumbers\
    \ = numbers.size();\n  int duplicateNumberCounter = 0;\n  std::sort(numbers.begin(),\
    \ numbers.end());\n  for (int i = 0; i < sizeOfNumbers; i++) {\n    // numbers.erase(std::remove(numbers.begin(),\
    \ numbers.end(), numberToBeRemoved), numbers.end());\n    if (numbers[i] == numbers[i+1])\
    \ {\n      duplicateNumbers.push_back(numbers[i]);\n      duplicateNumberCounter++;\n\
    \    }\n  }\n  for (int i = 0; i < duplicateNumberCounter; i++) {\n    numbers.erase(std::remove(numbers.begin(),\
    \ numbers.end(), duplicateNumbers[i]), numbers.end());\n  }\n  return numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::set<long> unique_set;\n    std::vector<long> unique_vec;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        unique_set.insert(numbers[i]);\n\
    \    }\n    for (auto n : unique_set) {\n        unique_vec.push_back(n);\n  \
    \  }\n    return unique_vec;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp5w4dfb2m: /tmp/tmp5w4dfb2m.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  //\
    \ your code goes here\n  std::unordered_map<long, int> umap;\n  std::vector<long>::iterator\
    \ it;\n  for(it = numbers.begin(); it != numbers.end(); it++) {\n    umap[*it]++;\n\
    \  }\n  std::vector<long> ans;\n  for(it = numbers.begin(); it != numbers.end();\
    \ it++) {\n    if(umap[*it] == 1)\n      ans.push_back(*it);\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::unordered_set<long> setOfNumbers;\n\tstd::vector<long> uniqNumbers;\n\tfor\
    \ (long number : numbers) {\n\t\tsetOfNumbers.insert(number);\n\t}\n\tfor (long\
    \ number : numbers) {\n\t\tif (setOfNumbers.find(number) != setOfNumbers.end())\
    \ {\n\t\t\tuniqNumbers.push_back(number);\n\t\t\tsetOfNumbers.erase(number);\n\
    \t\t}\n\t}\n\treturn uniqNumbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp27h7nf29: /tmp/tmp27h7nf29.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long> result;\n\tif (numbers.size() == 0) {\n\t\treturn result;\n\t\
    }\n\tstd::map<long, bool> visited;\n\tfor (int i = 0; i < numbers.size(); i++)\
    \ {\n\t\tif (visited.find(numbers[i]) == visited.end()) {\n\t\t\tvisited[numbers[i]]\
    \ = true;\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp8uxc78u7: /tmp/tmp8uxc78u7.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> s;\n    for (long x\
    \ : numbers) {\n        if (s.find(x) == s.end()) {\n            s.insert(x);\n\
    \            result.push_back(x);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpttbgepdv: /tmp/tmpttbgepdv.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \      std::vector<long> result;\n        std::unordered_set<long> visited;\n\
    \        for (auto n : numbers) {\n                if (visited.find(n) == visited.end())\
    \ {\n                        result.push_back(n);\n                        visited.insert(n);\n\
    \                }\n        }\n        return result;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp2m_r2rhe: /tmp/tmp2m_r2rhe.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::sort(numbers.begin(), numbers.end());\n    numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpmwn30cjs: /tmp/tmpmwn30cjs.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ res;\n  int sz = numbers.size();\n  std::sort(numbers.begin(), numbers.end());\n\
    \  for (int i = 0; i < sz; i++) {\n    if (i == 0 || numbers[i] != numbers[i -\
    \ 1]) {\n      res.push_back(numbers[i]);\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp8w8b04l_: /tmp/tmp8w8b04l_.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> v;\n    std::map<long, int> numCounts;\n    for (long i :\
    \ numbers) {\n        if (numCounts.find(i) == numCounts.end()) {\n          \
    \  numCounts[i] = 1;\n        } else {\n            numCounts[i]++;\n        }\n\
    \    }\n    for (long i : numbers) {\n        if (numCounts[i] == 1) {\n     \
    \       v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n  \
    \  auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::set<long>\
    \ uniques(numbers.begin(), numbers.end());\n  std::vector<long> result(uniques.begin(),\
    \ uniques.end());\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpqm6fnh3x: /tmp/tmpqm6fnh3x.cpp:16: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long>::iterator i = numbers.begin();\n    while (i != numbers.end())\
    \ {\n        std::vector<long>::iterator it;\n        int n=0;\n        for (it\
    \ = numbers.begin(); it != numbers.end(); it++) {\n            if (*it == *i)\n\
    \                n++;\n        }\n        if (n > 1) {\n            numbers.erase(i);\n\
    \            i = numbers.begin();\n        }\n        else\n            i++;\n\
    \    }\n    return numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpbwroc2qy: /tmp/tmpbwroc2qy.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> dups{};\n    int i = 0;\n    while (i < numbers.size()) {\n\
    \        int j = i + 1;\n        while (j < numbers.size()) {\n            if\
    \ (numbers[i] == numbers[j]) {\n                dups.push_back(numbers[i]);\n\
    \                numbers.erase(numbers.begin() + j);\n            } else {\n \
    \               j++;\n            }\n        }\n        i++;\n    }\n    std::vector<long>\
    \ result{};\n    std::set<long> u_dups(dups.begin(), dups.end());\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (u_dups.find(numbers[i]) == u_dups.end())\
    \ {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ :: iterator it;\n  for(int i=0;i<numbers.size();i++){\n    for(int j=i+1;j<numbers.size();j++){\n\
    \      if(numbers[i]==numbers[j]){\n        it=numbers.begin()+j;\n        numbers.erase(it);\n\
    \        j--;\n      }\n    }\n  }\n  return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmplpdmepv1: /tmp/tmplpdmepv1.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> unique = {};\n    std::sort(numbers.begin(), numbers.end());\n\
    \    unique.push_back(numbers[0]);\n    for (int i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] != numbers[i - 1])\n            unique.push_back(numbers[i]);\n\
    \    }\n    return unique;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::set<long> s;\n    for (auto &n : numbers)\
    \ {\n        if (s.count(n) == 0) {\n            s.insert(n);\n            result.push_back(n);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpqdq_m6lw: /tmp/tmpqdq_m6lw.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> uniqueNums;\n    std::unordered_map<long, int> num_map;\n\
    \    for (long num : numbers) {\n        if (num_map.find(num) == num_map.end())\
    \ {\n            num_map[num] = 1;\n            uniqueNums.push_back(num);\n \
    \       }\n    }\n    return uniqueNums;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpta6qxlmo: /tmp/tmpta6qxlmo.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ numbers2;\n  int occurence = 1;\n  for (long i = 0; i < numbers.size(); i++)\
    \ {\n    for (long j = i + 1; j < numbers.size(); j++) {\n      if (numbers[i]\
    \ == numbers[j]) {\n        occurence++;\n      }\n    }\n    if (occurence ==\
    \ 1) {\n      numbers2.push_back(numbers[i]);\n    }\n    occurence = 1;\n  }\n\
    \  return numbers2;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp_7j0h0j_: /tmp/tmp_7j0h0j_.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::map<long, int> m;\n  for (auto n : numbers) {\n    if (m.find(n)\
    \ == m.end()) {\n      m[n] = 1;\n    } else {\n      m[n] += 1;\n    }\n  }\n\
    \  for (auto n : numbers) {\n    if (m[n] == 1) {\n      result.push_back(n);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::map<long,int> m;\n    for(auto i=numbers.begin();i!=numbers.end();i++){\n\
    \        if(m.find(*i)==m.end()){\n            m[*i]=1;\n            result.push_back(*i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpb9r84p8u: /tmp/tmpb9r84p8u.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long>::iterator it1, it2;\n    it1 = numbers.begin();\n    it2\
    \ = numbers.begin();\n    ++it2;\n    while (it2 != numbers.end()) {\n       \
    \ if (*it1 == *it2) {\n            numbers.erase(it2);\n        } else {\n   \
    \         ++it1;\n            ++it2;\n        }\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> res;\n    long n = numbers.size();\n    if (n == 0) {\n \
    \       return res;\n    }\n    std::sort(numbers.begin(), numbers.end());\n \
    \   res.push_back(numbers[0]);\n    for (long i = 1; i < n; i++) {\n        if\
    \ (numbers[i] != numbers[i - 1]) {\n            res.push_back(numbers[i]);\n \
    \       }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp39gz4f65: /tmp/tmp39gz4f65.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  // Your code goes here\n    std::vector<long> res;\n    std::set<long> s;\n\
    \    for(auto i:numbers){\n        if(s.count(i)==0){\n            s.insert(i);\n\
    \            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp_r9p_l9y: /tmp/tmp_r9p_l9y.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  auto\
    \ result = std::vector<long>();\n  std::unordered_set<long> seen;\n  for (auto\
    \ number : numbers) {\n    if (seen.find(number) == seen.end()) {\n      result.push_back(number);\n\
    \      seen.insert(number);\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpgne56m8v: /tmp/tmpgne56m8v.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> ans;\n    std::set<long> h(numbers.begin(), numbers.end());\n\
    \    // std::set<long> h;\n    // h.insert(numbers.begin(), numbers.end());\n\
    \    ans.insert(ans.end(), h.begin(), h.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpupaxtdn9: /tmp/tmpupaxtdn9.cpp:19: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> soln;\n    std::unordered_set<long> seen;\n    for (long\
    \ i : numbers) {\n        if (seen.find(i) == seen.end()) {\n            soln.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return soln;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmptoen3leo: /tmp/tmptoen3leo.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> setOfNumbers;\n  // iterate through each\
    \ number and add it to the set if it is unique\n  for (long number : numbers)\
    \ {\n    if (setOfNumbers.find(number) == setOfNumbers.end()) {\n      setOfNumbers.insert(number);\n\
    \      result.push_back(number);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp2ogj41mp: /tmp/tmp2ogj41mp.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> answer;\n    std::unordered_set<long> numbers_set;\n    std::unordered_set<long>\
    \ duplicates;\n    for (long number : numbers) {\n        if (numbers_set.find(number)\
    \ == numbers_set.end()) {\n            numbers_set.insert(number);\n        }\
    \ else {\n            duplicates.insert(number);\n        }\n    }\n    for (long\
    \ number : numbers) {\n        if (duplicates.find(number) == duplicates.end())\
    \ {\n            answer.push_back(number);\n        }\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  std::unordered_set<long> seen;\n  for (auto num : numbers) {\n  \
    \  if (seen.find(num) == seen.end()) {\n      result.push_back(num);\n      seen.insert(num);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmptslgzwed: /tmp/tmptslgzwed.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> result;\n    std::unordered_set<long> unique_numbers;\n \
    \   for (long number : numbers) {\n        if (unique_numbers.find(number) ==\
    \ unique_numbers.end()) {\n            unique_numbers.insert(number);\n      \
    \      result.push_back(number);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp0yfygwvo: /tmp/tmp0yfygwvo.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> numbers_copy;\n    std::vector<long> numbers_no_duplicates;\n\
    \    for (auto number : numbers) {\n        numbers_copy.push_back(number);\n\
    \    }\n    std::sort(numbers_copy.begin(), numbers_copy.end());\n    int temp\
    \ = numbers_copy[0];\n    numbers_no_duplicates.push_back(temp);\n    for (int\
    \ i = 1; i < numbers_copy.size(); i++) {\n        if (numbers_copy[i] != temp)\
    \ {\n            numbers_no_duplicates.push_back(numbers_copy[i]);\n         \
    \   temp = numbers_copy[i];\n        }\n    }\n    return numbers_no_duplicates;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> unique_numbers{};\n    auto it = unique_copy(numbers.begin(),\
    \ numbers.end(), back_inserter(unique_numbers));\n    unique_numbers.erase(it,\
    \ unique_numbers.end());\n    return unique_numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu3iu6l59.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpu3iu6l59.cpp:10:50: error: no matching function for call\
    \ to \u2018std::vector<long int>::erase(std::back_insert_iterator<std::vector<long\
    \ int> >&, std::vector<long int>::iterator)\u2019\n   10 |     unique_numbers.erase(it,\
    \ unique_numbers.end());\n      |                                            \
    \      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpu3iu6l59.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1427:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*]\u2019\n 1427 |       erase(const_iterator __position)\n      |       ^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1427:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1454:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator, std::vector<_Tp, _Alloc>::const_iterator) [with _Tp\
    \ = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; typename\
    \ std::_Vector_base<_Tp, _Alloc>::pointer = "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long> uniques;\n    std::map<long, int> counts;\n    for (long\
    \ i : numbers) {\n        if (counts.find(i) == counts.end()) {\n            counts[i]\
    \ = 1;\n        } else {\n            counts[i]++;\n        }\n    }\n    for\
    \ (long i : numbers) {\n        if (counts[i] == 1) {\n            uniques.push_back(i);\n\
    \        }\n    }\n    return uniques;\n}\nint main() {\n    auto candidate =\
    \ remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 2, 3, 4})));\n    assert(candidate((std::vector<long>({1, 2, 3, 2, 4, 3, 5})))\
    \ == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  //write your code here\n    int n = numbers.size();\n    std::vector<long>\
    \ res;\n    std::map<long, int> mp;\n    for(int i = 0; i < n; i++) {\n      \
    \  if(mp.find(numbers[i]) == mp.end()) {\n            mp[numbers[i]] = i;\n  \
    \      }\n    }\n    for(auto it = mp.begin(); it != mp.end(); it++) {\n     \
    \   res.push_back(it->first);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpm2wp43jn: /tmp/tmpm2wp43jn.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n\t\
    std::vector<long>::iterator it;\n\tit = std::unique(numbers.begin(), numbers.end());\n\
    \tnumbers.resize(std::distance(numbers.begin(), it));\n\treturn numbers;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmpe3kyg3qo: /tmp/tmpe3kyg3qo.cpp:17: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  \
    \  std::vector<long>::iterator i;\n    std::vector<long>v;\n    sort(numbers.begin(),numbers.end());\n\
    \    v.push_back(numbers[0]);\n    int a=numbers[0];\n    int b=1;\n    for(i=numbers.begin()+1;i!=numbers.end();i++)\n\
    \    {\n        if(a!=*i)\n        {\n            a=*i;\n            v.push_back(*i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ result;\n  if (numbers.size() < 2) {\n    return numbers;\n  }\n  std::sort(numbers.begin(),\
    \ numbers.end());\n  result.push_back(numbers[0]);\n  for (size_t i = 1; i < numbers.size();\
    \ i++) {\n    if (numbers[i] != numbers[i - 1]) {\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: "tmp_x_44ry9: /tmp/tmp_x_44ry9.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1,\
    \ 3, 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n  std::vector<long>\
    \ l;\n  std::map<long, long> m;\n  for (long i = 0; i < numbers.size(); i++) {\n\
    \    m[numbers[i]]++;\n  }\n  for (long i = 0; i < numbers.size(); i++) {\n  \
    \  if (m[numbers[i]] == 1)\n      l.push_back(numbers[i]);\n  }\n  return l;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
