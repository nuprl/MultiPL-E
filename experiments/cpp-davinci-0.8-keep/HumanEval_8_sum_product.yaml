name: HumanEval_8_sum_product
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of integers,\
  \ return a tuple consisting of a sum and a product of all the integers in a list.\n\
  // Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>>\
  \ sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\nstd::tuple<long,\
  \ long> sum_product(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
  \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({1, 1, 1})))\
  \ == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({100, 0})))\
  \ == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({3, 5,\
  \ 7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({10})))\
  \ == (std::make_tuple(10, 10)));\n}\n"
completions: ["    long sum = 0;\n    long product = 1;\n    for (long number : numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "\tlong sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "    std::tuple<long, long> sum_product_tuple;\n    long sum = 0;\n\
    \    long product = 1;\n    for (long num : numbers) {\n        sum += num;\n\
    \        product *= num;\n    }\n    return std::make_tuple(sum, product);", " \
    \ long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++)\
    \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (long i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "    std::tuple<long, long> sumproduct(0, 1);\n    for (long n :\
    \ numbers) {\n        std::get<0>(sumproduct) += n;\n        std::get<1>(sumproduct)\
    \ *= n;\n    }\n    return sumproduct;", "  long sum = 0;\n  long product = 1;\n\
    \  if (numbers.size() == 0) {\n    return std::make_tuple(sum, product);\n  }\n\
    \  for (long number : numbers) {\n    sum += number;\n    product *= number;\n\
    \  }\n  return std::make_tuple(sum, product);", "  long sum = 0;\n  long product\
    \ = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  std::tuple<long, long> sum_product = std::make_tuple(sum,\
    \ product);\n  return sum_product;", "    long sum,product;\n    sum=0;\n    product=1;\n\
    \    for(auto n:numbers){\n        sum+=n;\n        product*=n;\n    }\n    return\
    \ std::make_tuple(sum,product);", '  return {0, 0};', "  long sum = 0;\n  long\
    \ product = 1;\n  for (long num : numbers) {\n    sum += num;\n    product *=\
    \ num;\n  }\n  return std::make_tuple(sum, product);", "  long s = 0;\n  long\
    \ p = 1;\n  for (auto n : numbers) {\n    s += n;\n    p *= n;\n  }\n  return\
    \ std::make_tuple(s, p);", "    long sum = 0;\n    long product = 1;\n    if(numbers.size()\
    \ == 0)\n        return {sum, product};\n    else{\n        for(int i = 0; i <\
    \ numbers.size(); i++){\n            sum += numbers[i];\n            product *=\
    \ numbers[i];\n        }\n        return {sum, product};\n    }", "    int sum\
    \ = 0;\n    int product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n \
    \       sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, product);", "    long sum = 0;\n    long product = 1;\n\
    \    for (long el : numbers) {\n        sum += el;\n        product *= el;\n \
    \   }\n    return std::make_tuple(sum, product);", "    std::tuple<long, long>\
    \ t1;\n    long sum = 0;\n    long product = 1;\n    for(int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    t1 = std::make_tuple(sum, product);\n    return t1;", "  std::tuple<long,\
    \ long> result;\n  long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  std::get<0>(result)\
    \ = sum;\n  std::get<1>(result) = product;\n  return result;", "    long sum =\
    \ 0;\n    long product = 1;\n    for (auto item : numbers) {\n        sum += item;\n\
    \        product *= item;\n    }\n    return std::make_tuple(sum, product);",
  "    // Sum of integers in a list\n    long sum = 0;\n    // Product of integers\
    \ in a list\n    long product = 1;\n    for (long& number : numbers) {\n     \
    \   sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "\tlong sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\tstd::tuple<long,\
    \ long> tuple = std::make_tuple(sum, product);\n\treturn tuple;", "    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::tuple<long,\
    \ long> answer (sum, product);\n    return answer;", "    long sum = 0;\n    long\
    \ product = 1;\n    for (auto n : numbers) {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return std::make_tuple(sum, product);", "    // Write your\
    \ code here\n    long sum = 0;\n    long prod = 1;\n    for(long i = 0; i < numbers.size();\
    \ i++){\n        sum += numbers[i];\n        prod *= numbers[i];\n    }\n    return\
    \ std::make_tuple(sum, prod);", "    //your code here\n    long sum, product;\n\
    \    sum = 0;\n    product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::tuple<long,\
    \ long> sum_product = std::make_tuple(sum, product);\n    return sum_product;",
  "    int sz = numbers.size();\n    long sum = 0;\n    long mul = 1;\n    for(int\
    \ i = 0; i < sz; i++) {\n        sum += numbers[i];\n        mul *= numbers[i];\n\
    \    }\n    return std::make_tuple(sum, mul);", "    // your code here\n    long\
    \ sum = 0;\n    long product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::tuple<long,\
    \ long> my_tuple (sum, product);\n    return my_tuple;", "\tif (numbers.size()\
    \ == 0)\n\t\treturn std::make_tuple(0, 1);\n\tlong sum = 0;\n\tlong product =\
    \ 1;\n\tfor (auto i : numbers) {\n\t\tsum += i;\n\t\tproduct *= i;\n\t}\n\treturn\
    \ std::make_tuple(sum, product);", "    std::tuple<long, long> result = std::make_tuple(0,\
    \ 1);\n    for (long number : numbers) {\n        result = std::make_tuple(std::get<0>(result)\
    \ + number, std::get<1>(result) * number);\n    }\n    return result;", "\t//a\
    \ = sum, b = product\n\tlong a = 0, b = 1;\n\tif (numbers.size() == 0) {\n\t\t\
    a = 0;\n\t\tb = 1;\n\t}\n\telse {\n\t\tfor (int i = 0; i < numbers.size(); i++)\
    \ {\n\t\t\ta += numbers[i];\n\t\t\tb *= numbers[i];\n\t\t}\n\t}\n\treturn std::make_tuple(a,\
    \ b);", "    long sum = 0;\n    long product = 1;\n    for (long i : numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for (const auto number\
    \ : numbers) {\n        sum += number;\n        product *= number;\n    }\n  \
    \  return std::make_tuple(sum, product);", "    int sum = 0;\n    int prod = 1;\n\
    \    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n  \
    \      prod *= numbers[i];\n    }\n    return std::make_tuple(sum, prod);", " \
    \   long sum = 0;\n    long product = 1;\n    for (auto n : numbers) {\n     \
    \   sum += n;\n        product *= n;\n    }\n    return std::make_tuple(sum, product);",
  "\tlong int sum = 0;\n\tlong int product = 1;\n\tfor (std::vector<long>::iterator\
    \ it = numbers.begin(); it != numbers.end(); ++it) {\n\t\tsum += *it;\n\t\tproduct\
    \ *= *it;\n\t}\n\treturn std::make_tuple(sum, product);", "    std::tuple<long,\
    \ long> tuple = std::make_tuple(0, 1);\n    for (auto& i : numbers) {\n      \
    \  std::get<0>(tuple) += i;\n        std::get<1>(tuple) *= i;\n    }\n    return\
    \ tuple;", "  int sum = 0;\n  int product = 1;\n  for (long n : numbers) {\n \
    \   sum += n;\n    product *= n;\n  }\n  return std::make_tuple(sum, product);",
  "  // Write your code here!\n  long int s=0,m=1;\n  for(auto i:numbers)\n  {\n \
    \   s+=i;\n    m*=i;\n  }\n  return std::make_tuple(s,m);", "   long s=0,p=1;\n\
    \   for(int i=0;i<numbers.size();i++)\n   {\n       s=s+numbers[i];\n       p=p*numbers[i];\n\
    \   }\n   if(numbers.size()==0)\n   {\n       return std::make_tuple(0,1);\n \
    \  }\n   else\n   {\n       return std::make_tuple(s,p);\n   }", "    if(numbers.size()\
    \ == 0)\n    {\n        return std::make_tuple(0, 1);\n    }\n    long sum = 0;\n\
    \    long pro = 1;\n    for(int i = 0; i < numbers.size(); i++)\n    {\n     \
    \   sum += numbers[i];\n        pro *= numbers[i];\n    }\n    return std::make_tuple(sum,\
    \ pro);", "    // only work when v is not empty.\n    if (numbers.size() > 0)\
    \ {\n        long sum = 0;\n        long product = 1;\n        for (int i = 0;\
    \ i < numbers.size(); i++) {\n            sum += numbers[i];\n            product\
    \ *= numbers[i];\n        }\n        return std::make_tuple(sum, product);\n \
    \   }\n    return std::make_tuple(0, 1);", "\tlong sum = 0;\n\tlong product =\
    \ 1;\n\tfor (long i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\t\
    \tproduct *= numbers[i];\n\t}\n\tif (numbers.size() == 0) {\n\t\treturn std::make_tuple(0,\
    \ 1);\n\t}\n\treturn std::make_tuple(sum, product);", "    long s=0, p=1;\n  \
    \  if(numbers.size()==0)\n        return std::make_tuple(s,p);\n    for(auto i:numbers)\n\
    \    {\n        s=s+i;\n        p=p*i;\n    }\n    return std::make_tuple(s,p);",
  "  long sum = 0;\n  long product = 1;\n  for (auto n : numbers) {\n    sum += n;\n\
    \    product *= n;\n  }\n  return std::make_tuple(sum, product);", "  long sum\
    \ = 0;\n  long prod = 1;\n  for (size_t i = 0; i < numbers.size(); i++) {\n  \
    \  sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ prod);", "  if (numbers.size() == 0)\n    return std::make_tuple(0, 1);\n  long\
    \ sum = 0;\n  long product = 1;\n  for (auto num : numbers) {\n    sum += num;\n\
    \    product *= num;\n  }\n  return std::make_tuple(sum, product);", "    long\
    \ sum = 0;\n    long product = 1;\n    for (long number : numbers) {\n       \
    \ sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum=0,prod=1;\n    for(int i=0;i<numbers.size();i++){\n\
    \        sum+=numbers[i];\n        prod*=numbers[i];\n    }\n    return std::make_tuple(sum,prod);",
  "    std::tuple<long, long> ans(0, 1);\n    for (auto i: numbers) {\n        std::get<0>(ans)\
    \ += i;\n        std::get<1>(ans) *= i;\n    }\n    return ans;", "    long sum\
    \ = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::tuple<long,\
    \ long> ans = std::make_tuple(sum, product);\n    return ans;", "    long long\
    \ sum=0,prod=1;\n    for(auto it=numbers.begin();it!=numbers.end();it++)\n   \
    \ {\n        sum+=*it;\n        prod*=*it;\n    }\n    return std::make_tuple(sum,prod);",
  "    long sum = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    std::tuple<long, long> output(sum, product);\n    return output;", "  long\
    \ sum;\n  long product;\n  if(numbers.size() == 0){\n    sum = 0;\n    product\
    \ = 1;\n  }\n  else{\n    for(int i = 0; i < numbers.size(); i++){\n      sum\
    \ += numbers[i];\n      product *= numbers[i];\n    }\n  }\n  return std::make_tuple(sum,\
    \ product);", "\treturn std::make_tuple(std::accumulate(numbers.begin(), numbers.end(),\
    \ 0L), std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>()));",
  "  // Good luck!\n  int a = 0;\n  int b = 1;\n  for(int i = 0; i < numbers.size();\
    \ i++){\n    a += numbers[i];\n    b *= numbers[i];\n  }\n  return std::make_tuple(a,\
    \ b);", "  long sum = 0;\n  long product = 1;\n  for (auto number : numbers) {\n\
    \    sum += number;\n    product *= number;\n  }\n  return std::make_tuple(sum,\
    \ product);", "\t// TODO: implement me\n\treturn std::make_tuple(0, 1);", "  long\
    \ resultSum = 0;\n  long resultProduct = 1;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    resultSum += numbers[i];\n    resultProduct *= numbers[i];\n  }\n\
    \  return std::make_tuple(resultSum, resultProduct);", "    long sum = 0;\n  \
    \  long product = 1;\n    for (auto const& num : numbers) {\n        sum += num;\n\
    \        product *= num;\n    }\n    return std::make_tuple(sum, product);", " \
    \   int sum = 0;\n    int product = 1;\n    for(int i = 0; i < numbers.size();\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return {sum, product};", "    long sum=0, product=1;\n    for(int i=0; i<numbers.size();\
    \ i++){\n        sum = sum + numbers[i];\n        product = product * numbers[i];\n\
    \    }\n    return {sum, product};", "    long sum=0,product=1;\n    for(auto\
    \ i:numbers){\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum,product);",
  "    long sum = 0;\n    long product = 1;\n    for (std::vector<long>::iterator\
    \ it = numbers.begin(); it != numbers.end(); ++it) {\n        sum += *it;\n  \
    \      product *= *it;\n    }\n    return std::make_tuple(sum, product);", " \
    \   // your code here\n    long sum = 0;\n    long product = 1;\n    if(numbers.size()\
    \ == 0){\n      return std::make_tuple(sum, product);\n    }\n\n    for(int i\
    \ = 0; i < numbers.size(); i++){\n      sum += numbers[i];\n      product *= numbers[i];\n\
    \    }\n    return std::make_tuple(sum, product);", "    long sum=0, product=1;\n\
    \    if(numbers.size()==0)\n    {\n        return std::make_tuple(sum, product);\n\
    \    }\n    else\n    {\n        for(int i=0; i<numbers.size(); i++)\n       \
    \ {\n            sum+=numbers[i];\n            product*=numbers[i];\n        }\n\
    \        return std::make_tuple(sum, product);\n    }\n    ", "    long sum =\
    \ 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    std::tuple<long,\
    \ long> result = std::make_tuple(sum, product);\n    return result;", "    long\
    \ sum = 0;\n    long product = 1;\n    for (long number : numbers) {\n       \
    \ sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "  int tuple[2] = {0, 1};\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    tuple[0] += numbers[i];\n    tuple[1] *= numbers[i];\n  }\n  return\
    \ std::make_tuple(tuple[0], tuple[1]);", "  \n  long sum=0;\n  long product=1;\n\
    \  for(int i=0;i<numbers.size();i++)\n  {\n    sum=sum+numbers[i];\n    product=product*numbers[i];\n\
    \  }\n  std::tuple<long, long> tuple(sum,product);\n  return tuple;", "  int s\
    \ = 0;\n  int p = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    s += numbers[i];\n\
    \    p *= numbers[i];\n  }\n  return std::make_tuple(s, p);", "  // Initialize\
    \ the sum and product with the first element\n  long sum = numbers[0];\n  long\
    \ product = numbers[0];\n  // Loop through all the elements\n  for (long i = 1;\
    \ i < numbers.size(); i++) {\n    // Update the sum and product\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  // Return the result as a tuple\n  return\
    \ std::make_tuple(sum, product);", "  long sum{};\n  long product{1};\n  for (auto\
    \ n : numbers) {\n    sum += n;\n    product *= n;\n  }\n  return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (long i : numbers)\
    \ {\n    sum += i;\n    product *= i;\n  }\n  return std::make_tuple(sum, product);",
  "\tlong sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size(); i++)\
    \ {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "\tlong sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "  long sum=0;\n  long product=1;\n  for(int i=0;i<numbers.size();i++){\n\
    \    sum+=numbers[i];\n    product*=numbers[i];\n  }\n  return std::make_tuple(sum,product);",
  "    long sum = 0;\n    long product = 1;\n    for (long num : numbers) {\n    \
    \    sum += num;\n        product *= num;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for (auto i : numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long long sum = 0;\n    long long product = 1;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    return std::make_tuple(sum, product);", "  long sum\
    \ = 0;\n  long product = 1;\n  for (long i = 0; i < numbers.size(); i++) {\n \
    \   sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "    long sum=0,product=1;\n    for(long i=0;i<numbers.size();i++){\n\
    \        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    std::tuple<long,\
    \ long> result = std::make_tuple(sum, product);\n    return result;", "  long\
    \ s = 0;\n  long p = 1;\n  for (long n : numbers) {\n    s += n;\n    p *= n;\n\
    \  }\n  return std::make_tuple(s, p);", "\tlong sum = 0;\n\tlong product = 1;\n\
    \tfor (auto item : numbers) {\n\t\tsum += item;\n\t\tproduct *= item;\n\t}\n\t\
    return std::make_tuple(sum, product);", "    long sum = 0;\n    long product =\
    \ 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return std::make_tuple(sum, product);",
  "    long sum = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return std::make_tuple(sum, product);", "\tlong sum = 0;\n\tlong product\
    \ = 1;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\
    \t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum, product);", "\t\
    long sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size(); i++)\
    \ {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (long number : numbers)\
    \ {\n    sum += number;\n    product *= number;\n  }\n  return std::make_tuple(sum,\
    \ product);", "\tif (numbers.size() == 0) {\n\t\treturn std::make_tuple(0, 1);\n\
    \t}\n\tlong product = 1;\n\tlong sum = 0;\n\tfor (long num : numbers) {\n\t\t\
    product *= num;\n\t\tsum += num;\n\t}\n\treturn std::make_tuple(sum, product);",
  "  long sum = 0;\n  long product = 1;\n  for (auto num : numbers) {\n    sum +=\
    \ num;\n    product *= num;\n  }\n  return std::make_tuple(sum, product);", " \
    \ long sum = 0;\n  long product = 1;\n  if (numbers.size() == 0) {\n    return\
    \ std::make_tuple(sum, product);\n  } else {\n    for (auto itr = numbers.begin();\
    \ itr != numbers.end(); itr++) {\n      sum += *itr;\n      product *= *itr;\n\
    \    }\n    return std::make_tuple(sum, product);\n  }", "    long p = 1;\n  \
    \  long s = 0;\n    for(int i = 0; i < numbers.size(); i++) {\n        p *= numbers[i];\n\
    \        s += numbers[i];\n    }\n    return std::make_tuple(s, p);", "    long\
    \ sum=0, product=1;\n    for(auto &it:numbers){\n        sum+=it;\n        product*=it;\n\
    \    }\n    return std::make_tuple(sum, product);", "    long sum = 0;\n    long\
    \ product = 1;\n    if(numbers.size() == 0) {\n        return std::make_tuple(sum,\
    \ product);\n    }\n    for(auto i : numbers) {\n        sum += i;\n        product\
    \ *= i;\n    }\n    return std::make_tuple(sum, product);", "    long sum=0,prod=1;\n\
    \    for(long i=0;i<numbers.size();i++){\n        sum+=numbers[i];\n        prod*=numbers[i];\n\
    \    }\n    return std::make_tuple(sum,prod);", "\tlong sum = 0;\n\tlong product\
    \ = 1;\n\tif (numbers.size()==0) {\n\t\treturn std::make_tuple(sum, product);\n\
    \t}\n\telse {\n\t\tfor (std::vector<long>::iterator it = numbers.begin(); it !=\
    \ numbers.end(); ++it) {\n\t\t\tsum += *it;\n\t\t\tproduct *= *it;\n\t\t}\n\t\t\
    return std::make_tuple(sum, product);\n\t}", "\tlong sum = 0;\n\tlong product\
    \ = 1;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\
    \t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum, product);", " \
    \   long s = 0;\n    long p = 1;\n    for (long num : numbers) {\n        s +=\
    \ num;\n        p *= num;\n    }\n    return std::make_tuple(s, p);", "  int size\
    \ = numbers.size();\n  long sum = 0;\n  long product = 1;\n  for (int i = 0; i\
    \ < size; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return\
    \ std::make_tuple(sum, product);", "\t// C++ is nice\n\treturn std::make_tuple(std::accumulate(numbers.begin(),\
    \ numbers.end(), 0),\n\t\t\t\t\t\t   std::accumulate(numbers.begin(), numbers.end(),\
    \ 1, std::multiplies<long>()));", "    long sum = 0;\n    long product = 1;\n\
    \    for (const auto &number : numbers) {\n        sum += number;\n        product\
    \ *= number;\n    }\n    return std::make_tuple(sum, product);", "\tlong sum =\
    \ 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\
    sum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for (int i = 0; i\
    \ < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    return std::make_tuple(sum, product);", "  long sum = 0;\n  long product\
    \ = 1;\n  for (auto number : numbers) {\n    sum += number;\n    product *= number;\n\
    \  }\n  return std::make_tuple(sum, product);", "    long sum = 0;\n    long prod\
    \ = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n\
    \        prod *= numbers[i];\n    }\n    std::tuple<long, long> answer(sum, prod);\n\
    \    return answer;", "   // initialize the sum and product with zero and one\
    \ respectively\n   long sum = 0;\n   long product = 1;\n   // loop through every\
    \ element of the vector\n   for(int i = 0; i < numbers.size(); i++) {\n      //\
    \ add the current element to the sum\n      sum += numbers[i];\n      // multiply\
    \ the current element to the product\n      product *= numbers[i];\n   }\n   //\
    \ return the sum and product\n   return std::make_tuple(sum, product);", "   \
    \ long a=0, b=1;\n    for(int i=0; i<numbers.size(); i++){\n        a+=numbers[i];\n\
    \        b*=numbers[i];\n    }\n    return std::make_tuple(a, b);", "  return\
    \ {std::accumulate(numbers.begin(), numbers.end(), 0l),\n          std::accumulate(numbers.begin(),\
    \ numbers.end(), 1l,\n                          std::multiplies<long>())};", " \
    \   long sum = 0;\n    long product = 1;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return std::make_tuple(sum, product);", "\tlong sum = 0;\n\tlong product\
    \ = 1;\n\tfor (std::vector<long>::iterator it = numbers.begin(); it != numbers.end();\
    \ ++it) {\n\t\tsum += *it;\n\t\tproduct *= *it;\n\t}\n\tstd::tuple<long, long>\
    \ result = std::make_tuple(sum, product);\n\treturn result;", "  long sum = 0;\n\
    \  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum +=\
    \ numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (long i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (long n : numbers)\
    \ {\n    sum += n;\n    product *= n;\n  }\n  return std::make_tuple(sum, product);",
  "  long sum = 0;\n  long product = 1;\n  for (auto num : numbers) {\n    sum +=\
    \ num;\n    product *= num;\n  }\n  return std::make_tuple(sum, product);", " \
    \   long sum = 0;\n    long product = 1;\n    for (long number : numbers) {\n\
    \        sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "\tif (numbers.size() == 0)\n\t\treturn std::make_tuple(0, 1);\n\
    \tlong sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size(); i++)\
    \ {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "\tlong sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "\tlong sum=0, product=1;\n\tfor(long i:numbers){\n\t\tsum+=i;\n\
    \t\tproduct*=i;\n\t}\n\treturn std::make_tuple(sum, product);", "    long long\
    \ product{ 1 };\n    long long sum{ 0 };\n    for (auto num : numbers) {\n   \
    \     product *= num;\n        sum += num;\n    }\n    return std::make_tuple(sum,\
    \ product);", "\t//sum\n\tlong sum = 0;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tsum += numbers[i];\n\t}\n\t//product\n\tlong product = 1;\n\tfor\
    \ (int i = 0; i < numbers.size(); i++) {\n\t\tproduct *= numbers[i];\n\t}\n\t\
    return std::make_tuple(sum, product);", "    long sum = 0;\n    long product =\
    \ 1;\n    for (auto & elem : numbers) {\n        sum += elem;\n        product\
    \ *= elem;\n    }\n    return std::make_tuple(sum, product);", "    long sum=0,\
    \ product=1;\n    for(int i=0; i<numbers.size(); i++){\n        sum+=numbers[i];\n\
    \        product*=numbers[i];\n    }\n    return std::make_tuple(sum, product);",
  '    return {std::accumulate(numbers.begin(), numbers.end(), 0L), std::accumulate(numbers.begin(),
    numbers.end(), 1L, std::multiplies<long>())};', "    int sum = 0;\n    int product\
    \ = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return std::make_tuple(sum, product);",
  "    // Do your magic here\n    long sum = 0;\n    long product = 1;\n    for(int\
    \ i = 0; i < numbers.size(); i++){\n      sum += numbers[i];\n      product *=\
    \ numbers[i];\n    }\n    return std::make_tuple(sum, product);", "    long sum\
    \ = 0;\n    long product = 1;\n    for (auto number : numbers) {\n        sum\
    \ += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum=0, product=1;\n    for(long number: numbers){\n  \
    \      sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "\tint sum = 0;\n\tint product = 1;\n\tfor (auto it : numbers) {\n\
    \t\tsum += it;\n\t\tproduct *= it;\n\t}\n\treturn std::make_tuple(sum, product);",
  "    long sum = 0;\n    long product = 1;\n    for (std::vector<long>::iterator\
    \ it = numbers.begin(); it != numbers.end(); ++it) {\n        sum += *it;\n  \
    \      product *= *it;\n    }\n    return std::make_tuple(sum, product);", " \
    \ long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size(); i++)\
    \ {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "  int sum = 0;\n  int product = 1;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "    std::tuple<long, long> tuple;\n    long sum = 0;\n    long\
    \ product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum +=\
    \ numbers[i];\n        product *= numbers[i];\n    }\n    std::get<0>(tuple) =\
    \ sum;\n    std::get<1>(tuple) = product;\n    return tuple;", "    std::tuple<long,\
    \ long> res;\n    long sum = 0;\n    long product = 1;\n    for (long number :\
    \ numbers) {\n        sum += number;\n        product *= number;\n    }\n    res\
    \ = std::make_tuple(sum, product);\n    return res;", "\tlong long sum = 0;\n\t\
    long long product = 1;\n\tfor (auto it = numbers.begin(); it != numbers.end();\
    \ it++) {\n\t\tsum += *it;\n\t\tproduct *= *it;\n\t}\n\tstd::tuple<long, long>\
    \ result(sum, product);\n\treturn result;", "    std::tuple<long, long> sumProd(0,\
    \ 1);\n    long sum = 0;\n    long prod = 1;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        prod *= numbers[i];\n    }\n   \
    \ std::get<0>(sumProd) = sum;\n    std::get<1>(sumProd) = prod;\n    return sumProd;",
  "\tint length = numbers.size();\n\tif (length == 0) {\n\t\treturn std::make_tuple(0,\
    \ 1);\n\t}\n\telse {\n\t\tlong sum = 0;\n\t\tlong product = 1;\n\t\tfor (int i\
    \ = 0; i < length; i++) {\n\t\t\tsum += numbers[i];\n\t\t\tproduct *= numbers[i];\n\
    \t\t}\n\t\treturn std::make_tuple(sum, product);\n\t}", "    long sum{0};\n  \
    \  long product{1};\n    for(int i{0}; i < numbers.size(); i++){\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "    long long sum = 0;\n    long long product = 1;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    std::tuple<long, long> tup(sum, product);\n    return\
    \ tup;", "  long sum = 0;\n  long product = 1;\n  for (const auto& number : numbers)\
    \ {\n    sum += number;\n    product *= number;\n  }\n  return std::make_tuple(sum,\
    \ product);", "  int sum = 0;\n  int product = 1;\n  if (numbers.size() == 0)\n\
    \    return std::make_tuple(sum, product);\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "\tlong sum = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum,\
    \ product);", "  if (numbers.size() == 0) {\n    return std::make_tuple(0, 1);\n\
    \  }\n  long sum = 0;\n  long product = 1;\n  for (long number : numbers) {\n\
    \    sum += number;\n    product *= number;\n  }\n  return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for (auto number\
    \ : numbers) {\n        sum += number;\n        product *= number;\n    }\n  \
    \  return std::make_tuple(sum, product);", "  long x{0}, y{1};\n  for(auto i =\
    \ numbers.begin(); i != numbers.end(); i++) {\n    x += *i;\n    y *= *i;\n  }\n\
    \  return std::make_tuple(x, y);", "\tlong product = 1;\n\tlong sum = 0;\n\tfor\
    \ (int i = 0; i < numbers.size(); i++) {\n\t\tproduct *= numbers[i];\n\t\tsum\
    \ += numbers[i];\n\t}\n\treturn std::make_tuple(sum, product);", "  long sum =\
    \ 0;\n  long product = 1;\n  for (long n : numbers) {\n    sum += n;\n    product\
    \ *= n;\n  }\n  return std::make_tuple(sum, product);", "  int sum = 0;\n  int\
    \ prod = 1;\n  for (auto i = numbers.begin(); i != numbers.end(); i++) {\n   \
    \ sum += *i;\n    prod *= *i;\n  }\n  return std::make_tuple(sum, prod);", " \
    \ \tlong sum = 0;\n\tlong product = 1;\n\tfor(int i = 0; i < numbers.size(); i++){\n\
    \t\tsum = sum + numbers[i];\n\t\tproduct = product * numbers[i];\n\t}\n\treturn\
    \ std::make_tuple(sum, product);", "\tlong sum = 0;\n\tlong prod = 1;\n\tfor (auto\
    \ i = numbers.begin(); i != numbers.end(); i++) {\n\t\tsum += *i;\n\t\tprod *=\
    \ *i;\n\t}\n\treturn std::make_tuple(sum, prod);", "    long sum = 0;\n    long\
    \ product = 1;\n    for (long n : numbers) {\n        sum += n;\n        product\
    \ *= n;\n    }\n    return std::make_tuple(sum, product);", "    long sum=0, prod=1;\n\
    \    for(int x:numbers){\n        sum+=x;\n        prod*=x;\n    }\n    return\
    \ std::make_tuple(sum, prod);", "    // your code here\n    return std::make_tuple(0,\
    \ 0);", "    long sum = 0;\n    long pro = 1;\n    for(long num : numbers){\n\
    \        sum += num;\n        pro *= num;\n    }\n    return std::make_tuple(sum,\
    \ pro);", "   long sum = 0;\n   long product = 1;\n   for (size_t i = 0; i < numbers.size();\
    \ i++) {\n      sum += numbers[i];\n      product *= numbers[i];\n   }\n   return\
    \ std::make_tuple(sum, product);", "    long product = 1;\n    long sum = 0;\n\
    \    for (auto num : numbers) {\n        product *= num;\n        sum += num;\n\
    \    }\n    return std::make_tuple(sum, product);", "    long sum = 0;\n    long\
    \ prod = 1;\n    for (auto number : numbers) {\n        sum += number;\n     \
    \   prod *= number;\n    }\n    return std::make_tuple(sum, prod);", "  int sum\
    \ = 0;\n  int product = 1;\n  for (long x : numbers) {\n    sum += x;\n    product\
    \ *= x;\n  }\n  return std::make_tuple(sum, product);", "    return std::make_tuple(std::accumulate(numbers.begin(),\
    \ numbers.end(), 0L),\n                           std::accumulate(numbers.begin(),\
    \ numbers.end(), 1L, std::multiplies<long>()));", "    // declare variables\n\
    \    long sum = 0;\n    long product = 1;\n    // calculate sum\n    for (long\
    \ i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n    }\n    //\
    \ calculate product\n    for (long i = 0; i < numbers.size(); i++) {\n       \
    \ product *= numbers[i];\n    }\n    // return tuple\n    return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for (auto& i : numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "  if (numbers.size() == 0) {\n    return std::make_tuple(0, 1);\n\
    \  }\n  long long sum = 0;\n  long long product = 1;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "    // your code here\n    long sum = 0;\n    long pro = 1;\n \
    \   for(int i = 0; i < numbers.size(); i++){\n      sum += numbers[i];\n     \
    \ pro *= numbers[i];\n    }\n    std::tuple<long, long> ans = std::make_tuple(sum,\
    \ pro);\n    return ans;", "    std::tuple<long, long> result;\n    long sum,\
    \ product;\n    sum = 0;\n    product = 1;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    result = std::make_tuple(sum, product);\n    return result;", "    if(numbers.size()\
    \ == 0) {\n        return std::make_tuple(0, 1);\n    }\n    long sum = 0;\n \
    \   long product = 1;\n    for(int i = 0; i < numbers.size(); i++) {\n       \
    \ sum += numbers[i];\n        product *= numbers[i];\n    }\n    return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (auto num : numbers)\
    \ {\n    sum += num;\n    product *= num;\n  }\n  return std::make_tuple(sum,\
    \ product);", "   long sum = 0;\n   long product = 1;\n   if(numbers.size() ==\
    \ 0)\n   {\n      sum = 0;\n      product = 1;\n   }\n   else\n   {\n      for(int\
    \ i = 0; i < numbers.size(); i++)\n      {\n         sum += numbers[i];\n    \
    \     product *= numbers[i];\n      }\n   }\n   return std::make_tuple(sum, product);",
  "    std::tuple<long, long> result(0, 1);\n    for (auto i : numbers) {\n      \
    \  std::get<0>(result) += i;\n        std::get<1>(result) *= i;\n    }\n    return\
    \ result;", "    long sum = 0;\n    long product = 1;\n    for (long number :\
    \ numbers) {\n        sum += number;\n        product *= number;\n    }\n    return\
    \ std::make_tuple(sum, product);", "  long sum, product;\n  sum = product = 0;\n\
    \  for (auto &e : numbers) {\n    sum += e;\n    product *= e;\n  }\n  return\
    \ std::make_tuple(sum, product);", "    long sum = 0;\n    long product = 1;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return std::make_tuple(sum, product);",
  "\tlong sum = 0;\n\tlong product = 1;\n\tif (numbers.size() == 0)\n\t\treturn std::make_tuple(sum,\
    \ product);\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tsum += numbers[i];\n\
    \t\tproduct *= numbers[i];\n\t}\n\treturn std::make_tuple(sum, product);", " \
    \   long sum = 0;\n    long product = 1;\n    for (long number : numbers) {\n\
    \        sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "  int res = 0;\n  long product = 1;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    res += numbers[i];\n    product *= numbers[i];\n  }\n  std::tuple<long,\
    \ long> tup(res, product);\n  return tup;", "    std::tuple<long, long> numbers_tuple;\n\
    \    long sum{0};\n    long product{1};\n    for (auto const & number : numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    numbers_tuple\
    \ = std::make_tuple(sum, product);\n    return numbers_tuple;", "    std::tuple<long,\
    \ long> result;\n    long long sum = 0;\n    long long product = 1;\n    int size\
    \ = numbers.size();\n    if (size == 0) {\n        std::get<0>(result) = 0;\n\
    \        std::get<1>(result) = 1;\n        return result;\n    }\n    for (int\
    \ i = 0; i < size; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    std::get<0>(result) = sum;\n    std::get<1>(result) = product;\n \
    \   return result;", "    long sum, product;\n    if(numbers.size()==0){\n   \
    \     sum = 0;\n        product = 1;\n    }\n    else{\n        sum = 0;\n   \
    \     product = 1;\n        for(auto i : numbers){\n            sum += i;\n  \
    \          product *= i;\n        }\n    }\n    return std::make_tuple(sum, product);",
  "  long sum=0;\n  long product=1;\n  for(long n:numbers){\n    sum+=n;\n    product*=n;\n\
    \  }\n  return std::make_tuple(sum,product);", "  // If you are lucky you can\
    \ get this to compile.\n  // Don't worry about the efficiency, the true power\
    \ of using a tuple will\n  // really shine when you come to the \"Tuple Trick\"\
    \n  std::tuple<long, long> sp(0,1);\n  return sp;", "  long product{1};\n  long\
    \ sum{0};\n  for (const auto& number : numbers) {\n    product *= number;\n  \
    \  sum += number;\n  }\n  return std::make_tuple(sum, product);", "    // write\
    \ your solution here\n    long sum = 0;\n    long product = 1;\n    for(int i\
    \ = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product\
    \ *= numbers[i];\n    }\n    std::tuple<long, long> answer = std::make_tuple(sum,\
    \ product);\n    return answer;", "  return std::make_tuple(std::accumulate(numbers.begin(),\
    \ numbers.end(), 0),\n                         std::accumulate(numbers.begin(),\
    \ numbers.end(), 1, std::multiplies<long>()));", "    long sum = 0;\n    long\
    \ product = 1;\n    if (numbers.size() == 0) {\n        return std::make_tuple(sum,\
    \ product);\n    } else {\n        for (int i = 0; i < numbers.size(); i++) {\n\
    \            sum += numbers[i];\n            product *= numbers[i];\n        }\n\
    \        return std::make_tuple(sum, product);\n    }", "  long sum = 0;\n  long\
    \ prod = 1;\n  for (auto el: numbers) {\n    sum += el;\n    prod *= el;\n  }\n\
    \  return std::make_tuple(sum, prod);", "    long sum=0, product=1;\n    for(int\
    \ i=0; i<numbers.size(); i++){\n        sum+=numbers[i];\n        product*=numbers[i];\n\
    \    }\n    return std::make_tuple(sum, product);", "  long sum = 0;\n  long product\
    \ = 1;\n  for (long i : numbers) {\n    sum += i;\n    product *= i;\n  }\n  return\
    \ std::make_tuple(sum, product);", "  // Write your code here\n  long sum = 0;\n\
    \  long product = 1;\n  for(int i = 0; i < numbers.size(); i++){\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  return std::make_tuple(sum, product);", " \
    \   long sum = 0;\n    long product = 1;\n    for (long number : numbers) {\n\
    \        sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "  long sum = 0;\n  long product = 1;\n  for (auto n : numbers)\
    \ {\n    sum += n;\n    product *= n;\n  }\n  return std::make_tuple(sum, product);",
  "    long sum = 0;\n    long product = 1;\n    for (auto ele : numbers) {\n    \
    \    sum += ele;\n        product *= ele;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    // Write your code here\n    long sum=0, mul=1;\n    for(int\
    \ i=0; i<numbers.size(); i++){\n        sum+=numbers[i];\n        mul*=numbers[i];\n\
    \    }\n    return {sum, mul};", "    long sum = 0;\n    long product = 1;\n \
    \   for (long number : numbers) {\n        sum += number;\n        product *=\
    \ number;\n    }\n    return std::make_tuple(sum, product);", "  long sum = 0;\n\
    \  long product = 1;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum +=\
    \ numbers[i];\n    product *= numbers[i];\n  }\n  return std::make_tuple(sum,\
    \ product);", "  int sum = 0;\n  int prod = 1;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  std::tuple<long,\
    \ long> result = std::make_tuple(sum, prod);\n  return result;", "    long sum\
    \ = 0;\n    long product = 1;\n    for (long n : numbers) {\n        sum += n;\n\
    \        product *= n;\n    }\n    return std::make_tuple(sum, product);", "\t\
    long a, b;\n\ta = b = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\ta\
    \ += numbers[i];\n\t\tb *= numbers[i];\n\t}\n\treturn std::make_tuple(a, b);",
  "\tint s = 0;\n\tint p = 1;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\t\
    s += numbers[i];\n\t\tp *= numbers[i];\n\t}\n\treturn std::make_tuple(s, p);",
  "    long sum = 0;\n    long product = 1;\n    for (long n : numbers) {\n      \
    \  sum += n;\n        product *= n;\n    }\n    return std::make_tuple(sum, product);",
  "    long sum{0};\n    long product{1};\n    for(auto &item: numbers){\n       \
    \ sum+=item;\n        product*=item;\n    }\n    std::tuple<long, long> t{sum,\
    \ product};\n    return t;"]
stop_tokens:
- "\n}"
