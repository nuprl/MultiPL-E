name: HumanEval_26_remove_duplicates
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
  \ remove all elements that occur more than once.\n// Keep order of elements left\
  \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3,\
  \ 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
  \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
completions: ["    std::vector<long> numbers_copy;\n    for (long i = 0; i < numbers.size();\
    \ i++) {\n        for (long j = i + 1; j < numbers.size(); j++) {\n          \
    \  if (numbers[i] == numbers[j]) {\n                numbers_copy.push_back(numbers[i]);\n\
    \            }\n        }\n    }\n    for (long i = 0; i < numbers_copy.size();\
    \ i++) {\n        for (long j = 0; j < numbers.size(); j++) {\n            if\
    \ (numbers_copy[i] == numbers[j]) {\n                numbers.erase(numbers.begin()\
    \ + j);\n            }\n        }\n    }\n    return numbers;", "    std::vector<long>\
    \ output;\n    std::unordered_set<long> set;\n    for (long num : numbers) {\n\
    \        if (set.find(num) == set.end()) {\n            set.insert(num);\n   \
    \         output.push_back(num);\n        }\n    }\n    return output;", "   \
    \ std::vector<long> v;\n    std::set<long> s;\n    for (auto i : numbers) {\n\
    \        if (s.count(i) == 0) {\n            s.insert(i);\n            v.push_back(i);\n\
    \        }\n    }\n    return v;", "\tstd::vector<long> result;\n\tstd::map<long,\
    \ long> obj;\n\tfor (long i = 0; i < numbers.size(); i++) {\n\t\tlong n = numbers[i];\n\
    \t\tif (obj.find(n) == obj.end()) {\n\t\t\tobj[n] = 1;\n\t\t} else {\n\t\t\tobj[n]++;\n\
    \t\t}\n\t}\n\tfor (long i = 0; i < numbers.size(); i++) {\n\t\tlong n = numbers[i];\n\
    \t\tif (obj[n] == 1) {\n\t\t\tresult.push_back(n);\n\t\t}\n\t}\n\treturn result;",
  "    std::vector<long> v;\n    std::sort(numbers.begin(), numbers.end());\n    v.push_back(numbers[0]);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != numbers[i\
    \ - 1]) {\n            v.push_back(numbers[i]);\n        }\n    }\n    return\
    \ v;", "    std::vector<long> result;\n    std::unordered_set<long> set;\n   \
    \ for (auto it : numbers) {\n        if (set.find(it) == set.end()) {\n      \
    \      set.insert(it);\n            result.push_back(it);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ numbers_set;\n    for (auto& n : numbers) {\n        if (numbers_set.find(n)\
    \ == numbers_set.end()) {\n            numbers_set.insert(n);\n            result.push_back(n);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ set;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (set.count(numbers[i])\
    \ == 0) {\n            set.insert(numbers[i]);\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "  std::vector<long>::iterator it;\n \
    \ std::vector<long> result;\n  std::vector<long>::iterator it1;\n  for (it = numbers.begin();\
    \ it != numbers.end(); it++) {\n    if (find(result.begin(), result.end(), *it)\
    \ == result.end()) {\n      result.push_back(*it);\n    }\n  }\n  return result;",
  "\tstd::vector<long> new_numbers;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\
    \t\tif (find(new_numbers.begin(), new_numbers.end(), numbers[i]) == new_numbers.end())\
    \ {\n\t\t\tnew_numbers.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn new_numbers;",
  "  std::vector<long> temp;\n  std::set<long> s;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    if (s.find(numbers[i]) == s.end()) {\n      s.insert(numbers[i]);\n\
    \      temp.push_back(numbers[i]);\n    }\n  }\n  return temp;", "   std::vector<long>\
    \ result;\n   std::unordered_set<long> numberSet;\n   for (auto number : numbers)\
    \ {\n       if (numberSet.find(number) == numberSet.end()) {\n           result.push_back(number);\n\
    \           numberSet.insert(number);\n       }\n   }\n   return result;", " \
    \   std::sort(numbers.begin(), numbers.end());\n    int previous = numbers[0];\n\
    \    int index = 1;\n    for (int i = 1; i < numbers.size(); i++) {\n        if\
    \ (numbers[i] != previous) {\n            numbers[index] = numbers[i];\n     \
    \       index++;\n            previous = numbers[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < index; i++) {\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long n : numbers) {\n        if (set.find(n) == set.end()) {\n\
    \            result.push_back(n);\n            set.insert(n);\n        }\n   \
    \ }\n    return result;", "  std::vector<long> result;\n  // Step 1 - sort the\
    \ array\n  std::sort(numbers.begin(), numbers.end());\n  // Step 2 - iterate through\
    \ the array and copy unique elements\n  for (long i = 0; i < numbers.size(); i++)\
    \ {\n    // For duplicates, skip all same values\n    if (i > 0 && numbers[i]\
    \ == numbers[i - 1]) {\n      continue;\n    }\n    result.push_back(numbers[i]);\n\
    \  }\n  return result;", "\tstd::vector<long> new_vector;\n\tstd::unordered_set<long>\
    \ numbers_set;\n\t//std::cout << \"numbers size \" << numbers.size() << \"\\n\"\
    ;\n\tfor (long elem : numbers) {\n\t\tif (numbers_set.find(elem) == numbers_set.end())\
    \ {\n\t\t\tnew_vector.push_back(elem);\n\t\t\tnumbers_set.insert(elem);\n\t\t\
    }\n\t}\n\treturn new_vector;", "\tstd::vector<long> result;\n\tstd::map<long,\
    \ long> map;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tmap[numbers[i]]++;\n\
    \t}\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (map[numbers[i]] ==\
    \ 1) {\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn result;", " \
    \   std::vector<long> output;\n    for (long n : numbers) {\n        if (std::find(output.begin(),\
    \ output.end(), n) == output.end()) {\n            output.push_back(n);\n    \
    \    }\n    }\n    return output;", "    std::vector<long> v;\n    std::set<long>\
    \ s;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (s.find(numbers[i])\
    \ == s.end()) {\n            s.insert(numbers[i]);\n            v.push_back(numbers[i]);\n\
    \        }\n    }\n    return v;", "    std::vector<long> res;\n    //We will\
    \ have to sort the vector and then remove duplicate. This is the best way.\n \
    \   sort(numbers.begin(), numbers.end());\n    for(std::vector<long>::iterator\
    \ it = numbers.begin(); it != numbers.end(); it++) {\n        std::vector<long>::iterator\
    \ it2 = it;\n        it2++;\n        if(it2 == numbers.end()) {\n            res.push_back(*it);\n\
    \            break;\n        }\n        if(*it != *it2)\n            res.push_back(*it);\n\
    \    }\n    return res;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (auto num : numbers) {\n        if (set.find(num) == set.end())\
    \ {\n            set.insert(num);\n            result.push_back(num);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> out;\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    long last = numbers[0];\n    out.push_back(last);\n   \
    \ for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != last)\
    \ {\n            out.push_back(numbers[i]);\n            last = numbers[i];\n\
    \        }\n    }\n    return out;", "\tif (numbers.size() <= 1)\n\t\treturn numbers;\n\
    \tsort(numbers.begin(), numbers.end());\n\tfor (int i = 0; i < numbers.size()\
    \ - 1; i++) {\n\t\tif (numbers[i] == numbers[i + 1]) {\n\t\t\tnumbers.erase(numbers.begin()\
    \ + i);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn numbers;", "    std::vector<long> res;\n\
    \    long len = numbers.size();\n    std::map<long, int> map;\n    for (long i\
    \ = 0; i < len; i++) {\n        if (map.find(numbers[i]) == map.end()) {\n   \
    \         map[numbers[i]] = 1;\n        } else {\n            map[numbers[i]]++;\n\
    \        }\n    }\n    for (long i = 0; i < len; i++) {\n        if (map[numbers[i]]\
    \ == 1) {\n            res.push_back(numbers[i]);\n        }\n    }\n    return\
    \ res;", "    int count = 0;\n    std::vector<long>::iterator start = numbers.begin();\n\
    \    std::vector<long>::iterator end = numbers.end();\n    std::vector<long>::iterator\
    \ next = start + 1;\n    for (start; start != end; ++start) {\n        for (next;\
    \ next != end; ++next) {\n            if (*start == *next) {\n               \
    \ count += 1;\n            }\n        }\n        if (count > 1) {\n          \
    \  //std::vector<long>::iterator start = numbers.begin();\n            std::vector<long>::iterator\
    \ start = numbers.begin();\n            //std::vector<long>::iterator end = numbers.end();\n\
    \            std::vector<long>::iterator end = numbers.end();\n            std::vector<long>::iterator\
    \ next = start + 1;\n            numbers.erase(start);\n            count = 0;\n\
    \        }\n        else {\n            count = 0;\n        }\n    }\n    return\
    \ numbers;", "  std::map<long, int> myMap;\n  std::vector<long> ret;\n  for (auto\
    \ it = numbers.begin(); it != numbers.end(); ++it) {\n    if (myMap.find(*it)\
    \ == myMap.end()) {\n      myMap[*it] = 1;\n    } else {\n      myMap[*it] +=\
    \ 1;\n    }\n  }\n  for (auto it = numbers.begin(); it != numbers.end(); ++it)\
    \ {\n    if (myMap[*it] == 1) {\n      ret.push_back(*it);\n    }\n  }\n  return\
    \ ret;", "\tstd::unordered_set<long> seen;\n\tstd::vector<long> ret;\n\tfor (auto\
    \ n : numbers) {\n\t\tif (seen.find(n) == seen.end()) {\n\t\t\tret.push_back(n);\n\
    \t\t\tseen.insert(n);\n\t\t}\n\t}\n\treturn ret;", "    std::vector<long> new_vector;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        bool is_distinct = true;\n\
    \        for (int j = 0; j < new_vector.size(); j++) {\n            if (numbers[i]\
    \ == new_vector[j]) {\n                is_distinct = false;\n                break;\n\
    \            }\n        }\n        if (is_distinct) {\n            new_vector.push_back(numbers[i]);\n\
    \        }\n    }\n    return new_vector;", "  std::vector<long> ans;\n  std::unordered_set<long>\
    \ unique;\n  for (auto i : numbers) {\n    if (unique.find(i) == unique.end())\
    \ {\n      unique.insert(i);\n      ans.push_back(i);\n    }\n  }\n  return ans;",
  "    std::unordered_set<long> hashset;\n    std::vector<long> result;\n    for (long\
    \ num : numbers) {\n        if (hashset.find(num) == hashset.end()) {\n      \
    \      hashset.insert(num);\n            result.push_back(num);\n        }\n \
    \   }\n    return result;", "    std::vector<long> result;\n    long numberOfDuplicates=0;\n\
    \    for(long i=0;i<numbers.size();i++){\n        if(result.size()==0){\n    \
    \        result.push_back(numbers[i]);\n        }else{\n            long j=0;\n\
    \            while(j<result.size()){\n                if(numbers[i]==result[j]){\n\
    \                    numberOfDuplicates++;\n                    break;\n     \
    \           }\n                j++;\n            }\n            if(numberOfDuplicates==0){\n\
    \                result.push_back(numbers[i]);\n            }\n            numberOfDuplicates=0;\n\
    \        }\n    }\n    return result;", "    std::vector<long> res{};\n    std::map<long,\
    \ int> cnt;\n    for (auto i : numbers) {\n        if (cnt.find(i) == cnt.end())\
    \ {\n            cnt[i] = 1;\n        } else {\n            cnt[i]++;\n      \
    \  }\n    }\n    for (auto i : numbers) {\n        if (cnt[i] == 1) res.push_back(i);\n\
    \    }\n    return res;", "    std::sort(numbers.begin(), numbers.end());\n  \
    \  std::vector<long> r_list;\n    int prev_value = numbers[0];\n    r_list.push_back(prev_value);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != prev_value)\
    \ {\n            r_list.push_back(numbers[i]);\n            prev_value = numbers[i];\n\
    \        }\n    }\n    return r_list;", "    std::vector<long> result;\n    std::map<long,\
    \ int> unique;\n    for (auto& n : numbers) {\n        unique[n]++;\n    }\n \
    \   for (auto& n : numbers) {\n        if (unique[n] == 1) {\n            result.push_back(n);\n\
    \        }\n    }\n    return result;", "    std::vector<long> results;\n    std::set<long>\
    \ uniqueNums;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (uniqueNums.count(numbers[i])\
    \ == 0) {\n            uniqueNums.insert(numbers[i]);\n            results.push_back(numbers[i]);\n\
    \        }\n    }\n    return results;", "    std::vector<long> uniques;\n   \
    \ std::set<long> set;\n    for (long number : numbers) {\n        if (set.find(number)\
    \ == set.end()) {\n            uniques.push_back(number);\n            set.insert(number);\n\
    \        }\n    }\n    return uniques;", '    return {};', "    std::vector<long>\
    \ numbers2;\n    long i = 0;\n    while (i < numbers.size()) {\n        long j\
    \ = i + 1;\n        while (j < numbers.size()) {\n            if (numbers[i] ==\
    \ numbers[j]) {\n                numbers.erase(numbers.begin() + j);\n       \
    \     } else {\n                j++;\n            }\n        }\n        i++;\n\
    \    }\n    return numbers;", "  std::vector<long>::iterator it;\n  std::vector<long>\
    \ dup;\n  int count;\n  std::sort(numbers.begin(), numbers.end());\n  for (it\
    \ = numbers.begin(); it != numbers.end(); it++) {\n    count = std::count(numbers.begin(),\
    \ numbers.end(), *it);\n    if (count == 1) {\n      dup.push_back(*it);\n   \
    \ }\n  }\n  return dup;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ unique_numbers;\n    std::unordered_set<long> duplicates;\n    for (auto const&\
    \ number : numbers) {\n        if (unique_numbers.find(number) == unique_numbers.end())\
    \ {\n            unique_numbers.insert(number);\n        } else {\n          \
    \  duplicates.insert(number);\n        }\n    }\n    for (auto const& number :\
    \ numbers) {\n        if (duplicates.find(number) == duplicates.end()) {\n   \
    \         result.push_back(number);\n        }\n    }\n    return result;", " \
    \   std::vector<long> ret;\n    for (auto i : numbers) {\n        bool unique\
    \ = true;\n        for (auto j : ret) {\n            if (i == j) {\n         \
    \       unique = false;\n                break;\n            }\n        }\n  \
    \      if (unique) {\n            ret.push_back(i);\n        }\n    }\n    return\
    \ ret;", "    std::set<long> nums;\n    std::vector<long> vec;\n    for (int i=0;\
    \ i<numbers.size(); i++) {\n        if (nums.find(numbers[i]) == nums.end()) {\n\
    \            nums.insert(numbers[i]);\n            vec.push_back(numbers[i]);\n\
    \        }\n    }\n    return vec;", "    assert(true);\n    std::vector<long>\
    \ result;\n    std::set<long> set1;\n    for(int i=0;i<numbers.size();i++){\n\
    \        if(set1.find(numbers[i]) == set1.end()){\n            set1.insert(numbers[i]);\n\
    \            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::sort(numbers.begin(), numbers.end());\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n     \
    \       result.push_back(numbers[i]);\n        } else if (numbers[i] != numbers[i\
    \ - 1]) {\n            result.push_back(numbers[i]);\n        }\n    }\n    return\
    \ result;", "    std::set<long> uniques(numbers.begin(), numbers.end());\n   \
    \ std::vector<long> result(uniques.begin(), uniques.end());\n    return result;",
  "  auto last = std::unique(numbers.begin(), numbers.end());\n  numbers.erase(last,\
    \ numbers.end());\n  return numbers;", "  std::vector<long> result;\n  std::map<long,\
    \ int> store;\n  for (auto i = numbers.begin(); i != numbers.end(); i++) {\n \
    \   store[*i]++;\n  }\n  for (auto i = numbers.begin(); i != numbers.end(); i++)\
    \ {\n    if (store[*i] == 1) {\n      result.push_back(*i);\n    }\n  }\n  return\
    \ result;", "    std::unordered_set<long> unique;\n    for (long value : numbers)\
    \ {\n        unique.insert(value);\n    }\n    return std::vector<long>(unique.begin(),\
    \ unique.end());", "  // Removes all elements that occur more than once, keeping\
    \ order of elements\n  // left the same as in the input.\n  return {};", "  std::vector<long>::iterator\
    \ it;\n  std::set<long> s;\n  std::vector<long> v;\n  for (it = numbers.begin();\
    \ it != numbers.end(); it++) {\n    s.insert(*it);\n  }\n  std::copy(s.begin(),\
    \ s.end(), back_inserter(v));\n  return v;", "    std::vector<long> new_numbers;\n\
    \    std::unordered_set<long> seen;\n    for (long num : numbers) {\n        if\
    \ (seen.find(num) == seen.end()) {\n            new_numbers.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return new_numbers;", " \
    \   std::vector<long> result;\n    std::unordered_set<long> map;\n    for (auto\
    \ x : numbers) {\n        if (map.find(x) == map.end()) {\n            map.insert(x);\n\
    \            result.push_back(x);\n        }\n    }\n    return result;", "\t\
    std::vector<long> a;\n\tstd::vector<long> temp;\n\tfor (int i = 0; i < numbers.size();\
    \ i++) {\n\t\tif (std::find(a.begin(), a.end(), numbers[i]) != a.end()) {\n\t\t\
    \ttemp.push_back(numbers[i]);\n\t\t}\n\t\telse {\n\t\t\ta.push_back(numbers[i]);\n\
    \t\t}\n\t}\n\tfor (int i = 0; i < a.size(); i++) {\n\t\tif (std::find(temp.begin(),\
    \ temp.end(), a[i]) != temp.end()) {\n\t\t\ta.erase(a.begin() + i);\n\t\t}\n\t\
    }\n\treturn a;", "  //remove dups!\n  std::vector<long> unique_numbers;\n  //insert\
    \ unique numbers into unique_numbers\n  for (auto it = numbers.begin(); it !=\
    \ numbers.end(); ++it) {\n    auto it2 = it + 1;\n    if (it2 != numbers.end())\
    \ {\n      if (*it == *it2) {\n        numbers.erase(it2);\n      }\n    }\n \
    \ }\n  return numbers;", "  std::vector<long> uniq_numbers;\n  std::unordered_set<long>\
    \ already_found;\n  for (const auto& number : numbers) {\n    if (already_found.find(number)\
    \ == already_found.end()) {\n      already_found.insert(number);\n      uniq_numbers.push_back(number);\n\
    \    }\n  }\n  return uniq_numbers;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (int\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != numbers[i - 1])\
    \ {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "  std::vector<long> result;\n  std::set<long> s;\n  for (auto i : numbers) {\n\
    \    if (s.find(i) == s.end()) {\n      s.insert(i);\n      result.push_back(i);\n\
    \    }\n  }\n  return result;", "    std::vector<long> answer;\n    std::unordered_set<long>\
    \ used;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (used.find(numbers[i])\
    \ == used.end()) {\n            answer.push_back(numbers[i]);\n            used.insert(numbers[i]);\n\
    \        }\n    }\n    return answer;", "    assert(numbers.size()>0);\n    std::vector<long>\
    \ output;\n    std::unordered_map<long,long> hash;\n    for(long i=0;i<numbers.size();i++){\n\
    \        if(hash.find(numbers[i])==hash.end()){\n            hash[numbers[i]]=1;\n\
    \            output.push_back(numbers[i]);\n        }\n    }\n    return output;",
  "  // use a hashmap to keep track of which elements were encountered.\n  std::unordered_map<long,\
    \ bool> encountered_elements;\n  std::vector<long> solution;\n  for (long n :\
    \ numbers) {\n    // if the value has been encountered in the hashmap, don't include\
    \ it in\n    // solution.\n    if (encountered_elements.find(n) == encountered_elements.end())\
    \ {\n      encountered_elements[n] = true;\n      solution.push_back(n);\n   \
    \ }\n  }\n  return solution;", "\tstd::vector<long> output;\n\tfor (auto it =\
    \ numbers.begin(); it != numbers.end(); it++) {\n\t\tif (std::find(output.begin(),\
    \ output.end(), *it) == output.end()) {\n\t\t\toutput.push_back(*it);\n\t\t}\n\
    \t}\n\treturn output;", "  std::vector<long> result{};\n  std::unordered_set<long>\
    \ set_of_number{};\n  for (long i = 0; i < numbers.size(); i++) {\n    if (set_of_number.find(numbers[i])\
    \ == set_of_number.end()) {\n      set_of_number.insert(numbers[i]);\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;", "    if (numbers.size() == 0) return {};\n   \
    \ std::vector<long> unique{numbers[0]};\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] != numbers[i-1]) unique.push_back(numbers[i]);\n\
    \    }\n    return unique;", "    std::unordered_set<long> entries;\n    std::vector<long>\
    \ result;\n    for (auto num : numbers) {\n        if (entries.find(num) == entries.end())\
    \ {\n            entries.insert(num);\n            result.push_back(num);\n  \
    \      }\n    }\n    return result;", "    std::unordered_set<long> unique;\n\
    \    std::vector<long> output;\n    for (long number : numbers) {\n        if\
    \ (unique.find(number) == unique.end()) {\n            unique.insert(number);\n\
    \            output.push_back(number);\n        }\n    }\n    return output;",
  "  std::vector<long> v;\n  std::unordered_set<long> s;\n  for (long i = 0; i < numbers.size();\
    \ i++) {\n    if (s.find(numbers[i]) == s.end()) {\n      s.insert(numbers[i]);\n\
    \      v.push_back(numbers[i]);\n    }\n  }\n  return v;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> s;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (s.find(numbers[i]) == s.end()) {\n            s.insert(numbers[i]);\n\
    \            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "  std::vector<long> new_list;\n  std::unordered_set<long> s;\n  for (auto num :\
    \ numbers) {\n    if (s.find(num) == s.end()) {\n      s.insert(num);\n      new_list.push_back(num);\n\
    \    }\n  }\n  return new_list;", "    // I am using linked list to store unique\
    \ elements so the oredr of the elements in\n    // the input remains the same.\n\
    \    std::unordered_set<long> visited;\n    std::vector<long> result;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        if (visited.find(numbers[i])\
    \ == visited.end()) {\n            result.push_back(numbers[i]);\n           \
    \ visited.insert(numbers[i]);\n        }\n    }\n    return result;", "    std::unordered_set<long>\
    \ numbers_set;\n    std::vector<long> result;\n    for (auto n : numbers) {\n\
    \        if (numbers_set.find(n) == numbers_set.end()) {\n            numbers_set.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::set<long> uniques;\n    for (long n : numbers)\
    \ {\n        if (uniques.find(n) == uniques.end()) {\n            uniques.insert(n);\n\
    \            result.push_back(n);\n        }\n    }\n    return result;", "  \
    \  auto sorted = numbers;\n    std::sort(sorted.begin(), sorted.end());\n    std::vector<long>\
    \ unique;\n    auto it = sorted.begin();\n    while (it != sorted.end()) {\n \
    \       const auto element = *it;\n        unique.push_back(element);\n      \
    \  it = std::find_if(std::next(it), sorted.end(), [element](long a) { return a\
    \ != element; });\n    }\n    return unique;", "    std::vector<long> ans;\n \
    \   for (int i = 0; i < numbers.size(); i++) {\n        bool flag = false;\n \
    \       for (int j = 0; j < numbers.size(); j++) {\n            if (numbers[i]\
    \ == numbers[j] && i != j) {\n                flag = true;\n                break;\n\
    \            }\n        }\n        if (!flag) {\n            ans.push_back(numbers[i]);\n\
    \        }\n    }\n    return ans;", "  std::vector<long> result;\n  for (long\
    \ number : numbers) {\n    if (std::find(result.begin(), result.end(), number)\
    \ == result.end()) {\n      result.push_back(number);\n    }\n  }\n  return result;",
  "  for (auto it = numbers.begin(); it != numbers.end(); it++) {\n    int cur = *it;\n\
    \    auto it2 = it;\n    int count = 0;\n    while (it2 != numbers.end()) {\n\
    \      if (*it2 == cur) {\n        count++;\n      }\n      it2++;\n    }\n  \
    \  if (count > 1) {\n      numbers.erase(std::remove(numbers.begin(), numbers.end(),\
    \ cur), numbers.end());\n    }\n  }\n  return numbers;", "    std::vector<long>\
    \ final;\n    std::sort(numbers.begin(), numbers.end());\n    auto end = std::unique(numbers.begin(),\
    \ numbers.end());\n    numbers.erase(end, numbers.end());\n    for (int i = 0;\
    \ i < numbers.size(); i++) {\n        final.push_back(numbers[i]);\n    }\n  \
    \  return final;", "    std::vector<long> result;\n    bool flag = false;\n  \
    \  for (long i = 0; i < numbers.size(); i++) {\n        for (long j = 0; j < result.size();\
    \ j++) {\n            if (numbers[i] == result[j]) {\n                flag = true;\n\
    \                break;\n            }\n        }\n        if (!flag) {\n    \
    \        result.push_back(numbers[i]);\n        }\n        flag = false;\n   \
    \ }\n    return result;", "    std::vector<long>::iterator it;\n    it = std::unique(numbers.begin(),\
    \ numbers.end());\n    numbers.resize(std::distance(numbers.begin(), it));\n \
    \   return numbers;", "    for (int i = 0; i < numbers.size(); i++) {\n      \
    \  for (int j = i + 1; j < numbers.size(); j++) {\n            if (numbers[i]\
    \ == numbers[j]) {\n                numbers.erase(numbers.begin() + j);\n    \
    \            j--;\n            }\n        }\n    }\n    return numbers;", "  if\
    \ (numbers.size() == 0 || numbers.size() == 1)\n    return numbers;\n  std::vector<long>\
    \ out;\n  std::unordered_map<long, int> m;\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    m[numbers[i]] += 1;\n  }\n  for (int i = 0; i < numbers.size();\
    \ i++) {\n    if (m[numbers[i]] == 1)\n      out.push_back(numbers[i]);\n  }\n\
    \  return out;", "    std::vector<long> ret;\n    std::unordered_set<long> s;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (s.find(numbers[i])\
    \ == s.end()) {\n            s.insert(numbers[i]);\n            ret.push_back(numbers[i]);\n\
    \        }\n    }\n    return ret;", "    std::unordered_set<long> mySet;\n  \
    \  std::vector<long> result;\n    for (long &i : numbers) {\n        if (mySet.find(i)\
    \ == mySet.end()) {\n            mySet.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> uniqueNums;\n \
    \   for (auto num : numbers) {\n        if (std::find(uniqueNums.begin(), uniqueNums.end(),\
    \ num) == uniqueNums.end()) {\n            uniqueNums.push_back(num);\n      \
    \  }\n    }\n    return uniqueNums;", "  std::vector<long> n;\n  std::vector<int>\
    \ is_present(numbers.size(),0);\n  for(long el:numbers){\n    if(is_present[el-1]==0){\n\
    \      n.push_back(el);\n      is_present[el-1]=1;\n    }\n  }\n  return n;",
  "    std::vector<long> output;\n    std::sort(numbers.begin(), numbers.end());\n\
    \    output.push_back(numbers[0]);\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        if (numbers[i] != numbers[i - 1]) {\n            output.push_back(numbers[i]);\n\
    \        }\n    }\n    return output;", "\tstd::set<long> temp;\n\tstd::vector<long>\
    \ ret;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (temp.find(numbers[i])\
    \ == temp.end()) {\n\t\t\ttemp.insert(numbers[i]);\n\t\t\tret.push_back(numbers[i]);\n\
    \t\t}\n\t}\n\treturn ret;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ tmp;\n    for (auto num : numbers) {\n        if (tmp.find(num) == tmp.end())\
    \ {\n            tmp.insert(num);\n            result.push_back(num);\n      \
    \  }\n    }\n    return result;", "  std::vector<long> result;\n  std::unordered_set<long>\
    \ s;\n  for (int i = 0; i < numbers.size(); i++) {\n    if (s.find(numbers[i])\
    \ == s.end()) {\n      s.insert(numbers[i]);\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;", "\t// make the vector to the size of the set(which\
    \ is unique)\n\tstd::unordered_set<long> uni(numbers.begin(), numbers.end());\n\
    \tnumbers.assign(uni.begin(), uni.end());\n\treturn numbers;", "    std::vector<long>\
    \ x;\n    std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i <\
    \ numbers.size(); i++) {\n        if ((i > 0) && (numbers[i] == numbers[i - 1]))\
    \ {\n            continue;\n        }\n        x.push_back(numbers[i]);\n    }\n\
    \    return x;", "    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        int counter = 0;\n        for (int j = 0; j < numbers.size();\
    \ j++) {\n            if (numbers[i] == numbers[j]) {\n                counter++;\n\
    \            }\n        }\n        if (counter == 1) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (seen.find(numbers[i])\
    \ == seen.end()) {\n            result.push_back(numbers[i]);\n            seen.insert(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> output;\n    for\
    \ (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size();\
    \ j++) {\n            if (numbers[i] == numbers[j]) {\n                numbers[j]\
    \ = -1;\n            }\n        }\n    }\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (numbers[i] != -1) {\n            output.push_back(numbers[i]);\n\
    \        }\n    }\n    return output;", "\tstd::vector<long> result;\n\tstd::unordered_set<long>\
    \ hash;\n\tfor (long i = 0; i < numbers.size(); i++) {\n\t\tif (hash.find(numbers[i])\
    \ == hash.end()) {\n\t\t\thash.insert(numbers[i]);\n\t\t\tresult.push_back(numbers[i]);\n\
    \t\t}\n\t}\n\treturn result;", "\t// your code here\n\tstd::vector<long> result;\n\
    \tlong size = numbers.size();\n\tlong i = 0;\n\twhile (i < size) {\n\t\tint j\
    \ = i + 1;\n\t\twhile (j < size) {\n\t\t\tif (numbers[i] == numbers[j]) {\n\t\t\
    \t\tnumbers.erase(numbers.begin() + j);\n\t\t\t\tsize = numbers.size();\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn numbers;",
  "  if (numbers.size() == 0) return numbers;\n  std::unordered_set<long> seen;\n\
    \  std::vector<long> no_dups;\n  for (int n : numbers) {\n    if (seen.find(n)\
    \ == seen.end()) {\n      seen.insert(n);\n      no_dups.push_back(n);\n    }\n\
    \  }\n  return no_dups;", "    std::vector<long> ret;\n    std::set<long> numSet;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (numSet.find(numbers[i])\
    \ == numSet.end()) {\n            numSet.insert(numbers[i]);\n            ret.push_back(numbers[i]);\n\
    \        }\n    }\n    return ret;", "    // Create map to hold list of indices\
    \ for every element of numbers\n    std::map<long, std::list<int>> elements;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (elements.find(numbers[i])\
    \ == elements.end()) {\n            // If number is not in map, add it\n     \
    \       std::list<int> indices;\n            indices.push_back(i);\n         \
    \   elements[numbers[i]] = indices;\n        } else {\n            // Otherwise,\
    \ add it to the list\n            elements[numbers[i]].push_back(i);\n       \
    \ }\n    }\n    // Create list to hold indices to delete\n    std::list<int> to_delete;\n\
    \    for (auto& element : elements) {\n        if (element.second.size() > 1)\
    \ {\n            for (auto& index : element.second) {\n                to_delete.push_back(index);\n\
    \            }\n        }\n    }\n    // Create new vector to hold elements not\
    \ to delete\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (std::find(to_delete.begin(), to_delete.end(), i) == to_delete.end())\
    \ {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "    //Remove duplicates\n    std::sort(numbers.begin(), numbers.end());\n    numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n    return numbers;", "\tstd::vector<long>\
    \ unique_numbers;\n\tstd::unordered_set<long> my_set;\n\t//for(auto number : numbers)\
    \ {\n\t//\t//if (my_set.find(number) == my_set.end()) {\n\t//\tif (my_set.count(number)\
    \ == 0) {\n\t//\t\tmy_set.insert(number);\n\t//\t\tunique_numbers.push_back(number);\n\
    \t//\t}\n\t//}\n\t//return unique_numbers;\n\tfor(auto number : numbers) {\n\t\
    \tif (my_set.count(number) == 0) {\n\t\t\tmy_set.insert(number);\n\t\t\tunique_numbers.push_back(number);\n\
    \t\t}\n\t}\n\treturn unique_numbers;", "    std::vector<long> result;\n    std::set<long>\
    \ s;\n    for (long number : numbers) {\n        if (s.find(number) == s.end())\
    \ {\n            s.insert(number);\n            result.push_back(number);\n  \
    \      }\n    }\n    return result;", "\tstd::vector<long> filtered;\n\tstd::sort(numbers.begin(),\
    \ numbers.end());\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif ((i+1)==numbers.size()\
    \ || numbers[i] != numbers[i+1]) {\n\t\t\tfiltered.push_back(numbers[i]);\n\t\t\
    }\n\t}\n\treturn filtered;", "    std::vector<long> result;\n    std::set<long>\
    \ visited;\n    for (auto number : numbers) {\n        if (visited.find(number)\
    \ == visited.end()) {\n            result.push_back(number);\n            visited.insert(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    int\
    \ i = 0;\n    while (i < numbers.size()) {\n        int count = 0;\n        int\
    \ j = i;\n        while (j < numbers.size()) {\n            if (numbers[i] ==\
    \ numbers[j]) {\n                count++;\n            }\n            j++;\n \
    \       }\n        if (count == 1) {\n            result.push_back(numbers[i]);\n\
    \        }\n        i++;\n    }\n    return result;", "    // Your code here\n\
    \    std::vector<long> output;\n    if(numbers.size()==0){\n        return output;\n\
    \    }\n    std::map<long,long> map;\n    for(long i=0;i<numbers.size();i++){\n\
    \        if(map.find(numbers[i])==map.end()){\n            map[numbers[i]]=1;\n\
    \        }\n        else{\n            map[numbers[i]]+=1;\n        }\n    }\n\
    \    for(long i=0;i<numbers.size();i++){\n        if(map[numbers[i]]==1){\n  \
    \          output.push_back(numbers[i]);\n        }\n    }\n    return output;",
  "    std::vector<long> ret;\n    for (auto n : numbers) {\n        if (std::find(ret.begin(),\
    \ ret.end(), n) == ret.end()) {\n            ret.push_back(n);\n        }\n  \
    \  }\n    return ret;", "    std::vector<long> results;\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    long prev = 0;\n    for (long x : numbers) {\n        if\
    \ (x != prev) {\n            results.push_back(x);\n        }\n        prev =\
    \ x;\n    }\n    return results;", "    std::vector<long> vec;\n    for(long i\
    \ = 0; i < numbers.size(); i++) {\n        long present = 0;\n        for(long\
    \ j = 0; j < numbers.size(); j++) {\n            if(numbers[i] == numbers[j])\
    \ {\n                present++;\n            }\n        }\n        if(present\
    \ == 1) {\n            vec.push_back(numbers[i]);\n        }\n    }\n    return\
    \ vec;", "    std::vector<long>::iterator it;\n    // std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (std::find(result.begin(), result.end(), numbers[i]) == result.end())\
    \ {\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "  std::map<long, long> m;\n  std::vector<long> res;\n  // put all the numbers in\
    \ hash map\n  for (int i = 0; i < numbers.size(); i++) {\n    if (m.find(numbers[i])\
    \ == m.end()) {\n      m[numbers[i]] = 1;\n    } else {\n      m[numbers[i]]++;\n\
    \    }\n  }\n  // copy only those numbers which occur once\n  for (int i = 0;\
    \ i < numbers.size(); i++) {\n    if (m[numbers[i]] == 1) {\n      res.push_back(numbers[i]);\n\
    \    }\n  }\n  return res;", "    std::vector<long> answer;\n    std::set<long>\
    \ ignore;\n    for (auto number : numbers) {\n        if (ignore.find(number)\
    \ == ignore.end()) {\n            answer.push_back(number);\n            ignore.insert(number);\n\
    \        }\n    }\n    return answer;", "    // TODO\n    std::vector<long> temp;\n\
    \    for(long j=0;j<numbers.size();j++){\n        temp.push_back(numbers[j]);\n\
    \    }\n    for(long i=0;i<numbers.size();i++){\n        for(long j=i+1;j<numbers.size();j++){\n\
    \            if(numbers[i]==numbers[j]){\n                for(long k=j;k<numbers.size()-1;k++){\n\
    \                    numbers[k]=numbers[k+1];\n                }\n           \
    \     numbers.pop_back();\n            }\n        }\n    }\n    assert(temp.size()>=numbers.size());\n\
    \    return numbers;", "    std::vector<long>::iterator ip;\n    sort(numbers.begin(),\
    \ numbers.end());\n    ip = std::unique(numbers.begin(), numbers.end());\n   \
    \ numbers.resize(std::distance(numbers.begin(), ip));\n    return numbers;", "\t\
    std::set<long> temp;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\ttemp.insert(numbers[i]);\n\
    \t}\n\tstd::vector<long> result;\n\tfor (auto it = temp.begin(); it != temp.end();\
    \ it++) {\n\t\tresult.push_back(*it);\n\t}\n\treturn result;", "    int cnt =\
    \ 0;\n    std::vector<long> res;\n    std::map<long, int> dict;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        if (dict.find(numbers[i]) == dict.end())\
    \ {\n            dict[numbers[i]] = i;\n            res.push_back(numbers[i]);\n\
    \        }\n    }\n    return res;", "    int size = numbers.size();\n    if (size\
    \ == 0 || size == 1) {\n        return numbers;\n    }\n    std::vector<long>\
    \ result;\n    std::sort(numbers.begin(), numbers.end());\n    for (int i = 0;\
    \ i < size - 1; i++) {\n        if (numbers[i] != numbers[i + 1]) {\n        \
    \    result.push_back(numbers[i]);\n        }\n    }\n    result.push_back(numbers[size\
    \ - 1]);\n    return result;", "    std::vector<long> result;\n    for (auto num\
    \ : numbers) {\n        if (std::find(result.begin(), result.end(), num) == result.end())\
    \ {\n            result.push_back(num);\n        }\n    }\n    return result;",
  "  std::vector<long> res;\n  std::unordered_set<long> seen;\n  for (auto &el : numbers)\
    \ {\n    if (seen.find(el) == seen.end()) {\n      res.push_back(el);\n      seen.insert(el);\n\
    \    }\n  }\n  return res;", "  std::vector<long> ans;\n  std::unordered_set<long>\
    \ set;\n  for (auto elem : numbers) {\n    if (set.find(elem) == set.end()) {\n\
    \      set.insert(elem);\n      ans.push_back(elem);\n    }\n  }\n  return ans;",
  "  std::vector<long> result;\n  for (long i=0; i<numbers.size(); i++) {\n    if\
    \ (std::find(result.begin(), result.end(), numbers[i]) == result.end()) {\n  \
    \    result.push_back(numbers[i]);\n    }\n  }\n  return result;", "  std::map<long,\
    \ int> cnt;\n  std::vector<long> res;\n  for (long number : numbers) {\n    cnt[number]++;\n\
    \  }\n  for (auto [number, count] : cnt) {\n    if (count == 1) {\n      res.push_back(number);\n\
    \    }\n  }\n  return res;", "    std::vector<long> ret;\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    for (int i = 0; i < numbers.size(); i++) {\n        if\
    \ (i == 0 || numbers[i] != numbers[i - 1]) {\n            ret.push_back(numbers[i]);\n\
    \        }\n    }\n    return ret;", "\tstd::sort(numbers.begin(), numbers.end());\n\
    \t// checking if there are duplicates\n\tbool isDuplicate = false;\n\tfor (int\
    \ i = 0; i < numbers.size() - 1; i++) {\n\t\tif (numbers[i] == numbers[i + 1])\
    \ {\n\t\t\tisDuplicate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!isDuplicate)\n\
    \t\treturn numbers;\n\t// Removing the duplicates\n\tstd::vector<long> result;\n\
    \tresult.push_back(numbers[0]);\n\tfor (int i = 1; i < numbers.size(); i++) {\n\
    \t\tif (numbers[i] != numbers[i - 1])\n\t\t\tresult.push_back(numbers[i]);\n\t\
    }\n\treturn result;", "    std::vector<long> result;\n    std::set<long> numbers_set;\n\
    \    for (auto number : numbers) {\n        if (numbers_set.count(number) == 0)\
    \ {\n            numbers_set.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "\t// v1: copy uniques to a new vector\n\
    \tstd::unordered_set<long> s(numbers.begin(), numbers.end());\n\tstd::vector<long>\
    \ result(s.begin(), s.end());\n\treturn result;\n\t// v2: remove duplicates in\
    \ place in the same vector\n\t// std::unordered_set<long> s(numbers.begin(), numbers.end());\n\
    \t// numbers.assign(s.begin(), s.end());\n\t// return numbers;", "  std::set<long>\
    \ seen;\n  std::vector<long> result;\n  for (long n : numbers) {\n    if (seen.find(n)\
    \ == seen.end()) {\n      seen.insert(n);\n      result.push_back(n);\n    }\n\
    \  }\n  return result;", "    std::vector<long> unique_numbers;\n    for (int\
    \ index = 0; index < numbers.size(); index++) {\n        long number = numbers[index];\n\
    \        bool is_unique = true;\n        for (int i = 0; i < unique_numbers.size();\
    \ i++) {\n            if (unique_numbers[i] == number) {\n                is_unique\
    \ = false;\n                break;\n            }\n        }\n        if (is_unique)\
    \ {\n            unique_numbers.push_back(number);\n        }\n    }\n    return\
    \ unique_numbers;", "\tstd::sort(numbers.begin(), numbers.end());\n\tstd::vector<long>\
    \ result;\n\tint i = 0;\n\twhile (i < numbers.size()) {\n\t\tint j = i + 1;\n\t\
    \twhile (j < numbers.size() && numbers[i] == numbers[j]) {\n\t\t\tj++;\n\t\t}\n\
    \t\tresult.push_back(numbers[i]);\n\t\ti = j;\n\t}\n\treturn result;", "\tstd::vector<long>\
    \ result;\n\tstd::unordered_set<long> uniqueNums;\n\tstd::unordered_set<long>\
    \ uniqueNumsTwice;\n\tfor (long i = 0; i < numbers.size(); i++) {\n\t\tif (uniqueNums.find(numbers[i])\
    \ == uniqueNums.end()) {\n\t\t\tuniqueNums.insert(numbers[i]);\n\t\t} else {\n\
    \t\t\tuniqueNumsTwice.insert(numbers[i]);\n\t\t}\n\t}\n\tfor (long i = 0; i <\
    \ numbers.size(); i++) {\n\t\tif (uniqueNumsTwice.find(numbers[i]) == uniqueNumsTwice.end())\
    \ {\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn result;", "  std::vector<long>\
    \ unique;\n  std::sort(numbers.begin(), numbers.end());\n  unique.push_back(numbers[0]);\n\
    \  for (long i = 1; i < numbers.size(); i++) {\n    if (numbers[i] != numbers[i\
    \ - 1]) {\n      unique.push_back(numbers[i]);\n    }\n  }\n  return unique;",
  "    std::unordered_set<long> set;\n    std::vector<long> output;\n    for (long\
    \ i = 0; i < numbers.size(); i++) {\n        if (set.find(numbers[i]) == set.end())\
    \ {\n            set.insert(numbers[i]);\n            output.push_back(numbers[i]);\n\
    \        }\n    }\n    return output;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ set;\n    for (long n : numbers) {\n        if (set.count(n) == 0) {\n     \
    \       result.push_back(n);\n            set.insert(n);\n        }\n    }\n \
    \   return result;", "    std::vector<long> result;\n    for (long n : numbers)\
    \ {\n        if (std::find(result.begin(), result.end(), n) == result.end()) {\n\
    \            result.push_back(n);\n        }\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  std::set<long> isDuplicate;\n  for (auto number : numbers) {\n  \
    \  if (isDuplicate.find(number) == isDuplicate.end()) {\n      result.push_back(number);\n\
    \      isDuplicate.insert(number);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ res;\n    for (auto i : numbers) {\n        auto index = std::find(res.begin(),\
    \ res.end(), i);\n        if (index == res.end()) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    std::vector<long> no_duplicates;\n \
    \   for (int i = 0; i < numbers.size(); i++) {\n        auto iter = std::find(no_duplicates.begin(),\
    \ no_duplicates.end(), numbers[i]);\n        if (iter == no_duplicates.end())\
    \ {\n            no_duplicates.push_back(numbers[i]);\n        }\n    }\n    return\
    \ no_duplicates;", "    std::vector<long> temp;\n    std::unordered_set<long>\
    \ count;\n    for (long num : numbers) {\n        if (count.find(num) == count.end())\
    \ {\n            temp.push_back(num);\n            count.insert(num);\n      \
    \  }\n    }\n    return temp;", "    std::vector<long> v = numbers;\n    std::set<long>\
    \ s (numbers.begin(), numbers.end());\n    std::vector<long>::iterator p;\n  \
    \  std::set<long>::iterator q;\n    for (p = v.begin(); p!=v.end(); p++) {\n \
    \       for (q = s.begin(); q!=s.end(); q++) {\n            if (*p == *q) {\n\
    \                break;\n            }\n        }\n        if (q == s.end()) {\n\
    \            p = v.erase(p);\n            p--;\n        }\n    }\n    return v;",
  "  std::vector<long> answer;\n  long number = -1;\n  int count = 0;\n  for (int\
    \ i = 0; i < numbers.size(); i++) {\n    if (number == numbers[i]) {\n      count++;\n\
    \    } else {\n      if (count == 1) {\n        answer.push_back(number);\n  \
    \    }\n      number = numbers[i];\n      count = 1;\n    }\n  }\n  if (count\
    \ == 1) {\n    answer.push_back(number);\n  }\n  return answer;", "    std::vector<long>\
    \ result;\n    for (int i = 0; i < numbers.size(); i++) {\n        bool repeated\
    \ = false;\n        for (int j = 0; j < result.size(); j++) {\n            if\
    \ (numbers[i] == result[j]) repeated = true;\n        }\n        if (!repeated)\
    \ result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (seen.find(numbers[i]) == seen.end()) {\n            result.push_back(numbers[i]);\n\
    \            seen.insert(numbers[i]);\n        }\n    }\n    return result;",
  "  std::vector<long> result;\n  std::unordered_set<long> visited;\n  for (auto &number\
    \ : numbers) {\n    if (visited.count(number) == 0) {\n      result.push_back(number);\n\
    \      visited.insert(number);\n    }\n  }\n  return result;", "\tstd::vector<long>\
    \ result;\n\tstd::set<long> s;\n\tstd::set<long> dup;\n\tfor (long i = 0; i <\
    \ numbers.size(); i++) {\n\t\tif (s.find(numbers[i]) == s.end()) {\n\t\t\ts.insert(numbers[i]);\n\
    \t\t} else {\n\t\t\tdup.insert(numbers[i]);\n\t\t}\n\t}\n\tfor (long i = 0; i\
    \ < numbers.size(); i++) {\n\t\tif (dup.find(numbers[i]) == dup.end()) {\n\t\t\
    \tresult.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn result;", "    std::set<long>\
    \ s;\n    std::vector<long> res;\n    for (auto i : numbers) {\n        if (s.find(i)\
    \ == s.end()) {\n            s.insert(i);\n            res.push_back(i);\n   \
    \     }\n    }\n    return res;", "  std::vector<long> result;\n  std::set<long>\
    \   unique_numbers;\n  for (int i = 0; i < numbers.size(); i++) {\n    unique_numbers.insert(numbers[i]);\n\
    \  }\n  std::set<long>::iterator iter;\n  for (iter = unique_numbers.begin();\
    \ iter != unique_numbers.end(); iter++) {\n    result.push_back(*iter);\n  }\n\
    \  return result;", "    std::vector<long> v;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        int count = 0;\n        for (int j = 0; j < numbers.size();\
    \ j++) {\n            if (numbers[i] == numbers[j]) {\n                count++;\n\
    \            }\n        }\n        if (count == 1) {\n            v.push_back(numbers[i]);\n\
    \        }\n    }\n    return v;", "    std::vector<long> res;\n    std::map<long,\
    \ int> hmap;\n    for (long n : numbers) {\n        if (hmap.find(n) == hmap.end())\
    \ {\n            hmap[n] = 1;\n        } else {\n            hmap[n]++;\n    \
    \    }\n    }\n    for (long n : numbers) {\n        if (hmap[n] == 1) {\n   \
    \         res.push_back(n);\n        }\n    }\n    return res;", "\t// keep count\
    \ of each element in map\n\tstd::map<long, int> count;\n\tfor (auto num : numbers)\
    \ {\n\t\tcount[num]++;\n\t}\n\t// find all elements which have count = 1\n\tstd::vector<long>\
    \ res;\n\tfor (auto num : numbers) {\n\t\tif (count[num] == 1) {\n\t\t\tres.push_back(num);\n\
    \t\t}\n\t}\n\treturn res;", "  std::set<long> set = std::set<long>(numbers.begin(),\
    \ numbers.end());\n  std::vector<long> result(set.begin(), set.end());\n  return\
    \ result;", "  std::vector<long> newVector;\n  newVector.push_back(numbers[0]);\n\
    \  for (int i = 1; i < numbers.size(); i++) {\n    int j = 0;\n    bool found\
    \ = false;\n    while (j < newVector.size() && !found) {\n      if (numbers[i]\
    \ == newVector[j]) {\n        found = true;\n      }\n      j++;\n    }\n    if\
    \ (!found) {\n      newVector.push_back(numbers[i]);\n    }\n  }\n  return newVector;",
  "    std::vector<long> uniques;\n    for (auto number : numbers) {\n        if (count(numbers.begin(),\
    \ numbers.end(), number) == 1) {\n            uniques.push_back(number);\n   \
    \     }\n    }\n    return uniques;", "\tstd::set<long> st(numbers.begin(), numbers.end());\n\
    \tstd::vector<long> v(st.begin(), st.end());\n\treturn v;", "    if (numbers.size()\
    \ == 0) return numbers;\n    std::vector<long> result;\n    for (long i = 0; i\
    \ < numbers.size(); i++) {\n        bool found = false;\n        for (long j =\
    \ 0; j < result.size(); j++) {\n            if (numbers[i] == result[j]) {\n \
    \               found = true;\n                break;\n            }\n       \
    \ }\n        if (!found) {\n            result.push_back(numbers[i]);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> x;\n    std::set<long>\
    \ numbers_set;\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers_set.insert(numbers[i]);\n\
    \    }\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers_set.find(numbers[i])\
    \ != numbers_set.end()) {\n            x.push_back(numbers[i]);\n            numbers_set.erase(numbers[i]);\n\
    \        }\n    }\n    return x;", "    // Your code goes here\n    // Feel free\
    \ to add more functions to this file.\n    std::vector<long> filteredList;\n \
    \   std::vector<long>::iterator it;\n    int index = 0;\n    int max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    int min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    int len = numbers.size();\n    int arr[len];\n    for(it = numbers.begin();\
    \ it != numbers.end(); it++) {\n        arr[index] = *it;\n        index++;\n\
    \    }\n    for(int i = 0; i < len; i++) {\n        if(arr[i] != arr[i+1])\n \
    \           filteredList.push_back(arr[i]);\n    }\n    return filteredList;",
  "  int n = numbers.size();\n  std::vector<long> u;\n  for (int i = 0; i < n; i++)\
    \ {\n    auto f = std::find(u.begin(), u.end(), numbers[i]);\n    if (f == u.end())\
    \ {\n      u.push_back(numbers[i]);\n    }\n  }\n  return u;", "    std::vector<long>\
    \ v;\n    std::unordered_set<long> s;\n    for (auto i : numbers) {\n        if\
    \ (s.find(i) == s.end()) {\n            s.insert(i);\n            v.push_back(i);\n\
    \        }\n    }\n    return v;", "    // Write your code here\n    std::vector<long>\
    \ v;\n    std::map<long, int> m;\n    int i;\n    for(i=0;i<numbers.size();i++)\n\
    \    {\n        m[numbers[i]]++;\n    }\n    for(i=0;i<numbers.size();i++)\n \
    \   {\n        if(m[numbers[i]]==1)\n        {\n            v.push_back(numbers[i]);\n\
    \        }\n    }\n    return v;", "  std::unordered_set<long> seen_numbers;\n\
    \  std::vector<long> output;\n  for (int i = 0; i < numbers.size(); i++) {\n \
    \   if (seen_numbers.find(numbers[i]) == seen_numbers.end()) {\n      output.push_back(numbers[i]);\n\
    \      seen_numbers.insert(numbers[i]);\n    }\n  }\n  return output;", "    std::vector<long>\
    \ result;\n    std::set<long> set;\n    for (int i = 0; i < numbers.size(); i++)\
    \ {\n        if (set.find(numbers[i]) == set.end()) {\n            set.insert(numbers[i]);\n\
    \            result.push_back(numbers[i]);\n        }\n    }\n    return result;",
  "  std::vector<long> result;\n  for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); it++) {\n    bool unique = true;\n    for (std::vector<long>::iterator\
    \ result_it = result.begin(); result_it != result.end(); result_it++) {\n    \
    \  if (*it == *result_it) {\n        unique = false;\n        break;\n      }\n\
    \    }\n    if (unique) {\n      result.push_back(*it);\n    }\n  }\n  return\
    \ result;", "  std::vector<long> ans;\n  std::sort(numbers.begin(), numbers.end());\n\
    \  int cnt = 1;\n  for (int i = 1; i < numbers.size(); i++) {\n    if (numbers[i]\
    \ == numbers[i - 1]) {\n      cnt++;\n    } else {\n      if (cnt == 1) {\n  \
    \      ans.push_back(numbers[i - 1]);\n      }\n      cnt = 1;\n    }\n  }\n \
    \ if (cnt == 1) {\n    ans.push_back(numbers[numbers.size() - 1]);\n  }\n  return\
    \ ans;", "  std::vector<long> numbersToBeRemoved;\n  std::vector<long> duplicateNumbers;\n\
    \  int sizeOfNumbers = numbers.size();\n  int duplicateNumberCounter = 0;\n  std::sort(numbers.begin(),\
    \ numbers.end());\n  for (int i = 0; i < sizeOfNumbers; i++) {\n    // numbers.erase(std::remove(numbers.begin(),\
    \ numbers.end(), numberToBeRemoved), numbers.end());\n    if (numbers[i] == numbers[i+1])\
    \ {\n      duplicateNumbers.push_back(numbers[i]);\n      duplicateNumberCounter++;\n\
    \    }\n  }\n  for (int i = 0; i < duplicateNumberCounter; i++) {\n    numbers.erase(std::remove(numbers.begin(),\
    \ numbers.end(), duplicateNumbers[i]), numbers.end());\n  }\n  return numbers;",
  "    std::set<long> unique_set;\n    std::vector<long> unique_vec;\n    for (int\
    \ i = 0; i < numbers.size(); i++) {\n        unique_set.insert(numbers[i]);\n\
    \    }\n    for (auto n : unique_set) {\n        unique_vec.push_back(n);\n  \
    \  }\n    return unique_vec;", "  // your code goes here\n  std::unordered_map<long,\
    \ int> umap;\n  std::vector<long>::iterator it;\n  for(it = numbers.begin(); it\
    \ != numbers.end(); it++) {\n    umap[*it]++;\n  }\n  std::vector<long> ans;\n\
    \  for(it = numbers.begin(); it != numbers.end(); it++) {\n    if(umap[*it] ==\
    \ 1)\n      ans.push_back(*it);\n  }\n  return ans;", "\tstd::unordered_set<long>\
    \ setOfNumbers;\n\tstd::vector<long> uniqNumbers;\n\tfor (long number : numbers)\
    \ {\n\t\tsetOfNumbers.insert(number);\n\t}\n\tfor (long number : numbers) {\n\t\
    \tif (setOfNumbers.find(number) != setOfNumbers.end()) {\n\t\t\tuniqNumbers.push_back(number);\n\
    \t\t\tsetOfNumbers.erase(number);\n\t\t}\n\t}\n\treturn uniqNumbers;", "\tstd::vector<long>\
    \ result;\n\tif (numbers.size() == 0) {\n\t\treturn result;\n\t}\n\tstd::map<long,\
    \ bool> visited;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t\tif (visited.find(numbers[i])\
    \ == visited.end()) {\n\t\t\tvisited[numbers[i]] = true;\n\t\t\tresult.push_back(numbers[i]);\n\
    \t\t}\n\t}\n\treturn result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ s;\n    for (long x : numbers) {\n        if (s.find(x) == s.end()) {\n    \
    \        s.insert(x);\n            result.push_back(x);\n        }\n    }\n  \
    \  return result;", "        std::vector<long> result;\n        std::unordered_set<long>\
    \ visited;\n        for (auto n : numbers) {\n                if (visited.find(n)\
    \ == visited.end()) {\n                        result.push_back(n);\n        \
    \                visited.insert(n);\n                }\n        }\n        return\
    \ result;", "    std::sort(numbers.begin(), numbers.end());\n    numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n    return numbers;", "  std::vector<long>\
    \ res;\n  int sz = numbers.size();\n  std::sort(numbers.begin(), numbers.end());\n\
    \  for (int i = 0; i < sz; i++) {\n    if (i == 0 || numbers[i] != numbers[i -\
    \ 1]) {\n      res.push_back(numbers[i]);\n    }\n  }\n  return res;", "    std::vector<long>\
    \ v;\n    std::map<long, int> numCounts;\n    for (long i : numbers) {\n     \
    \   if (numCounts.find(i) == numCounts.end()) {\n            numCounts[i] = 1;\n\
    \        } else {\n            numCounts[i]++;\n        }\n    }\n    for (long\
    \ i : numbers) {\n        if (numCounts[i] == 1) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;", "  std::set<long> uniques(numbers.begin(),\
    \ numbers.end());\n  std::vector<long> result(uniques.begin(), uniques.end());\n\
    \  return result;", "    std::vector<long>::iterator i = numbers.begin();\n  \
    \  while (i != numbers.end()) {\n        std::vector<long>::iterator it;\n   \
    \     int n=0;\n        for (it = numbers.begin(); it != numbers.end(); it++)\
    \ {\n            if (*it == *i)\n                n++;\n        }\n        if (n\
    \ > 1) {\n            numbers.erase(i);\n            i = numbers.begin();\n  \
    \      }\n        else\n            i++;\n    }\n    return numbers;", "    std::vector<long>\
    \ dups{};\n    int i = 0;\n    while (i < numbers.size()) {\n        int j = i\
    \ + 1;\n        while (j < numbers.size()) {\n            if (numbers[i] == numbers[j])\
    \ {\n                dups.push_back(numbers[i]);\n                numbers.erase(numbers.begin()\
    \ + j);\n            } else {\n                j++;\n            }\n        }\n\
    \        i++;\n    }\n    std::vector<long> result{};\n    std::set<long> u_dups(dups.begin(),\
    \ dups.end());\n    for (int i = 0; i < numbers.size(); i++) {\n        if (u_dups.find(numbers[i])\
    \ == u_dups.end()) {\n            result.push_back(numbers[i]);\n        }\n \
    \   }\n    return result;", "  std::vector<long> :: iterator it;\n  for(int i=0;i<numbers.size();i++){\n\
    \    for(int j=i+1;j<numbers.size();j++){\n      if(numbers[i]==numbers[j]){\n\
    \        it=numbers.begin()+j;\n        numbers.erase(it);\n        j--;\n   \
    \   }\n    }\n  }\n  return numbers;", "    std::vector<long> unique = {};\n \
    \   std::sort(numbers.begin(), numbers.end());\n    unique.push_back(numbers[0]);\n\
    \    for (int i = 1; i < numbers.size(); i++) {\n        if (numbers[i] != numbers[i\
    \ - 1])\n            unique.push_back(numbers[i]);\n    }\n    return unique;",
  "    std::vector<long> result;\n    std::set<long> s;\n    for (auto &n : numbers)\
    \ {\n        if (s.count(n) == 0) {\n            s.insert(n);\n            result.push_back(n);\n\
    \        }\n    }\n    return result;", "    std::vector<long> uniqueNums;\n \
    \   std::unordered_map<long, int> num_map;\n    for (long num : numbers) {\n \
    \       if (num_map.find(num) == num_map.end()) {\n            num_map[num] =\
    \ 1;\n            uniqueNums.push_back(num);\n        }\n    }\n    return uniqueNums;",
  "  std::vector<long> numbers2;\n  int occurence = 1;\n  for (long i = 0; i < numbers.size();\
    \ i++) {\n    for (long j = i + 1; j < numbers.size(); j++) {\n      if (numbers[i]\
    \ == numbers[j]) {\n        occurence++;\n      }\n    }\n    if (occurence ==\
    \ 1) {\n      numbers2.push_back(numbers[i]);\n    }\n    occurence = 1;\n  }\n\
    \  return numbers2;", "  std::vector<long> result;\n  std::map<long, int> m;\n\
    \  for (auto n : numbers) {\n    if (m.find(n) == m.end()) {\n      m[n] = 1;\n\
    \    } else {\n      m[n] += 1;\n    }\n  }\n  for (auto n : numbers) {\n    if\
    \ (m[n] == 1) {\n      result.push_back(n);\n    }\n  }\n  return result;", " \
    \   std::vector<long> result;\n    std::map<long,int> m;\n    for(auto i=numbers.begin();i!=numbers.end();i++){\n\
    \        if(m.find(*i)==m.end()){\n            m[*i]=1;\n            result.push_back(*i);\n\
    \        }\n    }\n    return result;", "    std::vector<long>::iterator it1,\
    \ it2;\n    it1 = numbers.begin();\n    it2 = numbers.begin();\n    ++it2;\n \
    \   while (it2 != numbers.end()) {\n        if (*it1 == *it2) {\n            numbers.erase(it2);\n\
    \        } else {\n            ++it1;\n            ++it2;\n        }\n    }\n\
    \    return numbers;", "    std::vector<long> res;\n    long n = numbers.size();\n\
    \    if (n == 0) {\n        return res;\n    }\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    res.push_back(numbers[0]);\n    for (long i = 1; i < n;\
    \ i++) {\n        if (numbers[i] != numbers[i - 1]) {\n            res.push_back(numbers[i]);\n\
    \        }\n    }\n    return res;", "    // Your code goes here\n    std::vector<long>\
    \ res;\n    std::set<long> s;\n    for(auto i:numbers){\n        if(s.count(i)==0){\n\
    \            s.insert(i);\n            res.push_back(i);\n        }\n    }\n \
    \   return res;", "  auto result = std::vector<long>();\n  std::unordered_set<long>\
    \ seen;\n  for (auto number : numbers) {\n    if (seen.find(number) == seen.end())\
    \ {\n      result.push_back(number);\n      seen.insert(number);\n    }\n  }\n\
    \  return result;", "    std::vector<long> ans;\n    std::set<long> h(numbers.begin(),\
    \ numbers.end());\n    // std::set<long> h;\n    // h.insert(numbers.begin(),\
    \ numbers.end());\n    ans.insert(ans.end(), h.begin(), h.end());\n    return\
    \ ans;", "    std::vector<long> soln;\n    std::unordered_set<long> seen;\n  \
    \  for (long i : numbers) {\n        if (seen.find(i) == seen.end()) {\n     \
    \       soln.push_back(i);\n            seen.insert(i);\n        }\n    }\n  \
    \  return soln;", "  std::vector<long> result;\n  std::unordered_set<long> setOfNumbers;\n\
    \  // iterate through each number and add it to the set if it is unique\n  for\
    \ (long number : numbers) {\n    if (setOfNumbers.find(number) == setOfNumbers.end())\
    \ {\n      setOfNumbers.insert(number);\n      result.push_back(number);\n   \
    \ }\n  }\n  return result;", "    std::vector<long> answer;\n    std::unordered_set<long>\
    \ numbers_set;\n    std::unordered_set<long> duplicates;\n    for (long number\
    \ : numbers) {\n        if (numbers_set.find(number) == numbers_set.end()) {\n\
    \            numbers_set.insert(number);\n        } else {\n            duplicates.insert(number);\n\
    \        }\n    }\n    for (long number : numbers) {\n        if (duplicates.find(number)\
    \ == duplicates.end()) {\n            answer.push_back(number);\n        }\n \
    \   }\n    return answer;", "  std::vector<long> result;\n  std::unordered_set<long>\
    \ seen;\n  for (auto num : numbers) {\n    if (seen.find(num) == seen.end()) {\n\
    \      result.push_back(num);\n      seen.insert(num);\n    }\n  }\n  return result;",
  "    std::vector<long> result;\n    std::unordered_set<long> unique_numbers;\n \
    \   for (long number : numbers) {\n        if (unique_numbers.find(number) ==\
    \ unique_numbers.end()) {\n            unique_numbers.insert(number);\n      \
    \      result.push_back(number);\n        }\n    }\n    return result;", "   \
    \ std::vector<long> numbers_copy;\n    std::vector<long> numbers_no_duplicates;\n\
    \    for (auto number : numbers) {\n        numbers_copy.push_back(number);\n\
    \    }\n    std::sort(numbers_copy.begin(), numbers_copy.end());\n    int temp\
    \ = numbers_copy[0];\n    numbers_no_duplicates.push_back(temp);\n    for (int\
    \ i = 1; i < numbers_copy.size(); i++) {\n        if (numbers_copy[i] != temp)\
    \ {\n            numbers_no_duplicates.push_back(numbers_copy[i]);\n         \
    \   temp = numbers_copy[i];\n        }\n    }\n    return numbers_no_duplicates;",
  "    std::vector<long> unique_numbers{};\n    auto it = unique_copy(numbers.begin(),\
    \ numbers.end(), back_inserter(unique_numbers));\n    unique_numbers.erase(it,\
    \ unique_numbers.end());\n    return unique_numbers;", "    std::vector<long>\
    \ uniques;\n    std::map<long, int> counts;\n    for (long i : numbers) {\n  \
    \      if (counts.find(i) == counts.end()) {\n            counts[i] = 1;\n   \
    \     } else {\n            counts[i]++;\n        }\n    }\n    for (long i :\
    \ numbers) {\n        if (counts[i] == 1) {\n            uniques.push_back(i);\n\
    \        }\n    }\n    return uniques;", "    //write your code here\n    int\
    \ n = numbers.size();\n    std::vector<long> res;\n    std::map<long, int> mp;\n\
    \    for(int i = 0; i < n; i++) {\n        if(mp.find(numbers[i]) == mp.end())\
    \ {\n            mp[numbers[i]] = i;\n        }\n    }\n    for(auto it = mp.begin();\
    \ it != mp.end(); it++) {\n        res.push_back(it->first);\n    }\n    return\
    \ res;", "\tstd::vector<long>::iterator it;\n\tit = std::unique(numbers.begin(),\
    \ numbers.end());\n\tnumbers.resize(std::distance(numbers.begin(), it));\n\treturn\
    \ numbers;", "    std::vector<long>::iterator i;\n    std::vector<long>v;\n  \
    \  sort(numbers.begin(),numbers.end());\n    v.push_back(numbers[0]);\n    int\
    \ a=numbers[0];\n    int b=1;\n    for(i=numbers.begin()+1;i!=numbers.end();i++)\n\
    \    {\n        if(a!=*i)\n        {\n            a=*i;\n            v.push_back(*i);\n\
    \        }\n    }\n    return v;", "  std::vector<long> result;\n  if (numbers.size()\
    \ < 2) {\n    return numbers;\n  }\n  std::sort(numbers.begin(), numbers.end());\n\
    \  result.push_back(numbers[0]);\n  for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n    if (numbers[i] != numbers[i - 1]) {\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;", "  std::vector<long> l;\n  std::map<long, long>\
    \ m;\n  for (long i = 0; i < numbers.size(); i++) {\n    m[numbers[i]]++;\n  }\n\
    \  for (long i = 0; i < numbers.size(); i++) {\n    if (m[numbers[i]] == 1)\n\
    \      l.push_back(numbers[i]);\n  }\n  return l;"]
stop_tokens:
- "\n}"
