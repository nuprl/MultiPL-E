name: HumanEval_91_is_bored
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Replace pass above with your solution\n\
    \    long count=0;\n    for(int i=0;i<S.length();i++)\n    {\n        if(S[i]=='I')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpq4hqgwjq: /tmp/tmpq4hqgwjq.cpp:26: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    string word = \"\";\n\
    \    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!') {\n            if (word == \"I\")\n                count++;\n\
    \            word = \"\";\n        } else {\n            word += S[i];\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_qt0v98i.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp_qt0v98i.cpp:13:5: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   13 |     string word = \"\"\
    ;\n      |     ^~~~~~\n      |     std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_qt0v98i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmp_qt0v98i.cpp:16:17:\
    \ error: \u2018word\u2019 was not declared in this scope\n   16 |            \
    \ if (word == \"I\")\n      |                 ^~~~\n/tmp/tmp_qt0v98i.cpp:18:13:\
    \ error: \u2018word\u2019 was not declared in this scope\n   18 |            \
    \ word = \"\";\n      |             ^~~~\n/tmp/tmp_qt0v98i.cpp:20:13: error: \u2018\
    word\u2019 was not declared in this scope\n   20 |             word += S[i];\n\
    \      |             ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long c=0;\n  std::string delimiter = \"!.? \"\
    ;\n  size_t pos = 0;\n  std::string token;\n  while ((pos = S.find(delimiter))\
    \ != std::string::npos) {\n    token = S.substr(0, pos);\n    if(token.size()>0)\
    \ {\n      // std::cout << token << std::endl;\n      if(token[0]=='I') {\n  \
    \      c++;\n      }\n    }\n    S.erase(0, pos + delimiter.length());\n  }\n\
    \  return c;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfhoh_6rt: /tmp/tmpfhoh_6rt.cpp:32: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n// TODO\nint len=S.length();\nlong bor=0;\n//string::iterator\
    \ it;\nfor(int i=0;i<len;i++)\n{\nif(S[i]=='I')\n{bor++;\nwhile(S[i]!='.'&&S[i]!='?'&&S[i]!='!')\n\
    {\ni++;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmb9j5su7.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpmb9j5su7.cpp:24:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   24 | int main() {\n      |            ^\n/tmp/tmpmb9j5su7.cpp:32:1:\
    \ error: expected \u2018}\u2019 at end of input\n   32 | }\n      | ^\n/tmp/tmpmb9j5su7.cpp:19:1:\
    \ note: to match this \u2018{\u2019\n   19 | {bor++;\n      | ^\n/tmp/tmpmb9j5su7.cpp:32:1:\
    \ error: expected \u2018}\u2019 at end of input\n   32 | }\n      | ^\n/tmp/tmpmb9j5su7.cpp:17:1:\
    \ note: to match this \u2018{\u2019\n   17 | {\n      | ^\n/tmp/tmpmb9j5su7.cpp:32:1:\
    \ error: expected \u2018}\u2019 at end of input\n   32 | }\n      | ^\n/tmp/tmpmb9j5su7.cpp:11:30:\
    \ note: to match this \u2018{\u2019\n   11 | long is_bored(std::string S) {\n\
    \      |                              ^\n/tmp/tmpmb9j5su7.cpp:32:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   32 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    stringstream ss(S);\n    string word;\n  \
    \  long count = 0;\n    while(ss >> word) {\n        if(word == \"I\") {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyuytg9bv.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpyuytg9bv.cpp:12:5: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n   12 |     stringstream\
    \ ss(S);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n         \
    \        from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyuytg9bv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringstream;\n      |                                     ^~~~~~~~~~~~\n/tmp/tmpyuytg9bv.cpp:13:5:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   13 |     string word;\n      |     ^~~~~~\n      |    \
    \ std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyuytg9bv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef ba"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // 1. Split the string into sentences.\n \
    \   // 2. Count the number of \"I\" words in each sentence.\n    // 3. Sum up\
    \ the number of sentences with at least one \"I\" word.\n    std::transform(S.begin(),\
    \ S.end(), S.begin(), ::tolower);\n    std::string::size_type i = 0;\n    std::vector<std::string>\
    \ sentence_list;\n    while (i < S.size()) {\n        // Find the next sentence.\n\
    \        std::string::size_type start = S.find_first_not_of(\" \", i);\n     \
    \   if (start == std::string::npos) {\n            break;\n        }\n       \
    \ std::string::size_type end = S.find_first_of(\".?!\", start);\n        if (end\
    \ == std::string::npos) {\n            end = S.size();\n        }\n        sentence_list.push_back(S.substr(start,\
    \ end - start));\n        i = end + 1;\n    }\n    long boredoms = 0;\n    for\
    \ (auto& sentence : sentence_list) {\n        if (sentence.find(\" i \") != std::string::npos)\
    \ {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmplhusjfbd: /tmp/tmplhusjfbd.cpp:43: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::vector<std::string> v;\n  int n = S.length();\n\
    \  std::string temp = \"\";\n  for (int i = 0; i < n; i++) {\n    if (S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!') {\n      v.push_back(temp);\n      temp =\
    \ \"\";\n    } else {\n      temp += S[i];\n    }\n  }\n  long ans = 0;\n  for\
    \ (auto s : v) {\n    if (s[0] == 'I') {\n      ans++;\n    }\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgbw6d_ve: /tmp/tmpgbw6d_ve.cpp:34: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::string delimiters = \"!?.\";\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::istringstream stream(S);\n    while\
    \ (std::getline(stream, word, delimiters[0])) {\n        if (std::getline(stream,\
    \ word, delimiters[1])) {\n            words.push_back(word);\n        }\n   \
    \     if (std::getline(stream, word, delimiters[2])) {\n            words.push_back(word);\n\
    \        }\n    }\n    long boredoms = 0;\n    for (auto word : words) {\n   \
    \     if (word.find(\"I\") == 0) {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpopaf8jf0: /tmp/tmpopaf8jf0.cpp:36: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    long num = 0;\n   \
    \ for(int i = 0; i < S.length(); i++){\n        if(S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!'){\n            if(S[i-1] == 'I'){\n                num++;\n \
    \           }\n        }\n    }\n    return num;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqt4le55z: /tmp/tmpqt4le55z.cpp:27: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    for (long i = 0; i <\
    \ S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpt6tb00m4: /tmp/tmpt6tb00m4.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::transform(S.begin(), S.end(), S.begin(),\
    \ ::tolower);\n    long n = 0;\n    for (long i = 0; i < S.size(); i++) {\n  \
    \      if (S[i] == 'i') {\n            if (i + 1 < S.size() && S[i + 1] == ' ')\
    \ {\n                n++;\n            }\n        }\n    }\n    return n;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3sv1yze4: /tmp/tmp3sv1yze4.cpp:30: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tstd::string tmp = \"\";\n\tstd::stringstream\
    \ ss(S);\n\tlong boredoms = 0;\n\twhile (std::getline(ss, tmp, '.')) {\n\t\tif\
    \ (tmp.find(\"I\") == 0 && tmp.size() > 1) {\n\t\t\tboredoms++;\n\t\t}\n\t}\n\t\
    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6ndglc4d: /tmp/tmp6ndglc4d.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    for (int i = 0; i < S.size();\
    \ ++i) {\n        int j = i;\n        while (j < S.size() && S[j] != '.' && S[j]\
    \ != '?' && S[j] != '!') {\n            ++j;\n        }\n        if (j - i >=\
    \ 2 && S[i] == 'I' && S[i + 1] == ' ') {\n            ++ans;\n        }\n    \
    \    i = j;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8llfj80q: /tmp/tmp8llfj80q.cpp:31: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream sstr(S);\n    std::string\
    \ word;\n    long nboredom = 0;\n    while (sstr >> word) {\n        if (word\
    \ == \"I\") {\n            nboredom += 1;\n        }\n    }\n    return nboredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbqm3ypuu: /tmp/tmpbqm3ypuu.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  bool is_bored = false;\n\
    \  for (int i = 0; i < S.length(); i++) {\n    if (S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n      is_bored = false;\n    } else if (S[i] == 'I') {\n\
    \      is_bored = true;\n    }\n    if (is_bored) {\n      count++;\n    }\n \
    \ }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpyye60xm1: /tmp/tmpyye60xm1.cpp:29: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  for (int i = 0; i < S.length();\
    \ i++) {\n    if (S[i] == 'I') {\n      count++;\n    }\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9mjh19my: /tmp/tmp9mjh19my.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    long i = 0;\n    while(i<S.length()){\n\
    \        if(S[i]=='I'){\n            count++;\n            while(S[i]!='.'&&S[i]!='?'&&S[i]!='!'){\n\
    \                i++;\n            }\n        }\n        i++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmnh6mbqb: /tmp/tmpmnh6mbqb.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::stringstream ss(S);\n  std::string word;\n\
    \  long count = 0;\n  while (std::getline(ss, word, ' ')) {\n    if (word == \"\
    I\") {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmplha6ld7y: /tmp/tmplha6ld7y.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  return count(S.begin(), S.end(), 'I');\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpovx7r6xs: /tmp/tmpovx7r6xs.cpp:17: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong boredoms = 0;\n\tS += '.';\n\tstd::istringstream\
    \ iss(S);\n\tstd::string word;\n\tbool has_space = false;\n\twhile (iss >> word)\
    \ {\n\t\tif (word == \"I\") {\n\t\t\t++boredoms;\n\t\t\thas_space = false;\n\t\
    \t}\n\t\telse if (word == \"!\" || word == \"?\" || word == \".\") {\n\t\t\thas_space\
    \ = true;\n\t\t}\n\t\telse if (has_space) {\n\t\t\thas_space = false;\n\t\t}\n\
    \t}\n\treturn boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjzek4krs: /tmp/tmpjzek4krs.cpp:38: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream a(S);\n\
    \    std::string word;\n    while(std::getline(a, word, ' ')){\n        if(word\
    \ == \"I\") count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpxdkuf722: /tmp/tmpxdkuf722.cpp:27: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong res = 0;\n\tstd::istringstream ss(S);\n\
    \tstd::string word;\n\twhile (ss >> word) {\n\t\tif (word == \"I\") {\n\t\t\t\
    res++;\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp206rka1_: /tmp/tmp206rka1_.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count=0;\n    string word=\"\";\n   \
    \ for(int i=0;i<S.length();i++){\n        if(S[i]!='.' and S[i]!='!' and S[i]!='?'){\n\
    \            word+=S[i];\n        }\n        else{\n            stringstream ss(word);\n\
    \            string word1;\n            vector<string> words;\n            while(ss>>word1){\n\
    \                words.push_back(word1);\n            }\n            if(words[0]==\"\
    I\"){\n                count++;\n            }\n            word=\"\";\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdt47sqgq.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdt47sqgq.cpp:13:5: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   13 |     string word=\"\";\n\
    \      |     ^~~~~~\n      |     std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdt47sqgq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpdt47sqgq.cpp:16:13:\
    \ error: \u2018word\u2019 was not declared in this scope\n   16 |            \
    \ word+=S[i];\n      |             ^~~~\n/tmp/tmpdt47sqgq.cpp:19:13: error: \u2018\
    stringstream\u2019 was not declared in this scope; did you mean \u2018std::stringstream\u2019\
    ?\n   19 |             stringstream ss(word);\n      |             ^~~~~~~~~~~~\n\
    \      |             std::stringstream\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdt"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::istringstream iss(S);\n  std::string buffer;\n\
    \  std::vector<std::string> vec;\n  while (std::getline(iss, buffer, '.')) {\n\
    \    vec.push_back(buffer);\n  }\n  long res = 0;\n  std::stringstream ss;\n \
    \ for (auto &s : vec) {\n    ss << s;\n    ss >> buffer;\n    if (buffer == \"\
    I\") {\n      res++;\n    }\n    ss.clear();\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfl2amnn2: /tmp/tmpfl2amnn2.cpp:36: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // this is a comment\n    long ans = 0;\n\
    \    stringstream in(S);\n    string temp;\n    while(getline(in, temp, '.')){\n\
    \        string s = temp.substr(0, temp.find(' '));\n        if(s == \"I\"){\n\
    \            ans++;\n        }\n    }\n    // this is a comment\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjyxl81le.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpjyxl81le.cpp:14:5: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n   14 |     stringstream\
    \ in(S);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n         \
    \        from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjyxl81le.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringstream;\n      |                                     ^~~~~~~~~~~~\n/tmp/tmpjyxl81le.cpp:15:5:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   15 |     string temp;\n      |     ^~~~~~\n      |    \
    \ std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjyxl81le.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef ba"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong count = 0;\n\tstd::string sentence;\n\t\
    std::stringstream ss(S);\n\twhile (std::getline(ss, sentence, '.')) {\n\t\tstd::stringstream\
    \ ss1(sentence);\n\t\tstd::string word;\n\t\tstd::getline(ss1, word, ' ');\n\t\
    \tif (word == \"I\") {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjjzyieb8: /tmp/tmpjjzyieb8.cpp:31: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong long boredoms = 0;\n\tfor (int i = 0; i\
    \ < S.length(); i++) {\n\t\tchar key = S[i];\n\t\tif (key == 'I') {\n\t\t\tboredoms++;\n\
    \t\t}\n\t}\n\treturn boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp1dv9ju3f: /tmp/tmp1dv9ju3f.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\t// Implement Me\n\tstd::string word = \"I\"\
    ;\n\tint i = 0;\n\tint count = 0;\n\tint j = 0;\n\twhile (i < S.length()) {\n\t\
    \tif (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\t\t\tif (S[i - 1] == 'I')\
    \ {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmutxbpv2: /tmp/tmpmutxbpv2.cpp:31: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // type your solution here\n  long count=0;\n\
    \  for(int i=0;i<S.length();i++)\n  {\n    if(S[i]=='I')\n    {\n        count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpswhbenxq: /tmp/tmpswhbenxq.cpp:26: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    std::string word =\
    \ \"\";\n    for (char c : S) {\n        if (c == ' ') {\n            if (word\
    \ == \"I\")\n                boredoms++;\n            word = \"\";\n        }\
    \ else {\n            word += c;\n        }\n    }\n    return boredoms;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpomlcusi2: /tmp/tmpomlcusi2.cpp:32: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    for (int i = 0; i <\
    \ S.length(); i++) {\n        std::string sentence;\n        sentence += S[i];\n\
    \        if (sentence == \"I\") {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsagcjpm2: /tmp/tmpsagcjpm2.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // write your code here\n  std::stringstream\
    \ ss(S);\n  std::string word;\n  long count = 0;\n  while(ss >> word) {\n    if(word\
    \ == \"I\") {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmptub1l_22: /tmp/tmptub1l_22.cpp:30: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long result = 0;\n  std::vector<std::string>\
    \ tokens;\n  std::stringstream ss(S);\n  std::string item;\n  while (std::getline(ss,\
    \ item, '.')) {\n    tokens.push_back(item);\n  }\n  for (auto const &t : tokens)\
    \ {\n    std::vector<std::string> words;\n    std::stringstream tt(t);\n    std::string\
    \ word;\n    while (std::getline(tt, word, ' ')) {\n      words.push_back(word);\n\
    \    }\n    if (words.front() == \"I\") {\n      result++;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0rjg6sab: /tmp/tmp0rjg6sab.cpp:38: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    //inputs a string\n    //outputs a long\n\
    \    //define variables here\n    std::vector<std::string> sentences;\n    std::string\
    \ sentence;\n    int n = 0;\n    int count = 0;\n    bool isSentence = false;\n\
    \    char c;\n    //modify input string\n    //here\n    //parse string\n    while(n\
    \ < S.length()){\n        c = S[n];\n        if(c == '.' || c == '?' || c == '!'){\n\
    \            isSentence = true;\n        }\n        if(isSentence){\n        \
    \    if(sentence[0] == 'I'){\n                count++;\n            }\n      \
    \      sentence = \"\";\n            isSentence = false;\n        }\n        else{\n\
    \            sentence = sentence + c;\n        }\n        n++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4p0biz6y: /tmp/tmp4p0biz6y.cpp:46: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredom = 0;\n    std::istringstream iss(S);\n\
    \    std::string sentence;\n    std::string word;\n    while (getline(iss, sentence,\
    \ '.')) {\n        std::istringstream is(sentence);\n        while (is >> word)\
    \ {\n            if (word == \"I\")\n                boredom++;\n        }\n \
    \   }\n    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpt1r9g165: /tmp/tmpt1r9g165.cpp:32: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // TODO: Implement this function\n    if(S.size()\
    \ == 0)\n        return 0;\n    int isBored = 0;\n    int i = 0;\n    while(i\
    \ < S.size()){\n        if(S[i] == 'I'){\n            i += 2;\n            if(S[i]\
    \ == '\\0')\n                return 1;\n            while(S[i] != '.' && S[i]\
    \ != '?' && S[i] != '!'){\n                i++;\n                if(S[i] == '\\\
    0')\n                    return 1;\n            }\n            isBored++;\n  \
    \      }\n        i++;\n    }\n    return isBored;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbz3le2p9: /tmp/tmpbz3le2p9.cpp:36: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    size_t pos = 0;\n \
    \   while ((pos = S.find(\"I\", pos)) != std::string::npos) {\n        if (pos\
    \ == 0 || (S[pos - 1] != '.' && S[pos - 1] != '?' && S[pos - 1] != '!')) {\n \
    \           boredoms++;\n        }\n        pos++;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0wztjjln: /tmp/tmp0wztjjln.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  stringstream ss(S);\n  string\
    \ temp;\n  while(ss >> temp) {\n    if(temp == \"I\") {\n      count++;\n    }\n\
    \  }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi6roh71_.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpi6roh71_.cpp:13:3: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n   13 |   stringstream\
    \ ss(S);\n      |   ^~~~~~~~~~~~\n      |   std::stringstream\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n         \
    \        from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpi6roh71_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringstream;\n      |                                     ^~~~~~~~~~~~\n/tmp/tmpi6roh71_.cpp:14:3:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   14 |   string temp;\n      |   ^~~~~~\n      |   std::string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpi6roh71_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::string tmp = \"\";\n    long cnt = 0;\n\
    \    for (long i = 0; i < S.size(); i++) {\n        tmp += S[i];\n        if (tmp\
    \ == \"I\") {\n            if (S[i + 1] == ' ')\n                cnt++;\n    \
    \    }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n            tmp\
    \ = \"\";\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpkvbnqepj: /tmp/tmpkvbnqepj.cpp:31: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tint i, count = 0;\n\tfor (i = 0; i < S.length();\
    \ i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4y9pjja9: /tmp/tmp4y9pjja9.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  std::istringstream iss(S);\n\
    \  std::string word;\n  while (iss >> word) {\n    if (word.find(\"I\") == 0)\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpp2_385k_: /tmp/tmpp2_385k_.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong boredoms = 0;\n\tstd::stringstream ss(S);\n\
    \tstd::string word;\n\tss >> word;\n\twhile (ss.good()) {\n\t\tif (word == \"\
    I\") {\n\t\t\tboredoms++;\n\t\t}\n\t\tss >> word;\n\t}\n\treturn boredoms;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7nicz7xt: /tmp/tmp7nicz7xt.cpp:31: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tint bored = 0;\n\tif (S.empty())\n\t\treturn\
    \ bored;\n\tauto sentence_end = S.find_first_of(\".!?\");\n\twhile (sentence_end\
    \ != std::string::npos) {\n\t\t//sentence_end -= 1;\n\t\tif (S.at(sentence_end-1)\
    \ == ' ')\n\t\t\tsentence_end -= 1;\n\t\tauto first_word = S.substr(0, sentence_end);\n\
    \t\tif (first_word == \"I\")\n\t\t\tbored += 1;\n\t\tS = S.substr(sentence_end+1);\n\
    \t\tsentence_end = S.find_first_of(\".!?\");\n\t}\n\treturn bored;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 18446744073709551615) >= this->size() (which\
    \ is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long c=0;\n    int x = S.find('I');\n    while(x\
    \ != std::string::npos)\n    {\n        if(x == 0)\n        {\n            c++;\n\
    \        }\n        else if(S[x-1] == '.' || S[x-1] == '?' || S[x-1] == '!')\n\
    \        {\n            c++;\n        }\n        x = S.find('I', x+1);\n    }\n\
    \    return c;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpada4ihj4: /tmp/tmpada4ihj4.cpp:31: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::string delimiters = \"?!.\";\n    std::string\
    \ token;\n    std::vector<std::string> tokens;\n    for (size_t i = 0; i < S.size();\
    \ i++) {\n        if (delimiters.find(S[i]) != std::string::npos) {\n        \
    \    if (!token.empty()) {\n                tokens.push_back(token);\n       \
    \         token.clear();\n            }\n        } else {\n            token +=\
    \ S[i];\n        }\n    }\n    if (!token.empty()) {\n        tokens.push_back(token);\n\
    \    }\n    long long res = 0;\n    for (auto str : tokens) {\n        if (str.find(\"\
    I\") == 0) {\n            res++;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpl4r8s4j6: /tmp/tmpl4r8s4j6.cpp:39: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long c = 0;\n    while(ss >> word) {\n        if(word == \"I\") c++;\n\
    \    }\n    return c;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmprqpy189l: /tmp/tmprqpy189l.cpp:27: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // your code here\n  int boredoms = 0;\n  std::string\
    \ substr;\n  for (int i = 0; i < S.length(); i++) {\n    if (S[i] == 'I') {\n\
    \      substr = S.substr(i,S.length());\n      break;\n    }\n  }\n  std::stringstream\
    \ ss(substr);\n  do {\n    ss >> substr;\n    if (substr == \"I\")\n      boredoms++;\n\
    \  } while (ss);\n  return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6otcs75e: /tmp/tmp6otcs75e.cpp:36: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::string delimiter = \"?!.\";\n  size_t pos\
    \ = 0;\n  std::string token;\n  long cnt = 0;\n  while ((pos = S.find(delimiter))\
    \ != std::string::npos) {\n    token = S.substr(0, pos);\n    std::cout << token\
    \ << std::endl;\n    if (token.find(\"I\") == 0) {\n      cnt++;\n    }\n    S.erase(0,\
    \ pos + delimiter.length());\n  }\n  if (S.find(\"I\") == 0) {\n    cnt++;\n \
    \ }\n  return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdskq3iss: /tmp/tmpdskq3iss.cpp:32: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // your code here\n  std::istringstream buffer(S);\n\
    \  std::string line;\n  long boredoms = 0;\n  while (std::getline(buffer, line,\
    \ '.')) {\n    if(line.find(\"I\") == 0) {\n      boredoms++;\n    }\n  }\n  return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9v8avok3: /tmp/tmp9v8avok3.cpp:26: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int i,count,boredom;\n    boredom=0;\n   \
    \ count=0;\n    for(i=0;S[i]!='\\0';i++)\n    {\n        if(S[i]=='I')\n     \
    \   {\n            if(S[i+1]==' ')\n            {\n                boredom=boredom+1;\n\
    \            }\n        }\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp71cjc0t4: /tmp/tmp71cjc0t4.cpp:34: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long num = 0;\n    std::string s = \"\";\n\
    \    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!') {\n            if (s.substr(0, 2) == \"I \") {\n       \
    \         num++;\n            }\n            s = \"\";\n        } else {\n   \
    \         s += S[i];\n        }\n    }\n    return num;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0cpnd43t: /tmp/tmp0cpnd43t.cpp:32: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long num = 0;\n  std::string sentence;\n  std::stringstream\
    \ ss(S);\n  while (getline(ss, sentence, '.')) {\n    if (sentence.substr(0, 2)\
    \ == \"I \") {\n      num++;\n    }\n  }\n  return num;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpw3xz8z94: /tmp/tmpw3xz8z94.cpp:28: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\t// Your code goes here\n\tlong boredoms = 0;\n\
    \tstd::stringstream ss(S);\n\tstd::string word;\n\twhile (ss >> word) {\n\t\t\
    if (word.compare(\"I\") == 0) {\n\t\t\tboredoms++;\n\t\t}\n\t}\n\treturn boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpt27nvl22: /tmp/tmpt27nvl22.cpp:30: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::regex ex(\"( I \\\\w+)\");\n  std::sregex_iterator\
    \ next(S.begin(), S.end(), ex);\n  std::sregex_iterator end;\n  long count = 0;\n\
    \  while (next != end) {\n    count++;\n    next++;\n  }\n  return count;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpw7ur7bsg: /tmp/tmpw7ur7bsg.cpp:26: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long cnt = 0;\n    std::regex re = std::regex(\"\
    (I|^I)\\\\s.*?(?=(\\\\.|\\\\?|\\\\!))\");\n    auto it = std::sregex_iterator(S.begin(),\
    \ S.end(), re);\n    auto it_end = std::sregex_iterator();\n    for (; it != it_end;\
    \ ++it) {\n        cnt++;\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    long index = 0;\n    while(index\
    \ < S.length()){\n        if(S[index] == 'I'){\n            if(index == 0 || S[index-1]\
    \ == '.' || S[index-1] == '?' || S[index-1] == '!'){\n                ans++;\n\
    \            }\n        }\n        index++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4z38do1a: /tmp/tmp4z38do1a.cpp:27: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong result = 0;\n\tstd::vector<std::string>\
    \ words;\n\tstd::string word = \"\";\n\t//split string into words\n\tfor (auto\
    \ letter : S) {\n\t\tif (letter == ' ') {\n\t\t\twords.push_back(word);\n\t\t\t\
    word = \"\";\n\t\t}\n\t\telse\n\t\t\tword += letter;\n\t}\n\t//add last word to\
    \ the list\n\twords.push_back(word);\n\t//check if it starts with I\n\tfor (auto\
    \ word : words) {\n\t\tif (word[0] == 'I')\n\t\t\tresult++;\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmplq_pwgiq: /tmp/tmplq_pwgiq.cpp:36: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::string sep = \"!?.\";\n    int count\
    \ = 0;\n    size_t start = 0;\n    size_t end = 0;\n    while ((end = S.find_first_of(sep,\
    \ start)) != std::string::npos) {\n        std::string token = S.substr(start,\
    \ end - start);\n        std::string first = token.substr(0,1);\n        //std::cout\
    \ << \"Token:\" << token << \";\" << \" first:\" << first << std::endl;\n    \
    \    if (first == \"I\")\n            count++;\n        start = end + 1;\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmj2mik8f: /tmp/tmpmj2mik8f.cpp:29: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  if (S.empty()) return 0;\n  std::string delimiters\
    \ = \"!.? \";\n  std::string::size_type start = 0;\n  std::string::size_type end\
    \ = S.find_first_of(delimiters);\n  int boredoms = 0;\n  while (end != std::string::npos)\
    \ {\n    std::string sentence = S.substr(start, end - start);\n    if (sentence.size()\
    \ > 0 && sentence[0] == 'I') ++boredoms;\n    start = end + 1;\n    end = S.find_first_of(delimiters,\
    \ start);\n  }\n  std::string sentence = S.substr(start);\n  if (sentence.size()\
    \ > 0 && sentence[0] == 'I') ++boredoms;\n  return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4o1h1kn1: /tmp/tmp4o1h1kn1.cpp:30: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    std::vector<std::string>\
    \ words;\n    std::istringstream buf(S);\n    for(std::string word; buf >> word;\
    \ )\n        words.push_back(word);\n    for(int i = 0; i < words.size(); i++)\
    \ {\n        if(words[i] == \"I\") {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmprxko07m3: /tmp/tmprxko07m3.cpp:31: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Write code here\n  long boredoms = 0;\n \
    \ std::stringstream ss(S);\n  std::string word;\n  std::vector<std::string> tokens;\n\
    \  while (ss >> word) {\n    tokens.push_back(word);\n  }\n  for (std::vector<std::string>::iterator\
    \ it = tokens.begin();\n       it != tokens.end(); ++it) {\n    if (*it == \"\
    I\") {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp39x4iyzr: /tmp/tmp39x4iyzr.cpp:35: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\treturn std::count(S.begin(), S.end(), 'I');\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzf3961vf: /tmp/tmpzf3961vf.cpp:17: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::transform(S.begin(), S.end(), S.begin(),\
    \ ::tolower);\n    std::string delimiter = \"?.!\";\n    size_t pos = 0;\n   \
    \ std::string token;\n    int ans = 0;\n    while ((pos = S.find(delimiter)) !=\
    \ std::string::npos) {\n        token = S.substr(0, pos);\n        if (token.find(\"\
    \ i \") != std::string::npos || token.find(\" i\\n\") != std::string::npos) {\n\
    \            ans++;\n        }\n        S.erase(0, pos + delimiter.length());\n\
    \    }\n    if (S.find(\" i \") != std::string::npos || S.find(\" i\\n\") != std::string::npos)\
    \ {\n        ans++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4003irh0: /tmp/tmp4003irh0.cpp:33: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // split the string by '.', '?' or '!'\n  char\
    \ delimiters[] = \"!.?\";\n  char *p = std::strtok(const_cast<char*>(S.c_str()),\
    \ delimiters);\n  // the number of boredoms\n  int boredoms = 0;\n  while (p)\
    \ {\n    std::string sent(p);\n    // check the first word of each sentence\n\
    \    std::string first_word = sent.substr(0, sent.find(\" \"));\n    if (first_word\
    \ == \"I\") {\n      ++boredoms;\n    }\n    p = std::strtok(NULL, delimiters);\n\
    \  }\n  return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n  \
    \  assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5zdwyl67: /tmp/tmp5zdwyl67.cpp:34: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tvector<string> v;\n\tstring s;\n\tfor (int i\
    \ = 0; i < S.length(); i++) {\n\t\tif (S[i] == ' ') {\n\t\t\tv.push_back(s);\n\
    \t\t\ts = \"\";\n\t\t}\n\t\telse if (S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n\t\t\tv.push_back(s);\n\t\t\ts = \"\";\n\t\t}\n\t\telse\n\t\t\ts += S[i];\n\
    \t}\n\tlong count = 0;\n\tfor (int i = 0; i < v.size(); i++) {\n\t\tif (v[i] ==\
    \ \"I\")\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgquz1nu2.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpgquz1nu2.cpp:12:2: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   12 |  vector<string> v;\n \
    \     |  ^~~~~~\n      |  std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpgquz1nu2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpgquz1nu2.cpp:12:9:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   12 |  vector<string> v;\n      |         ^~~~~~\n     \
    \ |         std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgquz1nu2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpgquz1nu2.cpp:12:17:\
    \ error: \u2018v\u2019 was not declared in this scope\n   12 |  vector<string>\
    \ v;\n      |                 ^\n/tmp/tmpgquz1nu2.cpp:13:8: error: expected \u2018\
    ;\u2019 before \u2018s\u2019\n   13 |  string s;\n      |        ^~\n      | \
    \    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::string msg = \"I \";\n    long count\
    \ = 0;\n    std::string delimiter = \"!?.\";\n    size_t pos = 0;\n    std::string\
    \ token;\n    while ((pos = S.find(delimiter)) != std::string::npos) {\n     \
    \   token = S.substr(0, pos);\n        std::cout << token << std::endl;\n    \
    \    if(token.compare(0,2,msg) == 0)\n            count++;\n        S.erase(0,\
    \ pos + delimiter.length());\n    }\n    std::cout << S << std::endl;\n    if(S.compare(0,2,msg)\
    \ == 0)\n        count++;\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: "Hello world\nIs the sky blue?\nI love It !\nbIt\nI feel good today. I will\
    \ be productive. will kill It\n"
  stderr: "tmput5yp50s: /tmp/tmput5yp50s.cpp:35: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::string\
    \ word;\n    long boredoms = 0;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpj0_fg9tw: /tmp/tmpj0_fg9tw.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long n = S.length();\n    long i=0,bored=0;\n\
    \    while(i<n){\n        if(S[i]=='I'){\n            while(i<n && S[i]!='.' &&\
    \ S[i]!='?' && S[i]!='!'){\n                i++;\n            }\n            bored++;\n\
    \        }\n        else{\n            while(i<n && S[i]!='.' && S[i]!='?' &&\
    \ S[i]!='!'){\n                i++;\n            }\n        }\n        if(i<n){\n\
    \            i++;\n        }\n    }\n    return bored;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpl9fkqd48: /tmp/tmpl9fkqd48.cpp:35: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // TODO: Implement\n  int i, j, count=0;\n \
    \ int n = S.length();\n  for(i=0; i<n; i++)\n  {\n    if(S[i] == 'I')\n    {\n\
    \      for(j=i; j<n; j++)\n      {\n        if(S[j] == '.' || S[j] == '?' || S[j]\
    \ == '!')\n        {\n          i = j;\n          count++;\n          break;\n\
    \        }\n      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8k9g5_6e: /tmp/tmp8k9g5_6e.cpp:35: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int boredoms = 0;\n  string word;\n  stringstream\
    \ ss(S);\n  while (ss >> word) {\n    if (word[0] == 'I') {\n      //std::cout\
    \ << word << '\\n';\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1yba94as.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp1yba94as.cpp:13:3: error: \u2018string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::string\u2019?\n   13 |   string word;\n     \
    \ |   ^~~~~~\n      |   std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yba94as.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmp1yba94as.cpp:14:3:\
    \ error: \u2018stringstream\u2019 was not declared in this scope; did you mean\
    \ \u2018std::stringstream\u2019?\n   14 |   stringstream ss(S);\n      |   ^~~~~~~~~~~~\n\
    \      |   std::stringstream\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yba94as.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringst"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    stringstream check1(S);\n    string intermediate;\n\
    \    long x=0;\n    while(getline(check1, intermediate, '.')) {\n        stringstream\
    \ check2(intermediate);\n        string intermediate2;\n        getline(check2,\
    \ intermediate2, ' ');\n        if(intermediate2==\"I\") x++;\n    }\n    return\
    \ x;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcddpbjjj.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpcddpbjjj.cpp:12:5: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n   12 |     stringstream\
    \ check1(S);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcddpbjjj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringstream;\n      |                                     ^~~~~~~~~~~~\n/tmp/tmpcddpbjjj.cpp:13:5:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   13 |     string intermediate;\n      |     ^~~~~~\n   \
    \   |     std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcddpbjjj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 | "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Todo: implement this function\n  // Note:\
    \ you may find some functions like find, substr, etc helpful\n  // You may also\
    \ find the stringstream class helpful\n  long boredom = 0;\n  std::string delimiter\
    \ = \" !.?\";\n  size_t pos = 0;\n  std::string token;\n  while ((pos = S.find(delimiter))\
    \ != std::string::npos) {\n    token = S.substr(0, pos);\n    std::stringstream\
    \ s(token);\n    std::string word;\n    s >> word;\n    if (word == \"I\")\n \
    \     boredom++;\n    S.erase(0, pos + delimiter.length());\n  }\n  if (S.substr(0,\
    \ 1) == \"I\")\n    boredom++;\n  return boredom;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpd254a0vq: /tmp/tmpd254a0vq.cpp:35: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int boredoms = 0;\n  std::stringstream ss(S);\n\
    \  std::string temp;\n  while (ss) {\n    ss >> temp;\n    if (temp.find(\"I\"\
    ) == 0) {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5dvsug3w: /tmp/tmp5dvsug3w.cpp:26: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // I will count total number of sentences,\
    \ and then subtract total\n    // number of sentences that starts with I.\n  \
    \  long sentences = 0;\n    long sentences_start_with_I = 0;\n    for (long i\
    \ = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            // Check if this sentence starts with I\n            long\
    \ j = i;\n            while (j > 0 && S[j - 1] == ' ') j--;\n            // This\
    \ is sentence's end\n            // if (j > 0 && S[j] == 'I')\n            if\
    \ (j > 1 && S[j - 1] == 'I')\n                sentences_start_with_I++;\n    \
    \        sentences++;\n        }\n    }\n    return sentences - sentences_start_with_I;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpj4dk3006: /tmp/tmpj4dk3006.cpp:33: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long res = 0;\n    for (int i = 0; i < S.size();\
    \ i++) {\n        if (S[i] == 'I') {\n            res++;\n        }\n        if\
    \ (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            i++;\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4jvcug24: /tmp/tmp4jvcug24.cpp:26: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int num = 0;\n  std::stringstream ss(S);\n \
    \ std::string item;\n  while (std::getline(ss, item, '.')) {\n    if (item.size()\
    \ > 0) {\n      if (item[0] == 'I')\n        num++;\n    }\n  }\n  return num;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpihzwgbq5: /tmp/tmpihzwgbq5.cpp:26: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long bored = 0;\n    char delimiters[] = \"\
    \ .?!\";\n    char * token = std::strtok(&S[0], delimiters);\n    while (token\
    \ != NULL) {\n        std::cout << token << std::endl;\n        if (std::strcmp(token,\
    \ \"I\") == 0) {\n            bored += 1;\n        }\n        token = std::strtok(NULL,\
    \ delimiters);\n    }\n    return bored;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: "Hello\nworld\nIs\nthe\nsky\nblue\nI\nlove\nIt\nbIt\nI\nfeel\ngood\ntoday\n\
    I\nwill\nbe\nproductive\nwill\nkill\nIt\nYou\nand\nI\nare\ngoing\nfor\na\nwalk\n"
  stderr: "tmprayiqm2q: /tmp/tmprayiqm2q.cpp:31: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::vector<std::string> words;\n    std::stringstream\
    \ ss(S);\n    std::string buf;\n    while (ss >> buf) {\n        words.push_back(buf);\n\
    \    }\n    std::vector<std::string> sentences;\n    int n = words.size();\n \
    \   for (int i = 0; i < n; ++i) {\n        std::string temp = \"\";\n        if\
    \ (words[i] == \"I\") {\n            temp += words[i];\n            temp += \"\
    \ \";\n            ++i;\n            while (i < n) {\n                if (words[i][words[i].size()\
    \ - 1] == '.' ||\n                    words[i][words[i].size() - 1] == '?' ||\n\
    \                    words[i][words[i].size() - 1] == '!') {\n               \
    \     temp += words[i];\n                    break;\n                }\n     \
    \           temp += words[i];\n                temp += \" \";\n              \
    \  ++i;\n            }\n            sentences.push_back(temp);\n        }\n  \
    \  }\n    return sentences.size();\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9k1t_rkx: /tmp/tmp9k1t_rkx.cpp:49: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long numberOfI = 0;\n  bool iStarted = false;\n\
    \  for (int i = 0; i < S.length(); i++) {\n    if (S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!') {\n      if (iStarted) {\n        iStarted = false;\n      \
    \  numberOfI++;\n      }\n    } else if (S[i] == 'I') {\n      iStarted = true;\n\
    \    }\n  }\n  return numberOfI;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp2jokbfod: /tmp/tmp2jokbfod.cpp:29: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    std::string buffer;\n \
    \   std::stringstream ss(S);\n    while (std::getline(ss, buffer, '.')) {\n  \
    \      if (buffer.length() && buffer[0] == 'I') ans++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpm3la9lex: /tmp/tmpm3la9lex.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n   char *token = strtok((char *)S.c_str(), \"\
    ?.!\");\n   long count = 0;\n   while (token != NULL) {\n      if (token[0] ==\
    \ 'I') {\n         count++;\n      }\n      token = strtok(NULL, \"?.!\");\n \
    \  }\n   return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3kwqcwhk: /tmp/tmp3kwqcwhk.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::stringstream ss;\n  ss << S;\n  std::string\
    \ item;\n  long count = 0;\n  while (std::getline(ss, item, '.')) {\n    if (item.substr(0,\
    \ item.find(' ')) == \"I\") {\n      count++;\n    }\n  }\n  return count;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7ny7ypne: /tmp/tmp7ny7ypne.cpp:29: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong boredoms = 0;\n\tif(S[0]=='I')\n\t\tboredoms++;\n\
    \tfor(auto it = S.begin(); it!=S.end(); ++it)\n\t{\n\t\tif(*it=='.' || *it=='?'\
    \ || *it=='!')\n\t\t{\n\t\t\t++it;\n\t\t\tif(*it=='I')\n\t\t\t\tboredoms++;\n\t\
    \t}\n\t}\n\treturn boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream SStream(S);\n    std::string\
    \ Sentence;\n    long Count = 0;\n    while(std::getline(SStream, Sentence, '.'))\
    \ {\n        if(Sentence.substr(0, 2) == \"I \")\n            Count++;\n    }\n\
    \    return Count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjclp_sp2: /tmp/tmpjclp_sp2.cpp:27: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    vector<string> sentence;\n    vector<string>\
    \ words;\n    vector<string> words_arr;\n    int i = 0;\n    int c = 0;\n    if(S.size()\
    \ == 0)\n    {\n        return 0;\n    }\n    for(i = 0; i < S.size(); i++)\n\
    \    {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n        {\n   \
    \         sentence.push_back(S.substr(c, i - c));\n            c = i + 1;\n  \
    \      }\n    }\n    if(c < S.size())\n    {\n        sentence.push_back(S.substr(c,\
    \ S.size() - c));\n    }\n    for(i = 0; i < sentence.size(); i++)\n    {\n  \
    \      stringstream ss(sentence[i]);\n        while(ss >> words)\n        {\n\
    \            words_arr.push_back(words);\n        }\n        if(words_arr[0] ==\
    \ \"I\")\n        {\n            return 1;\n        }\n        words_arr.clear();\n\
    \    }\n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvfpoly4d.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpvfpoly4d.cpp:12:5: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   12 |     vector<string> sentence;\n\
    \      |     ^~~~~~\n      |     std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpvfpoly4d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpvfpoly4d.cpp:12:12:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   12 |     vector<string> sentence;\n      |            ^~~~~~\n\
    \      |            std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvfpoly4d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpvfpoly4d.cpp:12:20:\
    \ error: \u2018sentence\u2019 was not declared in this scope; did you mean \u2018\
    setenv\u2019?\n   12 |     vector<string> sentence;\n      |                 \
    \   ^~~~~~~~\n      |                "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // your code here\n    std::vector<std::string>words;\n\
    \    std::stringstream ss(S);\n    std::string tmp;\n    while(ss>>tmp){\n   \
    \     words.push_back(tmp);\n    }\n    // for(int i=0;i<words.size();i++){\n\
    \    //     std::cout<<words[i]<<std::endl;\n    // }\n    int count=0;\n    for(int\
    \ i=0;i<words.size();i++){\n        if(words[i]==\"I\"){\n            while(true){\n\
    \                i++;\n                if(words[i]==\".\"||words[i]==\"?\"||words[i]==\"\
    !\"){\n                    count++;\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream lineStream(S);\n    std::string\
    \ word;\n    long boredoms{0};\n    while (lineStream >> word) {\n        if (word\
    \ == \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdnz2n0ed: /tmp/tmpdnz2n0ed.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // split the string by word\n    std::vector<std::string>\
    \ words;\n    std::istringstream iss(S);\n    do\n    {\n        std::string sub;\n\
    \        iss >> sub;\n        words.push_back(sub);\n    } while (iss);\n    long\
    \ boredoms = 0;\n    bool isBored = false;\n    for (const auto &word : words)\
    \ {\n        if (word.compare(\"I\") == 0) {\n            isBored = true;\n  \
    \      }\n        if (word.compare(\".\") == 0 || word.compare(\"?\") == 0 ||\
    \ word.compare(\"!\") == 0) {\n            if (isBored) {\n                boredoms++;\n\
    \            }\n            isBored = false;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwtlc2wei: /tmp/tmpwtlc2wei.cpp:42: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // You code here!\n\tchar s[10000];\n\tstrcpy(s,S.c_str());\n\
    \tint i=0, count=0;\n\twhile(s[i]!='\\0')\n\t{\n\t\tint j=i;\n\t\twhile(s[j]!='.'\
    \ && s[j]!='?' && s[j]!='!' && s[j]!='\\0')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\tj--;\n\
    \t\tif(j-i>=1 && s[i]=='I' && s[i+1]==' ')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\t\
    if(s[j]=='.' || s[j]=='?' || s[j]=='!')\n\t\t{\n\t\t\ti=j+2;\n\t\t}\n\t\telse\n\
    \t\t{\n\t\t\ti=j+1;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long boredoms = 0;\n  int prev = 0;\n  for (long\
    \ i = 0; i < S.size(); i++) {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n      std::string temp = S.substr(prev, i - prev);\n      std::cout << temp\
    \ << std::endl;\n      if (temp.substr(0,2) == \"I \") {\n        boredoms++;\n\
    \      }\n      prev = i + 1;\n    }\n  }\n  return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: "Is the sky blue\nI love It \nI feel good today\n I will be productive\n"
  stderr: "tmpqpgbsv54: /tmp/tmpqpgbsv54.cpp:32: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long number = 0;\n  long size = S.size();\n\
    \  if (size == 0) {\n    return 0;\n  }\n  S = S + \".\";\n  size++;\n  int i\
    \ = 0;\n  bool isWord = false;\n  bool isSentence = false;\n  bool isFirst = false;\n\
    \  for (i = 0; i < size; i++) {\n    if (S[i] == ' ') {\n      isFirst = false;\n\
    \      isWord = false;\n    } else if (S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n      isSentence = true;\n      isWord = false;\n      isFirst = false;\n\
    \    } else {\n      if (isWord) {\n        isFirst = false;\n      } else {\n\
    \        isWord = true;\n        if (isSentence) {\n          if (isFirst) {\n\
    \            if (S[i] == 'I') {\n              number++;\n            }\n    \
    \      } else {\n            isFirst = true;\n          }\n        }\n      }\n\
    \    }\n  }\n  return number;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8btln550: /tmp/tmp8btln550.cpp:54: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  char bored = 'I';\n  char delimit = '.';\n \
    \ char delimit2 = '?';\n  char delimit3 = '!';\n  long count = 0;\n  for (size_t\
    \ i = 0; i < S.length(); i++) {\n    if (S[i] == bored) {\n      count++;\n  \
    \  }\n    if (S[i] == delimit || S[i] == delimit2 || S[i] == delimit3) {\n   \
    \   bored = 'I';\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6asqj84k: /tmp/tmp6asqj84k.cpp:30: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::string temp;\n    std::istringstream\
    \ iss(S);\n    long count = 0;\n    std::string ch = \"\";\n    while(getline(iss,temp,'.')){\n\
    \        std::string word;\n        std::istringstream t(temp);\n        getline(t,word,'\
    \ ');\n        if(word==\"I\"){\n            count+=1;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpck99auv_: /tmp/tmpck99auv_.cpp:32: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong count = 0;\n\tint i = 0;\n\twhile (i<S.length())\
    \ {\n\t\twhile (S[i] == ' ') {\n\t\t\ti++;\n\t\t}\n\t\tint j = i;\n\t\twhile (S[j]\
    \ != ' ' && S[j] != '.' && S[j] != '?' && S[j] != '!') {\n\t\t\tj++;\n\t\t}\n\t\
    \tstd::string word = S.substr(i, j - i);\n\t\tif (word == \"I\") {\n\t\t\tcount++;\n\
    \t\t}\n\t\ti = j;\n\t\tif (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\t\t\t\
    i++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    int n = S.length();\n\
    \    for(int i = 0; i < n; i++) {\n        if(S[i] == 'I') {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpuz_q693t: /tmp/tmpuz_q693t.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // your code goes here\n  // Split the string\
    \ on \".\" \"?\" \"!\"\n  std::vector<std::string> phrases;\n  char delimiter\
    \ = '.';\n  size_t prev = 0, pos = 0;\n  do\n  {\n    pos = S.find(delimiter,\
    \ prev);\n    if (pos == std::string::npos) pos = S.length();\n    std::string\
    \ phrase = S.substr(prev, pos-prev);\n    if (!phrase.empty()) phrases.push_back(phrase);\n\
    \    prev = pos + 1;\n  }\n  while (pos < S.length() && prev < S.length());\n\n\
    \  std::cout << \"Phrases\" << std::endl;\n  for (std::string s : phrases) {\n\
    \    std::cout << s << std::endl;\n  }\n\n  // Split each phrase on spaces.\n\
    \  std::vector<std::vector<std::string>> words;\n  for (std::string phrase : phrases)\
    \ {\n    std::vector<std::string> words_in_phrase;\n    char delimiter = ' ';\n\
    \    size_t prev = 0, pos = 0;\n    do\n    {\n      pos = phrase.find(delimiter,\
    \ prev);\n      if (pos == std::string::npos) pos = phrase.length();\n      std::string\
    \ word = phrase.substr(prev, pos-prev);\n      if (!word.empty()) words_in_phrase.push_back(word);\n\
    \      prev = pos + 1;\n    }\n    while (pos < phrase.length() && prev < phrase.length());\n\
    \    words.push_back(words_in_phrase);\n  }\n\n  std::cout << \"Words\" << std::endl;\n\
    \  for (std::vector<std::string> words_in_phrase : words) {\n    for (std::string\
    \ word : words_in_phrase) {\n      std::cout << word << std::endl;\n    }\n  }\n\
    \n  long boredom_count = 0;\n  for (std::vector<std::string> words_in_phrase :\
    \ words) {\n    if (words_in_phrase.\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb124wfmp.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpb124wfmp.cpp:60:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   60 | }\n      | ^\n/tmp/tmpb124wfmp.cpp:59:25: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   59 |     if (words_in_phrase.\n      |\
    \        ~                ^\n      |                         )\n   60 | }\n  \
    \    | ~                        \n/tmp/tmpb124wfmp.cpp:60:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmpb124wfmp.cpp:61:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   61 | int main() {\n      |            ^\n/tmp/tmpb124wfmp.cpp:69:1: error:\
    \ expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpb124wfmp.cpp:11:30:\
    \ note: to match this \u2018{\u2019\n   11 | long is_bored(std::string S) {\n\
    \      |                              ^\n/tmp/tmpb124wfmp.cpp:69:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   69 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::istringstream iss(S);\n    std::string\
    \ temp;\n    long count = 0;\n    while(iss >> temp) {\n        if(temp[0] ==\
    \ 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvcno1v5f: /tmp/tmpvcno1v5f.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long n = S.length();\n  int res = 0;\n  bool\
    \ boring = false;\n  for (long i = 0; i < n; i++) {\n    if (S[i] == 'I') boring\
    \ = true;\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!') boring = false;\n\
    \    if (boring) res++;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_7yivm5f: /tmp/tmp_7yivm5f.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long result = 0;\n  std::stringstream ss(S);\n\
    \  std::string tok;\n  std::string my_delimiters = \".!?\";\n  bool bored = false;\n\
    \  while(getline(ss, tok, ' ')) {\n    std::size_t found = tok.find_first_of(my_delimiters);\n\
    \    if (found != std::string::npos) {\n      if (bored) {\n        result++;\n\
    \      }\n      bored = false;\n    }\n    if (tok == \"I\") {\n      bored =\
    \ true;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  size_t index = S.find(\"I\");\n  size_t n =\
    \ S.length();\n  if (index == std::string::npos) {\n    return 0;\n  }\n  std::string\
    \ word = S.substr(index, n - index);\n  size_t pos = 0;\n  if ((pos = word.find(\"\
    .\")) != std::string::npos) {\n    word = word.substr(0, pos);\n  } else if ((pos\
    \ = word.find(\"?\")) != std::string::npos) {\n    word = word.substr(0, pos);\n\
    \  } else if ((pos = word.find(\"!\")) != std::string::npos) {\n    word = word.substr(0,\
    \ pos);\n  } else {\n    word = word.substr(0, n - index);\n  }\n  word.erase(std::remove(word.begin(),\
    \ word.end(), ' '), word.end());\n  if (word.compare(\"I\") == 0) {\n    S.erase(index,\
    \ word.length());\n    return 1 + is_bored(S);\n  }\n  return is_bored(S);\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long size=S.size();\n    long ans=0;\n   \
    \ std::stringstream str;\n    str<<S;\n    std::string tmp;\n    while(str>>tmp){\n\
    \        if(tmp[0]=='I'){\n            ans++;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpuq3fh32e: /tmp/tmpuq3fh32e.cpp:27: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    long i = 0;\n    while\
    \ (i < S.length()) {\n        if (S[i] == 'I') {\n            boredoms++;\n  \
    \          while (i < S.length() && S[i] != '.' && S[i] != '?' && S[i] != '!')\n\
    \                i++;\n        }\n        i++;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpiy0cx98g: /tmp/tmpiy0cx98g.cpp:27: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::transform(S.begin(), S.end(), S.begin(),\
    \ ::tolower);\n    std::size_t found;\n    found = S.find(\".\");\n    long boredom\
    \ = 0;\n    while (found != std::string::npos) {\n        S.replace(found, 1,\
    \ \" \");\n        found = S.find(\".\");\n    }\n    found = S.find(\"?\");\n\
    \    while (found != std::string::npos) {\n        S.replace(found, 1, \" \");\n\
    \        found = S.find(\"?\");\n    }\n    found = S.find(\"!\");\n    while\
    \ (found != std::string::npos) {\n        S.replace(found, 1, \" \");\n      \
    \  found = S.find(\"!\");\n    }\n    std::stringstream ss(S);\n    std::string\
    \ token;\n    while (std::getline(ss, token, ' ')) {\n        if (token == \"\
    i\") {\n            boredom++;\n        }\n    }\n    return boredom;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpttvzq3jq: /tmp/tmpttvzq3jq.cpp:46: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int i,count=0;\n  std::string temp,s;\n  std::stringstream\
    \ stream(S);\n  while(getline(stream,temp,'.')){\n    std::stringstream stream1(temp);\n\
    \    getline(stream1,s,' ');\n    if(s==\"I\")\n      count++;\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpdvge6fq4: /tmp/tmpdvge6fq4.cpp:29: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long cnt = 0;\n  std::string delimiter = \"\
    !?.\";\n  size_t pos = 0;\n  std::string token;\n  while ((pos = S.find(delimiter))\
    \ != std::string::npos) {\n    token = S.substr(0, pos);\n    if (token.find(\"\
    I\") == 0) {\n      cnt++;\n    }\n    S.erase(0, pos + delimiter.length());\n\
    \  }\n  if (S.find(\"I\") == 0) {\n    cnt++;\n  }\n  return cnt;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp32zh4i1n: /tmp/tmp32zh4i1n.cpp:31: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::string str=S;\n\tint a = 0;\n\tint b\
    \ = 1;\n\tstd::string temp = \"I\";\n\twhile (b < str.length()) {\n\t\tif (str[a]\
    \ == '.' || str[a] == '?' || str[a] == '!') {\n\t\t\tif (str[b] == 'I') {\n\t\t\
    \t\treturn 1;\n\t\t\t}\n\t\t}\n\t\ta++;\n\t\tb++;\n\t}\n\treturn 0;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwsxf__rv: /tmp/tmpwsxf__rv.cpp:31: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int result = 0;\n  int len = S.length();\n \
    \ int i = 0;\n  int j = 0;\n  for (i = 0; i < len; i++) {\n    for (j = i; j <\
    \ len; j++) {\n      if (S[j] == '.' || S[j] == '?' || S[j] == '!') {\n      \
    \  if (S[i] == 'I') {\n          result++;\n        }\n        i = j;\n      \
    \  break;\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9ppz3ic8: /tmp/tmp9ppz3ic8.cpp:32: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::istringstream buffer(S);\n  std::string\
    \ word;\n  int count = 0;\n  while (buffer >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3v6p7vkx: /tmp/tmp3v6p7vkx.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::stringstream stream(S);\n  std::string\
    \ word;\n  long count = 0;\n  while (getline(stream, word, ' ')) {\n    if (word\
    \ == \"I\") {\n      ++count;\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpl_602inn: /tmp/tmpl_602inn.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tif (S.empty()) return 0;\n\tlong bored = 0;\n\
    \tfor (int i = 0; i < S.size(); i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tbored++;\n\
    \t\t\twhile (S[i] != '!' && S[i] != '.' && S[i] != '?') {\n\t\t\t\ti++;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn bored;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwv1eoagm: /tmp/tmpwv1eoagm.cpp:27: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    std::stringstream check1(S);\n\
    \    std::string intermediate;\n    while(getline(check1, intermediate, '.'))\n\
    \    {\n        std::stringstream check2(intermediate);\n        while(getline(check2,\
    \ intermediate, '?'))\n        {\n            std::stringstream check3(intermediate);\n\
    \            while(getline(check3, intermediate, '!'))\n            {\n      \
    \          if(intermediate[0] == 'I')\n                {\n                   \
    \ count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpv3u44jup: /tmp/tmpv3u44jup.cpp:35: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count{0};\n    long index{0};\n    while\
    \ (true) {\n        // find word I\n        index = S.find(\"I\", index);\n  \
    \      if (index == std::string::npos) break;\n        // make sure that it is\
    \ at the start of the sentence\n        if (index == 0) {\n            count++;\n\
    \        } else if (S[index-1] == '.' || S[index-1] == '?' || S[index-1] == '!')\
    \ {\n            count++;\n        }\n        index++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpclnj7r98: /tmp/tmpclnj7r98.cpp:31: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // split on the delimiters!\n  std::vector<std::string>\
    \ words = split(S, {'.', '?', '!'});\n  long boredoms = 0;\n  for (auto word :\
    \ words) {\n    // check if the first word is \"I\"\n    std::vector<std::string>\
    \ my_words = split(word, {' '});\n    if (my_words[0] == \"I\") {\n      boredoms++;\n\
    \    }\n  }\n  return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr4920lzm.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpr4920lzm.cpp:13:36: error: \u2018split\u2019 was not declared in this\
    \ scope\n   13 |   std::vector<std::string> words = split(S, {'.', '?', '!'});\n\
    \      |                                    ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long nb_boredom = 0;\n    long nb_sentence\
    \ = 0;\n    long nb_words = 0;\n    std::istringstream iss(S);\n    std::string\
    \ word;\n    while (iss >> word) {\n        nb_words++;\n        if (word.compare(\"\
    I\") == 0) {\n            nb_boredom++;\n        }\n        if (word.back() ==\
    \ '.' || word.back() == '?' || word.back() == '!') {\n            nb_sentence++;\n\
    \        }\n    }\n    if (nb_sentence > 0) {\n        assert(nb_sentence == nb_words);\n\
    \    }\n    return nb_boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpc_db8y8c: /tmp/tmpc_db8y8c.cpp:27: long int is_bored(std::string): Assertion\
    \ `nb_sentence == nb_words' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tint i,cnt=0;\n\tfor(i=0;i<S.length();i++)\n\t\
    {\n\t\tif(S[i]=='I')\n\t\t{\n\t\t\tcnt++;\n\t\t}\n\t}\n\treturn cnt;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpac2z3rl6: /tmp/tmpac2z3rl6.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long is_bored_count = 0;\n    auto start =\
    \ 0;\n    std::vector<std::string> sentences;\n    for (auto i = 0; i < S.length();\
    \ i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n         \
    \   sentences.push_back(S.substr(start, i - start));\n            start = i +\
    \ 1;\n        }\n    }\n    for (auto sentence : sentences) {\n        std::stringstream\
    \ ss(sentence);\n        std::string word;\n        ss >> word;\n        if (word\
    \ == \"I\") {\n            is_bored_count++;\n        }\n    }\n    return is_bored_count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    long count = 0;\n \
    \   std::istringstream ss(S);\n    std::string s;\n    while(std::getline(ss,\
    \ s, '.')){\n        std::istringstream sss(s);\n        std::string ss;\n   \
    \     if(std::getline(sss, ss, ' ')){\n            if(ss == \"I\"){\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmplxq6o56a: /tmp/tmplxq6o56a.cpp:33: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::istringstream iss(S);\n    std::string\
    \ S2;\n    long boredoms = 0;\n    while (std::getline(iss, S2, '.'))\n    {\n\
    \        int start = S2.find(\"I\");\n        if (start == 0)\n        {\n   \
    \         boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8g41dho9: /tmp/tmp8g41dho9.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::string pattern=\"I\";\n  long count = 0;\n\
    \  for(int i=0;i<S.length();i++)\n  {\n    for(int j=0;j<pattern.length();j++)\n\
    \    {\n      if(S[i+j]==pattern[j])\n      {\n        if(j==pattern.length()-1)\n\
    \        {\n          count++;\n        }\n      }\n      else\n      {\n    \
    \    break;\n      }\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsdk9fzr5: /tmp/tmpsdk9fzr5.cpp:36: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong count = 0;\n\tstd::istringstream ss(S);\n\
    \tstd::string token;\n\tstd::string sentence;\n\twhile (std::getline(ss, token,\
    \ '.'))\n\t{\n\t\tsentence = token;\n\t\twhile (std::getline(ss, token, '?'))\n\
    \t\t{\n\t\t\tsentence += token;\n\t\t}\n\t\tif (sentence.find(\"I\") == 0)\n\t\
    \t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnhxk9ai0: /tmp/tmpnhxk9ai0.cpp:33: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long counter = 0;\n  for (int i = 0; i < S.length();\
    \ i++) {\n    if (S[i] == 'I') {\n      i += 2;\n      counter++;\n    }\n  }\n\
    \  return counter;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpeq1x9yeu: /tmp/tmpeq1x9yeu.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n   int i=0,j=0,c=0;\n    while(i<S.length())\n\
    \    {\n        while(i<S.length() && S[i]!='.')\n        {\n            if(S[i]=='\
    \ ')\n            {\n                j=i+1;\n                if(S[j]=='I')\n \
    \               {\n                    c++;\n                }\n            }\n\
    \            i++;\n        }\n        if(S[i]=='.')\n        {\n            i=i+2;\n\
    \        }\n    }\n    return c;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpsvx73iiy: /tmp/tmpsvx73iiy.cpp:40: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    int length = S.length();\n\
    \    int i = 0;\n    int count = 0;\n    while(i < length){\n        if(S[i] ==\
    \ 'I'){\n            if(S[i+1] == ' '){\n                boredoms = boredoms +\
    \ 1;\n            }\n        }\n        i++;\n    }\n    return boredoms;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_rohuz3b: /tmp/tmp_rohuz3b.cpp:33: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Your code here\n  std::transform(S.begin(),\
    \ S.end(), S.begin(), ::tolower);\n  std::string delimiters = \"?!.\";\n  std::string\
    \ token;\n  size_t prev = 0, pos;\n  long count = 0;\n  while ((pos = S.find_first_of(delimiters,\
    \ prev)) != std::string::npos) {\n    if (pos > prev) {\n      token = S.substr(prev,\
    \ pos - prev);\n      if (token.at(0) == 'i') {\n        count++;\n      }\n \
    \   }\n    prev = pos + 1;\n  }\n  if (prev < S.length()) {\n    token = S.substr(prev,\
    \ std::string::npos);\n    if (token.at(0) == 'i') {\n      count++;\n    }\n\
    \  }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp13n0zh9h: /tmp/tmp13n0zh9h.cpp:38: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    std::stringstream words(S);\n\
    \    std::string first;\n    while (words >> first) {\n        if (first == \"\
    I\")\n            boredoms++;\n    }\n    return boredoms;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp19_8hu07: /tmp/tmp19_8hu07.cpp:28: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::istringstream is(S);\n    std::string\
    \ word;\n    int count = 0;\n    while (is >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzi65l4f3: /tmp/tmpzi65l4f3.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::stringstream stream(S);\n  std::string\
    \ word;\n  int count = 0;\n  while (stream >> word) {\n    if (word == \"I\")\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8t1mxcte: /tmp/tmp8t1mxcte.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tint n = S.length();\n\tstd::string temp = \"\
    \";\n\tlong count = 0;\n\tint i = 0;\n\tfor (i = 0; i < n; i++) {\n\t\tif (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n\t\t\tif (temp.length() > 0) {\n\t\t\
    \t\tif (temp[0] == 'I') {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\ttemp = \"\"\
    ;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttemp = temp + S[i];\n\t\t}\n\t}\n\tif (temp.length()\
    \ > 0) {\n\t\tif (temp[0] == 'I') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpra7uov9o: /tmp/tmpra7uov9o.cpp:39: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\treturn std::count(S.begin(), S.end(), 'I');\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpqdb8_z6i: /tmp/tmpqdb8_z6i.cpp:17: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int i = 0;\n  int count = 0;\n  int k = 0;\n\
    \  for (int j = 0; j < S.length(); j++) {\n    if (S[j] == '.' || S[j] == '?'\
    \ || S[j] == '!') {\n      i = j;\n      if (S[k] == 'I') {\n        count++;\n\
    \      }\n      k = i + 2;\n    }\n  }\n  return count;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpjfwybpe4: /tmp/tmpjfwybpe4.cpp:29: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // TODO\n    int count = 0;\n    int index\
    \ = 0;\n    for(int i = 0; i < S.length(); i++){\n        if(S[i] == 'I'){\n \
    \           count++;\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnzckqgwg: /tmp/tmpnzckqgwg.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans = 0;\n    long count = 0;\n    //\
    \ char ch = 'I';\n    for(char &c : S) {\n        if(c == 'I') {\n           \
    \ count = 0;\n            for(int i = 1; i < S.length(); i++) {\n            \
    \    if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n                    count++;\n\
    \                }\n            }\n            // printf(\"%d\\n\", count);\n\
    \            ans += count;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp77x5z_tw: /tmp/tmp77x5z_tw.cpp:32: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\t\n\tlong c = 0;\n\tlong l = S.length();\n\t\
    std::string t = \"\";\n\tfor (long i = 0; i < l; i++) {\n\t\tif (S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!') {\n\t\t\tt = \"\";\n\t\t}\n\t\telse if (S[i] ==\
    \ ' ') {\n\t\t\tif (t == \"I\")\n\t\t\t\tc++;\n\t\t\tt = \"\";\n\t\t}\n\t\telse\
    \ {\n\t\t\tt += S[i];\n\t\t}\n\t}\n\tif (t == \"I\")\n\t\tc++;\n\treturn c;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpm8k8ndw1: /tmp/tmpm8k8ndw1.cpp:40: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long boredoms = 0;\n  std::vector<std::string>\
    \ words;\n  std::istringstream iss(S);\n  std::string word;\n  while (iss >> word)\
    \ {\n    words.push_back(word);\n  }\n  for (long i = 0; i < words.size(); i++)\
    \ {\n    if (words[i] == \"I\") {\n      if (i == 0 || !((words[i - 1][words[i\
    \ - 1].size() - 1] == '.') ||\n                      (words[i - 1][words[i - 1].size()\
    \ - 1] == '?') ||\n                      (words[i - 1][words[i - 1].size() - 1]\
    \ == '!'))) {\n        boredoms++;\n      }\n    }\n  }\n  return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpcmp16pis: /tmp/tmpcmp16pis.cpp:36: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    std::vector<std::string>\
    \ tokens;\n    std::string token;\n    while (std::getline(ss, token, '.')) {\n\
    \        tokens.push_back(token);\n    }\n    std::cout << \"Size = \" << tokens.size()\
    \ << std::endl;\n    for (auto it = tokens.begin(); it != tokens.end(); ++it)\
    \ {\n        std::cout << *it << std::endl;\n    }\n    int count = 0;\n    std::vector<std::string>::iterator\
    \ it = tokens.begin();\n    std::string first_word = *it;\n    int j = 0;\n  \
    \  while (first_word[j] == ' ') {\n        j++;\n    }\n    if (first_word[j]\
    \ == 'I') {\n        count++;\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: "Size = 1\nHello world\nSize = 1\nIs the sky blue?\n"
  stderr: "tmpbyy2a5bw: /tmp/tmpbyy2a5bw.cpp:37: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int pos = 0;\n    std::string sentence;\n\
    \    long cnt = 0;\n    while(true) {\n        pos = S.find_first_of(\".!?\");\n\
    \        sentence = S.substr(0, pos);\n        if(pos != -1) {\n            if(sentence.compare(0,\
    \ 2, \"I \") == 0) {\n                cnt++;\n            }\n            S = S.substr(pos\
    \ + 1);\n        } else {\n            if(sentence.compare(0, 2, \"I \") == 0)\
    \ {\n                cnt++;\n            }\n            break;\n        }\n  \
    \  }\n    return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3bwnum6s: /tmp/tmp3bwnum6s.cpp:38: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // your code here\n    long count = 0;\n \
    \   char previous = ' ';\n    for(int i = 0; i < S.length(); i++){\n        if(S[i]\
    \ == ' ' || S[i] == '.' || S[i] == '?' || S[i] == '!'){\n            if(S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!'){\n                previous = S[i];\n    \
    \        }\n            if(S[i-1] == 'I' && previous == ' '){\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpw9eefef7: /tmp/tmpw9eefef7.cpp:33: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    if(S.empty()) {\n        return 0;\n    }\n\
    \    long cnt = 0;\n    int prev = 0;\n    for(int i = 0; i < S.size(); i++) {\n\
    \        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            if(S[prev]\
    \ == 'I') {\n                cnt++;\n            }\n            prev = i + 2;\n\
    \        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp235m4ng4: /tmp/tmp235m4ng4.cpp:30: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::transform(S.begin(), S.end(), S.begin(),\
    \ ::tolower);\n    std::regex regex (\"I\");\n    long count = std::count_if(S.begin(),\
    \ S.end(),\n            [&regex](std::string::value_type c) {\n              \
    \  return regex_match(std::string(1, c), regex);\n            });\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp_3v3tryz: /tmp/tmp_3v3tryz.cpp:24: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    return std::count(S.begin(), S.end(), 'I');\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpfdayqo9_: /tmp/tmpfdayqo9_.cpp:17: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int num = 0;\n  std::istringstream iss(S);\n\
    \  std::string word;\n  while (iss >> word) {\n    if (word == \"I\") {\n    \
    \  num++;\n    }\n  }\n  return num;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpmer0g_ze: /tmp/tmpmer0g_ze.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    return std::count(S.begin(), S.end(), 'I');\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpl0rc48c6: /tmp/tmpl0rc48c6.cpp:17: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms=0;\n    for(int i=0;i<S.length();i++){\n\
    \        if(S[i]=='I')\n            boredoms++;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpiiv6_e55: /tmp/tmpiiv6_e55.cpp:22: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long count = 0;\n  std::stringstream ss(S);\n\
    \  std::string item;\n  while (std::getline(ss, item, '.')) {\n    if (item[0]\
    \ == 'I') count++;\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpx8_auj4n: /tmp/tmpx8_auj4n.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::string t = \"I\";\n    long count = 0;\n\
    \    long found = S.find(t);\n    while (found != std::string::npos) {\n     \
    \   if (found == 0) {\n            count++;\n        } else if (S[found - 1] ==\
    \ '.' || S[found - 1] == '?' || S[found - 1] == '!') {\n            count++;\n\
    \        }\n        found = S.find(t, found + 1);\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpia4lum0e: /tmp/tmpia4lum0e.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long x = 0;\n    std::regex pattern(\"[.]|[?]|[!]\"\
    );\n    std::sregex_token_iterator it(S.begin(), S.end(), pattern, -1);\n    std::sregex_token_iterator\
    \ reg_end;\n    std::vector<std::string> tokens(it, reg_end);\n    for (long i\
    \ = 0; i < tokens.size(); i++) {\n        if (tokens[i][0] == 'I') {\n       \
    \     x++;\n        }\n    }\n    return x;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp72gdq26n: /tmp/tmp72gdq26n.cpp:27: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  //your code here\n  long count = 0;\n  int len\
    \ = S.length();\n  std::istringstream iss(S);\n  std::string s;\n  while(std::getline(iss,\
    \ s, '.')){\n    len = s.length();\n    std::string t = s.substr(0, len-1);\n\
    \    if(s[0] == 'I'){\n      count += 1;\n    }\n  }\n  if(len > 0 && S[len-1]\
    \ == 'I'){\n    count += 1;\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnpi7ie9p: /tmp/tmpnpi7ie9p.cpp:32: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long n = S.length();\n  long count = 0;\n  for\
    \ (long i = 0; i < n; i++) {\n    if (S[i] == 'I') {\n      if (i == 0) {\n  \
    \      count++;\n      } else if (S[i - 1] == '.' || S[i - 1] == '?' || S[i -\
    \ 1] == '!') {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpej4v27_5: /tmp/tmpej4v27_5.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    std::istringstream\
    \ iss(S);\n    std::string word;\n    while (iss >> word) {\n        if (word\
    \ == \"I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpw5vi7ean: /tmp/tmpw5vi7ean.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long n = S.length();\n    long count = 0;\n\
    \    long isSentence = 0;\n    for (long i = 0; i < n; i++) {\n        if (S[i]\
    \ == ' ') {\n            continue;\n        } else if (S[i] == 'I') {\n      \
    \      count++;\n            isSentence = 1;\n        } else if (S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!') {\n            isSentence = 0;\n        } else {\n\
    \            isSentence = 1;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9afug6ib: /tmp/tmp9afug6ib.cpp:32: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::vector<std::string> words;\n    words\
    \ = _split(S, '.');\n    std::string::size_type i = 0;\n    std::string::size_type\
    \ j = 0;\n    long boredom = 0;\n    for (int i = 0; i < words.size(); i++) {\n\
    \        for (int j = 0; j < words[i].size(); j++) {\n            std::string\
    \ space = words[i].substr(j, 1);\n            if ((words[i].substr(j, 1) == \"\
    \ \") || (words[i].substr(j, 1) == \"I\")) {\n                // std::cout <<\
    \ \"hello\" << std::endl;\n                // std::cout << words[i].substr(j,\
    \ 1) << std::endl;\n                std::string word = words[i].substr(j + 1,\
    \ 1);\n                if (word == \"a\" || word == \"b\" || word == \"c\" ||\
    \ word == \"d\" || word == \"e\" || word == \"f\" || word == \"g\" || word ==\
    \ \"h\" || word == \"i\" || word == \"j\" || word == \"k\" || word == \"l\" ||\
    \ word == \"m\" || word == \"n\" || word == \"o\" || word == \"p\" || word ==\
    \ \"q\" || word == \"r\" || word == \"s\" || word == \"t\" || word == \"u\" ||\
    \ word == \"v\" || word == \"w\" || word == \"x\" || word == \"y\" || word ==\
    \ \"z\") {\n                    boredom++;\n                }\n            }\n\
    \        }\n    }\n    // std::cout << words.size() << std::endl;\n    // std::cout\
    \ << boredom << std::endl;\n    return boredom;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppx9hju15.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmppx9hju15.cpp:13:13: error: \u2018_split\u2019 was not declared in this\
    \ scope\n   13 |     words = _split(S, '.');\n      |             ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    bool isBored = false;\n\
    \    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!') {\n            if (isBored) {\n                boredoms++;\n\
    \            }\n            isBored = false;\n        } else if (S[i] == 'I')\
    \ {\n            isBored = true;\n        }\n    }\n    return boredoms;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmprojyizu9: /tmp/tmprojyizu9.cpp:29: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string current\
    \ = \"\";\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        current\
    \ += *it;\n        if (*it == '.' || *it == '?' || *it == '!') {\n           \
    \ if (current.find(\"I\") == 0) {\n                boredoms++;\n            }\n\
    \            current = \"\";\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpf0kk9i4w: /tmp/tmpf0kk9i4w.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // split by '.', '?', '!'\n    std::regex\
    \ regex(\"[!.?]\");\n    std::sregex_token_iterator\n        first{S.begin(),\
    \ S.end(), regex, -1},\n        last;\n    std::vector<std::string> splitted_string(first,\
    \ last);\n    // count I\n    std::string str = \"I\";\n    long count = 0;\n\
    \    for (int i = 0; i < splitted_string.size(); i++) {\n        // std::cout\
    \ << splitted_string[i] << '\\n';\n        if (splitted_string[i].find(str) ==\
    \ 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpg004ezlp: /tmp/tmpg004ezlp.cpp:32: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::string temp =\
    \ \"\";\n    int i = 0;\n    while(i<=S.length()){\n        if(S[i]!='.'&&S[i]!='?'&&S[i]!='!'){\n\
    \            temp+=S[i];\n        }\n        else{\n            std::stringstream\
    \ ss(temp);\n            std::vector<std::string> vec;\n            std::string\
    \ word;\n            while(ss>>word){\n                vec.push_back(word);\n\
    \            }\n            if(vec[0]==\"I\"){\n                boredoms++;\n\
    \            }\n            temp = \"\";\n        }\n        i++;\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::istringstream\
    \ ss(S);\n    std::string word;\n    while (ss >> word) {\n        if (word ==\
    \ \"I\")\n            boredoms++;\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmppedci8s8: /tmp/tmppedci8s8.cpp:28: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::istringstream\
    \ iss(S);\n    std::string s;\n    while (std::getline(iss, s, '.')) {\n     \
    \   if (s.substr(0, 2) == \"I \") {\n            boredoms++;\n        }\n    }\n\
    \    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpoy3z3srn: /tmp/tmpoy3z3srn.cpp:28: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  return std::count(S.begin(), S.end(), 'I');\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmprkyrzycn: /tmp/tmprkyrzycn.cpp:17: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::vector<std::string> strs;\n    std::stringstream\
    \ ss(S);\n    std::string temp;\n    long count = 0;\n    while(getline(ss, temp,\
    \ '.')) {\n        strs.push_back(temp);\n    }\n    for(auto s : strs) {\n  \
    \      if(s.substr(0, 2) == \"I \") {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpndm4xrjz: /tmp/tmpndm4xrjz.cpp:32: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n// Write your code here\n    long ans = 0;\n \
    \   long start_pos = 0;\n    while(start_pos<S.length()){\n        long i = start_pos;\n\
    \        while(i<S.length() && S[i]!='.' && S[i]!='?' && S[i]!='!'){\n       \
    \     i++;\n        }\n        std::string first_word = S.substr(start_pos,i-start_pos);\n\
    \        if(first_word==\"I\"){\n            ans++;\n        }\n        if(i==S.length()){\n\
    \            break;\n        }\n        start_pos = i+1;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpl1zg9qhd: /tmp/tmpl1zg9qhd.cpp:35: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Your code goes here\n  long res = 0;\n  std::vector<std::string>\
    \ v;\n  std::string temp = \"\";\n  for(long i = 0; i < S.length(); i++){\n  \
    \  if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n      v.push_back(temp);\n\
    \      temp = \"\";\n    }\n    else\n      temp += S[i];\n  }\n  for(long i =\
    \ 0; i < v.size(); i++){\n    if(v[i].substr(0,2) == \"I \")\n      res++;\n \
    \ }\n  return res;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpj6agn2c2: /tmp/tmpj6agn2c2.cpp:36: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here.\n    std::vector<std::string>\
    \ answer;\n    std::string word;\n    std::stringstream s(S);\n    int count =\
    \ 0;\n    while(s >> word){\n        answer.push_back(word);\n    }\n    for(int\
    \ i = 0; i < answer.size(); i++){\n        if(answer[i] == \"I\"){\n         \
    \   count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpaxc9zx4q: /tmp/tmpaxc9zx4q.cpp:34: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // TODO: implement this function\n    return\
    \ count(S.begin(), S.end(), 'I');\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpri9wulwe: /tmp/tmpri9wulwe.cpp:18: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int boredoms=0;\n  std::string my_string;\n\
    \  std::istringstream iss(S);\n  while(getline(iss,my_string,' '))\n  {\n    if(my_string[0]=='I')\n\
    \    {\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmptl5whov0: /tmp/tmptl5whov0.cpp:27: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int count = 0;\n    std::istringstream iss(S);\n\
    \    std::string word;\n    std::vector<std::string> words;\n    while (iss >>\
    \ word) {\n        if (word.length() > 0)\n            words.push_back(word);\n\
    \    }\n    for (std::vector<std::string>::iterator it = words.begin(); it !=\
    \ words.end(); ++it) {\n        if (*it == \"I\")\n            count++;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3kt7mgt4: /tmp/tmp3kt7mgt4.cpp:33: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::stringstream ss(S);\n  std::string item;\n\
    \  long line_count = 0;\n  while (std::getline(ss, item, '.')) {\n    if (item.size()\
    \ > 1 && item[0] == 'I') {\n      line_count++;\n    }\n  }\n  return line_count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpaquvivgl: /tmp/tmpaquvivgl.cpp:25: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int len = S.length();\n    int i, bored =\
    \ 0;\n    for(i = 0; i < len; ++i) {\n        if(S[i] == 'I')\n            if(S[i+1]\
    \ == ' ')\n                bored++;\n    }\n    return bored;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp5sgnszt4: /tmp/tmp5sgnszt4.cpp:28: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    bool first_word_cap = false;\n    long count\
    \ = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(i == 0) {\n    \
    \        first_word_cap = (S[i] >= 'A' && S[i] <= 'Z');\n        }\n        else\
    \ if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            if(first_word_cap)\n\
    \                count++;\n            i++;\n            first_word_cap = (S[i]\
    \ >= 'A' && S[i] <= 'Z');\n        }\n        else if(S[i] == ' ') {\n       \
    \     first_word_cap = (S[i+1] >= 'A' && S[i+1] <= 'Z');\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmptm7x2lgb: /tmp/tmptm7x2lgb.cpp:34: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // your code here\n    // return a long value\n\
    \    long count = 0;\n    std::string str = \"\";\n    for(int i = 0; i < S.length();\
    \ i++){\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n            if(str[0]\
    \ == 'I'){\n                count++;\n            }\n            str = \"\";\n\
    \        }\n        else if(S[i] == ' '){\n            continue;\n        }\n\
    \        else{\n            str += S[i];\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8x04il1h: /tmp/tmp8x04il1h.cpp:35: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // Your code here\n    std::stringstream ss(S);\n\
    \    std::string word;\n    long boredoms = 0;\n    std::getline(ss, word, '.');\n\
    \    for (int i = 0; i < word.length(); i++) {\n        if (word[i] == '?' ||\
    \ word[i] == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvhj9ex7g: /tmp/tmpvhj9ex7g.cpp:27: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count=0;\n    std::string s;\n    std::stringstream\
    \ sst(S);\n    std::vector<std::string> v;\n    while(std::getline(sst,s,'.'))\n\
    \        v.push_back(s);\n    for(auto s:v)\n    {\n        std::stringstream\
    \ ss(s);\n        std::string s2;\n        std::vector<std::string> v2;\n    \
    \    while(std::getline(ss,s2,' '))\n            v2.push_back(s2);\n        if(v2[0]==\"\
    I\")\n            count++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp35_gqd23: /tmp/tmp35_gqd23.cpp:36: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long c = 0;\n    bool l = false;\n    for(int\
    \ i = 0; i < S.length(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!') {\n            l = false;\n        }\n        if(S[i] == 'I' && !l)\
    \ {\n            c++;\n            l = true;\n        }\n    }\n    return c;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgi4nqd01: /tmp/tmpgi4nqd01.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // your code here\n    int boredoms = 0;\n\
    \    std::istringstream sentence(S);\n    std::string word;\n    while (sentence\
    \ >> word) {\n        if (word == \"I\")\n            boredoms++;\n    }\n   \
    \ return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpygrnaplu: /tmp/tmpygrnaplu.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count = 0;\n    if(S[0] == 'I'){\n  \
    \      count += 1;\n    }\n    for(int i = 0; i < S.length(); i++){\n        if(S[i]\
    \ == 'I' && (S[i+1] == '.' || S[i+1] == '?' || S[i+1] == '!')){\n            count\
    \ += 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp4qx8h6k0: /tmp/tmp4qx8h6k0.cpp:26: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    int boredoms = 0;\n    std::stringstream ss(S);\n\
    \    std::string word;\n    while (std::getline(ss, word, '.')) {\n        if\
    \ (word.find(\"I\") == 0)\n            boredoms++;\n    }\n    return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpirywr3ys: /tmp/tmpirywr3ys.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::transform(S.begin(), S.end(), S.begin(),\
    \ ::tolower);\n    std::vector<std::string> v;\n    std::stringstream ss(S);\n\
    \    std::string temp;\n    long count=0;\n    while(getline(ss, temp, '.')) {\n\
    \        v.push_back(temp);\n    }\n    for(long i=0; i<v.size(); i++) {\n   \
    \     std::vector<std::string> v1;\n        std::stringstream ss1(v[i]);\n   \
    \     std::string temp1;\n        while(getline(ss1, temp1, ' ')) {\n        \
    \    v1.push_back(temp1);\n        }\n        if(v1[0] == \"i\") {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpeel4_x09: /tmp/tmpeel4_x09.cpp:39: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long total = 0;\n    bool bored = false;\n\
    \    for (size_t i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n   \
    \         bored = true;\n        }\n        if (S[i] == '.' || S[i] == '?' ||\
    \ S[i] == '!') {\n            if (bored) {\n                total++;\n       \
    \     }\n            bored = false;\n        }\n    }\n    return total;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbl_k9e54: /tmp/tmpbl_k9e54.cpp:30: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  // Write your code here\n  long result = 0;\n\
    \  std::string word = \"\";\n  for (int i = 0; i < S.length(); i++) {\n    if\
    \ (S[i] == ' ') {\n      if (word == \"I\") {\n        result++;\n      }\n  \
    \    word = \"\";\n    } else if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n\
    \      if (word == \"I\") {\n        result++;\n      }\n      word = \"\";\n\
    \    } else {\n      word += S[i];\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0fseh7n7: /tmp/tmp0fseh7n7.cpp:39: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    long count =\
    \ 0;\n    std::string word;\n    while (ss >> word) {\n        if (word == \"\
    I\") {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8di7uf1h: /tmp/tmp8di7uf1h.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count=0;\n    long n=S.length();\n  \
    \  long i=0;\n    while(i<n)\n    {\n        while(i<n && S[i]!='I')\n       \
    \ {\n            i++;\n        }\n        i++;\n        if(i<n && S[i]==' ')\n\
    \        {\n            count++;\n        }\n        while(i<n && S[i]!='.' &&\
    \ S[i]!='?' && S[i]!='!')\n        {\n            i++;\n        }\n        i++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpgn3awxti: /tmp/tmpgn3awxti.cpp:41: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // your code here...\n    std::stringstream\
    \ stream(S);\n    std::string sentence;\n    int count = 0;\n    while(std::getline(stream,\
    \ sentence, '.')) {\n        std::string token;\n        std::stringstream check_first_word(sentence);\n\
    \        std::getline(check_first_word, token, ' ');\n        if(token == \"I\"\
    ) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp3g9bbrhk: /tmp/tmp3g9bbrhk.cpp:32: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tstd::stringstream ss(S);\n\tstd::string temp;\n\
    \tlong long int flag = 0;\n\tlong long int count = 0;\n\twhile (ss >> temp) {\n\
    \t\tif (temp == \"I\") {\n\t\t\tflag = 1;\n\t\t}\n\t\tif (temp == \".\" || temp\
    \ == \"?\" || temp == \"!\") {\n\t\t\tif (flag == 1) {\n\t\t\t\tcount += 1;\n\t\
    \t\t}\n\t\t\tflag = 0;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnwpiayy5: /tmp/tmpnwpiayy5.cpp:35: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tint bored = 0;\n\tstd::stringstream ss(S);\n\
    \tstd::string temp;\n\twhile (ss >> temp) {\n\t\tif (temp == \"I\") {\n\t\t\t\
    bored++;\n\t\t}\n\t}\n\treturn bored;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpzvdj50iz: /tmp/tmpzvdj50iz.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::regex r(R\"(^I\\b)\");\n  return std::distance(std::sregex_iterator(S.begin(),\
    \ S.end(), r),\n                       std::sregex_iterator());\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp7_4kylvu: /tmp/tmp7_4kylvu.cpp:22: int main(): Assertion `candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long ans=0;\n    bool bored=false;\n    for(long\
    \ i=0;i<S.length();i++){\n        if(bored){\n            if(S[i]=='.' || S[i]=='?'\
    \ || S[i]=='!'){\n                bored=false;\n            }\n        }else{\n\
    \            if(S[i]=='I'){\n                bored=true;\n                ans++;\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpey_t_0i_: /tmp/tmpey_t_0i_.cpp:31: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  int c = 0;\n  std::vector<std::string> words;\n\
    \  std::istringstream iss(S);\n  for (std::string S; iss >> S;)\n      words.push_back(S);\n\
    \  for (int i = 0; i < words.size(); i++) {\n    if (words[i] == \"I\") {\n  \
    \    c++;\n    }\n  }\n  return c;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpnroih3ff: /tmp/tmpnroih3ff.cpp:31: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream ss(S);\n    long num = 0;\n\
    \    std::string word;\n    while (ss >> word) {\n        if (word == \"I\") {\n\
    \            num++;\n        }\n    }\n    return num;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpt7lp4qhk: /tmp/tmpt7lp4qhk.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    // split the string by ' '\n    // count the\
    \ number of words starting with 'I'\n    long count = 0;\n    std::istringstream\
    \ ss(S);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        //std::cout << token << std::endl;\n        if (token[0] == 'I') {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8p5pr80q: /tmp/tmp8p5pr80q.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long n = S.length();\n    long count = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        if (S[i] == 'I')\n            count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpbmcdyhcx: /tmp/tmpbmcdyhcx.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::stringstream sstream(S);\n    long count=0;\n\
    \    std::string word;\n    while(sstream >> word)\n    {\n        if(word==\"\
    I\")\n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp6jqsvvpa: /tmp/tmp6jqsvvpa.cpp:31: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  long ret = 0;\n  char prev = '0';\n  for (char&\
    \ c : S) {\n    if (c == 'I' && prev == ' ') {\n      ret++;\n    }\n    prev\
    \ = c;\n  }\n  return ret;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpejutj1lk: /tmp/tmpejutj1lk.cpp:29: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    std::regex reg_exp(\"I.+\");\n    std::smatch\
    \ matches;\n    long count = 0;\n    while (std::regex_search(S, matches, reg_exp))\
    \ {\n        count++;\n        S = matches.suffix().str();\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp8ulyx1kb: /tmp/tmp8ulyx1kb.cpp:24: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    int i = 0;\n    while\
    \ (i < S.length()) {\n        if (S[i] == 'I') {\n            while (i < S.length()\
    \ && (S[i] != '!' && S[i] != '.' && S[i] != '?')) {\n                i++;\n  \
    \          }\n            boredoms++;\n        }\n        i++;\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp0om9o5cu: /tmp/tmp0om9o5cu.cpp:28: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong count = 0;\n\tchar *str=new char[S.length()+1];\n\
    \tstrcpy(str,S.c_str());\n\tchar *tok = strtok(str, \" .\");\n\twhile (tok !=\
    \ NULL) {\n\t\tstd::string tokStr(tok);\n\t\tif (tokStr.compare(\"I\") == 0)\n\
    \t\t\tcount++;\n\t\ttok = strtok(NULL, \" .\");\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpirx99zn6: /tmp/tmpirx99zn6.cpp:31: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong count = 0;\n\tsize_t pos = S.find(\".\"\
    );\n\tif (pos != std::string::npos) {\n\t\tsize_t pos1 = S.find(\"I\");\n\t\t\
    if (pos1 != std::string::npos && pos1 < pos) {\n\t\t\tcount = 1;\n\t\t}\n\t\t\
    size_t pos2 = S.find(\"?\");\n\t\tif (pos2 != std::string::npos && pos2 < pos)\
    \ {\n\t\t\tcount = 1;\n\t\t}\n\t\tsize_t pos3 = S.find(\"!\");\n\t\tif (pos3 !=\
    \ std::string::npos && pos3 < pos) {\n\t\t\tcount = 1;\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpozlk6_hl: /tmp/tmpozlk6_hl.cpp:34: int main(): Assertion `candidate((\"\
    I love It !\")) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n  std::istringstream is(S);\n  std::string word;\n\
    \  std::vector<std::string> Sentence;\n  while (is >> word) {\n    Sentence.push_back(word);\n\
    \  }\n  int bored = 0;\n  for (int i = 0; i < Sentence.size(); i++) {\n    if\
    \ (Sentence[i] == \"I\") {\n      bored++;\n    }\n  }\n  return bored;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpwmdb_zah: /tmp/tmpwmdb_zah.cpp:33: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n\tlong count = 0;\n\tfor (int i = 0; i < S.length();\
    \ i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmpvpd5m_pl: /tmp/tmpvpd5m_pl.cpp:23: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    bool find_I = false;\n    long cnt = 0;\n\
    \    std::string word;\n    std::stringstream ss(S);\n    while (ss >> word) {\n\
    \        if (word == \"I\") {\n            cnt++;\n        }\n    }\n    return\
    \ cnt;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmphqbdnble: /tmp/tmphqbdnble.cpp:30: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long count{0};\n    std::string str=\"\";\n\
    \    std::stringstream ss(S);\n    while(ss>>str){\n        if(str==\"I\") count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: ''
  stderr: "tmp9y8pa9h3: /tmp/tmp9y8pa9h3.cpp:27: int main(): Assertion `candidate((\"\
    You and I are going for a walk\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\n\
    long is_bored(std::string S) {\n    long boredoms = 0;\n    std::istringstream\
    \ iss(S);\n    std::string token;\n    std::cout << S << std::endl;\n    while\
    \ (std::getline(iss, token, '.')) {\n        if (token[0] == 'I') {\n        \
    \    boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main() {\n  \
    \  auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  stdout: "Hello world\nIs the sky blue?\n"
  stderr: "tmphu_5zmhk: /tmp/tmphu_5zmhk.cpp:26: int main(): Assertion `candidate((\"\
    Is the sky blue?\")) == (0)' failed.\n"
  exit_code: -6
  status: Exception
