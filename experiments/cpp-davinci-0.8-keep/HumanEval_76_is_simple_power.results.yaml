name: HumanEval_76_is_simple_power
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  int\
    \ result = 0;\n  while(x != 1) {\n    if(x % n != 0) {\n      return false;\n\
    \    }\n    result = x / n;\n    x = result;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \ double res = pow(n, 1.0/log(x));\n   return res == (int)res;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsci5aa9k: /tmp/tmpsci5aa9k.cpp:19: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    long tmp = n;\n\tlong a = 1;\n\twhile (x >= a && tmp > 1) {\n\t\ta *= tmp;\n\t\
    \tif (a == x)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n   \
    \ auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpi7sn2y7d: /tmp/tmpi7sn2y7d.cpp:33: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  long\
    \ a = n;\n  while (a < x) {\n    a *= n;\n  }\n  return a == x;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1p0mpcda: /tmp/tmp1p0mpcda.cpp:31: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \t\
    int i=1;\n  \tlong long t=pow(n,i);\n  \twhile(t<=x){\n    \t\tif(t==x)\n    \
    \  \t\t\treturn true;\n    \t\tt=pow(n,++i);\n  \t}\n  \treturn false;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpv4zj8a94: /tmp/tmpv4zj8a94.cpp:34: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (pow(n, (int)log2(x)) == x) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4rdlduba: /tmp/tmp4rdlduba.cpp:24: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Write your code here\n    if(x==1)\n        return true;\n    long k = n;\n\
    \    for(int i=1; i<x; i++)\n    {\n        k = k*n;\n        if(k==x)\n     \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  double\
    \ d = x;\n  int c = 0;\n  while(d > 1) {\n    d = d / n;\n    c++;\n  }\n  if(d\
    \ == 1) {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1 && n == 1) {\n    return true;\n  }\n  if (x < n) {\n    return false;\n\
    \  }\n  if (x % n != 0) {\n    return false;\n  }\n  return is_simple_power(x\
    \ / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3ynsc2g7: /tmp/tmp3ynsc2g7.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    if(pow(n,(long long int) floor(log(x)/log(n))) == x){\n\t\treturn true;\n\t}\n\
    \treturn false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // return true if x is simple power of n\n    if(x==1)\n        return true;\n\
    \    else if(n==1)\n        return false;\n    else if(x<1 || n<1)\n        return\
    \ false;\n    else if(n>x)\n        return false;\n    else if(pow(n,round(log(x)/log(n)))==x)\n\
    \        return true;\n    else\n        return false;\n\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    while (x > 1) {\n        if (x % n != 0) {\n            return\
    \ false;\n        }\n        x /= n;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (n == 1) return true;\n  if (x == 1) return true;\n  while (x % n == 0) {\n\
    \    x /= n;\n  }\n  return x == 1;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  // x is a simple power of n if n**int=x\n  // std::pow(n,\
    \ int) === x\n  //\n  double power = log(x) / log(n);\n  return floor(power) ==\
    \ power;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmptye1zehd: /tmp/tmptye1zehd.cpp:31: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  double z = log(x)/log(n);\n    return z == int(z);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpzso46jid: /tmp/tmpzso46jid.cpp:27: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //x\
    \ = pow(n,ceil(log2(x)/log2(n)));\n  //printf(\"%d\\n\", x);\n  // if(x%n == 0){\n\
    \  //   return true;\n  // }\n  // return false;\n  double pow(double x, double\
    \ y);\n  int i = 0;\n  double val = log2(x)/log2(n);\n  if(ceil(val) == floor(val)){\n\
    \    i = (int)val;\n  }\n  if(val == i){\n    return true;\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwfgj40zj: /tmp/tmpwfgj40zj.cpp:41: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    while (x > 1)\
    \ {\n        if (x % n != 0) return false;\n        x /= n;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  return\
    \ x == pow(n, (int)round(log(x) / log(n)));\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    std::cout << \"Number to check is : \" << x << \" And power is : \" << n << std::endl;\n\
    \tint count{};\n\tif(x == 1)\n\t\treturn true;\n\tif(x == 0 || n == 0)\n\t\treturn\
    \ false;\n\twhile(x) {\n\t\tif(x%n == 0) {\n\t\t\tx /= n;\n\t\t\tcount++;\n\t\t\
    }\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: "Number to check is : 16 And power is : 2\n"
  stderr: "tmp_4hxfr7y: /tmp/tmp_4hxfr7y.cpp:32: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code\n  return std::cbrt(x) == n;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbsfcm4nk: /tmp/tmpbsfcm4nk.cpp:19: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    double a = log(x)/log(n);\n\ta = round(a);\n\tif(x == pow(n,a))\n\t\treturn true;\n\
    \telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    for (double i = log(x) / log(n); i >= 1; i--) {\n\t\tif (pow(n, i) == x)\n\t\t\
    \treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvsvrafm3: /tmp/tmpvsvrafm3.cpp:28: int main(): Assertion `candidate((128),\
    \ (4)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  double y = log2(x)/log2(n);\n    int z = (int)y;\n    if (z == y){\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpypunlh_4: /tmp/tmpypunlh_4.cpp:31: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    if (x == 1 && n == 1) {\n\t\treturn true;\n\t}\n\tif (x == 1 && n != 1) {\n\t\t\
    return false;\n\t}\n\tint res = 0;\n\twhile (n > 1) {\n\t\tint y = log(x) / log(n);\n\
    \t\tif (y * log(n) == log(x)) {\n\t\t\treturn true;\n\t\t}\n\t\tn--;\n\t}\n\t\
    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmf_cwe_j: /tmp/tmpmf_cwe_j.cpp:38: int main(): Assertion `candidate((128),\
    \ (4)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  return\
    \ log(x) / log(n) == floor(log(x) / log(n));\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpb9pwi3af: /tmp/tmpb9pwi3af.cpp:26: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    // your code goes here\n\t// you should use log function\n\t// n**int=x\n\t//\
    \ int=log_n(x)\n\t// int should be an integer\n\treturn ( log(x)/log(n) == floor(log(x)/log(n))\
    \ );\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyk0x935l: /tmp/tmpyk0x935l.cpp:31: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  return\
    \ (x == 1 || (x > 1 && x == n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplehdgogx.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmplehdgogx.cpp:14:1029: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n   14 |   return (x == 1 || (x > 1 && x == n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n\
    \      |                     ~                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                              "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    long k = n;\n\
    \    while (k < x) {\n        k *= n;\n    }\n    return k == x;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (n == 1 && x == 1) {\n    return true;\n  }\n  if (n == 1 && x != 1) {\n   \
    \ return false;\n  }\n  long exponent = 2;\n  long result = n * n;\n  while (result\
    \ <= x) {\n    if (result == x) {\n      return true;\n    }\n    result *= n;\n\
    \    exponent++;\n  }\n  return false;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_iqpa6gu: /tmp/tmp_iqpa6gu.cpp:42: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  for (int i = 0; i < 31; i++) {\n        long power = pow(n, i);\n        if\
    \ (x == power)\n            return true;\n        if (power > x)\n           \
    \ return false;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  double temp = log10(x) / log10(n);\n    return (ceil(temp) == floor(temp));\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgzynokl9: /tmp/tmpgzynokl9.cpp:27: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  int count = 0;\n    while (x % n == 0) {\n        x /= n;\n        count++;\n\
    \    }\n    return count == 1;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9capkus0: /tmp/tmp9capkus0.cpp:23: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    assert(n > 0);\n\twhile (x % n == 0)\n\t\tx /= n;\n\treturn x == 1;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return n == 1;\n  if (n == 1) return x == 1;\n  if (x <= 0 || n <=\
    \ 0) return false;\n  return (long long)pow(n, floor(log(x) / log(n))) == x;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpprc32lpa: /tmp/tmpprc32lpa.cpp:30: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    if (x == 1) return true;\n\telse {\n\t\twhile (x > 1) {\n\t\t\tif (x % n != 0)\
    \ return false;\n\t\t\tx /= n;\n\t\t}\n\t\treturn true;\n\t}\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    if (x == 1) {\n\t\treturn true;\n\t}\n\tlong power = n;\n\tif (x == n) {\n\t\t\
    return true;\n\t}\n\twhile (power < x) {\n\t\tpower *= n;\n\t\tif (power == x)\
    \ {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  return\
    \ x == pow(n, (int)log2(x) / log2(n));\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp93y76sum: /tmp/tmp93y76sum.cpp:21: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x % n != 0) return\
    \ false;\n  if (x == n) return true;\n  while (x > n) {\n    if (x % n != 0) return\
    \ false;\n    x /= n;\n  }\n  return x == n;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  return\
    \ pow(round(pow(x, 1 / (double)n)), n) == x;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmph7okhiwi: /tmp/tmph7okhiwi.cpp:21: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x < 1) {\n        return false;\n    }\n    if (x % n\
    \ != 0) {\n        return false;\n    }\n    return is_simple_power(x / n, n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // write your code here\n    float power = log(x)/log(n);\n    return floor(power)\
    \ == power;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp23q_i0xn: /tmp/tmp23q_i0xn.cpp:28: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long result = 0;\n    for (long i = 0; i < x; i++) {\n        result = pow(n,\
    \ i);\n        if (result == x) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  long\
    \ new_n = n;\n  long power = 1;\n  while (power < x) {\n    new_n *= n;\n    power\
    \ = new_n;\n  }\n  if (power == x) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  long a = x/n;\n  if(a == 1) return true;\n  else if(a<1) return\
    \ false;\n  else if(x%n == 0) return is_simple_power(a,n);\n  else return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbid4nymq: /tmp/tmpbid4nymq.cpp:28: int main(): Assertion `candidate((24),\
    \ (2)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  int\
    \ i = 0;\n  while (n > 1) {\n    n = n / x;\n    i++;\n  }\n  if (n == 1)\n  \
    \  return true;\n  else\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpacdtm2hs: /tmp/tmpacdtm2hs.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  int i = 2;\n  long power;\n  power = n;\n  while (power\
    \ < x) {\n    power *= n;\n    i++;\n  }\n  return power == x;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Write code here\n    if(n==1){\n        if(x==1)\n            return true;\n\
    \        else\n            return false;\n    }\n    while(x%n==0)\n        x=x/n;\n\
    \    if(x==1)\n        return true;\n    else\n        return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  int ans = std::ceil(std::log2(x) / std::log2(n));\n    long out = std::pow(n,\
    \ ans);\n    if (out == x)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  int i = 0;\n    while (pow(n, i) < x) {\n        i++;\n    }\n    if (pow(n,\
    \ i) == x) {\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    if (x < n) return false;\n\tlong power = n;\n\twhile (power <= x) {\n\t\tif (power\
    \ == x) return true;\n\t\tpower *= n;\n\t}\n\treturn false;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_p8jbms1: /tmp/tmp_p8jbms1.cpp:33: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n > x) {\n        return false;\n    }\n    else if (n == x) {\n      \
    \  return true;\n    }\n    else {\n        if (x % n == 0) {\n            return\
    \ is_simple_power(x / n, n);\n        }\n        else {\n            return false;\n\
    \        }\n    }\n}\nint main() {\n    auto candidate = is_simple_power;\n  \
    \  assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8fbeszkc: /tmp/tmp8fbeszkc.cpp:40: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    long temp = n;\n    while (temp <= x) {\n   \
    \     if (temp == x) return true;\n        temp *= n;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long base = n;\n    for (int i = 0; i < 100; i++) {\n        if (base == x)\
    \ {\n            return true;\n        }\n        base *= n;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpir3udpnc: /tmp/tmpir3udpnc.cpp:34: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x==1)\n  {\n    return true;\n  }\n  if (x<1 || n<1)\n  {\n    return false;\n\
    \  }\n  long temp=n;\n  while (temp<x)\n  {\n    temp*=n;\n  }\n  if (temp==x)\n\
    \  {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  double\
    \ ans = log(x) / log(n);\n  double res = (double)round(ans);\n  return ans ==\
    \ res;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4g99x4hj: /tmp/tmp4g99x4hj.cpp:28: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  for (long i = 2; i < x; i++) {\n        int count = 0;\n        while (x %\
    \ i == 0) {\n            x /= i;\n            count++;\n        }\n        if\
    \ (n == i && count == 1)\n            return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2_o0pdwi: /tmp/tmp2_o0pdwi.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    // TODO: Implementation\n\t// 1. find the root (x, n) of x\n\t// 2. check if the\
    \ root (x, n) is an integer or not\n\t// 3. if the root is integer => return true\n\
    \t// 4. else return false\n\tfloat root;\n\troot = (float)pow(x, 1.0 / n);\n\t\
    if (root == (int)root)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmputztuxku: /tmp/tmputztuxku.cpp:31: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // your code here\n    if(x==1)\n        return true;\n    if(x==n)\n     \
    \   return true;\n    double lg=log(x)/log(n);\n    if(floor(lg)==ceil(lg))\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    while (x > 1) {\n        if (x % n != 0) return\
    \ false;\n        x /= n;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (n == 1) {\n    return x == 1;\n  }\n  long a = n;\n  while (a <= x) {\n   \
    \ if (a == x) {\n      return true;\n    }\n    a *= n;\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp61v_vnu0: /tmp/tmp61v_vnu0.cpp:37: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  double\
    \ result = log(x) / log(n);\n  if(result == floor(result)) {\n    return true;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_5dvqua_: /tmp/tmp_5dvqua_.cpp:30: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    if(x==1) return true;\n    if(x==n) return true;\n    long a=n,p=1;\n    while(a<=x)\n\
    \    {\n        a*=n;\n        p++;\n    }\n    if(a==x) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3ug8kycn: /tmp/tmp3ug8kycn.cpp:27: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x < 0 || n < 0) return false;\n    if (x == 1) return true;\n    if (n\
    \ == 1) return false;\n    double tmp = std::log(x) / std::log(n);\n    if (tmp\
    \ == (int)tmp) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x==1) return true;\n  if (n==1) return false;\n  long cur=n;\n  while (cur<x)\
    \ {\n    cur*=n;\n  }\n  return cur==x;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  int count = 0;\n  if (x == 1)\n    return true;\n  for (int\
    \ i = 1; i < x; i++) {\n    for (int j = 1; j < x; j++) {\n      if (pow(n, i)\
    \ == pow(j, x)) {\n        if (count == 0)\n          count++;\n        else\n\
    \          return false;\n      }\n    }\n  }\n  if (count == 1)\n    return true;\n\
    \  else\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpkmsrd7l_: /tmp/tmpkmsrd7l_.cpp:35: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  bool\
    \ result = false;\n  long power = 1;\n  while (power < x) {\n    power *= n;\n\
    \  }\n  if (power == x) {\n    result = true;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1 && n == 1) return true;\n    if (x == 1 && n != 1) return false;\n\
    \    if (x != 1 && n == 1) return false;\n    if (n == 0) return false;\n    if\
    \ (x == 0) return false;\n    if (x % n != 0) return false;\n    if (n == x) return\
    \ true;\n    double x_f = (double)x;\n    double n_f = (double)n;\n    int i =\
    \ 1;\n    for (i = 1; i < 100000; i++) {\n        n_f = n_f * n_f;\n        if\
    \ (n_f > x_f) {\n            return false;\n        }\n        if (n_f == x_f)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqudipwqq: /tmp/tmpqudipwqq.cpp:46: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x < 0 || n <= 0) return false;\n  while (x > 1) {\n    if (x % n != 0) return\
    \ false;\n    x /= n;\n  }\n  return x == 1;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  double expo = log(x) / log(n);\n    return (expo == round(expo));\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4irjla8l: /tmp/tmp4irjla8l.cpp:27: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    long result = 1;\n    while\
    \ (result < x) {\n        result *= n;\n    }\n    return result == x;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  long\
    \ p = n;\n  while (p < x) p *= n;\n  return p == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpkb3frayv: /tmp/tmpkb3frayv.cpp:29: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    } else if (x == 0 || n == 0) {\n \
    \       return false;\n    } else {\n        long p = n;\n        while (p < x)\
    \ {\n            p *= n;\n        }\n        return p == x;\n    }\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    double y = log(x) / log(n);\n\
    \    double z = y - (int)y;\n    return z == 0.0;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1) {\n        return x == 1;\n    }\n    if (x == 1) {\n        return\
    \ false;\n    }\n    if (x % n != 0) {\n        return false;\n    }\n    while\
    \ (x > 1) {\n        if (x % n != 0) {\n            return false;\n        }\n\
    \        x /= n;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpv_r7qa58: /tmp/tmpv_r7qa58.cpp:42: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  double\
    \ s = sqrt(x);\n  return fmod(s, 1) == 0 && fmod(log(x) / log(n), 1) == 0;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9umhpxaz: /tmp/tmp9umhpxaz.cpp:27: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  long\
    \ m = n;\n  if (x == 1) {\n    return true;\n  }\n  while (m < x) {\n    m *=\
    \ n;\n  }\n  if (m == x) {\n    return true;\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  return\
    \ fmod(log10(x) / log10(n), 1) == 0;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpti54kxax: /tmp/tmpti54kxax.cpp:26: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x==1) return true;\n  int i=1;\n  while (pow(n,i)<=x) {\n    if (pow(n,i)==x)\
    \ return true;\n    i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // your code here\n    std::cout <<\"is_simple_power\"<<std::endl;\n    double\
    \ tmp = pow(x,1.0/n);\n    std::cout << tmp << std::endl;\n    if(int(tmp) ==\
    \ tmp)\n        return true;\n    else\n        return false;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: "is_simple_power\n4\nis_simple_power\n2.10014\nis_simple_power\n2\nis_simple_power\n\
    2.08008\n"
  stderr: "tmpir_lhfkv: /tmp/tmpir_lhfkv.cpp:28: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    return x > 0 && pow(n, floor(log(x)\
    \ / log(n))) == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1 && n == 1) return true;\n  if (x < 1 || n < 1) return false;\n  double\
    \ logN = log(n);\n  double logX = log(x);\n  double res = logX / logN;\n  return\
    \ (res == (int)res);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  float\
    \ result = log(x) / log(n);\n  float rounded = roundf(result * 100) / 100;\n \
    \ return result == rounded;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqmlfcyld: /tmp/tmpqmlfcyld.cpp:26: int main(): Assertion `candidate((128),\
    \ (4)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  int\
    \ power = log(x) / log(n);\n  return pow(n, power) == x;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(n==0 || x==0) return false;\n  if(x==1) return true;\n\
    \  long a=1;\n  while(a<x){\n    a*=n;\n  }\n  return a==x;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    if(x<=0){\n\t\treturn false;\n\t}\n\tdouble counter=0;\n\tdouble checker=0;\n\t\
    while(checker<=x){\n\t\tif(checker==x){\n\t\t\treturn true;\n\t\t}\n\t\tchecker=pow(n,counter);\n\
    \t\tcounter++;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (n == 1) return x == 1;\n  long power = 1;\n  for (int i = 0; i < 32; i++) {\n\
    \    power *= n;\n    if (power == x) return true;\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8irt8n66: /tmp/tmp8irt8n66.cpp:33: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x==1) return 1;\n    if (n==1) return 0;\n    long x_new=x;\n    while\
    \ (x_new>n) {\n        x_new=x_new/n;\n    }\n    if (x_new==n) return 1;\n  \
    \  return 0;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 0) return true;\n    if (x == 1 && n == 1) return true;\n    if (x\
    \ == n && n != 1) return true;\n    if (x == 1 && n == 0) return false;\n    if\
    \ (x < n || n == 0) return false;\n    if (n == 1) return true;\n    long result\
    \ = 1;\n    for (long i = 0; i < 100; i++) {\n        result *= n;\n        if\
    \ (result == x) return true;\n        if (result > x) return false;\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n  \
    \  assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5numfb0a: /tmp/tmp5numfb0a.cpp:39: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (n == 1) {\n    return x == 1;\n  }\n  double y = log(x) / log(n);\n  return\
    \ (double)(int)y == y;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x==1 && n==1)\n        return true;\n    if (x<=1 || n<=1)\n        return\
    \ false;\n    double p = log(x)/log(n);\n    if (p-floor(p)==0)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp90lm7w81: /tmp/tmp90lm7w81.cpp:34: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    long exp = 1;\n    while (pow(n, exp) < x)\n\
    \        exp++;\n    return (pow(n, exp) == x);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    // will hold the power\n\tint power = 1;\n\t// hold the result of the power\n\t\
    int result = 1;\n\t// hold the result of power of 2 and the result of power of\
    \ 3\n\tint checkPower2 = 0;\n\tint checkPower3 = 0;\n\t// loop to get the power\
    \ and check if the number is simple power\n\twhile (true) {\n\t\t// make sure\
    \ that power do not exceed the size of long\n\t\tif (power > std::numeric_limits<long>::digits10)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\t// check if the result is less than the number\
    \ x\n\t\telse if (result < x) {\n\t\t\tresult *= n;\n\t\t\t++power;\n\t\t}\n\t\
    \t// check if the result is equal to the number x\n\t\telse if (result == x) {\n\
    \t\t\t// check if the power of 2 is equal to power\n\t\t\tif (checkPower2 == power)\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// check if the power of 3 is equal\
    \ to power\n\t\t\telse if (checkPower3 == power) {\n\t\t\t\treturn false;\n\t\t\
    \t}\n\t\t\treturn true;\n\t\t}\n\t\t// this condition is for if the result is\
    \ greater than the number x\n\t\telse {\n\t\t\t// check if the power is 2 and\
    \ the result is 4\n\t\t\tif (power == 2 && result == 4) {\n\t\t\t\tcheckPower2\
    \ = power;\n\t\t\t}\n\t\t\t// check if the power is 3 and the result is 8\n\t\t\
    \telse if (power == 3 && result == 8) {\n\t\t\t\tcheckPower3 = power;\n\t\t\t\
    }\n\t\t\treturn false;\n\t\t}\n\t}\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  long\
    \ m = 1;\n  if (n == 1 && x != 1)\n    return false;\n  while (m < x) {\n    m\
    \ *= n;\n  }\n  if (m == x)\n    return true;\n  return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long k = n;\n    while (k < x) {\n        k *= n;\n    }\n    return k == x;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpoqvt_4ta: /tmp/tmpoqvt_4ta.cpp:31: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  return\
    \ !(x > 1) || (x == n * n && is_simple_power(x / n, n));\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmprfh2z1cg: /tmp/tmprfh2z1cg.cpp:18: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1 && n == 1) return true;\n  long last_val = n;\n  for (long i = 1; i\
    \ < x; i++) {\n    last_val *= n;\n    if (last_val == x) return true;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmphy5jwmhh: /tmp/tmphy5jwmhh.cpp:33: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  int\
    \ i = 2;\n  while (x != 1) {\n    if (x % n != 0) {\n      return false;\n   \
    \ }\n    x /= n;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1) return x == 1;\n    while (x % n == 0) x /= n;\n    return x ==\
    \ 1;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 0) return false;\n  return !(x % n) && (x / n) % n == 0;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcq1fmpvp: /tmp/tmpcq1fmpvp.cpp:24: int main(): Assertion `candidate((24),\
    \ (2)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  int i = 1;\n    long a = 1;\n    while (a <= x) {\n        a = (long)pow(n,\
    \ i);\n        if (a == x)\n            return true;\n        else\n         \
    \   i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmputnl7r69: /tmp/tmputnl7r69.cpp:36: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  double root = 0;\n    bool b = false;\n    root = pow(x, 1.0 / n);\n    if\
    \ (root - floor(root) == 0) {\n        b = true;\n    }\n    return b;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1l9ee9y6: /tmp/tmp1l9ee9y6.cpp:27: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x <= 0 ||\
    \ n <= 0) return false;\n    for (int i = 2; i <= sqrt(x); i++) {\n        if\
    \ (x % i == 0) {\n            return false;\n        }\n    }\n    for (int i\
    \ = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return is_simple_power(x, n * n);\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmps0f8n7ex: /tmp/tmps0f8n7ex.cpp:31: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1 && n == 1) return true;\n    if (x != 1 && n == 1) return false;\n\
    \    if (x == 1 && n != 1) return false;\n    long power = log(x) / log(n);\n\
    \    return (pow(n, power) == x);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpv2rhy7_9: /tmp/tmpv2rhy7_9.cpp:31: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  while\
    \ (x > 1) {\n    if (x % n != 0) {\n      return false;\n    }\n    x /= n;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // write your code here\n\n    if(n == 0)\n        return false;\n\n    double\
    \ var = (double)x/n;\n    double x = 0;\n    if(modf(var, &x) == 0.0)\n      \
    \  return true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp56tzakz.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpp56tzakz.cpp:20:12: error: declaration of \u2018double\
    \ x\u2019 shadows a parameter\n   20 |     double x = 0;\n      |            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1 && n != 1) return false;\n    if (x == n) return true;\n    while\
    \ (n < x) {\n        n *= n;\n    }\n    return n == x;\n}\nint main() {\n   \
    \ auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgrltscbj: /tmp/tmpgrltscbj.cpp:32: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  float\
    \ a = log(x)/log(n);\n  return a==(int)a;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjrldgno9: /tmp/tmpjrldgno9.cpp:27: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  int count = 0;\n  for (int i = 1; i <= x; i++) {\n    if (pow(n,\
    \ i) == x) {\n      count++;\n    }\n  }\n  if (count == 1) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpb5g1hui5: /tmp/tmpb5g1hui5.cpp:38: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  long\
    \ power = 0;\n  if (x == 1) {\n    return true;\n  }\n  for (; pow(n, power) <=\
    \ x; ++power) {\n    if (pow(n, power) == x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  double\
    \ result = log(x) / log(n);\n  return result == (int)result;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmptgriuxza: /tmp/tmptgriuxza.cpp:27: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ I think that you should use something like std::pow but without actually\n \
    \ // importing the whole namespace (like you did, but with <cmath>). I bet that\n\
    \  // it makes the binary file much smaller. Also, I think that you should use\n\
    \  // something other than <bits/stdc++.h>\n  return (std::pow(n, 1) == x) ||\
    \ (std::pow(n, 2) == x) ||\n         (std::pow(n, 3) == x) || (std::pow(n, 4)\
    \ == x) ||\n         (std::pow(n, 5) == x) || (std::pow(n, 6) == x) ||\n     \
    \    (std::pow(n, 7) == x) || (std::pow(n, 8) == x) ||\n         (std::pow(n,\
    \ 9) == x) || (std::pow(n, 10) == x);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpuct00dfy: /tmp/tmpuct00dfy.cpp:35: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  int\
    \ i = 0;\n  long k = 0;\n  bool flag = true;\n  do {\n    if (k == x) {\n    \
    \  flag = true;\n      break;\n    } else {\n      k = pow(n, i);\n      i++;\n\
    \      flag = false;\n    }\n  } while (k < x);\n  return flag;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpw36w0t6p: /tmp/tmpw36w0t6p.cpp:31: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  bool found = false;\n    long power = 1;\n    while(n<=x) {\n        if(power==x)\
    \ {\n            found = true;\n            break;\n        }\n        power *=\
    \ n;\n    }\n    return found;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ long x_r = x;\n  // long n_r = n;\n  // long i = 0;\n  // long a = 0;\n  //\
    \ long b = 0;\n  // long c = 0;\n  // long d = 0;\n  // std::cout << \"X: \" <<\
    \ x << \" N: \" << n << std::endl;\n  // while(x_r > 1) {\n  //   x_r = x_r /\
    \ n_r;\n  //   std::cout << \"X_R: \" << x_r << std::endl;\n  //   std::cout <<\
    \ \"N_R: \" << n_r << std::endl;\n  //   i++;\n  //   if(x_r % n_r != 0) {\n \
    \ //     return false;\n  //   }\n  // }\n  // a = x_r;\n  // b = i;\n  // c =\
    \ n_r;\n  // d = x_r;\n  // std::cout << \"A: \" << a << \" B: \" << b << \" C:\
    \ \" << c << \" D: \" << d << std::endl;\n  // return pow(a, b) == c && pow(c,\
    \ d) == x;\n  return pow(x, 1.0/n) == round(pow(x, 1.0/n));\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp13vobs0l: /tmp/tmp13vobs0l.cpp:44: int main(): Assertion `candidate((9),\
    \ (3)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  return\
    \ x == std::pow(n, std::round(std::log(x) / std::log(n)));\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    double result = log(x) / log(n);\n\tlong res = long(result);\n\treturn result\
    \ == res;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmppf2iasok: /tmp/tmppf2iasok.cpp:28: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // your code here\n    double result = 0;\n    bool flag = false;\n    for(int\
    \ i = 1; i < 100; i++) {\n        result = pow(n, i);\n        if(result == x)\
    \ {\n            flag = true;\n            break;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1mnamxv6: /tmp/tmp1mnamxv6.cpp:37: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  bool\
    \ flag = false;\n  int count = 0;\n  while (x % n == 0) {\n    x /= n;\n    count++;\n\
    \  }\n  if (x == 1) {\n    flag = true;\n  }\n  if (count > 1) {\n    flag = false;\n\
    \  }\n  return flag;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmperg3imer: /tmp/tmperg3imer.cpp:30: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code\n  if (x == 1 && n != 1) {\n    return false;\n  }\n  float ans =\
    \ 0;\n  for (int i = 1; i < 1000; i++) {\n    ans = pow(n, i);\n    if (ans ==\
    \ x) {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n   \
    \ auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdysxjwpp: /tmp/tmpdysxjwpp.cpp:38: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  long power=1;\n  for(int i=0; i<100; i++){\n    if(pow(n,i)==x){\n\
    \      return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // your code here\n    if(x==1){\n        return true;\n    }\n    if(x==n){\n\
    \        return true;\n    }\n    if(x%n!=0){\n        return false;\n    }\n\
    \    return is_simple_power(x/n,n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  double\
    \ x_root = std::cbrt(x);\n  return std::pow(round(x_root), 3) == x;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4n1qlszg: /tmp/tmp4n1qlszg.cpp:19: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  assert(n\
    \ > 0);\n  if (x <= 0) return false;\n  double d = log(x) / log(n);\n  double\
    \ intpart;\n  return (modf(d, &intpart) == 0.0);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpclhpyto8: /tmp/tmpclhpyto8.cpp:30: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  double\
    \ result = log(x) / log(n);\n  return floor(result) == result;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmph910z7zg: /tmp/tmph910z7zg.cpp:27: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  bool retval = false;\n    long i = 1;\n    while (i <= x) {\n        if (pow(n,\
    \ i) == x) {\n            retval = true;\n            break;\n        }\n    \
    \    i++;\n    }\n    return retval;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpo6gubn9y: /tmp/tmpo6gubn9y.cpp:36: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  double logX = std::log(x);\n    double logN = std::log(n);\n    double logRes\
    \ = logX / logN;\n    double res = std::round(logRes);\n    return (logRes ==\
    \ res);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp90_it93b: /tmp/tmp90_it93b.cpp:30: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  long\
    \ xx = x;\n  if (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return\
    \ false;\n  }\n  while (xx >= n) {\n    if (xx % n == 0) {\n      xx /= n;\n \
    \   } else {\n      return false;\n    }\n  }\n  if (xx == 1) {\n    return true;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ TODO: Write your code here\n  if(x==1 || n==1) return true;\n  if(x==0) return\
    \ false;\n  if(n==0) return false;\n  if(x==n) return true;\n  if(x<n) return\
    \ false;\n  int res=x/n;\n  if(res==1) return true;\n  return is_simple_power(res,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4ivsg_t8: /tmp/tmp4ivsg_t8.cpp:31: int main(): Assertion `candidate((24),\
    \ (2)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long i = 0;\n    while (pow(n, i) < x) {\n        i++;\n    }\n    if (pow(n,\
    \ i) == x) {\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code\n  if (n == 0) {\n    if (x == 1)\n      return true;\n    else\n\
    \      return false;\n  }\n  if (x == 0)\n    return false;\n  double i = log(x)\
    \ / log(n);\n  if (fmod(i, 1) == 0)\n    return true;\n  else\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpg0wyfeym: /tmp/tmpg0wyfeym.cpp:39: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    int power = 1;\n\twhile (power <= x) {\n\t\tif (power == x)\n\t\t\treturn true;\n\
    \t\tpower *= n;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == 0 || n == 0) {\n        return false;\n    }\n \
    \   long pow = n;\n    while (pow <= x) {\n        if (pow == x) {\n         \
    \   return true;\n        }\n        pow *= n;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  int result=pow(n,floor(log(x)/log(n)));\n    if(result==x)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  double l=1;\n    while(l<=x) {\n        l=l*n;\n        if(l==x)\n        \
    \    return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfpr_crpi: /tmp/tmpfpr_crpi.cpp:33: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long i=2;\n    if(x==1)\n        return 1;\n    while(pow(n,i)<=x)\n    {\n\
    \        if(pow(n,i)==x)\n            return 1;\n        i++;\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // your code goes here\n    int count = 0;\n    for(int i = 0;i<=x;i++){\n\
    \        if(pow(n,i) == x){\n            count++;\n        }\n    }\n    if(count\
    \ == 1){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpe75zm0_7: /tmp/tmpe75zm0_7.cpp:38: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) {\n    return true;\n  }\n  if (n == 1) {\n    return false;\n  }\n\
    \  if (x == n) {\n    return true;\n  }\n  long count = 1;\n  while (count < (long)std::ceil(x\
    \ / n)) {\n    count *= n;\n  }\n  if (count == x) {\n    return true;\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgvdhx8sa: /tmp/tmpgvdhx8sa.cpp:34: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1 && n != 1) return false;\n  // your code here\n  long m = n;\n  int\
    \ num = 0;\n  while (x > m) {\n    m *= n;\n    num++;\n  }\n  if (x == m)\n \
    \   return true;\n  else\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpppdl86t9: /tmp/tmpppdl86t9.cpp:38: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  return\
    \ x==pow(n,int(log(x)/log(n)));\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x==1 && n==1) {\n        return true;\n    } else if (x==1) {\n       \
    \ return false;\n    } else if (n==1) {\n        return false;\n    } else {\n\
    \        double d = log(x)/log(n);\n        std::cout << d << std::endl;\n   \
    \     std::cout << d - floor(d) << std::endl;\n        return d - floor(d) ==\
    \ 0;\n    }\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: "4\n0\n4.28195\n0.281953\n2\n0\n2\n0\n2\n0\n4.58496\n0.584963\n3.5\n0.5\n\
    1.38685\n0.386853\n"
  stderr: "tmppyabdzeu: /tmp/tmppyabdzeu.cpp:38: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1){\n    return true;\n  }\n  if(n==1){\n    return\
    \ false;\n  }\n  if(x%n!=0){\n    return false;\n  }\n  return is_simple_power(x/n,n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  int pow = n;\n    for (int i = 0; i < std::numeric_limits<int>::max(); i++)\
    \ {\n        if (pow == x) {\n            return true;\n        }\n        pow\
    \ *= n;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  long\
    \ tmp = n;\n  int count = 0;\n  bool ans = false;\n  if (x == 1)\n    return true;\n\
    \  while (tmp <= x) {\n    if (x % tmp == 0) {\n      count += 1;\n      tmp *=\
    \ n;\n    } else\n      break;\n  }\n  if (count == 1)\n    ans = true;\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpk76lofkh: /tmp/tmpk76lofkh.cpp:32: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 0) {\n    return false;\n  } else if (x == 1) {\n    return true;\n  }\
    \ else {\n    long total = 1;\n    for (int i = 0; i < x; i++) {\n      total\
    \ *= n;\n      if (total == x) {\n        return true;\n      }\n    }\n    return\
    \ false;\n  }\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqhegsntt: /tmp/tmpqhegsntt.cpp:18: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  double log_n = log(x) / log(n);\n    return floor(log_n) == ceil(log_n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqo67caik: /tmp/tmpqo67caik.cpp:27: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  return (x == n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgp8pqzzz: /tmp/tmpgp8pqzzz.cpp:18: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  int res = 0;\n    if (x == 1)\n        return true;\n    while (x % n == 0)\
    \ {\n        res = res + 1;\n        x = x / n;\n    }\n    if (x == 1)\n    \
    \    return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x==0) return false;\n    double y = log(x)/log(n);\n    if (y == ceil(y))\
    \ return true;\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_xmt4k19: /tmp/tmp_xmt4k19.cpp:29: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  long\
    \ target = pow(n, int(log(x) / log(n)));\n  return target == x;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ Your code here\n  long p = n;\n  while (p < x) {\n    p *= n;\n  }\n  return\
    \ p == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpt3usvled: /tmp/tmpt3usvled.cpp:32: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  int\
    \ i = 1;\n  while (std::pow(n, i) <= x) {\n    if (std::pow(n, i) == x) {\n  \
    \    return true;\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3fnob_0z: /tmp/tmp3fnob_0z.cpp:34: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ enter your code here\n  for(int i=0;i<1000;i++){\n    if(pow(n,i)==x)\n    \
    \  return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  while\
    \ (x > 1) {\n    if (x % n != 0) return false;\n    x /= n;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  for (long i = 2; i <= x; i++) {\n        long val = 1;\n        for (long j\
    \ = 1; j <= i; j++) {\n            val *= n;\n            if (val == x) {\n  \
    \              return true;\n            }\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  long\
    \ a = log(x) / log(n);\n  double b = log(x) / log(n);\n  if (a == b) {\n    return\
    \ true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpc1ng98tf: /tmp/tmpc1ng98tf.cpp:31: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n == 1) return false;\n    long n_root = n;\n    double n_root_d = n;\n\
    \    long n_powered = n;\n    while (n_powered < x) {\n        n_powered *= n_root;\n\
    \        n_root_d *= n;\n        if (n_powered < 0) return false;\n        n_root\
    \ = floor(n_root_d);\n    }\n    return n_powered == x;\n}\nint main() {\n   \
    \ auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9_1pk3rx: /tmp/tmp9_1pk3rx.cpp:36: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    int a = 0;\n    int b = 0;\n    for (int i = 1; i <= x; i++)\
    \ {\n        if (pow(n, i) > x) {\n            a = i - 1;\n            break;\n\
    \        }\n    }\n    if (pow(n, a) == x) {\n        return true;\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long s=n;\n    int t=0;\n    while(x%n==0)\n    {\n        x=x/n;\n       \
    \ t++;\n    }\n    if(x==1 && t>1)\n    {\n        return true;\n    }\n    else\n\
    \    {\n        return false;\n    }\n    \n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    if (x == 1) return true;\n\tif (n == 1) return false;\n\tdouble i = 0;\n\twhile\
    \ ((i < x) && (i > 0)) {\n\t\ti = (double)pow(n,i);\n\t\tif (i == x) return true;\n\
    \t\telse i++;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpt_23oz4d: /tmp/tmpt_23oz4d.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  int\
    \ i = 0;\n  float tmp = x;\n  while (x % n == 0) {\n    x /= n;\n    i++;\n  }\n\
    \  if (pow(n, i) == tmp) {\n    return true;\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // your code\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyr4_ht9h: /tmp/tmpyr4_ht9h.cpp:18: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // your code here\n    if(x==1) return true;\n    else if(x<n) return false;\n\
    \    else if(n==1) return false;\n    else if(x==n) return true;\n    else{\n\
    \        double log1 = log(x)/log(n);\n        double log2 = log(x)/log(n);\n\
    \        int log3 = log1;\n        if(log1==log2 && log1==log3) return true;\n\
    \        else return false;\n    }\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  int count = 0;\n  if (x % n != 0) {\n    return false;\n\
    \  }\n  long power = n;\n  while (x > 1) {\n    if (x % n != 0) {\n      return\
    \ false;\n    }\n    count++;\n    x /= n;\n  }\n  if (power == n) {\n    return\
    \ true;\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n//\
    \ Write your code here\n    if(x<=0 || n<=0)\n        return false;\n    if(x==1)\n\
    \        return true;\n    if(pow(n,floor(log2(x)/log2(n)))==x)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    if (x == 1) {\n\t\treturn true;\n\t}\n\tif (n == 1) {\n\t\treturn false;\n\t}\n\
    \tdouble x_d = (double)x;\n\tdouble n_d = (double)n;\n\tdouble d = log(x_d) /\
    \ log(n_d);\n\t//std::cout << x_d << \" \" << n_d << \" \" << d << \" \" << x_d\
    \ * n_d << std::endl;\n\treturn (d == (int)d);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ Write your code here\n  if (n == 1) {\n    return true;\n  }\n  while (x % n\
    \ == 0) {\n    x /= n;\n  }\n  return x == 1;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    else if (x == 0) {\n      \
    \  return false;\n    }\n    else if (n == 1) {\n        return false;\n    }\n\
    \    else if (n == x) {\n        return true;\n    }\n    else if (x > n && x%n\
    \ == 0) {\n        return is_simple_power(x/n, n);\n    }\n    else {\n      \
    \  return false;\n    }\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ your code here\n  if(x==1){\n    return true;\n  }else if(x%n!=0){\n    return\
    \ false;\n  }else{\n    return is_simple_power(x/n,n);\n  }\n\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long i = 1;\n    while (pow(n, i) <= x) {\n        if (pow(n, i) == x) {\n\
    \            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmppzszdwl5: /tmp/tmppzszdwl5.cpp:34: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (n==1) return false;\n    double i=0;\n    while (pow(n,i)<=x) {\n     \
    \   if (pow(n,i)==x) return true;\n        i++;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpynn4h5ry: /tmp/tmpynn4h5ry.cpp:32: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  int factor = 1;\n    if (x <= 0 || n <= 0) {\n        return false;\n    }\n\
    \    if (x == 1) {\n        return true;\n    }\n    for (int i = 0; i < x; i++)\
    \ {\n        factor *= n;\n        if (factor == x) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ Write your code here\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmptnl8hip4: /tmp/tmptnl8hip4.cpp:18: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) return true;\n    int nn = 0;\n    while (x % n == 0) {\n     \
    \   nn++;\n        x /= n;\n    }\n    if (x != 1) return false;\n    if (nn >\
    \ 1) return false;\n    return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp59f9_9wa: /tmp/tmp59f9_9wa.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  double\
    \ n_log = log(x) / log(n);\n  int n_int = n_log;\n  return (n_log - n_int == 0)\
    \ ? true : false;\n}\nint main() {\n    auto candidate = is_simple_power;\n  \
    \  assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpndykpoo0: /tmp/tmpndykpoo0.cpp:28: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 0) {\n        return false;\n    }\n    if (x == 1) {\n        return\
    \ true;\n    }\n    while (x != 1) {\n        if (x % n != 0) {\n            return\
    \ false;\n        }\n        x /= n;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Code here\n    long result = 1;\n    if (x == 1)\n        return true;\n\
    \    while (result < x) {\n        result *= n;\n        if (result == x)\n  \
    \          return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n\t\
    double a = log(x) / log(n);\n\t// std::cout << \"log(x)=\" << log(x) << std::endl;\n\
    \t// std::cout << \"log(n)=\" << log(n) << std::endl;\n\t// std::cout << \"a=\"\
    \ << a << std::endl;\n\t// assert(fabs(a - int(a)) < 1e-10);\n\treturn (fabs(a\
    \ - int(a)) < 1e-10);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmw96xexu: /tmp/tmpmw96xexu.cpp:31: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x<=0||n<=0) return false;\n    if (x==1) return true;\n    int y = (int)n;\n\
    \    if (y==1) return false;\n    while (y!=1){\n        if (y%n!=0) return false;\n\
    \        y /= n;\n    }\n    return x==y;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfsxobay2: /tmp/tmpfsxobay2.cpp:26: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x == n) return true;\n\
    \  for (long i = 2; i <= x; i++) {\n    long k = i;\n    for (long j = 2; j <=\
    \ i; j++) {\n      if (k % n == 0) k /= n;\n      else break;\n    }\n    if (k\
    \ == 1) {\n      if (i * i == x) return false;\n      if (i == x) return true;\n\
    \    }\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdnrzp6hl: /tmp/tmpdnrzp6hl.cpp:32: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  // Solution\n    if (n == 1) {\n        return true;\n    } else if (n == 0)\
    \ {\n        return false;\n    } else {\n        for (int i = 0; i < 1000; i++)\
    \ {\n            if (n == pow(x, i)) {\n                return true;\n       \
    \     }\n        }\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp__tk8vbv: /tmp/tmp__tk8vbv.cpp:30: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  while (x % n == 0 && x != 0)\n        x /= n;\n    return x == 1;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  double log_res = log10(x) / log10(n);\n    return floor(log_res) == ceil(log_res);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpymlczr3q: /tmp/tmpymlczr3q.cpp:27: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  return\
    \ pow(n, int(log(x) / log(n))) == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x==1) {\n        return true;\n    }\n    if (n==1) {\n        return false;\n\
    \    }\n    if (x%n!=0) {\n        return false;\n    }\n    for (int i=2;i<x;i++)\
    \ {\n        if (pow(n,i)==x) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1 || n == x) return false;\n  int a = ceil(sqrt(x));\n\
    \  return a*a == x && a == n;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp77xcw_rc: /tmp/tmp77xcw_rc.cpp:21: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  int\
    \ counter = 0;\n  long a = n;\n  while (x > 1) {\n    if (x % n != 0) {\n    \
    \  return false;\n    }\n    x /= n;\n    counter++;\n  }\n  if (counter == 1)\
    \ {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1oxysg57: /tmp/tmp1oxysg57.cpp:30: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ Write your code here\n  // To debug: std::cerr << \"Debug messages...\" << std::endl;\n\
    \  while(n!=1){\n    if(x%n!=0) return false;\n    x/=n;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_6xnzva4: /tmp/tmp_6xnzva4.cpp:24: int main(): Assertion `candidate((16),\
    \ (2)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    for (long i = 0; i < x; i++)\
    \ {\n        double temp = std::pow(n, i);\n        if (temp == x) {\n       \
    \     return true;\n        }\n    }\n    return false;\n}\nint main() {\n   \
    \ auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x <= 0 || n <= 0) {\n        return false;\n    }\n    double log_n = log(x)\
    \ / log(n);\n    if (log_n - (int)log_n == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8pqwxi99: /tmp/tmp8pqwxi99.cpp:33: int main(): Assertion `candidate((1),\
    \ (1)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  long\
    \ i = 1;\n  while (pow(n, i) <= x) {\n    if (pow(n, i) == x) {\n      return\
    \ true;\n    }\n    i++;\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvsyc097v: /tmp/tmpvsyc097v.cpp:34: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1 && n == 1) {\n    return true;\n  }\n  long t = n;\n  while (t <= x)\
    \ {\n    if (t == x) {\n      return true;\n    }\n    t *= n;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpc6odru22: /tmp/tmpc6odru22.cpp:37: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //\
    \ Write your code here\n  bool flag = true;\n  for (int i = 1; i <= 100; i++)\
    \ {\n    long power = 1;\n    for (int j = 1; j <= i; j++) {\n      power *= n;\n\
    \    }\n    if (power == x) {\n      return flag;\n    }\n  }\n  flag = false;\n\
    \  return flag;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpa8dht_ug: /tmp/tmpa8dht_ug.cpp:39: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return\
    \ false;\n    }\n    if (x == 0) {\n        return false;\n    }\n    long int_\
    \ = 0;\n    long temp = x;\n    while (temp >= n) {\n        temp /= n;\n    \
    \    ++int_;\n    }\n    return pow(n, int_) == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  while\
    \ (x > 1) {\n    if (x % n != 0) {\n      return false;\n    }\n    x /= n;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  if (x == 1) {\n        return true;\n    }\n    int exponent = 2;\n    long\
    \ result = n * n;\n    while (result <= x) {\n        if (result == x) {\n   \
    \         return true;\n        }\n        exponent++;\n        result = pow(n,\
    \ exponent);\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  if\
    \ (x == 1) return true;\n  if (n == 1) return false;\n  if (x % n != 0) return\
    \ false;\n  return is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  \
    \  long k = 1;\n    while (k<x) {\n        k *= n;\n    }\n    return k == x;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  //base\
    \ case\n  if(x == n) return true;\n  if(x < n) return false;\n  if(x % n == 0)\
    \ return is_simple_power(x/n, n);\n  return false;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: "tmpv0za60rb: /tmp/tmpv0za60rb.cpp:31: int main(): Assertion `candidate((1),\
    \ (12)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    // is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n// is_simple_power(8,\
    \ 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3, 1) => false\n\
    // is_simple_power(5, 3) => false\nbool is_simple_power(long x, long n) {\n  int\
    \ num_logs = log(x) / log(n);\n  return (pow(n, num_logs) == x);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
