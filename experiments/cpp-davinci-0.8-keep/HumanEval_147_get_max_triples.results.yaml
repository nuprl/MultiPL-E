language: cpp
name: HumanEval_147_get_max_triples
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 3)\n        return 0;\n    long count = 0;\n    for(long i\
    \ = 1; i < n - 1; i++) {\n        for(long j = i + 1; j < n; j++) {\n        \
    \    if((i * i - i + 1 + j * j - j + 1) % 3 == 0) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp8qo9t254: /tmp/tmp8qo9t254.cpp:28: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong sum = 0;\n\tfor (long i = 1; i <= n - 2; i++) {\n\t\tfor (long\
    \ j = i + 1; j <= n - 1; j++) {\n\t\t\tfor (long k = j + 1; k <= n; k++) {\n\t\
    \t\t\tif ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\t\t\t\t\
    \tsum++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n   \
    \ auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long ans = 0;\n    if(n >= 3)\n    {\n\
    \        ans = (n-2)*(n-1)*n/6;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp0g7_br88: /tmp/tmp0g7_br88.cpp:24: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    // Return the number of triples\n   \
    \ return -1;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpcg_0jahd: /tmp/tmpcg_0jahd.cpp:20: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\treturn n > 1 ? ((n * (n - 1) * (n - 2)) / 6) : 0;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmprazgamv2: /tmp/tmprazgamv2.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    std::vector<long> vec(n);\n    for(int i = 0;\
    \ i < n; i++) {\n        vec[i] = i * i - i + 1;\n    }\n    for(int i = 0; i\
    \ < n - 2; i++) {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int\
    \ k = j + 1; k < n; k++) {\n                if((vec[i] + vec[j] + vec[k]) % 3\
    \ == 0) {\n                    result++;\n                }\n            }\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpyebim5hv: /tmp/tmpyebim5hv.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long k = n/3;\n    if(n%3==0)\n     \
    \   return (k*(k-1))/2;\n    return k*(k+1)/2;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpp3jvbb5j: /tmp/tmpp3jvbb5j.cpp:23: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\t// Write your code here\n\t// To print results to the standard output\
    \ you can use printf()\n\t// Example: printf(\"%s\", \"Hello world!\");\n\tassert(n\
    \ > 0);\n\tif (n <= 2) return 0;\n\tlong count = 0;\n\tfor (long i = 1; i < n\
    \ - 1; i++) {\n\t\tfor (long j = i + 1; j < n; j++) {\n\t\t\tlong mod = (i * i\
    \ - i + 1 + j * j - j + 1) % 3;\n\t\t\tif (mod == 0) {\n\t\t\t\tlong k = 1;\n\t\
    \t\t\twhile (true) {\n\t\t\t\t\tlong val = k * k - k + 1;\n\t\t\t\t\tif (val >\
    \ (i * i - i + 1 + j * j - j + 1) / 3) break;\n\t\t\t\t\tif (val < (i * i - i\
    \ + 1)) {\n\t\t\t\t\t\tk++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif\
    \ (val == (i * i - i + 1 + j * j - j + 1) / 3) {\n\t\t\t\t\t\tcount++;\n\t\t\t\
    \t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n\
    int main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp9dmp5dhn: /tmp/tmp9dmp5dhn.cpp:44: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    // Write your code here\n    if(n < 3) return\
    \ 0;\n    result = (n-2) * (n-1) * n;\n    result = result/6;\n    return result;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmph9nm1x86: /tmp/tmph9nm1x86.cpp:23: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    long* countOfZero = new long[n + 1];\n    long*\
    \ countOfOne = new long[n + 1];\n    long* countOfTwo = new long[n + 1];\n   \
    \ long* sumOfCountZero = new long[n + 1];\n    long* sumOfCountOne = new long[n\
    \ + 1];\n    long* sumOfCountTwo = new long[n + 1];\n    long* sumOfCount = new\
    \ long[n + 1];\n    long* sumOfCountZeroTwo = new long[n + 1];\n    long* sumOfCountOneTwo\
    \ = new long[n + 1];\n    long* sumOfCountZeroOne = new long[n + 1];\n    long*\
    \ sumOfCountOneZero = new long[n + 1];\n    countOfZero[0] = 0;\n    countOfOne[0]\
    \ = 0;\n    countOfTwo[0] = 0;\n    sumOfCountZero[0] = 0;\n    sumOfCountOne[0]\
    \ = 0;\n    sumOfCountTwo[0] = 0;\n    sumOfCount[0] = 0;\n    sumOfCountZeroTwo[0]\
    \ = 0;\n    sumOfCountOneTwo[0] = 0;\n    sumOfCountZeroOne[0] = 0;\n    sumOfCountOneZero[0]\
    \ = 0;\n    for(long i = 1; i <= n; i++) {\n        countOfZero[i] = (i * i -\
    \ i + 1) % 3 == 0 ? 1 : 0;\n        countOfOne[i] = (i * i - i + 1) % 3 == 1 ?\
    \ 1 : 0;\n        countOfTwo[i] = (i * i - i + 1) % 3 == 2 ? 1 : 0;\n        sumOfCountZero[i]\
    \ = sumOfCountZero[i - 1] + countOfZero[i];\n        sumOfCountOne[i] = sumOfCountOne[i\
    \ - 1] + countOfOne[i];\n        sumOfCountTwo[i] = sumOfCountTwo[i - 1] + countOfTwo[i];\n\
    \        sumOfCount[i] = sumOfCount[i - 1] + countOfZero[\n}\nint main() {\n \
    \   auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n  \
    \  assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_92x8mu.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmp5_92x8mu.cpp:45:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   45 | }\n      | ^\n/tmp/tmp5_92x8mu.cpp:44:57: error: expected\
    \ \u2018]\u2019 before \u2018}\u2019 token\n   44 |         sumOfCount[i] = sumOfCount[i\
    \ - 1] + countOfZero[\n      |                                               \
    \          ^\n      |                                                        \
    \ ]\n   45 | }\n      | ~                                                    \
    \    \n/tmp/tmp5_92x8mu.cpp:46:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   46 | int main() {\n      |            ^\n\
    /tmp/tmp5_92x8mu.cpp:52:1: error: expected \u2018}\u2019 at end of input\n   52\
    \ | }\n      | ^\n/tmp/tmp5_92x8mu.cpp:13:30: note: to match this \u2018{\u2019\
    \n   13 | long get_max_triples(long n) {\n      |                            \
    \  ^\n/tmp/tmp5_92x8mu.cpp:52:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   52 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong ret = 0;\n\tlong* a = new long[n + 1];\n\tfor (long i = 1; i <=\
    \ n; i++) {\n\t\ta[i] = i * i - i + 1;\n\t}\n\tfor (long i = 1; i <= n; i++) {\n\
    \t\tfor (long j = i + 1; j <= n; j++) {\n\t\t\tfor (long k = j + 1; k <= n; k++)\
    \ {\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\t\t\tret++;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\tdelete[] a;\n\treturn ret;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long triple = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if(((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 ==\
    \ 0) {\n                    triple++;\n                }\n            }\n    \
    \    }\n    }\n    return triple;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp42203shw: /tmp/tmp42203shw.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return n*(n-1)*(n-2)/6;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp_4dkvu38: /tmp/tmp_4dkvu38.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 1)\n        return 0;\n    long sum = 0;\n    long max_triples\
    \ = 0;\n    for(long i = n - 1; i >= n / 3; i--) {\n        sum += i * i - i +\
    \ 1;\n        if(sum % 3 == 0)\n            max_triples += 1;\n    }\n    return\
    \ max_triples;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpxpe99u9x: /tmp/tmpxpe99u9x.cpp:28: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return (n - 1) * (n - 2) / 6;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp7qyb1bjs: /tmp/tmp7qyb1bjs.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long max_triples = 0;\n    // Write your code here\n    return max_triples;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpnyuda_0c: /tmp/tmpnyuda_0c.cpp:20: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long res = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            long sum = i * i - i + 1 + j * j - j +\
    \ 1;\n            if(sum % 3 != 0) continue;\n            long k = n - 1;\n  \
    \          while(k > j && sum + k * k - k + 1 > 3 * n) k--;\n            if(k\
    \ <= j) break;\n            if(sum + k * k - k + 1 == 3 * n) res++;\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpl7_rys8g: /tmp/tmpl7_rys8g.cpp:29: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return (n - 1) * (n - 2) / 2;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpd7l9bism: /tmp/tmpd7l9bism.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113643
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    std::vector<long> a;\n    for (long i = 1; i\
    \ <= n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for (long i =\
    \ 0; i < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n     \
    \       for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] +\
    \ a[k]) % 3 == 0) {\n                    result++;\n                }\n      \
    \      }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 3) {\n        return 0;\n    }\n    if(n == 3) {\n        return\
    \ 1;\n    }\n    long *arr = new long[n];\n    for(long i = 0; i < n; i++) {\n\
    \        arr[i] = i * i - i + 1;\n    }\n    long i = 0, j = 0, k = 0;\n    long\
    \ count = 0;\n    for(i = 0; i < n - 2; i++) {\n        for(j = i + 1; j < n -\
    \ 1; j++) {\n            for(k = j + 1; k < n; k++) {\n                if((arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0) {\n                    count++;\n             \
    \   }\n            }\n        }\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n  \
    \  assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmprjky83ge: /tmp/tmprjky83ge.cpp:39: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return (n-1)*(n-2)*(n-3)/6;\n}\nint main() {\n    auto candidate =\
    \ get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpn3mvzq7y: /tmp/tmpn3mvzq7y.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n >= 1);\n    std::vector<int> a(n);\n    for (int i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    int sum = 0;\n    int\
    \ max = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                sum\
    \ = a[i] + a[j] + a[k];\n                if (sum % 3 == 0) {\n               \
    \     max += 1;\n                }\n            }\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpvkf9cpt8: /tmp/tmpvkf9cpt8.cpp:35: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long num = n/3;\n    long ans = (num) * (num - 1) * (num - 2) / 6;\n\
    \    long rem = n % 3;\n    if(rem == 1) {\n        ans += ((num) * (num - 1)\
    \ / 2) * (n - 2*num);\n    } else if(rem == 2) {\n        ans += (num) * ((n -\
    \ num)*(n - num - 1) / 2);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpgcmc54at: /tmp/tmpgcmc54at.cpp:26: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tint count = 0;\n\tfor(int i = 1; i < n; i++) {\n\t\tfor(int j = i +\
    \ 1; j < n; j++) {\n\t\t\tif((i * i - i + 1 + j * j - j + 1) % 3 == 0) {\n\t\t\
    \t\tfor(int k = j + 1; k < n; k++) {\n\t\t\t\t\tif((i * i - i + 1 + j * j - j\
    \ + 1 + k * k - k + 1) % 3 == 0) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate =\
    \ get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpz9wv488n: /tmp/tmpz9wv488n.cpp:30: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n > 0);\n    // Calculate the number of triples (i, j, k) that:\n\
    \    // 1. i + j + k < n\n    // 2. (i + j + k) % 3 == 0\n\n    long ans = 0;\n\
    \    // Find the number of triples where i is fixed to 0\n    for (long j = 1;\
    \ j < n; j++) {\n        for (long k = j + 1; k < n; k++) {\n            if ((j\
    \ + k) % 3 == 0) {\n                ans++;\n            }\n        }\n    }\n\
    \    // Find the number of triples where i is fixed to 1\n    for (long j = 2;\
    \ j < n; j++) {\n        for (long k = j + 1; k < n; k++) {\n            if ((j\
    \ + k) % 3 == 1) {\n                ans++;\n            }\n        }\n    }\n\
    \    // Find the number of triples where i is fixed to 2\n    for (long j = 3;\
    \ j < n; j++) {\n        for (long k = j + 1; k < n; k++) {\n            if ((j\
    \ + k) % 3 == 2) {\n                ans++;\n            }\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n   \
    \ assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp4r7eyuvy: /tmp/tmp4r7eyuvy.cpp:48: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // If n == 1 or n == 2, the number of valid triples is 0.\n    if\
    \ (n == 1 || n == 2) {\n        return 0;\n    }\n    // If n == 3, the only valid\
    \ triple is (1, 3, 3).\n    if (n == 3) {\n        return 1;\n    }\n    // If\
    \ n is greater than 3, we can calculate \n    // the number of valid triples.\n\
    \    // (1, 3, 3) + (1, 3, 7) + (1, 3, 13) + (1, 3, 21) + ...\n    // => (n -\
    \ 2) * (n - 2) / 2\n    return (n - 2) * (n - 2) / 2;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpc7l5ggtn: /tmp/tmpc7l5ggtn.cpp:30: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            if((i * i - i + 1 + j * j - j + 1) % 3\
    \ == 0)\n                ans++;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpgq8peq55: /tmp/tmpgq8peq55.cpp:25: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ret = 0;\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpbk8gqejf: /tmp/tmpbk8gqejf.cpp:19: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return (n * (n - 1) * (n - 2)) / 6;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpwxomxaff: /tmp/tmpwxomxaff.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long max_triples = 0;\n    for(long i = 1; i < n - 1; i++) {\n   \
    \     for(long j = i + 1; j < n; j++) {\n            if((i * i - i + 1 + j * j\
    \ - j + 1) % 3 == 0) {\n                max_triples += n - j;\n            }\n\
    \        }\n    }\n    return max_triples;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmprjhc56r4: /tmp/tmprjhc56r4.cpp:26: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i+1; j <= n; j++) {\n            for(long k = j+1; k <= n; k++) {\n    \
    \            long num = i*i - i + 1 + j*j - j + 1 + k*k - k + 1;\n           \
    \     if(num % 3 == 0) {\n                    count++;\n                }\n  \
    \          }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong res = 0;\n\tlong a[n];\n\tfor(long i = 0; i < n; i++) {\n\t\ta[i]\
    \ = i * i - i + 1;\n\t}\n\tfor(long i = 0; i < n; i++) {\n\t\tfor(long j = i +\
    \ 1; j < n; j++) {\n\t\t\tfor(long k = j + 1; k < n; k++) {\n\t\t\t\tif((a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n\t\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpo6vkb1_r: /tmp/tmpo6vkb1_r.cpp:31: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long res = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              long ai = i * i - i + 1;\n                long aj = j * j - j +\
    \ 1;\n                long ak = k * k - k + 1;\n                long sum = ai\
    \ + aj + ak;\n                if(sum % 3 == 0)\n                    res++;\n \
    \           }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmppe5ebbme: /tmp/tmppe5ebbme.cpp:32: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long i,j,k,counter = 0;\n    for(i=1;i<n;i++){\n        for(j=i+1;j<n;j++){\n\
    \            for(k=j+1;k<n;k++){\n                if((i*i - i + 1 + j*j - j +\
    \ 1 + k*k - k + 1)%3 == 0){\n                    counter++;\n                }\n\
    \            }\n        }\n    }\n    return counter;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpl3uj8pon: /tmp/tmpl3uj8pon.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    for (long i = 1; i < n; i++) {\n        result\
    \ += i * (i - 1) / 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpv_t9dkrg: /tmp/tmpv_t9dkrg.cpp:22: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n==0)\n        return 0;\n    long ans = 0;\n    for(long i=1;i<n;i++)\n\
    \    {\n        for(long j=i+1;j<n;j++)\n        {\n            long k = j+1;\n\
    \            long sum = (k*k) - k + 1;\n            long maxsum = sum;\n     \
    \       long times = 1;\n            if(sum%3==0)\n            {\n           \
    \     ans+=j-i;\n                continue;\n            }\n            while(sum%3!=0)\n\
    \            {\n                k++;\n                sum = (k*k) - k + 1;\n \
    \               maxsum+=sum;\n                times++;\n            }\n      \
    \      while(maxsum%3!=0)\n            {\n                maxsum-=sum;\n     \
    \           k--;\n                sum = (k*k) - k + 1;\n                times--;\n\
    \            }\n            if(times>0)\n                ans+=j-i;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp9rsl2dn8: /tmp/tmp9rsl2dn8.cpp:52: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  // Write your code here\n  // array a[i] = i*i - i + 1\n  std::vector<long>\
    \ a(n);\n  for(int i = 0; i < n; i++) {\n    a[i] = i*i - i + 1;\n  }\n  long\
    \ count = 0;\n  // a[i] + a[j] + a[k] is a multiple of 3\n  // a[i] + a[j] = 3\
    \ - a[k]\n  // a[i] = 3 - a[j] - a[k]\n  // a[i] = (3 - a[j]) - a[k]\n  // a[i]\
    \ = 3 - a[j] - a[k]\n  // a[i] = 3 - a[j] - a[k]\n  // a[i] = 3 - a[j] - a[k]\n\
    \  // a[i] = 3 - a[j] - a[k]\n  // a[i] = 3 - a[j] - a[k]\n  // a[i] = 3 - a[j]\
    \ - a[k]\n  for(int i = 0; i < n; i++) {\n    for(int j = i+1; j < n; j++) {\n\
    \      for(int k = j+1; k < n; k++) {\n        if((a[i] + a[j] + a[k]) % 3 ==\
    \ 0)\n          count++;\n      }\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp7550gbrr: /tmp/tmp7550gbrr.cpp:43: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long c=0;\n    for(long i=1;i<n-1;i++)\n    {\n        for(long j=i+1;j<n;j++)\n\
    \        {\n            for(long k=j+1;k<=n;k++)\n            {\n            \
    \    long sum=((i*i)-i+1)+((j*j)-j+1)+((k*k)-k+1);\n                if(sum%3==0)\n\
    \                {\n                    c++;\n                }\n            }\n\
    \        }\n    }\n    return c;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int count = 0;\n    for(int i = 1; i <= n; i++) {\n        for(int\
    \ j = i + 1; j <= n; j++) {\n            for(int k = j + 1; k <= n; k++) {\n \
    \               if(((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 ==\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\t// Write your code here\n\tlong result = 0;\n\tstd::vector<long> v;\n\
    \tfor (long i = 1; i <= n; i++) {\n\t\tv.push_back(i * i - i + 1);\n\t}\n\tfor\
    \ (long i = 0; i < n - 2; i++) {\n\t\tfor (long j = i + 1; j < n - 1; j++) {\n\
    \t\t\tfor (long k = j + 1; k < n; k++) {\n\t\t\t\tif ((v[i] + v[j] + v[k]) % 3\
    \ == 0) {\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  int x[n];\n  for(int i=0;i<n;i++)\n  {\n    x[i]=i*i-i+1;\n  }\n  int\
    \ ans=0;\n  for(int i=0;i<n;i++)\n  {\n    for(int j=i+1;j<n;j++)\n    {\n   \
    \   for(int k=j+1;k<n;k++)\n      {\n        if((x[i]+x[j]+x[k])%3==0)\n     \
    \   {\n          ans++;\n        }\n      }\n    }\n  }\n    return ans;\n}\n\
    int main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp5dqlqyc2: /tmp/tmp5dqlqyc2.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113641
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int num_triples = 0;\n    std::vector<int> nums;\n    for (int i =\
    \ 1; i <= n; i++) {\n        nums.push_back(i * i - i + 1);\n    }\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n          \
    \  for (int k = j + 1; k < n; k++) {\n                if ((nums[i] + nums[j] +\
    \ nums[k]) % 3 == 0) {\n                    num_triples++;\n                }\n\
    \            }\n        }\n    }\n    return num_triples;\n}\nint main() {\n \
    \   auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n  \
    \  assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong count = 0;\n\tlong triplets = 0;\n\tbool first_index_found = false;\n\
    \tbool second_index_found = false;\n\t// Consider each and every element as the\
    \ first element\n\tfor (long i = 0; i < n; i++) {\n\t\t// Find the multiples of\
    \ 3 from 0 to n-1 and store the index in the array\n\t\tif ((i * i - i + 1) %\
    \ 3 == 0) {\n\t\t\tfirst_index_found = true;\n\t\t\tcount = i * i - i + 1;\n\t\
    \t\t// Consider each and every element as the second element\n\t\t\tfor (long\
    \ j = i + 1; j < n; j++) {\n\t\t\t\tif ((j * j - j + 1) % 3 == 0) {\n\t\t\t\t\t\
    second_index_found = true;\n\t\t\t\t\tcount += j * j - j + 1;\n\t\t\t\t\t// Consider\
    \ each and every element as the third element\n\t\t\t\t\tfor (long k = j + 1;\
    \ k < n; k++) {\n\t\t\t\t\t\t// If the sum of the 1st and 2nd elements is divisible\
    \ by 3,\n\t\t\t\t\t\t// then the 3rd element will also be divisible by 3\n\t\t\
    \t\t\t\tif (count % 3 == 0) {\n\t\t\t\t\t\t\ttriplets++;\n\t\t\t\t\t\t}\n\t\t\t\
    \t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// If first and second elements are not\
    \ divisible by 3, then there is no triplet\n\tif (!first_index_found && !second_index_found)\
    \ {\n\t\treturn 0;\n\t}\n\t// Return the count of triplets that are divisible\
    \ by 3\n\treturn triplets;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpxnl71t_p: /tmp/tmpxnl71t_p.cpp:50: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tif (n < 3) return 0;\n\tlong result = n - 2;\n\tif (n % 3 == 0) result++;\n\
    \treturn result;\n}\nint main() {\n    auto candidate = get_max_triples;\n   \
    \ assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmph5pw680d: /tmp/tmph5pw680d.cpp:21: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long m = n / 3;\n    if (n % 3 == 0)\n        return m * (m - 1) *\
    \ (m - 2) / 6;\n    else if (n % 3 == 1)\n        return m * (m - 1) * (m + 1)\
    \ / 6;\n    else\n        return (m + 1) * m * (m + 1) / 6;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpvy4ybnr2: /tmp/tmpvy4ybnr2.cpp:24: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    // Write your code here\n    std::vector<long>\
    \ a(n);\n    for(int i = 0; i < n; i++) {\n        a[i] = (i * i) - i + 1;\n \
    \   }\n    for(int i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++)\
    \ {\n            for(int k = j + 1; k < n; k++) {\n                if((a[i] +\
    \ a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpv8ae7hyv: /tmp/tmpv8ae7hyv.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  long result = 0;\n  for (long i = 1; i < n - 1; i++) {\n    result +=\
    \ (n - 1 - i) * i;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp21jll4tq: /tmp/tmp21jll4tq.cpp:22: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 3)\n    {\n        return 0;\n    }\n    else if(n >= 3 &&\
    \ n <= 5)\n    {\n        return 1;\n    }\n    else\n    {\n        int count\
    \ = n - 5;\n        int first_remainder = (count % 3) - 1;\n        int second_remainder\
    \ = (count % 6) - 1;\n        int third_remainder = (count % 18) - 1;\n      \
    \  int fourth_remainder = (count % 54) - 1;\n        long result = 0;\n      \
    \  if(first_remainder > 0)\n        {\n            result += count - first_remainder;\n\
    \        }\n        if(second_remainder > 0)\n        {\n            result +=\
    \ count - second_remainder;\n        }\n        if(third_remainder > 0)\n    \
    \    {\n            result += count - third_remainder;\n        }\n        if(fourth_remainder\
    \ > 0)\n        {\n            result += count - fourth_remainder;\n        }\n\
    \        return result / 3;\n    }\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpc7zpgjnu: /tmp/tmpc7zpgjnu.cpp:52: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n<3)\n        return 0;\n    long ans = 0;\n    long sum = (n*(n+1))/2;\n\
    \    ans = (n-2)*(n-1)*n/6;\n    if(sum%3==0)\n        ans+= (n-1)*(n-2)/2;\n\
    \    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n   \
    \ assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmrn3y6wy: /tmp/tmpmrn3y6wy.cpp:25: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long dp[n];\n    memset(dp, 0, sizeof(dp));\n\
    \    for(long i = 0; i < n; i++) {\n        dp[i] = i * i - i + 1;\n    }\n  \
    \  for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n\
    \            for(long k = j + 1; k < n; k++) {\n                long sum = dp[i]\
    \ + dp[j] + dp[k];\n                if(sum % 3 == 0) {\n                    result++;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp8qwuaijt: /tmp/tmp8qwuaijt.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long ans=0;\n    for(long i=1;i<n-1;i++){\n\
    \        long a=i*i-i+1;\n        for(long j=i+1;j<n;j++){\n            long b=j*j-j+1;\n\
    \            for(long k=j+1;k<=n;k++){\n                long c=k*k-k+1;\n    \
    \            if((a+b+c)%3==0){\n                    ans++;\n                }\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long mod[3] = {0, 0, 0};\n    for(long i = 1;\
    \ i <= n; i++) {\n        mod[(i * i - i + 1) % 3]++;\n    }\n    count += (mod[0]\
    \ * (mod[0] - 1) * (mod[0] - 2)) / 6;\n    count += (mod[1] * (mod[1] - 1) * (mod[2]))\
    \ / 2;\n    count += (mod[2] * (mod[2] - 1) * (mod[1])) / 2;\n    return count;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpvoank1ob: /tmp/tmpvoank1ob.cpp:26: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long i = 0, j = 0, k = 0, count = 0;\n    for(i = 1; i < n; i++) {\n\
    \        for(j = i + 1; j < n; j++) {\n            for(k = j + 1; k < n; k++)\
    \ {\n                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 ==\
    \ 0)\n                    count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp9fkvkaoz: /tmp/tmp9fkvkaoz.cpp:28: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return (n*(n-1)*(n-2)/6) - ((n-1)*(n-2)*(2*n-3)/6);\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpe0lwq45n: /tmp/tmpe0lwq45n.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return n >= 4 ? (n-1) * (n-2) * (n-3) / 6 : 0;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp051hx808: /tmp/tmp051hx808.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++) {\n          \
    \  for (long k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k])\
    \ % 3 == 0) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmply4z5n5v: /tmp/tmply4z5n5v.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long res = 0;\n    for(long i = 1; i\
    \ < n - 1; i++){\n        for(long j = i + 1; j < n; j++){\n            long k\
    \ = j + 1;\n            while(k < n){\n                if((i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0){\n                    res++;\n        \
    \        }\n                k++;\n            }\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmprrawd82_: /tmp/tmprrawd82_.cpp:32: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 3) return 0;\n    long rem1 = 0, rem2 = 0;\n    for(long i\
    \ = 1; i <= n; i++) {\n        if(i % 3 == 1) rem1++;\n        else if(i % 3 ==\
    \ 2) rem2++;\n    }\n    long k = std::min(rem1, rem2);\n    rem1 -= k;\n    rem2\
    \ -= k;\n    return rem1*rem2 + k*(k - 1)/2;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp4shx9c6y: /tmp/tmp4shx9c6y.cpp:28: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\t// Since i + j + k = n\n\t// if j = i + d, then k = n - i - j = n -\
    \ 2i - d\n\t// and a[i] + a[j] + a[k] = i^2 - i + 1 + (i + d)^2 - (i + d) + 1\
    \ + (n - 2i - d)^2 - (n - 2i - d) + 1\n\t//\t\t\t\t\t\t = n + 2i^2 + 2id + 2i\
    \ + d^2 - d + 1 + n - 4i^2 - 4id - 4i - d^2 + 2d - 1\n\t//\t\t\t\t\t\t = 3n -\
    \ 6i^2 - 4i - 2d^2 - d + 3\n\t// => 3n - 6i^2 - 4i - 2d^2 - d + 3 % 3 == 0, where\
    \ 0 <= i < j < k <= n\n\t// => 3n - 6i^2 - 4i - 2d^2 - d + 3 = 0\n\t// => 6i^2\
    \ + 4i + 2d^2 + d - 3n + 3 = 0\n\t// => (2i + d - 1)^2 - 2n + 4 = 0 => d = 2i\
    \ + 1 - sqrt(4n - 8)\n\t// => k = n - 2i - d = n - 2i - (2i + 1 - sqrt(4n - 8))\
    \ = n - 4i - 1 + sqrt(4n - 8)\n\t// Since j > i and k > j, so sqrt(4n - 8) > 1,\
    \ that means a[i] + a[j] + a[k] % 3 == 0, where\n\t// 0 <= i < j < k <= n, if\
    \ and only if sqrt(4n - 8) is an odd integer.\n\t// So the problem comes down\
    \ to:\n\t// Count the number of triples (a[i], a[j], a[k]) of a where i < j <\
    \ k, \n\t// and sqrt(4n - 8) is an odd integer.\n\t// if sqrt(4n - 8) = 2q + 1,\
    \ where q is an integer\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmplg2nx017: /tmp/tmplg2nx017.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    for(long i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    long count=0;\n    for(long i=0;i<n;i++)\n    {\n        for(long\
    \ j=i+1;j<n;j++)\n        {\n            for(long k=j+1;k<n;k++)\n           \
    \ {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n          \
    \          count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpfmgh2p07: /tmp/tmpfmgh2p07.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long max_triples = 0;\n    if(n < 3)\n        return max_triples;\n\
    \    long dp[n];\n    for(long i = 0; i < n; i++)\n        dp[i] = i * i - i +\
    \ 1;\n    for(long i = 0; i < n - 2; i++) {\n        for(long j = i + 1; j < n\
    \ - 1; j++) {\n            for(long k = j + 1; k < n; k++) {\n               \
    \ if((dp[i] + dp[j] + dp[k]) % 3 == 0)\n                    max_triples++;\n \
    \           }\n        }\n    }\n    return max_triples;\n}\nint main() {\n  \
    \  auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n   \
    \ assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmph5wn2lwl: /tmp/tmph5wn2lwl.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return n * (n - 1) * (n - 2) / 6;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpjutyb675: /tmp/tmpjutyb675.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    return 0;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpyqyziule: /tmp/tmpyqyziule.cpp:19: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\t// Write your code here\n\t// By default, return 0.\n\tlong a = 0;\n\
    \tlong b = 0;\n\tlong c = 0;\n\tlong count = 0;\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\ta = i * i - i + 1;\n\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\tb =\
    \ j * j - j + 1;\n\t\t\tfor (int k = j + 1; k < n; k++) {\n\t\t\t\tc = k * k -\
    \ k + 1;\n\t\t\t\tif ((a + b + c) % 3 == 0) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpaqvhbmn6: /tmp/tmpaqvhbmn6.cpp:36: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    if(n < 3) {\n        return ans;\n    }\n    long\
    \ a[n] = {0};\n    for(long i = 0; i < n; i++) {\n        a[i] = (i * i) - i +\
    \ 1;\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = i + 1; j\
    \ < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n               \
    \ if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    ans++;\n          \
    \      }\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp6g0lobf1: /tmp/tmp6g0lobf1.cpp:35: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count=0;\n    if(n>=3){\n        count=n*(n-1)*(n-2)/6;\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp4ftny9a8: /tmp/tmp4ftny9a8.cpp:22: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 3) return 0;\n    long res = 0;\n    std::vector<long> dp(n+1,\
    \ 0);\n    dp[1] = 1;\n    dp[2] = 3;\n    dp[3] = 5;\n    for(long i = 4; i <=\
    \ n; i++) {\n        dp[i] = 3*dp[i-1] - dp[i-2] + 2;\n    }\n    return dp[n];\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpo73udcmp: /tmp/tmpo73udcmp.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long res = 0;\n    if(n > 2) {\n        long dp[n][3] = {0};\n   \
    \     dp[0][0] = 1; dp[0][1] = 1; dp[0][2] = 1;\n        for(long i = 1; i < n;\
    \ i++) {\n            dp[i][0] = dp[i-1][1] + dp[i-1][2];\n            dp[i][1]\
    \ = dp[i-1][0] + dp[i-1][2];\n            dp[i][2] = dp[i-1][0] + dp[i-1][1];\n\
    \        }\n        res = dp[n-1][0] + dp[n-1][1] + dp[n-1][2];\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpqdzio384: /tmp/tmpqdzio384.cpp:29: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long arr[n];\n    for(long i = 0; i < n; i++)\n\
    \        arr[i] = i * i - i + 1;\n    for(long i = 0; i < n; i++)\n        for(long\
    \ j = i + 1; j < n; j++)\n            for(long k = j + 1; k < n; k++)\n      \
    \          if((arr[i] + arr[j] + arr[k]) % 3 == 0)\n                    count++;\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpybc_jdxo: /tmp/tmpybc_jdxo.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong number_of_triples = 0;\n\t// Write your code here\n\tfor(long i\
    \ = 0; i < n; i++)\n\t{\n\t\tfor(long j = i+1; j < n; j++)\n\t\t{\n\t\t\tfor(long\
    \ k = j+1; k < n; k++)\n\t\t\t{\n\t\t\t\tif(((i*i - i + 1) + (j*j - j + 1) + (k*k\
    \ - k + 1)) % 3 == 0)\n\t\t\t\t{\n\t\t\t\t\tnumber_of_triples++;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn number_of_triples;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpahk3_cyp: /tmp/tmpahk3_cyp.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    long div = n / 3;\n    ans += div * (div - 1) /\
    \ 2;\n    div = n / 3 + 1;\n    ans += div * (div - 1) / 2;\n    return ans;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpzox984b_: /tmp/tmpzox984b_.cpp:25: int main(): Assertion `candidate((10))
    == (36)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long sum=0;\n    for(long i=1;i<=n;i++)\n    {\n        for(long j=i+1;j<=n;j++)\n\
    \        {\n            for(long k=j+1;k<=n;k++)\n            {\n            \
    \    if((i*i-i+1+j*j-j+1+k*k-k+1)%3==0)\n                {\n                 \
    \   // std::cout<<i<<\" \"<<j<<\" \"<<k<<std::endl;\n                    sum++;\n\
    \                }\n            }\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long num_triples = 0;\n    if (n < 3) return num_triples;\n    for\
    \ (long i = 0; i < n - 2; i++) {\n        for (long j = i + 1; j < n - 1; j++)\
    \ {\n            for (long k = j + 1; k < n; k++) {\n                if (((i +\
    \ 1) * (i + 1) - (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1) + 1 + (k + 1) * (k\
    \ + 1) - (k + 1) + 1) % 3 == 0) {\n                    num_triples++;\n      \
    \          }\n            }\n        }\n    }\n    return num_triples;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long res = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i+1; j <= n; j++) {\n            for(long k = j+1; k <= n; k++) {\n    \
    \            if((i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0)\n                    res++;\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int count = 0;\n    for(int i = 1; i < n; i++) {\n        for(int\
    \ j = i + 1; j < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n   \
    \             int ai = i * i - i + 1;\n                int aj = j * j - j + 1;\n\
    \                int ak = k * k - k + 1;\n                if((ai + aj + ak) %\
    \ 3 == 0)\n                    count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpaxby3j7y: /tmp/tmpaxby3j7y.cpp:31: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    int *array = new int[n];\n    for(int\
    \ i=0;i<n;i++){\n        array[i] = (i*i) - i + 1;\n    }\n    int count = 0;\n\
    \    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int\
    \ k=j+1;k<n;k++){\n                if((array[i] + array[j] + array[k])%3 == 0){\n\
    \                    // cout<<array[i]<<\" \"<<array[j]<<\" \"<<array[k]<<endl;\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpnxb_d8jt: /tmp/tmpnxb_d8jt.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpm4kxx8if: /tmp/tmpm4kxx8if.cpp:19: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int a[n];\n    for(int i=0;i<n;i++)\n    {\n        a[i]=i*i-i+1;\n\
    \    }\n    int count=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n\
    \        {\n            for(int k=j+1;k<n;k++)\n            {\n              \
    \  if((a[i]+a[j]+a[k])%3==0)\n                {\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp49t4dper: /tmp/tmp49t4dper.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong res = 0;\n\tfor (long i = 1; i < n - 1; i++) {\n\t\tfor (long j\
    \ = i + 1; j < n; j++) {\n\t\t\tfor (long k = j + 1; k <= n; k++) {\n\t\t\t\t\
    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\t\t\t\t\tres++;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n<=0)\n        return 0;\n    long sum=0;\n    for(long i=1;i<=n;i++)\n\
    \    {\n        sum=sum+i*i-i+1;\n    }\n    if(sum%3==0)\n        return (n*(n-1)*(n-2))/6;\n\
    \    else\n        return (n*(n-1)*(n-2))/6-1;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp9nmfhpr3: /tmp/tmp9nmfhpr3.cpp:28: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    int arr[n];\n    long count = 0;\n  \
    \  for(int i = 0; i < n; i++){\n        arr[i] = i*i - i + 1;\n    }\n    for(int\
    \ i = 0; i < n; i++){\n        for(int j = i+1; j < n; j++){\n            for(int\
    \ k = j+1; k < n; k++){\n                if((arr[i] + arr[j] + arr[k]) % 3 ==\
    \ 0){\n                    count++;\n                }\n            }\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp0heigi1_: /tmp/tmp0heigi1_.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    long sum;\n    std::vector<long> v(n);\n    for(long\
    \ i = 0; i < n; i++)\n        v[i] = i * i - i + 1;\n    for(long i = 0; i < n;\
    \ i++)\n        for(long j = i + 1; j < n; j++)\n            for(long k = j +\
    \ 1; k < n; k++)\n            {\n                sum = v[i] + v[j] + v[k];\n \
    \               if(sum % 3 == 0)\n                    count++;\n            }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmqsztzg8: /tmp/tmpmqsztzg8.cpp:31: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\t// Write your code here\n\t// To print results to the standard output\
    \ you can use the printf function\n\t// For example: printf(\"%s\", \"Hello world!\"\
    );\n    long mod3[3] = {0, 0, 0};\n    long ans = 0;\n    for(long i = 1; i <=\
    \ n; i++) {\n        long num = i * i - i + 1;\n        mod3[num % 3]++;\n   \
    \ }\n    ans += mod3[0] * (mod3[0] - 1) * (mod3[0] - 2) / 6;\n    ans += mod3[1]\
    \ * mod3[2] * (mod3[1] - 1) / 2;\n    ans += mod3[1] * mod3[2] * (mod3[2] - 1)\
    \ / 2;\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmposeb69v8: /tmp/tmposeb69v8.cpp:30: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long i = 0, j = 0, k = 0, triples = 0;\n    long a[n];\n    for(i\
    \ = 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(i = 0; i < n; i++)\
    \ {\n        for(j = i + 1; j < n; j++) {\n            for(k = j + 1; k < n; k++)\
    \ {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                    triples++;\n\
    \            }\n        }\n    }\n    return triples;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpw5wicdm5: /tmp/tmpw5wicdm5.cpp:30: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    for(long i = 0; i < n - 2; i++) {\n        for(long\
    \ j = i + 1; j < n - 1; j++) {\n            for(long k = j + 1; k < n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    ans++;\n                }\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpyf6ppag9: /tmp/tmpyf6ppag9.cpp:28: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int c = 0;\n    if(n >= 1) c++;\n    if(n >= 3) c++;\n    if(n >=\
    \ 7) c++;\n    if(n >= 13) c++;\n    if(n >= 21) c++;\n    return c;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpwmj6qonm: /tmp/tmpwmj6qonm.cpp:24: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  long result = 0;\n  std::vector<long> a(n);\n  for (long i = 0; i <\
    \ n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  for (long i = 0; i < n; i++) {\n\
    \    for (long j = i + 1; j < n; j++) {\n      for (long k = j + 1; k < n; k++)\
    \ {\n        if ((a[i] + a[j] + a[k]) % 3 == 0) {\n          result++;\n     \
    \   }\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp5v73wt1n: /tmp/tmp5v73wt1n.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    long size = n - 2;\n    std::vector<long> a(size);\n\
    \    for (long i = 0; i < size; i++) {\n        a[i] = i * i - i + 1;\n    }\n\
    \    std::unordered_map<long, long> hm;\n    for (long i = 0; i < size; i++) {\n\
    \        for (long j = i + 1; j < size; j++) {\n            long curr = a[i] +\
    \ a[j];\n            if (curr % 3 == 0) {\n                hm[curr]++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < size; i++) {\n        if\
    \ (hm.find(a[i]) != hm.end()) {\n            result += hm[a[i]];\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpsgpio3ry: /tmp/tmpsgpio3ry.cpp:38: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n > 0);\n    return n > 1 ? ((n - 1) * (n - 2) * (n - 3)) /\
    \ 6 : 0;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpykvc5i_5: /tmp/tmpykvc5i_5.cpp:19: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long m;\n    if(n%3 == 0) m = n/3;\n    else m = n/3 + 1;\n    return\
    \ m*(m-1)/2;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpkhkcbk8w: /tmp/tmpkhkcbk8w.cpp:22: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tstd::vector<long> v(n);\n\tlong i = 1;\n\tlong ans = 0;\n\tlong a =\
    \ 0;\n\tlong b = 0;\n\tlong c = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong r = 0;\n\
    \tlong s = 0;\n\tlong count = 0;\n\tlong l = 0;\n\tfor (i = 1; i <= n; i++) {\n\
    \t\tv[i - 1] = i * i - i + 1;\n\t}\n\tfor (i = 0; i < n; i++) {\n\t\tfor (j =\
    \ i + 1; j < n; j++) {\n\t\t\tfor (k = j + 1; k < n; k++) {\n\t\t\t\tif ((v[i]\
    \ + v[j] + v[k]) % 3 == 0) {\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n   \
    \ assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<long> rem;\n    for(long i = 1; i\
    \ <= n; i++) {\n        rem.push_back((i * i - i + 1) % 3);\n    }\n    // std::cout\
    \ << \"rem: \";\n    // for(long i = 0; i < rem.size(); i++) {\n    //     std::cout\
    \ << rem[i] << \" \";\n    // }\n    // std::cout << std::endl;\n    for(long\
    \ i = 0; i < rem.size(); i++) {\n        if(rem[i] == 0) {\n            count++;\n\
    \        }\n        for(long j = i + 1; j < rem.size(); j++) {\n            if((rem[i]\
    \ + rem[j]) % 3 == 0) {\n                count++;\n            }\n           \
    \ for(long k = j + 1; k < rem.size(); k++) {\n                if((rem[i] + rem[j]\
    \ + rem[k]) % 3 == 0) {\n                    count++;\n                }\n   \
    \         }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp1vkmqh5o: /tmp/tmp1vkmqh5o.cpp:43: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 3)\n        return 0;\n    // Take the example of n = 5.\n\
    \    // a = [1, 3, 7, 13, 21]\n    // We need to find i, j, k where i < j < k\
    \ and\n    // a[i] + a[j] + a[k] is a multiple of 3.\n    // 2 * (a[i] + a[j]\
    \ + a[k]) = 6 * a[i] + 6 * a[j] + 6 * a[k]\n    // = 6 * (a[i] + a[j] + a[k])\
    \ = 6 * (a[k] + a[k] + a[k]) = 6 * (3 * a[k])\n    // 3 * a[k] must be even.\n\
    \    // Now, a[k] = 3 * k - k + 1\n    // a[k] % 3 = (3 * k - k + 1) % 3\n   \
    \ // = (k - 1) % 3\n    // So, a[k] is a multiple of 3 if and only if k - 1 is\
    \ a multiple of 3.\n    // Therefore, we want all triples of (i, j, k - 1) where\
    \ i < j < k - 1 and\n    // i + j + (k - 1) is a multiple of 3.\n    // a[i] +\
    \ a[j] + a[k - 1] = a[i] + a[j] + (3 * k - 1 - k + 1)\n    // = a[i] + a[j] +\
    \ 3 * k - 1\n    // = (3 * i - i + 1) + (3 * j - j + 1) + 3 * k - 1\n    // =\
    \ 3 * (i + j + k) - (i + j + 1)\n    // = 3 * (3 * k) - (i + j + 1)\n    // 2\
    \ * (3 * k) = 6 * k\n    // 2 * (i + j + 1) = 2 * (i + j + 1)\n    // k = (i +\
    \ j + 1) / 2\n    // a[i] + a[j] + a[k - 1] = 3 * (3 *\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpz7v1bux6: /tmp/tmpz7v1bux6.cpp:41: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113647
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ret = 0;\n    std::vector<int> a;\n    for(int i = 1; i <= n;\
    \ i++) {\n        a.push_back(i * i - i + 1);\n    }\n    for(int i = 0; i < n;\
    \ i++) {\n        for(int j = i + 1; j < n; j++) {\n            for(int k = j\
    \ + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n  \
    \                  ret++;\n                }\n            }\n        }\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = get_max_triples;\n   \
    \ assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    /*\n     * Write your code here.\n     */\n    vector<long> vec;\n\
    \    vec.push_back(1);\n    for(long i=2;i<=n;i++){\n        vec.push_back(i*i-i+1);\n\
    \    }\n    int count=0;\n    for(long i=0;i<n-2;i++){\n        for(long j=i+1;j<n-1;j++){\n\
    \            for(long k=j+1;k<n;k++){\n                long sum=vec[i]+vec[j]+vec[k];\n\
    \                if(sum%3==0){\n                    cout<<vec[i]<<\",\"<<vec[j]<<\"\
    ,\"<<vec[k]<<endl;\n                    count++;\n                }\n        \
    \    }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpybcjqpcn.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmpybcjqpcn.cpp:17:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   17 |     vector<long> vec;\n      |     ^~~~~~\n/tmp/tmpybcjqpcn.cpp:17:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpybcjqpcn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpybcjqpcn.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpybcjqpcn.cpp:17:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   17 |     vector<long>\
    \ vec;\n      |            ^~~~\n/tmp/tmpybcjqpcn.cpp:18:5: error: \u2018vec\u2019\
    \ was not declared in this scope\n   18 |     vec.push_back(1);\n      |     ^~~\n\
    /tmp/tmpybcjqpcn.cpp:28:21: error: \u2018cout\u2019 was not declared in this scope;\
    \ did you mean \u2018std::cout\u2019?\n   28 |                     cout<<vec[i]<<\"\
    ,\"<<vec[j]<<\",\"<<vec[k]<<endl;\n      |                     ^~~~\n      | \
    \                    std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpybcjqpcn.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tm"
  stdout: ''
  timestamp: 1660113647
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tif (n < 3) return 0;\n\tstd::vector<long> arr(n);\n\tlong count = 0;\n\
    \tfor (int i = 0; i < n; i++) {\n\t\tarr[i] = i * i - i + 1;\n\t\tif (arr[i] %\
    \ 3 == 0) count++;\n\t}\n\tstd::cout << \"Input : \" << n << std::endl;\n\tfor\
    \ (auto elm : arr) std::cout << elm << \" \";\n\tstd::cout << std::endl;\n\t//\
    \ for (int i = 0; i < n; i++) {\n\t// \tfor (int j = i + 1; j < n; j++) {\n\t\
    // \t\tfor (int k = j + 1; k < n; k++) {\n\t// \t\t\tif ((arr[i] + arr[j] + arr[k])\
    \ % 3 == 0) {\n\t// \t\t\t\tstd::cout << \"{\" << arr[i] << \", \" << arr[j] <<\
    \ \", \" << arr[k] << \"}\" << std::endl;\n\t// \t\t\t\tcount++;\n\t// \t\t\t\
    }\n\t// \t\t}\n\t// \t}\n\t// }\n\treturn count;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpnjxg3mdf: /tmp/tmpnjxg3mdf.cpp:39: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: "Input : 5\n1 1 3 7 13 \nInput : 6\n1 1 3 7 13 21 \n"
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    /* Write your code here */\n    return n*(n-1)*(n-2)/6;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp1xlfvkn0: /tmp/tmp1xlfvkn0.cpp:19: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 3)\n        return 0;\n    long sum = 0;\n    for(long i =\
    \ 1; i < n - 1; i++) {\n        sum += (n - 1 - i) * i;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpqfk2eyr_: /tmp/tmpqfk2eyr_.cpp:24: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long *a = new long[n];\n    for(long i = 0; i < n; i++)\n        a[i]\
    \ = i * i - i + 1;\n    long count = 0;\n    long i = 0, j = 1, k = 2;\n    while(i\
    \ < n && j < n && k < n) {\n        long p = a[i] + a[j] + a[k];\n        if(p\
    \ % 3 == 0) {\n            count++;\n            i++;\n            j++;\n    \
    \        k++;\n        }\n        else if(p < 3)\n            k++;\n        else\
    \ if(p > 3) {\n            i++;\n            j++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpuaqufuah: /tmp/tmpuaqufuah.cpp:38: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a = n - 1;\n    long b = (n - 1) / 2;\n    long c = (n - 1) /\
    \ 3;\n    if ((n - 1) % 3 == 0) {\n        c -= 1;\n    }\n    return a * b *\
    \ c;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpm19i8q5h: /tmp/tmpm19i8q5h.cpp:24: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    int i =0;\n    long val1 =0, val2 =0,\
    \ val3 =0;\n    long count =0;\n    std::vector<long> arr;\n    for(i=1; i<=n;\
    \ i++){\n        val1 = i*i - i +1;\n        arr.push_back(val1);\n    }\n   \
    \ for(i=0; i<n-2; i++){\n        for(int j=i+1; j<n-1; j++){\n            for(int\
    \ k=j+1; k<n; k++){\n                val2 = arr[i] + arr[j] + arr[k];\n      \
    \          if(val2%3 == 0){\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong ans = 0;\n\tfor (long i = 1; i < n - 1; i++) {\n\t\tfor (long j\
    \ = i + 1; j < n; j++) {\n\t\t\tfor (long k = j + 1; k <= n; k++) {\n\t\t\t\t\
    if (((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0) {\n\t\t\t\t\
    \tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n   \
    \ auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113647
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long sum = 0;\n    for(long i = 1; i < n; i++) {\n        sum += (n\
    \ - i - 1) * (n - i - 2) / 2;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpkth8pag9: /tmp/tmpkth8pag9.cpp:22: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113647
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    return 0;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpyqyziule: /tmp/tmpyqyziule.cpp:19: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int max_triples = n > 3 ? n - 3 : 0;\n    long sum_rem_triples = 0;\n\
    \    long sum_rem_triples_incr = 0;\n    for (int i = 1; i <= n - 3; i++) {\n\
    \        sum_rem_triples += i;\n        sum_rem_triples_incr += i + 1;\n     \
    \   if (sum_rem_triples % 3 == 0 || sum_rem_triples_incr % 3 == 0) {\n       \
    \     max_triples--;\n        }\n    }\n    return max_triples;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpc78gf2rx: /tmp/tmpc78gf2rx.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong *a,i;\n\ta=(long *)malloc(n*sizeof(long));\n\tfor(i=0;i<n;i++)\n\
    \t\ta[i]=i*i-i+1;\n\tfor(i=0;i<n;i++)\n\t\tprintf(\"%ld \",a[i]);\n\tprintf(\"\
    \\n\");\n\t// Write your code here\n\t// Return the number of triplets that are\
    \ multiple of 3\n\t// Return 0 if n < 3\n\t// Return 0 if given n is a negative\
    \ number\n\t// Return 0 if memory allocation fails\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpd8vcbazd: /tmp/tmpd8vcbazd.cpp:29: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long sum = 0;\n    for(long i = 1; i <= n - 2; i++) {\n        long\
    \ k = 2 * i;\n        sum += (n - k) * (n - k - 1) / 2;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpgkzwe06h: /tmp/tmpgkzwe06h.cpp:23: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return ((n)*(n-1)*(n-2))/6;\n}\nint main() {\n    auto candidate =\
    \ get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpp8hggz_3: /tmp/tmpp8hggz_3.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\t// Write your code here.\n\tlong count = 0;\n\tlong rem = 0;\n\tfor\
    \ (long i = 1; i < n - 1; i++) {\n\t\trem = (i * i - i + 1) % 3;\n\t\tif (rem\
    \ == 0) {\n\t\t\tcount += (n - i - 1);\n\t\t}\n\t\telse if (rem == 1) {\n\t\t\t\
    count += (n - i - 1) / 3;\n\t\t}\n\t\telse {\n\t\t\tcount += (n - i - 1) / 3;\n\
    \t\t\tcount += (n - i - 1) % 3;\n\t\t}\n\t}\n\treturn count;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpoeb_67q_: /tmp/tmpoeb_67q_.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    long count = 0;\n    for(long i = 0;\
    \ i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i <\
    \ n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long k\
    \ = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpals606_v: /tmp/tmpals606_v.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if(((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3\
    \ == 0) {\n                    ans++;\n                }\n            }\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long dp[n];\n    long count = 0;\n    dp[0] = 1;\n    dp[1] = 2;\n\
    \    dp[2] = 5;\n    for(long i = 3; i < n; i++) {\n        dp[i] = dp[i-1] +\
    \ dp[i-2] + dp[i-3];\n    }\n    return dp[n-1];\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmptlif2rbs: /tmp/tmptlif2rbs.cpp:26: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n==0) return 0;\n    int ans = 0;\n    int mod = 1;\n    for(int\
    \ i=1;i<=n;i++){\n        mod = (mod*i)%3;\n        if(mod == 0) ans++;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n   \
    \ assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpl6l48w8a: /tmp/tmpl6l48w8a.cpp:25: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long total = 0;\n    long temp = 0;\n\
    \    long three_count = 0;\n    long n_count = 0;\n    long pos_count = 0;\n \
    \   long sum = 0;\n    long left = 0;\n    long right = 0;\n    long mid = 0;\n\
    \    long lcount = 0;\n    long rcount = 0;\n    long tcount = 0;\n    long n_div\
    \ = 0;\n    long rem = 0;\n    long prev_rem = 0;\n    std::vector<long> a(n);\n\
    \    for(long i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    for(long\
    \ i = 0; i < n; i++){\n        if(a[i] % 3 == 0){\n            three_count++;\n\
    \        }\n        if(a[i] % 3 == 1){\n            pos_count++;\n        }\n\
    \        if(a[i] % 3 == 2){\n            n_count++;\n        }\n    }\n    n_div\
    \ = n_count / 3;\n    rem = n_count % 3;\n    three_count = (three_count * (three_count\
    \ - 1) * (three_count - 2)) / 6;\n    total = total + three_count;\n    if(rem\
    \ == 0){\n        pos_count = (pos_count * (pos_count - 1) * (pos_count - 2))\
    \ / 6;\n        total = total + pos_count;\n        n_count = (n_count * (n_count\
    \ - 1) * (n_count - 2)) / 6;\n        total = total + n_count;\n    }\n    if(rem\
    \ == 1){\n        lcount = 0;\n        rcount = 0;\n        tcount = 0;\n    \
    \    n_count = n_count - n_div;\n        pos_count = pos_count - n_div;\n    \
    \    for(long i = 0; i < n; i++){\n            if(a[i] % 3 == 1){\n          \
    \      lcount++;\n            }\n            if(a[i] % 3 == 2\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpad3zp2n5.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmpad3zp2n5.cpp:65:29: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   65 |             if(a[i] % 3 == 2\n      |               ~       \
    \      ^\n      |                             )\n   66 | }\n      | ~        \
    \                    \n/tmp/tmpad3zp2n5.cpp:66:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   66 | }\n      | ^\n/tmp/tmpad3zp2n5.cpp:67:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   67 | int main() {\n      |            ^\n/tmp/tmpad3zp2n5.cpp:73:1: error:\
    \ expected \u2018}\u2019 at end of input\n   73 | }\n      | ^\n/tmp/tmpad3zp2n5.cpp:55:17:\
    \ note: to match this \u2018{\u2019\n   55 |     if(rem == 1){\n      |      \
    \           ^\n/tmp/tmpad3zp2n5.cpp:73:1: error: expected \u2018}\u2019 at end\
    \ of input\n   73 | }\n      | ^\n/tmp/tmpad3zp2n5.cpp:13:30: note: to match this\
    \ \u2018{\u2019\n   13 | long get_max_triples(long n) {\n      |             \
    \                 ^\n/tmp/tmpad3zp2n5.cpp:73:1: warning: no return statement in\
    \ function returning non-void [-Wreturn-type]\n   73 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113647
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  long count = 0;\n  for(long i = 1; i < n; i++) {\n    for(long j = i\
    \ + 1; j < n; j++) {\n      for(long k = j + 1; k < n; k++) {\n        long total\
    \ = i * i - i + 1 + j * j - j + 1 + k * k - k + 1;\n        if(total % 3 == 0)\
    \ {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\
    int main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpkckuql7s: /tmp/tmpkckuql7s.cpp:30: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long rem1 = (n-1)/3;\n    long rem2 = (n-2)/3;\n    long rem3 = (n-3)/3;\n\
    \    return rem1 * rem2 * rem3;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpck2_qyjb: /tmp/tmpck2_qyjb.cpp:21: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    return (n*(n-1)*(n-2))/6;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp_et2j111: /tmp/tmp_et2j111.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long total = 0;\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n\
    \                    total++;\n                }\n            }\n        }\n \
    \   }\n    return total;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp610d48wg: /tmp/tmp610d48wg.cpp:28: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\treturn n;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmppg0mj6o9: /tmp/tmppg0mj6o9.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\treturn (n-2)*(n-1)*n/6;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpdjbhn9r7: /tmp/tmpdjbhn9r7.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // PUT YOUR CODE HERE\n    // PLEASE DO NOT INCLUDE ANY CODE OUTSIDE\
    \ THIS FUNCTION\n    if(n==0 || n==1 || n==2){\n        return 0;\n    }\n   \
    \ if(n==3){\n        return 1;\n    }\n    if(n%3==0){\n        return (n-1)*(n-2)/6;\n\
    \    }\n    if(n%3==1){\n        return (n-2)*(n-2)/6;\n    }\n    if(n%3==2){\n\
    \        return (n-1)*(n-1)/6;\n    }\n    // PUT YOUR CODE HERE\n    // PLEASE\
    \ DO NOT INCLUDE ANY CODE OUTSIDE THIS FUNCTION\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpcykye2a_: /tmp/tmpcykye2a_.cpp:36: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\treturn ((n) * (n - 1) * (n - 2)) / 6;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpdvzvhw_9: /tmp/tmpdvzvhw_9.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans=0;\n    std::vector<long> a(n);\n    for(long i=0;i<n;i++){\n\
    \        a[i]=i*i-i+1;\n    }\n    for(long i=0;i<n;i++){\n        for(long j=i+1;j<n;j++){\n\
    \            for(long k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n\
    \                    ans++;\n                }\n            }\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpmfxv3zaq: /tmp/tmpmfxv3zaq.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long sum = 0;\n    for(long i = 1; i < n; i++) {\n        for(long\
    \ j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n  \
    \              long a = i * i - i + 1;\n                long b = j * j - j + 1;\n\
    \                long c = k * k - k + 1;\n                if((a + b + c) % 3 ==\
    \ 0)\n                    sum++;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpajybfecs: /tmp/tmpajybfecs.cpp:31: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int ln=log2(n);\n    long sum=0;\n    for(int i=1;i<=ln;i++){\n  \
    \      long x=(n+1)/(1<<i);\n        sum+=x;\n    }\n    // long i=1;\n    //\
    \ long ans=0;\n    // long temp=1;\n    // while(temp<=n){\n    //     ans+=(n-temp+1);\n\
    \    //     temp*=2;\n    // }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp8ijgpo0v: /tmp/tmp8ijgpo0v.cpp:31: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int ans = 0;\n    for(int i = 1; i <= n; i++) {\n        int num =\
    \ i * i - i + 1;\n        if(num % 3 == 0)\n            ans++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpg3owj895: /tmp/tmpg3owj895.cpp:24: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    if(n<=0)\n        return 0;\n    if(n==1)\n\
    \        return 0;\n    std::vector<long> a(n);\n    for(long i=0;i<n;i++)\n \
    \       a[i]=i*i-i+1;\n    long ans=0;\n    for(long i=0;i<n-2;i++)\n    {\n \
    \       for(long j=i+1;j<n-1;j++)\n        {\n            if((a[i]+a[j])%3==0)\n\
    \            {\n                for(long k=j+1;k<n;k++)\n                {\n \
    \                   if((a[i]+a[j]+a[k])%3==0)\n                        ans++;\n\
    \                }\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp075iy324: /tmp/tmp075iy324.cpp:41: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n+1];\n    a[0] = 0;\n    for(long i = 1; i <= n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(long i = 1; i <= n; i++) {\n  \
    \      for(long j = i+1; j <= n; j++) {\n            for(long k = j+1; k <= n;\
    \ k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n              \
    \      printf(\"(%ld, %ld, %ld)\\n\", a[i], a[j], a[k]);\n                }\n\
    \            }\n        }\n    }\n    long count = 0;\n    for(long i = 1; i <=\
    \ n; i++) {\n        for(long j = i+1; j <= n; j++) {\n            for(long k\
    \ = j+1; k <= n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: '(1, 7, 13)

    (1, 7, 13)

    (1, 7, 31)

    (1, 13, 31)

    (7, 13, 31)

    (1, 7, 13)

    (1, 7, 31)

    (1, 7, 43)

    (1, 7, 73)

    (1, 7, 91)

    (1, 13, 31)

    (1, 13, 43)

    (1, 13, 73)

    (1, 13, 91)

    (1, 31, 43)

    (1, 31, 73)

    (1, 31, 91)

    (1, 43, 73)

    (1, 43, 91)

    (1, 73, 91)

    (3, 21, 57)

    (7, 13, 31)

    (7, 13, 43)

    (7, 13, 73)

    (7, 13, 91)

    (7, 31, 43)

    (7, 31, 73)

    (7, 31, 91)

    (7, 43, 73)

    (7, 43, 91)

    (7, 73, 91)

    (13, 31, 43)

    (13, 31, 73)

    (13, 31, 91)

    (13, 43, 73)

    (13, 43, 91)

    (13, 73, 91)

    (31, 43, 73)

    (31, 43, 91)

    (31, 73, 91)

    (43, 73, 91)

    (1, 7, 13)

    (1, 7, 31)

    (1, 7, 43)

    (1, 7, 73)

    (1, 7, 91)

    (1, 7, 133)

    (1, 7, 157)

    (1, 7, 211)

    (1, 7, 241)

    (1, 7, 307)

    (1, 7, 343)

    (1, 7, 421)

    (1, 7, 463)

    (1, 7, 553)

    (1, 7, 601)

    (1, 7, 703)

    (1, 7, 757)

    (1, 7, 871)

    (1, 7, 931)

    (1, 7, 1057)

    (1, 7, 1123)

    (1, 7, 1261)

    (1, 7, 1333)

    (1, 7, 1483)

    (1, 7, 1561)

    (1, 7, 1723)

    (1, 7, 1807)

    (1, 7, 1981)

    (1, 7, 2071)

    (1, 7, 2257)

    (1, 7, 2353)

    (1, 7, 2551)

    (1, 7, 2653)

    (1, 7, 2863)

    (1, 7, 2971)

    (1, 7, 3193)

    (1, 7, 3307)

    (1, 7, 3541)

    (1, 7, 3661)

    (1, 7, 3907)

    (1, 7, 4033)

    (1, 7, 4291)

    (1, 7, 4423)

    (1, 7, 4693)

    (1, 7, 4831)

    (1, 7, 5113)

    (1, 7, 5257)

    (1, 7, 5551)

    (1, 7, 5701)

    (1, 7, 6007)

    (1, 7, 6163)

    (1, 7, 6481)

    (1, 7, 6643)

    (1, 7, 6973)

    (1, 7, 7141)

    (1, 7, 7483)

    (1, 7, 7657)

    (1, 7, 8011)

    (1, 7, 8191)

    (1, 7, 8557)

    (1, 7, 8743)

    (1, 7, 9121)

    (1, 7, 9313)

    (1, 7, 9703)

    (1, 7, 9901)

    (1, 13, 31)

    (1, 13, 43)

    (1, 13, 73)

    (1, 13, 91)

    (1, 13, 133)

    (1, 13, 157)

    (1, 13, 211)

    (1, 13, 241)

    (1, 13, 307)

    (1, 13, 343)

    (1, 13, 421)

    (1, 13, 463)

    (1, 13, 553)

    (1, 13, 601)

    (1, 13, 703)

    (1, 13, 757)

    (1, 13, 871)

    (1, 13, 931)

    (1, 13, 1057)

    (1, 13, 1123)

    (1, 13, 1261)

    (1, 13, 1333)

    (1, 13, 1483)

    (1, 13, 1561)

    (1, 13, 1723)

    (1, 13, 1807)

    (1, 13, 1981)

    (1, 13, 2071)

    (1, 13, 2257)

    (1, 13, 2353)

    (1, 13, 2551)

    (1, 13, 2653)

    (1, 13, 2863)

    (1, 13, 2971)

    (1, 13, 3193)

    (1, 13, 3307)

    (1, 13, 3541)

    (1, 13, 3661)

    (1, 13, 3907)

    (1, 13, 4033)

    (1, 13, 4291)

    (1, 13, 4423)

    (1, 13, 4693)

    (1, 13, 4831)

    (1, 13, 5113)

    (1, 13, 5257)

    (1, 13, 5551)

    (1, 13, 5701)

    (1, 13, 6007)

    (1, 13, 6163)

    (1, 13, 6481)

    (1, 13, 6643)

    (1, 13, 6973)

    (1, 13, 7141)'
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n==1) return 0;\n    long ans = 0;\n    long c1 = n/3;\n    long\
    \ c2 = n/3;\n    long c3 = n/3;\n    if(n%3==2)\n    {\n        c1--;\n      \
    \  c2--;\n        c3++;\n    }\n    if(n%3==1)\n    {\n        c1--;\n       \
    \ c2++;\n        c3++;\n    }\n    if(c1<1) return 0;\n    ans = ((c1)*(c2)*(c3));\n\
    \    return ans;\n}\nint main() {\n    auto candidate = get_max_triples;\n   \
    \ assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp81h4yyqi: /tmp/tmp81h4yyqi.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long i=0,sum=0,k=0,j=0,m=0;\n    long\
    \ arr[n];\n    for(i=0;i<n;i++)\n    {\n        arr[i]=i*i-i+1;\n        sum=sum+arr[i];\n\
    \    }\n    if(sum%3==0)\n    m=1;\n    else\n    m=0;\n    return m;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp22anqfym: /tmp/tmp22anqfym.cpp:30: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n-1; i++){\n        for(long j = i+1; j < n; j++){\n            long sum\
    \ = i*i - i + 1 + j*j - j + 1;\n            long third = sqrt(sum);\n        \
    \    if(third*third == sum)\n                count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp8x8soocb: /tmp/tmp8x8soocb.cpp:28: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    int a[n];\n    for(int i = 0; i < n; i++) {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for(int i = 0; i < n; i++) {\n    \
    \    for(int j = i + 1; j < n; j++) {\n            for(int k = j + 1; k < n; k++)\
    \ {\n                if((a[i] + a[j] + a[k]) % 3 == 0) {\n                   \
    \ count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpgvhnwfzp: /tmp/tmpgvhnwfzp.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long c=0;\n    for(long i=1;i<n-1;i++)\n    {\n        for(long j=i+1;j<n;j++)\n\
    \        {\n            for(long k=j+1;k<=n;k++)\n            {\n            \
    \    long a=i*i-i+1;\n                long b=j*j-j+1;\n                long x=k*k-k+1;\n\
    \                if((a+b+x)%3==0)\n                {\n                    c++;\n\
    \                }\n            }\n        }\n    }\n    return c;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n <= 3)\n        return 0;\n    long count = 0;\n    for(long i\
    \ = 0; i < n; i++) {\n        for(long j = i + 1; j < n; j++) {\n            for(long\
    \ k = j + 1; k < n; k++) {\n                if((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0)\n                    count++;\n            }\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpee20ny22: /tmp/tmpee20ny22.cpp:29: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n >= 3);\n    return (n - 1) * (n - 2) / 2;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp5lupof2l: /tmp/tmp5lupof2l.cpp:19: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    /* Don't write main().\n     * Don't read input, it is passed as function\
    \ argument.\n     * Return output and don't print it.\n     * Taking input and\
    \ printing output is handled automatically.\n     */\n    long i=1,j=2,k=3,count=0;\n\
    \    while(k<=n){\n        if((i+j+k)%3==0){\n            count++;\n        }\n\
    \        i++;\n        j++;\n        k++;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpwrp2yzlr: /tmp/tmpwrp2yzlr.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i+1; j <= n; j++) {\n            for(long k = j+1; k <= n; k++) {\n    \
    \            if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113568
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong cnt = 0;\n\tstd::vector<long> a;\n\t// Time Complexity: O(n)\n\t\
    for (long i = 1; i <= n; i++) {\n\t\ta.push_back(i * i - i + 1);\n\t}\n\tfor (long\
    \ i = 0; i < n; i++) {\n\t\tfor (long j = i + 1; j < n; j++) {\n\t\t\tfor (long\
    \ k = j + 1; k < n; k++) {\n\t\t\t\tif ((a[i] + a[j] + a[k]) % 3 == 0) {\n\t\t\
    \t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if(((i*i-i+1)+(j*j-j+1)+(k*k-k+1))%3 ==\
    \ 0){\n                    count++;\n                }\n            }\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpt1b49jx8: /tmp/tmpt1b49jx8.cpp:30: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  // Write your code here\n  // To print results to the standard output\
    \ you can use printf()\n  // Example: printf(\"%s\", \"Hello world!\");\n  long\
    \ a[n];\n  for(long i=0;i<n;i++) {\n    a[i] = i*i - i + 1;\n  }\n  long triple_count\
    \ = 0;\n  for(long i=0;i<n;i++) {\n    for(long j=i+1;j<n;j++) {\n      for(long\
    \ k=j+1;k<n;k++) {\n        if((a[i] + a[j] + a[k]) % 3 == 0) {\n          triple_count++;\n\
    \        }\n      }\n    }\n  }\n  return triple_count;\n}\nint main() {\n   \
    \ auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp9qycg15z: /tmp/tmp9qycg15z.cpp:35: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long *a = new long[n];\n    long count = 0;\n    for(long i = 0; i\
    \ < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    for(long i = 0; i < n\
    \ - 2; i++) {\n        for(long j = i + 1; j < n - 1; j++) {\n            for(long\
    \ k = j + 1; k < n; k++) {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n\
    \                    count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp0dc1nrue: /tmp/tmp0dc1nrue.cpp:31: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long no_of_triples = 0;\n    for(long i = 1; i < n; i++) {\n     \
    \   for(long j = i + 1; j < n; j++) {\n            for(long k = j + 1; k < n;\
    \ k++) {\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 ==\
    \ 0) {\n                    no_of_triples++;\n                }\n            }\n\
    \        }\n    }\n    return no_of_triples;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp55x4cw1p: /tmp/tmp55x4cw1p.cpp:29: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long res = 0;\n    std::vector<long> b(n, 0);\n    std::vector<std::vector<int>>\
    \ a(n, std::vector<int>(n, 0));\n    for (int i = 0; i < n; i++) {\n        b[i]\
    \ = i * i - i + 1;\n    }\n    for (int i = 0; i < n; i++) {\n        for (int\
    \ j = i + 1; j < n; j++) {\n            a[i][j] = (b[i] + b[j]) % 3;\n       \
    \ }\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if\
    \ (a[i][j] + a[j][k] + a[i][k] == 0) {\n                    res++;\n         \
    \       }\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpdmixhuz0: /tmp/tmpdmixhuz0.cpp:38: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tint a[n], count=0;\n\tfor(int i=0; i<n; i++)\n\t\ta[i] = i*i - i + 1;\n\
    \tfor(int i=0; i<n; i++)\n\t\tfor(int j=i+1; j<n; j++)\n\t\t\tfor(int k=j+1; k<n;\
    \ k++)\n\t\t\t\tif((a[i] + a[j] + a[k])%3 == 0)\n\t\t\t\t\tcount++;\n\treturn\
    \ count;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpyod6kvgk: /tmp/tmpyod6kvgk.cpp:26: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong result=0;\n\tfor(long i=1;i<n-1;i++)\n\t{\n\t\tlong prod=i*i-i+1;\n\
    \t\tfor(long j=i+1;j<n;j++)\n\t\t{\n\t\t\tprod+=j*j-j+1;\n\t\t\tfor(long k=j+1;k<=n;k++)\n\
    \t\t\t{\n\t\t\t\tprod+=k*k-k+1;\n\t\t\t\tif(prod%3==0)\n\t\t\t\t{\n\t\t\t\t\t\
    result++;\n\t\t\t\t}\n\t\t\t\tprod-=k*k-k+1;\n\t\t\t}\n\t\t\tprod-=j*j-j+1;\n\t\
    \t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long remainder = n % 3;\n    return ((n / 3) * (n - 1)) / 2;\n}\n\
    int main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpk1q3331m: /tmp/tmpk1q3331m.cpp:19: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong tot = 0;\n\tlong n1 = n-1;\n\tlong n2 = n-2;\n\tlong n3 = n-3;\n\
    \tlong n1_3 = n1/3;\n\tlong n2_3 = n2/3;\n\tlong n3_3 = n3/3;\n\tlong sum = n1_3\
    \ + n2_3 + n3_3;\n\ttot = sum*(sum+1)/2;\n\tlong n1_3_mod = n1%3;\n\tlong n2_3_mod\
    \ = n2%3;\n\tlong n3_3_mod = n3%3;\n\tsum = 0;\n\tif(n1_3_mod == 1)\n\t\tsum +=\
    \ n1_3;\n\tif(n2_3_mod == 1)\n\t\tsum += n2_3;\n\tif(n3_3_mod == 1)\n\t\tsum +=\
    \ n3_3;\n\ttot -= sum*(sum+1)/2;\n\tsum = 0;\n\tif(n1_3_mod == 2)\n\t\tsum +=\
    \ n1_3;\n\tif(n2_3_mod == 2)\n\t\tsum += n2_3;\n\tif(n3_3_mod == 2)\n\t\tsum +=\
    \ n3_3;\n\ttot -= sum*(sum+1)/2;\n\treturn tot;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpn197w4hj: /tmp/tmpn197w4hj.cpp:46: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n<3) return 0;\n    long res=0;\n    std::vector<long> a(n);\n\
    \    for(int i=0;i<n;i++) a[i]=i*i-i+1;\n    for(int i=0;i<n-2;i++){\n       \
    \ for(int j=i+1;j<n-1;j++){\n            for(int k=j+1;k<n;k++){\n           \
    \     if((a[i]+a[j]+a[k])%3==0) res++;\n            }\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp5la0xea8: /tmp/tmp5la0xea8.cpp:29: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  // Write your code here\n  long res = 0;\n  for(long i = 0; i < n; i++)\n\
    \  {\n    for(long j = i + 1; j < n; j++)\n    {\n      for(long k = j + 1; k\
    \ < n; k++)\n      {\n        if(((i * i - i + 1) + (j * j - j + 1) + (k * k -\
    \ k + 1)) % 3 == 0)\n        {\n          res++;\n        }\n      }\n    }\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpcnnbnj9z: /tmp/tmpcnnbnj9z.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    for (long i = 1; i < n; i++) {\n        for\
    \ (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n; k++)\
    \ {\n                result += ((i * i - i + 1) + (j * j - j + 1) + (k * k - k\
    \ + 1)) % 3 == 0;\n            }\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpxtslv37r: /tmp/tmpxtslv37r.cpp:27: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long cnt1 = 0, cnt2 = 0, cnt3 = 0;\n    for(long i = 1; i <= n; i++)\
    \ {\n        if(i % 3 == 0) cnt3++;\n        else if(i % 3 == 1) cnt1++;\n   \
    \     else cnt2++;\n    }\n    long max = 0;\n    max += cnt1 * cnt2 * cnt3;\n\
    \    max += cnt1 * cnt1 * cnt3;\n    max += cnt2 * cnt2 * cnt3;\n    max += cnt1\
    \ * cnt2 * cnt2;\n    max += cnt2 * cnt3 * cnt3;\n    max += cnt1 * cnt3 * cnt3;\n\
    \    return max;\n}\nint main() {\n    auto candidate = get_max_triples;\n   \
    \ assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp8l47roaj: /tmp/tmp8l47roaj.cpp:31: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long max_i = n / 3, max_j = 2 * n / 3;\n    return max_i * max_j *\
    \ (max_j - 1) / 2;\n}\nint main() {\n    auto candidate = get_max_triples;\n \
    \   assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmptkuar72i: /tmp/tmptkuar72i.cpp:19: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tif (n < 3)\n\t\treturn 0;\n\tif (n % 3 == 0)\n\t\treturn ((n-2) * (n-1)\
    \ * n) / (6 * 3);\n\telse if (n % 3 == 1)\n\t\treturn ((n-2) * (n-1) * (n-3))\
    \ / (6 * 3);\n\telse\n\t\treturn ((n-1) * (n-2) * (n-3)) / (6 * 3);\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp14swc1r2: /tmp/tmp14swc1r2.cpp:26: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  return std::pow(n, 2) - std::pow(n, 2)/3;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpbv4fnh3q: /tmp/tmpbv4fnh3q.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n <= 2) return 0;\n    long dp[n+1] = {0};\n    dp[0] = 0;\n  \
    \  dp[1] = 0;\n    dp[2] = 0;\n    for(long i = 3; i <= n; i++) {\n        dp[i]\
    \ = (i*i - i + 1 + dp[i-1]) % 3 == 0 ? dp[i-1] + 1 : dp[i-1];\n    }\n    return\
    \ dp[n];\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmprhx62kqh: /tmp/tmprhx62kqh.cpp:27: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long res = 0;\n    std::vector<long> a(n);\n    for (int i = 0; i\
    \ < n; i++)\n        a[i] = i * i - i + 1;\n    for (int i = 0; i < n - 2; i++)\n\
    \        for (int j = i + 1; j < n - 1; j++)\n            for (int k = j + 1;\
    \ k < n; k++)\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n          \
    \          res++;\n    return res;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpykziixq9: /tmp/tmpykziixq9.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long j,k,count=0;\n    int ans =0;\n\
    \    std::vector<int> a(n);\n    for(int i=0;i<n;i++)\n    {\n        a[i] = (i+1)*(i+1)\
    \ - (i+1) + 1;\n    }\n    for(int i=0;i<n;i++)\n    {\n        j=i+1;\n     \
    \   k=j+1;\n        for(;j<n;j++)\n        {\n            for(;k<n;k++)\n    \
    \        {\n                if((a[i]+a[j]+a[k])%3==0)\n                {\n   \
    \                 count++;\n                }\n            }\n            k=j+1;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmphjahbro0: /tmp/tmphjahbro0.cpp:42: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    return 3*n*(n-1)*(n-2)/6;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp65brr_la: /tmp/tmp65brr_la.cpp:19: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long ans=0;\n    std::vector<long> a(n,0);\n\
    \    for(long i=0;i<n;i++){\n        a[i]=i*i-i+1;\n    }\n    for(long i=0;i<n;i++){\n\
    \        for(long j=i+1;j<n;j++){\n            for(long k=j+1;k<n;k++){\n    \
    \            if((a[i]+a[j]+a[k])%3==0){\n                    ans++;\n        \
    \        }\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpnforv206: /tmp/tmpnforv206.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n; k++) {\n\
    \                if((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    // return 0;\n    long triples = 0;\n\
    \    for(long i = 1; i < n; i++)\n    {\n        for(long j = i+1; j < n; j++)\n\
    \        {\n            for(long k = j+1; k < n; k++)\n            {\n       \
    \         // std::cout << \"(\" << i << \", \" << j << \", \" << k << \") : \"\
    \ << i*i - i + 1 << \", \" << j*j - j + 1 << \", \" << k*k - k + 1 << \"\\n\"\
    ;\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n  \
    \              {\n                    // std::cout << \"(\" << i << \", \" <<\
    \ j << \", \" << k << \") : \" << i*i - i + 1 << \", \" << j*j - j + 1 << \",\
    \ \" << k*k - k + 1 << \"\\n\";\n                    triples++;\n            \
    \    }\n            }\n        }\n    }\n    return triples;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpxnoglsuz: /tmp/tmpxnoglsuz.cpp:37: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long sum;\n    int count = 0;\n    for(int i = 1; i < n; i++) {\n\
    \        for(int j = i + 1; j < n; j++) {\n            for(int k = j + 1; k <\
    \ n; k++) {\n                sum = i*i - i + 1 + j*j - j + 1 + k*k - k + 1;\n\
    \                if(sum % 3 == 0)\n                    count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpibljhib5: /tmp/tmpibljhib5.cpp:30: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long max_triples = 0;\n    std::vector<int> a(n);\n    for(int i =\
    \ 0; i < n; i++)\n        a[i] = i * i - i + 1;\n    for(int i = 0; i < n; i++)\n\
    \        for(int j = i + 1; j < n; j++)\n            for(int k = j + 1; k < n;\
    \ k++)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                  \
    \  max_triples++;\n    return max_triples;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp4ahaqvvu: /tmp/tmp4ahaqvvu.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    if(n<=2)\n     \
    \   return 0;\n    for(long i=0;i<n-2;i++)\n    {\n        for(long j=i+1;j<n-1;j++)\n\
    \        {\n            for(long k=j+1;k<n;k++)\n            {\n             \
    \   long sum = i*i-i+1 + j*j-j+1 + k*k-k+1;\n                if(sum%3==0)\n  \
    \                  count++;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpcw372_ia: /tmp/tmpcw372_ia.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  return 0;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp8o10r_at: /tmp/tmp8o10r_at.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count_3,count_2,count_1,count_1_minus,count_2_minus,count_3_minus;\n\
    \    count_3 = (n/3)*2;\n    count_2 = (n/3);\n    count_1 = (n/3)*2;\n    count_1_minus\
    \ = n%3;\n    count_2_minus = n%3;\n    count_3_minus = n%3;\n    if(count_1_minus\
    \ > 1)\n    {\n        count_1_minus = 2;\n        count_2_minus = 1;\n    }\n\
    \    if(count_1_minus == 2)\n    {\n        count_2 = count_2 + 1;\n    }\n  \
    \  count_1 = count_1 - count_1_minus;\n    count_2 = count_2 - count_2_minus;\n\
    \    count_3 = count_3 - count_3_minus;\n    return count_1*count_2*count_3;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmprm4em10_: /tmp/tmprm4em10_.cpp:38: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  long res = 0;\n  vector<int>a(n);\n  for(int i=0;i<n;i++){\n    a[i]\
    \ = i*i - i + 1;\n  }\n  for(int i=0;i<n;i++){\n    for(int j=i+1;j<n;j++){\n\
    \      for(int k=j+1;k<n;k++){\n        if((a[i] + a[j] + a[k])%3 == 0){\n   \
    \       res++;\n        }\n      }\n    }\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpefhenyk7.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmpefhenyk7.cpp:15:3: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   15 |   vector<int>a(n);\n      |   ^~~~~~\n/tmp/tmpefhenyk7.cpp:15:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpefhenyk7.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpefhenyk7.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpefhenyk7.cpp:15:10:\
    \ error: expected primary-expression before \u2018int\u2019\n   15 |   vector<int>a(n);\n\
    \      |          ^~~\n/tmp/tmpefhenyk7.cpp:17:5: error: \u2018a\u2019 was not\
    \ declared in this scope\n   17 |     a[i] = i*i - i + 1;\n      |     ^\n/tmp/tmpefhenyk7.cpp:22:13:\
    \ error: \u2018a\u2019 was not declared in this scope\n   22 |         if((a[i]\
    \ + a[j] + a[k])%3 == 0){\n      |             ^\n"
  stdout: ''
  timestamp: 1660113650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n < 3) {\n        return 0;\n    }\n    std::vector<long> a(n);\n\
    \    for(long i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n   \
    \ std::unordered_map<long, long> um;\n    for(auto val : a) {\n        um[val]++;\n\
    \    }\n    std::vector<long> aa;\n    std::copy(a.begin(), a.end(), std::back_inserter(aa));\n\
    \    std::sort(aa.begin(), aa.end());\n    long cnt = 0;\n    for(long i = 0;\
    \ i < n; i++) {\n        long a_i = aa[i];\n        long j = i + 1;\n        while(j\
    \ < n && aa[j] < a_i * 2) {\n            long a_j = aa[j];\n            long k\
    \ = j + 1;\n            while(k < n && aa[k] < a_i * 2) {\n                long\
    \ a_k = aa[k];\n                long sum = a_i + a_j + a_k;\n                if(sum\
    \ % 3 == 0) {\n                    long aa_i = a_i / 2;\n                    long\
    \ aa_j = a_j / 2;\n                    long aa_k = a_k / 2;\n                \
    \    if(aa_i > 0 && aa_j > 0 && aa_k > 0) {\n                        long max_triples\
    \ = um[aa_i] * um[aa_j] * um[aa_k];\n                        if(aa_i == aa_j &&\
    \ aa_j == aa_k) {\n                            max_triples = max_triples / 6;\n\
    \                        } else if(aa_i == aa_j || aa_j == aa_k || aa_k == aa_i)\
    \ {\n                            max_triples = max_triples / 2;\n            \
    \            }\n                        cnt += max_triples;\n                \
    \    }\n                }\n                k++;\n            }\n            j++;\n\
    \n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6tksynbt.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmp6tksynbt.cpp:57:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   57 | int main() {\n      |            ^\n/tmp/tmp6tksynbt.cpp:63:1:\
    \ error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmp6tksynbt.cpp:29:33:\
    \ note: to match this \u2018{\u2019\n   29 |     for(long i = 0; i < n; i++) {\n\
    \      |                                 ^\n/tmp/tmp6tksynbt.cpp:63:1: error:\
    \ expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmp6tksynbt.cpp:13:30:\
    \ note: to match this \u2018{\u2019\n   13 | long get_max_triples(long n) {\n\
    \      |                              ^\n/tmp/tmp6tksynbt.cpp:63:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660113650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  // Write your code here\n  if(n == 1) return 0;\n  std::vector<long>\
    \ a(n);\n  for(long i = 0; i < n; i++) {\n    a[i] = (i * i) - i + 1;\n  }\n \
    \ long res = 0;\n  for(long i = 0; i < n - 2; i++) {\n    for(long j = i + 1;\
    \ j < n - 1; j++) {\n      for(long k = j + 1; k < n; k++) {\n        if((a[i]\
    \ + a[j] + a[k]) % 3 == 0) {\n          res++;\n        }\n      }\n    }\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpogt3_rf6: /tmp/tmpogt3_rf6.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long *arr = new long[n];\n    for(long i = 0; i < n; i++)\n      \
    \  arr[i] = i * i - i + 1;\n    long count = 0;\n    for(long i = 0; i < n; i++)\n\
    \        for(long j = i + 1; j < n; j++)\n            for(long k = j + 1; k <\
    \ n; k++)\n                if((arr[i] + arr[j] + arr[k]) % 3 == 0)\n         \
    \           count++;\n    return count;\n}\nint main() {\n    auto candidate =\
    \ get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpx14ufyqz: /tmp/tmpx14ufyqz.cpp:27: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpqndn4gs3: /tmp/tmpqndn4gs3.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong ans = 0;\n\tint mod_3[3] = {1, -1, 0};\n\tfor(int i = 0; i < 3;\
    \ i++) {\n\t\tfor(int j = 0; j < 3; j++) {\n\t\t\tint k = mod_3[(i + j) % 3];\n\
    \t\t\tint count = 0;\n\t\t\tfor(int l = 0; l < n; l++) {\n\t\t\t\tif(l * l - l\
    \ + 1 % 3 == k)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\tans += count * (count - 1)\
    \ * (count - 2) / 6;\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpw3a5oqn4: /tmp/tmpw3a5oqn4.cpp:31: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long nb_triples = 0;\n    for (long i = 1; i < n; i++) {\n       \
    \ for (long j = i + 1; j < n; j++) {\n            for (long k = j + 1; k < n;\
    \ k++) {\n                long elt_i = i * i - i + 1;\n                long elt_j\
    \ = j * j - j + 1;\n                long elt_k = k * k - k + 1;\n            \
    \    if ((elt_i + elt_j + elt_k) % 3 == 0) {\n                    std::cout <<\
    \ \"[\" << elt_i << \", \" << elt_j << \", \" << elt_k << \"]\" << std::endl;\n\
    \                    nb_triples++;\n                }\n            }\n       \
    \ }\n    }\n    return nb_triples;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpz316132q: /tmp/tmpz316132q.cpp:33: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: '[1, 7, 13]

    [1, 7, 13]

    '
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ret = 0;\n    ret = (n*(n-1)*(n-2))/6;\n    return ret;\n}\n\
    int main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2v5byukm: /tmp/tmp2v5byukm.cpp:20: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long sum = 0;\n    for(long i = 1; i <= n; i++) {\n        sum +=\
    \ i * i - i + 1;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp9fi5yl4a: /tmp/tmp9fi5yl4a.cpp:22: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    if(n >= 3) {\n        count = (n-2)*(n-1)*n/6;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp3b7r1yow: /tmp/tmp3b7r1yow.cpp:22: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    assert(n > 0);\n    long cnt = 0;\n    for (long i = 1; i < n - 1;\
    \ i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long k\
    \ = j + 1; k <= n; k++) {\n                if ((i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0) {\n                    cnt++;\n                }\n\
    \            }\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // Write your code here\n    long count = 0;\n    for(long i = 1;\
    \ i < n; i++){\n        for(long j = i+1; j < n; j++){\n            for(long k\
    \ = j+1; k < n; k++){\n                if((i * i - i + 1 + j * j - j + 1 + k *\
    \ k - k + 1) % 3 == 0){\n                    count += 1;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmp2flwcnph: /tmp/tmp2flwcnph.cpp:30: int main(): Assertion `candidate((6))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // long a[n];\n    long a[n] = {0};\n    for(long i = 0; i < n; i++)\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    // for(long i = 0; i < n; i++)\
    \ {\n    //     std::cout << a[i] << \" \";\n    // }\n    // std::cout << std::endl;\n\
    \    long m = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = i +\
    \ 1; j < n; j++) {\n            for(long k = j + 1; k < n; k++) {\n          \
    \      if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    m++;\n       \
    \         }\n            }\n        }\n    }\n    return m;\n}\nint main() {\n\
    \    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n \
    \   assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n   \
    \ assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpvce4_wqr: /tmp/tmpvce4_wqr.cpp:37: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long a[n];\n    int ct=0;\n    for(int i=0;i<n;i++){\n        a[i]=i*i-i+1;\n\
    \    }\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n         \
    \   for(int k=j+1;k<n;k++){\n                if((a[i]+a[j]+a[k])%3==0){\n    \
    \                ct++;\n                }\n            }\n        }\n    }\n \
    \   return ct;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpfdim9ymp: /tmp/tmpfdim9ymp.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tif (n < 3) return 0;\n\tlong n0 = 0, n1 = 0, n2 = 0;\n\tfor (long i\
    \ = 1; i <= n; i++) {\n\t\tif ((i * i - i + 1) % 3 == 0) n0++;\n\t\telse if ((i\
    \ * i - i + 1) % 3 == 1) n1++;\n\t\telse n2++;\n\t}\n\treturn n0 * (n0 - 1) *\
    \ (n0 - 2) / 6 + n1 * n2 * (n1 - 1) / 2 + n1 * n2 * (n2 - 1) / 2;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpg1fp0yft: /tmp/tmpg1fp0yft.cpp:25: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n<=2)\n    return 0;\n    long long r=0;\n    r=(n-2)*(n-1)*n;\n\
    \    r=r/6;\n    return r;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpu6yw9fib: /tmp/tmpu6yw9fib.cpp:23: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    std::vector<long> a(n);\n    for (long i = 0; i < n; i++) {\n    \
    \    a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i\
    \ < n; i++) {\n        for (long j = i + 1; j < n; j++) {\n            for (long\
    \ k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmplnve26ll: /tmp/tmplnve26ll.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113652
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    for(long i = 1; i <= n - 2; i++) {\n        for(long\
    \ j = i + 1; j <= n - 1; j++) {\n            for(long k = j + 1; k <= n; k++)\
    \ {\n                if((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long ans = 0;\n    // Write your code here.\n    // return ans;\n\
    \    std::vector<long> a(n);\n    for(long i = 0; i < n; i++) {\n        a[i]\
    \ = (i*i) - i + 1;\n    }\n    for(long i = 0; i < n-2; i++) {\n        for(long\
    \ j = i+1; j < n-1; j++) {\n            for(long k = j+1; k < n; k++) {\n    \
    \            if((a[i] + a[j] + a[k]) % 3 == 0) {\n                    ans++;\n\
    \                }\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpwajme6g0: /tmp/tmpwajme6g0.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  long sum = 0;\n  long count = 0;\n  for(long i = 1; i <= n; i++) {\n\
    \    sum += i;\n    if(sum % 3 == 0)\n      count++;\n  }\n  return count;\n}\n\
    int main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpnjz60w2v: /tmp/tmpnjz60w2v.cpp:25: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113652
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long triples = 0;\n    // The maximum number of triples is nCr(n,\
    \ 3).\n    long max_triples = (n * (n - 1) * (n - 2)) / 6;\n    // a[i] = i *\
    \ i - i + 1.\n    // a[i] % 3 == 0 => i * i - i + 1 % 3 == 0\n    // i * i - i\
    \ + 1 % 3 == 0 => i * i % 3 == i % 3\n    // i * i % 3 == i % 3 => (i + 1) * (i\
    \ + 1) % 3 == (i + 1) % 3\n    // (i + 1) * (i + 1) % 3 == (i + 1) % 3 => (i +\
    \ 2) * (i + 2) % 3 == (i + 2) % 3\n    // (i + 2) * (i + 2) % 3 == (i + 2) % 3\
    \ => (i + 3) * (i + 3) % 3 == (i + 3) % 3\n    // (i + 3) * (i + 3) % 3 == (i\
    \ + 3) % 3 => (i + 4) * (i + 4) % 3 == (i + 4) % 3\n    // (i + 4) * (i + 4) %\
    \ 3 == (i + 4) % 3 => (i + 5) * (i + 5) % 3 == (i + 5) % 3\n    // (i + 5) * (i\
    \ + 5) % 3 == (i + 5) % 3 => (i + 6) * (i + 6) % 3 == (i + 6) % 3\n    // We can\
    \ see that whenever i % 3 == 0, a[i], a[i + 1], a[i + 2] \n    // may form a triplet\
    \ and a[i + 3], a[i + 4], a[i + 5] may not.\n    // As there are nCr(n, 3) triplets\
    \ possible, we can say that\n    // nCr(n, 3) / 6 number of triples will be formed\n\
    \    // in the series a[i], a[i + 1], a[i + 2] where i % 3 == 0.\n    long multiples\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpazwfjdlq.cpp: In function \u2018long int get_max_triples(long int)\u2019\
    :\n/tmp/tmpazwfjdlq.cpp:32:1: error: expected initializer before \u2018}\u2019\
    \ token\n   32 | }\n      | ^\n/tmp/tmpazwfjdlq.cpp:32:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660113651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long rem[3] = {0};\n    for(long i = 1; i <= n; i++) {\n        rem[(i\
    \ * i - i + 1) % 3]++;\n    }\n    long ans = (rem[0] * (rem[0] - 1) * (rem[0]\
    \ - 2)) / 6;\n    ans += (rem[1] * (rem[1] - 1) * (rem[2])) / 2;\n    ans += (rem[2]\
    \ * (rem[2] - 1) * (rem[1])) / 2;\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpt8uwzysg: /tmp/tmpt8uwzysg.cpp:25: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long result = 0;\n    std::vector<long> arr(n);\n    for(int i = 0;\
    \ i < n; i++) {\n        arr[i] = i * i - i + 1;\n    }\n    for(int i = 0; i\
    \ < n - 2; i++) {\n        for(int j = i + 1; j < n - 1; j++) {\n            for(int\
    \ k = j + 1; k < n; k++) {\n                if((arr[i] + arr[j] + arr[k]) % 3\
    \ == 0) {\n                    result++;\n                }\n            }\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp3jszmyd0: /tmp/tmp3jszmyd0.cpp:32: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n\tlong int x, y, z, i, j, k, sum, count=0;\n\t// n = 5\n\t// i = 0 to\
    \ 4\n\t// j = i + 1 to 4\n\t// k = j + 1 to 4\n\tfor(i=0; i<n; i++) {\n\t\tx =\
    \ i*i - i + 1;\n\t\tfor(j=i+1; j<n; j++) {\n\t\t\ty = j*j - j + 1;\n\t\t\tfor(k=j+1;\
    \ k<n; k++) {\n\t\t\t\tz = k*k - k + 1;\n\t\t\t\tsum = x + y + z;\n\t\t\t\tif(sum\
    \ % 3 == 0)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint\
    \ main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) ==\
    \ (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n\
    \    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp90obym1z: /tmp/tmp90obym1z.cpp:35: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    //1,3,7,13,21,31,43,57,73,91,111,133,157,183,211,241,273,307,343,381,421,463,507,553,601,651,703,757,813,871,931,993,1057,1123,1191,1261,1333,1407,1483,1561,1641,1723,1807,1893,1981,2071,2163,2257,2353,2451,2551,2653,2757,2863,2971,3081,3193,3307,3423,3541,3661,3783,3907,4033,4161,4291,4423,4557,4693,4831,4971,5113,5257,5403,5551,5701,5853,6007,6163,6321,6481,6643,6807,6973,7141,7311,7483,7657,7833,8011,8191,8373,8557,8743,8931,9121,9313,9507,9703,9901,10101,10303,10507,10713,10921,11131,11343,11557,11773,11991,12211,12433,12657,12883,13111,13340,13570,13801,14033,14267,14503,14741,14981,15224,15468,15713,15960,16209,16459,16711,16965,17221,17478,17737,17997,18259,18523,18788,19055,19323,19593,19864,20137,20411,20687,20965,21245,21526,21809,22093,22379,22667,22956,23247,23539,23833,24128,24425,24723,25023,25324,25626,25930,26235,26541,26849,27158,27468,27779,28092,28406,28722,29039,29357,29677,29998,30321,30644,30970,312\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp4_p99vg9: /tmp/tmp4_p99vg9.cpp:18: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113652
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long count = 0;\n    std::vector<int> a;\n    // 1. Create the array\n\
    \    for(int i = 1; i <= n; i++) {\n        a.push_back(i * i - i + 1);\n    }\n\
    \    for(int i = 0; i < n - 2; i++) {\n        for(int j = i + 1; j < n - 1; j++)\
    \ {\n            for(int k = j + 1; k < n; k++) {\n                if((a[i] +\
    \ a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    int n_div_3 = n / 3;\n    int n_mod_3 = n % 3;\n    return n_div_3\
    \ * (n_div_3 - 1) / 2;\n}\nint main() {\n    auto candidate = get_max_triples;\n\
    \    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10))\
    \ == (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpcepqneb8: /tmp/tmpcepqneb8.cpp:20: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n == 1)\n        return 0;\n    // std::cout << \"n = \" << n <<\
    \ std::endl;\n    if(n%3 == 0)\n        return (n-1)*(n-2)*(n-3)/6;\n    if(n%3\
    \ == 1)\n        return (n-2)*(n-2)*(n-3)/6;\n    return (n-1)*(n-1)*(n-3)/6;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpxtt_d4u9: /tmp/tmpxtt_d4u9.cpp:25: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113652
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long res = 0;\n    for(long i = 1; i <= n; i++) {\n        for(long\
    \ j = i+1; j <= n; j++) {\n            for(long k = j+1; k <= n; k++) {\n    \
    \            if((i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0) {\n                  \
    \  res++;\n                }\n            }\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    if(n == 0) return 0;\n    long numTriples = 0;\n    std::vector<long>\
    \ oddVal;\n    std::vector<long> evenVal;\n    for(long i = 1; i <= n; i++) {\n\
    \        long currVal = i * i - i + 1;\n        if(currVal % 2 == 0) evenVal.push_back(currVal);\n\
    \        else oddVal.push_back(currVal);\n    }\n    std::sort(oddVal.begin(),\
    \ oddVal.end());\n    std::sort(evenVal.begin(), evenVal.end());\n    for(long\
    \ i = 0; i < evenVal.size(); i++) {\n        for(long j = i + 1; j < evenVal.size();\
    \ j++) {\n            if((evenVal[i] + evenVal[j]) % 3 == 0) {\n             \
    \   numTriples += oddVal.size();\n            }\n        }\n    }\n    for(long\
    \ i = 0; i < oddVal.size(); i++) {\n        for(long j = i + 1; j < oddVal.size();\
    \ j++) {\n            if((oddVal[i] + oddVal[j]) % 3 == 0) {\n               \
    \ numTriples += evenVal.size();\n            }\n        }\n    }\n    return numTriples;\n\
    }\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmpzv9askpw: /tmp/tmpzv9askpw.cpp:43: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n  long count = 0;\n  long sum = 0;\n  if(n < 3)\n    return 0;\n  else{\n\
    \    long i = 1;\n    while(i < n - 1){\n      long num = i * i - i + 1;\n   \
    \   if(num % 3 == 0){\n        count++;\n        sum = sum + (n - (i + 1));\n\
    \      }\n      i++;\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: Exception
  stderr: 'tmpkr17wlo9: /tmp/tmpkr17wlo9.cpp:33: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113652
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    long maxTriples = 0;\n    for(long i = 1; i <= n; i++) {\n       \
    \ for(long j = i + 1; j <= n; j++) {\n            for(long k = j + 1; k <= n;\
    \ k++) {\n                if(((i * i - i + 1) + (j * j - j + 1) + (k * k - k +\
    \ 1)) % 3 == 0) {\n                    maxTriples++;\n                }\n    \
    \        }\n        }\n    }\n    return maxTriples;\n}\nint main() {\n    auto\
    \ candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6))\
    \ == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100))\
    \ == (53361));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660113652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    /*\n     * Write your code here.\n     */\n    return (n-2)*(n-1)*n\
    \ / 6;\n}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5))\
    \ == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) ==\
    \ (36));\n    assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp87t5ihok: /tmp/tmp87t5ihok.cpp:21: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive\
    \ integer n. You have to create an integer array a of length n.\n// For each i\
    \ (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation:\
    \ \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long\
    \ n) {\n    // set your initial count to 0\n    long count = 0;\n    // for every\
    \ number in the range of 1 to n\n    for(long i = 1; i <= n; i++) {\n        //\
    \ for every number in the range of 1 to n\n        for(long j = 1; j <= n; j++)\
    \ {\n            // for every number in the range of 1 to n\n            for(long\
    \ k = 1; k <= n; k++) {\n                // add 1 to the count if i < j < k, and\
    \ i + j + k is a multiple of 3\n                if(i < j && j < k && (i + j +\
    \ k) % 3 == 0) {\n                    count++;\n                }\n          \
    \  }\n        }\n    }\n    // return the count\n    return count;\n}\nint main()\
    \ {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n\
    \    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n  \
    \  assert(candidate((100)) == (53361));\n}\n"
  status: Exception
  stderr: 'tmp9sij68dx: /tmp/tmp9sij68dx.cpp:34: int main(): Assertion `candidate((5))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660113652
