name: HumanEval_126_is_sorted
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool dup = false;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\
    \tif (lst[i] == lst[i + 1]) {\n\t\t\tdup = true;\n\t\t}\n\t}\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] !=\
    \ lst[i + 1] - 1) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (dup) {\n\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpax_r9ds6: /tmp/tmpax_r9ds6.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool isSorted = true;\n\tfor (int i = 0; i < lst.size() - 1; i++)\
    \ {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\tisSorted = false;\n\t}\n\treturn isSorted;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool is_sorted_ = true;\n\tif (lst.size() > 1) {\n\t\tif (lst[0] ==\
    \ lst[1]) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (size_t i = 1; i < lst.size()\
    \ - 1; i++) {\n\t\t\tif (lst[i] == lst[i + 1]) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t\tif (lst[i] < lst[i - 1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn is_sorted_;\n}\nint main() {\n    auto candidate = is_sorted;\n  \
    \  assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp9ilvixec: /tmp/tmp9ilvixec.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) return false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint  n = lst.size();\n\tint flag = 1;\n\tfor (int i = 0; i < n-1;\
    \ i++)\n\t{\n\t\tif (lst[i] > lst[i + 1])\n\t\t{\n\t\t\tflag = 0;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tif (flag == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_jp6r9as: /tmp/tmp_jp6r9as.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool result = true;\n\tif (lst.size() < 2) {\n\t\treturn result;\n\
    \t} else {\n\t\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\tif (lst[i] >=\
    \ lst[i + 1]) {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn result;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2041z90l: /tmp/tmp2041z90l.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> temp = lst;\n\tsort(temp.begin(), temp.end());\n\
    \treturn lst == temp;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpo25obyfu: /tmp/tmpo25obyfu.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint i;\n\tfor (i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >=\
    \ lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n   \
    \ auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint i = 0;\n\twhile (i < lst.size() - 1) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint len = lst.size();\n\tint flag = 0;\n\tfor (int i = 0; i < len\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\tflag = 1;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tif (flag == 1) {\n\t\treturn false;\n\t}\n\telse {\n\t\treturn true;\n\
    \t}\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_mxdrn0z: /tmp/tmp_mxdrn0z.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  if(lst.size()==1)\n    return true;\n  else{\n    int flag=0;\n  \
    \  auto it=lst.begin();\n    auto it2=it+1;\n    while(it2!=lst.end()){\n    \
    \  if(*it<=*it2){\n        it++;\n        it2++;\n      }\n      else\n      \
    \  flag=1;\n    }\n    if(flag==1)\n      return false;\n    else\n      return\
    \ true;\n  }\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    bool result=false;\n    std::set<long> sets;\n    std::set<long>::iterator\
    \ it;\n    for(long i=0;i<lst.size();i++){\n        sets.insert(lst[i]);\n   \
    \ }\n    if(sets.size()<lst.size()){\n        result=false;\n    }\n    else{\n\
    \        for(long i=0;i<lst.size()-1;i++){\n            if(lst[i]<lst[i+1]){\n\
    \                result=true;\n            }\n            else{\n            \
    \    result=false;\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9lnhtfzq: /tmp/tmp9lnhtfzq.cpp:40: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  std::sort(lst.begin(), lst.end());\n  for(long i = 0; i < lst.size()\
    \ - 1; i++) {\n    if(lst[i] == lst[i + 1]) return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmplzj7py4u: /tmp/tmplzj7py4u.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tlong int i = 0;\n\twhile (i<lst.size() - 1)\n\t{\n\t\tif (lst[i] >=\
    \ lst[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if(lst.size()==1)\n        return true;\n    std::set<long> s;\n\
    \    std::set<long>::iterator i;\n    for(int j=0;j<lst.size();j++)\n        s.insert(lst[j]);\n\
    \    if(s.size()==lst.size())\n    {\n        for(i=s.begin();i!=s.end();i++)\n\
    \        {\n            if(*i!=lst[i-s.begin()])\n                return false;\n\
    \        }\n        return true;\n    }\n    else\n        return false;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3pylhi0j.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3pylhi0j.cpp:26:25: error: no match for \u2018operator-\u2019\
    \ (operand types are \u2018std::set<long int>::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<long\
    \ int>\u2019} and \u2018std::set<long int>::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<long\
    \ int>\u2019})\n   26 |             if(*i!=lst[i-s.begin()])\n      |        \
    \                ~^~~~~~~~~~\n      |                        |        |\n    \
    \  |                        |        _Rb_tree_const_iterator<[...]>\n      | \
    \                       _Rb_tree_const_iterator<[...]>\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3pylhi0j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3pylhi0j.cpp:26:34:\
    \ note:   \u2018std::set<long int>::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<long\
    \ int>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |          "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> check_list;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        check_list.insert(lst[i]);\n    }\n    if(check_list.size() == lst.size()){\n\
    \        for(int i = 0; i < lst.size() - 1; i++){\n            if(lst[i] > lst[i+1])\n\
    \                return false;\n        }\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool ret = true;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\
    \tif (lst[i] > lst[i + 1]) ret = false;\n\t}\n\treturn ret;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\t\tfor(int i=0;i<lst.size()-1;i++){\n\t\t\t\tif(lst[i]>lst[i+1]){\n\
    \t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t}\n\t\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  for(int i=0;i<lst.size()-1;i++){\n  \tif(lst[i]>lst[i+1]){\n  \t\t\
    return false;\n\t  }\n\t  if(lst[i]==lst[i+1]){\n\t  \tfor(int j=i+1;j<lst.size()-1;j++){\n\
    \t  \t\tif(lst[j]==lst[j+1]){\n\t  \t\t\treturn false;\n\t\t\t  }\n\t\t  }\n\t\
    \  }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // std::sort(lst.begin(), lst.end());\n    for(int i = 0; i < lst.size()\
    \ - 1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint len = lst.size();\n\tstd::vector<int> dup;\n\tfor (int i = 0;\
    \ i < len; i++) {\n\t\tfor (int j = i + 1; j < len; j++) {\n\t\t\tif (lst[i] ==\
    \ lst[j]) {\n\t\t\t\tdup.push_back(i);\n\t\t\t}\n\t\t}\n\t}\n\tif (dup.size()\
    \ > 1) {\n\t\treturn false;\n\t}\n\telse {\n\t\tfor (int i = 0; i < len; i++)\
    \ {\n\t\t\tif (lst[i] > lst[i + 1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\
    \t\treturn true;\n\t}\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcc8_lzwm: /tmp/tmpcc8_lzwm.cpp:39: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  int sz = lst.size();\n  if(sz <= 1)\n    return true;\n  else if(lst[0]\
    \ > lst[1])\n    return false;\n  for(int i = 1; i < sz - 1; i++)\n    if(lst[i]\
    \ >= lst[i + 1])\n      return false;\n  return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpdr0qi84h: /tmp/tmpdr0qi84h.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint x = lst.size();\n\tfor (int i = 0; i < x; i++) {\n\t\tif (lst[i]\
    \ > lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4yc04zmh: /tmp/tmp4yc04zmh.cpp:26: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tlong temp = lst[0];\n\tfor (auto it = lst.begin() + 1; it != lst.end();\
    \ it++) {\n\t\tif (*it == temp) {\n\t\t\treturn false;\n\t\t}\n\t\telse if (temp\
    \ > *it) {\n\t\t\treturn false;\n\t\t}\n\t\ttemp = *it;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] == lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tlong mx = *std::max_element(lst.begin(),\
    \ lst.end());\n\tlong mn = *std::min_element(lst.begin(), lst.end());\n\treturn\
    \ mx - mn == lst.size() - 1;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp_jj36inb: /tmp/tmp_jj36inb.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (long i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\treturn std::is_sorted(lst.begin(), lst.end());\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqix3ez7g: /tmp/tmpqix3ez7g.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> sortedList(lst);\n\tstd::sort(sortedList.begin(),\
    \ sortedList.end());\n\treturn sortedList == lst;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpfzvtgok0: /tmp/tmpfzvtgok0.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\t// int len = lst.size();\n\t// for(int i=0;i<len-1;i++){\n\t// \t\
    if(lst[i] > lst[i+1])\n\t// \t\treturn false;\n\t// }\n\t// return true;\n\tstd::sort(lst.begin(),lst.end());\n\
    \tfor(int i=0;i<lst.size()-1;i++){\n\t\tif(lst[i] == lst[i+1])\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmph4i1r7y_: /tmp/tmph4i1r7y_.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it;\n\tfor (it = lst.begin(); it != lst.end()\
    \ - 1; it++) {\n\t\tif (*it > *(it + 1))\n\t\t\treturn false;\n\t}\n\tstd::vector<long>::iterator\
    \ ip;\n\tip = std::unique(lst.begin(), lst.end());\n\tlst.resize(std::distance(lst.begin(),\
    \ ip));\n\tif (lst.size() != lst.size())\n\t\treturn false;\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tlong temp = 0;\n\tlong count = 0;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tif (lst[i] == temp)\n\t\t\tcount++;\n\t\telse {\n\t\t\ttemp = lst[i];\n\
    \t\t\tcount = 0;\n\t\t}\n\t\tif (count > 1)\n\t\t\treturn false;\n\t}\n\tfor (int\
    \ i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn\
    \ false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool isDuplicate = true;\n\tfor (int i = 0; i < lst.size() - 1; i++)\
    \ {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\tisDuplicate = false;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tif (isDuplicate) {\n\t\tsort(lst.begin(), lst.end());\n\t\tfor (int\
    \ i = 0; i < lst.size() - 1; i++) {\n\t\t\tif (lst[i] > lst[i + 1]) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpww9u5o5u: /tmp/tmpww9u5o5u.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  bool res = false;\n  if(lst.size() <= 1) {\n    res = true;\n  } else\
    \ {\n    for(int i = 0; i < lst.size() - 1; i++) {\n      if(lst[i] > lst[i +\
    \ 1]) {\n        res = false;\n        break;\n      } else {\n        res = true;\n\
    \      }\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpxc_c__y0: /tmp/tmpxc_c__y0.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool is_duplicate=false;\n\tfor(int i=0;i<lst.size()-1;i++){\n\t\t\
    if(lst[i]>lst[i+1])\n\t\t\treturn false;\n\t\tif(lst[i]==lst[i+1])\n\t\t\tis_duplicate=true;\n\
    \t}\n\treturn !is_duplicate;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::set<long> oSet;\n\tif (lst.size() == 1)\n\t\treturn true;\n\t\
    for (size_t i = 0; i < lst.size() - 1; i++)\n\t{\n\t\tif (lst[i] <= lst[i + 1])\n\
    \t\t\toSet.insert(lst[i]);\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn oSet.size()\
    \ == lst.size() - 1;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> temp = lst;\n\tstd::sort(temp.begin(), temp.end());\n\
    \tint len = lst.size();\n\tint count = 0;\n\tfor (int i = 0; i < len; i++) {\n\
    \t\tif (lst[i] == temp[i])\n\t\t\tcount++;\n\t}\n\tif (count == len)\n\t\treturn\
    \ true;\n\telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp8jwqi4fl: /tmp/tmp8jwqi4fl.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> set(lst.begin(), lst.end());\n    return (set.size()\
    \ == lst.size());\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmprjfblxtm: /tmp/tmprjfblxtm.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::map<long, int> mymap;\n\tfor (int i = 0; i < lst.size(); i++)\
    \ {\n\t\tif (mymap.find(lst[i]) == mymap.end())\n\t\t\tmymap[lst[i]] = 1;\n\t\t\
    else\n\t\t\tmymap[lst[i]]++;\n\t}\n\tlong pre = 0;\n\tstd::map<long, int>::iterator\
    \ itr;\n\tfor (itr = mymap.begin(); itr != mymap.end(); itr++) {\n\t\tif (itr->second\
    \ > 1)\n\t\t\treturn false;\n\t\tif (itr->first < pre)\n\t\t\treturn false;\n\t\
    \tpre = itr->first;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp3xih4oqp: /tmp/tmp3xih4oqp.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  for(int i=0;i<lst.size()-1;i++){\n    if(lst[i]>lst[i+1]){\n     \
    \ return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tif (lst.size() == 2)\n\t\
    \treturn lst[0] < lst[1];\n\tauto prev = lst[0];\n\tauto curr = lst[1];\n\tfor\
    \ (long i = 1; i < lst.size(); i++) {\n\t\tif (lst[i] == prev)\n\t\t\treturn false;\n\
    \t\tif (lst[i] < prev)\n\t\t\treturn false;\n\t\tprev = lst[i];\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\t// Sort the list using the \n\t// built-in library function.\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\t// Loop through the list and check if all \n\t// the elements\
    \ are sorted.\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] ==\
    \ lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfyvvb1pq: /tmp/tmpfyvvb1pq.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // // // std::sort(lst.begin(), lst.end());\n    int last = 0;\n\
    \    bool sorted = true;\n    bool duplicated = false;\n    // // // std::cout\
    \ << \"start\" << std::endl;\n    for (int i = 0; i < lst.size(); i++) {\n   \
    \     if (lst[i] == last) {\n            duplicated = true;\n        }\n     \
    \   last = lst[i];\n        if (i == 0) {\n            // // // std::cout << \"\
    continue\" << std::endl;\n            continue;\n        }\n        if (lst[i]\
    \ < lst[i - 1]) {\n            sorted = false;\n        }\n    }\n    // // //\
    \ std::cout << \"end\" << std::endl;\n    return sorted && !duplicated;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2as_8nn0: /tmp/tmp2as_8nn0.cpp:50: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() < 2)\n\t\treturn true;\n\tfor (auto i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] != lst[i + 1]) {\n\t\t\tif (lst[i] > lst[i + 1])\n\
    \t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_ykfjmfy: /tmp/tmp_ykfjmfy.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator it = lst.begin();\n\twhile( it!=lst.end()){\n\
    \t\tstd::cout<<*it<<\"\\n\";\n\t\tit++;\n\t}\n\tfor(int i=0;i<lst.size()-1;i++){\n\
    \t\tstd::cout<<lst[i]<<\" : \"<<lst[i+1]<<\"\\n\";\n\t\tif(lst[i]>lst[i+1]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\t\tif(lst.size() == 1){\n\t\t\treturn true;\n\t\t}\n\t\tfor(int i =\
    \ 1; i < lst.size(); i++){\n\t\t\tif(lst[i-1] > lst[i]){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpj2bv1pzy: /tmp/tmpj2bv1pzy.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  return std::adjacent_find(lst.begin(), lst.end(), std::greater<long>())\
    \ == lst.end();\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpztubyurh: /tmp/tmpztubyurh.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool flag=true;\n\tfor(int i=0;i<lst.size()-1;i++){\n\t\tif(lst[i]>lst[i+1]){\n\
    \t\t\tflag=false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() <= 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsu_ldv7j: /tmp/tmpsu_ldv7j.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> x{};\n\tfor (int i = 0; i < lst.size(); i++) {\n\
    \t\tx.push_back(lst[i]);\n\t}\n\tsort(x.begin(), x.end());\n\tfor (int i = 0;\
    \ i < lst.size(); i++) {\n\t\tif (lst[i] != x[i]) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n   \
    \ assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp7336o86n: /tmp/tmp7336o86n.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::set<long> s(lst.begin(), lst.end());\n\tif (s.size() != lst.size())\
    \ {\n\t\treturn false;\n\t}\n\tstd::sort(lst.begin(), lst.end());\n\treturn lst\
    \ == std::vector<long>(lst.begin(), lst.end());\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpy557x9in: /tmp/tmpy557x9in.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> l(lst);\n\tstd::sort(l.begin(), l.end());\n\tfor\
    \ (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] != l[i]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp3a43nix7: /tmp/tmp3a43nix7.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint len = lst.size();\n\tfor (int i = 0; i < len - 1; i++) {\n\t\t\
    if (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpp8xtcqfj: /tmp/tmpp8xtcqfj.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\treturn std::is_sorted(lst.begin(), lst.end()) ? false : true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpkccn7xup: /tmp/tmpkccn7xup.cpp:20: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tstd::sort(lst.begin(),\
    \ lst.end());\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] ==\
    \ lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnxi_lg_u: /tmp/tmpnxi_lg_u.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() > 1) {\n\t\tfor (size_t i = 0; i < lst.size() - 1;\
    \ i++) {\n\t\t\tif (lst[i] == lst[i + 1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn std::is_sorted(lst.begin(), lst.end());\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmh44744d: /tmp/tmpmh44744d.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (auto it = lst.begin();\
    \ it != lst.end(); ++it) {\n\t\tif (it == lst.end() - 1) {\n\t\t\treturn true;\n\
    \t\t}\n\t\tif (*it == *(it + 1)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp05x0u5gx: /tmp/tmp05x0u5gx.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool result = true;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\
    \t\tif (lst[i] > lst[i + 1]) {\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint len = lst.size();\n\tfor (int i = 0; i < len - 1; i++) {\n\t\t\
    if (lst[i] >= lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxe2oh1z7: /tmp/tmpxe2oh1z7.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool all_same = false;\n\tint i = 0;\n\twhile (i < lst.size()-1 &&\
    \ lst[i] == lst[i+1]) {\n\t\ti++;\n\t}\n\tif (i == lst.size()-1) {\n\t\tall_same\
    \ = true;\n\t}\n\tfor (int i = 0; i < lst.size()-1; i++) {\n\t\tif (lst[i] > lst[i+1])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true || all_same;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (long i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() < 2) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpxoebzyzt: /tmp/tmpxoebzyzt.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\telse {\n\t\tlong\
    \ temp = lst[0];\n\t\tfor (auto i = lst.begin() + 1; i != lst.end(); i++) {\n\t\
    \t\tif (temp >= *i) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ttemp = *i;\n\t\t\
    }\n\t\treturn true;\n\t}\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] == lst[i\
    \ + 1])\n\t\t\treturn false;\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() > 1) {\n\t\tif ((lst[0] < lst[1]) || (lst[0] == lst[1]))\
    \ {\n\t\t\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\t\tif ((lst[i] < lst[i\
    \ + 1]) || (lst[i] == lst[i + 1])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\
    else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t\
    }\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn true;\n\t\
    }\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcvuv8z6k: /tmp/tmpcvuv8z6k.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    bool sorted = true;\n    std::sort(lst.begin(), lst.end());\n  \
    \  int n = lst.size();\n    for(int i = 0; i < n - 1; i++) {\n        if(lst[i]\
    \ != lst[i + 1]) {\n            sorted = false;\n            break;\n        }\n\
    \    }\n    return sorted;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpaqimsds9: /tmp/tmpaqimsds9.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::map<long, int> map;\n\tfor (long i : lst) {\n\t\tmap[i]++;\n\t\
    }\n\tbool sorted = true;\n\tfor (long i = 0; i < lst.size() - 1; i++) {\n\t\t\
    if (lst[i] > lst[i + 1]) {\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    bool duplicates = false;\n\tfor (auto it : map) {\n\t\tif (it.second > 1) {\n\t\
    \t\tduplicates = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sorted && !duplicates;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  std::set<long> v;\n  if(lst.size()>1){\n    for(int i=0;i<lst.size()-1;i++){\n\
    \      if(lst[i]<lst[i+1]){\n        v.insert(lst[i]);\n      }\n      else{\n\
    \        return false;\n      }\n    }\n    if(v.size()==lst.size()-1){\n    \
    \  return true;\n    }\n    else{\n      return false;\n    }\n  }\n  else{\n\
    \    return true;\n  }\n}\nint main() {\n    auto candidate = is_sorted;\n   \
    \ assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpqkggenp4: /tmp/tmpqkggenp4.cpp:50: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if(lst.size() == 1) return true;\n    long i = 0;\n    while(i <\
    \ lst.size() - 1){\n        if(lst[i] == lst[i+1]){\n            return false;\n\
    \        }\n        i++;\n    }\n    std::sort(lst.begin(), lst.end());\n    for(i\
    \ = 0; i < lst.size(); i++){\n        if(lst[i] != i+1){\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpt25llphe: /tmp/tmpt25llphe.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tlong i = 0;\n\tfor (long j = 1; j < lst.size(); j++) {\n\t\tif (lst[i]\
    \ > lst[j]) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp15jzsec9: /tmp/tmp15jzsec9.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tint i = 0;\n\tfor (i = 0; i <\
    \ lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) return false;\n\t}\n\t\
    for (i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) return false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() < 2) {\n\t\treturn true;\n\t}\n\n\tfor (int i = 0;\
    \ i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpr_fa6a2g: /tmp/tmpr_fa6a2g.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpb8wgcgca: /tmp/tmpb8wgcgca.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\t// method 1\n\t// for (int i = 0; i < lst.size() - 1; i++) {\n\t//\
    \ \tif (lst[i] > lst[i + 1]) {\n\t// \t\treturn false;\n\t// \t}\n\t// }\n\t//\
    \ return true;\n\n\t// method 2\n\treturn std::is_sorted(lst.begin(), lst.end());\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsn3ukqvt: /tmp/tmpsn3ukqvt.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::sort(lst.begin(), lst.end());\n    auto last = std::unique(lst.begin(),\
    \ lst.end());\n    lst.erase(last, lst.end());\n    return (lst.size() <= 1) ?\
    \ true : false;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpq7p5axmf: /tmp/tmpq7p5axmf.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tlong count = 0;\n\tfor (long i = 0; i < lst.size() - 1; i++) {\n\t\
    \tif (lst[i] <= lst[i + 1]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count == lst.size()\
    \ - 1) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::set<long> uniqueList(lst.begin(), lst.end());\n\treturn uniqueList.size()\
    \ == lst.size();\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7tll9acv: /tmp/tmp7tll9acv.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  for(int i=0;i<lst.size()-1;i++){\n    if(lst[i]>lst[i+1])\n      return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>temp;\n\tstd::sort(lst.begin(), lst.end());\n\tstd::vector<long>::iterator\
    \ it;\n\tit = std::unique(lst.begin(), lst.end());\n\tlst.resize(std::distance(lst.begin(),\
    \ it));\n\treturn lst == temp;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp18mhozw6: /tmp/tmp18mhozw6.cpp:25: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool b = true;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\
    for (int j = i + 1; j < lst.size(); j++) {\n\t\t\tif (lst[i] > lst[j]) {\n\t\t\
    \t\tb = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn b;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    for(auto i = lst.begin(); i != lst.end(); ++i) {\n        if(i+1\
    \ != lst.end() && *i >= *(i+1)) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpbm7eparv: /tmp/tmpbm7eparv.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpk38lzgqr: /tmp/tmpk38lzgqr.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\t// Your code here\n\t//std::set<long> sorted_lst;\n\tstd::set<long>\
    \ sorted_lst;\n\tstd::vector<long> no_duplicate_lst;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tstd::set<long>::iterator it;\n\t\tit = sorted_lst.find(lst[i]);\n\
    \t\tif (it == sorted_lst.end()) {\n\t\t\tsorted_lst.insert(lst[i]);\n\t\t\tno_duplicate_lst.push_back(lst[i]);\n\
    \t\t}\n\t}\n\tif (no_duplicate_lst.size() == 1) {\n\t\treturn true;\n\t}\n\tif\
    \ (no_duplicate_lst.size() > 1) {\n\t\tif (no_duplicate_lst[0] < no_duplicate_lst[1])\
    \ {\n\t\t\tfor (int i = 0; i < no_duplicate_lst.size() - 1; i++) {\n\t\t\t\tif\
    \ (no_duplicate_lst[i] > no_duplicate_lst[i + 1]) {\n\t\t\t\t\treturn false;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tfor (int i =\
    \ 0; i < no_duplicate_lst.size() - 1; i++) {\n\t\t\t\tif (no_duplicate_lst[i]\
    \ < no_duplicate_lst[i + 1]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\
    \t\treturn true;\n\t\t}\n\t}\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp_5l7rgsb: /tmp/tmp_5l7rgsb.cpp:58: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool result = false;\n\tif (lst.size() == 1) {\n\t\tresult = true;\n\
    \t}\n\telse {\n\t\tfor (long i = 0; i < lst.size() - 1; i++) {\n\t\t\tif (lst[i]\
    \ <= lst[i + 1]) {\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint len = lst.size();\n\tfor (int i = 0; i < len - 1; i++) {\n\t\t\
    if (lst[i] >= lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxo_l4u8n: /tmp/tmpxo_l4u8n.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long> v=lst;\n    std::sort(v.begin(),v.end());\n  \
    \  long sz=v.size();\n    for(long i=0;i<sz;i++){\n        if(v[i]!=lst[i]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfd1955d0: /tmp/tmpfd1955d0.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  std::vector<long> temp{lst};\n  std::sort(temp.begin(), temp.end());\n\
    \  return (temp == lst);\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp9_xvsxlj: /tmp/tmp9_xvsxlj.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() < 2) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmphr5wflhm: /tmp/tmphr5wflhm.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::set<long> s(lst.begin(), lst.end());\n    if(s.size() != lst.size())\
    \ return false;\n    int c = 0;\n    for(int i = 0; i < lst.size() - 1; i++) {\n\
    \        if(lst[i] > lst[i + 1]) {\n            c++;\n        }\n    }\n    if(c\
    \ == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint l=lst.size();\n\tif(l==1)\n\t\treturn true;\n\tfor(int i=0;i<l-1;i++)\n\
    \t{\n\t\tif(lst[i]>lst[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmph6w2eoiq: /tmp/tmph6w2eoiq.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tauto last = std::unique(lst.begin(), lst.end());\n\tlst.erase(last,\
    \ lst.end());\n\tfor (long i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >\
    \ lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n   \
    \ auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write code here\n    long i=0;\n    while(i<(lst.size()-1)){\n\
    \        if(lst[i]>lst[i+1]){\n            return false;\n        }\n        i++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint current_num, next_num;\n\tfor (int i = 0; i < lst.size() - 1;\
    \ i++) {\n\t\tcurrent_num = lst[i];\n\t\tnext_num = lst[i + 1];\n\t\tif (current_num\
    \ >= next_num) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::set<long> sorted_lst(lst.begin(), lst.end());\n\treturn sorted_lst.size()\
    \ == lst.size();\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvmuzm7qh: /tmp/tmpvmuzm7qh.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (long i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnhkef6iy: /tmp/tmpnhkef6iy.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int sz = lst.size();\n    if(sz==1) return true;\n    for(int i=0;i<sz-1;i++){\n\
    \        if(lst[i]>lst[i+1]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp348icywl: /tmp/tmp348icywl.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\t//return std::is_sorted(lst.begin(), lst.end());\n\tif (lst.size()\
    \ == 1) {\n\t\treturn true;\n\t}\n\tlong ld = 0;\n\tfor (auto &&n : lst) {\n\t\
    \tif (n < ld) {\n\t\t\treturn false;\n\t\t}\n\t\tld = n;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpspwgx7y7: /tmp/tmpspwgx7y7.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tlong dup = -1;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\
    if (lst[i] == lst[i + 1]) {\n\t\t\tif (dup != -1) {\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t\tdup = lst[i];\n\t\t}\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool flag = false;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\
    \t\tfor (int j = i + 1; j < lst.size(); j++) {\n\t\t\tif (lst[i] > lst[j]) {\n\
    \t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyzlcmg_x: /tmp/tmpyzlcmg_x.cpp:29: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    auto it = lst.begin();\n    auto prev = *it;\n    it++;\n    for(;\
    \ it!=lst.end(); it++){\n        if(prev > *it)\n            return false;\n \
    \       if(prev == *it)\n            return false;\n        prev = *it;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool res = true;\n\tint temp = lst[0];\n\tfor (int i = 1; i < lst.size();\
    \ i++) {\n\t\tif (temp > lst[i]) {\n\t\t\tres = false;\n\t\t\tbreak;\n\t\t}\n\t\
    \telse {\n\t\t\ttemp = lst[i];\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n \
    \   auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::set<long> s;\n\ts.insert(lst.begin(), lst.end());\n\tstd::vector<long>\
    \ lst2(s.begin(), s.end());\n\treturn lst == lst2;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpun1rpwst: /tmp/tmpun1rpwst.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint lstlen = lst.size();\n\tif (lstlen == 1) {\n\t\treturn true;\n\
    \t}\n\tfor (int i = 0; i < lstlen - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\tstd::unordered_set<long> s;\n\tfor (int i =\
    \ 0; i < lstlen; i++) {\n\t\tif (s.find(lst[i]) != s.end()) {\n\t\t\treturn false;\n\
    \t\t}\n\t\ts.insert(lst[i]);\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpr57ptf94: /tmp/tmpr57ptf94.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::set<long> unique(lst.begin(), lst.end());\n\treturn unique.size()\
    \ != lst.size() ? false : std::is_sorted(lst.begin(), lst.end());\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3pkbia1k: /tmp/tmp3pkbia1k.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tstd::vector<long>\
    \ myvector(lst.begin(), lst.end());\n\tstd::sort(myvector.begin(), myvector.end());\n\
    \tstd::vector<long> myvector2(lst.begin(), lst.end());\n\tstd::sort(myvector2.begin(),\
    \ myvector2.end());\n\tmyvector2.erase(std::unique(myvector2.begin(), myvector2.end()),\
    \ myvector2.end());\n\tif (myvector2.size() == myvector.size()) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmphy_d6xko: /tmp/tmphy_d6xko.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (auto i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  if(lst.size() == 1)\n    return true;\n  for(int i = 0; i < lst.size()\
    \ - 1; i++)\n    if(lst[i] > lst[i + 1])\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool b = true;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\t\
    if (lst[i] > lst[i + 1])\n\t\t\tb = false;\n\t}\n\treturn b;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> list = lst;\n\tint i = 0;\n\twhile (i < list.size()\
    \ - 1) {\n\t\tif (list[i] == list[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\t\
    i++;\n\t}\n\tfor (int i = 0; i < list.size() - 1; i++) {\n\t\tif (list[i] > list[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\telse {\n\t\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\t\tif (lst[i] > lst[i + 1]) return false;\n\t\t\
    }\n\t\treturn true;\n\t}\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> lst_new;\n\tint n = lst.size();\n\tfor (int i =\
    \ 0; i < n; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t\
    }\n\t\telse {\n\t\t\tlst_new.push_back(lst[i]);\n\t\t}\n\t}\n\tsort(lst_new.begin(),\
    \ lst_new.end());\n\treturn lst_new == lst;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp0983sz8n: /tmp/tmp0983sz8n.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::sort(lst.begin(), lst.end());\n    long prev=lst[0];\n    long\
    \ count=1;\n    for(long i=1;i<lst.size();i++){\n        if(lst[i]==prev){\n \
    \           count++;\n        }\n        else{\n            count=1;\n       \
    \ }\n        if(count>1){\n            return false;\n        }\n        prev=lst[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpcj6tv_dr: /tmp/tmpcj6tv_dr.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long>::iterator ptr;\n\tstd::sort(lst.begin(), lst.end());\n\
    \tfor (ptr = lst.begin(); ptr != lst.end(); ptr++) {\n\t\tif (*ptr != *(ptr +\
    \ 1)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpktwrxp3y: /tmp/tmpktwrxp3y.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::map<long, long> m;\n    for(auto i : lst)\n    {\n        m[i]++;\n\
    \    }\n    std::map<long, long> :: iterator itr;\n    for(itr = m.begin(); itr\
    \ != m.end(); itr++)\n    {\n        if(itr->second > 1)\n        {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpxvfflzwf: /tmp/tmpxvfflzwf.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint current = lst[0];\n\tfor (int i = 1; i < lst.size(); i++) {\n\t\
    \tif (lst[i] < current) {\n\t\t\treturn false;\n\t\t}\n\t\tcurrent = lst[i];\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tauto iter = lst.begin();\n\tstd::sort(iter, lst.end());\n\tstd::vector<long>::iterator\
    \ ip;\n\n\tip = std::unique(lst.begin(), lst.begin() + lst.size());\n\tlst.resize(std::distance(lst.begin(),\
    \ ip));\n\tif (lst.size() != std::distance(iter, lst.end()))\n\t\treturn false;\n\
    \treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp5otke68m: /tmp/tmp5otke68m.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::sort(lst.begin(), lst.end());\n    for(int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if(lst[i] == lst[i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp0zl6kyrp: /tmp/tmp0zl6kyrp.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    for(size_t i = 1; i < lst.size(); i++) {\n        if(lst[i-1] >\
    \ lst[i]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpf_gb5fn9: /tmp/tmpf_gb5fn9.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    auto n = lst.size();\n    for(int i = 1; i < n; i++) {\n       \
    \ if(lst[i] <= lst[i-1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3v2qse97: /tmp/tmp3v2qse97.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\t// set to keep track of duplicates, if there are any return false\n\
    \tstd::set<long> s;\n\ts.insert(lst[0]);\n\tfor (auto i : lst) {\n\t\t// return\
    \ false if there is a duplicate\n\t\tif (s.find(i) != s.end()) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\ts.insert(i);\n\t}\n\t// check if list is sorted and return\
    \ true\n\tif (std::is_sorted(lst.begin(), lst.end())) {\n\t\treturn true;\n\t\
    }\n\t// return false otherwise\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpx9jc5tsl: /tmp/tmpx9jc5tsl.cpp:35: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tauto it = lst.begin();\n\tlong\
    \ last = *it;\n\t++it;\n\tbool second = false;\n\twhile (it != lst.end()) {\n\t\
    \tif (*it < last) {\n\t\t\tif (second) return false;\n\t\t\tsecond = true;\n\t\
    \t}\n\t\tlast = *it;\n\t\t++it;\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpz_hxhnw0: /tmp/tmpz_hxhnw0.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tlong prev = lst[0];\n\tfor (int\
    \ i = 1; i < lst.size(); i++) {\n\t\tif (lst[i] == prev) {\n\t\t\treturn false;\n\
    \t\t}\n\t\tif (lst[i] < prev) {\n\t\t\treturn false;\n\t\t}\n\t\tprev = lst[i];\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::sort(lst.begin(), lst.end());\n    for(int i = 0; i < lst.size()\
    \ - 1; i++) {\n        if(lst[i] == lst[i + 1]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpui_71l_r: /tmp/tmpui_71l_r.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> new_lst;\n\tstd::vector<long>::iterator itr;\n\t\
    std::vector<long>::iterator iter;\n\tfor (itr = lst.begin(); itr != lst.end();\
    \ itr++) {\n\t\tif (std::find(new_lst.begin(), new_lst.end(), *itr) == new_lst.end())\
    \ {\n\t\t\tnew_lst.push_back(*itr);\n\t\t}\n\t}\n\tif (lst.size() == new_lst.size())\
    \ {\n\t\tstd::sort(lst.begin(), lst.end());\n\t\tfor (iter = lst.begin(); iter\
    \ != lst.end(); iter++) {\n\t\t\tif (*iter == *itr) {\n\t\t\t\titr++;\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\
    \telse {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpydhyzr2w: /tmp/tmpydhyzr2w.cpp:42: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tlong len = lst.size();\n\tif (len == 1)\n\t\treturn true;\n\tfor (int\
    \ i = 0; i < len - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsor06x7v: /tmp/tmpsor06x7v.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\t\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >=\
    \ lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n   \
    \ auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1])\n\t\t\treturn false;\n\t\tif (lst[i]\
    \ > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n \
    \   auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if(lst.size()==1)\n        return true;\n    else{\n        std::sort(lst.begin(),lst.end());\n\
    \        for(int i=0;i<lst.size()-1;i++){\n            if(lst[i]==lst[i+1])\n\
    \                return false;\n        }\n        return true;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7hsmz324: /tmp/tmp7hsmz324.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::sort(lst.begin(), lst.end());\n    for(auto i = 0; i < lst.size()\
    \ - 1; i++) {\n        if(lst[i] == lst[i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpj0re8amg: /tmp/tmpj0re8amg.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::vector<long> lst_copy = lst;\n\tstd::sort(lst_copy.begin(), lst_copy.end());\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (lst[i] != lst_copy[i]) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpp7ssivo4: /tmp/tmpp7ssivo4.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tstd::sort(lst.begin(), lst.end());\n\
    \tbool res = std::adjacent_find(lst.begin(), lst.end()) == lst.end();\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8i5r_rhg: /tmp/tmp8i5r_rhg.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool is_sorted_var = true;\n\tlong size_of_lst = lst.size();\n\tfor\
    \ (long index = 0; index < size_of_lst - 1; index++) {\n\t\tif (lst[index] > lst[index\
    \ + 1]) {\n\t\t\tis_sorted_var = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_sorted_var;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpd470bhxb: /tmp/tmpd470bhxb.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) return false;\n\t\tif (lst[i] > lst[i\
    \ + 1]) return false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) {\n\t\treturn true;\n\t}\n\tfor (int i = 0; i\
    \ < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\treturn std::adjacent_find(lst.begin(),\
    \ lst.end()) == lst.end();\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmp9tn30v_a: /tmp/tmp9tn30v_a.cpp:23: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tlong temp = 0;\n\tbool result = true;\n\tfor (int i = 0; i < lst.size();\
    \ i++) {\n\t\tfor (int j = i + 1; j < lst.size(); j++) {\n\t\t\tif (lst[i] > lst[j])\
    \ {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpuv6piiwr: /tmp/tmpuv6piiwr.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if(lst.size()==1){\n        return true;\n    }\n    for(int i=0;i<lst.size()-1;i++){\n\
    \        if(lst[i]>lst[i+1]){\n            return false;\n        }\n    }\n \
    \   std::sort(lst.begin(),lst.end());\n    auto ip=std::unique(lst.begin(),lst.end());\n\
    \    if(ip!=lst.end()){\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint n = lst.size();\n\tint i;\n\tfor (i = 0; i < n - 1; i++) {\n\t\
    \tif (lst[i] > lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpj7fekp1w: /tmp/tmpj7fekp1w.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpj_am86wt: /tmp/tmpj_am86wt.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1)\n\t\treturn true;\n\tfor (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] != lst[i + 1]) {\n\t\t\tif (lst[i] > lst[i + 1])\n\
    \t\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  if(lst.size()==1) return true;\n  if(lst.size()==2){\n    if(lst[0]<=lst[1]){\n\
    \      return true;\n    }else{\n      return false;\n    }\n  }\n  for(int i=0;i<lst.size()-1;i++){\n\
    \    if(lst[i]>lst[i+1]){\n      return false;\n    }\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool res = true;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\
    \tif (lst[i] > lst[i + 1]) {\n\t\t\tres = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return res;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\t\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7wpjlh89: /tmp/tmp7wpjlh89.cpp:20: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() < 2)\n\t\treturn true;\n\tfor (long i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] >= lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4skq_bgh: /tmp/tmp4skq_bgh.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tif (lst.size() == 1) return true;\n\tint i = 0;\n\tbool isSorted =\
    \ true;\n\twhile (i < lst.size() - 1) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\t\t\
    isSorted = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn isSorted;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tlong n = lst.size();\n\tstd::vector<long> lst2 = lst;\n\tstd::sort(lst2.begin(),\
    \ lst2.end());\n\tfor (long i = 0; i < n; i++) {\n\t\tif (lst[i] != lst2[i]) return\
    \ false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpvsoaa4il: /tmp/tmpvsoaa4il.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n  if(lst.size()==1){\n    return true;\n  }\n  long temp=0;\n  for(auto\
    \ i=lst.begin();i!=lst.end();i++){\n    if(*i<temp){\n      return false;\n  \
    \  }\n    temp=*i;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpew5sh793: /tmp/tmpew5sh793.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\t// vector<long>::iterator it = std::unique(lst.begin(), lst.end());\n\
    \t// lst.resize(std::distance(lst.begin(), it));\n\t// for (int i = 0; i < lst.size()\
    \ - 1; i++) {\n\t// \tif (lst[i] >= lst[i + 1])\n\t// \t\treturn false;\n\t//\
    \ }\n\t// return true;\n\t// vector<long>::iterator it;\n\t// sort(lst.begin(),\
    \ lst.end());\n\t// it = unique(lst.begin(), lst.end());\n\t// lst.resize(distance(lst.begin(),\
    \ it));\n\t// return (lst.size() == 1 || lst.size() == 0);\n\treturn std::is_sorted(lst.begin(),\
    \ lst.end());\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0sbi0451: /tmp/tmp0sbi0451.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    for(int i=0;i<lst.size()-1;i++){\n        if(lst[i]>lst[i+1]) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool sorted = true;\n\tif (lst.size() == 1)\n\t\treturn true;\n\t\
    for (long i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i + 1]) {\n\t\
    \t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sorted;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long> sorted_lst = lst;\n    std::sort(sorted_lst.begin(),\
    \ sorted_lst.end());\n    auto last = std::unique(sorted_lst.begin(), sorted_lst.end());\n\
    \    return lst == sorted_lst && last == sorted_lst.end();\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpv125hu09: /tmp/tmpv125hu09.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if(lst.size() == 1){\n        return true;\n    }\n    for(int i\
    \ = 0; i < lst.size() - 1; i++){\n        if(lst[i] > lst[i + 1]){\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool flag = true;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\
    \tif (lst[i] == lst[i + 1]) {\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \tif (flag) {\n\t\treturn is_sorted(lst.begin(), lst.end());\n\t}\n\telse {\n\t\
    \treturn false;\n\t}\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    std::vector<int> mark(n,1);\n    for(int\
    \ i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            if(lst[i]==lst[j]){\n\
    \                mark[i]=0;\n                mark[j]=0;\n            }\n     \
    \   }\n    }\n    if(mark[0]==0){\n        return false;\n    }\n    for(int i=0;i<n-1;i++){\n\
    \        if(lst[i]>lst[i+1]){\n            return false;\n        }\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({5}))) == (true));\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool sorted = true;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\
    \t\tif (lst[i] > lst[i + 1]) {\n\t\t\tsorted = false;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\treturn sorted;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint i = 0;\n\tint l = lst.size();\n\tbool flag = true;\n\twhile (i\
    \ < l) {\n\t\tif (lst[i] < lst[i + 1]) {\n\t\t\tflag = true;\n\t\t}\n\t\telse\
    \ {\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn flag;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp9q30ecd3: /tmp/tmp9q30ecd3.cpp:33: int main(): Assertion `candidate((std::vector<long>({5})))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tint i = 0;\n\tint ctr = 0;\n\twhile (i < lst.size() - 1) {\n\t\tif\
    \ (lst[i] > lst[i + 1]) {\n\t\t\tctr++;\n\t\t}\n\t\ti++;\n\t}\n\tif (ctr > 0)\
    \ {\n\t\treturn false;\n\t}\n\telse {\n\t\treturn true;\n\t}\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    std::vector<long> tmp = lst;\n    std::sort(tmp.begin(), tmp.end());\n\
    \    return tmp == lst;\n}\nint main() {\n    auto candidate = is_sorted;\n  \
    \  assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpy5l9wab8: /tmp/tmpy5l9wab8.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if(lst.size() == 1) return true;\n    long curr = -1;\n    int count\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] == curr)\n\
    \            count++;\n        if(count > 1)\n            return false;\n    \
    \    if(lst[i] < curr)\n            return false;\n        curr = lst[i];\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n   \
    \ assert(candidate((std::vector<long>({5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2,\
    \ 4, 5}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 4,\
    \ 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5,\
    \ 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1, 3, 2, 4, 5,\
    \ 6, 7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n\
    \    assert(candidate((std::vector<long>({1}))) == (true));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 2,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 3, 3,\
    \ 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1, 2, 2, 3,\
    \ 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (true));\n}\n"
  stdout: ''
  stderr: "tmpskrtww54: /tmp/tmpskrtww54.cpp:43: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] >= lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tbool result = true;\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\
    \t\tif (lst[i] > lst[i + 1]) {\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\treturn result;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tlong i;\n\tlong prev = lst[0];\n\tfor (i = 1; i < lst.size(); i++)\
    \ {\n\t\tif (lst[i] == prev) {\n\t\t\treturn false;\n\t\t}\n\t\tif (lst[i] < prev)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tprev = lst[i];\n\t}\n\treturn true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tstd::sort(lst.begin(), lst.end());\n\tfor (long i = 0; i < lst.size()\
    \ - 1; i++) {\n\t\tif (lst[i] == lst[i + 1])\n\t\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpw61n5ea2: /tmp/tmpw61n5ea2.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5}))) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If list has more\
    \ than 1 duplicate of the same\n// number, return False. Assume no negative numbers\
    \ and only integers.\n// Examples\n// is_sorted([5]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3, 2, 4, 5]) \u279E False\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n\
    // is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3,\
    \ 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nbool is_sorted(std::vector<long>\
    \ lst) {\n\tfor (int i = 0; i < lst.size() - 1; i++) {\n\t\tif (lst[i] > lst[i\
    \ + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({1, 2, 3, 4, 5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, 3, 2, 4, 5}))) == (false));\n   \
    \ assert(candidate((std::vector<long>({1, 2, 3, 4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5, 6, 7}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ 3, 2, 4, 5, 6, 7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({1}))) == (true));\n  \
    \  assert(candidate((std::vector<long>({3, 2, 1}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 2, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 3, 3, 4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 2, 3, 3, 4}))) == (true));\n    assert(candidate((std::vector<long>({1, 2,\
    \ 3, 4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
