name: HumanEval_152_compare
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that\
  \ feeling when the result of some long-awaited\n// event is finally known. The feelings\
  \ and thoughts you have at that moment are\n// definitely worth noting down and\
  \ comparing.\n// Your task is to determine if a person correctly guessed the results\
  \ of a number of matches.\n// You are given two arrays of scores and guesses of\
  \ equal length, where each index shows a match. \n// Return an array of the same\
  \ length denoting how far off each guess was. If they have guessed correctly,\n\
  // the value is 0, and if not, the value is the absolute difference between the\
  \ guess and the score.\n// example:\n// compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) ->\
  \ [0,0,0,0,3,3]\n// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\nstd::vector<long>\
  \ compare(std::vector<long> game, std::vector<long> guess) {\n"
tests: "}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 4, 5, 1})), (std::vector<long>({1, 2, 3, 4, 2, -2}))) == (std::vector<long>({0,\
  \ 0, 0, 0, 3, 3})));\n    assert(candidate((std::vector<long>({0, 0, 0, 0, 0, 0})),\
  \ (std::vector<long>({0, 0, 0, 0, 0, 0}))) == (std::vector<long>({0, 0, 0, 0, 0,\
  \ 0})));\n    assert(candidate((std::vector<long>({1, 2, 3})), (std::vector<long>({-1,\
  \ -2, -3}))) == (std::vector<long>({2, 4, 6})));\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 5})), (std::vector<long>({-1, 2, 3, 4}))) == (std::vector<long>({2, 0, 0,\
  \ 1})));\n}\n"
completions: ["  std::vector<long> answer;\n  for(int i = 0; i < game.size(); i++){\n\
    \    long diff = abs(game[i] - guess[i]);\n    answer.push_back(diff);\n  }\n\
    \  return answer;", "\tlong size = game.size();\n\tlong i = 0;\n\tstd::vector<long>\
    \ result(size);\n\tfor (i = 0; i < size; i++) {\n\t\tresult[i] = abs(game[i] -\
    \ guess[i]);\n\t}\n\treturn result;", "\tstd::vector<long>output;\n\tfor (int\
    \ i = 0; i < game.size(); i++) {\n\t\toutput.push_back(game[i] - guess[i]);\n\t\
    }\n\tfor (int i = 0; i < output.size(); i++) {\n\t\tif (output[i] < 0)\n\t\t\t\
    output[i] = -1 * output[i];\n\t}\n\treturn output;", "  std::vector<long> result(game.size());\n\
    \  for (int i = 0; i < game.size(); i++) {\n    long diff = game[i] - guess[i];\n\
    \    result[i] = diff < 0 ? -diff : diff;\n  }\n  return result;", "\tstd::vector<long>\
    \ result;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tresult.push_back(std::abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn result;", "\tlong sz = game.size();\n\tstd::vector<long>\
    \ vec(sz);\n\tfor (long i = 0; i < sz; i++) {\n\t\tvec[i] = game[i] - guess[i];\n\
    \t\tif (vec[i] < 0)\n\t\t\tvec[i] *= -1;\n\t}\n\treturn vec;", "    std::vector<long>\
    \ result(game.size());\n    for (size_t i = 0; i < game.size(); i++) {\n     \
    \   result[i] = abs(game[i] - guess[i]);\n    }\n    return result;", "  std::vector<long>\
    \ result(game.size());\n  for (int i = 0; i < game.size(); i++) {\n    result[i]\
    \ = abs(game[i] - guess[i]);\n  }\n  return result;", "    int min = 0;\n    int\
    \ max = 0;\n    std::vector<long> vec;\n    for(unsigned int i = 0; i < game.size();\
    \ i++){\n        if(guess[i] <= game[i]){\n            min = guess[i];\n     \
    \       max = game[i];\n        }\n        else if(guess[i] > game[i]){\n    \
    \        min = game[i];\n            max = guess[i];\n        }\n        vec.push_back(max\
    \ - min);\n    }\n    return vec;", "    std::vector<long> res;\n    for(int i\
    \ = 0; i < game.size(); i++){\n        if(game[i] == guess[i]){\n            res.push_back(0);\n\
    \        }\n        else{\n            res.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n    return res;", "  std::vector<long> result(guess.size());\n\
    \  for (int i = 0; i < guess.size(); i++) {\n    result[i] = abs(game[i] - guess[i]);\n\
    \  }\n  return result;", "  std::vector<long> res;\n  for(long i = 0; i < game.size();\
    \ i++){\n    res.push_back(abs(game[i] - guess[i]));\n  }\n  return res;", " \
    \ // this is just a stub\n  // auto i = 0;\n  // while(i<game.size()){\n  // \
    \    game[i] = game[i] - guess[i];\n  //     if(game[i]<0){\n  //         game[i]\
    \ = -game[i];\n  //     }\n  //     i++;\n  // }\n  for(auto i = 0; i<game.size();\
    \ i++){\n    game[i] = std::abs(game[i] - guess[i]);\n  }\n  return game;", " \
    \   //1st case, this is what the site wants\n    std::vector<long> result;\n \
    \   for(int i = 0; i < game.size(); ++i){\n        if(game[i] - guess[i] < 0){\n\
    \            result.push_back(guess[i] - game[i]);\n        }else{\n         \
    \   result.push_back(game[i] - guess[i]);\n        }\n    }\n    return result;\n\
    \    //2nd case, this is what I want\n    //std::vector<long> result;\n    //for(int\
    \ i = 0; i < game.size(); ++i){\n    //    result.push_back(abs(game[i] - guess[i]));\n\
    \    //}\n    //return result;", "\tstd::vector<long> result;\n\tfor (int i =\
    \ 0; i < game.size(); i++) {\n\t\tif (game[i] != guess[i])\n\t\t\tresult.push_back(abs(game[i]\
    \ - guess[i]));\n\t\telse\n\t\t\tresult.push_back(0);\n\t}\n\treturn result;",
  "\tint size = game.size();\n\tstd::vector<long> result(size);\n\tfor (int i = 0;\
    \ i < size; i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tresult[i] = 0;\n\t\t\
    }\n\t\telse {\n\t\t\tresult[i] = std::abs(game[i] - guess[i]);\n\t\t}\n\t}\n\t\
    return result;", "  // TODO: complete this function\n  std::vector<long> res;\n\
    \  for(int i = 0; i < game.size(); i++){\n    res.push_back(std::abs(game[i] -\
    \ guess[i]));\n  }\n  return res;", "  std::vector<long> diff;\n  for(int i =\
    \ 0; i < game.size(); i++){\n    diff.push_back(abs(game[i] - guess[i]));\n  }\n\
    \  return diff;", "\tstd::vector<long> result;\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tif (game[i] != guess[i]) {\n\t\t\tresult.push_back(abs(game[i] -\
    \ guess[i]));\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(0);\n\t\t}\n\t}\n\treturn\
    \ result;", "\tint len = game.size();\n\tstd::vector<long> output;\n\tfor (int\
    \ i = 0; i < len; i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\toutput.push_back(0);\n\
    \t\t}\n\t\telse {\n\t\t\toutput.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t\
    }\n\treturn output;", "    std::vector<long> r;\n    std::transform(game.begin(),\
    \ game.end(), guess.begin(), std::back_inserter(r),\n      [](auto a, auto b)\
    \ { return abs(a - b); });\n    return r;", "    int size = game.size();\n   \
    \ std::vector<long> result(size);\n    for(int i = 0; i < size; i++){\n      \
    \  result[i] = abs(game[i] - guess[i]);\n    }\n    return result;", "\t// if(game.size()\
    \ != guess.size()) assert(0);\n\t// std::vector<long> ans;\n\t// for(int i = 0;\
    \ i < game.size(); i++) {\n\t// \tif(game[i] == guess[i]) ans.push_back(0);\n\t\
    // \telse ans.push_back(abs(game[i] - guess[i]));\n\t// }\n\t// return ans;\n\t\
    int i = 0;\n\twhile(i < game.size()) {\n\t\tif(game[i] == guess[i]) {\n\t\t\t\
    game.erase(game.begin() + i);\n\t\t\tguess.erase(guess.begin() + i);\n\t\t}\n\t\
    \telse i++;\n\t}\n\tfor(int i = 0; i < game.size(); i++) {\n\t\tgame[i] = abs(game[i]\
    \ - guess[i]);\n\t}\n\treturn game;", "  std::vector<long> result;\n  for (int\
    \ i = 0; i < game.size(); i++) {\n    result.push_back(std::abs(game[i] - guess[i]));\n\
    \  }\n  return result;", "    std::vector<long> result;\n    for(int i = 0; i\
    \ < game.size(); i++){\n        result.push_back(abs(game[i] - guess[i]));\n \
    \   }\n    return result;", "\tstd::vector<long> result;\n\tfor (int i = 0; i\
    \ < game.size(); i++) {\n\t\tlong diff = std::abs(game[i] - guess[i]);\n\t\tresult.push_back(diff);\n\
    \t}\n\treturn result;", "\tstd::vector<long> guess_results;\n\tfor (int i = 0;\
    \ i < game.size(); i++) {\n\t\tguess_results.push_back(std::abs(game[i] - guess[i]));\n\
    \t}\n\treturn guess_results;", "    std::vector<long> tmp;\n    std::transform(game.begin(),\
    \ game.end(), guess.begin(), std::back_inserter(tmp), [](long a, long b) { return\
    \ std::abs(a - b); });\n    return tmp;", "    int size = game.size();\n    std::vector<long>\
    \ result;\n    for(int i = 0; i < size; i++){\n        if(game[i]==guess[i]){\n\
    \            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i]-guess[i]));\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    for(int\
    \ i = 0; i < game.size(); i++){\n        if(game[i] == guess[i]){\n          \
    \  out.push_back(0);\n        }else{\n            out.push_back(abs(game[i] -\
    \ guess[i]));\n        }\n    }\n    return out;", "  for (int i = 0; i < game.size();\
    \ i++) {\n    game[i] = std::abs(game[i] - guess[i]);\n  }\n  return game;", " \
    \   std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n   \
    \     if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n\
    \            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n  \
    \  return result;", "  // initialize output vector\n  std::vector<long> output;\n\
    \  // iterate through vectors and calc abs difference\n  for (long i = 0; i <\
    \ game.size(); i++) {\n    output.push_back(abs(game[i] - guess[i]));\n  }\n \
    \ return output;", "    std::vector<long> result;\n    if(game.size() == guess.size()){\n\
    \        for(int i = 0; i < game.size(); i++){\n            if(game[i] == guess[i]){\n\
    \                result.push_back(0);\n            }\n            else{\n    \
    \            result.push_back(abs(game[i] - guess[i]));\n            }\n     \
    \   }\n    }\n    return result;", "\tstd::vector<long> result(game.size());\n\
    \t//iterate through both vectors and subtract the number at current index\n\t\
    //from guess vector from number at current index from game vector\n\t//then set\
    \ result of current index to the absolute value of that value\n\tfor (int i =\
    \ 0; i < game.size(); i++) {\n\t\tresult[i] = abs(game[i] - guess[i]);\n\t}\n\t\
    return result;", "\tstd::vector<long> result;\n\tfor (size_t i = 0; i < game.size();\
    \ i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\
    \telse {\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\treturn\
    \ result;", "    int size = game.size();\n    std::vector<long> res;\n    for(int\
    \ i = 0; i < size; i++){\n        res.push_back(abs(game[i] - guess[i]));\n  \
    \  }\n    return res;", "\t\n\tint size = game.size();\n\tstd::vector<long> result(size);\n\
    \tfor (int i = 0; i < size; i++) {\n\t\tresult[i] = abs(game[i] - guess[i]);\n\
    \t}\n\treturn result;", "\tstd::vector<long> results;\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tresults.push_back(0);\n\t\t}\n\
    \t\telse {\n\t\t\tresults.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t}\n\t\
    return results;", "    int len = game.size();\n    std::vector<long> ans(len);\n\
    \    for(int i = 0; i < len; i++) {\n        ans[i] = std::abs(game[i] - guess[i]);\n\
    \    }\n    return ans;", "  // your code here\n  std::vector<long> result;\n\
    \  for(int i = 0; i < game.size(); i++){\n    if(game[i] == guess[i]){\n     \
    \ result.push_back(0);\n    }\n    else{\n      result.push_back(abs(game[i] -\
    \ guess[i]));\n    }\n  }\n  return result;", "\tstd::vector<long> res;\n\tfor\
    \ (int i = 0; i < game.size(); i++) {\n\t\tres.push_back(std::abs(game[i] - guess[i]));\n\
    \t}\n\treturn res;", "  std::vector<long> result;\n  for (int i = 0; i < game.size();\
    \ i++) {\n    if (game[i] == guess[i]) {\n      result.push_back(0);\n    } else\
    \ {\n      result.push_back(abs(game[i] - guess[i]));\n    }\n  }\n  return result;",
  "\tstd::vector<long> res;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tres.push_back(abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn res;", "  std::vector<long> ret;\n  for(int i =\
    \ 0; i < game.size(); i++) {\n    long a = std::abs(game[i] - guess[i]);\n   \
    \ ret.push_back(a);\n  }\n  return ret;", "\t//Your code\n\tstd::vector<long>\
    \ result;\n\tfor (long i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i])\
    \ {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(abs(game[i]\
    \ - guess[i]));\n\t\t}\n\t}\n\treturn result;", "  // [1,2,3,4,5,1]\n  // [1,2,3,4,2,-2]\n\
    \  //\n  // [0,0,0,0,3,3]\n  int size = game.size();\n  std::vector<long> result;\n\
    \  int diff = 0;\n  for(int i = 0; i < size; i++){\n    diff = abs(game[i] - guess[i]);\n\
    \    result.push_back(diff);\n  }\n  return result;", "    std::vector<long> result;\n\
    \    for(int i = 0; i < game.size(); i++){\n        if(game[i] == guess[i]){\n\
    \            result.push_back(0);\n        }else{\n            result.push_back(abs(game[i]\
    \ - guess[i]));\n        }\n    }\n    return result;", "\tstd::vector<long> ans;\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) ans.push_back(0);\n\
    \t\telse ans.push_back(abs(game[i] - guess[i]));\n\t}\n\treturn ans;", "\tint\
    \ g = 0;\n\tint s = 0;\n\tstd::vector<long> result;\n\twhile (g != game.size())\
    \ {\n\t\tresult.push_back(abs(game[g] - guess[s]));\n\t\tg++;\n\t\ts++;\n\t}\n\
    \treturn result;", "    std::vector<long> result;\n    int i = 0;\n    while(i\
    \ < game.size()){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n\
    \        }else{\n            result.push_back(abs(game[i] - guess[i]));\n    \
    \    }\n        i++;\n    }\n    return result;", "   std::vector<long> differences;\n\
    \   for(int i = 0; i < game.size(); i++){\n       long difference = abs(game[i]\
    \ - guess[i]);\n       differences.push_back(difference);\n   }\n   return differences;",
  "  std::vector<long> result;\n  for (unsigned i = 0; i < game.size(); i++) {\n \
    \   long diff = abs(game[i] - guess[i]);\n    result.push_back(diff);\n  }\n \
    \ return result;", "  std::vector<long>diff(game.size());\n  std::transform(game.begin(),\
    \ game.end(), guess.begin(), diff.begin(), [](long x, long y) { return abs(x -\
    \ y); });\n  return diff;", "  // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n  // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n  long len = game.size();\n  long i = 0;\n  std::vector<long> result(len);\n\
    \  while(i < len){\n    if(game[i] == guess[i])\n      result[i] = 0;\n    else\n\
    \      result[i] = std::abs(game[i] - guess[i]);\n    i++;\n  }\n  return result;",
  "    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n    \
    \    if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n\
    \            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n  \
    \  return result;", "  std::vector<long> result;\n  for (int i = 0; i < game.size();\
    \ i++) {\n    long diff = std::abs(game[i] - guess[i]);\n    result.push_back(diff);\n\
    \  }\n  return result;", "    std::vector<long> difference;\n    for(int i = 0;\
    \ i < game.size(); i++){\n        difference.push_back(std::abs(game[i] - guess[i]));\n\
    \    }\n    return difference;", "    for(int i = 0; i < game.size(); i++) {\n\
    \        if(game[i] != guess[i]) {\n            guess[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    return guess;", "    std::vector<long> out;\n    if(game.size()==guess.size()){\n\
    \        for(long i=0;i<game.size();i++){\n            out.push_back(std::abs(game[i]-guess[i]));\n\
    \        }\n    }\n    return out;", "  //your code here\n  std::vector<long>\
    \ result;\n  for(unsigned i = 0; i < game.size(); i++){\n      result.push_back(abs(game[i]\
    \ - guess[i]));\n  }\n  return result;", "    std::vector<long> result;\n    if(game.size()\
    \ != guess.size()) {\n        return result;\n    }\n    int size = game.size();\n\
    \    long diff = 0;\n    for(int i = 0; i < size; i++) {\n        diff = std::abs(game[i]\
    \ - guess[i]);\n        result.push_back(diff);\n    }\n    return result;", " \
    \   //basic validation\n    assert(game.size() == guess.size());\n    //return\
    \ vector\n    std::vector<long> result = {};\n    for(int i = 0; i < game.size();\
    \ i++){\n        //cout << \"game is : \" << game[i] << endl;\n        //cout\
    \ << \"guess is : \" << guess[i] << endl;\n        if(game[i] == guess[i]){\n\
    \            result.push_back(0);\n        }\n        else{\n            result.push_back(abs(game[i]\
    \ - guess[i]));\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    for(int i = 0; i < game.size(); i++){\n        if(game[i] == guess[i]){\n\
    \            result.push_back(0);\n        }\n        else{\n            result.push_back(abs(game[i]\
    \ - guess[i]));\n        }\n    }\n    return result;", "    std::vector<long>\
    \ v;\n    for(int i = 0; i < game.size(); i++){\n        long diff = game[i] -\
    \ guess[i];\n        if(diff < 0) diff *= -1;\n        v.push_back(diff);\n  \
    \  }\n    return v;", "    std::vector<long> result;\n    for(int i = 0; i < game.size();\
    \ i++){\n        result.push_back(abs(game[i] - guess[i]));\n    }\n    return\
    \ result;", "    std::vector<long> scores(guess.size());\n    for (int i = 0;\
    \ i < guess.size(); i++) {\n        scores[i] = guess[i] > game[i] ? guess[i]\
    \ - game[i] : game[i] - guess[i];\n    }\n    return scores;", "    // this is\
    \ basically the same as the problem: \"make_negative\"\n    // except here we\
    \ need to only return the absolute value, and replace with 0\n    // if the two\
    \ numbers are the same, else we need to return the absolute\n    // difference\
    \ of the two numbers.\n    // this is just the binary difference operation and\
    \ it's negation, so we\n    // can do it by finding their intersection and then\
    \ subtracting their difference\n    // from the game vector.\n    std::vector<long>\
    \ result = game;\n    for (int i = 0; i < game.size(); i++) {\n        long g_i\
    \ = game[i];\n        long g_g = guess[i];\n        if (g_i != g_g) {\n      \
    \      result[i] = abs(g_i - g_g);\n        } else {\n            result[i] =\
    \ 0;\n        }\n    }\n    return result;", "  std::vector<long> result;\n  for\
    \ (int i = 0; i < game.size(); i++) {\n    if (game[i] == guess[i]) {\n      result.push_back(0);\n\
    \    } else {\n      result.push_back(abs(game[i] - guess[i]));\n    }\n  }\n\
    \  return result;", "\tstd::vector<long> ans;\n\tfor (long i = 0; i < game.size();\
    \ i++) {\n\t\tif (game[i] < guess[i]) {\n\t\t\tans.push_back(guess[i] - game[i]);\n\
    \t\t}\n\t\telse if (game[i] > guess[i]) {\n\t\t\tans.push_back(game[i] - guess[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tans.push_back(0);\n\t\t}\n\t}\n\treturn ans;", "    std::vector<long>\
    \ result;\n    for(int i = 0; i < game.size(); i++){\n        result.push_back(std::abs(game[i]\
    \ - guess[i]));\n    }\n    return result;", "\tstd::vector<long> ret;\n\tfor\
    \ (size_t i = 0; i < game.size(); i++) {\n\t\tlong t = game[i] - guess[i];\n\t\
    \tif (t < 0) {\n\t\t\tt = 0 - t;\n\t\t}\n\t\tret.push_back(t);\n\t}\n\treturn\
    \ ret;", "  assert(game.size() == guess.size());\n  std::vector<long> result;\n\
    \  for (int i = 0; i < game.size(); i++) {\n    if (game[i] == guess[i]) {\n \
    \     result.push_back(0);\n    } else {\n      result.push_back(abs(game[i] -\
    \ guess[i]));\n    }\n  }\n  return result;", "  std::vector<long> result;\n \
    \ for (int i = 0; i < game.size(); i++) {\n    if (game[i] == guess[i])\n    \
    \  result.push_back(0);\n    else\n      result.push_back(abs(game[i] - guess[i]));\n\
    \  }\n  return result;", "    std::vector<long> result;\n    for(int i = 0; i\
    \ < game.size(); i++){\n        result.push_back(abs(game[i] - guess[i]));\n \
    \   }\n    return result;", "\tfor (int i = 0; i < game.size(); i++) {\n\t\tguess[i]\
    \ = abs(game[i] - guess[i]);\n\t}\n\treturn guess;", "  std::vector<long> result;\n\
    \  for (int i = 0; i < game.size(); i++) {\n    if (game[i] == guess[i]) {\n \
    \     result.push_back(0);\n    } else {\n      result.push_back(abs(game[i] -\
    \ guess[i]));\n    }\n  }\n  return result;", "  std::vector<long> v;\n  for(unsigned\
    \ int i = 0; i < game.size(); i++) {\n    v.push_back(std::abs(game[i] - guess[i]));\n\
    \  }\n  return v;", "    std::vector<long> res;\n    for(int i = 0; i < game.size();\
    \ i++){\n        res.push_back(abs(game[i] - guess[i]));\n    }\n    return res;",
  "    std::vector<long> out;\n    for(int i = 0; i < game.size(); i++){\n       \
    \ if(game[i] == guess[i]){\n            out.push_back(0);\n        }\n       \
    \ else{\n            out.push_back(abs(game[i] - guess[i]));\n        }\n    }\n\
    \    return out;", "\tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i]\
    \ > guess[i]) {\n\t\t\tguess[i] = game[i] - guess[i];\n\t\t}\n\t\telse if (game[i]\
    \ < guess[i]) {\n\t\t\tguess[i] = guess[i] - game[i];\n\t\t}\n\t\telse {\n\t\t\
    \tguess[i] = 0;\n\t\t}\n\t}\n\treturn guess;", "    std::vector<long> output;\n\
    \    for(long i = 0; i < game.size(); i++){\n        if(game[i] == guess[i]){\n\
    \            output.push_back(0);\n        }else{\n            output.push_back(abs(game[i]\
    \ - guess[i]));\n        }\n    }\n    return output;", "\tstd::vector<long> scores;\n\
    \tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\
    \tscores.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tscores.push_back(abs(game[i]\
    \ - guess[i]));\n\t\t}\n\t}\n\treturn scores;", "    std::vector<long> result;\n\
    \    for(unsigned int i = 0; i < game.size(); i++) {\n        if(game[i] == guess[i])\n\
    \            result.push_back(0);\n        else\n            result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return result;", "    std::vector<long> result(game.size());\n\
    \    for (int i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i])\
    \ {\n            result[i] = 0;\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return result;", "  std::vector<long> result;\n\
    \  for (int i = 0; i < game.size(); i++) {\n    long answer = 0;\n    if (game[i]\
    \ != guess[i]) {\n      answer = abs(game[i] - guess[i]);\n    }\n    result.push_back(answer);\n\
    \  }\n  return result;", "    for(size_t i = 0; i < game.size(); i++) {\n    \
    \    if(game[i] != guess[i])\n            guess[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return guess;", "  std::vector<long> result;\n  long score = 0;\n\
    \  for (int i = 0; i < game.size(); i++) {\n    score = abs(game[i] - guess[i]);\n\
    \    result.push_back(score);\n  }\n  return result;", "  std::vector<long> result(guess.size());\n\
    \  for (int i = 0; i < game.size(); i++) {\n    if (game[i] == guess[i]) {\n \
    \     result[i] = 0;\n    } else {\n      result[i] = abs(game[i] - guess[i]);\n\
    \    }\n  }\n  return result;", "  // TODO: Write some code here\n  int size =\
    \ game.size();\n  std::vector<long> res;\n  for(int i = 0; i < size; i++){\n \
    \   if(game[i] == guess[i]){\n      res.push_back(0);\n    }\n    else{\n    \
    \  long tmp = abs(game[i] - guess[i]);\n      res.push_back(tmp);\n    }\n  }\n\
    \  return res;", "  std::vector<long> res;\n  for(int i = 0; i < game.size();\
    \ i++){\n    if(game[i] == guess[i]){\n      res.push_back(0);\n    }\n    else{\n\
    \      res.push_back(abs(game[i] - guess[i]));\n    }\n  }\n  return res;", " \
    \   int n = game.size();\n    std::vector<long> result(n);\n    for(int i = 0;\
    \ i < n; i++)\n        result[i] = std::abs(game[i] - guess[i]);\n    return result;",
  "\tstd::vector<long> result;\n\t// your code goes here\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tlong diff = guess[i] - game[i];\n\t\tif (diff < 0) {\n\t\t\tdiff\
    \ = -diff;\n\t\t}\n\t\tresult.push_back(diff);\n\t}\n\treturn result;", "  for\
    \ (int i = 0; i < game.size(); i++) {\n    if (game[i] == guess[i]) {\n      guess[i]\
    \ = 0;\n    } else {\n      guess[i] = abs(game[i] - guess[i]);\n    }\n  }\n\
    \  return guess;", "    std::vector<long> output;\n    for(int i = 0; i < game.size();\
    \ i++){\n        if(game[i] == guess[i]){\n            output.push_back(0);\n\
    \        }\n        else{\n            output.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n    return output;", "    std::vector<long> ret(game.size());\n\
    \    for(int i = 0; i < game.size(); i++) {\n        ret[i] = std::abs(game[i]\
    \ - guess[i]);\n    }\n    return ret;", "  std::vector<long> result;\n  int i\
    \ = 0;\n  while (i < game.size()) {\n    if (game[i] == guess[i]) {\n      result.push_back(0);\n\
    \    } else {\n      result.push_back(abs(game[i] - guess[i]));\n    }\n    i++;\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::transform(game.begin(),\
    \ game.end(), guess.begin(), std::back_inserter(result),\n        [](long a, long\
    \ b) { return std::abs(a - b); });\n    return result;", "    std::vector<long>\
    \ result;\n    for(int i = 0; i < game.size(); i++){\n        long diff = abs(game[i]\
    \ - guess[i]);\n        result.push_back(diff);\n    }\n    return result;", "\t\
    std::vector<long> result(game.size());\n\tfor (size_t i = 0; i < game.size();\
    \ i++) {\n\t\tresult[i] = abs(game[i] - guess[i]);\n\t}\n\treturn result;", " \
    \   int n = game.size();\n    std::vector<long>res(n);\n    for(int i = 0; i <\
    \ n; i++){\n        res[i] = abs(game[i] - guess[i]);\n    }\n    return res;",
  "    std::vector<long> res;\n    for(int i = 0; i < game.size(); i++){\n       \
    \ if(game[i] < guess[i])\n            res.push_back(guess[i] - game[i]);\n   \
    \     else\n            res.push_back(game[i] - guess[i]);\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    for(int i = 0; i < game.size(); i++){\n\
    \        long diff = std::abs(game[i] - guess[i]);\n        result.push_back(diff);\n\
    \    }\n    return result;", "    for(int i = 0; i < game.size(); i++) {\n   \
    \     game[i] = abs(game[i] - guess[i]);\n    }\n    return game;", "    std::vector<long>\
    \ results;\n    for(int i = 0; i < game.size(); i++){\n        results.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return results;", "\tstd::vector<long> result;\n\t\
    for (int i = 0; i < game.size(); i++) {\n\t\tresult.push_back(std::abs(game[i]\
    \ - guess[i]));\n\t}\n\treturn result;", "  std::vector<long> result;\n  int i;\n\
    \  for(i=0;i<game.size();i++){\n    result.push_back(abs(game[i]-guess[i]));\n\
    \  }\n  return result;", "    for(int i = 0; i < game.size(); i++) {\n       \
    \ if(game[i] != guess[i]) {\n            guess[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    return guess;", "  std::vector<long> result;\n  for (int\
    \ i = 0; i < game.size(); i++) {\n    if (game[i] == guess[i]) {\n      result.push_back(0);\n\
    \    } else {\n      result.push_back(abs(game[i] - guess[i]));\n    }\n  }\n\
    \  return result;", "    std::vector<long> diff;\n    // your code here\n    return\
    \ diff;", "    std::vector<long> ret;\n    for(long i = 0; i < game.size(); i++)\
    \ {\n        ret.push_back(std::abs(game[i] - guess[i]));\n    }\n    return ret;",
  '  // Your code here', "    std::vector<long> res;\n    for(int i = 0; i < game.size();\
    \ i++){\n        if(game[i] == guess[i]){\n            res.push_back(0);\n   \
    \     }\n        else{\n            res.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n    return res;", "    std::vector<long> ret;\n    for(unsigned\
    \ i = 0; i < game.size(); i++) {\n        if(game[i] == guess[i]) ret.push_back(0);\n\
    \        else ret.push_back(abs(game[i] - guess[i]));\n    }\n    return ret;",
  "  long n = game.size();\n  std::vector<long> res;\n  for(long i = 0; i < n; i++)\
    \ {\n    res.push_back(abs(game[i] - guess[i]));\n  }\n  return res;", "    std::vector<long>\
    \ result;\n    // code here\n    for(int i = 0; i < game.size(); i++){\n     \
    \   long diff = std::abs(game[i] - guess[i]);\n        result.push_back(diff);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(int i = 0;\
    \ i < game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n\
    \        }\n        else{\n            result.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    for(int\
    \ i = 0; i < game.size(); i++){\n        result.push_back(std::abs(game[i] - guess[i]));\n\
    \    }\n    return result;", "\tstd::vector<long> v;\n\tfor (long i = 0; i < game.size();\
    \ i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tv.push_back(0);\n\t\t}\n\t\telse\
    \ if (game[i] != guess[i]) {\n\t\t\tv.push_back(abs(game[i] - guess[i]));\n\t\t\
    }\n\t}\n\treturn v;", "  std::vector<long> temp;\n  for(int i = 0; i < game.size();\
    \ i++){\n    if(game[i] == guess[i]){\n      temp.push_back(0);\n    }\n    else{\n\
    \      temp.push_back(abs(game[i] - guess[i]));\n    }\n  }\n  return temp;",
  "    std::vector<long> results;\n    for(int i = 0; i < game.size(); i++){\n   \
    \     results.push_back(std::abs(game[i] - guess[i]));\n    }\n    return results;",
  "    int index = 0;\n    std::vector<long> result;\n    for(auto it = game.begin();\
    \ it != game.end(); it++){\n        result.push_back(abs(guess[index] - *it));\n\
    \        index++;\n    }\n    return result;", "\tstd::vector<long> result;\n\t\
    for (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\t\
    result.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(abs(game[i] -\
    \ guess[i]));\n\t\t}\n\t}\n\treturn result;", "    std::vector<long> dif;\n  \
    \  for(int i = 0; i < game.size(); i++){\n        int x = guess[i] - game[i];\n\
    \        if(x < 0){\n            x = x * -1;\n        }\n        dif.push_back(x);\n\
    \    }\n    return dif;", "    for(unsigned int i = 0; i < game.size(); i++) {\n\
    \        long a = game[i];\n        long b = guess[i];\n        if(a == b) {\n\
    \            game[i] = 0;\n        } else {\n            game[i] = abs(a - b);\n\
    \        }\n    }\n    return game;", "  std::vector<long>difference;\n  for(int\
    \ i=0;i<game.size();i++){\n    difference.push_back(abs(game[i]-guess[i]));\n\
    \  }\n  return difference;", "    std::vector<long> output;\n    for(int i = 0;\
    \ i < game.size(); i++){\n        if(game[i] == guess[i]){\n            output.push_back(0);\n\
    \        }\n        else{\n            output.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n    return output;", "  for (int i = 0; i < game.size(); i++)\
    \ {\n    if (game[i] != guess[i]) {\n      guess[i] = abs(game[i] - guess[i]);\n\
    \    }\n  }\n  return guess;", "    assert(game.size() == guess.size());\n   \
    \ std::vector<long> result;\n    for (int i = 0; i < game.size(); i++) {\n   \
    \     result.push_back(abs(game[i] - guess[i]));\n    }\n    return result;",
  "    std::vector<long> s;\n    for(int i = 0; i < game.size(); i++){\n        s.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return s;", "    std::vector<long> answer;\n    for(int\
    \ i = 0; i < game.size(); i++){\n        if(game[i] == guess[i]){\n          \
    \  answer.push_back(0);\n        }else{\n            answer.push_back(abs(game[i]\
    \ - guess[i]));\n        }\n    }\n    return answer;", "  std::vector<long> result;\n\
    \  for (int i = 0; i < game.size(); i++) {\n    result.push_back(abs(game[i] -\
    \ guess[i]));\n  }\n  return result;", "\tfor (size_t i = 0; i < game.size();\
    \ i++) {\n\t\tgame[i] = (game[i] > guess[i]) ? game[i] - guess[i] : guess[i] -\
    \ game[i];\n\t}\n\treturn game;", "\tstd::vector<long> answer;\n\tfor (int i =\
    \ 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tanswer.push_back(0);\n\
    \t\t}\n\t\telse {\n\t\t\tanswer.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t\
    }\n\treturn answer;", "    std::vector<long> output;\n    for(long i = 0; i <\
    \ game.size(); i++){\n        if(game[i] == guess[i]){\n            output.push_back(0);\n\
    \        }\n        else{\n            output.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n    return output;", "    int guess_size = guess.size();\n\
    \    std::vector<long> result;\n    for(int i = 0; i < guess_size; i++){\n   \
    \     if(game[i] > guess[i]){\n            result.push_back(game[i] - guess[i]);\n\
    \        }else if(game[i] < guess[i]){\n            result.push_back(guess[i]\
    \ - game[i]);\n        }else{\n            result.push_back(0);\n        }\n \
    \   }\n    return result;", "\tfor (int i = 0; i < game.size(); i++) {\n\t\tgame[i]\
    \ = abs(game[i] - guess[i]);\n\t}\n\treturn game;", "\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tif (game[i] == guess[i])\n\t\t\tguess[i] = 0;\n\t\telse\n\t\t\t\
    guess[i] = abs(game[i] - guess[i]);\n\t}\n\treturn guess;", "\t\tstd::vector<long>\
    \ result;\n\t\tfor(int i = 0; i < game.size(); ++i) {\n\t\t\t\tif(game[i] < guess[i])\
    \ {\n\t\t\t\t\t\tresult.push_back(guess[i] - game[i]);\n\t\t\t\t}\n\t\t\t\telse\
    \ if(game[i] > guess[i]) {\n\t\t\t\t\t\tresult.push_back(game[i] - guess[i]);\n\
    \t\t\t\t}\n\t\t\t\telse if(game[i] == guess[i]) {\n\t\t\t\t\t\tresult.push_back(0);\n\
    \t\t\t\t}\n\t\t}\n\t\treturn result;", "\tfor (int i = 0; i < game.size(); i++)\
    \ {\n\t\tif (game[i] == guess[i]) {\n\t\t\tguess[i] = 0;\n\t\t}\n\t\telse {\n\t\
    \t\tguess[i] = abs(game[i] - guess[i]);\n\t\t}\n\t}\n\treturn guess;", "\tfor\
    \ (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\t\
    guess[i] = 0;\n\t\t}\n\t\telse {\n\t\t\tguess[i] = abs(game[i] - guess[i]);\n\t\
    \t}\n\t}\n\treturn guess;", "    std::vector<long> res;\n    if(game.size() ==\
    \ guess.size()){\n        for(int i = 0; i < game.size(); i++){\n            if(game[i]\
    \ == guess[i]){\n                res.push_back(0);\n            }\n          \
    \  else{\n                res.push_back(abs(game[i] - guess[i]));\n          \
    \  }\n        }\n    }\n    return res;", "    std::vector<long> result;\n   \
    \ for(auto i = 0; i < game.size(); i++) {\n        if(game[i] == guess[i]) {\n\
    \            result.push_back(0);\n        } else {\n            result.push_back(abs(game[i]\
    \ - guess[i]));\n        }\n    }\n    return result;", "  std::vector<long> result;\n\
    \  for (int i = 0; i < game.size(); i++) {\n    result.push_back(abs(game[i] -\
    \ guess[i]));\n  }\n  return result;", "  int size = game.size();\n  std::vector<long>\
    \ result;\n  for(int i = 0; i < size; i++){\n    result.push_back(abs(game[i]\
    \ - guess[i]));\n  }\n  return result;", "    std::vector<long>  cmp(game.size());\n\
    \    for(int i = 0; i < game.size(); i++)\n    {\n        if(game[i] == guess[i])\
    \ cmp[i] = 0;\n        else cmp[i] = std::abs(game[i] - guess[i]);\n    }\n  \
    \  return cmp;", "    assert(game.size() == guess.size());\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return result;", "    std::vector<long> result;\n\
    \    for(unsigned int i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return result;", "   std::vector<long> result;\n \
    \  for(int i = 0; i < game.size(); i++){\n      long g = guess[i];\n      long\
    \ a = game[i];\n      result.push_back(abs(g-a));\n   }\n   return result;", " \
    \ for (int i = 0; i < game.size(); i++) {\n    long diff = std::abs(game[i] -\
    \ guess[i]);\n    if (diff != 0) {\n      guess[i] = diff;\n    }\n  }\n  return\
    \ guess;", "\tstd::vector<long> result(guess.size());\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tresult[i] = std::abs(game[i] - guess[i]);\n\t}\n\treturn result;",
  "    std::vector<long> res(game.size());\n    for(int i = 0; i < game.size(); i++)\n\
    \    {\n        if(game[i] > guess[i])\n        {\n            res[i] = game[i]\
    \ - guess[i];\n        }\n        else if(game[i] < guess[i])\n        {\n   \
    \         res[i] = guess[i] - game[i];\n        }\n        else\n        {\n \
    \           res[i] = 0;\n        }\n    }\n    return res;", "\tstd::vector<long>\
    \ result;\n\tfor (size_t i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i])\
    \ {\n\t\t\tresult.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tlong difference = abs(game[i]\
    \ - guess[i]);\n\t\t\tresult.push_back(difference);\n\t\t}\n\t}\n\treturn result;",
  "\tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] != guess[i]) {\n\t\t\
    \tguess[i] = abs(game[i] - guess[i]);\n\t\t}\n\t}\n\treturn guess;", "  int len\
    \ = game.size();\n  std::vector<long> results;\n  for (size_t i = 0; i < len;\
    \ i++) {\n    long result = std::abs(game[i] - guess[i]);\n    results.push_back(result);\n\
    \  }\n  return results;", "  // your code here\n  std::vector<long> result(game.size());\n\
    \  for(int i = 0; i < game.size(); i++){\n    result[i] = abs(game[i] - guess[i]);\n\
    \  }\n  return result;", "    for(unsigned int i = 0; i < game.size(); i++) {\n\
    \        if(game[i] != guess[i]) {\n            guess[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    return guess;", "\tstd::vector<long> output;\n\tfor (int\
    \ i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\toutput.push_back(0);\n\
    \t\t}\n\t\telse {\n\t\t\toutput.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t\
    }\n\treturn output;", "\t\n\tfor(long i = 0; i < game.size(); i++)\n\t{\n\t\t\
    long x = guess[i] - game[i];\n\t\tif(x < 0)\n\t\t{\n\t\t\tguess[i] = x * -1;\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tguess[i] = x;\n\t\t}\n\t}\n\treturn guess;", "\t\
    for (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\t\
    guess[i] = 0;\n\t\t}\n\t\telse {\n\t\t\tguess[i] = abs(game[i] - guess[i]);\n\t\
    \t}\n\t}\n\treturn guess;", "\tstd::vector<long> result;\n\tfor (size_t i = 0;\
    \ i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tresult.push_back(0);\n\
    \t\t}\n\t\telse {\n\t\t\tresult.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t\
    }\n\treturn result;", "    std::vector<long> out;\n    for(int i = 0; i < game.size();\
    \ i++){\n        out.push_back(std::abs(game[i] - guess[i]));\n    }\n    return\
    \ out;", "    std::vector<long> result(game.size());\n    for (int i = 0; i <\
    \ game.size(); i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n \
    \   return result;", "\tstd::vector<long> result;\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tlong diff = abs(game[i] - guess[i]);\n\t\tresult.push_back(diff);\n\
    \t}\n\treturn result;", "\tstd::vector<long> result(game.size());\n\tfor (int\
    \ i = 0; i < game.size(); i++) {\n\t\tresult[i] = abs(game[i] - guess[i]);\n\t\
    }\n\treturn result;", "    //cout << \"game.size() = \" << game.size() << endl;\n\
    \    //cout << \"guess.size() = \" << guess.size() << endl;\n    assert(game.size()\
    \ == guess.size());\n    std::vector<long> res;\n    for (int i = 0; i < game.size();\
    \ i++) {\n        long diff = abs(game[i] - guess[i]);\n        res.push_back(diff);\n\
    \    }\n    return res;", "\tstd::vector<long> ret;\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tret.push_back(abs(game[i] - guess[i]));\n\t}\n\treturn ret;", " \
    \   std::vector<long> res;\n    if(game.size() == guess.size()){\n        for(int\
    \ i = 0; i < game.size(); i++){\n            if(game[i] == guess[i])\n       \
    \         res.push_back(0);\n            else if(game[i] < guess[i])\n       \
    \         res.push_back(guess[i] - game[i]);\n            else\n             \
    \   res.push_back(game[i] - guess[i]);\n        }\n    }\n    return res;", " \
    \ std::vector<long> result;\n  for (unsigned int i = 0; i < game.size(); i++)\
    \ {\n    long difference = abs(game[i] - guess[i]);\n    result.push_back(difference);\n\
    \  }\n  return result;", "\tstd::vector<long> results;\n\tfor (int i = 0; i <\
    \ game.size(); i++) {\n\t\tresults.push_back(std::abs(game[i] - guess[i]));\n\t\
    }\n\treturn results;", "\tstd::vector<long> scores;\n\tfor (unsigned int i = 0;\
    \ i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tscores.push_back(0);\n\
    \t\t}\n\t\telse {\n\t\t\tscores.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t\
    }\n\treturn scores;", "  std::vector<long> ret;\n  for(int i = 0; i < game.size();\
    \ i++) {\n    long diff = abs(game[i] - guess[i]);\n    ret.push_back(diff);\n\
    \  }\n  return ret;", "    int size = game.size();\n    for(int i = 0; i < size;\
    \ i++){\n        guess[i] = abs(game[i] - guess[i]);\n    }\n    return guess;",
  "\tfor (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] > guess[i]) {\n\t\t\t\
    guess[i] = game[i] - guess[i];\n\t\t}\n\t\telse if (game[i] < guess[i]) {\n\t\t\
    \tguess[i] = guess[i] - game[i];\n\t\t}\n\t\telse {\n\t\t\tguess[i] = 0;\n\t\t\
    }\n\t}\n\treturn guess;", "\tstd::vector<long> results;\n\tfor (int i = 0; i <\
    \ game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\tresults.push_back(0);\n\
    \t\t}\n\t\telse {\n\t\t\tresults.push_back(abs(game[i] - guess[i]));\n\t\t}\n\t\
    }\n\treturn results;", "    std::vector<long> result;\n    for(int i = 0; i <\
    \ game.size(); i++){\n        if(game[i] < guess[i]){\n            result.push_back(abs(game[i]\
    \ - guess[i]));\n        }else if(game[i] > guess[i]){\n            result.push_back(abs(game[i]\
    \ - guess[i]));\n        }else{\n            result.push_back(0);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for(int i = 0;\
    \ i < game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n\
    \        }\n        else{\n            result.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n    return result;", "    int n = game.size();\n    std::vector<long>\
    \ result(n);\n    for(int i = 0; i < n; i++)\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    return result;", "\tstd::vector<long> values;\n\tint i = 0;\n\
    \tfor (auto g : guess) {\n\t\tvalues.push_back(std::abs(game[i] - g));\n\t\ti++;\n\
    \t}\n\treturn values;", "    std::vector<long> result;\n    for(int i = 0; i <\
    \ game.size(); i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n\
    \        }\n        else{\n            result.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n    return result;", "    int length = game.size();\n    std::vector<long>\
    \ result(length);\n    for(int i = 0; i < length; i++){\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;", "\tstd::vector<long> result;\n\tfor\
    \ (int i = 0; i < game.size(); i++) {\n\t\tif (game[i] == guess[i]) {\n\t\t\t\
    result.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(abs(game[i] -\
    \ guess[i]));\n\t\t}\n\t}\n\treturn result;", "  std::vector<long> off;\n  for(unsigned\
    \ int i = 0; i < game.size(); i++){\n      if(game[i] == guess[i]){\n        \
    \  off.push_back(0);\n      }else{\n          long diff = abs(game[i] - guess[i]);\n\
    \          off.push_back(diff);\n      }\n  }\n  return off;", "    std::vector<long>\
    \ dif;\n    for(int i = 0; i < game.size(); i++){\n        if(guess[i] > game[i]){\n\
    \            dif.push_back(guess[i] - game[i]);\n        }\n        else if(guess[i]\
    \ < game[i]){\n            dif.push_back(game[i] - guess[i]);\n        }\n   \
    \     else{\n            dif.push_back(0);\n        }\n    }\n    return dif;",
  "  std::vector<long> diff;\n  for(int i = 0; i < game.size(); i++){\n    diff.push_back(abs(game[i]\
    \ - guess[i]));\n  }\n  return diff;", "  std::vector<long> result;\n  for (int\
    \ i = 0; i < game.size(); i++) {\n    if (game[i] == guess[i]) {\n      result.push_back(0);\n\
    \    } else {\n      result.push_back(abs(game[i] - guess[i]));\n    }\n  }\n\
    \  return result;", "    std::vector<long> diff;\n    for(int i = 0; i < game.size();\
    \ i++){\n        diff.push_back(std::abs(game[i] - guess[i]));\n    }\n    return\
    \ diff;", "    int count = 0;\n    for(int i = 0; i < game.size(); i++){\n   \
    \     if(game[i] == guess[i]){\n            game[i] = 0;\n        }\n        else\
    \ if(game[i] > guess[i]){\n            count = game[i] - guess[i];\n         \
    \   game[i] = count;\n        }\n        else if(game[i] < guess[i]){\n      \
    \      count = guess[i] - game[i];\n            game[i] = count;\n        }\n\
    \    }\n    return game;", "  std::vector<long> result;\n  for (int i = 0; i <\
    \ game.size(); i++) {\n    long diff = std::abs(game[i] - guess[i]);\n    result.push_back(diff);\n\
    \  }\n  return result;", "    std::vector<long> diff;\n    for(int i = 0; i <\
    \ game.size(); i++){\n        diff.push_back(std::abs(game[i] - guess[i]));\n\
    \    }\n    return diff;", "  int index = 0;\n  std::vector<long> results;\n \
    \ while(index < game.size()){\n    long difference = std::abs(game[index] - guess[index]);\n\
    \    results.push_back(difference);\n    index++;\n  }\n  return results;", " \
    \   std::vector<long> result;\n    for(long i = 0; i < game.size(); i++){\n  \
    \      if(game[i] == guess[i]){\n            result.push_back(0);\n        }\n\
    \        else{\n            result.push_back(abs(game[i] - guess[i]));\n     \
    \   }\n    }\n    return result;", "    vector<long> answer;\n    for(int i =\
    \ 0; i < game.size(); i++){\n        answer.push_back(abs(game[i] - guess[i]));\n\
    \    }\n    return answer;", "\tint n = game.size();\n\tint m = guess.size();\n\
    \tstd::vector<long> res;\n\tif (n!=m) return res;\n\tfor (int i=0; i<n; i++) {\n\
    \t\tif (game[i]>guess[i]) res.push_back(game[i]-guess[i]);\n\t\telse res.push_back(guess[i]-game[i]);\n\
    \t}\n\treturn res;", "  std::vector<long> v;\n  for(int i = 0; i < game.size();\
    \ i++){\n    if(game[i] == guess[i]){\n      v.push_back(0);\n    }\n    else{\n\
    \      v.push_back(abs(game[i] - guess[i]));\n    }\n  }\n  return v;", "    std::vector<long>\
    \ results;\n    for(auto x = 0; x < game.size(); x++){\n        if(game[x] ==\
    \ guess[x]){\n            results.push_back(0);\n        }\n        else{\n  \
    \          results.push_back(abs(game[x] - guess[x]));\n        }\n    }\n   \
    \ return results;", "    std::vector<long> arr(game.size());\n    for(int i =\
    \ 0; i < game.size(); i++){\n        arr[i] = std::abs(game[i] - guess[i]);\n\
    \    }\n    return arr;", "    std::vector<long> ret;\n    for(int i = 0; i <\
    \ game.size(); i++) {\n        ret.push_back(abs(game[i] - guess[i]));\n    }\n\
    \    return ret;", "    std::vector<long> res;\n    for(int i = 0; i < game.size();\
    \ i++){\n        if(game[i] == guess[i]){\n            res.push_back(0);\n   \
    \     }\n        else{\n            res.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n    return res;", "    std::vector<long> differences;\n   \
    \ for (long i = 0; i < game.size(); i++) {\n        if (game[i] > guess[i]) {\n\
    \            differences.push_back(game[i] - guess[i]);\n        } else if (game[i]\
    \ < guess[i]) {\n            differences.push_back(guess[i] - game[i]);\n    \
    \    } else {\n            differences.push_back(0);\n        }\n    }\n    return\
    \ differences;"]
stop_tokens:
- "\n}"
