name: HumanEval_47_median
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    //sort(l.begin(),l.end());\n\
    \    float med=0;\n    int n=l.size();\n    if(n%2==0) {\n        med=(l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else {\n        med=l[n/2];\n    }\n    return med;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmphzacgs8d: /tmp/tmphzacgs8d.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int size\
    \ = l.size();\n    std::sort(l.begin(), l.end());\n    if (size % 2 == 0) {\n\
    \        float x = l[size / 2];\n        float y = l[(size / 2) - 1];\n      \
    \  return (x + y) / 2;\n    }\n    else {\n        return l[size / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Implement\
    \ this placeholder.\n\treturn 0.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpcbjlitoj: /tmp/tmpcbjlitoj.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int lSize\
    \ = l.size();\n    int midPoint = lSize/2;\n    float median = 0;\n    if(lSize\
    \ % 2 == 0){\n        median = (l[midPoint-1] + l[midPoint])/2.0;\n    }else{\n\
    \        median = l[midPoint];\n    }\n    return median;\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp0f09jis0: /tmp/tmp0f09jis0.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint s = l.size();\n\
    \tsort(l.begin(), l.end());\n\tif (s % 2 == 0)\n\t\treturn ((double)l[s / 2] +\
    \ (double)l[s / 2 - 1]) / 2;\n\telse\n\t\treturn (double)l[s / 2];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your solution here\n\tlong size = l.size();\n\tlong mid = (size - 1) / 2;\n\t\
    if (size % 2 != 0) {\n\t\treturn (float)l[mid];\n\t}\n\telse {\n\t\treturn (float)(l[mid]\
    \ + l[mid + 1]) / 2;\n\t}\n\treturn 0;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp22o0e4ry: /tmp/tmp22o0e4ry.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tif (l.size()\
    \ % 2 == 0) {\n\t\treturn (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\t}\n\
    \telse {\n\t\treturn l[l.size() / 2];\n\t}\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpqhptdba6: /tmp/tmpqhptdba6.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  int n = l.size();\n\
    \  sort(l.begin(), l.end());\n  if (n % 2 != 0) {\n    return (float)l[n / 2];\n\
    \  }\n  else {\n    return (float)(l[(n - 1) / 2] + l[n / 2]) / 2.0;\n  }\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your code here.\n\tint n = l.size();\n\tif (n == 0)\n\t\treturn 0;\n\tif (n\
    \ == 1)\n\t\treturn l[0];\n\tif (n == 2)\n\t\treturn (l[0] + l[1]) / 2.0;\n\t\
    int mid = n / 2;\n\tif (n % 2 == 0)\n\t\treturn (l[mid - 1] + l[mid]) / 2.0;\n\
    \telse\n\t\treturn l[mid];\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpfuvxdgv0: /tmp/tmpfuvxdgv0.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0)\n        return (l[n /\
    \ 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // write\
    \ your code here\n    \n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp1wefrn5n: /tmp/tmp1wefrn5n.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        float med =\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n        return med;\n    }\n    else\n   \
    \     return l[n / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tif(l.size()\
    \ % 2 == 0) {\n\t\treturn (l[l.size()/2] + l[l.size()/2 - 1])/2.0;\n\t}\n\telse\
    \ {\n\t\treturn l[l.size()/2];\n\t}\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpprgken5d: /tmp/tmpprgken5d.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\tint size = l.size();\n\tfloat med = (float)size / 2;\n\tfloat ans\
    \ = 0;\n\tif (size % 2 == 0) {\n\t\tans = (l[size / 2] + l[size / 2 - 1]) / 2;\n\
    \t}\n\telse {\n\t\tans = l[size / 2];\n\t}\n\treturn ans;\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpwcz4bvn9: /tmp/tmpwcz4bvn9.cpp:26: int main(): Assertion `candidate((std::vector<long>({6,\
    \ 5}))) == (5.5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    return (l[(l.size()-1)/2] + l[l.size()/2]) / 2.0;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n % 2 != 0)\n\t\treturn (float)l[n / 2];\n\treturn (float)(l[(n - 1) / 2]\
    \ + l[n / 2]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_i86geht: /tmp/tmp_i86geht.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if(l.size()\
    \ == 0)\n        return 0;\n    sort(l.begin(), l.end());\n    return (l.size()%2==0)\
    \ ? (l[l.size()/2-1]+l[l.size()/2])/2.0 : l[l.size()/2];\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your solution here\n\t//return 0.0;\n\tif(l.size()%2==0){\n\t\treturn (l[l.size()/2]+l[l.size()/2-1])/2.0;\n\
    \t}else{\n\t\treturn l[l.size()/2];\n\t}\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpm4ezg0a1: /tmp/tmpm4ezg0a1.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  int size\
    \ = l.size();\n  assert(size > 0);\n  int mid = size / 2;\n  if (size % 2 == 0)\
    \ {\n    return (l[mid] + l[mid - 1]) / 2.0;\n  } else {\n    return l[mid];\n\
    \  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpe8w_qe1z: /tmp/tmpe8w_qe1z.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    return\
    \ 0.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpigeq9nu6: /tmp/tmpigeq9nu6.cpp:13: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // for\
    \ odd size\n    if (l.size()%2 == 1) {\n        std::nth_element(l.begin(), l.begin()\
    \ + l.size()/2, l.end());\n        return l[l.size()/2];\n    }\n    // for even\
    \ size\n    else {\n        std::nth_element(l.begin(), l.begin() + l.size()/2,\
    \ l.end());\n        float med1 = l[l.size()/2];\n        std::nth_element(l.begin(),\
    \ l.begin() + l.size()/2 - 1, l.end());\n        float med2 = l[l.size()/2 - 1];\n\
    \        return (med1 + med2)/2;\n    }\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  assert(!l.empty());\n\
    \  std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    // even length:\
    \ use average of middle two elements\n    int m2 = l.size() / 2;\n    return (l[m2\
    \ - 1] + l[m2]) / 2.0;\n  } else {\n    // odd length: use middle element\n  \
    \  return l[l.size() / 2];\n  }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  assert(l.size()\
    \ > 0);\n  std::sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size()\
    \ / 2];\n  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    sort(l.begin(), l.end());\n    if(n%2!=0)\n\
    \    {\n        return l[n/2];\n    }\n    else\n    {\n        return (l[n/2]+l[(n/2)-1])/2.0;\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // write\
    \ your code here\n    float mn;\n    long int n = l.size();\n    if(n%2 == 0)\
    \ {\n        mn = (l[n/2-1] + l[n/2])/2.0;\n    }\n    else {\n        mn = l[n/2];\n\
    \    }\n    return mn;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpc38hbqgg: /tmp/tmpc38hbqgg.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t\tlong mid;\n\
    \t\tstd::sort(l.begin(), l.end());\n\t\tlong n = l.size();\n\t\tif (n % 2 != 0)\n\
    \t\t\t\treturn (float)l[n / 2];\n\t\telse\n\t\t\t\treturn (float)(l[(n - 1) /\
    \ 2] + l[n / 2]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // WRITE\
    \ YOUR CODE HERE\n  int n = l.size();\n  if(n % 2 == 0)\n  {\n    return (l[n/2]\
    \ + l[n/2 - 1])/2.0;\n  }\n  else\n  {\n    return l[n/2];\n  }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmphmgczlm9: /tmp/tmphmgczlm9.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    // assert(l.size() > 0);\n    if (l.size() == 0)\n        return\
    \ -1;\n    else if (l.size() == 1)\n        return l[0];\n    else if (l.size()\
    \ % 2 == 0)\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n \
    \   else\n        return l[l.size() / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(false);\n\
    \    return 0.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmptquvxo5_: /tmp/tmptquvxo5_.cpp:9: float median(std::vector<long int>):\
    \ Assertion `false' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  int n = l.size();\n\
    \  sort(l.begin(), l.end());\n  if (n == 0) {\n    return 0;\n  }\n  if (n%2 ==\
    \ 0) {\n    return (l[n/2-1] + l[n/2])/2.0;\n  }\n  return l[n/2];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if(l.size()\
    \ == 0) {\n        return 0;\n    }\n    std::sort(l.begin(), l.end());\n    return\
    \ l.size() % 2 == 0 ? ((float)l[l.size()/2 - 1] + (float)l[l.size()/2])/2 : (float)l[l.size()/2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n       \
    \ return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    \n    sort(l.begin(),\
    \ l.end());\n    int size = l.size();\n    float median = 0;\n    if(size % 2\
    \ == 0) {\n        median = (l[size/2] + l[(size/2) - 1])/2.0;\n    }\n    else\
    \ {\n        median = l[size/2];\n    }\n    return median;\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n == 0) {\n        return 0;\n   \
    \ }\n    else if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \    }\n    else {\n        return l[n / 2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    if(n&1)\n        return l[n/2];\n    else\n        return (l[n/2-1]+l[n/2])/2.0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp1rnea7bb: /tmp/tmp1rnea7bb.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // your\
    \ code here\n    std::sort(l.begin(),l.end());\n    int size=l.size();\n    if(size%2==0)\n\
    \    {\n        return (l[size/2-1]+l[size/2])/2.0;\n    }\n    else\n    {\n\
    \        return l[size/2];\n    }\n    \n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your code here\n\tint size = l.size();\n\t// sort the vector\n\tstd::sort(l.begin(),\
    \ l.end());\n\tif (size % 2 != 0) {\n\t\t// if size is odd\n\t\treturn l[size\
    \ / 2];\n\t}\n\telse {\n\t\t// if size is even\n\t\tfloat x = l[size / 2];\n\t\
    \tfloat y = l[(size / 2) - 1];\n\t\tfloat avg = (x + y) / 2;\n\t\treturn avg;\n\
    \t}\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // your\
    \ code here\n    long n = l.size();\n    float m1, m2;\n    if(n % 2 == 0)\n \
    \   {\n        m1 = l[n/2];\n        m2 = l[n/2 - 1];\n        return (m1 + m2)/2;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }\n    \n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpfmdifdmp: /tmp/tmpfmdifdmp.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // write\
    \ your code here\n    // replace this return line with your code\n    return 0.0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp9zdnkh9s: /tmp/tmp9zdnkh9s.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tassert(l.size()\
    \ > 0);\n\tstd::sort(l.begin(), l.end());\n\tif (l.size() % 2 == 0) {\n\t\tlong\
    \ l1 = l[l.size() / 2];\n\t\tlong l2 = l[l.size() / 2 - 1];\n\t\treturn float(l1\
    \ + l2) / 2;\n\t}\n\telse {\n\t\treturn l[l.size() / 2];\n\t}\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // TODO:\
    \ Your code here\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n  if(n%2==0)\n\
    \  {\n      return (l[n/2]+l[n/2-1])/2.0;\n  }\n  else\n  {\n      return l[n/2];\n\
    \  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // use\
    \ bit_or to avoid -0.0\n    assert(l.size()!=0);\n    if (l.size()%2==0)\n   \
    \     return (l[l.size()/2]+l[l.size()/2-1])/2.0;\n    else\n        return l[l.size()/2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_p5o7rus: /tmp/tmp_p5o7rus.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\n// write\
    \ your code here\nint x=0;\nint y=0;\n\nint a = l.size();\n\nif(a%2==0)\n{\n \
    \ x = a/2;\n  y = (a/2) - 1;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzdckqq9_.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpzdckqq9_.cpp:21:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   21 | int main() {\n      |            ^\n/tmp/tmpzdckqq9_.cpp:28:1:\
    \ error: expected \u2018}\u2019 at end of input\n   28 | }\n      | ^\n/tmp/tmpzdckqq9_.cpp:8:35:\
    \ note: to match this \u2018{\u2019\n    8 | float median(std::vector<long> l)\
    \ {\n      |                                   ^\n/tmp/tmpzdckqq9_.cpp:28:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   28 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int i;\n\
    \    if(l.size()%2==0)\n    {\n        i=l.size()/2;\n        return (l[i]+l[i-1])/2.0;\n\
    \    }\n    else\n    {\n        i=l.size()/2;\n        return l[i];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpa1rry5k7: /tmp/tmpa1rry5k7.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// YOUR CODE\
    \ HERE\n\tint median_index;\n\tint size = l.size();\n\tif (size % 2 == 0)\n\t\t\
    median_index = size / 2;\n\telse\n\t\tmedian_index = (size + 1) / 2;\n\tstd::sort(l.begin(),\
    \ l.end());\n\treturn (float)l[median_index];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpml22wbyb: /tmp/tmpml22wbyb.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    int mid = l.size()/2;\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[mid-1] + l[mid])/2.0;\n    } else {\n        return l[mid];\n    }\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp45_ow9mn: /tmp/tmp45_ow9mn.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n   /*\n   \
    \ * First sort the given list \n    * then find the median \n    * if size of\
    \ list is even then take two element and divide by 2\n    * else take the median\
    \ of the given list.\n    */\n    std::sort(l.begin(), l.end());\n    int size\
    \ = l.size();\n    if(size%2 == 0)\n    {\n        return (l[size/2] + l[(size/2)-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[size/2];\n    }\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tassert(!l.empty());\n\
    \t//sort the vector\n\tsort(l.begin(), l.end());\n\t//if the size of the vector\
    \ is odd\n\tif (l.size() % 2 == 1) {\n\t\tint mid = l.size() / 2;\n\t\treturn\
    \ l[mid];\n\t}\n\t//if size is even\n\telse {\n\t\tint mid = l.size() / 2;\n\t\
    \treturn (l[mid] + l[mid - 1]) / 2.0;\n\t}\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // your\
    \ code here\n    // sort(l.begin(),l.end());\n    std::sort(l.begin(),l.end());\n\
    \    int x=l.size();\n    if(x%2==0)\n    {\n        return ((l[x/2-1]+l[x/2])/2.0);\n\
    \    }\n    else\n    {\n        return l[x/2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if(l.size()%2!=0)\n\
    \    {\n      int median_index=l.size()/2;\n      float median=l[median_index];\n\
    \      return median;\n    }\n    else\n    {\n      int median_index=l.size()/2;\n\
    \      float median=(float)(l[median_index]+l[median_index-1])/2;\n      return\
    \ median;\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpx_vgv5sf: /tmp/tmpx_vgv5sf.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // INSERT\
    \ YOUR CODE HERE\n  std::sort(l.begin(), l.end());\n  if (l.size()%2==0)\n   \
    \ return (l[l.size()/2] + l[l.size()/2-1])/2.0;\n  else\n    return l[l.size()/2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(!l.empty());\n\
    \    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    }\n    else {\n   \
    \     return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Yourn\
    \ code here\n    sort(l.begin(),l.end());\n    int n = l.size();\n    if(n==0)\
    \ return 0;\n    if(n%2==0)\n    {\n        float a = l[n/2];\n        float b\
    \ = l[n/2-1];\n        return (a+b)/2;\n    }\n    else\n    {\n        return\
    \ l[n/2];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint l_len\
    \ = l.size();\n\tsort(l.begin(), l.end());\n\tif (l_len % 2 == 0) {\n\t\treturn\
    \ (l[l_len / 2] + l[l_len / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[l_len\
    \ / 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::vector<float>\
    \ a;\n    for(int i=0;i<l.size();i++)\n    {\n        a.push_back(l[i]);\n   \
    \ }\n    std::sort(a.begin(),a.end());\n    int n=a.size();\n    float median=0;\n\
    \    if(n%2==0)\n    {\n        median=(a[n/2]+a[(n/2)-1])/2;\n    }\n    else\n\
    \    {\n        median=a[n/2];\n    }\n    return median;\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long n\
    \ = l.size();\n    std::vector<long> minHeap;\n    std::vector<long> maxHeap;\n\
    \    maxHeap.push_back(l[0]);\n    if(n == 1)\n        return l[0];\n    for(long\
    \ i = 1; i < n; i++) {\n        if(l[i] <= maxHeap[0]) {\n            maxHeap.push_back(l[i]);\n\
    \            std::push_heap(maxHeap.begin(), maxHeap.end(), std::greater<long>());\n\
    \        }\n        else {\n            minHeap.push_back(l[i]);\n           \
    \ std::push_heap(minHeap.begin(), minHeap.end());\n        }\n        if(maxHeap.size()\
    \ > minHeap.size() + 1) {\n            std::pop_heap(maxHeap.begin(), maxHeap.end(),\
    \ std::greater<long>());\n            minHeap.push_back(maxHeap.back());\n   \
    \         std::push_heap(minHeap.begin(), minHeap.end());\n            maxHeap.pop_back();\n\
    \        }\n        else if(minHeap.size() > maxHeap.size()) {\n            std::pop_heap(minHeap.begin(),\
    \ minHeap.end());\n            maxHeap.push_back(minHeap.back());\n          \
    \  std::push_heap(maxHeap.begin(), maxHeap.end(), std::greater<long>());\n   \
    \         minHeap.pop_back();\n        }\n    }\n    if(maxHeap.size() == minHeap.size())\n\
    \        return (maxHeap[0] + minHeap[0]) / 2.0;\n    else\n        return maxHeap[0];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpz3k_dl8y: /tmp/tmpz3k_dl8y.cpp:44: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    int i;\n    long sum = 0;\n    for(i=0;i<n;i++)\n    {\n    \
    \    sum = sum + l[i];\n    }\n    float med = (float)sum/n;\n    return med;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpeflez7a1: /tmp/tmpeflez7a1.cpp:22: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n % 2 == 0) {\n\t\t//n is even\n\t\tn = n / 2;\n\t\treturn (l[n - 1] + l[n])\
    \ / 2.0;\n\t}\n\telse {\n\t\t//n is odd\n\t\tn = n / 2;\n\t\treturn l[n];\n\t\
    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpf03mdwv4: /tmp/tmpf03mdwv4.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    int size = l.size();\n    std::sort(l.begin(), l.end());\n    if\
    \ (size % 2 == 0) {\n        return (l[size / 2] + l[size / 2 - 1]) / 2.0;\n \
    \   }\n    else {\n        return l[size / 2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n// >>> median([10,\
    \ 20, 30, 40, 50])\n// 30\n// >>> median([0.5, 1.0, 2.0, 3.0, 4.0])\n// 2.5\n\
    // >>> median([0.5, 1.0, 2.0, 3.0, 4.0, 5.0])\n// 2.5\nint n = l.size();\nstd::sort(l.begin(),\
    \ l.end());\nif (n%2 == 0) {\nfloat m1 = l[n/2-1];\nfloat m2 = l[n/2];\nfloat\
    \ m = (m1+m2)/2;\nreturn m;\n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n \
    \   assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz9fbny_c.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpz9fbny_c.cpp:23:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   23 | int main() {\n      |            ^\n/tmp/tmpz9fbny_c.cpp:30:1:\
    \ error: expected \u2018}\u2019 at end of input\n   30 | }\n      | ^\n/tmp/tmpz9fbny_c.cpp:8:35:\
    \ note: to match this \u2018{\u2019\n    8 | float median(std::vector<long> l)\
    \ {\n      |                                   ^\n/tmp/tmpz9fbny_c.cpp:30:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   30 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float ans;\n\
    \    std::sort(l.begin(), l.end());\n    if(l.size()%2 == 0)\n        ans = (l[l.size()/2]\
    \ + l[l.size()/2-1])/2.0;\n    else\n        ans = l[l.size()/2];\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n   //return\
    \ 0.0;\n   float sum=0;\n    for(int i=0;i<l.size();i++)\n    {\n        sum+=l[i];\n\
    \    }\n    float a=sum/l.size();\n    return a;\n    // Write your code here\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmppqeajxp2: /tmp/tmppqeajxp2.cpp:22: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Write\
    \ your solution here\n  long count = l.size();\n  sort(l.begin(), l.end());\n\
    \  if (count % 2 == 0)\n  {\n    return (l[count / 2] + l[count / 2 - 1]) / 2.0;\n\
    \  }\n  else\n  {\n    return l[count / 2];\n  }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Implement\
    \ median here\n    std::sort(l.begin(), l.end());\n    // to check the length\
    \ is even or odd\n    int n = l.size();\n    if (n % 2 == 0)\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    else\n        return l[n / 2];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  int size\
    \ = l.size();\n  if (size % 2 == 0) {\n    return (l[size / 2] + l[size / 2 -\
    \ 1]) / 2.0;\n  } else {\n    return l[size / 2];\n  }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpmejlmtpo: /tmp/tmpmejlmtpo.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // write\
    \ your code here\n  if(l.size()==0)\n    return 0;\n  if(l.size()==1)\n    return\
    \ l[0];\n  sort(l.begin(),l.end());\n  if(l.size()%2==0)\n    return (l[l.size()/2]+l[l.size()/2-1])/2.0;\n\
    \  else\n    return l[l.size()/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Fill this\
    \ in.\n\tstd::vector<long> l1;\n\tstd::vector<long> l2;\n\tstd::vector<long> l3;\n\
    \tfor (int i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) {\n\t\t\tl1.push_back(l[i]);\n\
    \t\t}\n\t\telse if (l[i] < 0) {\n\t\t\tl2.push_back(l[i]);\n\t\t}\n\t\telse {\n\
    \t\t\tl3.push_back(l[i]);\n\t\t}\n\t}\n\tfloat a = (float)l1.size() / 2;\n\tfloat\
    \ b = (float)l2.size() / 2;\n\tfloat c = (float)l3.size() / 2;\n\ta = (l1[floor(a)]\
    \ + l1[ceil(a)]) / 2;\n\tb = (l2[floor(b)] + l2[ceil(b)]) / 2;\n\tc = (l3[floor(c)]\
    \ + l3[ceil(c)]) / 2;\n\treturn (a + b + c) / 3;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    int i;\n    float median=0;\n    if(n==0)\n        return 0;\n\
    \    if(n%2==0)\n    {\n        i=n/2;\n        median=(float(l[i-1])+float(l[i]))/2;\n\
    \    }\n    else\n    {\n        i=n/2;\n        median=l[i];\n    }\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpeiyw0lcm: /tmp/tmpeiyw0lcm.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float m;\n\
    \    if(l.size() % 2 == 0) {\n        m = l[l.size()/2] + l[l.size()/2 - 1];\n\
    \        m /= 2;\n    }\n    else\n        m = l[l.size()/2];\n    return m;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp3lhz55n7: /tmp/tmp3lhz55n7.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int len\
    \ = l.size();\n    std::sort(l.begin(), l.end());\n    if (len%2 == 0) {\n   \
    \     return (l[len/2] + l[len/2 - 1])/2.0;\n    }\n    else {\n        return\
    \ l[len/2];\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    auto l1 = l;\n    auto l2 = l;\n    auto l3 = l;\n    auto l4 = l;\n\
    \    auto l5 = l;\n    auto l6 = l;\n    auto l7 = l;\n    auto l8 = l;\n    auto\
    \ l9 = l;\n    auto l10 = l;\n    auto l11 = l;\n    auto l12 = l;\n    auto l13\
    \ = l;\n    auto l14 = l;\n    auto l15 = l;\n    auto l16 = l;\n    auto l17\
    \ = l;\n    auto l18 = l;\n    auto l19 = l;\n    auto l20 = l;\n    auto l21\
    \ = l;\n    auto l22 = l;\n    auto l23 = l;\n    auto l24 = l;\n    auto l25\
    \ = l;\n    auto l26 = l;\n    auto l27 = l;\n    auto l28 = l;\n    auto l29\
    \ = l;\n    auto l30 = l;\n    auto l31 = l;\n    auto l32 = l;\n    auto l33\
    \ = l;\n    auto l34 = l;\n    auto l35 = l;\n    auto l36 = l;\n    auto l37\
    \ = l;\n    auto l38 = l;\n    auto l39 = l;\n    auto l40 = l;\n    auto l41\
    \ = l;\n    auto l42 = l;\n    auto l43 = l;\n    auto l44 = l;\n    auto l45\
    \ = l;\n    auto l46 = l;\n    auto l47 = l;\n    auto l48 = l;\n    auto l49\
    \ = l;\n    auto l50 = l;\n    auto l51 = l;\n    auto l52 = l;\n    auto l53\
    \ = l;\n    auto l54 = l;\n    auto l55 = l;\n    auto l56 = l;\n    auto l57\
    \ = l;\n    auto l58 = l;\n    auto l59 = l;\n    auto l60 = l;\n    auto l61\
    \ = l;\n    auto l62 = l;\n    auto l63\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvhf_ovnd.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpvhf_ovnd.cpp:73:1: error: expected initializer before \u2018}\u2019\
    \ token\n   73 | }\n      | ^\n/tmp/tmpvhf_ovnd.cpp:73:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   73 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Your code\
    \ here\n\tstd::sort(l.begin(), l.end());\n\tsize_t n = l.size();\n\tif (n % 2\
    \ == 0)\n\t\treturn (l[n / 2 - 1] + l[n / 2]) / 2.0;\n\telse\n\t\treturn l[n /\
    \ 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  \n  if(l.size()==0)\n\
    \  {\n    return 0;\n  }\n  sort(l.begin(),l.end());\n  if(l.size()%2==0)\n  {\n\
    \    int a = l.size()/2;\n    int b = a-1;\n    return (l[a]+l[b])/2.0;\n  }\n\
    \  else\n  {\n    int a = l.size()/2;\n    return l[a];\n  }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your code here\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpmja9y646: /tmp/tmpmja9y646.cpp:13: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO\n\
    \    std::vector<long>::iterator it;\n    int size = l.size();\n    float result\
    \ = 0;\n    std::sort(l.begin(), l.end());\n    if(size%2!=0)\n    {\n       \
    \ result = l[size/2];\n    }\n    else\n    {\n        result = (l[size/2]+l[(size/2)-1])/2.0;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement me\n    int temp = 0;\n    int median = 0;\n    std::sort(l.begin(),\
    \ l.end());\n    if(l.size()%2 == 0){\n        temp = (l.size()/2)-1;\n      \
    \  median = (l[temp]+l[temp+1])/2;\n    }\n    else{\n        temp = (l.size()/2);\n\
    \        median = l[temp];\n    }\n    return median;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpri137x_p: /tmp/tmpri137x_p.cpp:28: int main(): Assertion `candidate((std::vector<long>({6,\
    \ 5}))) == (5.5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // WRITE\
    \ YOUR CODE HERE\n    return 0.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp3jh8on_9: /tmp/tmp3jh8on_9.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  long size = l.size();\n  if (size % 2 == 0) {\n    return (l[size\
    \ / 2] + l[size / 2 - 1]) / 2.0;\n  } else {\n    return l[size / 2];\n  }\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    return\
    \ 15.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp1kkzkbbe: /tmp/tmp1kkzkbbe.cpp:13: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // YOUR CODE\
    \ HERE\n  int n = l.size();\n  std::sort(l.begin(), l.end());\n  if(n % 2 == 0)\
    \ {\n    return (l[n/2] + l[n/2 - 1]) / 2.0;\n  }\n  else {\n    return l[n/2];\n\
    \  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // write\
    \ your code here\n    int n = l.size();\n    std::sort(l.begin(), l.end());\n\
    \    if(n % 2 == 0)\n        return ((l[n/2-1] + l[n/2])/2.0);\n    else\n   \
    \     return l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    int len = l.size();\n    float\
    \ mid = len/2;\n    if(len % 2 == 0) {\n        return (l[mid] + l[mid-1])/2.0;\n\
    \    }\n    else {\n        return l[mid];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    return ((l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0);\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpu8q1vc75: /tmp/tmpu8q1vc75.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()>0);\n\
    \    if(l.size()==1)\n    {\n        return l[0];\n    }\n    else if(l.size()%2==0)\n\
    \    {\n        float median=0;\n        std::sort(l.begin(),l.end());\n     \
    \   median=(l[l.size()/2-1]+l[l.size()/2])/2.0;\n        return median;\n    }\n\
    \    else\n    {\n        float median=0;\n        std::sort(l.begin(),l.end());\n\
    \        median=l[l.size()/2];\n        return median;\n    }\n    return 0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// WRITE\
    \ YOUR CODE HERE\n\tlong med;\n\t//long mid;\n\tfloat medf;\n\tsort(l.begin(),\
    \ l.end());\n\tif (l.size() % 2 == 0) {\n\t\tlong mid1 = l.size() / 2;\n\t\tlong\
    \ mid2 = mid1 - 1;\n\t\tmed = (l[mid1] + l[mid2]) / 2;\n\t\tmedf = med;\n\t}\n\
    \telse {\n\t\tlong mid = l.size() / 2;\n\t\tmed = l[mid];\n\t\tmedf = med;\n\t\
    }\n\treturn medf;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp7pp0gwdu: /tmp/tmp7pp0gwdu.cpp:32: int main(): Assertion `candidate((std::vector<long>({6,\
    \ 5}))) == (5.5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\tint s = l.size();\n\tif (s % 2 == 0) {\n\t\treturn (l[s / 2] +\
    \ l[s / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[s / 2];\n\t}\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float median\
    \ = 0;\n    sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        median\
    \ = (l[l.size() / 2 - 1] + l[l.size() / 2]) / 2.0;\n    } else {\n        median\
    \ = l[l.size() / 2];\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if (l.size()\
    \ == 0) {\n        return 0;\n    }\n    sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    }\n    return l[l.size() / 2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse\
    \ {\n\t\treturn l[n / 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp99bgey6n: /tmp/tmp99bgey6n.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int mid\
    \ = ceil(l.size()/2);\n    std::nth_element(l.begin(), l.begin()+mid, l.end());\n\
    \    if (l.size()%2==0) {\n        int mid2 = mid-1;\n        std::nth_element(l.begin(),\
    \ l.begin()+mid2, l.end());\n        return (l[mid]+l[mid2])/2.0;\n    }\n   \
    \ return l[mid];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint size\
    \ = l.size();\n\tsort(l.begin(), l.end());\n\tif (size % 2 != 0)\n\t\treturn (float)l[size\
    \ / 2];\n\treturn (float)(l[(size - 1) / 2] + l[size / 2]) / 2.0;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\treturn (l[2]\
    \ + l[3]) / 2.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpdtv1xsjl: /tmp/tmpdtv1xsjl.cpp:14: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  int n = l.size();\n\
    \  if (n == 0)\n    return 0;\n  std::sort(l.begin(), l.end());\n  if (n % 2 ==\
    \ 0)\n    return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n  else\n    return l[n / 2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    std::sort(l.begin(), l.end());\n    if (n % 2 == 0) {\n     \
    \   return (float) (l[n / 2] + l[n / 2 - 1]) / 2;\n    } else {\n        return\
    \ (float) l[n / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Add\
    \ your code here.\n    int sz = l.size();\n    if(!sz) return 0;\n    if(sz &\
    \ 1) return l[sz/2];\n    return (l[sz/2] + l[sz/2 - 1])/2.0;\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpy3aijvk5: /tmp/tmpy3aijvk5.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t//int i =\
    \ 0;\n\t//float m = 0;\n\t//float sum = 0;\n\tint j = 0;\n\tint size = l.size();\n\
    \tif (size % 2 == 0) {\n\t\tint temp1 = l[size / 2];\n\t\tint temp2 = l[(size\
    \ / 2) - 1];\n\t\treturn (temp1 + temp2) / 2;\n\t}\n\telse {\n\t\treturn l[(size\
    \ / 2)];\n\t}\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmprcjbi2xt: /tmp/tmprcjbi2xt.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tassert(l.size()!=0);\n\
    \tsize_t n = l.size();\n\tif(n==1) return l[0];\n\tint mid = n/2;\n\tstd::nth_element(l.begin(),\
    \ l.begin()+mid, l.end());\n\tif(n%2==0)\n\t{\n\t\tstd::nth_element(l.begin(),\
    \ l.begin()+mid-1, l.end());\n\t\treturn (l[mid-1]+l[mid])/2.0;\n\t}\n\treturn\
    \ l[mid];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    return\
    \ -1.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp0f6zovtk: /tmp/tmp0f6zovtk.cpp:13: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(!l.empty());\n\
    \    std::vector<long>::iterator itr = l.begin();\n    if(l.size() == 1)\n   \
    \     return *itr;\n    std::sort(l.begin(), l.end());\n    if(l.size() % 2 ==\
    \ 0)\n        return (l[l.size()/2-1] + l[l.size()/2])/2.0;\n    else\n      \
    \  return l[l.size()/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (float)(l[l.size() / 2] + l[l.size() / 2 - 1]) / 2;\n    }\n   \
    \ else {\n        return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n%2 == 0) {\n        return (l[n/2]\
    \ + l[n/2 - 1])/2.0;\n    }\n    else {\n        return l[n/2];\n    }\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // todo:\
    \ implement\n  assert(l.size()!=0);\n  std::sort(l.begin(),l.end());\n  int mid\
    \ = l.size()/2;\n  if(l.size()%2==0)\n  {\n    return (l[mid]+l[mid-1])/2.0;\n\
    \  }\n  else\n  {\n    return l[mid];\n  }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    return\
    \ 0.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpqw0y930j: /tmp/tmpqw0y930j.cpp:13: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int size = l.size();\n    if (size % 2 == 0)\n        return\
    \ (l[size / 2 - 1] + l[size / 2]) / 2.0;\n    else\n        return l[size / 2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    int low = 0;\n    int high = n - 1;\n    while (low < high) {\n\
    \        int mid = (low + high) / 2;\n        int i = low;\n        int j = high;\n\
    \        while (i < j) {\n            while (l[i] < l[mid]) i++;\n           \
    \ while (l[j] > l[mid]) j--;\n            if (i <= j) {\n                std::swap(l[i],\
    \ l[j]);\n                i++;\n                j--;\n            }\n        }\n\
    \        if (j < mid) low = i;\n        if (i > mid) high = j;\n    }\n    if\
    \ (n % 2) return (float)l[n / 2];\n    else return (float)(l[n / 2] + l[n / 2\
    \ - 1]) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpg5tbrms3: /tmp/tmpg5tbrms3.cpp:34: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tassert(!l.empty());\n\
    \tstd::sort(l.begin(), l.end());\n\tif (l.size() % 2 == 0) {\n\t\treturn ((float)l[l.size()\
    \ / 2] + (float)l[l.size() / 2 - 1]) / 2;\n\t}\n\telse {\n\t\treturn (float)l[l.size()\
    \ / 2];\n\t}\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\tint n = l.size();\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ fill this in\n    return 0.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp1e5v0qnh: /tmp/tmp1e5v0qnh.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t\n\treturn\
    \ 0.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp7lgr80_t: /tmp/tmp7lgr80_t.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint len =\
    \ l.size();\n\tstd::sort(l.begin(), l.end());\n\tif (len % 2 == 0) {\n\t\treturn\
    \ (l[len / 2] + l[len / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[len / 2];\n\
    \t}\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int middle\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return (l[middle] + l[middle\
    \ - 1]) / 2.0;\n    } else {\n        return l[middle];\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmplymsdf4e: /tmp/tmplymsdf4e.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    sort(l.begin(), l.end());\n    int len = l.size();\n    if (len %\
    \ 2 == 0) {\n        return (l[len / 2] + l[len / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[len / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long size\
    \ = l.size();\n    if (size == 0)\n        return 0;\n    if (size % 2 == 0)\n\
    \        return ((float)l[size / 2] + (float)l[size / 2 - 1]) / 2;\n    else\n\
    \        return (float)l[size / 2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpkha1v8pj: /tmp/tmpkha1v8pj.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// *********The\
    \ code for median below ************\n\tstd::sort(l.begin(), l.end());\n\tfloat\
    \ med;\n\tif (l.size() % 2 == 0)\n\t\tmed = ((float)l[l.size() / 2] + (float)l[l.size()\
    \ / 2 - 1]) / 2;\n\telse\n\t\tmed = (float)l[l.size() / 2];\n\treturn med;\n\t\
    // *********The code for median above ************\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// BEGIN\n\
    \tstd::sort(l.begin(), l.end());\n\tint n = l.size();\n\tif (n % 2 == 0)\n\t\t\
    return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n\telse\n\t\treturn l[n / 2];\n\t// END\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    long size = l.size();\n    if (size % 2 == 0) {\n        long\
    \ mid1 = size / 2;\n        long mid2 = mid1 - 1;\n        return (l[mid1] + l[mid2])\
    \ / 2.0;\n    } else {\n        long mid = size / 2;\n        return l[mid];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float median\
    \ = 0;\n    std::sort(l.begin(), l.end());\n    int mid1 = (l.size()-1)/2;\n \
    \   int mid2 = l.size()/2;\n    if(l.size()%2 == 0) {\n        median = (l[mid1]\
    \ + l[mid2])/2.0;\n    }\n    else {\n        median = l[mid1];\n    }\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()!=0);\n\
    \    std::sort(l.begin(),l.end());\n    int n=l.size();\n    if(n%2==0)\n    \
    \    return (l[n/2]+l[n/2-1])/2.0;\n    else\n        return l[n/2];\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    /* TODO\
    \ */\n    int len = l.size();\n    int counter = 0;\n    int k = 1;\n    float\
    \ med = 0;\n    std::sort(l.begin(), l.end());\n    if(len%2 == 0){\n        k\
    \ = 0;\n        for(int i = 0; i < len; i++){\n            counter += 1;\n   \
    \         if(counter == len/2)\n                med += l[i];\n            if(counter\
    \ == len/2 + 1){\n                med += l[i];\n                med = med/2;\n\
    \                return med;\n            }\n        }\n    }\n    else{\n   \
    \     while(k <= len/2 + 1){\n            med = l[k-1];\n            k++;\n  \
    \      }\n    }\n    return med;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int size\
    \ = l.size();\n    if(size%2==0){\n        return (l[size/2-1]+l[size/2])/2.0;\n\
    \    }\n    else{\n        return l[size/2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpu7ptkp6u: /tmp/tmpu7ptkp6u.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    //int l[10]\
    \ = {3, 1, 2, 4, 5};\n\tstd::sort(l.begin(), l.end());\n\n\tint i;\n\tlong val\
    \ = 0;\n\tfor(i = 0; i < l.size(); i++)\n\t{\n\t\tval += l[i];\n\t}\n\tval = val/l.size();\n\
    \treturn val;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpov7pq6q3: /tmp/tmpov7pq6q3.cpp:24: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    //write\
    \ your code here\n    int n = l.size();\n    sort(l.begin(), l.end());\n    if(n\
    \ % 2 == 0)\n        return (l[n/2 - 1] + l[n/2])/2.0;\n    else\n        return\
    \ l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  long n =\
    \ l.size();\n  if (n==0) return -1;\n  std::sort(l.begin(), l.end());\n  if (n%2\
    \ == 0)\n    return (l[n/2 - 1] + l[n/2])/2.0;\n  else\n    return l[n/2];\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Place\
    \ your code here\n\t//creating a copy\n\tstd::vector<long> k = l;\n\t//sort the\
    \ copy\n\tstd::sort(k.begin(), k.end());\n\t//calculate the length\n\tint len\
    \ = k.size();\n\t//if the length is even\n\tif (len % 2 == 0) {\n\t\t//add the\
    \ half and hald plus one index and then divide by 2 to calculate\n\t\t//the mean\n\
    \t\tfloat median = (k[len / 2] + k[(len / 2) - 1]) / 2.0;\n\t\treturn median;\n\
    \t}\n\t//else return the middle index\n\telse {\n\t\treturn k[len / 2];\n\t}\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  long length\
    \ = l.size();\n  if (length%2 == 0) {\n    long a = length/2;\n    long b = a-1;\n\
    \    return float(l[a]+l[b])/2;\n  }\n  else {\n    long index = length/2;\n \
    \   return l[index];\n  }\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n   \
    \ assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp9o936g1h: /tmp/tmp9o936g1h.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float med\
    \ = 0;\n    int siz = l.size();\n    sort(l.begin(), l.end());\n    if(siz%2 !=\
    \ 0)\n        med = (float)l[siz/2];\n    else\n        med = (float)(l[siz/2]+l[(siz/2)-1])/2;\n\
    \    return med;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // assert(l.size()%2==0);\n\
    \  int m = l.size()/2;\n  std::nth_element(l.begin(), l.begin()+m, l.end());\n\
    \  if(l.size()%2==0) {\n    std::nth_element(l.begin(), l.begin()+m-1, l.end());\n\
    \    return (l[m]+l[m-1])/2.0;\n  }\n  return l[m];\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// TODO\n\
    \tint size_l = l.size();\n\tstd::sort(l.begin(), l.end());\n\tif (size_l % 2 ==\
    \ 0)\n\t\treturn (l[size_l / 2] + l[size_l / 2 - 1]) / 2.0;\n\telse\n\t\treturn\
    \ l[size_l / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    sort(l.begin(), l.end());\n    if (n % 2 == 0) {\n        return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n \
    \   }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Write\
    \ your code here\n\tfloat med;\n\tint n = l.size();\n\tsort(l.begin(), l.end());\n\
    \tif (n % 2 == 0)\n\t\tmed = (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\telse\n\t\tmed\
    \ = l[n / 2];\n\treturn med;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    return\
    \ 3.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpboc3on9y: /tmp/tmpboc3on9y.cpp:14: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int n =\
    \ l.size();\n    int c = 0;\n    float med = 0;\n    std::sort(l.begin(), l.end());\n\
    \    if(n%2 == 0) {\n        int i = n/2 - 1;\n        med = (l[i] + l[i+1])/2.0;\n\
    \    }\n    else {\n        int i = (n-1)/2;\n        med = l[i];\n    }\n   \
    \ return med;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  /* write\
    \ your code here */\n    float x=0;\n    long n=l.size();\n    if(n%2==0)\n  \
    \  {\n        x=(l[n/2]+l[(n/2)-1])/2.0;\n    }\n    else\n    {\n        x=l[n/2];\n\
    \    }\n  return x;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpw1tzutpx: /tmp/tmpw1tzutpx.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ your code here\n    std::sort(l.begin(), l.end());\n    int middle = l.size()\
    \ / 2;\n    if (l.size() % 2 == 0) {\n        return (l[middle - 1] + l[middle])\
    \ / 2.0;\n    } else {\n        return l[middle];\n    }\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  int n = l.size();\n  if (n%2 == 0) {\n    return (l[n/2] + l[n/2\
    \ - 1])/2.0;\n  } else {\n    return l[n/2];\n  }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint n = l.size();\n\
    \tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn l[0];\n\t}\n\t\
    if (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\treturn\
    \ l[n / 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpdxu785j3: /tmp/tmpdxu785j3.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // your code\
    \ goes here\n  std::sort(l.begin(),l.end());\n  if(l.size()%2!=0)\n  {\n    return\
    \ (float)l[l.size()/2];\n  }\n  return (float)(l[l.size()/2]+l[(l.size()/2)-1])/2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpzsmho0sv: /tmp/tmpzsmho0sv.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float med\
    \ = 0;\n    int lsize = l.size();\n    std::sort(l.begin(), l.end());\n    if\
    \ (lsize%2 != 0) {\n        int index = lsize/2;\n        med = l[index];\n  \
    \  }\n    else {\n        int index = lsize/2;\n        med = (l[index-1] + l[index])/2.0;\n\
    \    }\n    return med;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Your\
    \ code goes here\n    long n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (float)(l[n/2-1]+l[n/2])/2;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmprss7hmez: /tmp/tmprss7hmez.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    int l1=l.size();\n\
    \    sort(l.begin(),l.end());\n    if(l1%2!=0)\n    {\n        return l[l1/2];\n\
    \    }\n    else\n    {\n        return (l[l1/2]+l[(l1/2)-1])/2.0;\n    }\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // sort\
    \ vector\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return ((float)l[n/2] + (float)l[n/2 - 1])/2;\n    }\n\
    \    else {\n        return (float)l[n/2];\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    return (l[l.size()/2] + l[(l.size()-1)/2])/2.0;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tif(l.size()\
    \ == 0)\n\t\treturn 0;\n\tsort(l.begin(), l.end());\n\tif(l.size() % 2 == 0)\n\
    \t\treturn (l[l.size()/2 - 1] + l[l.size()/2])/2.0;\n\telse\n\t\treturn l[l.size()/2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    size_t n = l.size();\n    if\
    \ (n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n        return\
    \ l[n/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  int L = l.size();\n\
    \  float m = 0;\n  int mid = L/2;\n  if (L%2==0) {\n    m = (l[mid-1] + l[mid])\
    \ / 2.0;\n  } else {\n    m = l[mid];\n  }\n  return m;\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmprhkoryjf: /tmp/tmprhkoryjf.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\tstd::vector<long>::iterator ptr = l.begin();\n\tstd::advance(ptr,\
    \ l.size() / 2);\n\treturn ((float)(*ptr) + *(--ptr)) / 2;\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpk4o9zay_: /tmp/tmpk4o9zay_.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t/*\n\tDo\
    \ not use std::sort(), but you can use other functions from <algorithm>.\n\t*/\n\
    \treturn 1.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpaqkhs15l: /tmp/tmpaqkhs15l.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n       \
    \ return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[l.size() / 2];\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // your\
    \ code here\n    if(l.size()%2==0)\n    {\n        return (l[l.size()/2]+l[l.size()/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[l.size()/2];\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpn3rh6lbo: /tmp/tmpn3rh6lbo.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // write\
    \ your solution here\n    std::vector<long> temp;\n    for(int i=0;i<l.size();i++){\n\
    \        temp.push_back(l[i]);\n    }\n    std::sort(temp.begin(),temp.end());\n\
    \    int size=temp.size();\n    if(size==0){\n        return -1;\n    }\n    if(size%2==0){\n\
    \        return (temp[size/2]+temp[size/2-1])/2.0;\n    }\n    else{\n       \
    \ return temp[size/2];\n    }\n\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Replace\
    \ with your code\n\tint n = l.size();\n\tif (n%2 != 0) {\n\t\treturn l[n/2];\n\
    \t} else {\n\t\tint a = l[n/2];\n\t\tint b = l[(n/2)-1];\n\t\treturn (a+b)/2.0;\n\
    \t}\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpcohvz7n4: /tmp/tmpcohvz7n4.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::vector<long>\
    \ temp(l);\n    sort(temp.begin(), temp.end());\n    int len = temp.size();\n\
    \    if (len % 2 == 0) {\n        return (temp[len / 2] + temp[len / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return temp[len / 2];\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t//assert(l.size()\
    \ > 0);\n\t//sort(l.begin(), l.end());\n\tif (l.size()%2 == 0) {\n\t\treturn (l[l.size()/2-1]\
    \ + l[l.size()/2])/2.0;\n\t}\n\telse {\n\t\treturn l[l.size()/2];\n\t}\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpidigkd_f: /tmp/tmpidigkd_f.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // YOUR CODE\
    \ HERE\n  int size = l.size();\n  std::sort(l.begin(), l.end());\n  if (size %\
    \ 2 == 0)\n    return ((float)l[size/2] + (float)l[size/2 - 1])/2;\n  else\n \
    \   return (float)l[size/2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  assert(l.size()\
    \ > 0);\n  std::sort(l.begin(), l.end());\n  std::vector<long>::iterator itr;\n\
    \  int median_pos;\n  if(l.size()%2==0) {\n    median_pos = (l.size()-1)/2;\n\
    \    itr = l.begin() + median_pos;\n    return ((*itr) + (*(itr+1)))/2.0;\n  }\n\
    \  else {\n    median_pos = (l.size()-1)/2;\n    itr = l.begin() + median_pos;\n\
    \    return (*itr);\n  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()>0);\n\
    \    long s = l.size();\n    std::sort(l.begin(), l.end());\n    float median;\n\
    \    if(s%2==0){\n        median = (l[s/2]+l[s/2-1])/2.0;\n    }\n    else{\n\
    \        median = l[s/2];\n    }\n    return median;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(!l.empty());\n\
    \    float result = 0;\n    // Your code goes here.\n    int n = l.size();\n \
    \   sort(l.begin(), l.end());\n    if(n%2 == 0)\n        result = (l[n/2] + l[n/2\
    \ - 1])/2.0;\n    else\n        result = l[n/2];\n    return result;\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    return\
    \ 0.0;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpd7ujfpfr: /tmp/tmpd7ujfpfr.cpp:13: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // Write\
    \ your code here\n    int n = l.size();\n    sort(l.begin(), l.end());\n    if(n%2\
    \ == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n        return l[n/2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    if(l.size()%2!=0)\n\
    \    {\n        return l[l.size()/2];\n    }\n    else\n    {\n        return\
    \ (l[l.size()/2]+l[(l.size()/2)-1])/2.0;\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpijfjx_j3: /tmp/tmpijfjx_j3.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\treturn l[l.size()/2];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpyowgr5sp: /tmp/tmpyowgr5sp.cpp:13: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tassert(l.size()\
    \ != 0);\n\tint n = l.size();\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpmk3my9ic: /tmp/tmpmk3my9ic.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// Replace\
    \ this line with your code.\n\tstd::sort(l.begin(), l.end());\n\tint a = l.size();\n\
    \tif (a % 2 == 0) {\n\t\treturn float(l[a / 2] + l[a / 2 - 1]) / 2;\n\t}\n\telse\
    \ {\n\t\treturn l[a / 2];\n\t}\n\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // Your code\
    \ here.\n  if(l.size() == 0)\n    return 0;\n  if(l.size()%2 == 0)\n  {\n    return\
    \ ((float)(l[l.size()/2-1] + l[l.size()/2])/2);\n  }\n  else\n  {\n    return\
    \ (float)l[l.size()/2];\n  }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpb4mkl4fj: /tmp/tmpb4mkl4fj.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO\n\
    \tsort(l.begin(),l.end());\n\t\n\tif(l.size()%2!=0)\n\treturn l[l.size()/2];\n\
    \t\n\treturn (l[l.size()/2]+l[(l.size()/2)-1])/2.0;\n\t\n\t\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long n\
    \ = l.size();\n    if(n == 0) return 0;\n    if(n%2 == 0) return (l[n/2 - 1] +\
    \ l[n/2])/2.0;\n    else return l[n/2];\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp4k39gpof: /tmp/tmp4k39gpof.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    if(l.size() % 2 == 0)\n        return (l[l.size()/2] + l[l.size()/2\
    \ - 1])/2.0;\n    else\n        return l[l.size()/2];\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  if (l.size()==0)\n\
    \    return 0;\n  if (l.size()==1)\n    return l[0];\n  std::sort(l.begin(), l.end());\n\
    \  int n = l.size();\n  if (n%2 == 0)\n    return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \  else\n    return l[n/2];\n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n \
    \   assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  assert(l.size()\
    \ != 0);\n  sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size()\
    \ / 2];\n  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float a;\n\
    \    long int len = l.size();\n    if(len%2==0){\n        a = (l[len/2]+l[(len/2)-1])/2.0;\n\
    \    }\n    else\n        a = l[len/2];\n    return a;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpfik5lu7i: /tmp/tmpfik5lu7i.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  size_t n\
    \ = l.size();\n  assert(n > 0);\n  std::sort(l.begin(), l.end());\n  if (n % 2\
    \ == 0)\n    return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n  else\n    return l[n /\
    \ 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    long size = l.size();\n    sort(l.begin(), l.end());\n    if (size\
    \ % 2 == 0)\n        return ((float)l[size / 2] + (float)l[size / 2 - 1]) / 2;\n\
    \    else\n        return (float)l[size / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tlong size\
    \ = l.size();\n\tif (size == 0)\n\t\treturn 0;\n\tif (size % 2 == 0)\n\t\treturn\
    \ (l[size / 2] + l[size / 2 - 1]) / 2.0;\n\telse\n\t\treturn l[size / 2];\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmphdxwl2km: /tmp/tmphdxwl2km.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float med\
    \ = 0;\n    int n = l.size();\n    std::sort(l.begin(), l.end());\n    if (n%2==0)\
    \ {\n        med = (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else {\n        med\
    \ = l[n/2];\n    }\n    return med;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tsort(l.begin(),\
    \ l.end());\n\tif (l.size() % 2 == 0)\n\t\treturn (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n\telse\n\t\treturn l[l.size() / 2];\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    long n = l.size();\n    long i;\n    for(i=0;i<n;i++)\n    {\n\
    \        result.push_back(l[i]);\n    }\n    std::sort(result.begin(),result.end());\n\
    \    if(n%2==0)\n    {\n        float res;\n        res = result[n/2-1]+result[n/2];\n\
    \        return (res/2);\n    }\n    else\n    {\n        return result[n/2];\n\
    \    }\n    \n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement median.\n    return 0.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpjyhkm87j: /tmp/tmpjyhkm87j.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    if(l.size()%2==0)\n        return (l[l.size()/2]+l[l.size()/2\
    \ - 1])/2.0;\n    else\n        return l[l.size()/2];\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  float median;\n\
    \  sort(l.begin(), l.end());\n  if (l.size() % 2 == 0) {\n    median = (l[l.size()\
    \ / 2 - 1] + l[l.size() / 2]) / 2.0;\n  } else {\n    median = l[l.size() / 2];\n\
    \  }\n  return median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    float m;\n\
    \    if (l.size() % 2 == 0) {\n        m = (l[l.size() / 2] + l[l.size() / 2 -\
    \ 1]) / 2.0;\n    } else {\n        m = l[l.size() / 2];\n    }\n    return m;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpuynuh3is: /tmp/tmpuynuh3is.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint len =\
    \ l.size();\n\tsort(l.begin(), l.end());\n\tint idx = len / 2;\n\tif (len % 2\
    \ == 0)\n\t\treturn (l[idx] + l[idx - 1]) / 2.0;\n\telse\n\t\treturn l[idx];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n     \
    \   return (l[mid] + l[mid - 1]) / 2.0;\n    } else {\n        return l[mid];\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    // write your code here\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpt4d64hkg: /tmp/tmpt4d64hkg.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    // TODO:\
    \ Implement me\n    long sum = 0;\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        sum = l[l.size() / 2 - 1] + l[l.size() / 2];\n\
    \        return (float)sum / 2;\n    }\n    else\n        return l[l.size() /\
    \ 2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t\n\tstd::sort(l.begin(),\
    \ l.end());\n\tfloat x = l.size();\n\tint index = x / 2;\n\t\n\tfloat y = l[index];\n\
    \t\n\tif(x % 2 == 0)\n\t{\n\t\tfloat z = l[index - 1];\n\t\tfloat m = (y + z)\
    \ / 2;\n\t\treturn m;\n\t}\n\telse\n\t{\n\t\treturn y;\n\t}\n\t\n\t// TODO: return\
    \ the median of l\n\t\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzjjf860l.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpzjjf860l.cpp:16:7: error: invalid operands of types \u2018float\u2019\
    \ and \u2018int\u2019 to binary \u2018operator%\u2019\n   16 |  if(x % 2 == 0)\n\
    \      |     ~ ^ ~\n      |     |   |\n      |     |   int\n      |     float\n\
    /tmp/tmpzjjf860l.cpp:29:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   29 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpwycwfu7o: /tmp/tmpwycwfu7o.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long *a\
    \ = &l[0];\n    int n = l.size();\n    nth_element(a, a+n/2, a+n);  // \u627E\u5230\
    \u4E2D\u4F4D\u6570\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(n)\n    if (n %\
    \ 2)\n        return a[n/2];\n    else {\n        int x = a[n/2-1];\n        return\
    \ (x+a[n/2])/2.0;\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpiudvao96.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpiudvao96.cpp:11:5: error: \u2018nth_element\u2019 was not declared\
    \ in this scope; did you mean \u2018std::nth_element\u2019?\n   11 |     nth_element(a,\
    \ a+n/2, a+n);  // \u627E\u5230\u4E2D\u4F4D\u6570\uFF0C\u65F6\u95F4\u590D\u6742\
    \u5EA6\u4E3AO(n)\n      |     ^~~~~~~~~~~\n      |     std::nth_element\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiudvao96.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4781:5:\
    \ note: \u2018std::nth_element\u2019 declared here\n 4781 |     nth_element(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __nth,\n      |     ^~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long size\
    \ = l.size();\n    long res = size % 2;\n    if (res == 0) {\n        std::sort(l.begin(),\
    \ l.end());\n        long mid = size / 2;\n        long mid1 = mid - 1;\n    \
    \    res = (l[mid] + l[mid1]) / 2;\n    } else {\n        std::sort(l.begin(),\
    \ l.end());\n        long mid = size / 2;\n        res = l[mid];\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpjt265e9j: /tmp/tmpjt265e9j.cpp:28: int main(): Assertion `candidate((std::vector<long>({6,\
    \ 5}))) == (5.5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    assert(l.size() % 2 == 1);\n    assert(l.size() < 1001);\n    sort(l.begin(),\
    \ l.end());\n    return l[l.size() / 2];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp9u7mrgu0: /tmp/tmp9u7mrgu0.cpp:10: float median(std::vector<long int>):\
    \ Assertion `l.size() % 2 == 1' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  // TODO:\
    \ Implement me\n  if(l.size()%2==0)\n  {\n    float m=(l[l.size()/2]+l[l.size()/2-1])/2.0;\n\
    \    return m;\n  }\n  else\n  {\n    float m=l[l.size()/2];\n    return m;\n\
    \  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpnqi8sz9u: /tmp/tmpnqi8sz9u.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\tint size=l.size();\n\
    \tstd::vector<int> v;\n\tfor(int i=0;i<size;i++)\n\t{\n\t\tv.push_back(l[i]);\n\
    \t}\n\tsort(v.begin(),v.end());\n\tif(size%2!=0)\n\t\treturn v[size/2];\n\treturn\
    \ (v[(size-1)/2]+v[size/2])/2.0;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// YOUR CODE\
    \ HERE\n  int n = l.size();\n  std::sort(l.begin(), l.end());\n  if(n%2==0)\n\
    \  {\n   return (l[n/2]+l[n/2-1])/2.0;\n  }\n  else\n  {\n    return l[n/2];\n\
    \  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n\t// write\
    \ your code here\n    std::sort(l.begin(),l.end());\n    if(l.size()%2!=0)\n \
    \       return l[l.size()/2];\n    else\n        return float(l[l.size()/2]+l[l.size()/2-1])/2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n  int lSize\
    \ = l.size();\n  assert(lSize > 0);\n  std::sort(l.begin(), l.end());\n  int mid_index\
    \ = (lSize / 2);\n  if (lSize % 2 == 0) {\n    return (l[mid_index] + l[mid_index-1])\
    \ / 2.0;\n  }\n  return l[mid_index];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long siz\
    \ = l.size();\n    // sort the list\n    std::sort(l.begin(), l.end());\n    if\
    \ (siz % 2 != 0) {\n        // return the middle element\n        return (float)l[siz\
    \ / 2];\n    }\n    // return average of middle elements\n    return (float)(l[siz\
    \ / 2] + l[(siz / 2) - 1]) / 2;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
