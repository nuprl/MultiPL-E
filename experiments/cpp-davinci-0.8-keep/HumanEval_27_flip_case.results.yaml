language: cpp
name: HumanEval_27_flip_case
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\t\n\tstd::string s =\
    \ string;\n\t\n\tfor(int i = 0; i < s.length(); i++) {\n\t\tif(isupper(s[i]))\
    \ {\n\t\t\ts[i] = tolower(s[i]);\n\t\t} else {\n\t\t\ts[i] = toupper(s[i]);\n\t\
    \t}\n\t}\n\t\n\treturn s;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s;\n\
    \    for(int i=0;i<string.length();i++){\n        if(string[i]>=65 && string[i]<=90){\n\
    \            string[i]+=32;\n        }\n        else if(string[i]>=97 && string[i]<=122){\n\
    \            string[i]-=32;\n        }\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string string2;\n\
    \    for(char c : string) {\n        if(c >= 'a' && c <= 'z')\n            string2\
    \ += toupper(c);\n        else if(c >= 'A' && c <= 'Z')\n            string2 +=\
    \ tolower(c);\n        else\n            string2 += c;\n    }\n    return string2;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            result += toupper(string[i]);\n        }\
    \ else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += tolower(string[i]);\n\
    \        } else {\n            result += string[i];\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string finStr\
    \ = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            finStr = finStr + std::toupper(string[i]);\n\
    \        }\n        else if(string[i] >= 'A' && string[i] <= 'Z') {\n        \
    \    finStr = finStr + std::tolower(string[i]);\n        }\n        else {\n \
    \           finStr = finStr + string[i];\n        }\n    }\n    return finStr;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrf01c45.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpbrf01c45.cpp:10:29: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   10 |             finStr = finStr + std::toupper(string[i]);\n\
    \      |                      ~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~\n      |      \
    \                |                    |\n      |                      |      \
    \              int\n      |                      std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbrf01c45.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpbrf01c45.cpp:10:53:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   10 |             finStr = finStr + std::toupper(string[i]);\n\
    \      |                                                     ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbrf01c45.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_typ"
  stdout: ''
  timestamp: 1660097811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string result\
    \ = \"\";\n  for (char c : string) {\n    if (islower(c)) {\n      result += toupper(c);\n\
    \    } else {\n      result += tolower(c);\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string ans=\"\
    \";\n    int i=0;\n    while(string[i]!='\\0'){\n        int n=string[i];\n  \
    \      if(n>=65 && n<=90){\n            n=n+32;\n            ans=ans+(char)n;\n\
    \        }\n        else if(n>=97 && n<=122){\n            n=n-32;\n         \
    \   ans=ans+(char)n;\n        }\n        else{\n            ans=ans+(char)n;\n\
    \        }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // replace lowercase\
    \ characters with uppercase and vice versa\n  std::for_each(string.begin(), string.end(),\
    \ [](char & c) {\n    if (std::isupper(c))\n      c = std::tolower(c);\n    else\n\
    \      c = std::toupper(c);\n  });\n  return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::stringstream\
    \ ss;\n    for (char& c : string) {\n        if (c >= 'a' && c <= 'z') {\n   \
    \         ss << char(c - 32);\n        } else if (c >= 'A' && c <= 'Z') {\n  \
    \          ss << char(c + 32);\n        } else {\n            ss << c;\n     \
    \   }\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\t// Write your code\
    \ here\n\tstring str;\n\tint n = string.length();\n\tfor (int i = 0; i < n; i++)\
    \ {\n\t\tif (string[i] >= 65 && string[i] <= 90) {\n\t\t\tstr += tolower(string[i]);\n\
    \t\t}\n\t\telse if (string[i] >= 97 && string[i] <= 122) {\n\t\t\tstr += toupper(string[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tstr += string[i];\n\t\t}\n\t}\n\treturn str;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdmgfe5pl.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpdmgfe5pl.cpp:8:8: error: expected \u2018;\u2019 before \u2018str\u2019\
    \n    8 |  string str;\n      |        ^~~~\n      |        ;\n/tmp/tmpdmgfe5pl.cpp:12:4:\
    \ error: \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   12 |    str += tolower(string[i]);\n      |    ^~~\n      |    std\n/tmp/tmpdmgfe5pl.cpp:15:4:\
    \ error: \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   15 |    str += toupper(string[i]);\n      |    ^~~\n      |    std\n/tmp/tmpdmgfe5pl.cpp:18:4:\
    \ error: \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   18 |    str += string[i];\n      |    ^~~\n      |    std\n/tmp/tmpdmgfe5pl.cpp:21:9:\
    \ error: \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   21 |  return str;\n      |         ^~~\n      |         std\n"
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(size_t i=0; i<string.size();\
    \ i++) {\n        if(islower(string[i])) {\n            string[i] = toupper(string[i]);\n\
    \        } else {\n            string[i] = tolower(string[i]);\n        }\n  \
    \  }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  int length = string.length();\n\
    \  for(int i = 0; i < length; i++) {\n    if(string[i] >= 65 && string[i] <= 90)\n\
    \      string[i] = string[i] + 32;\n    else if(string[i] >= 97 && string[i] <=\
    \ 122)\n      string[i] = string[i] - 32;\n  }\n  return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tint l=string.length();\n\
    \tfor(int i=0;i<l;i++)\n\t{\n\t\tif(isupper(string[i]))\n\t\t\tstring[i]=tolower(string[i]);\n\
    \t\telse\n\t\t\tstring[i]=toupper(string[i]);\n\t}\n\treturn string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string s2;\n\t\
    for (int i = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t\
    }\n\ts2 = string;\n\treturn s2;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] == toupper(string[i])) {\n      string[i]\
    \ = tolower(string[i]);\n    } else {\n      string[i] = toupper(string[i]);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string out;\n\t\
    for (auto &c : string) {\n\t\tif (c >= 'a' && c <= 'z') {\n\t\t\tout += toupper(c);\n\
    \t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\tout += tolower(c);\n\t\t} else {\n\
    \t\t\tout += c;\n\t\t}\n\t}\n\treturn out;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    string result;\n\
    \    for(int i=0;i<string.length();i++){\n        if(string[i]>=65 && string[i]<=90){\n\
    \            string[i] = string[i] + 32;\n        }\n        else if(string[i]>=97\
    \ && string[i]<=122){\n            string[i] = string[i] - 32;\n        }\n  \
    \  }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ftusxlg.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmp8ftusxlg.cpp:7:11: error: expected \u2018;\u2019 before \u2018result\u2019\
    \n    7 |     string result;\n      |           ^~~~~~~\n      |           ;\n"
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Write your code\
    \ here\n    std::string str;\n    for(int i=0;i<string.length();i++){\n      \
    \  if(string[i]>=65 && string[i]<=90){\n            str.push_back(string[i]+32);\n\
    \        }\n        else if(string[i]>=97 && string[i]<=122){\n            str.push_back(string[i]-32);\n\
    \        }\n        else{\n            str.push_back(string[i]);\n        }\n\
    \    }\n    return str;\n}\nint main() {\n    auto candidate = flip_case;\n  \
    \  assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i]>='a' && string[i]<='z')\n            string[i]\
    \ += ('A'-'a');\n        else if(string[i]>='A' && string[i]<='Z')\n         \
    \   string[i] -= ('A'-'a');\n    }\n    return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    //! Error Handling\n\
    \    if(string.empty()) {\n        std::cerr << \"String is empty\" << std::endl;\n\
    \        return \"\";\n    }\n    //! Lowercase char to uppercase\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::toupper);\n    //! Uppercase char to lowercase\n\
    \    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'String is empty

    tmpmu550u7c: /tmp/tmpmu550u7c.cpp:21: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  int size = string.size();\n\
    \  for(int i = 0; i < size; i++) {\n    char c = string[i];\n    if (islower(c))\
    \ {\n      string[i] = toupper(c);\n    } else if (isupper(c)) {\n      string[i]\
    \ = tolower(c);\n    }\n  }\n  return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string output\
    \ {};\n  for (auto& letter : string) {\n    if (islower(letter)) output += toupper(letter);\n\
    \    else if (isupper(letter)) output += tolower(letter);\n    else output +=\
    \ letter;\n  }\n  return output;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i] >= 'a' && string[i] <= 'z')\n            string[i]\
    \ -= 32;\n        else if(string[i] >= 'A' && string[i] <= 'Z')\n            string[i]\
    \ += 32;\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a'&&string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A'&&string[i]<='Z')\n        {\n     \
    \       string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  int i;\n  for(i=0;i<string.length();i++)\n\
    \  {\n    if(string[i]>='a' && string[i]<='z')\n      string[i]=string[i]-32;\n\
    \    else if(string[i]>='A' && string[i]<='Z')\n      string[i]=string[i]+32;\n\
    \  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int i = 0;\n    while(string[i]\
    \ != '\\0'){\n        if(islower(string[i])){\n            string[i] = toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i])){\n            string[i] = tolower(string[i]);\n\
    \        }\n        i++;\n    }\n    return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (size_t i = 0;\
    \ i < string.size(); i++) {\n    if (islower(string[i])) {\n      string[i] =\
    \ toupper(string[i]);\n    } else {\n      string[i] = tolower(string[i]);\n \
    \   }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        char c = string[i];\n\
    \        if (isupper(c))\n            result += tolower(c);\n        else\n  \
    \          result += toupper(c);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string newString\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (islower(string[i]))\
    \ {\n            newString += toupper(string[i]);\n        } else {\n        \
    \    newString += tolower(string[i]);\n        }\n    }\n    return newString;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string result\
    \ = \"\";\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tint ascii = int(string[i]);\n\
    \t\tif (ascii > 64 && ascii < 91) {\n\t\t\tresult += tolower(string[i]);\n\t\t\
    }\n\t\telse if (ascii > 96 && ascii < 123) {\n\t\t\tresult += toupper(string[i]);\n\
    \t\t}\n\t\telse {\n\t\t\tresult += string[i];\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string newString\
    \ = \"\";\n\tfor (char &c : string) {\n\t\tint diff = (c >= 'a' && c <= 'z') ?\
    \ 'a' - 'A' : 'A' - 'a';\n\t\tnewString += (char)(c + diff);\n\t}\n\treturn newString;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpijhvplx7: /tmp/tmpijhvplx7.cpp:17: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string newString=\"\
    \";\n    for(int i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            string[i]=toupper(string[i]);\n        }\n        else if(string[i]>='A'\
    \ && string[i]<='Z'){\n            string[i]=tolower(string[i]);\n        }\n\
    \        newString+=string[i];\n    }\n    return newString;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\n// Create a stack to\
    \ store the characters\nstd::stack<char> stk;\n// Create a string to store the\
    \ flipped string\nstd::string flippedString;\n\n// Push every character of input\
    \ string to stack\nfor(int i=0; i<string.length(); i++)\n\tstk.push(string[i]);\n\
    \n// Flip the case of string and store in new string\nwhile(!stk.empty())\n{\n\
    \tif((stk.top()>='a') && (stk.top()<='z'))\n\t\tflippedString += (stk.top()-'a'+'A');\n\
    \telse if((stk.top()>='A') && (stk.top()<='Z'))\n\t\tflippedString += (stk.top()-'A'+'a');\n\
    \telse\n\t\tflippedString += stk.top();\n\tstk.pop();\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuljrc_00.cpp: In function \u2018std::string flip_case(std::string)\u2019\
    :\n/tmp/tmpuljrc_00.cpp:28:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   28 | int main() {\n      |            ^\n/tmp/tmpuljrc_00.cpp:33:1:\
    \ error: expected \u2018}\u2019 at end of input\n   33 | }\n      | ^\n/tmp/tmpuljrc_00.cpp:6:43:\
    \ note: to match this \u2018{\u2019\n    6 | std::string flip_case(std::string\
    \ string) {\n      |                                           ^\n/tmp/tmpuljrc_00.cpp:33:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   33 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = toupper(string[i]);\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = tolower(string[i]);\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int i=0;\n    while(string[i]!='\\\
    0')\n    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n        \
    \    string[i]=string[i]-32;\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i]=string[i]+32;\n        }\n        i++;\n   \
    \ }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n  \
    \  assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    //your code goes\
    \ here\n    int i = 0;\n    while(string[i] != '\\0'){\n        if(string[i] >=\
    \ 'a' && string[i] <= 'z')\n            string[i] = string[i] - 'a' + 'A';\n \
    \       else if(string[i] >= 'A' && string[i] <= 'Z')\n            string[i] =\
    \ string[i] - 'A' + 'a';\n        i++;\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string str;\n\t\
    for (int i = 0; i < string.length(); i++) {\n\t\t// if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n\t\t// \tstr += string[i] - 32;\n\t\t// } else if (string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n\t\t// \tstr += string[i] + 32;\n\t\t// } else {\n\t\
    \t// \tstr += string[i];\n\t\t// }\n\t\tstr += islower(string[i]) ? toupper(string[i])\
    \ : tolower(string[i]);\n\t}\n\treturn str;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int i = 0;\n    while(string[i]\
    \ != '\\0') {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n          \
    \  string[i] = string[i] - 'a' + 'A';\n        } else if(string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n            string[i] = string[i] - 'A' + 'a';\n        }\n     \
    \   i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // Assert the input\
    \ length is a non-negative integer\n  assert(string.length() >= 0);\n  // Loop\
    \ through each character in the string\n  for (unsigned int i = 0; i < string.length();\
    \ i++) {\n    // Get the ASCII integer value of the character\n    unsigned int\
    \ ascii_int = (unsigned int) string[i];\n    // If the character is an uppercase\
    \ letter\n    if (ascii_int >= 65 && ascii_int <= 90) {\n      // Add 32 to the\
    \ ASCII integer value\n      ascii_int += 32;\n    }\n    // Else if the character\
    \ is a lowercase letter\n    else if (ascii_int >= 97 && ascii_int <= 122) {\n\
    \      // Subtract 32 from the ASCII integer value\n      ascii_int -= 32;\n \
    \   }\n    // Overwrite the character with the ASCII character value\n    string[i]\
    \ = (char) ascii_int;\n  }\n  // Return the modified string\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int i = 0;\n    while(string[i]\
    \ != '\\0'){\n        if(isupper(string[i])){\n            string[i] = tolower(string[i]);\n\
    \        }else{\n            string[i] = toupper(string[i]);\n        }\n    \
    \    i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(islower(string[i]))\n            string[i] = toupper(string[i]);\n\
    \        else\n            string[i] = tolower(string[i]);\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int len = string.length();\n\
    \    for(int i=0;i<len;i++){\n        if(string[i]>='a'&&string[i]<='z'){\n  \
    \          string[i] = string[i] - 32;\n        }else if(string[i]>='A'&&string[i]<='Z'){\n\
    \            string[i] = string[i] + 32;\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097811
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // your code here\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpz8f3cuj2: /tmp/tmpz8f3cuj2.cpp:11: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Your code here\n\
    \    for(int i=0;i<string.length();i++)\n    {\n      if(string[i]>='a' && string[i]<='z')\n\
    \      {\n        string[i]=string[i]-32;\n      }\n      else if(string[i]>='A'\
    \ && string[i]<='Z')\n      {\n        string[i]=string[i]+32;\n      }\n    }\n\
    \    return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 'a' + 'A';\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] - 'A' + 'a';\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(),::tolower);\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpk27ano2j: /tmp/tmpk27ano2j.cpp:11: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tint len = string.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tif (string[i] >= 65 && string[i] <= 90)\
    \ {\n\t\t\tstring[i] = tolower(string[i]);\n\t\t}\n\t\telse if (string[i] >= 97\
    \ && string[i] <= 122) {\n\t\t\tstring[i] = toupper(string[i]);\n\t\t}\n\t}\n\t\
    return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097813
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string s = \"\
    \";\n    for(int i = 0; i < string.length(); i++) {\n        if(string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            s += string[i] - 32;\n        }\n      \
    \  else if(string[i] >= 'A' && string[i] <= 'Z') {\n            s += string[i]\
    \ + 32;\n        }\n        else {\n            s += string[i];\n        }\n \
    \   }\n    return s;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] -= 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z')\
    \ {\n\t\t\tstring[i] += 32;\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n\treturn string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpxeb7qgos: /tmp/tmpxeb7qgos.cpp:13: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    char c = string[i];\n    if (isupper(c)) {\n  \
    \    string[i] = tolower(c);\n    } else {\n      string[i] = toupper(c);\n  \
    \  }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string new_string\
    \ = \"\";\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tchar character =\
    \ string[i];\n\t\tif (islower(character)) {\n\t\t\tnew_string += toupper(character);\n\
    \t\t} else {\n\t\t\tnew_string += tolower(character);\n\t\t}\n\t}\n\treturn new_string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string flip_string;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            flip_string += std::toupper(string[i]);\n\
    \        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            flip_string\
    \ += std::tolower(string[i]);\n        } else {\n            flip_string += string[i];\n\
    \        }\n    }\n    return flip_string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string flipped_string\
    \ = \"\";\n    for (char c : string) {\n        if (isupper(c)) {\n          \
    \  flipped_string += tolower(c);\n        } else {\n            flipped_string\
    \ += toupper(c);\n        }\n    }\n    return flipped_string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097753
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (char& c : string)\
    \ {\n\t\tc = isupper(c) ? tolower(c) : toupper(c);\n\t}\n\treturn string;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string new_string\
    \ = \"\";\n\tfor (char& i : string) {\n\t\tif (islower(i)) {\n\t\t\tnew_string\
    \ += std::toupper(i);\n\t\t}\n\t\telse {\n\t\t\tnew_string += std::tolower(i);\n\
    \t\t}\n\t}\n\treturn new_string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(auto &c : string)\
    \ {\n        c = (isupper(c)) ? tolower(c) : toupper(c);\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (isupper(string[i])) {\n      string[i] = tolower(string[i]);\n\
    \    } else {\n      string[i] = toupper(string[i]);\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int length = string.length();\n\
    \    for(int i = 0; i < length; i++) {\n        if(string[i] >= 'a' && string[i]\
    \ <= 'z')\n            string[i] -= 32;\n        else if(string[i] >= 'A' && string[i]\
    \ <= 'Z')\n            string[i] += 32;\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::locale loc;\n\t\
    std::string _string;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (std::isupper(string[i],\
    \ loc))\n\t\t\t_string += std::tolower(string[i], loc);\n\t\telse\n\t\t\t_string\
    \ += std::toupper(string[i], loc);\n\t}\n\treturn _string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // YOUR CODE HERE\n\
    \    return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpyksgguwv: /tmp/tmpyksgguwv.cpp:13: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string str=string;\n\
    \  int len=str.length();\n  for(int i=0;i<len;i++)\n  {\n    if(str[i]>='a' &&\
    \ str[i]<='z')\n    {\n      str[i]=str[i]-32;\n    }\n    else if(str[i]>='A'\
    \ && str[i]<='Z')\n    {\n      str[i]=str[i]+32;\n    }\n  }\n  return str;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string res = \"\
    \";\n  for (char x : string) {\n    if (x >= 'a' && x <= 'z') {\n      res +=\
    \ (x - 32);\n    } else if (x >= 'A' && x <= 'Z') {\n      res += (x + 32);\n\
    \    } else {\n      res += x;\n    }\n  }\n  return res;\n}\nint main() {\n \
    \   auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n  \
    \  assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z')\n\t\t\
    \tstring[i] = string[i] - 32;\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z')\n\
    \t\t\tstring[i] = string[i] + 32;\n\t}\n\treturn string;\n}\nint main() {\n  \
    \  auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n   \
    \ assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These\
    \ violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i]\
    \ = string[i] - 'a' + 'A';\n        } else if(string[i] >= 'A' && string[i] <=\
    \ 'Z') {\n            string[i] = string[i] - 'A' + 'a';\n        }\n    }\n \
    \   return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string result\
    \ = \"\";\n  int len = string.length();\n  for (int i = 0; i < len; i++) {\n \
    \   if (isupper(string[i]))\n      result = result + char(tolower(string[i]));\n\
    \    else\n      result = result + char(toupper(string[i]));\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    \n    \n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpqefv21nl: /tmp/tmpqefv21nl.cpp:14: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097815
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(auto &i:string)\n\
    \        i^=32;\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmp8_qsn6kk: /tmp/tmp8_qsn6kk.cpp:14: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z')\n\t\t\
    \tstring[i] = string[i] - 32;\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z')\n\
    \t\t\tstring[i] = string[i] + 32;\n\t}\n\treturn string;\n}\nint main() {\n  \
    \  auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n   \
    \ assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These\
    \ violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();i++){\n\
    \        if(string[i]>=97){\n            string[i]=string[i]-32;\n        }else{\n\
    \            string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmppd_rtgvd: /tmp/tmppd_rtgvd.cpp:19: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // return std::transform(string.begin(),\
    \ string.end(), string.begin(), [](char c) { return std::islower(c) ? std::toupper(c)\
    \ : std::tolower(c); });\n    for (auto& c : string) {\n        if (std::islower(c))\
    \ {\n            c = std::toupper(c);\n        } else {\n            c = std::tolower(c);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\t// TODO: Implement\
    \ me!\n    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]>='a'\
    \ && string[i]<='z')\n        {\n            string[i] = toupper(string[i]);\n\
    \        }\n        else\n        {\n            string[i] = tolower(string[i]);\n\
    \        }\n    }\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string result;\n\
    \tfor (char c : string) {\n\t\tif (c >= 'a' && c <= 'z') {\n\t\t\tresult += c\
    \ + 'A' - 'a';\n\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\tresult += c + 'a'\
    \ - 'A';\n\t\t} else {\n\t\t\tresult += c;\n\t\t}\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\t// write code here\n\
    \t//std::cout << \"string = \" << string << \"\\n\";\n\tint length = string.length();\n\
    \t//std::cout << \"Length = \" << length << \"\\n\";\n\tstd::string result(length,\
    \ ' ');\n\tfor (int i = 0; i < length; i++) {\n\t\tif (isupper(string[i])) {\n\
    \t\t\tresult[i] = tolower(string[i]);\n\t\t}\n\t\telse if (islower(string[i]))\
    \ {\n\t\t\tresult[i] = toupper(string[i]);\n\t\t}\n\t\telse {\n\t\t\tresult[i]\
    \ = string[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string str;\n\
    \    for(int i=0;i<string.length();i++){\n        if(string[i]>=65 && string[i]<=90){\n\
    \            str+=string[i]+32;\n        }\n        else if(string[i]>=97 && string[i]<=122){\n\
    \            str+=string[i]-32;\n        }\n        else{\n            str+=string[i];\n\
    \        }\n    }\n    return str;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n        else if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();i++){\n\
    \        if(islower(string[i])){\n            string[i]=toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i])){\n            string[i]=tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\t// convert all the\
    \ char to lower case\n\tfor (int i = 0; i < string.length(); i++) {\n\t\tif (islower(string[i]))\
    \ {\n\t\t\tstring[i] = toupper(string[i]);\n\t\t}\n\t\telse {\n\t\t\tstring[i]\
    \ = tolower(string[i]);\n\t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 65 && string[i] <= 90) {\n\t\t\
    \tstring[i] = string[i] + 32;\n\t\t}\n\t\telse if (string[i] >= 97 && string[i]\
    \ <= 122) {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    char current = string[i];\n    char flipped;\n\
    \    if (current >= 65 && current <= 90) {\n      flipped = tolower(current);\n\
    \    } else if (current >= 97 && current <= 122) {\n      flipped = toupper(current);\n\
    \    } else {\n      flipped = current;\n    }\n    string[i] = flipped;\n  }\n\
    \  return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(char& c : string)\n\
    \    {\n        if(c>='a' && c<='z')\n            c-=32;\n        else if(c>='A'\
    \ && c<='Z')\n            c+=32;\n    }\n    return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string result=\"\
    \";\n  for(char& c:string){\n  \tif(c>='a' && c<='z')\n  \t  result+=char(c-32);\n\
    \  \telse if(c>='A' && c<='Z')\n  \t  result+=char(c+32);\n  \telse\n  \t  result+=c;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = flip_case;\n   \
    \ assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int length = string.length();\n\
    \    std::string new_string = \"\";\n    for (int i = 0; i < length; i++) {\n\
    \        char c = string[i];\n        if (islower(c)) {\n            new_string\
    \ += toupper(c);\n        } else {\n            new_string += tolower(c);\n  \
    \      }\n    }\n    return new_string;\n}\nint main() {\n    auto candidate =\
    \ flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int i = 0;\n    while(string[i]\
    \ != '\\0') {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n          \
    \  string[i] = string[i] - 'a' + 'A';\n        } else if(string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n            string[i] = string[i] - 'A' + 'a';\n        }\n     \
    \   i++;\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    return \"\";\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpuffgnrq4: /tmp/tmpuffgnrq4.cpp:12: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097815
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    \n    //add code\
    \ here\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    //std::cout<<string;\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpsfs5reur: /tmp/tmpsfs5reur.cpp:250: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int i=0;\n    while(string[i]!='\\\
    0')\n    {\n        if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n        i++;\n    }\n    return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]\
    \ = string[i]-'a'+'A';\n        }\n        else if(string[i]>='A' && string[i]<='Z')\n\
    \        {\n            string[i] = string[i]-'A'+'a';\n        }\n    }\n   \
    \ return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tint i=0;\n\twhile(string[i]!='\\\
    0'){\n\t\tif(string[i]>='a' && string[i]<='z'){\n\t\t\tstring[i]=toupper(string[i]);\n\
    \t\t}\n\t\telse if(string[i]>='A' && string[i]<='Z'){\n\t\t\tstring[i]=tolower(string[i]);\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate =\
    \ flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i]\
    \ = string[i] - 32;\n        }\n        else if(string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n            string[i] = string[i] + 32;\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto c : string) {\n        if (std::isupper(c)) {\n            result\
    \ += std::tolower(c);\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z')\n\t\t\
    \tstring[i] -= 32;\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z')\n\t\t\t\
    string[i] += 32;\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate =\
    \ flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (auto &c : string)\
    \ {\n\t\tif (isupper(c))\n\t\t\tc = tolower(c);\n\t\telse\n\t\t\tc = toupper(c);\n\
    \t}\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(auto & c : string)\n\
    \        if(std::isupper(c))\n            c = std::tolower(c);\n        else if(std::islower(c))\n\
    \            c = std::toupper(c);\n    return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (isupper(string[i])) {\n      string[i] = tolower(string[i]);\n\
    \    } else {\n      string[i] = toupper(string[i]);\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a'&&string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A'&&string[i]<='Z')\n        {\n     \
    \       string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z')\n   \
    \   string[i] = toupper(string[i]);\n    else if (string[i] >= 'A' && string[i]\
    \ <= 'Z')\n      string[i] = tolower(string[i]);\n  }\n  return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n        else if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // your code goes\
    \ here...\n    for(int i=0;i<string.length();i++)\n    {\n        if(isupper(string[i]))\n\
    \        {\n            string[i]=tolower(string[i]);\n        }\n        else\n\
    \        {\n            string[i]=toupper(string[i]);\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\t// your code here\n\
    \tint i=0;\n\tfor(i=0;i<string.length();i++)\n\t{\n\t\tif(string[i]>=65 && string[i]<=90)\n\
    \t\t\tstring[i]=string[i]+32;\n\t\telse if(string[i]>=97 && string[i]<=122)\n\t\
    \t\tstring[i]=string[i]-32;\n\t}\n\treturn string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097816
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 65 && string[i] <= 90) {\n\t\t\
    \tstring[i] = string[i] + 32;\n\t\t}\n\t\telse if (string[i] >= 97 && string[i]\
    \ <= 122) {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int i;\n    for(i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097816
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    char temp;\n    for(int\
    \ i=0;i<string.length();i++){\n        if(string[i]>=65 && string[i]<=90){\n \
    \           temp=string[i]+32;\n            string[i]=temp;\n        }\n     \
    \   else if(string[i]>=97 && string[i]<=122){\n            temp=string[i]-32;\n\
    \            string[i]=temp;\n        }\n    }\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097816
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(char& c : string)\
    \ {\n        if(std::isupper(c)) c = std::tolower(c);\n        else if(std::islower(c))\
    \ c = std::toupper(c);\n    }\n    return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097816
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string ans;\n\
    \    for(int i=0;i<string.length();i++){\n        if(string[i]>='a' && string[i]<='z'){\n\
    \            ans.push_back(toupper(string[i]));\n        }\n        else{\n  \
    \          ans.push_back(tolower(string[i]));\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string result\
    \ = \"\";\n  for (char c : string) {\n    if (islower(c)) {\n      result += toupper(c);\n\
    \    } else {\n      result += tolower(c);\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]='A'+string[i]-'a';\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]='a'+string[i]-'A';\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // For now, just\
    \ return the input string.\n    for(int i=0;i<string.length();i++)\n    {\n  \
    \      if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    \n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpkbg4v7fl: /tmp/tmpkbg4v7fl.cpp:11: int main(): Assertion `candidate((""))
    == ("")'' failed.

    '
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\t// make a new string\
    \ to hold the flipped case\n\tstd::string new_string;\n\t// iterate through the\
    \ string\n\tfor (int i = 0; i < string.length(); i++) {\n\t\t// if the current\
    \ char is a lowercase letter\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\
    \t\t\t// flip it to uppercase\n\t\t\tnew_string += string[i] - 32;\n\t\t}\n\t\t\
    // if the current char is an uppercase letter\n\t\telse if (string[i] >= 'A' &&\
    \ string[i] <= 'Z') {\n\t\t\t// flip it to lowercase\n\t\t\tnew_string += string[i]\
    \ + 32;\n\t\t}\n\t\t// anything else, like spaces, symbols, punctuation\n\t\t\
    else {\n\t\t\t// just copy it to the new string\n\t\t\tnew_string += string[i];\n\
    \t\t}\n\t}\n\t// return the new string\n\treturn new_string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i]\
    \ = string[i] - 'a' + 'A';\n        } else if(string[i] >= 'A' && string[i] <=\
    \ 'Z') {\n            string[i] = string[i] - 'A' + 'a';\n        }\n    }\n \
    \   return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i]>='a' && string[i]<='z') {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z') {\n            string[i]=string[i]+32;\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\t// Your code here\n\
    \n\t// using standard library\n\tfor (std::string::iterator it = string.begin();\
    \ it != string.end(); ++it) {\n\t\tif (islower(*it)) {\n\t\t\t*it = toupper(*it);\n\
    \t\t}\n\t\telse if (isupper(*it)) {\n\t\t\t*it = tolower(*it);\n\t\t}\n\t}\n\t\
    return string;\n\n\t// using character pointer\n\t/*for (char* it = &string[0];\
    \ *it != '\\0'; ++it) {\n\t\tif (islower(*it)) {\n\t\t\t*it = toupper(*it);\n\t\
    \t}\n\t\telse if (isupper(*it)) {\n\t\t\t*it = tolower(*it);\n\t\t}\n\t}\n\treturn\
    \ string;*/\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (auto& letter :\
    \ string) {\n\t\tif (isupper(letter)) {\n\t\t\tletter = tolower(letter);\n\t\t\
    }\n\t\telse {\n\t\t\tletter = toupper(letter);\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string new_string\
    \ = \"\";\n\tfor (char c : string) {\n\t\tif (isupper(c)) {\n\t\t\tnew_string\
    \ += tolower(c);\n\t\t}\n\t\telse {\n\t\t\tnew_string += toupper(c);\n\t\t}\n\t\
    }\n\treturn new_string;\n}\nint main() {\n    auto candidate = flip_case;\n  \
    \  assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (auto character : string) {\n        result += std::isupper(character)\
    \ ? std::tolower(character) : std::toupper(character);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (char i : string) {\n        if (islower(i)) {\n            result +=\
    \ toupper(i);\n        } else {\n            result += tolower(i);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string flipped_case\
    \ = \"\";\n\tfor (auto i = 0; i < string.length(); i++) {\n\t\tif (islower(string[i]))\
    \ {\n\t\t\tflipped_case += toupper(string[i]);\n\t\t}\n\t\telse {\n\t\t\tflipped_case\
    \ += tolower(string[i]);\n\t\t}\n\t}\n\treturn flipped_case;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto &c : string)\
    \ {\n    if (std::islower(c)) {\n      c = std::toupper(c);\n    } else {\n  \
    \    c = std::tolower(c);\n    }\n  }\n  return string;\n}\nint main() {\n   \
    \ auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string temp=\"\
    \";\n  for(int i=0;i<string.length();i++){\n    if(string[i]>='a'&&string[i]<='z')\n\
    \      temp+=string[i]-32;\n    else if(string[i]>='A'&&string[i]<='Z')\n    \
    \  temp+=string[i]+32;\n    else\n      temp+=string[i];\n  }\n  return temp;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string result;\n\
    \  for (auto i = 0; i < string.size(); i++) {\n    if (islower(string[i])) {\n\
    \      result += toupper(string[i]);\n    } else {\n      result += tolower(string[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\t// TODO: make this\
    \ function return the given string with all cases flipped.\n\tfor (int i = 0;\
    \ i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\
    \t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tint i;\n\tfor(i=0;i<string.length();i++)\n\
    \t{\n\t\tif(string[i]>='a'&&string[i]<='z')\n\t\t{\n\t\t\tstring[i]=string[i]-32;\n\
    \t\t}\n\t\telse if(string[i]>='A'&&string[i]<='Z')\n\t\t{\n\t\t\tstring[i]=string[i]+32;\n\
    \t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto& c : string)\
    \ {\n    if (std::isupper(c)) {\n      c = std::tolower(c);\n    } else {\n  \
    \    c = std::toupper(c);\n    }\n  }\n  return string;\n}\nint main() {\n   \
    \ auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();i++){\n\
    \        if(isupper(string[i])){\n            string[i] = tolower(string[i]);\n\
    \        }\n        else if(islower(string[i])){\n            string[i] = toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result;\n\
    \    for (int i = 0; i < string.length(); i++) {\n        if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n            result += (string[i] - 32);\n        } else\
    \ if (string[i] >= 'A' && string[i] <= 'Z') {\n            result += (string[i]\
    \ + 32);\n        } else {\n            result += string[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (isupper(string[i])) {\n      string[i] = tolower(string[i]);\n\
    \    } else {\n      string[i] = toupper(string[i]);\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097814
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n   string[0] = tolower(string[0]);\n\
    \   string[1] = toupper(string[1]);\n   string[2] = tolower(string[2]);\n   string[3]\
    \ = toupper(string[3]);\n   string[4] = tolower(string[4]);\n   return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpcvayno9g: /tmp/tmpcvayno9g.cpp:17: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097818
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i]>='a' && string[i]<='z')\n            string[i]-=32;\n\
    \        else if(string[i]>='A' && string[i]<='Z')\n            string[i]+=32;\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (unsigned int i\
    \ = 0; i < string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z')\
    \ {\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i] >= 'A' &&\
    \ string[i] <= 'Z') {\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    return \"\";\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpuffgnrq4: /tmp/tmpuffgnrq4.cpp:12: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097815
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    \n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  // your code here!\n\
    \  for(int i=0; i<string.length(); i++){\n    if(string[i]>='a' && string[i]<='z'){\n\
    \      string[i]=string[i]-32;\n    }\n    else if(string[i]>='A' && string[i]<='Z'){\n\
    \      string[i]=string[i]+32;\n    }\n  }\n  return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 'a' && string[i] <= 'z') {\n            result += toupper(string[i]);\n \
    \       } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            result\
    \ += tolower(string[i]);\n        } else {\n            result += string[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (char& c : string)\n\
    \t\tif (std::isupper(c))\n\t\t\tc = std::tolower(c);\n\t\telse\n\t\t\tc = std::toupper(c);\n\
    \treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    assert(string !=\
    \ \"\");\n    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmp5d5vysvy: /tmp/tmp5d5vysvy.cpp:7: std::string flip_case(std::string):
    Assertion `string != ""'' failed.

    '
  stdout: ''
  timestamp: 1660097818
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (char &c : string)\
    \ {\n    if (c >= 65 && c <= 90) {\n      c += 32;\n    } else if (c >= 97 &&\
    \ c <= 122) {\n      c -= 32;\n    }\n  }\n  return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    return string;\n}\nint main()\
    \ {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpaqvlw7c8: /tmp/tmpaqvlw7c8.cpp:13: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097818
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n   for(int i=0;i<string.length();i++)\n\
    \    {\n        char temp=string[i];\n        if(isupper(temp))\n            string[i]=tolower(temp);\n\
    \        else\n            string[i]=toupper(temp);\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::transform(string.begin(),\
    \ string.end(), string.begin(), [](char c) {\n\t\tif (std::isupper(c)) {\n\t\t\
    \treturn std::tolower(c);\n\t\t}\n\t\treturn std::toupper(c);\n\t});\n\treturn\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tint i;\n\tstd::string\
    \ str1;\n\tfor(i=0;i<string.length();i++)\n\t{\n\t\tif(isupper(string[i]))\n\t\
    \t\tstr1+=tolower(string[i]);\n\t\telse\n\t\t\tstr1+=toupper(string[i]);\n\t}\n\
    \treturn str1;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // your code here!\n\
    \    //v1\n//     for(int i=0;i<string.length();i++){\n//         string[i]^=32;\n\
    //     }\n//     return string;\n    //v2\n    for(int i=0;i<string.length();i++){\n\
    \        if(string[i]>='a' && string[i]<='z'){\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z'){\n            string[i]=string[i]+32;\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::stringstream\
    \ ss;\n    for (char c : string) {\n        if (c >= 'a' && c <= 'z') {\n    \
    \        c -= 'a' - 'A';\n        } else if (c >= 'A' && c <= 'Z') {\n       \
    \     c += 'a' - 'A';\n        }\n        ss << c;\n    }\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(size_t i = 0;\
    \ i < string.size(); i++) {\n        if(isupper(string[i])) {\n            string[i]\
    \ = std::tolower(string[i]);\n        } else {\n            string[i] = std::toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tfor (int i = 0; i <\
    \ string.length(); i++) {\n\t\tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\
    \t\tstring[i] = (char)(string[i] - 'a' + 'A');\n\t\t}\n\t\telse if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n\t\t\tstring[i] = (char)(string[i] - 'A' + 'a');\n\
    \t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string result\
    \ = \"\";\n\tfor (char& c : string) {\n\t\tif (islower(c)) {\n\t\t\tresult +=\
    \ toupper(c);\n\t\t}\n\t\telse {\n\t\t\tresult += tolower(c);\n\t\t}\n\t}\n\t\
    return result;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::stringstream\
    \ ss;\n    for (int i = 0; i < string.length(); i++) {\n        char c = string[i];\n\
    \        if (c >= 'a' && c <= 'z') {\n            ss << (char)(c - 32);\n    \
    \    } else if (c >= 'A' && c <= 'Z') {\n            ss << (char)(c + 32);\n \
    \       } else {\n            ss << c;\n        }\n    }\n    return ss.str();\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097818
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto &c : string)\
    \ {\n    if (std::isupper(c)) {\n      c = std::tolower(c);\n    } else {\n  \
    \    c = std::toupper(c);\n    }\n  }\n  return string;\n}\nint main() {\n   \
    \ auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097817
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Your code here\n\
    \    for(int i=0;i<string.length();i++)\n    {\n        if(islower(string[i]))\n\
    \        {\n            string[i]=toupper(string[i]);\n        }\n        else\n\
    \        {\n            string[i]=tolower(string[i]);\n        }\n    }\n    return\
    \ string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097818
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097811
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto &ch : string)\
    \ {\n    if (std::isupper(ch)) {\n      ch = std::tolower(ch);\n    } else {\n\
    \      ch = std::toupper(ch);\n    }\n  }\n  return string;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097818
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\t// Write your code\
    \ here.\n\tstd::string temp;\n\tfor (int i = 0; i < string.length(); i++) {\n\t\
    \tif (string[i] >= 'a' && string[i] <= 'z') {\n\t\t\ttemp += string[i] - 32;\n\
    \t\t}\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z') {\n\t\t\ttemp += string[i]\
    \ + 32;\n\t\t}\n\t\telse {\n\t\t\ttemp += string[i];\n\t\t}\n\t}\n\treturn temp;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097818
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tint i=0;\n\tint strlen=string.length();\n\
    \tfor(i=0;i<strlen;i++)\n\t{\n\t\tif(string[i]>='a'&&string[i]<='z')\n\t\t\tstring[i]=string[i]-32;\n\
    \t\telse if(string[i]>='A'&&string[i]<='Z')\n\t\t\tstring[i]=string[i]+32;\n\t\
    }\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097818
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n   std::string flipped;\n\
    \   for (char& c : string) {\n      if (isupper(c)) {\n         flipped += tolower(c);\n\
    \      } else {\n         flipped += toupper(c);\n      }\n   }\n   return flipped;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097818
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tint length = string.length();\n\
    \tchar *temp = new char[length];\n\tfor (int i = 0; i < length; i++) {\n\t\ttemp[i]\
    \ = string[i];\n\t}\n\tfor (int i = 0; i < length; i++) {\n\t\tif (temp[i] >=\
    \ 'a' && temp[i] <= 'z') {\n\t\t\ttemp[i] = (temp[i] - 32);\n\t\t}\n\t\telse if\
    \ (temp[i] >= 'A' && temp[i] <= 'Z') {\n\t\t\ttemp[i] = (temp[i] + 32);\n\t\t\
    }\n\t}\n\tstd::string output;\n\tfor (int i = 0; i < length; i++) {\n\t\toutput\
    \ += temp[i];\n\t}\n\treturn output;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Your code here\n\
    \    int n = string.length();\n    int i;\n    for(i=0;i<n;i++)\n    {\n     \
    \   char temp = string[i];\n        if(temp>='a' && temp<='z')\n        {\n  \
    \          string[i] = string[i] - 32;\n        }\n        else if(temp>='A' &&\
    \ temp<='Z')\n        {\n            string[i] = string[i] + 32;\n        }\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097818
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\t// Your code goes here\n\
    \tfor (size_t i = 0; i < string.length(); i++)\n\t{\n\t\tif (string[i] >= 'a'\
    \ && string[i] <= 'z')\n\t\t{\n\t\t\tstring[i] = toupper(string[i]);\n\t\t}\n\t\
    \telse if (string[i] >= 'A' && string[i] <= 'Z')\n\t\t{\n\t\t\tstring[i] = tolower(string[i]);\n\
    \t\t}\n\t}\n\treturn string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(char &ch : string)\
    \ {\n        if(isupper(ch)) {\n            ch = tolower(ch);\n        } else\
    \ {\n            ch = toupper(ch);\n        }\n    }\n    return string;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097818
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=tolower(string[i]);\n        }\n    }\n    return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string ans;\n\t\
    for(int i=0;i<string.length();i++)\n\t{\n\t\tif(string[i]>='a' && string[i]<='z')\n\
    \t\t{\n\t\t\tans=ans+char(string[i]-32);\n\t\t}\n\t\telse if(string[i]>='A' &&\
    \ string[i]<='Z')\n\t\t{\n\t\t\tans=ans+char(string[i]+32);\n\t\t}\n\t\telse\n\
    \t\t{\n\t\t\tans=ans+string[i];\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n\
    \    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n \
    \   assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] = string[i] - 32;\n    } else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n      string[i] = string[i] + 32;\n    }\n  }\n  return string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int len = string.length();\n\
    \    for(int i=0;i<len;i++){\n        if(string[i]>=65 && string[i]<=90){\n  \
    \          string[i] = string[i] + 32;\n        }\n        else if(string[i]>=97\
    \ && string[i]<=122){\n            string[i] = string[i] - 32;\n        }\n  \
    \  }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n \
    \   assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) ==\
    \ (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n        else if(isupper(string[i]))\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097812
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string t;\n  for(int\
    \ i=0;i<string.length();i++){\n    if(islower(string[i])){\n      string[i]=toupper(string[i]);\n\
    \    }\n    else if(isupper(string[i])){\n      string[i]=tolower(string[i]);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Write your code\
    \ here\n    // transform (string.begin(), string.end(), string.begin(), ::tolower);\
    \ //converts to lowercase\n    // transform (string.begin(), string.end(), string.begin(),\
    \ ::toupper); //converts to uppercase\n    int i;\n    std::string str;\n    for(i=0;i<string.length();i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            str+=toupper(string[i]);\n\
    \        }\n        else\n        {\n            str+=tolower(string[i]);\n  \
    \      }\n    }\n    return str;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    // Your code here\n\
    \    std::transform(string.begin(), string.end(), string.begin(), ::tolower);\n\
    \    return string;\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: Exception
  stderr: 'tmpbsht8i6m: /tmp/tmpbsht8i6m.cpp:14: int main(): Assertion `candidate(("Hello!"))
    == ("hELLO!")'' failed.

    '
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(size_t i = 0;\
    \ i < string.size(); i++) {\n        if(isupper(string[i])) {\n            string[i]\
    \ = tolower(string[i]);\n        } else {\n            string[i] = toupper(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]<='Z' && string[i]>='A')\n        {\n            string[i]=string[i]+32;\n\
    \        }\n        else if(string[i]<='z' && string[i]>='a')\n        {\n   \
    \         string[i]=string[i]-32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int len = string.length();\n\
    \    for(int i=0;i<len;i++){\n        if(isupper(string[i]))\n            string[i]\
    \ = tolower(string[i]);\n        else\n            string[i] = toupper(string[i]);\n\
    \    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string new_string;\n\
    \  for (int i = 0; i < string.length(); i++) {\n    if (isupper(string[i])) {\n\
    \      new_string += tolower(string[i]);\n    } else {\n      new_string += toupper(string[i]);\n\
    \    }\n  }\n  return new_string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a' && string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n   \
    \         string[i]=string[i]+32;\n        }\n    }\n    return string;\n}\nint\
    \ main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\
    \"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0; i<string.length();\
    \ i++) {\n        if(string[i]>='a' && string[i]<='z') string[i] = string[i] -\
    \ 32;\n        else if(string[i]>='A' && string[i]<='Z') string[i] = string[i]\
    \ + 32;\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  std::string new_string\
    \ = \"\";\n  for (auto i : string) {\n    if (islower(i))\n      new_string +=\
    \ toupper(i);\n    else\n      new_string += tolower(i);\n  }\n  return new_string;\n\
    }\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    std::string flip\
    \ = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ >= 65 && string[i] <= 90) {\n            flip += (char)(string[i] + 32);\n \
    \       } else if (string[i] >= 97 && string[i] <= 122) {\n            flip +=\
    \ (char)(string[i] - 32);\n        } else {\n            flip += string[i];\n\
    \        }\n    }\n    return flip;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n\tstd::string s = \"\"\
    ;\n\tint length = string.length();\n\tfor (int i = 0; i < length; i++) {\n\t\t\
    char temp = string[i];\n\t\tif (temp >= 65 && temp <= 90) {\n\t\t\ts = s + (char)(temp\
    \ + 32);\n\t\t}\n\t\telse if (temp >= 97 && temp <= 122) {\n\t\t\ts = s + (char)(temp\
    \ - 32);\n\t\t}\n\t\telse {\n\t\t\ts = s + temp;\n\t\t}\n\t}\n\treturn s;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (auto &c : string)\
    \ {\n    if (isupper(c)) {\n      c = tolower(c);\n    } else {\n      c = toupper(c);\n\
    \    }\n  }\n  return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(islower(string[i]))\n        {\n            string[i]=toupper(string[i]);\n\
    \        }\n        else\n        {\n            string[i]=tolower(string[i]);\n\
    \        }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097754
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    if (string[i] >= 'a' && string[i] <= 'z') {\n \
    \     string[i] -= 32;\n    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n\
    \      string[i] += 32;\n    }\n  }\n  return string;\n}\nint main() {\n    auto\
    \ candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    char x;\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        x=string[i];\n        if(x>='a' &&\
    \ x<='z')\n        {\n            string[i]=toupper(x);\n        }\n        else\
    \ if(x>='A' && x<='Z')\n        {\n            string[i]=tolower(x);\n       \
    \ }\n    }\n    return string;\n}\nint main() {\n    auto candidate = flip_case;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\"))\
    \ == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent\
    \ ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    int i;\n    int length\
    \ = string.length();\n    for(i=0;i<length;i++)\n    {\n        if(string[i]>='a'\
    \ && string[i]<='z')\n        {\n            string[i] = string[i] - 32;\n   \
    \     }\n        else if(string[i]>='A' && string[i]<='Z')\n        {\n      \
    \      string[i] = string[i] + 32;\n        }\n    }\n    return string;\n}\n\
    int main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n  for (int i = 0; i <\
    \ string.length(); i++) {\n    string[i] = isupper(string[i]) ? tolower(string[i])\
    \ : toupper(string[i]);\n  }\n  return string;\n}\nint main() {\n    auto candidate\
    \ = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have\
    \ violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case('Hello')\n\
    // 'hELLO'\nstd::string flip_case(std::string string) {\n    for(int i=0;i<string.length();i++)\n\
    \    {\n        if(string[i]>='a'&&string[i]<='z')\n        {\n            string[i]=string[i]-32;\n\
    \        }\n        else if(string[i]>='A'&&string[i]<='Z')\n        {\n     \
    \       string[i]=string[i]+32;\n        }\n    }\n    return string;\n    //\
    \ return \"\";\n}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"\
    These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660097819
