name: HumanEval_159_eat
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and\
  \ you already have eaten a certain number of carrots,\n// but now you need to eat\
  \ more carrots to complete the day's meals.\n// you should return an array of [\
  \ total number of eaten carrots after your meals,\n// the number of carrots left\
  \ after your meals ]\n// if there are not enough remaining carrots, you will eat\
  \ all remaining carrots, but will still be hungry.\n// Example:\n// * eat(5, 6,\
  \ 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10) -> [11, 0]\n\
  // * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n// the number\
  \ of carrots that you have eaten.\n// @need : integer\n// the number of carrots\
  \ that you need to eat.\n// @remaining : integer\n// the number of remaining carrots\
  \ thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <=\
  \ 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long\
  \ number, long need, long remaining) {\n"
tests: "}\nint main() {\n    auto candidate = eat;\n    assert(candidate((5), (6),\
  \ (10)) == (std::vector<long>({11, 4})));\n    assert(candidate((4), (8), (9)) ==\
  \ (std::vector<long>({12, 1})));\n    assert(candidate((1), (10), (10)) == (std::vector<long>({11,\
  \ 0})));\n    assert(candidate((2), (11), (5)) == (std::vector<long>({7, 0})));\n\
  \    assert(candidate((4), (5), (7)) == (std::vector<long>({9, 2})));\n    assert(candidate((4),\
  \ (5), (1)) == (std::vector<long>({5, 0})));\n}\n"
completions: ['    return {number + std::min(need, remaining), remaining - std::min(need,
    remaining)};', '  return number+need<=remaining?std::vector<long>{number+need,remaining-number-need}:std::vector<long>{remaining+number,0};',
  "  if(remaining < need)\n    return {number + remaining, 0};\n  return {number +\
    \ need, remaining - need};", "    // need to eat more carrots\n    long total\
    \ = number;\n    if (total + remaining < need) {\n        total += remaining;\n\
    \        remaining = 0;\n    } else {\n        remaining -= need - total;\n  \
    \      total = need;\n    }\n    std::vector<long> vec;\n    vec.push_back(total);\n\
    \    vec.push_back(remaining);\n    return vec;", "    std::vector<long> result;\n\
    \    if (remaining + number >= need) {\n        result.push_back(need);\n    \
    \    result.push_back(remaining + number - need);\n    } else {\n        result.push_back(remaining\
    \ + number);\n        result.push_back(0);\n    }\n    return result;", "    //\
    \ your code here\n    std::vector<long> res;\n    if (remaining >= need)\n   \
    \     res.push_back(number + need);\n    else\n        res.push_back(number +\
    \ remaining);\n    if (remaining < need)\n        res.push_back(0);\n    else\n\
    \        res.push_back(remaining - need);\n    return res;", "    std::vector<long>\
    \ result;\n    if (remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   // your code here\n    std::vector<long> result;\n    long total = number\
    \ + remaining;\n    if (total >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(total - need);\n    } else {\n        result.push_back(total);\n\
    \        result.push_back(0);\n    }\n    return result;", "    // Your code here\n\
    \    std::vector<long> x;\n    if(number <= 1000 && need <= 1000 && remaining\
    \ <= 1000){\n      if(number >= 0 && need >= 0 && remaining >= 0){\n        if(remaining\
    \ >= need){\n          x.push_back(need + number);\n          x.push_back(remaining\
    \ - need);\n        }\n        else if(remaining < need){\n          x.push_back(remaining\
    \ + number);\n          x.push_back(0);\n        }\n      }\n    }\n    return\
    \ x;", "  std::vector<long> result;\n  if(remaining >= need - number)\n  {\n \
    \   result.push_back(number + need);\n    result.push_back(remaining - need +\
    \ number);\n  }\n  else\n  {\n    result.push_back(number + remaining);\n    result.push_back(0);\n\
    \  }\n  return result;", "\t//cout << number << \" \" << need << \" \" << remaining\
    \ << endl;\n\tstd::vector<long>result;\n\tif (remaining < need - number) {\n\t\
    \tresult.push_back(remaining + number);\n\t\tresult.push_back(0);\n\t}\n\telse\
    \ {\n\t\tresult.push_back(need);\n\t\tresult.push_back(remaining - (need - number));\n\
    \t}\n\treturn result;", "    int left = 0;\n    int all = number + remaining;\n\
    \    int total;\n    if (all >= need) {\n        total = need;\n        left =\
    \ all - need;\n    } else {\n        total = all;\n        left = 0;\n    }\n\
    \    std::vector<long> res = { total, left };\n    return res;", "    int result\
    \ = 0;\n    long* arr = new long[2];\n    if (number <= 0 || need <= 0 || remaining\
    \ <= 0)\n    {\n        arr[0] = 0;\n        arr[1] = 0;\n        return arr;\n\
    \    }\n    else\n    {\n        if (remaining >= need)\n        {\n         \
    \   result = number + need;\n            arr[0] = result;\n            arr[1]\
    \ = remaining - need;\n            return arr;\n        }\n        else\n    \
    \    {\n            result = number + remaining;\n            arr[0] = result;\n\
    \            arr[1] = 0;\n            return arr;\n        }\n    }", "    if(number\
    \ + need > remaining)\n        return {(long)remaining, (long)0};\n    else\n\
    \        return {(long)number + need, (long)remaining - number - need};", "  \
    \  std::vector<long> v ;\n    if (remaining >= need)\n    {\n        v.push_back(need\
    \ + number);\n        v.push_back(remaining - need);\n    }\n    else\n    {\n\
    \        v.push_back(remaining + number);\n        v.push_back(0);\n    }\n  \
    \  return v;", '    // your code', "  std::vector<long> result;\n  if (remaining\
    \ >= need) {\n    result.push_back(number + need);\n    result.push_back(remaining\
    \ - need);\n  } else {\n    result.push_back(number + remaining);\n    result.push_back(0);\n\
    \  }\n  return result;", "    int diff = need - number;\n    if (diff > remaining)\
    \ {\n        diff = remaining;\n    }\n    return {number + diff, remaining -\
    \ diff};", "    if(need == 0){\n        return {number, remaining};\n    }\n \
    \   long numCarrots = number + remaining;\n    if(numCarrots < need){\n      \
    \  return {numCarrots, 0};\n    }\n    return {number + need, numCarrots - need};",
  "    if (number < 0 || need < 0 || remaining < 0) {\n        std::vector<long> x\
    \ {0, 0};\n        return x;\n    }\n    if (number + need <= remaining) {\n \
    \       std::vector<long> x {need + number, remaining - (need + number)};\n  \
    \      return x;\n    }\n    else {\n        std::vector<long> x {remaining +\
    \ number, 0};\n        return x;\n    }", "    std::vector<long> result;\n   \
    \ long need_c = need - number;\n    if (need_c < remaining) {\n        result.push_back(need);\n\
    \        result.push_back(remaining - need_c);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \ long newEat = number + remaining;\n  if (newEat >= need) {\n    return {need,\
    \ newEat - need};\n  } else {\n    return {newEat, 0};\n  }", "    std::vector<long>\
    \ result;\n    if(remaining >= need) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   int total_carrots_eaten = number;\n    int carrots_left_in_stock = remaining;\n\
    \    while(number < need){\n        number++;\n        carrots_left_in_stock--;\n\
    \        total_carrots_eaten++;\n        if(carrots_left_in_stock == 0){\n   \
    \         return {total_carrots_eaten, 0};\n        }\n    }\n    return {total_carrots_eaten,\
    \ carrots_left_in_stock};", "    long sum = number + remaining;\n    std::vector<long>\
    \ sumList;\n    sumList.push_back(sum);\n    if (sum > need) {\n        long temp\
    \ = sum - need;\n        sumList.push_back(temp);\n    } else {\n        sumList.push_back(0);\n\
    \    }\n    return sumList;", "\tstd::vector<long> result;\n\tif (number < 0 ||\
    \ need < 0 || remaining < 0) {\n\t\tresult.push_back(-1);\n\t\tresult.push_back(-1);\n\
    \t\treturn result;\n\t}\n\tif (number > 1000 || need > 1000 || remaining > 1000)\
    \ {\n\t\tresult.push_back(-1);\n\t\tresult.push_back(-1);\n\t\treturn result;\n\
    \t}\n\tlong left_carrots = remaining - need;\n\tif (left_carrots < 0) {\n\t\t\
    result.push_back(remaining + number);\n\t\tresult.push_back(0);\n\t\treturn result;\n\
    \t}\n\tresult.push_back(number + need);\n\tresult.push_back(left_carrots);\n\t\
    return result;", "    long n = 0;\n    long r = 0;\n    if (remaining < need)\
    \ {\n        r = 0;\n        n = number + remaining;\n    } else {\n        r\
    \ = remaining - need;\n        n = number + need;\n    }\n    std::vector<long>\
    \ ans;\n    ans.push_back(n);\n    ans.push_back(r);\n    return ans;", "    std::vector<long>\
    \ r;\n    r.push_back(number + std::min(need, remaining));\n    r.push_back(std::max(0,\
    \ remaining - need));\n    return r;", "    if (remaining < need) {\n        return\
    \ { number + remaining, 0 };\n    }\n    return { number + need, remaining - need\
    \ };", "  // your code here\n  if(need - number > remaining)\n    return {number\
    \ + remaining, 0};\n  else\n    return {number + need, remaining - need};", "\t\
    // Do your magic here\n\tvector<long> result;\n\tlong consume = number + need;\n\
    \tif (remaining >= consume) {\n\t\tresult.push_back(consume);\n\t\tresult.push_back(remaining\
    \ - consume);\n\t}\n\telse {\n\t\tresult.push_back(remaining);\n\t\tresult.push_back(0);\n\
    \t}\n\treturn result;", "    long t = 0;\n    if (remaining < need - number) {\n\
    \        t = remaining;\n    } else {\n        t = need - number;\n    }\n   \
    \ std::vector<long> a;\n    a.push_back(number + t);\n    a.push_back(remaining\
    \ - t);\n    return a;", "    // your code here\n    std::vector<long> res;\n\
    \    res.push_back(number + need > remaining ? remaining : number + need);\n \
    \   res.push_back(number + need > remaining ? 0 : remaining - number - need);\n\
    \    return res;", "  if (number >= need || need - number > remaining)\n    return\
    \ {number + remaining, 0};\n  return {number + need, remaining - (need - number)};",
  "    std::vector<long> result(2);\n    if (number + need > remaining) {\n      \
    \  result[0] = remaining;\n        result[1] = 0;\n    } else {\n        result[0]\
    \ = number + need;\n        result[1] = remaining - (number + need);\n    }\n\
    \    return result;", "  \t// your code here\n  \tstd::vector<long> res;\n\tif(need\
    \ >= remaining){\n\t\tres.push_back(number + remaining);\n\t\tres.push_back(0);\n\
    \t}\n\telse{\n\t\tres.push_back(number + need);\n\t\tres.push_back(remaining -\
    \ need);\n\t}\n\treturn res;", "    std::vector<long> v;\n    if(need <= remaining)\n\
    \    {\n        v.push_back(number + need);\n        v.push_back(remaining - need);\n\
    \    }\n    else\n    {\n        v.push_back(number + remaining);\n        v.push_back(0);\n\
    \    }\n    return v;", "  //your code here\n  return std::vector<long>();", " \
    \ // vector of long to return\n  std::vector<long> result;\n  // sum of number\
    \ and need\n  long sum = number + need;\n  // condition if remaining greater than\
    \ sum\n  if (remaining > sum) {\n    // add sum to result\n    result.push_back(sum);\n\
    \    // subtract sum from remaining\n    result.push_back(remaining - sum);\n\
    \  } else {\n    // subtract remaining from sum\n    long x = sum - remaining;\n\
    \    // add remaining to result\n    result.push_back(remaining);\n    // add\
    \ x to result\n    result.push_back(x);\n  }\n  // return result\n  return result;",
  "  std::vector<long> vec;\n  vec.push_back(number+remaining>=need?(need+number):remaining+number);\n\
    \  vec.push_back(number+remaining>=need?(remaining-need):0);\n  return vec;",
  "    // your code here\n    if(remaining<(need-number))\n    {\n        std::vector<long>\
    \ arr;\n        arr.push_back(number+remaining);\n        arr.push_back(0);\n\
    \        return arr;\n    }\n    else\n    {\n        std::vector<long> arr;\n\
    \        arr.push_back(number+need);\n        arr.push_back(remaining-(need-number));\n\
    \        return arr;\n    }", "\t// your code goes here\n\tstd::vector<long> ans;\n\
    \tans.push_back(number);\n\tans.push_back(need);\n\tans.push_back(remaining);\n\
    \treturn ans;", "  long count = 0;\n  long result[2];\n  for (long i = 0; i <\
    \ need; i++) {\n    if (remaining != 0) {\n      count++;\n      remaining--;\n\
    \    }\n  }\n  result[0] = number + count;\n  result[1] = remaining;\n  std::vector<long>\
    \ resultVector(result, result + sizeof(result) / sizeof(result[0]));\n  return\
    \ resultVector;", "\tstd::vector<long> result = {};\n\tif(number == 0 && need\
    \ == 0 && remaining == 0) {\n\t\tresult.push_back(0);\n\t\tresult.push_back(0);\n\
    \t\treturn result;\n\t}\n\tif(number < 0 || need < 0 || remaining < 0) {\n\t\t\
    result.push_back(-1);\n\t\tresult.push_back(-1);\n\t\treturn result;\n\t}\n\t\
    if(number >= 0 && need >= 0 && remaining >= 0) {\n\t\tif(remaining >= need - number)\
    \ {\n\t\t\tresult.push_back(number + need);\n\t\t\tresult.push_back(remaining\
    \ - (need - number));\n\t\t\treturn result;\n\t\t}\n\t\telse {\n\t\t\tresult.push_back(number\
    \ + remaining);\n\t\t\tresult.push_back(0);\n\t\t\treturn result;\n\t\t}\n\t}\n\
    \treturn result;", "\t// your code here\n\tint eaten = number;\n\tint left = remaining\
    \ - number;\n\tstd::vector<long> result;\n\tif (left >= need) {\n\t\teaten +=\
    \ need;\n\t\tleft -= need;\n\t}\n\telse {\n\t\teaten += left;\n\t\tleft = 0;\n\
    \t}\n\tresult.push_back(eaten);\n\tresult.push_back(left);\n\treturn result;",
  "    // your code here\n    std::vector<long> v;\n    if(remaining >= need){\n \
    \       v.push_back(need+number);\n        v.push_back(remaining-need);\n    }\n\
    \    else{\n        v.push_back(remaining+number);\n        v.push_back(0);\n\
    \    }\n    return v;", "  if (number + need <= remaining) {\n    return {number\
    \ + need, remaining - (number + need)};\n  } else {\n    return {number + remaining,\
    \ 0};\n  }", "\tif (remaining == 0)\n\t\treturn { number, remaining };\n\tif (remaining\
    \ == need)\n\t\treturn { number + need, 0 };\n\tif (remaining < need)\n\t\treturn\
    \ { number + remaining, 0 };\n\treturn { number + need, remaining - need };",
  "    int numEaten, numRemain;\n    if (number + need <= remaining) {\n        numEaten\
    \ = number + need;\n        numRemain = remaining - (number + need);\n    } else\
    \ {\n        numEaten = remaining;\n        numRemain = 0;\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(numEaten);\n    result.push_back(numRemain);\n\
    \    return result;", "  // your code here\n  std::vector<long> array;\n  array.push_back(number);\n\
    \  array.push_back(need);\n  array.push_back(remaining);\n  long carrot;\n  carrot\
    \ = array[0] + array[1];\n  if (carrot > array[2]) {\n      array[0] = array[2];\n\
    \      array[1] = 0;\n  } else {\n      array[0] = carrot;\n      array[1] = array[2]\
    \ - carrot;\n  }\n  std::vector<long> array2;\n  array2.push_back(array[0]);\n\
    \  array2.push_back(array[1]);\n  return array2;", "  long left=remaining-need;\n\
    \  if(left<0)\n  {\n    return {number+remaining,0};\n  }\n  else\n  {\n    return\
    \ {number+need,left};\n  }", "    std::vector<long> arr;\n    arr.push_back(number\
    \ + remaining > need ? need : number + remaining);\n    arr.push_back(number +\
    \ remaining > need ? remaining - (need - number) : 0);\n    return arr;", "  \
    \  //your code here\n    std::vector<long> v;\n    if(remaining < need)\n    \
    \    v.push_back(remaining + number);\n    else\n        v.push_back(number +\
    \ need);\n    if(remaining < need)\n        v.push_back(0);\n    else\n      \
    \  v.push_back(remaining - need);\n    return v;", "    std::vector<long> ret(2);\n\
    \    if (need < remaining) {\n        ret[0] = number + need;\n        ret[1]\
    \ = remaining - need;\n    } else {\n        ret[0] = number + remaining;\n  \
    \      ret[1] = 0;\n    }\n    return ret;", "\t// base case for rabbit's meal\n\
    \tif (need > remaining) {\n\t\tstd::vector<long> res = { number + remaining, 0\
    \ };\n\t\treturn res;\n\t}\n\t// rabbit's meal\n\telse {\n\t\tstd::vector<long>\
    \ res = { number + need, remaining - need };\n\t\treturn res;\n\t}", "   int sum\
    \ = number + remaining;\n   if(sum >= need)\n      return {need, sum - need};\n\
    \   else \n      return {sum, 0};", "\tstd::vector<long> result;\n\tresult.push_back(number\
    \ + remaining);\n\tresult.push_back(remaining - need);\n\tif (result[1] < 0) {\n\
    \t\tresult[0] += result[1];\n\t\tresult[1] = 0;\n\t}\n\treturn result;", "   \
    \ if(remaining>=need){\n        return {number+need,remaining-need};\n    }else{\n\
    \        return {number+remaining,0};\n    }", "\treturn {(long)std::min(number\
    \ + need, (long)1e3), (long)std::max(std::min(remaining - need, (long)1e3), (long)0)};",
  "  vector<long> v;\n  if (number+need<=remaining)\n  {\n    v.push_back(number+need);\n\
    \    v.push_back(remaining-(number+need));\n  }\n  else\n  {\n    v.push_back(number+remaining);\n\
    \    v.push_back(0);\n  }\n  return v;", "    std::vector<long> result;\n    long\
    \ carrots = number + remaining;\n    long eaten = 0;\n    if (need <= carrots)\
    \ {\n        eaten = need;\n        carrots -= need;\n    } else {\n        eaten\
    \ = carrots;\n        carrots = 0;\n    }\n    result.push_back(eaten);\n    result.push_back(carrots);\n\
    \    return result;", "\tlong a = 0;\n\tlong b = 0;\n\tlong c = 0;\n\tif (number\
    \ > 1000 || need > 1000 || remaining > 1000)\n\t{\n\t\tstd::cout << \"Invalid\
    \ number\";\n\t}\n\telse if (remaining <= need)\n\t{\n\t\ta = remaining + number;\n\
    \t\tb = 0;\n\t}\n\telse if (remaining > need)\n\t{\n\t\ta = need + number;\n\t\
    \tb = remaining - need;\n\t}\n\tstd::vector<long> myvector;\n\tmyvector.push_back(a);\n\
    \tmyvector.push_back(b);\n\treturn myvector;", "   if (number + remaining < need)\n\
    \      return {number + remaining, 0};\n   else\n      return {need, number +\
    \ remaining - need};", "    std::vector<long> result;\n    if(number>=need){\n\
    \        result.push_back(number);\n        result.push_back(remaining);\n   \
    \ }else if(number+remaining>=need){\n        result.push_back(need);\n       \
    \ result.push_back(remaining-(need-number));\n    }else{\n        result.push_back(number+remaining);\n\
    \        result.push_back(0);\n    }\n    return result;", "  std::vector<long>\
    \ result = {};\n  long total = number + need;\n  long diff = total - remaining;\n\
    \  if (total > remaining) {\n    result.push_back(total - diff);\n    result.push_back(0);\n\
    \  } else {\n    result.push_back(total);\n    result.push_back(remaining - total);\n\
    \  }\n  return result;", "    std::vector<long> res(2);\n    if (need > remaining)\
    \ {\n        res[0] = number + remaining;\n        res[1] = 0;\n    } else {\n\
    \        res[0] = number + need;\n        res[1] = remaining - need;\n    }\n\
    \    return res;", "\tstd::vector<long> v(2);\n\tif (number + need > remaining)\
    \ {\n\t\tv[0] = remaining;\n\t\tv[1] = 0;\n\t}\n\telse {\n\t\tv[0] = number +\
    \ need;\n\t\tv[1] = remaining - v[0];\n\t}\n\treturn v;", "    std::vector<long>\
    \ result{number + need, remaining - need};\n    if (result[1] < 0) {\n       \
    \ result[0] = result[0] + result[1];\n        result[1] = 0;\n    }\n    return\
    \ result;", "  std::vector<long> answer;\n  if (need <= remaining) {\n    answer.push_back(number\
    \ + need);\n    answer.push_back(remaining - need);\n  } else {\n    answer.push_back(number\
    \ + remaining);\n    answer.push_back(0);\n  }\n  return answer;", "    std::vector<long>\
    \ result;\n    // write your code here\n    long eat_need = number + need;\n \
    \   if (eat_need > remaining) {\n        result.push_back(remaining);\n      \
    \  result.push_back(0);\n    } else {\n        result.push_back(eat_need);\n \
    \       result.push_back(remaining - eat_need);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    if(number >= need)\n        result.push_back(number);\n\
    \    else\n        result.push_back(number + remaining);\n    if(remaining < need)\n\
    \        result.push_back(0);\n    else\n        result.push_back(remaining -\
    \ need);\n    return result;", "    std::vector<long> v;\n    if(remaining<need){\n\
    \        v.push_back(remaining+number);\n        v.push_back(0);\n    }\n    else{\n\
    \        v.push_back(number+need);\n        v.push_back(remaining-need);\n   \
    \ }\n    return v;", "    std::vector<long> result(2);\n    if (remaining >= need)\
    \ {\n        result[0] = number + need;\n        result[1] = remaining - need;\n\
    \    } else {\n        result[0] = number + remaining;\n        result[1] = 0;\n\
    \    }\n    return result;", "\treturn { std::min(need, remaining) + number, std::max(remaining\
    \ - need, 0L) };", "    std::vector<long> result{0,0};\n    long eaten = number\
    \ + remaining;\n    long all = number + remaining;\n    if(need > all)\n    {\n\
    \        eaten = all;\n        remaining = 0;\n    }\n    else\n    {\n      \
    \  eaten = eaten - (need - number);\n        remaining = all - need;\n    }\n\
    \    result[0] = eaten;\n    result[1] = remaining;\n    return result;", "  \
    \  long total = number;\n    long new_number = need - number;\n    if (new_number\
    \ <= remaining) {\n        total += new_number;\n        remaining -= new_number;\n\
    \    } else {\n        total += remaining;\n        remaining = 0;\n    }\n  \
    \  return {total, remaining};", "  return (remaining < need) ?\n    std::vector<long>\
    \ { number + remaining, 0 } :\n    std::vector<long> { number + need, remaining\
    \ - need };", "  std::vector<long> res;\n  if(remaining < need) {\n    res.push_back(number\
    \ + remaining);\n    res.push_back(0);\n  } else {\n    res.push_back(number +\
    \ need);\n    res.push_back(remaining - need);\n  }\n  return res;", "  std::vector<long>\
    \ v = {0, 0};\n  if (remaining >= need) {\n    v[0] = number + need;\n    v[1]\
    \ = remaining - need;\n  } else {\n    v[0] = number + remaining;\n    v[1] =\
    \ 0;\n  }\n  return v;", "\tstd::vector<long> result;\n\tif (remaining >= need)\
    \ {\n\t\tresult.push_back(number + need);\n\t\tresult.push_back(remaining - need);\n\
    \t}\n\telse {\n\t\tresult.push_back(number + remaining);\n\t\tresult.push_back(0);\n\
    \t}\n\treturn result;", "  if (remaining < need - number) {\n    return {need,\
    \ number + remaining - need};\n  }\n  return {number + need, remaining - need};",
  "  std::vector<long> result{number, remaining};\n  // need number for meals\n  //\
    \ available remaining for eat\n  if(remaining>=need){\n    result[0]+=need;\n\
    \    result[1]-=need;\n  }\n  else{\n    result[0]+=remaining;\n    result[1]-=remaining;\n\
    \  }\n  return result;", "    long total = number + remaining;\n    long remaining_after_meal\
    \ = total - need;\n    std::vector<long> ans;\n    if (remaining_after_meal <\
    \ 0) {\n        remaining_after_meal = 0;\n    }\n    ans.push_back(total);\n\
    \    ans.push_back(remaining_after_meal);\n    return ans;", "  return {number\
    \ + (remaining >= need ? need : remaining),\n          remaining - (remaining\
    \ >= need ? need : remaining)};", "    std::vector<long> result(2);\n    if (need\
    \ > remaining) {\n        result[0] = number + remaining;\n        result[1] =\
    \ 0;\n    } else {\n        result[0] = number + need;\n        result[1] = remaining\
    \ - need;\n    }\n    return result;", "    return {std::min(number + remaining,\
    \ need),\n        std::max(0l, remaining - (need - number))};", "\tstd::vector<long>\
    \ result;\n\tif (remaining >= need) {\n\t\tresult.push_back(number + need);\n\t\
    \tresult.push_back(remaining - need);\n\t}\n\telse {\n\t\tresult.push_back(number\
    \ + remaining);\n\t\tresult.push_back(0);\n\t}\n\treturn result;", "\tstd::vector<long>\
    \ array;\n\tif (remaining >= need) {\n\t\tarray.push_back(number + need);\n\t\t\
    array.push_back(remaining - need);\n\t}\n\telse {\n\t\tarray.push_back(number\
    \ + remaining);\n\t\tarray.push_back(0);\n\t}\n\treturn array;", "    if(remaining\
    \ < need)\n        return {number + remaining, 0};\n    return {number + need,\
    \ remaining - need};", "    long got = number + need;\n    std::vector<long> ans;\n\
    \    if (got > remaining) {\n        ans.push_back(remaining);\n        ans.push_back(0);\n\
    \    } else {\n        ans.push_back(got);\n        ans.push_back(remaining -\
    \ got);\n    }\n    return ans;", "    // your code here!\n    std::vector<long>\
    \ result = {0,0};\n    result[0] = number + need;\n    result[1] = remaining -\
    \ need;\n    if(result[1] < 0) {\n        result[0] = number + remaining;\n  \
    \      result[1] = 0;\n    }\n    return result;", "\tstd::vector<long> result;\n\
    \t// make sure you eat a number of carrots greater than or equal to need.\n\t\
    // if there are not enough remaining carrots, you will eat all remaining carrots,\
    \ but will still be hungry.\n\t// In either case you should return an array of\
    \ [ total number of eaten carrots after your meals,\n\t// the number of carrots\
    \ left after your meals ]\n\tif (remaining > need) {\n\t\t// eat more carrots\
    \ to complete the day's meals.\n\t\tresult.push_back(number + need);\n\t\tresult.push_back(remaining\
    \ - need);\n\t}\n\telse {\n\t\t// eat all remaining carrots, but will still be\
    \ hungry.\n\t\tresult.push_back(number + remaining);\n\t\tresult.push_back(0);\n\
    \t}\n\treturn result;", '  return {number + std::min(need, remaining), remaining
    - std::min(need, remaining)};', "\tif (remaining >= (number + need)) {\n\t\tstd::vector<long>\
    \ v = { number + need, remaining - (number + need) };\n\t\treturn v;\n\t}\n\t\
    else {\n\t\tstd::vector<long> v = { remaining, 0 };\n\t\treturn v;\n\t}", "  //\
    \ your code here\n  std::vector<long> output;\n  if(remaining < (need - number)){\n\
    \    output.push_back(number + remaining);\n    output.push_back(0);\n  }\n  else{\n\
    \    output.push_back(number + need);\n    output.push_back(remaining - (need\
    \ - number));\n  }\n  return output;", "    if (remaining >= need)\n        return\
    \ {number + need, remaining - need};\n    else\n        return {number + remaining,\
    \ 0};", "    // your code goes here...\n    std::vector<long> result;\n    if\
    \ (number > remaining) {\n        result.push_back(remaining);\n        result.push_back(0);\n\
    \    } else if (number + need > remaining) {\n        result.push_back(remaining);\n\
    \        result.push_back(0);\n    } else {\n        result.push_back(number +\
    \ need);\n        result.push_back(remaining - number - need);\n    }\n    return\
    \ result;", "    // This is the answer array.\n    // Its length is 2, one for\
    \ the number of carrots we eat and one for the number of carrots we have left.\n\
    \    std::vector<long> answer;\n    // add your code below\n    long n = need\
    \ - number;\n    if (remaining <= n) {\n        answer.push_back(remaining + number);\n\
    \        answer.push_back(0);\n    } else {\n        answer.push_back(need);\n\
    \        answer.push_back(remaining - n);\n    }\n    // your code above\n   \
    \ return answer;", "    long total = number + need;\n    return {total > remaining\
    \ ? remaining : total, remaining > total ? remaining - total : 0};", "    std::vector<long>\
    \ result;\n    if (number == 0) {\n        if (need <= remaining) {\n        \
    \    result.push_back(need);\n            result.push_back(remaining - need);\n\
    \        } else {\n            result.push_back(remaining);\n            result.push_back(0);\n\
    \        }\n    } else {\n        if (need + number <= remaining) {\n        \
    \    result.push_back(need + number);\n            result.push_back(remaining\
    \ - need - number);\n        } else {\n            result.push_back(remaining\
    \ + number);\n            result.push_back(0);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    if (remaining >= need) {\n        result.push_back(number\
    \ + need);\n        result.push_back(remaining - need);\n    } else {\n      \
    \  result.push_back(number + remaining);\n        result.push_back(0);\n    }\n\
    \    return result;", "    //your code here\n    long tmp = number + remaining;\n\
    \    vector<long> v;\n    v.push_back(tmp > need ? need : tmp);\n    v.push_back(tmp\
    \ > need ? tmp - need : 0);\n    return v;", '  return { std::min(number + remaining,
    number + need), std::max(remaining - (need - number), 0L) };', "\tlong eaten =\
    \ number + need;\n\tlong left;\n\tif (remaining < need) {\n\t\teaten = number\
    \ + remaining;\n\t\tleft = 0;\n\t}\n\telse {\n\t\tleft = remaining - need;\n\t\
    }\n\treturn { eaten, left };", "  int result = number + need;\n  if (result <\
    \ remaining) {\n    remaining -= result;\n  } else {\n    remaining = 0;\n  }\n\
    \  std::vector<long> vec = {result, remaining};\n  return vec;", "    std::vector<long>\
    \ answer;\n    if (remaining>=need) {\n      answer.push_back(number+need);\n\
    \      answer.push_back(remaining-need);\n    }\n    else {\n      answer.push_back(number+remaining);\n\
    \      answer.push_back(0);\n    }\n    return answer;", "  // your code\n  //\
    \ std::vector<long> res;\n  // std::cout << \"number = \" << number << std::endl;\n\
    \  // std::cout << \"need = \" << need << std::endl;\n  // std::cout << \"remaining\
    \ = \" << remaining << std::endl;\n  // if(need<remaining){\n  //   res.push_back(need);\n\
    \  //   res.push_back(remaining-need);\n  // }\n  // else if(need==remaining){\n\
    \  //   res.push_back(need);\n  //   res.push_back(0);\n  // }\n  // else{\n \
    \ //   res.push_back(remaining);\n  //   res.push_back(0);\n  // }\n  // return\
    \ res;\n  std::vector<long> res;\n  if(need<remaining){\n    res.push_back(need);\n\
    \    res.push_back(remaining-need);\n  }\n  else if(need==remaining){\n    res.push_back(need);\n\
    \    res.push_back(0);\n  }\n  else{\n    res.push_back(remaining);\n    res.push_back(0);\n\
    \  }\n  return res;", "    long carrotEaten = number + need;\n    long remainingCarrot\
    \ = remaining - need;\n    std::vector<long> rtn;\n    rtn.push_back(carrotEaten);\n\
    \    rtn.push_back(remainingCarrot);\n    return rtn;", "\t//..\n\tstd::vector<long>\
    \ result;\n\tresult.push_back(number);\n\tresult.push_back(need);\n\tresult.push_back(remaining);\n\
    \treturn result;", "    // your code here\n    std::vector<long> ans;\n    ans.push_back(number);\n\
    \    ans.push_back(need);\n    return ans;", "    std::vector<long> res(2);\n\
    \    long totalNeed = number + need;\n    res[0] = (totalNeed <= remaining) ?\
    \ totalNeed : (remaining + number);\n    res[1] = (totalNeed <= remaining) ? (remaining\
    \ - totalNeed) : 0;\n    return res;", "    long eaten = number + remaining;\n\
    \    if (eaten < need) {\n        return { eaten, 0 };\n    }\n    else {\n  \
    \      return { need, eaten - need };\n    }", "    if (remaining < need - number)\
    \ {\n        return {number + remaining, 0};\n    } else {\n        return {number\
    \ + need, remaining - need + number};\n    }", "  if (remaining >= need) {\n \
    \   return {number + need, remaining - need};\n  } else {\n    return {number\
    \ + remaining, 0};\n  }", "  long hunger = need - number;\n  return remaining\
    \ < hunger ? std::vector<long>{need, 0} : std::vector<long>{number + remaining,\
    \ 0};", "  std::vector<long> result{};\n  result.push_back(number + need);\n \
    \ result.push_back(remaining - need);\n  return result;", "\tstd::vector<long>\
    \ result;\n\tlong total = number + need;\n\tif (total > remaining) {\n\t\ttotal\
    \ = remaining;\n\t}\n\tresult.push_back(total);\n\tresult.push_back(remaining\
    \ - total);\n\treturn result;", "    std::vector<long> answer;\n    long final\
    \ = number + need;\n    if (final <= remaining) {\n        answer.push_back(final);\n\
    \        answer.push_back(remaining - final);\n    } else {\n        answer.push_back(remaining);\n\
    \        answer.push_back(0);\n    }\n    return answer;", "  // TODO: Return\
    \ an array of two integers\n  std::vector<long> result(2);\n  if (number > 1000\
    \ || need > 1000 || remaining > 1000) {\n    throw std::invalid_argument(\"number\
    \ or need or remaining is over 1000\");\n  }\n  if (number < 0 || need < 0 ||\
    \ remaining < 0) {\n    throw std::invalid_argument(\"number or need or remaining\
    \ is under 0\");\n  }\n  if (remaining < need) {\n    result[0] = number + remaining;\n\
    \    result[1] = 0;\n  } else {\n    result[0] = number + need;\n    result[1]\
    \ = remaining - need;\n  }\n  return result;", "  std::vector<long> result;\n\
    \  if (remaining <= 0) {\n    result.push_back(number);\n    result.push_back(remaining);\n\
    \    return result;\n  }\n  if (remaining <= need) {\n    result.push_back(number\
    \ + remaining);\n    result.push_back(0);\n    return result;\n  }\n  result.push_back(number\
    \ + need);\n  result.push_back(remaining - need);\n  return result;", '  // your
    code here', "    // your code here\n    if(number >= need) return {number, remaining};\n\
    \    if(remaining <= (need - number)) return {number + remaining, 0};\n    return\
    \ {number + need, remaining - (need - number)};", "    std::vector<long> arr;\n\
    \    if(remaining<need){\n        need=remaining;\n    }\n    arr.push_back(number+need);\n\
    \    arr.push_back(remaining-need);\n    return arr;", "  std::vector<long> result{};\n\
    \  if (remaining + number >= need) {\n    result.push_back(number + need);\n \
    \   result.push_back(remaining - need);\n  } else {\n    result.push_back(number\
    \ + remaining);\n    result.push_back(0);\n  }\n  return result;", "\tif (number\
    \ + need <= remaining) {\n\t\tstd::vector<long> v{ number + need, remaining -\
    \ (number + need) };\n\t\treturn v;\n\t}\n\telse {\n\t\tstd::vector<long> v{ remaining,\
    \ 0 };\n\t\treturn v;\n\t}", '  return { std::min(number + remaining, need), remaining
    - std::min(need - number, remaining) };', "  std::vector<long> result;\n  long\
    \ eaten = number;\n  if (number >= need) {\n    eaten = need;\n  } else {\n  \
    \  if (remaining < need - number) {\n      eaten += remaining;\n      remaining\
    \ = 0;\n    } else {\n      eaten += need - number;\n      remaining -= need -\
    \ number;\n    }\n  }\n  result.push_back(eaten);\n  result.push_back(remaining);\n\
    \  return result;", "    std::vector<long> result;\n    long x = number + remaining;\n\
    \    if (x >= need) {\n        x = need;\n    }\n    result.push_back(x);\n  \
    \  result.push_back(remaining - (x - number));\n    return result;", "  std::vector<long>\
    \ results;\n  if(number >= need) {\n    results.push_back(number);\n    results.push_back(remaining);\n\
    \  } else {\n    if((need - number) <= remaining) {\n      remaining = remaining\
    \ - (need - number);\n      results.push_back(need);\n      results.push_back(remaining);\n\
    \    } else {\n      results.push_back(number + remaining);\n      results.push_back(0);\n\
    \    }\n  }\n  return results;", "\t// long n = number + need;\n\t// long r =\
    \ (remaining - need) < 0 ? 0 : (remaining - need);\n\tstd::vector<long> result;\n\
    \tresult.push_back(number + need);\n\tresult.push_back((remaining - need) < 0\
    \ ? 0 : (remaining - need));\n\treturn result;", "  // your code here\n  if(number\
    \ >= need){\n      if(number >= remaining){\n          return {remaining,0};\n\
    \      }\n      else{\n          return {number,remaining-number};\n      }\n\
    \  }\n  else{\n      if(need >= remaining){\n          return {remaining,0};\n\
    \      }\n      else{\n          return {need,remaining-need};\n      }\n  }",
  "  // your code here\n  std::vector<long> result;\n  result.push_back(number + std::min(need,\
    \ remaining));\n  result.push_back(std::max(0L, remaining - need));\n  return\
    \ result;", "    std::vector<long> result(2);\n    if(remaining + number < need)\
    \ {\n        result[0] = number + remaining;\n        result[1] = 0;\n    } else\
    \ {\n        result[0] = need;\n        result[1] = number + remaining - need;\n\
    \    }\n    return result;", "\tstd::vector<long> sol;\n\tif (remaining > 0) {\n\
    \t\tif (remaining < need) {\n\t\t\tsol.push_back(number + remaining);\n\t\t\t\
    sol.push_back(0);\n\t\t}\n\t\telse {\n\t\t\tsol.push_back(number + need);\n\t\t\
    \tsol.push_back(remaining - need);\n\t\t}\n\t}\n\telse {\n\t\tsol.push_back(number);\n\
    \t\tsol.push_back(0);\n\t}\n\treturn sol;", "\tstd::vector<long> result;\n\tif\
    \ (number + need <= remaining) {\n\t\tresult.push_back(number + need);\n\t\tresult.push_back(remaining\
    \ - (number + need));\n\t}\n\telse {\n\t\tresult.push_back(number + remaining);\n\
    \t\tresult.push_back(0);\n\t}\n\treturn result;", "    long eatenCarrots = number;\n\
    \    long remainingCarrots = remaining;\n    if(number < need) {\n        eatenCarrots\
    \ += remainingCarrots;\n        remainingCarrots = 0;\n    } else {\n        eatenCarrots\
    \ += need;\n        remainingCarrots -= need;\n    }\n    std::vector<long> result;\n\
    \    result.push_back(eatenCarrots);\n    result.push_back(remainingCarrots);\n\
    \    return result;", "  std::vector<long> ret;\n  long num_carrots_eaten = number;\n\
    \  long num_carrots_remaining = remaining;\n  if (remaining >= (need - number))\
    \ {\n    num_carrots_eaten += need - number;\n    num_carrots_remaining -= need\
    \ - number;\n  } else {\n    num_carrots_eaten += remaining;\n    num_carrots_remaining\
    \ = 0;\n  }\n  ret.push_back(num_carrots_eaten);\n  ret.push_back(num_carrots_remaining);\n\
    \  return ret;", "    int eaten = number;\n    if (number >= need) {\n       \
    \ eaten = need;\n    } else {\n        if (remaining >= need - number) {\n   \
    \         eaten = need;\n        } else {\n            eaten = number + remaining;\n\
    \        }\n    }\n    std::vector<long> result = {eaten, remaining - (eaten -\
    \ number)};\n    return result;", "  std::vector<long> res = {};\n  res.push_back(number\
    \ + need);\n  res.push_back(remaining - need);\n  if (res[1] < 0) {\n    res[1]\
    \ = 0;\n  }\n  return res;", "    std::vector<long> result;\n    result.push_back(number\
    \ + need);\n    if(result[0] >= remaining)\n    {\n        result[0] = remaining;\n\
    \        result.push_back(0);\n    }\n    else\n    {\n        result.push_back(remaining\
    \ - result[0]);\n    }\n    return result;", "    long total = number;\n    if(remaining\
    \ >= need) {\n        total += need;\n        remaining -= need;\n    } else {\n\
    \        total += remaining;\n        remaining = 0;\n    }\n    std::vector<long>\
    \ result = {total, remaining};\n    return result;", "    std::vector<long> result(2);\n\
    \    //check if there are enough carrots\n    if (number + remaining >= need)\
    \ {\n        result[0] = need;\n        result[1] = number + remaining - need;\n\
    \    }\n    else {\n        result[0] = number + remaining;\n        result[1]\
    \ = 0;\n    }\n    return result;", "  std::vector<long> result;\n  if (remaining\
    \ < need) {\n    result.push_back(number + remaining);\n    result.push_back(0);\n\
    \  } else {\n    result.push_back(number + need);\n    result.push_back(remaining\
    \ - need);\n  }\n  return result;", "  int res = 0;\n  if (number > need) {\n\
    \    res = need;\n  } else {\n    res = number;\n  }\n  if (remaining > 0) {\n\
    \    return { number + res, remaining - res };\n  } else {\n    return { number\
    \ + res, 0 };\n  }", "    std::vector<long> result(2);\n    if (remaining >= need)\
    \ {\n        result[0] = number + need;\n        result[1] = remaining - need;\n\
    \    } else {\n        result[0] = number + remaining;\n        result[1] = 0;\n\
    \    }\n    return result;", "\tstd::vector<long> result;\n\tif (remaining < need)\
    \ {\n\t\tresult.push_back(remaining + number);\n\t\tresult.push_back(0);\n\t}\n\
    \telse {\n\t\tresult.push_back(number + need);\n\t\tresult.push_back(remaining\
    \ - need);\n\t}\n\treturn result;", "    if(number+need>remaining) {\n       \
    \ return {number+remaining, 0};\n    } else {\n        return {number+need, remaining-need};\n\
    \    }", "  // Your code here\n  std::vector<long> v;\n  if (number+need>remaining)\
    \ {\n    v.push_back(remaining);\n    v.push_back(0);\n  } else {\n    v.push_back(number+need);\n\
    \    v.push_back(remaining-(number+need));\n  }\n  return v;", "  std::vector<long>\
    \ result;\n  long remainder = 0;\n  if(number + need > remaining){\n    result.push_back(remaining);\n\
    \    result.push_back(remainder);\n  }\n  else{\n    result.push_back(number +\
    \ need);\n    result.push_back(remaining - (number + need));\n  }\n  return result;",
  "    std::vector<long> result;\n    long num1 = number + need;\n    long num2 =\
    \ remaining - need;\n    if (num2 >= 0) {\n        result.push_back(num1);\n \
    \       result.push_back(num2);\n    } else {\n        result.push_back(num1 +\
    \ num2);\n        result.push_back(0);\n    }\n    return result;", "    vector<long>\
    \ v;\n    if(number > need){\n        v.push_back(number + need);\n        if(remaining\
    \ > need){\n            v.push_back(remaining - need);\n        }\n        else{\n\
    \            v.push_back(0);\n        }\n    }\n    else{\n        v.push_back(number\
    \ + need);\n        if(remaining > need){\n            v.push_back(remaining -\
    \ need);\n        }\n        else{\n            v.push_back(0);\n        }\n \
    \   }\n    return v;", "  std::vector<long> result = {number, remaining};\n  if(number\
    \ + need <= remaining)\n    result[0] += need;\n  else\n    result[0] += remaining;\n\
    \  result[1] -= result[0] - number;\n  return result;", "  std::vector<long> result;\n\
    \  result.push_back(number);\n  result.push_back(need);\n  result.push_back(remaining);\n\
    \  return result;", '  return { (remaining>=need)? (number+need):(number+remaining),
    (remaining>=need)? (remaining-need):0 };', "  long eat_total = number;\n  if (remaining\
    \ > need) {\n    eat_total += need;\n    remaining -= need;\n  } else {\n    eat_total\
    \ += remaining;\n    remaining = 0;\n  }\n  std::vector<long> result = {eat_total,\
    \ remaining};\n  return result;", "\tstd::vector<long> result;\n\tif (remaining\
    \ >= need) {\n\t\tresult.push_back(number + need);\n\t\tresult.push_back(remaining\
    \ - need);\n\t}\n\telse {\n\t\tresult.push_back(number + remaining);\n\t\tresult.push_back(0);\n\
    \t}\n\treturn result;", "    if (remaining >= (number + need)) {\n        return\
    \ {number + need, remaining - (number + need)};\n    } else {\n        return\
    \ {remaining + number, 0};\n    }", "\tlong total = 0;\n\tif (remaining >= need)\n\
    \t{\n\t\ttotal = number + need;\n\t\tremaining -= need;\n\t}\n\telse\n\t{\n\t\t\
    total = number + remaining;\n\t\tremaining = 0;\n\t}\n\tstd::vector<long> ans\
    \ = { total, remaining };\n\treturn ans;", "    std::vector<long> result;\n  \
    \  if(number < 0 || need < 0 || remaining < 0) {\n        result.push_back(0);\n\
    \        result.push_back(0);\n        return result;\n    }\n    long total;\n\
    \    if(remaining >= (need - number)) {\n        total = need;\n        remaining\
    \ -= (need - number);\n    } else {\n        total = (remaining + number);\n \
    \       remaining = 0;\n    }\n    result.push_back(total);\n    result.push_back(remaining);\n\
    \    return result;", "    //your code here\n    long carrotsEaten = 0;\n    carrotsEaten\
    \ = number;\n    carrotsEaten += need > remaining ? remaining : need;\n    return\
    \ {carrotsEaten, (remaining - need) < 0 ? 0 : (remaining - need)};", "  return\
    \ std::vector<long> {number + need < remaining ? number + need : remaining + number,\n\
    \      remaining - need < 0 ? 0 : remaining - need};", "    std::vector<long>\
    \ res;\n    if(need <= remaining){\n        res.push_back(number + need);\n  \
    \      res.push_back(remaining - need);\n    }\n    else{\n        res.push_back(number\
    \ + remaining);\n        res.push_back(0);\n    }\n    return res;", "    int\
    \ total = number + need;\n    if (total < remaining)\n        return {total, remaining\
    \ - total};\n    return {remaining, 0};", "    if(remaining < need)\n    {\n \
    \       std::vector<long> result = {number + remaining, 0};\n        return result;\n\
    \    }\n    else\n    {\n        std::vector<long> result = {number + need, remaining\
    \ - need};\n        return result;\n    }", "\t// Write your code here\n\tstd::vector<long>\
    \ result(2);\n\tlong num = need - number;\n\tif (num > remaining) {\n\t\tresult[0]\
    \ = number + remaining;\n\t\tresult[1] = 0;\n\t}\n\telse {\n\t\tresult[0] = need;\n\
    \t\tresult[1] = remaining - num;\n\t}\n\treturn result;", "\tstd::vector<long>\
    \ result;\n\tif (remaining < (need - number)) {\n\t\tresult.push_back(remaining\
    \ + number);\n\t\tresult.push_back(0);\n\t}\n\telse {\n\t\tresult.push_back(number\
    \ + need);\n\t\tresult.push_back(remaining - (need - number));\n\t}\n\treturn\
    \ result;", "  // Your code here\n  long total_eaten = number;\n  long rem = remaining;\n\
    \  if(rem < need){\n    total_eaten += rem;\n    rem = 0;\n  }\n  else{\n    total_eaten\
    \ += need;\n    rem -= need;\n  }\n  std::vector<long>v{total_eaten, rem};\n \
    \ return v;", "    vector<long>result;\n    result.push_back(0);\n    result.push_back(0);\n\
    \    if(number < 0 || need < 0 || remaining < 0)\n        return result;\n   \
    \ if(number + need > remaining)\n    {\n        result[0] = remaining;\n     \
    \   result[1] = 0;\n    }\n    else\n    {\n        result[0] = number + need;\n\
    \        result[1] = remaining - result[0];\n    }\n    return result;", "\tif\
    \ (number + need <= remaining) {\n\t\tstd::vector<long> ans = { number + need,\
    \ remaining - (number + need) };\n\t\treturn ans;\n\t}\n\telse {\n\t\tstd::vector<long>\
    \ ans = { number + remaining, 0 };\n\t\treturn ans;\n\t}", "\tif (remaining >=\
    \ (number + need)) {\n\t\treturn std::vector<long>{(number + need), (remaining\
    \ - (number + need))};\n\t}\n\telse {\n\t\treturn std::vector<long>{(number +\
    \ remaining), 0};\n\t}", "    long sum = number + remaining;\n    long res = sum\
    \ - need;\n    return (res >= 0) ? std::vector<long>{sum, res} : std::vector<long>{sum,\
    \ 0};", "  std::vector<long> carrots;\n  return carrots;", "  std::vector<long>\
    \ result;\n  long eatCount = number + need;\n  if (eatCount <= remaining) {\n\
    \    result.push_back(eatCount);\n    result.push_back(remaining - eatCount);\n\
    \  } else {\n    result.push_back(remaining + number);\n    result.push_back(0);\n\
    \  }\n  return result;", "    std::vector<long> result = {};\n    // your code\
    \ here!\n    if(remaining < need){\n        result.push_back(remaining + number);\n\
    \        result.push_back(0);\n    }else{\n        result.push_back(need + number);\n\
    \        result.push_back(remaining - need);\n    }\n    return result;", "  \
    \  int total = number + need;\n    int result = 0;\n    if (total < remaining)\
    \ {\n        result = remaining - total;\n    }\n    std::vector<long> output\
    \ = {total, result};\n    return output;", "  long numberofcarrots = number;\n\
    \  long neededcarrots = need;\n  long remainingcarrots = remaining;\n  if (neededcarrots\
    \ - numberofcarrots > remainingcarrots) {\n    return {neededcarrots, 0};\n  }\
    \ else {\n    return {neededcarrots, remainingcarrots - (neededcarrots - numberofcarrots)};\n\
    \  }", "    long n = (need - number);\n    if (remaining < n)\n        return\
    \ { remaining + number, 0 };\n    else\n        return { number + n, remaining\
    \ - n };", "  // your code here\n  long numEaten, carrotsLeft;\n  numEaten = number;\n\
    \  if (need < remaining) {\n    numEaten += need;\n    carrotsLeft = remaining\
    \ - need;\n  } else {\n    numEaten += remaining;\n    carrotsLeft = 0;\n  }\n\
    \  std::vector<long> result{numEaten, carrotsLeft};\n  return result;", "    if\
    \ (number + remaining < need) {\n        return {number + remaining, 0};\n   \
    \ } else {\n        return {need, remaining - (need - number)};\n    }", "   \
    \ long carrot = number;\n    if(remaining<need)\n        need = remaining;\n \
    \   carrot += need;\n    remaining -= need;\n    return {carrot, remaining};",
  "\tif (remaining == 0) {\n\t\treturn { number, 0 };\n\t}\n\tif (need == 0) {\n\t\
    \treturn { number, remaining };\n\t}\n\tif (remaining < need) {\n\t\treturn {\
    \ number + remaining, 0 };\n\t}\n\telse {\n\t\treturn { number + need, remaining\
    \ - need };\n\t}", "\t// Return an array of what you have eaten and remaining\
    \ carrots.\n\t// NOTE: your response must be in ascending order.\n\tstd::vector<long>\
    \ result;\n\tresult.push_back(number);\n\tresult.push_back(need);\n\tresult.push_back(remaining);\n\
    \tif (number > remaining) {\n\t\tnumber = remaining;\n\t}\n\tif (number > need)\
    \ {\n\t\tnumber = need;\n\t}\n\tif (remaining < need) {\n\t\tneed = remaining;\n\
    \t}\n\tresult[0] = number + need;\n\tresult[1] = remaining - need;\n\treturn result;",
  "    std::vector<long> output;\n    if (remaining >= need) {\n        output.push_back(number\
    \ + need);\n        output.push_back(remaining - need);\n    } else {\n      \
    \  output.push_back(number + remaining);\n        output.push_back(0);\n    }\n\
    \    return output;", "\tstd::vector<long> arr;\n\tif (remaining >= need) {\n\t\
    \tarr.push_back(number + need);\n\t\tarr.push_back(remaining - need);\n\t}\n\t\
    else {\n\t\tarr.push_back(number + remaining);\n\t\tarr.push_back(0);\n\t}\n\t\
    return arr;", "    // your code here\n    if (number > need) {\n        std::vector<long>\
    \ a = {number, remaining};\n        return a;\n    }\n    if (number <= need)\
    \ {\n        if (remaining <= 0) {\n            std::vector<long> a = {number,\
    \ 0};\n            return a;\n        }\n        if (remaining > 0) {\n      \
    \      if (remaining >= need) {\n                std::vector<long> a = {number\
    \ + need, remaining - need};\n                return a;\n            }\n     \
    \       if (remaining < need) {\n                std::vector<long> a = {number\
    \ + remaining, 0};\n                return a;\n            }\n        }\n    }",
  "    if(number + need <= remaining)\n    {\n        return {number + need,remaining\
    \ - (number + need)};\n    }\n    else\n    {\n        return {remaining + number,0};\n\
    \    }\n    ", "  long number_of_carrots = number;\n  long needed_carrots = need;\n\
    \  long remaining_carrots = remaining;\n  long sum = 0;\n  std::vector<long> answer;\n\
    \  if(remaining_carrots > needed_carrots){\n    sum = number_of_carrots + needed_carrots;\n\
    \    answer.push_back(sum);\n    answer.push_back(remaining_carrots - needed_carrots);\n\
    \  }else{\n    sum = number_of_carrots + remaining_carrots;\n    answer.push_back(sum);\n\
    \    answer.push_back(0);\n  }\n  return answer;", "\tif (number < 0 || need <\
    \ 0 || remaining < 0)\n\t\tthrow std::invalid_argument(\"invalid input\");\n\t\
    if (number > 1000 || need > 1000 || remaining > 1000)\n\t\tthrow std::invalid_argument(\"\
    input out of range\");\n\tlong x = (remaining >= need - number) ? (number + need)\
    \ : (number + remaining);\n\tlong y = (remaining >= need - number) ? (remaining\
    \ - need + number) : 0;\n\treturn std::vector<long> {x, y};", "  // your code\
    \ here\n  return {number + (need - std::min(need, remaining)),\n          std::max(0L,\
    \ remaining - need)};", '  return remaining < need ? std::vector<long>{number
    + remaining, 0} : std::vector<long>{number + need, remaining - need};', "    long\
    \ sum= number + need;\n    if(sum<=remaining)\n        return {sum, remaining-sum};\n\
    \    else\n        return {remaining+number, 0};", "   std::vector<long> result;\n\
    \   long int temp = number;\n   while(need!=0 && remaining!=0){\n     if(need>remaining){\n\
    \       temp+=remaining;\n       need-=remaining;\n       remaining=0;\n     }\n\
    \     else{\n       temp+=need;\n       remaining-=need;\n       need=0;\n   \
    \  }\n   }\n   result.push_back(temp);\n   result.push_back(remaining);\n   return\
    \ result;", '  return {number + std::min(need, remaining), std::max(0L, remaining
    - need)};', "  if (remaining == 0) {\n    return {0,0};\n  }\n  if (number < 0\
    \ || need < 0 || remaining < 0 || number > 1000 || need > 1000 || remaining >\
    \ 1000) {\n    return {0,0};\n  }\n  if (number + need <= remaining) {\n    return\
    \ {number + need, remaining - (number + need)};\n  }\n  return {number + remaining,\
    \ 0};", "    if(remaining <= 0) return std::vector<long>{number, 0};\n    long\
    \ left = (number + need) - (number + need + remaining);\n    if(left < 0) return\
    \ std::vector<long>{number + need + remaining, 0};\n    else return std::vector<long>{number\
    \ + need, left};", "    std::vector<long> v;\n    if(remaining<need){\n      \
    \  v.push_back(number+remaining);\n        v.push_back(0);\n    }\n    else{\n\
    \        v.push_back(number+need);\n        v.push_back(remaining-need);\n   \
    \ }\n    return v;", "    std::vector<long> result;\n    if (need + number > remaining)\
    \ {\n        result.push_back(remaining);\n        result.push_back(0);\n    }\
    \ else {\n        result.push_back(need + number);\n        result.push_back(remaining\
    \ - (need + number));\n    }\n    return result;", "    std::vector<long> result(2);\n\
    \    if (remaining > need - number) {\n        result[0] = number + need;\n  \
    \      result[1] = remaining - need + number;\n    } else {\n        result[0]\
    \ = number + remaining;\n        result[1] = 0;\n    }\n    return result;", " \
    \   long eaten = number + std::min(need, remaining);\n    return {eaten, remaining\
    \ - need};", "  if(remaining < need) return std::vector<long>{number + remaining,\
    \ 0};\n  return std::vector<long>{number + need, remaining - need};"]
stop_tokens:
- "\n}"
