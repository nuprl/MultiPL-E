name: HumanEval_65_circular_shift
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // >>> circular_shift(12,\
    \ 2)\n  // \"12\"\n  // >>> circular_shift(12, 3)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 4)\n  // \"12\"\n  // >>> circular_shift(12, 5)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 6)\n  // \"12\"\n  // >>> circular_shift(12, 7)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 8)\n  // \"12\"\n  // >>> circular_shift(12, 9)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 10)\n  // \"12\"\n  // >>> circular_shift(12, 11)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 12)\n  // \"12\"\n  // >>> circular_shift(12, 13)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 14)\n  // \"12\"\n  // >>> circular_shift(12, 15)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 16)\n  // \"12\"\n  // >>> circular_shift(12, 17)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 18)\n  // \"12\"\n  // >>> circular_shift(12, 19)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 20)\n  // \"12\"\n  // >>> circular_shift(12, 21)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 22)\n  // \"12\"\n  // >>> circular_shift(12, 23)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 24)\n  // \"12\"\n  // >>> circular_shift(12, 25)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 26)\n  // \"12\"\n  // >>> circular_shift(12, 27)\n  // \"21\"\n  // >>> circular_shift(12,\
    \ 28)\n  // \"12\"\n  // >>> circular_shift(12, 29)\n  // \"21\"\n  // >>> circular_shift(\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpbdlrmcyt: /tmp/tmpbdlrmcyt.cpp:71: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::string digits = std::to_string(x);\n\
    \treturn digits.substr(shift, digits.size() - shift) + digits.substr(0, shift);\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp4eco9dvz: /tmp/tmp4eco9dvz.cpp:16: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::stringstream ss;\n\t\
    ss << x;\n\tstd::string num = ss.str();\n\tfor (long i = 0; i < shift; i++) {\n\
    \t\tchar temp = num[0];\n\t\tnum = num.substr(1);\n\t\tnum += temp;\n\t}\n\treturn\
    \ num;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp7yh0s_ia: /tmp/tmp7yh0s_ia.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size())\n        return std::string(s.rbegin(), s.rend());\n\
    \    return s.substr(shift) + s.substr(0, shift);\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpaemefcaw: /tmp/tmpaemefcaw.cpp:18: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::string result = std::to_string(x);\n\
    \twhile (shift > 0) {\n\t\tresult = result.substr(1) + result[0];\n\t\tshift--;\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxii3i7er: /tmp/tmpxii3i7er.cpp:20: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // TODO:\n    // convert\
    \ int to string\n    std::stringstream temp;\n    temp << x;\n    std::string\
    \ s = temp.str();\n    // reverse string if shift > number of digits\n    if (shift\
    \ > s.length()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    // shift string\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpwf50y87h: /tmp/tmpwf50y87h.cpp:27: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::stringstream ss;\n  ss\
    \ << x;\n  std::string digits = ss.str();\n  if (shift >= digits.size()) {\n \
    \   std::reverse(digits.begin(), digits.end());\n    return digits;\n  } else\
    \ {\n    return digits.substr(shift) + digits.substr(0, shift);\n  }\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpz_xksbna: /tmp/tmpz_xksbna.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::stringstream ss;\n\
    \    std::string str;\n    ss << x;\n    ss >> str;\n    if (shift > str.length())\
    \ {\n        std::reverse(str.begin(), str.end());\n        return str;\n    }\n\
    \    char c = str[0];\n    for (int i = 0; i < str.length() - 1; i++) {\n    \
    \    str[i] = str[i + 1];\n    }\n    str[str.length() - 1] = c;\n    return str;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpvc5b0r6w: /tmp/tmpvc5b0r6w.cpp:29: int main(): Assertion `candidate((12),\
    \ (2)) == (\"12\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::vector<long> digits;\n\
    \tint n = x;\n\tint d;\n\t// create array with digits\n\twhile (n >= 1) {\n\t\t\
    d = n % 10;\n\t\tdigits.push_back(d);\n\t\tn = n / 10;\n\t}\n\t// reverse the\
    \ digits in the array\n\tint start = 0;\n\tint end = digits.size() - 1;\n\tint\
    \ temp;\n\twhile (start < end) {\n\t\ttemp = digits[start];\n\t\tdigits[start]\
    \ = digits[end];\n\t\tdigits[end] = temp;\n\t\tstart++;\n\t\tend--;\n\t}\n\t//\
    \ if shift is more than number of digits, return reversed digits\n\tif (shift\
    \ > digits.size()) {\n\t\tstd::string s = \"\";\n\t\tint i;\n\t\tfor (i = 0; i\
    \ < digits.size(); i++) {\n\t\t\ts += std::to_string(digits[i]);\n\t\t}\n\t\t\
    return s;\n\t}\n\t// shift the digits\n\tint shiftValue = shift % digits.size();\n\
    \tstd::vector<long> finalDigits;\n\tfor (int i = 0; i < digits.size(); i++) {\n\
    \t\tfinalDigits.push_back(digits[(i + shiftValue) % digits.size()]);\n\t}\n\t\
    // if shift is 0, return reversed digits\n\tif (shift == 0) {\n\t\tstd::string\
    \ s = \"\";\n\t\tint i;\n\t\tfor (i = 0; i < digits.size(); i++) {\n\t\t\ts +=\
    \ std::to_string(digits[i]);\n\t\t}\n\t\treturn s;\n\t}\n\t// return shifted digits\n\
    \tstd::string s = \"\";\n\tint i;\n\tfor (i = 0; i < finalDigits.size(); i++)\
    \ {\n\t\ts += std::to_string(finalDigits[i]);\n\t}\n\treturn s;\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpx0smpx12: /tmp/tmpx0smpx12.cpp:65: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  assert(shift > 0);\n  std::string\
    \ str = std::to_string(x);\n  long size = str.size();\n  shift = shift % size;\n\
    \  std::string str1 = str.substr(size - shift, shift);\n  std::string str2 = str.substr(0,\
    \ size - shift);\n  return str1 + str2;\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp104xm5yq: /tmp/tmp104xm5yq.cpp:23: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tassert(shift >= 0);\n\tlong\
    \ size = 1;\n\tlong x2 = x;\n\twhile(x2/10 != 0) {\n\t\tx2 /= 10;\n\t\tsize++;\n\
    \t}\n\tif(shift == 0) {\n\t\treturn std::to_string(x);\n\t}\n\telse if(shift >\
    \ size) {\n\t\tstd::string result;\n\t\twhile(x > 0) {\n\t\t\tlong digit = x %\
    \ 10;\n\t\t\tx /= 10;\n\t\t\tresult.insert(0, std::to_string(digit));\n\t\t}\n\
    \t\treturn result;\n\t}\n\telse {\n\t\tlong multiplier = pow(10, shift);\n\t\t\
    long multiplier2 = pow(10, size - shift);\n\t\tlong digit = x % multiplier;\n\t\
    \tlong digit2 = x / multiplier2;\n\t\treturn std::to_string(digit2) + std::to_string(digit);\n\
    \t}\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpnxd374hd: /tmp/tmpnxd374hd.cpp:40: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // FILL IN YOUR CODE HERE\n\
    \  std::vector<int> num;\n  //std::cout << std::endl;\n  while(x != 0){\n    num.push_back(x%10);\n\
    \    x /= 10;\n  }\n  //std::cout << num.size() << std::endl;\n  if(shift > num.size()){\n\
    \    std::reverse(num.begin(), num.end());\n  }\n  else{\n    long temp = shift\
    \ % num.size();\n    while(temp > 0){\n      num.push_back(num[0]);\n      num.erase(num.begin());\n\
    \      temp--;\n    }\n  }\n  std::string a = \"\";\n  for(int i = 0; i < num.size();\
    \ i++){\n    a = a + std::to_string(num[i]);\n  }\n  return a;\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpvm56eyw9: /tmp/tmpvm56eyw9.cpp:38: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  std::reverse(s.begin(), s.end());\n  std::rotate(s.begin(), s.begin() + shift,\
    \ s.end());\n  return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp8__hs0xu: /tmp/tmp8__hs0xu.cpp:18: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string sx = std::to_string(x);\n\
    \    int len = sx.length();\n    if (shift > len) {\n        std::reverse(sx.begin(),\
    \ sx.end());\n        return sx;\n    }\n    std::rotate(sx.begin(), sx.begin()\
    \ + shift, sx.end());\n    return sx;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpu0wk_5ca: /tmp/tmpu0wk_5ca.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string x_str = std::to_string(x);\n\
    \    std::string x_str_reversed = std::string(x_str.rbegin(), x_str.rend());\n\
    \    if (shift > x_str.size()) {\n        return x_str_reversed;\n    }\n    std::string\
    \ x_str_right = x_str.substr(x_str.size() - shift);\n    std::string x_str_left\
    \ = x_str.substr(0, x_str.size() - shift);\n    return x_str_right + x_str_left;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  std::string xs;\n  while (shift >= s.size()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    shift -= s.size();\n  }\n  if (shift) {\n    std::reverse(s.begin(),\
    \ s.end());\n    std::rotate(s.begin(), s.begin() + shift, s.end());\n    std::reverse(s.begin(),\
    \ s.end());\n  }\n  return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp46fr79w8: /tmp/tmp46fr79w8.cpp:27: int main(): Assertion `candidate((12),\
    \ (2)) == (\"12\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    if (x <= 0) return \"0\"\
    ;\n    std::vector<char> digit;\n    int count = 0;\n    long dividend = x;\n\
    \    while (dividend > 0) {\n        digit.push_back(dividend % 10);\n       \
    \ dividend /= 10;\n        count++;\n    }\n    while (shift > count) {\n    \
    \    shift -= count;\n    }\n    long k = 0;\n    while (k < shift) {\n      \
    \  k++;\n        char temp = digit[0];\n        for (long i = 0; i < count - 1;\
    \ i++) {\n            digit[i] = digit[i + 1];\n        }\n        digit[count\
    \ - 1] = temp;\n    }\n    std::string result = \"\";\n    for (long i = 0; i\
    \ < count; i++) {\n        result += std::to_string(digit[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpgnanimd_: /tmp/tmpgnanimd_.cpp:40: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string answer = \"\"\
    ;\n    int digits = 0;\n    long y = x;\n    while (y > 0) {\n        answer =\
    \ (y % 10) + answer;\n        y /= 10;\n        digits += 1;\n    }\n    if (shift\
    \ > digits) {\n        return answer;\n    }\n    std::string new_answer = \"\"\
    ;\n    for (int i = shift; i < digits; i++) {\n        new_answer += answer[i];\n\
    \    }\n    for (int i = 0; i < shift; i++) {\n        new_answer += answer[i];\n\
    \    }\n    return new_answer;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwvndnk0p.cpp: In function \u2018std::string circular_shift(long\
    \ int, long int)\u2019:\n/tmp/tmpwvndnk0p.cpp:15:27: error: no match for \u2018\
    operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   15 |         answer\
    \ = (y % 10) + answer;\n      |                  ~~~~~~~~ ^ ~~~~~~\n      |  \
    \                   |       |\n      |                     |       std::string\
    \ {aka std::__cxx11::basic_string<char>}\n      |                     long int\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwvndnk0p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwvndnk0p.cpp:15:29:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   15\
    \ |         answer = (y % 10) + answer;\n      |                             ^~~~~~\n\
    In file included from /shared/cento"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s;\n    std::stringstream\
    \ out;\n    out << x;\n    s = out.str();\n    for (int i = 0; i < shift; i++)\
    \ {\n        s.push_back(s[0]);\n        s.erase(0, 1);\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpomzwqz7t: /tmp/tmpomzwqz7t.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    // reverse the digits\n    long i = 0;\n    long j = str.length() - 1;\n\
    \    while (i < j) {\n        char c = str[i];\n        str[i] = str[j];\n   \
    \     str[j] = c;\n        i++;\n        j--;\n    }\n    // rotate left by shift\
    \ number of digits\n    i = 0;\n    j = shift - 1;\n    while (i < j) {\n    \
    \    char c = str[i];\n        str[i] = str[j];\n        str[j] = c;\n       \
    \ i++;\n        j--;\n    }\n    i = shift;\n    j = str.length() - 1;\n    while\
    \ (i < j) {\n        char c = str[i];\n        str[i] = str[j];\n        str[j]\
    \ = c;\n        i++;\n        j--;\n    }\n    // reverse the digits again\n \
    \   i = 0;\n    j = str.length() - 1;\n    while (i < j) {\n        char c = str[i];\n\
    \        str[i] = str[j];\n        str[j] = c;\n        i++;\n        j--;\n \
    \   }\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpjp6rufzm: /tmp/tmpjp6rufzm.cpp:55: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::stringstream ss;\n\
    \    std::string s;\n    ss << x;\n    ss >> s;\n    int strLen = s.length();\n\
    \    if (shift == strLen)\n        return s;\n    if (shift > strLen) {\n    \
    \    reverse(s.begin(), s.end());\n        return s;\n    }\n    char tmp;\n \
    \   int i;\n    for (i = 0; i < shift; i++) {\n        tmp = s[0];\n        for\
    \ (int j = 0; j < strLen - 1; j++) {\n            s[j] = s[j + 1];\n        }\n\
    \        s[strLen - 1] = tmp;\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpn79rb0jh: /tmp/tmpn79rb0jh.cpp:35: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::vector<int> digits;\n\
    \    if (x < 0) {\n        x = -x;\n        digits.push_back(-1);\n    }\n   \
    \ do {\n        digits.push_back(x % 10);\n        x /= 10;\n    } while (x !=\
    \ 0);\n    shift %= digits.size();\n    if (shift < 0) {\n        shift += digits.size();\n\
    \    }\n    std::reverse(digits.begin(), digits.end());\n    std::string result;\n\
    \    for (int i = shift; i < digits.size(); ++i) {\n        result += std::to_string(digits[i]);\n\
    \    }\n    for (int i = 0; i < shift; ++i) {\n        result += std::to_string(digits[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmprf1patfq: /tmp/tmprf1patfq.cpp:36: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  long tmp = x;\n  int count\
    \ = 0;\n  while (tmp > 0) {\n    tmp /= 10;\n    count++;\n  }\n  int digits[count];\n\
    \  int i = 0;\n  tmp = x;\n  while (tmp > 0) {\n    digits[i] = tmp % 10;\n  \
    \  tmp /= 10;\n    i++;\n  }\n  std::string result = \"\";\n  if (shift > count)\
    \ {\n    for (int i = count - 1; i >= 0; i--) {\n      result += std::to_string(digits[i]);\n\
    \    }\n  } else {\n    for (int i = shift; i < count; i++) {\n      result +=\
    \ std::to_string(digits[i]);\n    }\n    for (int i = 0; i < shift; i++) {\n \
    \     result += std::to_string(digits[i]);\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpsaas060c: /tmp/tmpsaas060c.cpp:42: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    std::reverse(str.begin(), str.end());\n    std::rotate(str.begin(), str.begin()\
    \ + shift, str.end());\n    return str;\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp8mour667: /tmp/tmp8mour667.cpp:18: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // x = 10\n  // shift = 1\n\
    \  std::vector<int> digits;\n  std::string str = std::to_string(x);\n  if (shift\
    \ > str.length()) {\n    std::reverse(str.begin(), str.end());\n    return str;\n\
    \  }\n  while (x != 0) {\n    digits.push_back(x % 10);\n    x /= 10;\n  }\n \
    \ std::reverse(digits.begin(), digits.end());\n  // n = digits.size()\n  // d\
    \ = 0\n  int n = digits.size();\n  int d = 0;\n  while (d < shift) {\n    std::swap(digits[0],\
    \ digits[n - 1]);\n    d++;\n    for (int i = 1; i < n; i++) {\n      std::swap(digits[i],\
    \ digits[i - 1]);\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    str[i] = digits[i]\
    \ + '0';\n  }\n  return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpdeqybmx3: /tmp/tmpdeqybmx3.cpp:42: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    if (x == 0) return \"0\"\
    ;\n    std::string str = std::to_string(x);\n    long len = str.length();\n  \
    \  if (shift > len) {\n        shift %= len;\n    }\n    std::string s_shift =\
    \ str.substr(len - shift, shift);\n    std::string str_shifted = s_shift + str.substr(0,\
    \ len - shift);\n    return str_shifted;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmplvao47zp: /tmp/tmplvao47zp.cpp:25: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string num = std::to_string(x);\n\
    \    std::string rev_num;\n    int len = num.length();\n    shift = shift % len;\n\
    \    if (shift == 0) {\n        return num;\n    }\n    else {\n        rev_num\
    \ = num.substr(len - shift, shift);\n        rev_num += num.substr(0, len - shift);\n\
    \        return rev_num;\n    }\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp9msgx0ae: /tmp/tmp9msgx0ae.cpp:28: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  std::reverse(s.begin(), s.end());\n  if (shift > s.size()) {\n    return s;\n\
    \  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;\n}\n\
    int main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp3ins7lyc: /tmp/tmp3ins7lyc.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string result = std::to_string(x);\n\
    \    shift = shift % result.size();\n    // Rotate left by one\n    return result.substr(shift)\
    \ + result.substr(0, shift);\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmptc9l0ucf: /tmp/tmptc9l0ucf.cpp:18: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    if (x < 0) {\n        return\
    \ \"Invalid input\";\n    }\n    std::string s = std::to_string(x);\n    shift\
    \ = shift % s.length();\n    if (shift > 0) {\n        std::string front = s.substr(s.length()\
    \ - shift);\n        s = s.substr(0, s.length() - shift);\n        s = front +\
    \ s;\n    }\n    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp5hdjslal: /tmp/tmp5hdjslal.cpp:27: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::string s = std::to_string(x);\n\
    \tif (shift > s.size()) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\
    \t}\n\tstd::string s1 = s.substr(s.size() - shift, shift);\n\tstd::string s2 =\
    \ s.substr(0, s.size() - shift);\n\treturn s1 + s2;\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  long length = 0;\n  long tmp\
    \ = x;\n  while (tmp) {\n    tmp /= 10;\n    length++;\n  }\n  if (shift >= length)\
    \ {\n    std::string result = \"\";\n    while (x) {\n      result += std::to_string(x\
    \ % 10);\n      x /= 10;\n    }\n    return result;\n  }\n  long last = x % 10;\n\
    \  x /= 10;\n  long x_copy = x;\n  for (long i = 0; i < shift; i++) {\n    last\
    \ *= 10;\n  }\n  x = x * 10 + last;\n  for (long i = 0; i < length - shift - 1;\
    \ i++) {\n    x = x * 10 + x_copy % 10;\n    x_copy /= 10;\n  }\n  return std::to_string(x);\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp4fkfqhkf: /tmp/tmp4fkfqhkf.cpp:40: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::vector<int> vector;\n\
    \    int size = 0;\n    while (x > 0) {\n        vector.push_back(x % 10);\n \
    \       x /= 10;\n        size++;\n    }\n    for (int i = 0; i < shift; i++)\
    \ {\n        int temp = vector[size - 1];\n        for (int j = size - 1; j >\
    \ 0; j--) {\n            vector[j] = vector[j - 1];\n        }\n        vector[0]\
    \ = temp;\n    }\n    std::string result = \"\";\n    for (int i = 0; i < size;\
    \ i++) {\n        result += std::to_string(vector[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp7ad18no9: /tmp/tmp7ad18no9.cpp:33: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::vector<char> digits;\n\
    \  while (x) {\n    digits.push_back('0' + x % 10);\n    x /= 10;\n  }\n  // Reverse\
    \ the digits.\n  std::reverse(digits.begin(), digits.end());\n  if (shift > digits.size())\n\
    \    return std::string(digits.rbegin(), digits.rend());\n  std::string result;\n\
    \  // Rotate the vector left by shift.\n  std::rotate(digits.begin(), digits.begin()\
    \ + shift, digits.end());\n  return std::string(digits.begin(), digits.end());\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp5d6s8mv9: /tmp/tmp5d6s8mv9.cpp:27: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  assert(shift >= 0);\n  std::vector<int>\
    \ digit_vec;\n  if (x == 0) {\n    digit_vec.push_back(0);\n  }\n  while (x >\
    \ 0) {\n    digit_vec.push_back(x % 10);\n    x /= 10;\n  }\n  if (shift >= digit_vec.size())\
    \ {\n    std::reverse(digit_vec.begin(), digit_vec.end());\n    return std::to_string(std::accumulate(digit_vec.begin(),\
    \ digit_vec.end(), 0));\n  }\n  shift = shift % digit_vec.size();\n  std::rotate(digit_vec.begin(),\
    \ digit_vec.begin() + shift, digit_vec.end());\n  return std::to_string(std::accumulate(digit_vec.begin(),\
    \ digit_vec.end(), 0));\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp1vkdcxq6: /tmp/tmp1vkdcxq6.cpp:30: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  if (x == 0) return \"0\";\n\
    \  std::string digits = std::to_string(x);\n  std::reverse(digits.begin(), digits.end());\n\
    \  long num_digits = digits.size();\n  // Even if shift is greater than num_digits,\
    \ its ok to take modulo\n  shift = shift % num_digits;\n  // std::cout << digits\
    \ << \", \" << shift << std::endl;\n  std::string shifted_digits = digits.substr(shift)\
    \ + digits.substr(0, shift);\n  std::reverse(shifted_digits.begin(), shifted_digits.end());\n\
    \  return shifted_digits;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpgnhiqtnf: /tmp/tmpgnhiqtnf.cpp:26: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string result = std::to_string(x);\n\
    \    std::string new_result = \"\";\n    if (shift > result.length()) {\n    \
    \    for (int i = result.length() - 1; i >= 0; i--) {\n            new_result\
    \ += result[i];\n        }\n        return new_result;\n    }\n    for (int i\
    \ = shift; i < result.length(); i++) {\n        new_result += result[i];\n   \
    \ }\n    for (int i = 0; i < shift; i++) {\n        new_result += result[i];\n\
    \    }\n    return new_result;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpas5wrb7r: /tmp/tmpas5wrb7r.cpp:29: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    assert(shift >= 0);\n  \
    \  std::string s = std::to_string(x);\n    shift %= s.size();\n    if (shift ==\
    \ 0) {\n        return s;\n    }\n    std::string left = s.substr(shift);\n  \
    \  std::string right = s.substr(0, shift);\n    std::reverse(left.begin(), left.end());\n\
    \    std::reverse(right.begin(), right.end());\n    std::reverse(left.begin(),\
    \ left.end());\n    std::reverse(right.begin(), right.end());\n    return left\
    \ + right;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp_ljnno96: /tmp/tmp_ljnno96.cpp:27: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\t// YOUR CODE HERE\n\tstd::string\
    \ t = std::to_string(x);\n\tlong len = t.length();\n\tlong i = 0;\n\tif (shift\
    \ >= len) {\n\t\tstd::reverse(t.begin(), t.end());\n\t\treturn t;\n\t}\n\tchar\
    \ tmp = t[0];\n\ti = 0;\n\twhile (i < len) {\n\t\tt[i] = t[(i + shift) % len];\n\
    \t\ti++;\n\t}\n\tt[len - 1] = tmp;\n\treturn t;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpvhtdrloi: /tmp/tmpvhtdrloi.cpp:31: int main(): Assertion `candidate((12),\
    \ (2)) == (\"12\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        return std::string(s.rbegin(), s.rend());\n\
    \    }\n    std::string x1 = s.substr(0, shift);\n    std::string x2 = s.substr(shift);\n\
    \    std::string s2 = x2 + x1;\n    return s2;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpgx_tcrt8: /tmp/tmpgx_tcrt8.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        std::reverse(str.begin(), str.end());\n\
    \        return str;\n    }\n    std::rotate(str.begin(), str.begin() + str.length()\
    \ - shift, str.end());\n    return str;\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string temp = std::to_string(x);\n\
    \    std::string res;\n    int n = temp.length();\n    if (shift > n) {\n    \
    \    // reverse it\n        for (int i = n - 1; i >= 0; i--) {\n            res\
    \ += temp[i];\n        }\n    } else {\n        for (int i = shift; i < n; i++)\
    \ {\n            res += temp[i];\n        }\n        for (int i = 0; i < shift;\
    \ i++) {\n            res += temp[i];\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpb0so30aa: /tmp/tmpb0so30aa.cpp:31: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string digits = std::to_string(x);\n\
    \  if (shift > digits.size()) {\n    std::reverse(digits.begin(), digits.end());\n\
    \    return digits;\n  }\n  std::string y = digits.substr(digits.size() - shift)\
    \ + digits.substr(0, digits.size() - shift);\n  return y;\n}\nint main() {\n \
    \   auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    long n = s.size();\n    assert(shift <= n);\n    if (shift < n) {\n     \
    \   std::rotate(s.begin(), s.begin() + shift, s.end());\n    } else {\n      \
    \  std::reverse(s.begin(), s.end());\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpna8o_bpy: /tmp/tmpna8o_bpy.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string x_str = std::to_string(x);\n\
    \    std::string y_str = \"\";\n    if (shift > x_str.length()) {\n        y_str\
    \ = std::string(x_str.rbegin(), x_str.rend());\n    } else {\n        y_str =\
    \ x_str.substr(x_str.length() - shift, shift) +\n                x_str.substr(0,\
    \ x_str.length() - shift);\n    }\n    return y_str;\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::vector<int> digits;\n\
    \    while (x > 0) {\n        digits.push_back(x % 10);\n        x /= 10;\n  \
    \  }\n    if (shift > digits.size()) {\n        std::reverse(digits.begin(), digits.end());\n\
    \        return std::string(digits.begin(), digits.end());\n    }\n    std::rotate(digits.rbegin(),\
    \ digits.rbegin() + shift, digits.rend());\n    return std::string(digits.begin(),\
    \ digits.end());\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp_8_f4_bs: /tmp/tmp_8_f4_bs.cpp:25: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  if (x == 0) {\n    return\
    \ \"0\";\n  }\n  auto digits = std::to_string(x);\n  shift %= digits.size();\n\
    \  if (shift == 0) {\n    return digits;\n  }\n  return digits.substr(digits.size()\
    \ - shift) + digits.substr(0, digits.size() - shift);\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpn2ya4asa: /tmp/tmpn2ya4asa.cpp:25: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    assert(shift >= 0);\n  \
    \  std::string s = std::to_string(x);\n    long i = 0;\n    for (; i < shift;\
    \ i++) {\n        s = s[s.size() - 1] + s.substr(0, s.size() - 1);\n    }\n  \
    \  return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpcf4arx_a: /tmp/tmpcf4arx_a.cpp:23: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  if (x < 10) {\n    if (shift\
    \ > 1) {\n      return std::to_string(x);\n    } else {\n      return std::to_string(x);\n\
    \    }\n  } else {\n    std::string s = std::to_string(x);\n    std::string s2\
    \ = s.substr(shift, s.length() - shift);\n    std::string s3 = s.substr(0, shift);\n\
    \    s2.append(s3);\n    return s2;\n  }\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp20l6zey8: /tmp/tmp20l6zey8.cpp:27: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string x_s = std::to_string(x);\n\
    \    int x_len = x_s.length();\n    int x_shift = shift % x_len;\n    std::string\
    \ x_shift_s = x_s.substr(x_shift, x_len-x_shift) + x_s.substr(0, x_shift);\n \
    \   return x_shift_s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpq150ptat: /tmp/tmpq150ptat.cpp:19: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tassert(shift >= 0);\n\tstd::string\
    \ s = std::to_string(x);\n\tstd::string s2 = s;\n\tlong i = 0;\n\tlong y = shift\
    \ % s.length();\n\tfor (i = 0; i < s.length(); i++) {\n\t\ts2[i] = s[(i + y) %\
    \ s.length()];\n\t}\n\treturn s2;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpk_0v_cmj: /tmp/tmpk_0v_cmj.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string digits = std::to_string(x);\n\
    \    if (shift > digits.size()) {\n        std::reverse(digits.begin(), digits.end());\n\
    \        return digits;\n    } else {\n        for (int i = 0; i < shift; i++)\
    \ {\n            digits.insert(digits.end(), digits[0]);\n            digits.erase(digits.begin());\n\
    \        }\n        return digits;\n    }\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpe1ovuurl: /tmp/tmpe1ovuurl.cpp:25: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    s += s;\n    return s.substr(shift,\
    \ s.size() - shift);\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp2bnogzp0: /tmp/tmp2bnogzp0.cpp:18: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string result;\n  \
    \  std::string str = std::to_string(x);\n    if (shift > str.length()) {\n   \
    \     result = std::string(str.rbegin(), str.rend());\n    } else {\n        result\
    \ = str.substr(str.length() - shift) + str.substr(0, str.length() - shift);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string result;\n  result\
    \ = std::to_string(x);\n  if (shift > std::to_string(x).length()) {\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n  }\n  std::rotate(result.begin(), result.begin()\
    \ + shift, result.end());\n  return result;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpmunseotp: /tmp/tmpmunseotp.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string answer;\n  std::string\
    \ num = std::to_string(x);\n  int digits = num.length();\n  if (shift >= digits)\
    \ {\n    for (int i = digits - 1; i >= 0; i--) {\n      answer += num[i];\n  \
    \  }\n  } else {\n    for (int i = shift; i < digits; i++) {\n      answer +=\
    \ num[i];\n    }\n    for (int i = 0; i < shift; i++) {\n      answer += num[i];\n\
    \    }\n  }\n  return answer;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpvc_3veia: /tmp/tmpvc_3veia.cpp:30: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // IMPLEMENT THIS FUNCTION\n\
    \  return \"\";\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpf0_imxdd: /tmp/tmpf0_imxdd.cpp:16: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::stringstream stream;\n\
    \    stream << x;\n    std::string digit = stream.str();\n    if (shift < digit.length())\
    \ {\n        std::string first_half = digit.substr(0, shift);\n        std::string\
    \ second_half = digit.substr(shift, digit.length() - shift);\n        return second_half\
    \ + first_half;\n    } else {\n        std::reverse(digit.begin(), digit.end());\n\
    \        return digit;\n    }\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmphl2fldjq: /tmp/tmphl2fldjq.cpp:25: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // Fill in this function\n\
    \    long n = x;\n    int count = 0;\n    while(n > 0) {\n        n = n / 10;\n\
    \        count++;\n    }\n    while(shift > count) {\n        shift = shift -\
    \ count;\n    }\n    long temp = x;\n    std::string s;\n    while(temp > 0) {\n\
    \        long ans = temp % 10;\n        temp = temp / 10;\n        s = s + std::to_string(ans);\n\
    \    }\n    std::reverse(s.begin(), s.end());\n    std::string ans = s.substr(shift,\
    \ count) + s.substr(0, shift);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpf9lubu_p: /tmp/tmpf9lubu_p.cpp:34: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    int i = 0;\n    string s;\n\
    \    string res;\n    if (x == 0) {\n        return \"0\";\n    }\n    while (x\
    \ != 0) {\n        int remainder = x % 10;\n        s.push_back(remainder + '0');\n\
    \        x = x / 10;\n        i++;\n    }\n    if (shift > i) {\n        reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    reverse(s.begin(), s.end());\n    res\
    \ = s.substr(shift, i - shift);\n    res = res + s.substr(0, shift);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqsog0z6w.cpp: In function \u2018std::string circular_shift(long\
    \ int, long int)\u2019:\n/tmp/tmpqsog0z6w.cpp:12:5: error: \u2018string\u2019\
    \ was not declared in this scope; did you mean \u2018std::string\u2019?\n   12\
    \ |     string s;\n      |     ^~~~~~\n      |     std::string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqsog0z6w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpqsog0z6w.cpp:13:11:\
    \ error: expected \u2018;\u2019 before \u2018res\u2019\n   13 |     string res;\n\
    \      |           ^~~~\n      |           ;\n/tmp/tmpqsog0z6w.cpp:19:9: error:\
    \ \u2018s\u2019 was not declared in this scope\n   19 |         s.push_back(remainder\
    \ + '0');\n      |         ^\n/tmp/tmpqsog0z6w.cpp:24:17: error: \u2018s\u2019\
    \ was not declared in this scope\n   24 |         reverse(s.begin(), s.end());\n\
    \      |                 ^\n/tmp/tmpqsog0z6w.cpp:24:9: error: \u2018reverse\u2019\
    \ was not declared in this scope; did you mean \u2018std::reverse\u2019?\n   24\
    \ |         reverse(s.begin(), s.end());\n      |         ^~~~~~~\n      |   \
    \      std::reverse\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqsog0z6w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:11"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string result;\n  \
    \  std::stringstream stream;\n    stream << x;\n    std::string s = stream.str();\n\
    \    if (shift > s.length())\n        reverse(s.begin(), s.end());\n    else {\n\
    \        shift = s.length() - shift;\n        result = s.substr(shift, s.length()\
    \ - shift);\n        result += s.substr(0, shift);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpqt6vhggx: /tmp/tmpqt6vhggx.cpp:28: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string result = std::to_string(x);\n\
    \    long length = result.length();\n    shift = shift % length;\n    if (shift\
    \ == 0) {\n        return result;\n    }\n    std::string part = result.substr(length\
    \ - shift, shift);\n    result = result.substr(0, length - shift);\n    result\
    \ = part + result;\n    return result;\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmprhw6v83a: /tmp/tmprhw6v83a.cpp:26: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // TODO\n}\nint main() {\n\
    \    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpq2ssz4r0: /tmp/tmpq2ssz4r0.cpp:15: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  while (shift > s.size()) {\n    shift -= s.size();\n  }\n  std::rotate(s.begin(),\
    \ s.begin() + shift, s.end());\n  return s;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpmnpb0s8c: /tmp/tmpmnpb0s8c.cpp:20: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    return s.substr(shift, s.size() - shift) + s.substr(0, shift);\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpdcxhg4p0: /tmp/tmpdcxhg4p0.cpp:16: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::stringstream ss;\n  ss\
    \ << x;\n  std::string tmp = ss.str();\n  if (shift >= (long)tmp.size()) {\n \
    \   std::reverse(tmp.begin(), tmp.end());\n    return tmp;\n  }\n  std::rotate(tmp.begin(),\
    \ tmp.begin() + shift, tmp.end());\n  return tmp;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpi2zpr4u0: /tmp/tmpi2zpr4u0.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  std::string t = s;\n  long count = 1;\n  do {\n    std::rotate(t.begin(), t.begin()\
    \ + 1, t.end());\n    count++;\n  } while (t != s && count <= shift);\n  if (count\
    \ == shift + 1) {\n    std::reverse(t.begin(), t.end());\n  }\n  return t;\n}\n\
    int main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpnrppqkwz: /tmp/tmpnrppqkwz.cpp:25: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    std::reverse(str.begin(), str.end());\n    shift = shift % str.size();\n\
    \    std::rotate(str.begin(), str.begin() + shift, str.end());\n    return str;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp6r0bpbbk: /tmp/tmp6r0bpbbk.cpp:19: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    assert(shift >= 0);\n  \
    \  std::string result;\n    std::string num = std::to_string(x);\n    if (shift\
    \ < num.length()) {\n        result = num.substr(shift) + num.substr(0, shift);\n\
    \    } else {\n        std::reverse(num.begin(), num.end());\n        result =\
    \ num;\n    }\n    return result;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpqlwts0in: /tmp/tmpqlwts0in.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  if (shift >= s.size()) {\n    std::reverse(s.begin(), s.end());\n    return\
    \ s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n  return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpgnk_9a0f: /tmp/tmpgnk_9a0f.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::vector<int> a;\n  \
    \  std::vector<int> b;\n    int temp;\n    int length = 0;\n    while (x != 0)\
    \ {\n        temp = x % 10;\n        a.push_back(temp);\n        x = x / 10;\n\
    \        length++;\n    }\n    for (int i = 0; i < shift; i++) {\n        b.push_back(a[i]);\n\
    \    }\n    for (int i = shift; i < length; i++) {\n        a[i - shift] = a[i];\n\
    \    }\n    for (int i = 0; i < shift; i++) {\n        a[length - shift + i] =\
    \ b[i];\n    }\n    std::stringstream ss;\n    for (int i = 0; i < length; i++)\
    \ {\n        ss << a[i];\n    }\n    return ss.str();\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpkfpvdp2g: /tmp/tmpkfpvdp2g.cpp:38: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::stringstream ss;\n\
    \    ss << x;\n    std::string digits = ss.str();\n    if (shift > digits.size())\
    \ {\n        return std::string(digits.rbegin(), digits.rend());\n    }\n    std::string\
    \ output = digits.substr(shift) + digits.substr(0, shift);\n    return output;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpb9hnqs3d: /tmp/tmpb9hnqs3d.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string num = std::to_string(x);\n\
    \    std::string str;\n    if (shift > num.length()) {\n        std::reverse(num.begin(),\
    \ num.end());\n        return num;\n    } else {\n        std::rotate(num.begin(),\
    \ num.begin() + shift, num.end());\n        return num;\n    }\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpwppgw7q5: /tmp/tmpwppgw7q5.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    long x_reversed = 0;\n \
    \   while (x > 0) {\n        x_reversed = x_reversed * 10 + x % 10;\n        x\
    \ /= 10;\n    }\n    while (shift-- > 0) {\n        long digit = x_reversed %\
    \ 10;\n        x_reversed /= 10;\n        x_reversed = x_reversed + digit * std::pow(10,\
    \ int(std::log10(x_reversed)) + 1);\n    }\n    std::stringstream ss;\n    ss\
    \ << x_reversed;\n    return ss.str();\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpzpivr5r7: /tmp/tmpzpivr5r7.cpp:27: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::vector<char> digit_vec;\n\
    \  // TODO: Your code here.\n  while(x>0){\n      digit_vec.push_back(x%10);\n\
    \      x=x/10;\n  }\n  std::reverse(digit_vec.begin(),digit_vec.end());\n  long\
    \ digit_cnt=digit_vec.size();\n  if(shift>digit_cnt){\n    for(auto it=digit_vec.begin();it!=digit_vec.end();it++){\n\
    \      *it=9-*it;\n    }\n    return std::string(digit_vec.begin(),digit_vec.end());\n\
    \  }\n  std::vector<char> result_vec;\n  result_vec.insert(result_vec.end(),digit_vec.begin()+shift,digit_vec.end());\n\
    \  result_vec.insert(result_vec.end(),digit_vec.begin(),digit_vec.begin()+shift);\n\
    \  return std::string(result_vec.begin(),result_vec.end());\n}\nint main() {\n\
    \    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpm0hf4ybe: /tmp/tmpm0hf4ybe.cpp:32: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    char tmp[256];\n    sprintf(tmp,\
    \ \"%ld\", x);\n    std::string str(tmp);\n    while (shift > 0) {\n        char\
    \ digit = str.back();\n        str.pop_back();\n        str.insert(0, 1, digit);\n\
    \        shift--;\n    }\n    return str;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpeo6yrgrd: /tmp/tmpeo6yrgrd.cpp:26: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string digits = std::to_string(x);\n\
    \  long num_digits = digits.size();\n  assert(shift >= num_digits);\n  if (shift\
    \ == num_digits) return digits;\n  shift = shift % num_digits;\n  std::string\
    \ left = digits.substr(shift, num_digits);\n  std::string right = digits.substr(0,\
    \ shift);\n  return left + right;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpsp6om6tx: /tmp/tmpsp6om6tx.cpp:13: std::string circular_shift(long int,\
    \ long int): Assertion `shift >= num_digits' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    // no shift needed\n    if (shift % s.size() == 0) return s;\n    if (shift\
    \ > s.size()) {\n        std::reverse(s.begin(), s.end());\n        return s;\n\
    \    }\n    // otherwise shift the string\n    std::rotate(s.begin(), s.begin()\
    \ + shift, s.end());\n    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp83yqq7_j: /tmp/tmp83yqq7_j.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // YOUR CODE HERE\n}\nint\
    \ main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp3pos_dh5: /tmp/tmp3pos_dh5.cpp:15: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    long num_digits = std::to_string(x).length();\n\
    \    if (shift > num_digits) {\n        std::string res = std::to_string(x);\n\
    \        std::reverse(res.begin(), res.end());\n        return res;\n    }\n \
    \   else {\n        std::string res = std::to_string(x);\n        std::rotate(res.begin(),\
    \ res.begin() + shift, res.end());\n        return res;\n    }\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpr2rc6y1w: /tmp/tmpr2rc6y1w.cpp:25: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n   // WRITE YOUR CODE HERE.\n\
    \   int length = log10(x)+1;\n   if(shift>length)\n   {\n      std::string r_x\
    \ = std::to_string(x);\n      std::reverse(r_x.begin(),r_x.end());\n      return\
    \ r_x;\n   }\n   else\n   {\n      std::string s_x = std::to_string(x);\n    \
    \  std::string s_x_temp = std::to_string(x);\n      int i=0;\n      while(i<shift)\n\
    \      {\n         char c = s_x[0];\n         for(int j=0;j<length-1;j++)\n  \
    \       {\n            s_x[j] = s_x[j+1];\n         }\n         s_x[length-1]\
    \ = c;\n         i++;\n      }\n      return s_x;\n   }\n}\nint main() {\n   \
    \ auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"\
    ));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp2hsxzu2r: /tmp/tmp2hsxzu2r.cpp:39: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  assert(shift >= 0);\n  std::string\
    \ digits = std::to_string(x);\n  if (shift == 0) return digits;\n  std::string\
    \ result;\n  if (shift > digits.size()) {\n    result = digits;\n    std::reverse(result.begin(),\
    \ result.end());\n  } else {\n    result = digits.substr(digits.size() - shift,\
    \ shift);\n    result += digits.substr(0, digits.size() - shift);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // TODO\n    std::string\
    \ s;\n    int len = 0;\n    if (x < 0) {\n        x = -x;\n        s = \"-\";\n\
    \    }\n    int temp = x;\n    while (temp) {\n        temp /= 10;\n        len++;\n\
    \    }\n    temp = shift;\n    while (temp > len) {\n        temp -= len;\n  \
    \  }\n    x = (x % (int)pow(10, temp)) * (int)pow(10, len - temp) + x / (int)pow(10,\
    \ temp);\n    s += std::to_string(x);\n    return s;\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpwe2qz2cv: /tmp/tmpwe2qz2cv.cpp:33: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string digits = std::to_string(x);\n\
    \    int num_digits = digits.length();\n    if (shift >= num_digits) {\n     \
    \   std::reverse(digits.begin(), digits.end());\n        return digits;\n    }\
    \ else {\n        std::string result = digits.substr(num_digits - shift, shift);\n\
    \        result += digits.substr(0, num_digits - shift);\n        return result;\n\
    \    }\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpr5lfk2dw: /tmp/tmpr5lfk2dw.cpp:25: int main(): Assertion `candidate((12),\
    \ (2)) == (\"12\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string n;\n    n.resize(s.size());\n    long nshift = shift % s.size();\n\
    \    long nnshift = s.size() - nshift;\n    if (nnshift < 0) {\n        nnshift\
    \ = -nnshift;\n    }\n    for (int i = 0; i < s.size(); i++) {\n        n[i] =\
    \ s[(i + nnshift) % s.size()];\n    }\n    return n;\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmppmxmmt1z: /tmp/tmppmxmmt1z.cpp:28: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    int size = str.size();\n    if (shift > size) {\n        return std::string(str.rbegin(),\
    \ str.rend());\n    }\n    return str.substr(size - shift, shift) + str.substr(0,\
    \ size - shift);\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  assert(shift >= 0);\n  std::string\
    \ result;\n  std::stringstream ss;\n  ss << x;\n  std::string str = ss.str();\n\
    \  if (shift > str.length()) {\n    std::reverse(str.begin(), str.end());\n  \
    \  return str;\n  } else {\n    std::rotate(str.begin(), str.begin() + shift,\
    \ str.end());\n    return str;\n  }\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpt3sl5k3o: /tmp/tmpt3sl5k3o.cpp:26: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  shift = shift % s.size();\n  if (shift > 0) {\n    std::rotate(s.begin(), s.begin()\
    \ + shift, s.end());\n  } else {\n    std::reverse(s.begin(), s.end());\n  }\n\
    \  return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpsqqruzcu: /tmp/tmpsqqruzcu.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // Handle shift > number of\
    \ digits.\n  // Reversing digits.\n  std::string digits = std::to_string(x);\n\
    \  if (shift > digits.size()) {\n    std::reverse(digits.begin(), digits.end());\n\
    \    return digits;\n  }\n  // Otherwise, shift.\n  std::rotate(digits.begin(),\
    \ digits.begin() + shift, digits.end());\n  return digits;\n}\nint main() {\n\
    \    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpn2vvp_5v: /tmp/tmpn2vvp_5v.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  if (x < 0) {\n    x = -x;\n\
    \  }\n  shift = shift % to_string(x).length();\n  std::string y = to_string(x);\n\
    \  if (shift == 0) {\n    return y;\n  }\n  std::reverse(y.begin(), y.end());\n\
    \  std::reverse(y.begin(), y.begin() + shift);\n  std::reverse(y.begin() + shift,\
    \ y.end());\n  return y;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk11gznb4.cpp: In function \u2018std::string circular_shift(long\
    \ int, long int)\u2019:\n/tmp/tmpk11gznb4.cpp:14:19: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   14 |   shift = shift % to_string(x).length();\n      |                 \
    \  ^~~~~~~~~\n      |                   std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk11gznb4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // +++your code here+++\n\
    \    std::stringstream ss;\n    ss << x;\n    std::string s = ss.str();\n    std::reverse(s.begin(),\
    \ s.end());\n    s += s;\n    return s.substr(0, shift);\n}\nint main() {\n  \
    \  auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"\
    ));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp2j3zqc68: /tmp/tmp2j3zqc68.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::string s = std::to_string(x);\n\
    \treturn s.substr(s.size() - shift) + s.substr(0, s.size() - shift);\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 18446744073709551610) > this->size()\
    \ (which is 2)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  if (x < 10) {\n    return\
    \ std::to_string(x);\n  }\n  std::string s = std::to_string(x);\n  if (shift ==\
    \ 0) {\n    return s;\n  }\n  if (shift > s.size()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  std::string result = s.substr(shift) + s.substr(0,\
    \ shift);\n  return result;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp7mwj47sj: /tmp/tmp7mwj47sj.cpp:27: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    long length = (long) std::log10(x)\
    \ + 1;\n    assert(length >= shift);\n    std::vector<long> digits;\n    for (long\
    \ k = 0; k < length; k++) {\n        digits.push_back(x % 10);\n        x /= 10;\n\
    \    }\n    for (long k = 0; k < shift; k++) {\n        digits.insert(digits.begin(),\
    \ digits.back());\n        digits.pop_back();\n    }\n    std::string y = \"\"\
    ;\n    for (long k = 0; k < length; k++) {\n        y += std::to_string(digits[k]);\n\
    \    }\n    return y;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpq7opmlsw: /tmp/tmpq7opmlsw.cpp:30: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tint num = 0;\n\tlong temp\
    \ = x;\n\twhile (temp != 0) {\n\t\tnum += 1;\n\t\ttemp /= 10;\n\t}\n\tif (shift\
    \ >= num) {\n\t\tstd::string str = std::to_string(x);\n\t\tstd::reverse(str.begin(),\
    \ str.end());\n\t\treturn str;\n\t}\n\telse {\n\t\tlong left = x % (long)(pow(10,\
    \ shift));\n\t\tlong right = x / (long)(pow(10, shift));\n\t\tlong new_x = left\
    \ * (long)(pow(10, num - shift)) + right;\n\t\treturn std::to_string(new_x);\n\
    \t}\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp22g5d5dv: /tmp/tmp22g5d5dv.cpp:31: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str_x;\n   \
    \ std::string str_x_shifted;\n    std::stringstream stream;\n    stream << x;\n\
    \    str_x = stream.str();\n    // If shift > number of digits, return digits\
    \ reversed.\n    if (shift > str_x.length()) {\n        std::reverse(str_x.begin(),\
    \ str_x.end());\n        return str_x;\n    } else {\n        str_x_shifted =\
    \ str_x.substr(shift, str_x.length() - shift);\n        str_x_shifted += str_x.substr(0,\
    \ shift);\n        return str_x_shifted;\n    }\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmphm4baae9: /tmp/tmphm4baae9.cpp:28: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    assert(shift >= 0);\n  \
    \  std::string str = std::to_string(x);\n    // if shift > digits, reverse the\
    \ digits.\n    if (shift > str.length()) {\n        str = std::string(str.rbegin(),\
    \ str.rend());\n    } else {\n        str = str.substr(shift) + str.substr(0,\
    \ shift);\n    }\n    return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpcof1i5g7: /tmp/tmpcof1i5g7.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string result;\n  \
    \  std::string s = std::to_string(x);\n    if (shift >= s.size()) {\n        for\
    \ (long i = s.size() - 1; i >= 0; i--) {\n            result += s[i];\n      \
    \  }\n    } else {\n        for (long i = s.size() - shift; i < s.size(); i++)\
    \ {\n            result += s[i];\n        }\n        for (long i = 0; i < s.size()\
    \ - shift; i++) {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpfl8tlg45: /tmp/tmpfl8tlg45.cpp:30: int main(): Assertion `candidate((12),\
    \ (2)) == (\"12\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    std::rotate(s.begin(), s.begin() + s.size() - shift,\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp2jln493c: /tmp/tmp2jln493c.cpp:22: int main(): Assertion `candidate((12),\
    \ (2)) == (\"12\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    long n = std::log10(x) +\
    \ 1;\n    if (shift > n) {\n        return std::to_string(x);\n    }\n    long\
    \ m = x;\n    for (long i = 0; i < shift; i++) {\n        long r = m % 10;\n \
    \       m /= 10;\n        m += r * std::pow(10, n - 1);\n    }\n    return std::to_string(m);\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxioyi8qj: /tmp/tmpxioyi8qj.cpp:25: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string num = std::to_string(x);\n\
    \  while (shift--) {\n    char c = num.back();\n    num.pop_back();\n    num.insert(0,\
    \ 1, c);\n  }\n  return num;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpqqhtnkhb: /tmp/tmpqqhtnkhb.cpp:23: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    std::string shifted_str;\n    if (shift > str.length()) {\n        for (int\
    \ i = str.length() - 1; i >= 0; i--) {\n            shifted_str.push_back(str[i]);\n\
    \        }\n    } else {\n        shifted_str = str.substr(str.length() - shift)\
    \ + str.substr(0, str.length() - shift);\n    }\n    return shifted_str;\n}\n\
    int main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::vector<int> v;\n  \
    \  while (x) {\n        v.push_back(x % 10);\n        x /= 10;\n    }\n    if\
    \ (shift > v.size()) {\n        std::reverse(v.begin(), v.end());\n        std::string\
    \ ans = \"\";\n        for (int i = 0; i < v.size(); i++) {\n            ans +=\
    \ std::to_string(v[i]);\n        }\n        return ans;\n    }\n    std::reverse(v.begin(),\
    \ v.end());\n    std::rotate(v.begin(), v.begin() + shift, v.end());\n    std::string\
    \ ans = \"\";\n    for (int i = 0; i < v.size(); i++) {\n        ans += std::to_string(v[i]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpi_gxi507: /tmp/tmpi_gxi507.cpp:34: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string t = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ t[i] = s[(i + shift) % s.size()];\n    }\n    return t;\n}\nint main() {\n \
    \   auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpeehtjhcd: /tmp/tmpeehtjhcd.cpp:20: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::stringstream ss;\n\
    \    ss << x;\n    std::string result;\n    ss >> result;\n    if (shift > result.size())\
    \ {\n        std::reverse(result.begin(), result.end());\n        return result;\n\
    \    }\n    std::rotate(result.begin(), result.begin() + shift, result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = circular_shift;\n \
    \   assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpvytxppni: /tmp/tmpvytxppni.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tint digits = 1;\n\twhile (shift\
    \ >= digits) {\n\t\tdigits *= 10;\n\t\tshift -= 1;\n\t}\n\treturn std::to_string(x%digits*pow(10,\
    \ shift) + x/digits);\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpa2bbo99b: /tmp/tmpa2bbo99b.cpp:20: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  long digit_length = s.length();\n  if (shift > digit_length) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  return s.substr(shift, digit_length - shift)\
    \ + s.substr(0, shift);\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmphoztk8p8: /tmp/tmphoztk8p8.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    long len = s.length();\n    if (shift > len) {\n        reverse(s.begin(),\
    \ s.end());\n        return s;\n    }\n    std::rotate(s.begin(), s.begin() +\
    \ len - shift, s.end());\n    return s;\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    long N = str.size();\n    shift = shift % N;\n    std::string right = str.substr(N\
    \ - shift, shift);\n    std::string left = str.substr(0, N - shift);\n    return\
    \ right + left;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpvhce92br: /tmp/tmpvhce92br.cpp:22: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string str = std::to_string(x);\n\
    \  int str_len = str.length();\n  if (shift > str_len) {\n    std::reverse(str.begin(),\
    \ str.end());\n    return str;\n  }\n  for (int i = 0; i < shift; i++) {\n   \
    \ std::rotate(str.begin(), str.begin() + 1, str.end());\n  }\n  return str;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpzplq4iht: /tmp/tmpzplq4iht.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // TODO: Implement this.\n\
    \    if (shift == 0) {\n        return std::to_string(x);\n    }\n    std::string\
    \ num = std::to_string(x);\n    std::string result = \"\";\n    for (int i = num.length()\
    \ - shift; i < num.length(); i++) {\n        result += num[i];\n    }\n    for\
    \ (int i = 0; i < num.length() - shift; i++) {\n        result += num[i];\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    int n = 0; // number of\
    \ digits\n    int s = 1; // current shift\n    long y = x;\n    for (; y > 0;\
    \ y /= 10) {\n        s *= 10;\n        n++;\n    }\n    if (shift > n) {\n  \
    \      s = 1;\n        n = 0;\n        y = x;\n        for (; y > 0; y /= 10)\
    \ {\n            s *= 10;\n            n++;\n        }\n        shift = n;\n \
    \   }\n    s /= 10;\n    long z = x % s;\n    x /= s;\n    z *= pow(10, n - shift);\n\
    \    x += z;\n    std::stringstream stream;\n    stream << x;\n    return stream.str();\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpdw8m16ff: /tmp/tmpdw8m16ff.cpp:39: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string x_str = std::to_string(x);\n\
    \    if (shift > x_str.size())\n        return std::string(x_str.rbegin(), x_str.rend());\n\
    \    std::string part1 = x_str.substr(0, shift);\n    std::string part2 = x_str.substr(shift);\n\
    \    return part2 + part1;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpb252xpyx: /tmp/tmpb252xpyx.cpp:20: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  assert(shift > 0);\n  std::vector<int>\
    \ v;\n  do {\n    v.push_back(x % 10);\n    x /= 10;\n  } while (x);\n  std::reverse(v.begin(),\
    \ v.end());\n  shift %= v.size();\n  std::rotate(v.begin(), v.begin() + shift,\
    \ v.end());\n  std::string s;\n  for (int i = 0; i < v.size(); ++i) {\n    s +=\
    \ v[i] + '0';\n  }\n  return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpj175u1nj: /tmp/tmpj175u1nj.cpp:28: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string x_str = std::to_string(x);\n\
    \    // Call reverse to reverse the digits of the integer x\n    std::reverse(x_str.begin(),\
    \ x_str.end());\n    // Call rotate to shift the digits of the reversed integer\
    \ x\n    std::rotate(x_str.begin(), x_str.begin() + shift, x_str.end());\n   \
    \ return x_str;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpop2kd59l: /tmp/tmpop2kd59l.cpp:20: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string str = std::to_string(x);\n\
    \  // check if digits are less than shift.\n  if (str.length() < shift) {\n  \
    \  std::reverse(str.begin(), str.end());\n    return str;\n  }\n  // Circularly\
    \ shift str by shift\n  std::rotate(str.begin(), str.begin() + shift, str.end());\n\
    \  return str;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpi42dvdov: /tmp/tmpi42dvdov.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  shift = shift % s.size();\n  if (shift == 0) return s;\n  std::string tmp =\
    \ s.substr(0, s.size() - shift);\n  s = s.substr(s.size() - shift, shift);\n \
    \ s.append(tmp);\n  return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpo6jhru01: /tmp/tmpo6jhru01.cpp:23: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string digits = std::to_string(x);\n\
    \  if (shift > digits.size()) {\n    return std::string(digits.rbegin(), digits.rend());\n\
    \  } else {\n    return digits.substr(shift) + digits.substr(0, shift);\n  }\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpg5z1sz2s: /tmp/tmpg5z1sz2s.cpp:20: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // Make x positive if necessary.\n\
    \  x = abs(x);\n  std::string number_str = std::to_string(x);\n  if (shift > number_str.size())\
    \ {\n    std::reverse(number_str.begin(), number_str.end());\n    return number_str;\n\
    \  }\n  auto temp = number_str.substr(number_str.size() - shift);\n  temp += number_str.substr(0,\
    \ number_str.size() - shift);\n  return temp;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    shift = shift % s.size();\n    std::string result = s.substr(shift) + s.substr(0,\
    \ shift);\n    std::reverse(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpzf230trn: /tmp/tmpzf230trn.cpp:19: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // YOUR CODE HERE\n  std::stringstream\
    \ ss;\n  ss << x;\n  std::string s = ss.str();\n  shift = shift % s.length();\n\
    \  if (shift == 0) {\n    return s;\n  }\n  if (shift > s.length()) {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  std::rotate(s.begin(), s.begin() + shift, s.end());\n\
    \  return s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp7i1e39ri: /tmp/tmp7i1e39ri.cpp:28: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // Write your code here\n\
    \  std::string s = std::to_string(x);\n  if (shift > s.length())\n  {\n    std::reverse(s.begin(),\
    \ s.end());\n    return s;\n  }\n  else\n  {\n    int i = shift;\n    std::string\
    \ str = s.substr(i);\n    std::string str1 = s.substr(0, i);\n    str += str1;\n\
    \    return str;\n  }\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpoffqrixq: /tmp/tmpoffqrixq.cpp:29: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    int n = s.size();\n    // Reverse shift\n    shift = n - shift;\n    // Reverse\
    \ the string\n    for (int i = 0; i < n / 2; i++) {\n        char temp = s[i];\n\
    \        s[i] = s[n - i - 1];\n        s[n - i - 1] = temp;\n    }\n    // Reverse\
    \ the first shift chars\n    for (int i = 0; i < shift / 2; i++) {\n        char\
    \ temp = s[i];\n        s[i] = s[shift - i - 1];\n        s[shift - i - 1] = temp;\n\
    \    }\n    // Reverse the remaining n - shift chars\n    for (int i = shift;\
    \ i < (n + shift) / 2; i++) {\n        char temp = s[i];\n        s[i] = s[n +\
    \ shift - i - 1];\n        s[n + shift - i - 1] = temp;\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpyk3r6cqm: /tmp/tmpyk3r6cqm.cpp:37: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::vector<long> digits;\n\
    \    while (x != 0) {\n        digits.push_back(x % 10);\n        x /= 10;\n \
    \   }\n    long len = digits.size();\n    std::stringstream ss;\n    for (long\
    \ i = (len - shift) % len; i < len; i++) {\n        ss << digits[i];\n    }\n\
    \    for (long i = 0; i < (len - shift) % len; i++) {\n        ss << digits[i];\n\
    \    }\n    return ss.str();\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp1zqpnk6c: /tmp/tmp1zqpnk6c.cpp:28: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  if (x < 0) {\n    return \"\
    \";\n  }\n  std::vector<int> digits;\n  while (x) {\n    digits.push_back(x %\
    \ 10);\n    x /= 10;\n  }\n  if (shift >= digits.size()) {\n    std::reverse(digits.begin(),\
    \ digits.end());\n    return std::accumulate(digits.begin(), digits.end(), std::string(\"\
    \"),\n                           [](std::string a, int b) { return a + std::to_string(b);\
    \ });\n  }\n  std::rotate(digits.begin(), digits.begin() + shift, digits.end());\n\
    \  return std::accumulate(digits.begin(), digits.end(), std::string(\"\"),\n \
    \                        [](std::string a, int b) { return a + std::to_string(b);\
    \ });\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp_p48h2wo: /tmp/tmp_p48h2wo.cpp:30: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string digits = std::to_string(x);\n\
    \  if (shift > digits.size()) {\n    return std::string(digits.rbegin(), digits.rend());\n\
    \  }\n  std::string shifted = digits.substr(shift, digits.size()) +\n        \
    \                digits.substr(0, shift);\n  return shifted;\n}\nint main() {\n\
    \    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmptv32o855: /tmp/tmptv32o855.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    assert(shift >= 0);\n  \
    \  std::string digits = std::to_string(x);\n    std::string shifted_digits;\n\
    \    if (shift < digits.size()) {\n        for (size_t i = shift; i < digits.size();\
    \ i++) {\n            shifted_digits += digits[i];\n        }\n        for (size_t\
    \ i = 0; i < shift; i++) {\n            shifted_digits += digits[i];\n       \
    \ }\n    } else {\n        std::reverse(digits.begin(), digits.end());\n     \
    \   shifted_digits = digits;\n    }\n    return shifted_digits;\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpl1e_qcot: /tmp/tmpl1e_qcot.cpp:29: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift > s.size()) {\n        return std::string(s.rbegin(), s.rend());\n\
    \    } else {\n        shift %= s.size();\n        return s.substr(shift) + s.substr(0,\
    \ shift);\n    }\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpcwpyxexu: /tmp/tmpcwpyxexu.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string x_str = std::to_string(x);\n\
    \  // std::cout << x_str << std::endl;\n  if (shift >= x_str.size()) {\n    std::reverse(x_str.begin(),\
    \ x_str.end());\n    return x_str;\n  }\n  std::rotate(x_str.begin(), x_str.begin()\
    \ + shift, x_str.end());\n  return x_str;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp5mq2gwn9: /tmp/tmp5mq2gwn9.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // reverse the number\n\
    \    std::string number = std::to_string(x);\n    std::reverse(number.begin(),\
    \ number.end());\n    // get the number of digits and circular shift\n    long\
    \ numDigits = number.length();\n    shift = shift % numDigits;\n    // circular\
    \ shift\n    std::string newNumber = number.substr(shift, numDigits - shift) +\
    \ number.substr(0, shift);\n    // reverse the circular shifted number\n    std::reverse(newNumber.begin(),\
    \ newNumber.end());\n    return newNumber;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmputsw5typ: /tmp/tmputsw5typ.cpp:27: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::stringstream ss;\n  ss\
    \ << x;\n  std::string str = ss.str();\n  while (shift >= str.size()) {\n    shift\
    \ -= str.size();\n  }\n  std::stringstream ss2;\n  ss2 << str.substr(shift, str.size()\
    \ - shift)\n      << str.substr(0, shift);\n  return ss2.str();\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp_p3ker7o: /tmp/tmp_p3ker7o.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string value = std::to_string(x);\n\
    \  std::string result = value;\n  // If the shift is longer than the string, return\
    \ the string reversed.\n  if (shift > value.length()) {\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;\n  }\n  std::rotate(result.begin(), result.begin()\
    \ + shift, result.end());\n  return result;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpy_lo43lr: /tmp/tmpy_lo43lr.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string str = std::to_string(x);\n\
    \  std::reverse(str.begin(), str.end());\n  if (shift < str.size()) {\n    return\
    \ str.substr(shift) + str.substr(0, shift);\n  }\n  return str;\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpya5j5p5m: /tmp/tmpya5j5p5m.cpp:20: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // YOUR CODE HERE\n  std::string\
    \ s = std::to_string(x);\n  std::reverse(s.begin(), s.end());\n  std::string ss\
    \ = s.substr(0, shift);\n  std::reverse(ss.begin(), ss.end());\n  return ss +\
    \ s.substr(shift);\n}\nint main() {\n    auto candidate = circular_shift;\n  \
    \  assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 8) > this->size() (which is 2)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tlong i = 1;\n\tstd::string\
    \ s;\n\twhile (x > 0) {\n\t\ts.insert(0, 1, '0' + x % 10);\n\t\tx /= 10;\n\t\t\
    i *= 10;\n\t}\n\tif (shift < i) {\n\t\ti /= 10;\n\t\twhile (shift--) {\n\t\t\t\
    long r = s[0] - '0';\n\t\t\ts.erase(0, 1);\n\t\t\ts.append(1, '0' + r);\n\t\t\
    }\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = circular_shift;\n \
    \   assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpwpm5rjam: /tmp/tmpwpm5rjam.cpp:30: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string result;\n  \
    \  std::stringstream s;\n    // Add code here\n    s << x;\n    result = s.str();\n\
    \    if (shift > result.length()) {\n        return std::string(result.rbegin(),\
    \ result.rend());\n    } else {\n        return result.substr(shift) + result.substr(0,\
    \ shift);\n    }\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp8oefoij6: /tmp/tmp8oefoij6.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // Implement me!\n  std::string\
    \ s = std::to_string(x);\n  std::reverse(s.begin(), s.end());\n  if (shift > s.size())\n\
    \    return s;\n  else {\n    std::string front = s.substr(0, shift);\n    std::string\
    \ end = s.substr(shift, s.size() - shift);\n    return end + front;\n  }\n}\n\
    int main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpbycwht0f: /tmp/tmpbycwht0f.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::vector<int> digits;\n\
    \    while (x > 0) {\n        digits.push_back(x % 10);\n        x /= 10;\n  \
    \  }\n    while (shift > digits.size()) {\n        shift -= digits.size();\n \
    \   }\n    std::reverse(digits.begin(), digits.end());\n    std::rotate(digits.begin(),\
    \ digits.begin() + shift, digits.end());\n    std::stringstream ss;\n    for (const\
    \ auto& d : digits) {\n        ss << d;\n    }\n    return ss.str();\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpalnnbbyw: /tmp/tmpalnnbbyw.cpp:29: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // from left to right\n\
    \    int size = std::to_string(x).size();\n    // rotate from the end of string\n\
    \    shift = shift % size;\n    // rotate reversely\n    int shifted = size -\
    \ shift;\n    std::string str = std::to_string(x);\n    std::reverse(str.begin(),\
    \ str.end());\n    std::reverse(str.begin(), str.begin() + shifted);\n    std::reverse(str.begin()\
    \ + shifted, str.end());\n    return str;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpue1mo3yw: /tmp/tmpue1mo3yw.cpp:25: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::stringstream ss;\n\t\
    long digits = 0;\n\tlong d = x;\n\twhile (d) {\n\t\td /= 10;\n\t\tdigits++;\n\t\
    }\n\tss << x;\n\tstd::string s = ss.str();\n\tif (shift > digits) {\n\t\tstd::reverse(s.begin(),\
    \ s.end());\n\t\treturn s;\n\t}\n\tshift = shift % digits;\n\tfor (int i = 0;\
    \ i < shift; i++) {\n\t\tchar c = s[s.size() - 1];\n\t\ts.erase(s.end() - 1);\n\
    \t\ts.insert(s.begin(), c);\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  std::reverse(s.begin(), s.end());\n  std::string a = s.substr(0, shift);\n\
    \  std::string b = s.substr(shift);\n  return b + a;\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpwqp8qcyh: /tmp/tmpwqp8qcyh.cpp:19: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // Convert to string.\n  std::string\
    \ s = std::to_string(x);\n  // If shift > number of digits, reverse the string\
    \ and return it.\n  if (shift > s.size()) return std::string(s.rbegin(), s.rend());\n\
    \  // Circular shift the string.\n  std::rotate(s.begin(), s.begin() + s.size()\
    \ - shift, s.end());\n  return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string digits = std::to_string(x);\n\
    \    if (shift > digits.size()) {\n        return std::string(digits.rbegin(),\
    \ digits.rend());\n    }\n    return digits.substr(shift) + digits.substr(0, shift);\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpztdwfp24: /tmp/tmpztdwfp24.cpp:19: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::string s = std::to_string(x);\n\
    \tif (shift >= s.size())\n\t\treturn std::string(s.rbegin(), s.rend());\n\treturn\
    \ s.substr(shift) + s.substr(0, shift);\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpu9_2mqe5: /tmp/tmpu9_2mqe5.cpp:18: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::stringstream ss;\n  long\
    \ num_digits = std::log10(x) + 1;\n  shift = shift % num_digits;\n  if (shift\
    \ == 0) {\n    ss << x;\n    return ss.str();\n  }\n  // If shifted more than\
    \ number of digits, reverse and return\n  if (shift > num_digits) {\n    std::string\
    \ s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n    return s;\n\
    \  }\n  std::string s = std::to_string(x);\n  std::string prefix = s.substr(0,\
    \ shift);\n  std::string suffix = s.substr(shift, num_digits - shift);\n  ss <<\
    \ suffix << prefix;\n  return ss.str();\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmprrfw7zme: /tmp/tmprrfw7zme.cpp:32: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // Assume shift is always\
    \ < x.size()\n    std::string ret_val;\n    std::string temp = std::to_string(x);\n\
    \    ret_val = temp.substr(shift, temp.size() - shift);\n    ret_val += temp.substr(0,\
    \ shift);\n    return ret_val;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp5iv8ysex: /tmp/tmp5iv8ysex.cpp:20: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string a = std::to_string(x);\n\
    \  if (shift > a.size()) {\n    std::reverse(a.begin(), a.end());\n    return\
    \ a;\n  }\n  else {\n    std::rotate(a.begin(), a.begin() + shift, a.end());\n\
    \    return a;\n  }\n}\nint main() {\n    auto candidate = circular_shift;\n \
    \   assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpam7rc5f5: /tmp/tmpam7rc5f5.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    assert(shift >= 0);\n  \
    \  std::string s = std::to_string(x);\n    if (shift > s.size())\n        return\
    \ std::string(s.rbegin(), s.rend());\n    return s.substr(shift) + s.substr(0,\
    \ shift);\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpsxf9log9: /tmp/tmpsxf9log9.cpp:19: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::string strx = std::to_string(x);\n\
    \tif (shift > strx.length()) {\n\t\tstd::reverse(strx.begin(), strx.end());\n\t\
    \treturn strx;\n\t}\n\telse {\n\t\tstd::string tmp = strx.substr(strx.length()\
    \ - shift, shift);\n\t\tstrx.erase(strx.length() - shift, shift);\n\t\tstrx.insert(0,\
    \ tmp);\n\t\treturn strx;\n\t}\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string num = std::to_string(x);\n\
    \    std::string rev = \"\";\n    for (long i = num.length() - 1; i >= 0; i--)\
    \ {\n        rev += num[i];\n    }\n    if (shift > num.length()) {\n        return\
    \ rev;\n    }\n    return rev.substr(0, num.length() - shift) + num.substr(num.length()\
    \ - shift, shift) + rev.substr(num.length() - shift);\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpfhh1srbh: /tmp/tmpfhh1srbh.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string result = std::to_string(x);\n\
    \    if (shift > result.size()) {\n        return std::string(result.rbegin(),\
    \ result.rend());\n    }\n    std::rotate(result.begin(), result.begin() + shift,\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpnc__l0xe: /tmp/tmpnc__l0xe.cpp:20: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\t// Compute the length of the\
    \ string needed to store the integer digits.\n\tlong len = log10(x) + 1;\n\t//\
    \ Extract each digit of the integer x by repeatedly dividing by 10 and\n\t// using\
    \ the remainder as the next digit.\n\tstd::string s;\n\tfor (long i = 0; i < len;\
    \ i++) {\n\t\tlong x_digit = x % 10;\n\t\ts += std::to_string(x_digit);\n\t\t\
    x /= 10;\n\t}\n\t// If the shift is greater than the number of digits, reverse\
    \ the digits.\n\tif (shift > len) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\
    }\n\t// Otherwise, circular shift the digits right.\n\telse {\n\t\t// Insert the\
    \ digits at the end of the string into the beginning.\n\t\tstd::rotate(s.begin(),\
    \ s.begin() + len - shift, s.end());\n\t}\n\treturn s;\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpz78t7j0a: /tmp/tmpz78t7j0a.cpp:34: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::stringstream stringstream;\n\
    \    stringstream << x;\n    std::string str_x = stringstream.str();\n    // Split\
    \ the string\n    std::string left = str_x.substr(shift);\n    std::string right\
    \ = str_x.substr(0, shift);\n    return left + right;\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpbmm4hh46: /tmp/tmpbmm4hh46.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    std::string res = \"\";\n    int len = str.length();\n    if (shift >= len)\
    \ {\n        for (int i = len - 1; i >= 0; i--) {\n            res += str[i];\n\
    \        }\n        return res;\n    }\n    else {\n        std::string front\
    \ = str.substr(len - shift, shift);\n        std::string back = str.substr(0,\
    \ len - shift);\n        res = front + back;\n        return res;\n    }\n}\n\
    int main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpqw6zdfah: /tmp/tmpqw6zdfah.cpp:30: int main(): Assertion `candidate((12),\
    \ (2)) == (\"12\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    //std::vector<int> digits;\n\
    \    int digits[(int) log10(x) + 1];\n    int tmp_x = x;\n    int digit_cnt =\
    \ 0;\n    while (tmp_x != 0) {\n        digits[digit_cnt] = tmp_x % 10;\n    \
    \    tmp_x /= 10;\n        digit_cnt++;\n    }\n    shift %= digit_cnt;\n    std::string\
    \ res;\n    for (int i = 0; i < digit_cnt; i++) {\n        res += std::to_string(digits[(i\
    \ + shift) % digit_cnt]);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpg7oha6h7: /tmp/tmpg7oha6h7.cpp:29: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::stringstream ss;\n\
    \    ss << x;\n    std::string s = ss.str();\n    std::rotate(s.begin(), s.begin()\
    \ + (s.size() - shift), s.end());\n    return s;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpyz38azni: /tmp/tmpyz38azni.cpp:21: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  long len = s.length();\n  shift = shift % len;\n  if (shift > 0) {\n    std::string\
    \ temp = s.substr(len - shift, shift);\n    s = s.substr(0, len - shift);\n  \
    \  s = temp + s;\n  }\n  return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpz3dkoe7m: /tmp/tmpz3dkoe7m.cpp:25: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::string str_x = std::to_string(x);\n\
    \tif (shift < 0)\n\t\tshift = -shift;\n\t//std::cout << shift << \"\\n\";\n\t\
    if (shift > str_x.length()) {\n\t\treverse(str_x.begin(), str_x.end());\n\t\t\
    return str_x;\n\t}\n\n\tstd::string new_str_x = str_x.substr(str_x.length() -\
    \ shift, shift);\n\tnew_str_x += str_x.substr(0, str_x.length() - shift);\n\t\
    return new_str_x;\n}\nint main() {\n    auto candidate = circular_shift;\n   \
    \ assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\t// Do your work here.\n\n\t\
    int n = std::to_string(x).length();\n\tstd::string result;\n\tint arr[n];\n\t\
    int i;\n\tint index = n - shift;\n\tif (shift >= n) {\n\t\tstd::string result1\
    \ = std::to_string(x);\n\t\tstd::reverse(result1.begin(), result1.end());\n\t\t\
    return result1;\n\t} else {\n\t\tfor (i = 0; i < n; i++) {\n\t\t\tarr[i] = x %\
    \ 10;\n\t\t\tx = x / 10;\n\t\t}\n\t\tfor (i = 0; i < n; i++) {\n\t\t\tresult =\
    \ result + std::to_string(arr[index]);\n\t\t\tindex++;\n\t\t\tif (index >= n)\
    \ {\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp0m7qo4w6: /tmp/tmp0m7qo4w6.cpp:39: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string ret = std::to_string(x);\n\
    \    if (shift >= ret.size())\n        return std::string(ret.rbegin(), ret.rend());\n\
    \    std::rotate(ret.begin(), ret.begin() + shift, ret.end());\n    return ret;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmplqqihq98: /tmp/tmplqqihq98.cpp:19: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // Implement this placeholder.\n\
    \    return \"\";\n}\nint main() {\n    auto candidate = circular_shift;\n   \
    \ assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpsgl8mvm6: /tmp/tmpsgl8mvm6.cpp:16: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  long ndigits = 0;\n  long\
    \ n = x;\n  while (n > 0) {\n    ndigits += 1;\n    n /= 10;\n  }\n  if (shift\
    \ > ndigits) {\n    shift = ndigits;\n  }\n  long ten_pow = 1;\n  for (long i\
    \ = 0; i < ndigits - shift; i++) {\n    ten_pow *= 10;\n  }\n  long bottom = x\
    \ % ten_pow;\n  long top = x / ten_pow;\n  std::string ret = std::to_string(bottom)\
    \ + std::to_string(top);\n  return ret;\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp5nrsd6vf: /tmp/tmp5nrsd6vf.cpp:31: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    char *str = new char[20];\n\
    \    sprintf(str, \"%ld\", x);\n    char *tmp = new char[20];\n    strcpy(tmp,\
    \ str);\n    long len = strlen(str);\n    if (shift >= len) {\n        reverse(str,\
    \ str + len);\n        std::string res(str);\n        delete[] str;\n        delete[]\
    \ tmp;\n        return res;\n    }\n    reverse(str, str + len);\n    reverse(str,\
    \ str + shift);\n    reverse(str + shift, str + len);\n    std::string res(str);\n\
    \    delete[] str;\n    delete[] tmp;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8zvj91up.cpp: In function \u2018std::string circular_shift(long\
    \ int, long int)\u2019:\n/tmp/tmp8zvj91up.cpp:17:9: error: \u2018reverse\u2019\
    \ was not declared in this scope; did you mean \u2018std::reverse\u2019?\n   17\
    \ |         reverse(str, str + len);\n      |         ^~~~~~~\n      |       \
    \  std::reverse\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8zvj91up.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:1180:5:\
    \ note: \u2018std::reverse\u2019 declared here\n 1180 |     reverse(_BidirectionalIterator\
    \ __first, _BidirectionalIterator __last)\n      |     ^~~~~~~\n/tmp/tmp8zvj91up.cpp:23:5:\
    \ error: \u2018reverse\u2019 was not declared in this scope; did you mean \u2018\
    std::reverse\u2019?\n   23 |     reverse(str, str + len);\n      |     ^~~~~~~\n\
    \      |     std::reverse\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8zvj91up.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:1180:5:\
    \ note: \u2018std::reverse\u2019 declared here\n 1180 |     reverse(_BidirectionalIterator\
    \ __first, _BidirectionalIterator __last)\n      |     ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::string s = std::to_string(x);\n\
    \tstd::string answer = \"\";\n\tif (shift > s.length()) {\n\t\t// reverse digits\n\
    \t\tstd::string temp = \"\";\n\t\tfor (int i = s.length() - 1; i >= 0; i--) {\n\
    \t\t\ttemp += s[i];\n\t\t}\n\t\tanswer = temp;\n\t}\n\telse {\n\t\tanswer = s.substr(shift)\
    \ + s.substr(0, shift);\n\t}\n\treturn answer;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpb70sq3gv: /tmp/tmpb70sq3gv.cpp:28: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::vector<int> v;\n  long\
    \ n = x;\n  while (n != 0) {\n    v.push_back(n % 10);\n    n /= 10;\n  }\n  shift\
    \ %= v.size();\n  std::reverse(v.begin(), v.end());\n  std::reverse(v.begin(),\
    \ v.begin() + shift);\n  std::reverse(v.begin() + shift, v.end());\n  std::string\
    \ ret;\n  for (auto i : v) {\n    ret += i + '0';\n  }\n  return ret;\n}\nint\
    \ main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpua54hwx1: /tmp/tmpua54hwx1.cpp:29: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    long digits = 0;\n    long\
    \ tmp = x;\n    std::string res = \"\";\n    long rem;\n    if (x == 0) {\n  \
    \      return \"0\";\n    }\n    while (tmp != 0) {\n        tmp /= 10;\n    \
    \    digits++;\n    }\n    while (x != 0) {\n        rem = x % 10;\n        x\
    \ /= 10;\n        res += rem + '0';\n    }\n    if (shift > digits) {\n      \
    \  std::reverse(res.begin(), res.end());\n        return res;\n    }\n    std::rotate(res.begin(),\
    \ res.begin() + shift, res.end());\n    return res;\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpucooapo4: /tmp/tmpucooapo4.cpp:36: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string result = std::to_string(x);\n\
    \  if (shift > result.size()) {\n    std::reverse(result.begin(), result.end());\n\
    \    return result;\n  }\n  std::rotate(result.begin(), result.begin() + shift,\
    \ result.end());\n  return result;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpwn8n815b: /tmp/tmpwn8n815b.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    if (x == 0) {\n        return\
    \ \"0\";\n    }\n    // Get the number of digits.\n    std::string x_str = std::to_string(x);\n\
    \    long digits = x_str.size();\n    if (shift >= digits) {\n        // Reverse\
    \ the string.\n        std::reverse(x_str.begin(), x_str.end());\n        return\
    \ x_str;\n    }\n    // Split the string into two parts using the shift number\
    \ as the index.\n    std::string x_str_1 = x_str.substr(0, shift);\n    std::string\
    \ x_str_2 = x_str.substr(shift, digits);\n    // Reverse the first part, then\
    \ concatenate it with the second part.\n    std::reverse(x_str_1.begin(), x_str_1.end());\n\
    \    return x_str_1 + x_str_2;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpwq2r7q7x: /tmp/tmpwq2r7q7x.cpp:31: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\t// Type here\n\tstd::string\
    \ y = std::to_string(x);\n\twhile (shift > 0) {\n\t\tchar temp = y[y.length()\
    \ - 1];\n\t\tfor (int i = y.length() - 1; i > 0; i--) {\n\t\t\ty[i] = y[i - 1];\n\
    \t\t}\n\t\ty[0] = temp;\n\t\tshift--;\n\t}\n\treturn y;\n}\nint main() {\n   \
    \ auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"\
    ));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpliwxrocd: /tmp/tmpliwxrocd.cpp:27: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    assert(shift >= 0);\n  \
    \  std::string num = std::to_string(x);\n    std::reverse(num.begin(), num.end());\n\
    \    std::stringstream ss;\n    for (int i = 0; i < shift; i++) {\n        ss\
    \ << num[i];\n    }\n    std::string str = num.substr(shift, num.size() - shift);\n\
    \    str += ss.str();\n    std::reverse(str.begin(), str.end());\n    return str;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 8) > this->size() (which is 2)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // ENTER CODE HERE\n   \
    \ long temp = x;\n    std::string num;\n    std::string str;\n    while(temp !=\
    \ 0){\n        num.push_back(temp%10 + '0');\n        temp /= 10;\n    }\n   \
    \ std::reverse(num.begin(), num.end());\n    if(shift >= num.size()){\n      \
    \  std::reverse(num.begin(), num.end());\n        return num;\n    }\n    for(int\
    \ i = shift; i < num.size(); i++){\n        str.push_back(num[i]);\n    }\n  \
    \  for(int i = 0; i < shift; i++){\n        str.push_back(num[i]);\n    }\n  \
    \  return str;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpzu8kjlor: /tmp/tmpzu8kjlor.cpp:34: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string result;\n  \
    \  std::stringstream ss;\n    ss << x;\n    std::string str = ss.str();\n    long\
    \ digits = str.length();\n    if (shift >= digits) {\n        for (long i = digits\
    \ - 1; i >= 0; i--) {\n            result += str[i];\n        }\n    } else {\n\
    \        for (long i = shift; i < digits; i++) {\n            result += str[i];\n\
    \        }\n        for (long i = 0; i < shift; i++) {\n            result +=\
    \ str[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmptztjwqzd: /tmp/tmptztjwqzd.cpp:32: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tif (x < 10) {\n\t\treturn\
    \ std::to_string(x);\n\t}\n\tlong length = log10(x) + 1;\n\tshift = shift % length;\n\
    \tstd::string str = std::to_string(x);\n\tif (shift > 0) {\n\t\tstd::rotate(str.begin(),\
    \ str.begin() + shift, str.end());\n\t}\n\telse {\n\t\tstd::reverse(str.begin(),\
    \ str.end());\n\t}\n\treturn str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpc5n3dahl: /tmp/tmpc5n3dahl.cpp:27: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n   std::string str = std::to_string(x);\n\
    \   std::reverse(str.begin(), str.end());\n   std::string str2 = str.substr(0,\
    \ shift);\n   std::reverse(str2.begin(), str2.end());\n   str = str.substr(shift,\
    \ str.size() - shift);\n   str = str + str2;\n   std::reverse(str.begin(), str.end());\n\
    \   return str;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpnazs5vs3: /tmp/tmpnazs5vs3.cpp:23: int main(): Assertion `candidate((12),\
    \ (2)) == (\"12\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\tstd::string answer = \"\"\
    ;\n\tlong length = log10(x) + 1;\n\tlong index = 0;\n\twhile (x != 0) {\n\t\t\
    long digit = x % 10;\n\t\tif (index == shift) {\n\t\t\tanswer = std::to_string(digit)\
    \ + answer;\n\t\t}\n\t\telse {\n\t\t\tanswer = answer + std::to_string(digit);\n\
    \t\t}\n\t\tindex++;\n\t\tx = x / 10;\n\t}\n\tif (index < shift) {\n\t\tstd::reverse(answer.begin(),\
    \ answer.end());\n\t}\n\treturn answer;\n}\nint main() {\n    auto candidate =\
    \ circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp4s83vjwu: /tmp/tmp4s83vjwu.cpp:32: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // YOUR CODE HERE\n    std::string\
    \ str = std::to_string(x);\n    //std::cout << \"str \" << str << \" shift \"\
    \ << shift << std::endl;\n    long len = str.length();\n    if (shift > len) {\n\
    \        std::reverse(str.begin(), str.end());\n        return str;\n    }\n \
    \   long tail = shift % len;\n    std::string new_str = str.substr(tail, len-tail);\n\
    \    new_str.append(str.substr(0, tail));\n    return new_str;\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp0h3sys0j: /tmp/tmp0h3sys0j.cpp:26: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string x_str = std::to_string(x);\n\
    \  long num_digits = x_str.length();\n  if (shift >= num_digits) {\n    std::reverse(x_str.begin(),\
    \ x_str.end());\n    return x_str;\n  }\n  std::string first_str = x_str.substr(0,\
    \ shift);\n  std::string second_str = x_str.substr(shift, num_digits - shift);\n\
    \  return second_str + first_str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmppdujye1x: /tmp/tmppdujye1x.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string num = std::to_string(x);\n\
    \  std::rotate(num.begin(), num.begin() + shift, num.end());\n  return num;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpm5mosv79: /tmp/tmpm5mosv79.cpp:17: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    if (shift > str.length()) {\n        return std::string(str.rbegin(), str.rend());\n\
    \    }\n    return str.substr(shift) + str.substr(0, shift);\n}\nint main() {\n\
    \    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"\
    001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp6nc7mdn3: /tmp/tmp6nc7mdn3.cpp:19: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  // Implement here\n  std::string\
    \ str;\n  std::string s = std::to_string(x);\n  long len = s.length();\n  long\
    \ size = 0;\n  if(shift >= len) {\n    size = shift - len;\n    long i = len-1;\n\
    \    while(i>=0) {\n      str += s[i];\n      i--;\n    }\n  }\n  else {\n   \
    \ size = shift;\n    long i = len-1;\n    while(i>=0) {\n      str += s[i];\n\
    \      i--;\n    }\n  }\n  str = str.substr(len-size, len);\n  for(long i=0; i<len-size;\
    \ i++) {\n    str += s[i];\n  }\n  return str;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp8io6t2jk: /tmp/tmp8io6t2jk.cpp:40: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string s = std::to_string(x);\n\
    \  long n = s.size();\n  std::string t;\n  for (long i = shift; i < n; i++) {\n\
    \    t.push_back(s[i]);\n  }\n  for (long i = 0; i < shift; i++) {\n    t.push_back(s[i]);\n\
    \  }\n  return t;\n}\nint main() {\n    auto candidate = circular_shift;\n   \
    \ assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpxuyj1cm3: /tmp/tmpxuyj1cm3.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::stringstream ss;\n  ss\
    \ << x;\n  std::string str = ss.str();\n  if (shift > str.size()) {\n    std::reverse(str.begin(),\
    \ str.end());\n    return str;\n  }\n  shift = shift % str.size();\n  str = str.substr(shift)\
    \ + str.substr(0, shift);\n  return str;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmphcvodkfk: /tmp/tmphcvodkfk.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    int length = std::to_string(x).length();\n\
    \    if (shift > length) {\n        return std::string(std::to_string(x).rbegin(),\
    \ std::to_string(x).rend());\n    }\n    int firstDigitIndex = length - shift;\n\
    \    std::string result = std::to_string(x).substr(firstDigitIndex, length - firstDigitIndex);\n\
    \    result += std::to_string(x).substr(0, firstDigitIndex);\n    return result;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp1lkiql_u: /tmp/tmp1lkiql_u.cpp:24: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string str = std::to_string(x);\n\
    \  if (shift >= str.size()) {\n    std::reverse(str.begin(), str.end());\n   \
    \ return str;\n  }\n  shift = shift % str.size();\n  std::rotate(str.begin(),\
    \ str.begin() + shift, str.end());\n  return str;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpdb9q1ulj: /tmp/tmpdb9q1ulj.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string str = std::to_string(x);\n\
    \    int n = str.length();\n    if (shift > n) {\n        for (int i = 0; i <\
    \ n/2; i++) {\n            std::swap(str[i], str[n-i-1]);\n        }\n       \
    \ return str;\n    }\n    int i = n - shift;\n    return str.substr(i, n-i) +\
    \ str.substr(0, i);\n}\nint main() {\n    auto candidate = circular_shift;\n \
    \   assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        std::reverse(s.begin(), s.end());\n   \
    \     return s;\n    }\n    return s.substr(shift) + s.substr(0, shift);\n}\n\
    int main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpx2f39mdg: /tmp/tmpx2f39mdg.cpp:20: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::string result = \"\";\n    long length = s.length();\n    while (shift\
    \ > length) {\n        shift -= length;\n    }\n    if (shift == length) {\n \
    \       return s;\n    }\n    for (long i = length - shift; i < length; i++) {\n\
    \        result += s[i];\n    }\n    for (long i = 0; i < length - shift; i++)\
    \ {\n        result += s[i];\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"\
    ));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpys1c_t3h: /tmp/tmpys1c_t3h.cpp:32: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    return s.substr(shift,s.length()-shift) + s.substr(0,shift);\n}\nint main()\
    \ {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) ==\
    \ (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpu4oca1o3: /tmp/tmpu4oca1o3.cpp:16: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    int num_digits = std::floor(std::log10(x))\
    \ + 1;\n    if (shift > num_digits) {\n        std::string s = std::to_string(x);\n\
    \        std::reverse(s.begin(), s.end());\n        return s;\n    } else {\n\
    \        long power = static_cast<long>(std::pow(10, shift));\n        long div\
    \ = x / power;\n        long rem = x % power;\n        return std::to_string(rem)\
    \ + std::to_string(div);\n    }\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpqqntjs3p: /tmp/tmpqqntjs3p.cpp:25: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    long n = s.size();\n    if (shift > n) {\n        shift = shift % n;\n  \
    \  }\n    std::string xs = s;\n    for (long i = 0; i < n; i++) {\n        xs[i]\
    \ = s[(i + shift) % n];\n    }\n    return xs;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpnx_ve1rp: /tmp/tmpnx_ve1rp.cpp:24: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    std::string r = s.substr(0, shift);\n\
    \    std::reverse(r.begin(), r.end());\n    s = s.substr(shift, s.size() - shift);\n\
    \    s = s + r;\n    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp65jgs807: /tmp/tmp65jgs807.cpp:21: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    assert(shift >= 0);\n  \
    \  if (x == 0) return \"0\";\n    int num_digits = 0;\n    long xx = x;\n    while\
    \ (xx != 0) {\n        num_digits++;\n        xx /= 10;\n    }\n    xx = x;\n\
    \    std::string a;\n    while (xx != 0) {\n        a.push_back('0' + xx % 10);\n\
    \        xx /= 10;\n    }\n    if (shift >= num_digits) {\n        reverse(a.begin(),\
    \ a.end());\n        return a;\n    }\n    else {\n        std::rotate(a.begin(),\
    \ a.begin() + num_digits - shift, a.end());\n        return a;\n    }\n}\nint\
    \ main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpvmt3etbf: /tmp/tmpvmt3etbf.cpp:36: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    // TODO: implement this\
    \ function\n    long number = x;\n    std::string res = \"\";\n    std::stack<long>\
    \ temp;\n    while(number != 0){\n        temp.push(number % 10);\n        number\
    \ /= 10;\n    }\n    while(shift > 0){\n        temp.push(temp.top());\n     \
    \   temp.pop();\n        shift--;\n    }\n    while(!temp.empty()){\n        res\
    \ += std::to_string(temp.top());\n        temp.pop();\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpuue2bw8a: /tmp/tmpuue2bw8a.cpp:32: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    std::reverse(s.begin(), s.end());\n    shift = shift % s.size();\n    std::string\
    \ t;\n    for (int i = 0; i < shift; i++) {\n        t += s[i];\n    }\n    s\
    \ += t;\n    return s.substr(shift);\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpfs0hhzml: /tmp/tmpfs0hhzml.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  std::string str = std::to_string(x);\n\
    \  if (shift > str.size()) {\n    std::reverse(str.begin(), str.end());\n    return\
    \ str;\n  }\n  str = str.substr(str.size() - shift) + str.substr(0, str.size()\
    \ - shift);\n  return str;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n  int num_digits = std::floor(std::log10(x))\
    \ + 1;\n  if (shift > num_digits) {\n    return std::to_string(std::stoi(std::to_string(x)));\n\
    \  }\n  std::string str = std::to_string(x);\n  return str.substr(num_digits -\
    \ shift, shift) + str.substr(0, num_digits - shift);\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpdszjyjxh: /tmp/tmpdszjyjxh.cpp:22: int main(): Assertion `candidate((97),\
    \ (8)) == (\"79\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    assert(shift > 0);\n   \
    \ std::string s = std::to_string(x);\n    std::reverse(s.begin(), s.end());\n\
    \    for (long i = 0; i < shift; i++) {\n        char c = s.back();\n        s.pop_back();\n\
    \        s.insert(s.begin(), c);\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n\
    \    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8))\
    \ == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmpdof6dzl6: /tmp/tmpdof6dzl6.cpp:23: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    assert(shift > 0);\n   \
    \ std::string x_str = std::to_string(x);\n    if (shift > x_str.size()) {\n  \
    \      std::reverse(x_str.begin(), x_str.end());\n        return x_str;\n    }\n\
    \    std::string x_shifted = x_str.substr(x_str.size() - shift) + x_str.substr(0,\
    \ x_str.size() - shift);\n    return x_shifted;\n}\nint main() {\n    auto candidate\
    \ = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12),\
    \ (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n\
    \    if (shift >= s.size()) {\n        reverse(s.begin(), s.end());\n        return\
    \ s;\n    }\n    auto it = s.begin() + shift;\n    std::rotate(s.begin(), it,\
    \ s.end());\n    return s;\n}\nint main() {\n    auto candidate = circular_shift;\n\
    \    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2))\
    \ == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12),\
    \ (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp015dfwx9: /tmp/tmp015dfwx9.cpp:22: int main(): Assertion `candidate((100),\
    \ (2)) == (\"001\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n// and return the result\
    \ as a string.\n// If shift > number of digits, return digits reversed.\n// >>>\
    \ circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\n\
    std::string circular_shift(long x, long shift) {\n\t// edge case, nothing happens\n\
    \tif (shift == 0) return std::to_string(x);\n\tstd::string s = std::to_string(x);\n\
    \t// if shift is greater than number of digits, just reverse.\n\tif (shift >=\
    \ s.length()) {\n\t\tstd::reverse(s.begin(), s.end());\n\t\treturn s;\n\t}\n\t\
    // shift right\n\tstd::rotate(s.begin(), s.begin() + s.length() - shift, s.end());\n\
    \treturn s;\n}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100),\
    \ (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97),\
    \ (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11),\
    \ (101)) == (\"11\"));\n}\n"
  stdout: ''
  stderr: "tmp3ma0q_08: /tmp/tmp3ma0q_08.cpp:26: int main(): Assertion `candidate((12),\
    \ (2)) == (\"12\")' failed.\n"
  exit_code: -6
  status: Exception
