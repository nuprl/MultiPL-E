name: HumanEval_103_rounded_avg
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n\
  \    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0)\
  \ {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long()\
  \ {}\n    bool operator==(Union_std_string_long u2) {\n        return f0 == u2.f0\
  \ || f1 == u2.f1 ;\n    }\n};\n// You are given two positive integers n and m, and\
  \ your task is to compute the\n// average of the integers from n through m (including\
  \ n and m). \n// Round the answer to the nearest integer and convert that to binary.\n\
  // If n is greater than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\
  \n// rounded_avg(7, 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20,\
  \ 33) => \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\n"
tests: "}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1),\
  \ (5)) == (Union_std_string_long(\"0b11\")));\n    assert(candidate((7), (13)) ==\
  \ (Union_std_string_long(\"0b1010\")));\n    assert(candidate((964), (977)) == (Union_std_string_long(\"\
  0b1111001010\")));\n    assert(candidate((996), (997)) == (Union_std_string_long(\"\
  0b1111100100\")));\n    assert(candidate((560), (851)) == (Union_std_string_long(\"\
  0b1011000010\")));\n    assert(candidate((185), (546)) == (Union_std_string_long(\"\
  0b101101110\")));\n    assert(candidate((362), (496)) == (Union_std_string_long(\"\
  0b110101101\")));\n    assert(candidate((350), (902)) == (Union_std_string_long(\"\
  0b1001110010\")));\n    assert(candidate((197), (233)) == (Union_std_string_long(\"\
  0b11010111\")));\n    assert(candidate((7), (5)) == (Union_std_string_long(-1)));\n\
  \    assert(candidate((5), (1)) == (Union_std_string_long(-1)));\n    assert(candidate((5),\
  \ (5)) == (Union_std_string_long(\"0b101\")));\n}\n"
completions: ["    if (n > m) {\n        return Union_std_string_long((long)-1);\n\
    \    }\n    long mean = (n + m) / 2;\n    Union_std_string_long Union_std_string_long_out1;\n\
    \    std::string result;\n    while (mean != 0) {\n        result = ((mean % 2)\
    \ == 0 ? \"0\" : \"1\") + result;\n        mean /= 2;\n    }\n    Union_std_string_long_out1\
    \ = std::string(\"0b\" + result);\n    return Union_std_string_long_out1;", " \
    \   // BEGIN SOLUTION\n    // not sure if we can use the std::stof, std::stoi\
    \ and std::to_string\n    // functions in the tests.\n    // I will use the assert\
    \ function to check that everything is fine.\n    assert(n>0);\n    assert(m>0);\n\
    \    int average = (n+m)/2;\n    std::string binaryAverage = std::bitset<32>(average).to_string();\n\
    \    return Union_std_string_long(binaryAverage);\n    // END SOLUTION", "   \
    \ if (n > m) {\n        return -1;\n    }\n    float sum = 0;\n    for (int i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    float average = round(sum\
    \ / (m - n + 1));\n    std::string s;\n    while (average > 0) {\n        s +=\
    \ std::to_string(average % 2);\n        average /= 2;\n    }\n    s += \"0b\"\
    ;\n    std::reverse(s.begin(), s.end());\n    return s;", "    int counter = 0;\n\
    \    int sum = 0;\n    while(m >= n){\n        sum += n;\n        counter++;\n\
    \        n++;\n    }\n    if(counter == 0){\n        return -1;\n    }\n    std::string\
    \ binary = std::bitset<32>(sum/counter).to_string();\n    return std::stoi(binary,nullptr,2);",
  "    if (n > m) return -1;\n    int sum = 0;\n    for (long i = n; i <= m; i++)\
    \ {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n    std::string\
    \ result = \"0b\";\n    while (avg > 0) {\n        result = std::to_string(avg\
    \ % 2) + result;\n        avg /= 2;\n    }\n    return result;", "    if ( n >\
    \ m ) {\n        return Union_std_string_long(-1);\n    }\n    double sum = n;\n\
    \    double count = 1;\n    for ( long i = n + 1; i <= m; i++ ) {\n        sum\
    \ += i;\n        count++;\n    }\n    long avg = std::lround( sum / count );\n\
    \    std::stringstream ss;\n    ss << std::bitset< 64 >( avg );\n    return Union_std_string_long(\
    \ \"0b\" + ss.str() );", "    Union_std_string_long r = Union_std_string_long(std::string(\"\
    0b0\"));\n    if (n > m) {\n        r = Union_std_string_long(long(-1));\n   \
    \ } else {\n        long sum = n;\n        for (long i = n + 1; i <= m; i++) {\n\
    \            sum += i;\n        }\n        r = Union_std_string_long(std::string(\"\
    0b\") + std::bitset<16>(sum / (m - n + 1)).to_string());\n    }\n    return r;",
  '    return Union_std_string_long(m);', '    return "Replace this string with your
    implementation.";', '    return "Replace this string with your implementation.";',
  "    Union_std_string_long r;\n    return r;", "    if (n>m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (int i=n; i<=m; i++) {\n        sum += i;\n\
    \    }\n    long res = (int)round((float)sum/(m-n+1));\n    std::string bina =\
    \ std::bitset<64>(res).to_string();\n    return Union_std_string_long(\"0b\"+bina.substr(bina.find('1'),\
    \ std::string::npos));", "    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long avg = sum / (m - n + 1);\n    std::string ans = \"0b\";\n\
    \    std::string str = \"\";\n    while (avg != 0) {\n        if (avg % 2 == 0)\
    \ {\n            str += \"0\";\n        } else {\n            str += \"1\";\n\
    \        }\n        avg /= 2;\n    }\n    for (int i = str.size() - 1; i >= 0;\
    \ i--) {\n        ans += str[i];\n    }\n    return Union_std_string_long(ans);",
  "  if (n > m) {\n    return Union_std_string_long(long(-1));\n  } else {\n    int\
    \ sum = 0;\n    int num = 0;\n    for (int i = n; i <= m; i++) {\n      sum +=\
    \ i;\n      num++;\n    }\n    int avg = sum / num;\n    std::string res = \"\
    0b\";\n    while (avg > 0) {\n      res += std::to_string(avg % 2);\n      avg\
    \ /= 2;\n    }\n    std::reverse(res.begin(), res.end());\n    return Union_std_string_long(res);\n\
    \  }", "    long r = (n + m)/2;\n    long n2 = floor(log2(r));\n    std::string\
    \ result = \"0b\";\n    for (int i = n2; i >= 0; i--) {\n        long p = pow(2,\
    \ i);\n        result.append(r / p ? \"1\" : \"0\");\n        r %= p;\n    }\n\
    \    return Union_std_string_long(result);", "    if (n > m) {\n        return\
    \ Union_std_string_long(-1);\n    }\n    int count = m - n + 1;\n    int sum =\
    \ 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int result\
    \ = sum / count;\n    if (sum % count >= count / 2) {\n        result += 1;\n\
    \    }\n    std::string result_s = \"0b\";\n    while (result != 0) {\n      \
    \  result_s = std::to_string(result % 2) + result_s;\n        result /= 2;\n \
    \   }\n    return Union_std_string_long(result_s);", "    if (n > m) {\n     \
    \   return Union_std_string_long(-1L);\n    }\n    long avg = (n + m) / 2;\n \
    \   std::string binary = std::bitset<16>(avg).to_string();\n    return Union_std_string_long(\"\
    0b\" + binary);", "  // REPLACE WITH YOUR CODE\n    if(n > m)\n    {\n       \
    \ return Union_std_string_long(\"-1\");\n    }\n    int sum = 0;\n    for(int\
    \ i = n; i <= m; i++)\n    {\n        sum += i;\n    }\n    int avg = (int)round((double)sum/(m-n+1));\n\
    \    std::string s = \"0b\";\n    while(avg > 0)\n    {\n        if(avg & 1)\n\
    \        {\n            s = \"1\" + s;\n        }\n        else\n        {\n \
    \           s = \"0\" + s;\n        }\n        avg = avg >> 1;\n    }\n    return\
    \ Union_std_string_long(s);", "    if (n > m) return -1;\n    int sum = 0;\n \
    \   for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    std::string\
    \ binary_rep;\n    std::bitset<sizeof(int) * 8> bits(sum / (m - n + 1));\n   \
    \ binary_rep = bits.to_string();\n    return binary_rep;", "    if (n > m) {\n\
    \        return -1;\n    }\n    int sum = 0;\n    for (long i = n; i <= m; i++)\
    \ {\n        sum += i;\n    }\n    int average = round(sum / (m - n + 1));\n \
    \   std::string binary;\n    while (average != 0) {\n        binary += std::to_string(average\
    \ % 2);\n        average /= 2;\n    }\n    std::reverse(binary.begin(), binary.end());\n\
    \    return \"0b\" + binary;", "  if (n>m)\n    return Union_std_string_long(-1);\n\
    \  double sum = std::accumulate(std::begin(std::vector<long>{n,m}), std::end(std::vector<long>{n,m}),\
    \ 0);\n  auto bit_count = static_cast<int>(std::floor(std::log2(std::ceil(sum\
    \ / 2.0))));\n  return Union_std_string_long(std::string(\"0b\") + std::string(bit_count,\
    \ '1'));", "    if ( n > m ) {\n        return -1;\n    } else {\n        int\
    \ avg = (n + m) / 2;\n        // we return string, so we can add \"0b\" in front\
    \ and return char array\n        return std::bitset<100>(avg).to_string();\n \
    \   }", "  int i = (n + m) / 2;\n  int count = 0;\n  int tmp = i;\n  while (tmp\
    \ > 0) {\n    count++;\n    tmp /= 2;\n  }\n  std::string s = \"0b\";\n  for (int\
    \ j = 0; j < count; j++) {\n    s += (i % 2) + '0';\n    i /= 2;\n  }\n  std::reverse(s.begin(),\
    \ s.end());\n  return Union_std_string_long(s);", "    if (n > m) {\n        return\
    \ -1;\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n       \
    \ sum += i;\n    }\n    long avg = (long) std::round((double) sum / (m - n + 1));\n\
    \    std::string binary = std::bitset<64>(avg).to_string();\n    return \"0b\"\
    \ + binary.substr(binary.find(\"1\"));", "    if (n > m) return -1;\n    float\
    \ result = 0;\n    for (long i = n; i <= m; i++) {\n        result += i;\n   \
    \ }\n    result /= (m - n + 1);\n    std::string binary = std::bitset<32>(std::round(result)).to_string();\n\
    \    return binary;", "    if (n > m) {\n        return -1;\n    }\n    std::bitset<32>\
    \ bs;\n    int avg = (n + m) / 2;\n    bs = avg;\n    std::string bs_str = bs.to_string();\n\
    \    while(bs_str[0] == '0') {\n        bs_str.erase(0, 1);\n    }\n    return\
    \ \"0b\" + bs_str;", '    // Your code here', "    if (n > m) {\n        return\
    \ -1;\n    }\n    // n and m are within bounds.\n    long average = ((n + m) /\
    \ 2);\n    std::string binary = std::bitset<8>(average).to_string();\n    return\
    \ binary;", "    if (n > m) return -1;\n    int sum = 0;\n    for (long i = n;\
    \ i <= m; i++) {\n        sum += i;\n    }\n    int avg = round(sum / (m - n +\
    \ 1));\n    return std::bitset<32>(avg).to_string();", "    if (n>m) return -1;\n\
    \    std::string str=\"0b\";\n    long sum=0;\n    long counter=0;\n    for (int\
    \ i=n;i<=m;i++){\n        sum+=i;\n        counter++;\n    }\n    long avg = sum/counter;\n\
    \    avg = round(avg);\n    while (avg!=0){\n        if (avg%2==0){\n        \
    \    str=\"0\"+str;\n        }else{\n            str=\"1\"+str;\n        }\n \
    \       avg=avg/2;\n    }\n    return str;", '    return Union_std_string_long(0);',
  "    assert(false); // Please fill the Union_std_string_long in the space below\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    if (n > m) {\n        return -1;\n    }\n    int\
    \ s = 0;\n    int c = 0;\n    for (long i = n; i <= m; i++) {\n        s += i;\n\
    \        c++;\n    }\n    int avg = round(s / (double)c);\n    std::string bin\
    \ = \"0b\";\n    while (avg) {\n        bin.push_back(avg & 1 ? '1' : '0');\n\
    \        avg >>= 1;\n    }\n    std::reverse(bin.begin(), bin.end());\n    return\
    \ bin;", "    if (n>m) {\n        return -1;\n    }\n    double avg = (n+m)/2.0;\n\
    \    int rounded_avg = round(avg);\n    std::string bin = \"0b\";\n    std::string\
    \ rounded_avg_str = std::to_string(rounded_avg);\n    std::bitset<32> b(rounded_avg_str);\n\
    \    bin.append(b.to_string());\n    bin.erase(0, bin.find_first_not_of('0'));\n\
    \    return bin;", "    double q = (m + n) / 2.0;\n    int r = round(q);\n   \
    \ int a = r % 2;\n    int d = (r - a) / 2;\n    int c = d % 2;\n    int b = (d\
    \ - c) / 2;\n    if (n > m) {\n        return -1;\n    }\n    std::string s =\
    \ \"0b\";\n    s += b + '0';\n    s += c + '0';\n    s += a + '0';\n    return\
    \ s;", "    if (n > m) {\n        return -1;\n    }\n    if (n == m) {\n     \
    \   return std::bitset<32>(n).to_string();\n    }\n    long value = (m + n) /\
    \ 2;\n    return std::bitset<32>(value).to_string();", "\tif (n > m) { return\
    \ std::string(\"-1\"); }\n    float r = std::floor(((n + m) / 2.0f) + 0.5f);\n\
    \    std::bitset<32> bi(static_cast<long>(r));\n    return std::string(\"0b\"\
    \ + bi.to_string());", "    if (n > m) {\n        return -1;\n    }\n    double\
    \ result = round((n + m) / 2.0);\n    std::string bin = std::bitset<64>(result).to_string();\n\
    \    std::string res = \"0b\";\n    int i = 0;\n    while (bin[i] == '0') {\n\
    \        i++;\n    }\n    for (int j = i; j < bin.size(); j++) {\n        res\
    \ += bin[j];\n    }\n    return res;", "    // your code here\n    std::string\
    \ hex = \"0x\";\n    if(n>m) return -1;\n    int sum = 0;\n    for(int i = n;\
    \ i<=m;i++){\n        sum += i;\n    }\n    sum = (sum + (m-n+1)/2)/(m-n+1);\n\
    \    std::string s = std::bitset< 4 >( sum ).to_string();\n    return s;", " \
    \   if (n > m) return (long)-1;\n    long sum = 0;\n    int count = 0;\n    while\
    \ (n <= m) {\n        sum += n;\n        n++;\n        count++;\n    }\n    long\
    \ avg = sum / count;\n    std::string binary_avg = \"0b\";\n    std::bitset<8>\
    \ binary(avg);\n    binary_avg.append(binary.to_string());\n    return (std::string)binary_avg;",
  "    if ( n > m ) {\n        return -1;\n    }\n    int count = 0;\n    int sum\
    \ = 0;\n    for ( int i = n; i <= m; i++ ) {\n        sum += i;\n        count++;\n\
    \    }\n    int rounded_avg = std::round(sum / (double)count);\n    std::string\
    \ avg_binary = std::bitset<64>(rounded_avg).to_string();\n    std::string binary\
    \ = \"0b\";\n    for ( int i = 0; i < avg_binary.length(); i++ ) {\n        if\
    \ ( avg_binary[i] == '1' ) {\n            binary += avg_binary[i];\n        }\n\
    \    }\n    return binary;", "    if (n > m) {\n        return -1;\n    }\n  \
    \  // int avg = (n + m) / 2;\n    int avg = ((n & m) + ((n ^ m) >> 1));\n    int\
    \ bin = 0;\n    int i = 1;\n    while (avg) {\n        bin += (avg % 2) * i;\n\
    \        avg /= 2;\n        i *= 10;\n    }\n    std::string s = \"0b\" + std::to_string(bin);\n\
    \    return s;", "    \n    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    else {\n        long avg = (n + m) / 2;\n        std::string s = std::bitset<\
    \ 32 >( avg ).to_string();\n        return Union_std_string_long(\"0b\" + s.substr(s.find(\"\
    1\")));\n    }\n    ", "    if (n > m) {\n        return -1;\n    }\n    int sum\
    \ = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int\
    \ avg = sum / (m - n + 1);\n    std::string binary = std::bitset<32>(avg).to_string();\n\
    \    return std::string(\"0b\") + binary.substr(binary.find('1'));", "    if (n>m)\
    \ return -1;\n    int sum = 0;\n    int count = 0;\n    while (n <= m) {\n   \
    \     sum += n;\n        n++;\n        count++;\n    }\n    float average = sum\
    \ / count;\n    //std::cout << \"average:\" << average << std::endl;\n    int\
    \ roundedAverage = round(average);\n    //std::cout << \"average:\" << roundedAverage\
    \ << std::endl;\n    std::string binaryInt = std::bitset<8>(roundedAverage).to_string();\n\
    \    std::string binary = \"0b\" + binaryInt;\n    return Union_std_string_long(binary);",
  "    if (n > m) return -1;\n    double sum = 0;\n    for (long i = n; i <= m; i++)\
    \ sum += i;\n    long avg = round(sum / (m - n + 1));\n    return std::bitset<8>(avg).to_string();",
  "    // You have to write the definition of this function yourself.\n    long sum\
    \ = 0;\n    std::string output = \"0b\";\n    if(n>m) {\n        return -1;\n\
    \    }\n    for(long i = n; i<=m; i++) {\n        sum += i;\n    }\n    if(sum\
    \ % (m-n+1) == 0) {\n        sum = sum / (m-n+1);\n    }\n    else {\n       \
    \ sum = (sum / (m-n+1)) + 1;\n    }\n    while(sum > 0) {\n        output += std::to_string(sum\
    \ % 2);\n        sum = sum / 2;\n    }\n    std::reverse(output.begin()+2, output.end());\n\
    \    return output;", "    assert(n >= 0);\n    assert(m >= 0);\n    if (n > m)\
    \ return Union_std_string_long(\"-1\");\n    int i = floor((n + m) / 2);\n   \
    \ return Union_std_string_long(std::to_string(i));", "    if (n > m) return -1;\n\
    \    long sum = n + m;\n    long avg = (sum + 1) / 2;\n    return std::bitset<32>(avg).to_string();",
  "    // Replace this code with a faster implementation\n    int sum = 0;\n    int\
    \ count = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n        count++;\n\
    \    }\n    if (count == 0) return Union_std_string_long(long(-1));\n    int avg\
    \ = ((sum % count) * 2 >= count) ? (sum / count + 1) : (sum / count);\n    return\
    \ Union_std_string_long(std::bitset<32>(avg).to_string());", "    if (n > m) {\n\
    \        return -1;\n    }\n    double avg = (n + m) / 2.0;\n    int avg_rounded\
    \ = (int)std::round(avg);\n    std::string result = \"0b\";\n    while (avg_rounded\
    \ > 0) {\n        if (avg_rounded % 2 == 0) {\n            result += \"0\";\n\
    \        } else {\n            result += \"1\";\n        }\n        avg_rounded\
    \ /= 2;\n    }\n    std::reverse(result.begin() + 2, result.end());\n    return\
    \ Union_std_string_long(result);", "    assert(n<m);\n    long sum;\n    long\
    \ rounded;\n    std::string binary=\"\";\n    std::string res=\"\";\n    sum =\
    \ n+m;\n    rounded = sum / 2;\n    while(rounded > 0) {\n        if(rounded %\
    \ 2 == 0)\n            binary += \"0\";\n        else\n            binary += \"\
    1\";\n        rounded /= 2;\n    }\n    for(int i=binary.length()-1; i>=0; i--)\n\
    \        res += binary[i];\n    res = \"0b\" + res;\n    return res;", "    if\
    \ (n > m) return \"\";\n    long sum = 0;\n    int count = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n        count++;\n    }\n    long avg\
    \ = sum / count;\n    std::string result = \"0b\";\n    while (avg != 0) {\n \
    \       result += std::to_string(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    if (n > m) return Union_std_string_long(-1);\n\
    \    long s = 0;\n    for (long i = n; i <= m; i++) {\n        s += i;\n    }\n\
    \    long rounded_average = floor(s / double(m - n + 1) + 0.5);\n    std::stringstream\
    \ ss;\n    ss << std::bitset<std::numeric_limits<long>::digits>(rounded_average);\n\
    \    return Union_std_string_long(ss.str());", "    if (n > m) return -1;\n  \
    \  long s = 0;\n    for (long i = n; i <= m; i++) s += i;\n    long avg = (s +\
    \ (m - n + 1) / 2) / (m - n + 1);\n    std::bitset<32> bit(avg);\n    std::string\
    \ str = \"0b\" + bit.to_string();\n    return str;", "    if (n > m) {\n     \
    \   return -1;\n    }\n    int total = 0;\n    for (int i = n; i <= m; i++) {\n\
    \        total += i;\n    }\n    int rounded_avg = std::round(double(total) /\
    \ (m - n + 1));\n    return std::bitset<64>(rounded_avg).to_string();", "    if\
    \ (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    for (long i = n;\
    \ i <= m; i++) {\n        sum += i;\n    }\n    long result = std::round(sum /\
    \ (m - n + 1));\n    return std::bitset<20>(result).to_string();", "    if (n\
    \ > m) {\n        return -1;\n    }\n    // if (n == m) {\n    //     std::stringstream\
    \ ss;\n    //     ss << std::bitset<11>(n);\n    //     return \"0b\" + ss.str();\n\
    \    // }\n    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    float avg = sum / (m - n + 1);\n    long rounded_avg = floor(avg\
    \ + 0.5);\n    std::stringstream ss;\n    ss << std::bitset<11>(rounded_avg);\n\
    \    return \"0b\" + ss.str();", "    long sum = 0;\n    if (n > m) return -1;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg =\
    \ sum / (m - n + 1);\n    std::stringstream ss;\n    ss << std::bitset<32>(avg).to_string();\n\
    \    return ss.str();", "    std::string s(0b1111, 'a');\n    long i(0b1111);\n\
    \    return Union_std_string_long(s);", "    long sum = 0;\n    if (n > m) {\n\
    \        return -1;\n    }\n    for (long i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    std::string bin = std::bitset<32>(sum / (m - n + 1)).to_string();\n\
    \    return std::string(\"0b\") + bin.substr(bin.find(\"1\"));", "//$begin(rounded_avg)\n\
    \    if (m < n) {\n        return -1;\n    }\n    int sum = 0;\n    for (int i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    return std::bitset<8>(sum/(m-n+1)).to_string();\n\
    //$end", "    if (n > m) {\n        return -1;\n    } else {\n        float res\
    \ = (n + m) / 2.0;\n        res = res + 0.5;\n        long rounded = (long) res;\n\
    \        std::string binary = std::bitset<4>(rounded).to_string(); //to binary\n\
    \        std::string s = \"0b\";\n        s += binary;\n        return s;\n  \
    \  }", '    return Union_std_string_long(std::to_string(n));', '    return "Replace
    this string with the correct answer";', "    Union_std_string_long r;\n    if\
    \ (n > m) {\n        r.f1 = -1;\n        return r;\n    }\n    long res = (n +\
    \ m) / 2;\n    r.f0 = std::bitset<16>(res).to_string();\n    return r;", "   \
    \ if (n > m) {\n        return -1;\n    }\n    Union_std_string_long result(0);\n\
    \    double avg = (double) (n + m) / 2;\n    double c = ceil(avg);\n    double\
    \ f = floor(avg);\n    if (c == f) {\n        result.f1 = n + m;\n    } else {\n\
    \        result.f1 = n + m + 1;\n    }\n    std::bitset<sizeof(long) * 8> binary(result.f1);\n\
    \    result.f0 = \"0b\" + binary.to_string();\n    return result;", "    if (n\
    \ > m) return -1;\n    int sum = 0;\n    int count = 0;\n    while (n <= m) {\n\
    \        sum += n;\n        n++;\n        count++;\n    }\n    long rounded_result\
    \ = round(sum / (float)count);\n    string result = \"0b\";\n    while (rounded_result\
    \ != 0) {\n        result = char(rounded_result % 2 + '0') + result;\n       \
    \ rounded_result = rounded_result / 2;\n    }\n    return result;", "    if (n\
    \ > m) {\n        return -1;\n    }\n    int count = 0;\n    while (m >= n) {\n\
    \        m = m / 2;\n        n = n / 2;\n        count++;\n    }\n    std::string\
    \ b = \"0b\";\n    while (count--) {\n        b += \"1\";\n    }\n    return b;",
  "    if (n > m) {\n        return -1;\n    }\n    long avg = (n + m) / 2;\n    std::string\
    \ out = \"0b\";\n    if (avg == 0) {\n        out += \"0\";\n    }\n    else {\n\
    \        while (avg > 0) {\n            out += ((avg % 2) == 0) ? \"0\" : \"1\"\
    ;\n            avg /= 2;\n        }\n    }\n    std::reverse(out.begin() + 2,\
    \ out.end());\n    return out;", "    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long average = (n + m) / 2;\n    std::string bin = std::bitset<32>(average).to_string();\n\
    \    bin = \"0b\" + bin.substr(bin.find(\"1\"));\n    return Union_std_string_long(bin);",
  "    if (n > m) {\n        return -1;\n    }\n    double avg = (n + m) / 2.0;\n\
    \    avg = round(avg);\n    return std::bitset<32>(avg).to_string();", "    if\
    \ (n > m) {\n        return Union_std_string_long(-1);\n    }\n    int sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum\
    \ / (m - n + 1);\n    return Union_std_string_long(std::bitset<64>(avg).to_string());",
  "    if (n > m) {\n        return {-1};\n    }\n    int sum = 0;\n    int count\
    \ = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n        count++;\n\
    \    }\n    std::string res = \"0b\";\n    int avg = round(sum / count);\n   \
    \ while (avg > 0) {\n        res.push_back(avg % 2 + '0');\n        avg /= 2;\n\
    \    }\n    std::reverse(res.begin(), res.end());\n    return {res};", "    if\
    \ (n > m) {\n        return -1;\n    }\n    if (m <= 2147483647 && n >= -2147483648)\
    \ {\n        long result = (n + m) / 2;\n        std::string out = \"0b\";\n \
    \       std::string temp;\n        std::stringstream ss;\n        ss << std::bitset<64>(result);\n\
    \        ss >> temp;\n        int pos = temp.find(\"1\");\n        out.append(temp.substr(pos));\n\
    \        return out;\n    }\n    return -1;", "    if (n > m) {\n        return\
    \ Union_std_string_long((long)-1);\n    }\n    long sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n + 1);\n\
    \    std::string output = \"0b\";\n    std::vector<int> bits;\n    for (int i\
    \ = 0; i < 32; i++) {\n        if (avg >= 1) {\n            bits.push_back(avg\
    \ % 2);\n            avg /= 2;\n        } else {\n            bits.push_back(0);\n\
    \        }\n    }\n    for (int i = bits.size() - 1; i >= 0; i--) {\n        if\
    \ (bits[i] == 1) {\n            output += \"1\";\n        } else {\n         \
    \   output += \"0\";\n        }\n    }\n    output = output.substr(0, output.find_last_of(\"\
    1\") + 1);\n    return Union_std_string_long(output);", "    if ( n > m ) {\n\
    \        return -1;\n    }\n    long rounded_avg = (n + m) / 2;\n    std::string\
    \ binary_str;\n    while ( rounded_avg != 0 ) {\n        binary_str += (rounded_avg\
    \ % 2) ? '1' : '0';\n        rounded_avg /= 2;\n    }\n    std::reverse(binary_str.begin(),\
    \ binary_str.end());\n    return \"0b\" + binary_str;", "    std::string _out_var_0;\n\
    \    if (n > m) {\n        _out_var_0 = std::to_string(-1);\n    } else {\n  \
    \      _out_var_0 = (std::bitset<32>((n + m) / 2)).to_string();\n    }\n    return\
    \ Union_std_string_long(std::move(_out_var_0));", "  // Implement your solution\
    \ here\n  if(n>m) return Union_std_string_long(-1);\n  int avg = (n+m)/2;\n  int\
    \ checker = 1;\n  std::string result = \"0b\";\n  while(checker<=avg){\n    if(checker&avg)\
    \ result+=\"1\";\n    else result+=\"0\";\n    checker<<=1;\n  }\n  return Union_std_string_long(result);",
  "    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n    for (long i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n +\
    \ 1);\n    return std::bitset<32>(avg).to_string();", "    Union_std_string_long\
    \ rv(0);\n    if (n > m) {\n        rv.f1 = -1;\n    } else {\n        long avg\
    \ = floor((n + m) / 2.0);\n        std::bitset<32> b(avg);\n        rv.f0 = \"\
    0b\" + b.to_string();\n    }\n    return rv;", "    if (n > m) return std::string(\"\
    -1\");\n    long nn = n/2;\n    if (n%2==1) nn+=1;\n    long mm = m/2;\n    if\
    \ (m%2==1) mm+=1;\n    int len = mm-nn+1;\n    std::string bits = \"\";\n    long\
    \ val = 0;\n    for (int i=0; i<len; i++) {\n        val = 2*val + 1;\n      \
    \  bits = \"1\" + bits;\n    }\n    if (len%2==1) {\n        val /= 2;\n     \
    \   bits = \"0\" + bits;\n    }\n    return std::string(\"0b\"+bits);", "    if\
    \ (n > m) {\n        return -1;\n    }\n    int sum = 0;\n    for (int i = n;\
    \ i <= m; i++) {\n        sum += i;\n    }\n    int avg = round(double(sum) /\
    \ (m - n + 1));\n    std::string binary = std::bitset<sizeof(int) * 8>(avg).to_string();\n\
    \    return \"0b\" + binary;", "    std::string result;\n    //@assert n < m:\
    \ \"n is greater than m\";\n    int avg = 0;\n    avg = (n + m) / 2;\n    int\
    \ i = 1;\n    for (i = 1; i <= avg; i++) {\n        if (i * 2 > avg) {\n     \
    \       break;\n        }\n    }\n    for (int j = 0; j < i; j++) {\n        result\
    \ = \"0b1\" + result;\n    }\n    return Union_std_string_long(result);", "  \
    \  long sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n\
    \    long avg = round(sum/(m-n+1));\n    if (n > m) {\n        return -1;\n  \
    \  }\n    return std::bitset< sizeof(long) * CHAR_BIT >(avg).to_string();", " \
    \   Union_std_string_long u(0);\n    long sum = 0;\n    if (n > m) {\n       \
    \ u.f1 = -1;\n        return u;\n    }\n    for (long i = n; i <= m; i++) {\n\
    \        sum += i;\n    }\n    long avg = (sum / (m - n + 1));\n    std::string\
    \ s = std::bitset<16>(avg).to_string();\n    u.f0 = s;\n    return u;", "    Union_std_string_long\
    \ ret;\n    if (n > m) {\n        ret.f1 = -1;\n        return ret;\n    }\n \
    \   int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n\
    \    int avg = sum / (m - n + 1);\n    std::string bin = \"0b\";\n    while (avg\
    \ > 0) {\n        bin = bin + std::to_string(avg % 2);\n        avg /= 2;\n  \
    \  }\n    std::reverse(bin.begin(), bin.end());\n    ret.f0 = bin;\n    return\
    \ ret;", "    assert((n<=m)&&\"n is greater than m\");\n    if(n>m) {\n      \
    \  return -1;\n    }\n    double avg = ((double)n+(double)m)/2;\n    std::string\
    \ bin = std::bitset<std::numeric_limits<unsigned long>::digits>(std::lround(avg)).to_string();\n\
    \    return \"0b\"+bin;", "    if (n > m) return -1;\n    long rounded_avg = (n\
    \ + m) / 2;\n    stringstream ss;\n    ss << std::bitset<32>(rounded_avg);\n \
    \   string res = ss.str();\n    // Remove all \"0\" at the beginning of res\n\
    \    return res;", "    if (n > m) return -1;\n    long sum = 0;\n    for (long\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = (sum / (m -\
    \ n + 1));\n    std::string avg_bin = std::bitset<8>(avg).to_string();\n    return\
    \ avg_bin;", "    assert(n<2147483647);\n    assert(m<2147483647);\n    if(n>m)\n\
    \        return -1;\n    long sum=0;\n    for(long i=n;i<=m;i++)\n        sum+=i;\n\
    \    sum/=(m-n+1);\n    std::stringstream ss;\n    ss<<std::bitset<32>(sum);\n\
    \    return \"0b\"+ss.str().substr(32-1);", "    if (n > m) return -1;\n    return\
    \ std::bitset<sizeof(long) * 8>(\n                (n + m) / 2).to_string();",
  "     if (n > m) { return -1; }\n     long sum = n + m;\n     if (n + 1 < m) { sum\
    \ += (m - n) / 2; }\n     std::string binary = std::bitset<32>(sum / 2).to_string();\n\
    \     return binary;", "// NOTE:\n// ----------------------------------------------------------------\n\
    // If you are making lots of calls to the\n// 'rounded_avg' function, consider\
    \ computing the number\n// of bits required to hold the result, and then using\n\
    // bit shifting to produce the final result.\n// ----------------------------------------------------------------\n\
    \    if (n > m) {\n        return -1;\n    }\n    long rounded_avg_arg0 = n;\n\
    \    long rounded_avg_arg1 = m;\n    assert((rounded_avg_arg0 > 0));\n    assert((rounded_avg_arg1\
    \ > 0));\n    long i = (rounded_avg_arg0 + rounded_avg_arg1) / 2;\n    std::string\
    \ s = std::bitset<32>(i).to_string();\n    return std::string(\"0b\") + s.substr(s.find(\"\
    1\"));", "    if (n > m) return -1;\n    long sum = 0;\n    long c = 0;\n    while\
    \ (n <= m) {\n        sum += n;\n        c++;\n        n++;\n    }\n    std::string\
    \ s = \"0b\";\n    long avg = sum / c;\n    while (avg > 0) {\n        if (avg\
    \ % 2 == 0) {\n            s = \"0\" + s;\n        } else {\n            s = \"\
    1\" + s;\n        }\n        avg /= 2;\n    }\n    return s;", "    if (n > m)\
    \ return -1;\n    double avg = std::round((n + m) / 2.0);\n    return std::bitset<32>(std::round(avg)).to_string();",
  "    if (n > m) {\n        return (long)-1;\n    }\n    long sum = 0;\n    int i\
    \ = n;\n    while (i <= m) {\n        sum += i;\n        i++;\n    }\n    long\
    \ avg = sum / (m - n + 1);\n    int result = 0;\n    for (int i = 0; i < 32; i++)\
    \ {\n        result <<= 1;\n        result |= (avg & 1);\n        avg >>= 1;\n\
    \    }\n    std::stringstream ss;\n    ss << \"0b\" << std::bitset<32>(result);\n\
    \    return ss.str();", "    if (n > m) return -1;\n    long sum = 0;\n    for\
    \ (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = std::round(sum\
    \ * 1.0 / (m - n + 1));\n    std::stringstream ss;\n    ss << std::bitset<4>(avg);\n\
    \    return \"0b\" + ss.str();", "// Note: Binary strings can be output using\
    \ the following format string:\n// std::cout << \"0b\" << std::bitset<4>(n) <<\
    \ '\\n';\n// Add code here.\n    std::string result;\n    if (n > m) {\n     \
    \   return Union_std_string_long(-1);\n    }\n    int sum = 0;\n    for (int i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n    result = std::bitset<8>(sum/((m-n)+1)).to_string();\n\
    \    return Union_std_string_long(result);", "    int flag = 0;\n    if(n>m)\n\
    \        return -1;\n    else\n    {\n        flag = 0;\n        int sum = 0;\n\
    \        for(int i=n;i<=m;i++)\n        {\n            sum += i;\n        }\n\
    \        sum = floor(sum/(m-n+1));\n        // std::string s = std::bitset<8>(sum).to_string();\n\
    \        std::string s = \"0b\" + std::bitset<8>(sum).to_string();\n        return\
    \ s;\n    }", "    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n\
    \    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    long average\
    \ = sum / (m - n + 1);\n    int remainder = 0;\n    std::string result = \"0b\"\
    ;\n    while (average != 0) {\n        remainder = average % 2;\n        average\
    \ /= 2;\n        result += std::to_string(remainder);\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    \n    if (n > m) {\n        return\
    \ -1;\n    }\n    // Actual Code\n    int result = (n + m) / 2;\n    return std::bitset<10>(result).to_string();",
  "    if (n > m) {\n        return -1;\n    } else {\n        int total = 0;\n  \
    \      for (int i = n; i <= m; i++) {\n            total += i;\n        }\n  \
    \      int average = total / (m - n + 1);\n        std::string binary = std::bitset<32>(average).to_string();\n\
    \        return binary;\n    }", '    return n > m ? -1 : std::bitset<16>( (n
    + m)/2).to_string();', "    if (n > m) return -1;\n    float avg = (n + m) / 2.0;\n\
    \    return std::bitset<32>(std::round(avg)).to_string();", "    if (n>m) return\
    \ -1;\n    int sum = (n+m)*(m-n+1)/2;\n    return std::bitset<32>(std::round(sum/(m-n+1.0))).to_string();",
  "    std::string result;\n    std::stringstream stream;\n    if (n > m) {\n    \
    \    return std::string(\"-1\");\n    }\n    int mean = (n + m) / 2;\n    std::bitset<8>\
    \ x(mean);\n    result = \"0b\" + x.to_string();\n    return result;", "    if\
    \ (n>m) {\n        return Union_std_string_long(-1);\n    }\n    long sum = 0;\n\
    \    for (int i=n; i<=m; i++) {\n        sum += i;\n    }\n    int avg = round(double(sum)/(m-n+1));\n\
    \    std::string str = \"0b\";\n    while (avg > 0) {\n        str += ((avg%2)==0)\
    \ ? \"0\" : \"1\";\n        avg = avg/2;\n    }\n    std::reverse(str.begin(),\
    \ str.end());\n    return Union_std_string_long(str);", "    if (n > m) return\
    \ -1;\n    if (n == m) return std::bitset<8>(n).to_string();\n    long avg = 0;\n\
    \    for (int i = n; i <= m; i++) avg += i;\n    avg /= (m - n + 1);\n    return\
    \ std::bitset<8>(avg).to_string();", "    assert(n >= 1 && m >= 1);\n    if (n\
    \ > m) {\n        return -1;\n    }\n    long sum = 0;\n    long count = 0;\n\
    \    for (long i = n; i <= m; i++) {\n        sum += i;\n        count++;\n  \
    \  }\n    long result = (long) round((double) sum / count);\n    return std::bitset<64>(result).to_string();",
  "    if (n > m) {\n        return -1;\n    }\n    std::string n_bin = std::bitset<16>(n).to_string();\n\
    \    std::string m_bin = std::bitset<16>(m).to_string();\n    if (n_bin.find(\"\
    1\") != 0 || m_bin.find(\"1\") != 0) {\n        return -1;\n    }\n    std::string\
    \ ret;\n    for (int i = n_bin.size() - 1; i >= 0; i--) {\n        if (n_bin[i]\
    \ == '1' && m_bin[i] == '1') {\n            ret = \"1\" + ret;\n        } else\
    \ if (n_bin[i] == '0' && m_bin[i] == '0') {\n            ret = \"0\" + ret;\n\
    \        } else {\n            ret = \"1\" + ret;\n            break;\n      \
    \  }\n    }\n    return std::string(\"0b\") + ret;", "    if (n > m) return -1;\n\
    \    long avg = (n + m) / 2;\n    long rounded_avg = round(avg);\n    std::string\
    \ binary_avg = std::bitset< 8 >( rounded_avg ).to_string();\n    return Union_std_string_long(std::string(\"\
    0b\") + binary_avg);", "    if (n>m) return -1;\n    else{\n        int  bin[100],\
    \ i = 0, r,sum=0;\n        float avg;\n        while (n <= m)\n        {\n   \
    \         sum+=n;\n            n++;\n        }\n        avg=sum/(m-n+1);\n   \
    \     int avg_int = avg;\n        while (avg_int > 0)\n        {\n           \
    \ r = avg_int % 2;\n            avg_int /= 2;\n            bin[i] = r;\n     \
    \       i++;\n        }\n        string s = \"0b\";\n        for (int j = i -\
    \ 1; j >= 0; j--)\n            s+=bin[j];\n        return s;\n    }", "    if\
    \ (n > m) return -1;\n    double sum = 0;\n    for (long i = n; i <= m; i++) {\n\
    \        sum += i;\n    }\n    long avg = round(sum / (m - n + 1));\n    return\
    \ std::bitset<32>(avg).to_string();", "    if (n > m) {\n        return -1;\n\
    \    }\n    double avg = (n + m) / 2.0;\n    long rounded = avg;\n    return std::bitset<64>(rounded).to_string();",
  "    if (n > m) {\n        return -1;\n    }\n    long s = 0;\n    int count = 0;\n\
    \    while (n <= m) {\n        s += n;\n        n++;\n        count++;\n    }\n\
    \    std::string ans = \"0b\";\n    long avg = s / count;\n    while (avg > 0)\
    \ {\n        if (avg % 2 == 0) {\n            ans += \"0\";\n        } else {\n\
    \            ans += \"1\";\n        }\n        avg /= 2;\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    return ans;", "    if (n > m) {\n        return (Union_std_string_long(-1));\n\
    \    }\n    long sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n    long rounded_avg = std::round(sum / (m - n + 1));\n    std::string\
    \ avg_binary = std::bitset<31>(rounded_avg).to_string();\n    while (avg_binary[0]\
    \ == '0') {\n        avg_binary.erase(0, 1);\n    }\n    avg_binary = \"0b\" +\
    \ avg_binary;\n    return (Union_std_string_long(avg_binary));", "    int size\
    \ = m - n + 1;\n    int sum = n + m;\n    if (m < n) {\n        return -1;\n \
    \   }\n    int avg = sum / size;\n    std::string answer = \"0b\";\n    for (int\
    \ i = 0; i < 8; i++) {\n        if (avg % 2 == 1) {\n            answer = \"1\"\
    \ + answer;\n        } else {\n            answer = \"0\" + answer;\n        }\n\
    \        avg = avg / 2;\n    }\n    return answer;", "    // Write your code here\n\
    \    // To print results to the standard output you can use printf()\n    // Example:\
    \ printf(\"%s\", \"Hello world!\");\n    if(n>m)\n        return \"0b1111\";\n\
    \    Union_std_string_long result;\n    float p=(n+m)/2.0;\n    int q=n+m;\n \
    \   int a;\n    if(p==q/2.0)\n        a=q/2;\n    else\n        a=q/2+1;\n   \
    \ std::string binary = std::bitset<5>(a).to_string();\n    result=binary;\n  \
    \  return result;", "    if (n > m) return -1;\n    int sum = 0;\n    for (int\
    \ i = n; i <= m; i++) {\n        sum += i;\n    }\n    int average = sum / (m\
    \ - n + 1);\n    std::stringstream stream;\n    stream << std::bitset<32>(average);\n\
    \    std::string res(stream.str());\n    return std::string(\"0b\") + res;", " \
    \   if (n > m) return -1;\n    int sum = 0;\n    for (int i = n; i <= m; i++)\
    \ sum += i;\n    int avg = round(sum / (m - n + 1));\n    return std::bitset<32>(avg).to_string();",
  '    return (n > m) ? -1 : std::bitset<32>(std::round((n + m) / 2.0)).to_string();',
  "    if (n > m) {\n        return -1;\n    }\n    std::bitset<32> ans = std::bitset<32>((m+n)/2);\n\
    \    return ans.to_string();", "    int sum = 0;\n    for (int i = n; i <= m;\
    \ i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n    std::string\
    \ output = \"0b\";\n    while (avg) {\n        output.push_back(avg % 2);\n  \
    \      avg /= 2;\n    }\n    return output;", "    if (n > m) return -1;\n   \
    \ std::vector<long> nums;\n    for (long i = n; i <= m; i++) {\n        nums.push_back(i);\n\
    \    }\n    long s = std::accumulate(nums.begin(), nums.end(), 0);\n    long avg\
    \ = round(s / nums.size());\n    std::string str = \"0b\";\n    str += std::bitset<sizeof(long)\
    \ * 8>(avg).to_string();\n    return str;", "    assert((n >= 1 && n <= 20) &&\
    \ (m >= 1 && m <= 20));\n    if (n > m) return \"\";\n    float sum = 0;\n   \
    \ for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    float avg = sum\
    \ / (m - n + 1);\n    int rounded_avg = round(avg);\n    std::string binary_str\
    \ = \"\";\n    while (rounded_avg) {\n        binary_str += std::to_string(rounded_avg\
    \ % 2);\n        rounded_avg /= 2;\n    }\n    std::reverse(binary_str.begin(),\
    \ binary_str.end());\n    return \"0b\" + binary_str;", "    assert(n <= m);\n\
    \    return \"Replace this string with the implementation.\";", "    assert(n\
    \ > 0);\n    assert(m > 0);\n    // REPLACE THE BODY OF THIS FUNCTION WITH A SOLUTION\n\
    \    return -1;", "    if (n > m) return Union_std_string_long(long(-1));\n  \
    \  long a = floor((m + n) / 2);\n    std::bitset<8> foo = std::bitset<8>(a);\n\
    \    std::string s = foo.to_string();\n    return Union_std_string_long(std::string(\"\
    0b\") + s);", "    std::string s = \"0b\";\n    if (n > m) {\n        return -1;\n\
    \    }\n    else {\n        int i = 0;\n        long sum = 0;\n        for (i\
    \ = n; i <= m; i++) {\n            sum += i;\n        }\n        sum = sum / (m\
    \ - n + 1);\n        while (sum > 0) {\n            s = s + std::to_string(sum\
    \ % 2);\n            sum = sum / 2;\n        }\n        std::reverse(s.begin(),\
    \ s.end());\n        return s;\n    }", "    if (n > m) {\n        return -1;\n\
    \    }\n    std::string result = \"0b\";\n    long sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    long average = round(sum /\
    \ (m - n + 1));\n    while (average != 0) {\n        result.push_back(average\
    \ % 2 + '0');\n        average /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return result;", "    if (n > m) {\n        return -1;\n\
    \    }\n    long avg = (n + m) / 2;\n    int i = 0;\n    long output = 0;\n  \
    \  while (avg > 0) {\n        long last_bit = avg % 2;\n        if (last_bit ==\
    \ 1) {\n            output += pow(2, i);\n        }\n        avg /= 2;\n     \
    \   i++;\n    }\n    std::string output_str = \"0b\" + std::to_string(output);\n\
    \    return output_str;", '    return Union_std_string_long(std::string(""));',
  "    if (n > m) return -1;\n    int s = 0;\n    for (int i = n; i <= m; i++) {\n\
    \        s += i;\n    }\n    int avg = s / (m - n + 1);\n    std::string bin =\
    \ \"0b\";\n    while (avg > 0) {\n        if (avg % 2 == 0) {\n            bin\
    \ += \"0\";\n        } else {\n            bin += \"1\";\n        }\n        avg\
    \ /= 2;\n    }\n    std::reverse(bin.begin(), bin.end());\n    return bin;", " \
    \   long sum = 0;\n    long count = 0;\n    if (n > m) {\n        return -1;\n\
    \    }\n    for (long i = n; i <= m; i++) {\n        sum += i;\n        count++;\n\
    \    }\n    double avg = (sum / (double)count);\n    std::string bit_string =\
    \ std::bitset<std::numeric_limits<int>::digits>(round(avg)).to_string();\n   \
    \ return \"0b\" + bit_string;", "    \n    if (n>m)\n        return -1;\n    float\
    \ sum=0;\n    for (int i=n;i<=m;i++)\n        sum+=i;\n    sum/=(m-n+1);\n   \
    \ int average = sum;\n    int temp = average;\n    std::string ans = \"0b\";\n\
    \    while (temp>0)\n    {\n        if (temp%2 == 0)\n            ans += \"0\"\
    ;\n        else\n            ans += \"1\";\n        temp /= 2;\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    return ans;", "    if (n > m) {\n        return -1;\n    }\n\
    \    long avg = (m + n) / 2;\n    std::string binary = std::bitset<16>(avg).to_string();\n\
    \    return \"0b\" + binary;", '', "    Union_std_string_long r = 0;\n    if (n\
    \ > m) {\n        return Union_std_string_long(\"-1\");\n    }\n    long sum =\
    \ 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg\
    \ = ceil(sum / (m - n + 1));\n    // std::cout << \"avg: \" << avg << std::endl;\n\
    \    for (int i = 0; i < 31; i++) {\n        if (avg & (1 << i)) {\n         \
    \   r |= (1 << i);\n        }\n    }\n    // std::cout << \"r: \" << r << std::endl;\n\
    \    return Union_std_string_long(r);", "    if (n > m) return Union_std_string_long(-1);\n\
    \    int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n   \
    \ }\n    int average = (int) std::round((float) sum / (m - n + 1));\n    std::string\
    \ result = \"0b\";\n    while (average > 0) {\n        result += average % 2 ==\
    \ 0 ? \"0\" : \"1\";\n        average /= 2;\n    }\n    std::reverse(result.begin(),\
    \ result.end());\n    return Union_std_string_long(result);", "    if (n>m) {\n\
    \        return -1;\n    } else {\n        int count = 0;\n        int sum = 0;\n\
    \        while (n<=m) {\n            sum += n;\n            n++;\n           \
    \ count++;\n        }\n        std::string s = \"0b\";\n        std::bitset<1000>\
    \ bits (sum/count);\n        s += bits.to_string();\n        std::string temp\
    \ = \"\";\n        for (int i = s.length()-1; i>1; i--) {\n            temp +=\
    \ s[i];\n        }\n        s = temp;\n        return s;\n    }", "    if (n >\
    \ m) {\n        return Union_std_string_long(-1);\n    }\n    long sum = (n +\
    \ m) * (m - n + 1) / 2;\n    int bits = 0;\n    long num = sum / (m - n + 1);\n\
    \    while (num > 0) {\n        bits++;\n        num /= 2;\n    }\n    return\
    \ Union_std_string_long(std::string(\"0b\") + std::string(bits, '1'));", "   \
    \ if (n > m) {\n        return -1;\n    }\n    long sum = n;\n    for (long i\
    \ = n + 1; i <= m; i++) {\n        sum += i;\n    }\n    long rounded_average\
    \ = std::round(sum / (float)(m - n + 1));\n    std::string binary = std::bitset<64>(rounded_average).to_string();\n\
    \    return \"0b\" + binary.substr(binary.find(\"1\"));", "    if (n > m) {\n\
    \        return Union_std_string_long(-1);\n    }\n    long int avg = floor((n\
    \ + m) / 2);\n    std::string result = \"0b\";\n    while (avg > 0) {\n      \
    \  if (avg % 2 == 0) {\n            result = \"0\" + result;\n        } else {\n\
    \            result = \"1\" + result;\n        }\n        avg /= 2;\n    }\n \
    \   return Union_std_string_long(result);", "    std::cout << \"Running input:\
    \ \" << n << \" \" << m << std::endl;\n    if (n > m) return -1;\n    long sum\
    \ = 0;\n    long count = 0;\n    for (long i = n; i <= m; i++) {\n        sum\
    \ += i;\n        count++;\n    }\n    long avg = sum / count;\n    std::bitset<32>\
    \ bit(avg);\n    std::string bitString = bit.to_string();\n    std::string result\
    \ = \"0b\";\n    for (int i = 0; i < bitString.length(); i++) {\n        if (bitString[i]\
    \ == '1') {\n            result += bitString[i];\n        }\n    }\n    return\
    \ result;", "    // YOUR CODE HERE\n    if (n > m) return (long)-1;\n    long\
    \ avg = (n + m) / 2;\n    std::string binary = \"0b\";\n    while (avg > 0) {\n\
    \        binary = \"0b\" + std::to_string(avg % 2) + binary;\n        avg /= 2;\n\
    \    }\n    return binary;", '    return Union_std_string_long((n + m) / 2);',
  "    if (n > m) {\n        return long(-1);\n    }\n    long res = (n + m) / 2;\n\
    \    std::string s = \"0b\";\n    while (res > 0) {\n        if (res % 2 == 0)\
    \ {\n            s = \"0\" + s;\n        } else {\n            s = \"1\" + s;\n\
    \        }\n        res /= 2;\n    }\n    return std::string(s);", "    if (n\
    \ > m) {\n        return -1;\n    }\n    double f = (n + m) / 2.0;\n    int r\
    \ = (int)round(f);\n    return std::bitset<31>(r).to_string();", "    if (n >\
    \ m) {\n        return Union_std_string_long(-1);\n    }\n    int avg = (n + m)\
    \ / 2;\n    std::string result = \"0b\";\n    while (avg) {\n        result +=\
    \ '0' + (avg & 1);\n        avg >>= 1;\n    }\n    std::reverse(result.begin()\
    \ + 2, result.end());\n    return Union_std_string_long(result);", "    std::string\
    \ result;\n    if (n > m) {\n        return -1;\n    }\n    int avg = std::floor((n\
    \ + m) / 2);\n    while (avg) {\n        result += (avg % 2 == 0) ? \"0\" : \"\
    1\";\n        avg /= 2;\n    }\n    std::reverse(result.begin(), result.end());\n\
    \    return \"0b\" + result;", "    if ( n > m ) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long avg = (m + n) / 2;\n    long rounded_avg = round(avg);\n    if\
    \ (avg == rounded_avg) {\n        return Union_std_string_long(rounded_avg);\n\
    \    }\n    std::string bin = std::bitset<8>(rounded_avg).to_string();\n    std::stringstream\
    \ ss;\n    ss << \"0b\" << bin;\n    return Union_std_string_long(ss.str());",
  "    if (n > m) {\n        return -1;\n    }\n    int sum = 0;\n    for (int i =\
    \ n; i <= m; i++) {\n        sum += i;\n    }\n    int avg = sum / (m - n + 1);\n\
    \    if (0.5 < (float) sum / (m - n + 1) - avg) {\n        avg += 1;\n    }\n\
    \    std::string answer = \"0b\";\n    answer += std::bitset<64>(avg).to_string();\n\
    \    return answer;", "    int result = 0;\n    if (n <= m) {\n        result\
    \ = (n + m) / 2;\n        std::string res = std::bitset<32>(result).to_string();\n\
    \        res = res.substr(res.find(\"1\"));\n        res = \"0b\" + res;\n   \
    \     return res;\n    }\n    return -1;", '    return Union_std_string_long(std::string());',
  "    if (n > m) return -1;\n    else {\n        return ((n+m)/2);\n    }", "   \
    \ if (n > m) return -1;\n    long average = (n + m) / 2;\n    if (average % 2\
    \ != 0) average = average + 1;\n    std::string s = std::bitset<4>(average).to_string();\n\
    \    return \"0b\" + s;", "    if (n>m) return -1;\n    long sum = 0;\n    long\
    \ cnt = 0;\n    for (long i=n; i<=m; i++) {\n        sum += i;\n        cnt++;\n\
    \    }\n    long avg = sum/cnt;\n    std::string s = \"0b\";\n    long a = avg;\n\
    \    while (a) {\n        s += '0' + a%2;\n        a /= 2;\n    }\n    return\
    \ s;", '    // your code here', "    int answer = 0;\n    if (n > m) {\n     \
    \   return -1;\n    }\n    answer = (n + m) / 2;\n    std::string binary = std::bitset<9>(answer).to_string();\n\
    \    return binary;", "    if (n > m) {\n        return \"0b-1\";\n    }\n   \
    \ int sum = 0;\n    for (int i = n; i <= m; i++) {\n        sum += i;\n    }\n\
    \    int avg = sum / (m - n + 1);\n    std::string res = \"0b\";\n    while (avg\
    \ > 0) {\n        res += (avg % 2) + '0';\n        avg /= 2;\n    }\n    std::reverse(res.begin(),\
    \ res.end());\n    return res;", "    if (n > m) {\n        return Union_std_string_long(-1);\n\
    \    }\n    long avg = (n + m) / 2;\n    return Union_std_string_long(std::bitset<64>(avg).to_string());",
  "    if (n > m) {\n        return -1;\n    }\n    int average = (n + m) / 2;\n \
    \   std::string binary = std::bitset<8>(average).to_string();\n    binary.insert(0,\
    \ \"0b\");\n    return binary;", "    if (n > m) {\n        return -1;\n    }\
    \ else {\n        long sum = 0;\n        for (long i = n; i <= m; i++) {\n   \
    \         sum += i;\n        }\n        long avg = (long) std::round((double)\
    \ sum / (m - n + 1));\n        std::string res = \"0b\";\n        while (avg !=\
    \ 0) {\n            res += std::to_string(avg % 2);\n            avg /= 2;\n \
    \       }\n        std::reverse(res.begin(), res.end());\n        return res;\n\
    \    }", '    return Union_std_string_long((std::string)"");', '    ', '    return
    std::string();', "    \n    if (n > m) {\n        return -1;\n    }\n    std::vector<int>\
    \ v;\n    long sum = 0;\n    while (n <= m) {\n        sum += n;\n        n++;\n\
    \    }\n    int avg = round(sum/(n-m));\n    while (avg > 0) {\n        v.push_back(avg%2);\n\
    \        avg /= 2;\n    }\n    std::string s = \"0b\";\n    for (int i = v.size()-1;\
    \ i >= 0; i--) {\n        s += std::to_string(v[i]);\n    }\n    return s;", " \
    \   std::cout << \"n is \" << n << std::endl;\n    std::cout << \"m is \" << m\
    \ << std::endl;\n    std::string output;\n    if (n > m) {\n        output = \"\
    -1\";\n    } else {\n        long answer = (n + m) / 2;\n        output = \"0b\"\
    \ + std::bitset<8>(answer).to_string();\n    }\n    return Union_std_string_long(output);",
  "    Union_std_string_long result = std::string(\"\");\n    return result;", " \
    \   Union_std_string_long u2 = Union_std_string_long(std::string(\"0b\"));\n \
    \   if (n > m) {\n        u2 = Union_std_string_long(-1);\n    } else {\n    \
    \    long avg = (n + m) / 2;\n        std::string binary_representation = \"\"\
    ;\n        for (long i = avg; i > 0; i /= 2) {\n            binary_representation\
    \ += (i % 2 == 0) ? \"0\" : \"1\";\n        }\n        std::reverse(binary_representation.begin(),\
    \ binary_representation.end());\n        u2 = Union_std_string_long(std::string(\"\
    0b\") + binary_representation);\n    }\n    return u2;", "    if (n > m) {\n \
    \       return -1;\n    }\n    long avg = (n + m) / 2;\n    std::string binary\
    \ = std::bitset<10>(avg).to_string();\n    std::string ret = \"0b\" + binary;\n\
    \    return ret;", "    if (n > m) {\n        return -1;\n    }\n    long avg\
    \ = (n + m) / 2;\n    std::string binary_avg = std::bitset<8>(avg).to_string();\n\
    \    return \"0b\" + binary_avg;", "    if (n>m) return -1;\n    else {\n    \
    \    int avg = ((n+m)/2);\n        std::string bAvg = std::bitset< 32 >( avg ).to_string();\n\
    \        while(bAvg[0] != '1'){\n            bAvg.erase(0,1);\n        }\n   \
    \     bAvg = \"0b\" + bAvg;\n        return bAvg;\n    }", "    if (n > m) {\n\
    \        return \"0b-1\";\n    }\n    long avg = (n + m) / 2;\n    std::bitset<sizeof(int)\
    \ * 8> bset(avg);\n    return std::string(\"0b\") + bset.to_string();", '  return
    n > m ? -1 : "0b" + std::bitset<std::string(std::to_string((n + m) / 2)).size()>((n
    + m) / 2).to_string();', "    if (n > m) return -1;\n    long sum = 0;\n    for\
    \ (int i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m\
    \ - n + 1);\n    long binary = 0;\n    long remainder = 0;\n    int i = 1;\n \
    \   while (avg != 0) {\n        remainder = avg % 2;\n        avg /= 2;\n    \
    \    binary += remainder * i;\n        i *= 10;\n    }\n    return \"0b\" + std::to_string(binary);",
  "    long sum = 0;\n    int i;\n    if (n > m) {\n        return 0L;\n    }\n  \
    \  for (i = n; i <= m; i++) {\n        sum += i;\n    }\n    return std::bitset<32>(sum\
    \ / (i - n)).to_string();", "    if (n > m) return -1;\n    double avg = (n +\
    \ m) / 2.0;\n    long rounded = round(avg);\n    std::string s = std::bitset<8>(rounded).to_string();\n\
    \    return \"0b\" + s.substr(s.find('1'));", "    if (n > m) {\n        return\
    \ -1;\n    }\n    int res = 0;\n    for (int i = n; i <= m; i++) {\n        res\
    \ += i;\n    }\n    res = res / (m - n + 1);\n    std::string res_binary = \"\
    0b\";\n    std::string bin = \"\";\n    for (; res > 0; res /= 2) {\n        bin\
    \ += '0' + res % 2;\n    }\n    res_binary += bin;\n    std::reverse(res_binary.begin(),\
    \ res_binary.end());\n    return res_binary;", "    if (n>m) return -1;\n    long\
    \ sum=0;\n    for (long i=n; i<=m; i++) sum += i;\n    sum = (sum+1)/(m-n+1);\n\
    \    std::string bin = \"0b\";\n    for (long i=0; i<20; i++) {\n        if (sum\
    \ % 2 == 1) bin = \"1\" + bin;\n        else bin = \"0\" + bin;\n        sum /=\
    \ 2;\n    }\n    return bin;", "    if (n > m) return Union_std_string_long(-1);\n\
    \    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n \
    \   }\n    long avg = round(sum / (m - n + 1));\n    return Union_std_string_long(std::bitset<sizeof(long)\
    \ * 8>(avg).to_string());", "    if (n > m) {\n        return Union_std_string_long(long(-1));\n\
    \    }\n    std::vector<long>v;\n    long sum = 0;\n    for (int i = n; i <= m;\
    \ i++) {\n        v.push_back(i);\n        sum += i;\n    }\n    int avg = sum\
    \ / v.size();\n    std::string bin = std::bitset<8>(avg).to_string();\n    bin\
    \ = \"0b\" + bin;\n    return Union_std_string_long(bin);", "    if ( n > m )\
    \ return -1;\n    long sum = 0;\n    for ( long i = n; i <= m; i++ ) {\n     \
    \   sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    return std::bitset<32>(avg).to_string();",
  "    if (n > m) return -1;\n    int res = 0;\n    for (long i = n; i <= m; i++)\
    \ {\n        res += i;\n    }\n    res = res / (m - n + 1);\n    std::string binary\
    \ = std::bitset<64>(res).to_string();\n    std::string bin = \"0b\";\n    int\
    \ count = 0;\n    for (int i = binary.length() - 1; i >= 0; i--) {\n        if\
    \ (binary[i] == '1') break;\n        count++;\n    }\n    int l = binary.length()\
    \ - count;\n    for (int i = l - 1; i >= 2; i--) {\n        bin += binary[i];\n\
    \    }\n    return bin;", "    Union_std_string_long ret = -1;\n    return ret;",
  "  if (n > m) return -1;\n  long average = (n + m) / 2;\n  std::string answer =\
    \ \"0b\";\n  answer += std::bitset<8>(average).to_string();\n  return answer;",
  "    if (n > m) return -1;\n    long sm = n + m;\n    int i = 0;\n    while (sm\
    \ > 0) {\n        sm /= 2;\n        i++;\n    }\n    return std::string(\"0b\"\
    ) + std::string(i, '1');", "    long sum = 0;\n    for (long i = n; i <= m; i++)\
    \ {\n        sum += i;\n    }\n    int avg = (sum + (m - n + 1) / 2) / (m - n\
    \ + 1);\n    return std::bitset<16>(avg).to_string();", "    if (n > m) {\n  \
    \      return -1;\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++)\
    \ {\n        sum += i;\n    }\n    long rounded = round(sum * 1.0 / (m - n + 1));\n\
    \    std::string binary = \"\";\n    while (rounded > 0) {\n        binary +=\
    \ (rounded % 2 == 0 ? \"0\" : \"1\");\n        rounded /= 2;\n    }\n    std::reverse(binary.begin(),\
    \ binary.end());\n    return \"0b\" + binary;", "    if (n>m) {\n        return\
    \ -1;\n    }\n    long sum = 0;\n    int count = 0;\n    for (long i = n; i <=\
    \ m; i++) {\n        sum += i;\n        count += 1;\n    }\n    int rounded_avg\
    \ = std::round(sum/count);\n    std::string binary = std::bitset<8>(rounded_avg).to_string();\n\
    \    binary = \"0b\" + binary;\n    return binary;", "    if (n > m) {\n     \
    \   return -1;\n    }\n    // int mean = (n + m) / 2;\n    // int rounded_mean\
    \ = ((n + m) % 2 == 0) ? mean : mean + 1;\n    // std::string binary_string =\
    \ \"0b\";\n    // while (rounded_mean > 0) {\n    //     binary_string.insert(2,\
    \ \"1\");\n    //     rounded_mean /= 2;\n    // }\n    // if (binary_string.length()\
    \ == 2) {\n    //     binary_string.insert(2, \"0\");\n    // }\n    // return\
    \ binary_string;\n    return ((n + m) % 2 == 0) ? std::to_string((n + m) / 2)\
    \ : std::to_string((n + m) / 2 + 1);", "    if (n > m) {\n        return -1;\n\
    \    }\n    // Compute the average between n and m.\n    long avg = (n + m) /\
    \ 2;\n    // Round the answer to the nearest integer.\n    if ((n + m) % 2 ==\
    \ 1) {\n        avg += 1;\n    }\n    // Convert the answer to binary.\n    std::string\
    \ binary = \"\";\n    if (avg == 0) {\n        binary = \"0\";\n    }\n    while\
    \ (avg > 0) {\n        binary = ((avg % 2 == 0) ? \"0\" : \"1\") + binary;\n \
    \       avg /= 2;\n    }\n    // Return the answer.\n    return \"0b\" + binary;",
  "    if (n > m) return long(-1);\n    int sum = 0;\n    for (long i = n; i <= m;\
    \ i++) {\n        sum += i;\n    }\n    return long(sum / (m - n + 1));", "  \
    \  if (n > m) return long(-1);\n    Union_std_string_long ret(long(0));\n    std::vector<long>\
    \ retval;\n    long sum = long(0);\n    for (long i = n; i <= m; i++) {\n    \
    \    sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    while (avg > 0)\
    \ {\n        retval.push_back(avg % 2);\n        avg /= 2;\n    }\n    std::reverse(retval.begin(),\
    \ retval.end());\n    std::string ret_str = \"0b\";\n    for (auto num : retval)\
    \ {\n        ret_str += std::to_string(num);\n    }\n    ret = ret_str;\n    return\
    \ ret;", "    if (n > m) {\n        return -1;\n    }\n    long sum = 0;\n   \
    \ for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long rounded_avg\
    \ = std::round(sum / (m - n + 1));\n    std::stringstream sstream;\n    sstream\
    \ << std::bitset<32>(rounded_avg);\n    std::string binary_as_string = sstream.str();\n\
    \    return \"0b\" + binary_as_string;", "    double avg = (n + m) / 2.0;\n  \
    \  if (avg > m) {\n        return Union_std_string_long(-1L);\n    }\n    return\
    \ Union_std_string_long(std::bitset<8>(static_cast<long>(std::round(avg))).to_string());",
  "    if (n > m) {\n        return -1;\n    }\n    else if (n == m) {\n        return\
    \ Union_std_string_long(std::bitset<32>(n).to_string());\n    }\n    else {\n\
    \        double d = 0;\n        for (int i = n; i <= m; i++) {\n            d\
    \ += i;\n        }\n        d /= (m - n + 1);\n        d = round(d);\n       \
    \ return Union_std_string_long(std::bitset<32>(int(d)).to_string());\n    }",
  "    if (n > m) {\n        return -1;\n    }\n    else {\n        long x = (n +\
    \ m) / 2;\n        std::string res = \"0b\";\n        for (int i = 0; i < 32;\
    \ i++) {\n            if (x % 2 == 1) {\n                res = \"1\" + res;\n\
    \            }\n            else {\n                res = \"0\" + res;\n     \
    \       }\n            x = x / 2;\n        }\n        return res;\n    }", " \
    \   if (n > m) return -1;\n    int sum = 0;\n    for (long i = n; i <= m; i++)\
    \ sum += i;\n    double result = sum / (m - n + 1);\n    int rounded_result =\
    \ round(result);\n    std::string binary_result = std::bitset<32>(rounded_result).to_string();\n\
    \    while (binary_result[0] == '0') binary_result.erase(0, 1);\n    return std::string(\"\
    0b\") + binary_result;"]
stop_tokens:
- "\n}"
