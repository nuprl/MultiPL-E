name: HumanEval_24_largest_divisor
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tlong largest = 1;\n\tfor (long i = 2;\
    \ i <= n / 2; i++) {\n\t\tif (n % i == 0) {\n\t\t\tlargest = i;\n\t\t}\n\t}\n\t\
    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    // <<< Write code\
    \ here to return largest divisor of n, smaller than n\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpxr9nd0gi: /tmp/tmpxr9nd0gi.cpp:13: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tfor (long i = n - 1; i > 0; i--) {\n\t\
    \tif (n % i == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 0;\n    for (long\
    \ i = n-1; i >= 1; i--) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n            break;\n        }\n    }\n    return largest_divisor;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long largest = 0;\n  for (long i = 1;\
    \ i < n; i++) {\n    if (n % i == 0) {\n      largest = i;\n    }\n  }\n  return\
    \ largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 0;\n    for (long\
    \ i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpr1a9rfkc: /tmp/tmpr1a9rfkc.cpp:17: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 0);\n    for (long i = n-1;\
    \ i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    std::vector<long> divisors;\n    //\
    \ check all numbers less than or equal to n/2\n    for (long i = 1; i <= n/2;\
    \ i++) {\n        if (n % i == 0) {\n            divisors.push_back(i);\n    \
    \    }\n    }\n    // return the largest divisor\n    return divisors.back();\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    int divisor = 2;\n    while (n % divisor\
    \ != 0 && divisor <= n) {\n        divisor++;\n    }\n    return divisor;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmprpe5upjo: /tmp/tmprpe5upjo.cpp:15: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long a = n;\n    while (a > 0) {\n \
    \       if (n % a == 0) {\n            return a;\n        }\n        a--;\n  \
    \  }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpknq5bf4v: /tmp/tmpknq5bf4v.cpp:18: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long divisor = n / 2;\n    while (divisor\
    \ > 0) {\n        if (n % divisor == 0) {\n            return divisor;\n     \
    \   }\n        divisor--;\n    }\n    return 1;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // Your code here\n  // you may modify\
    \ the following line\n  long res = n - 1;\n  while (n % res != 0) {\n    res--;\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // Write your code here\n  long divisor\
    \ = 1;\n  for(int i = 1; i <= n; i++) {\n    if(n % i == 0) {\n      divisor =\
    \ i;\n    }\n  }\n  return divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpbzanlb_4: /tmp/tmpbzanlb_4.cpp:18: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tif (n <= 1) return n;\n\tfor (long i =\
    \ n - 1; i > 0; i--) {\n\t\tif (n % i == 0) return i;\n\t}\n\treturn 1;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = -1;\n    for (long i\
    \ = 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n  \
    \      }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long divisor = n/2; divisor >=\
    \ 1; divisor--) {\n        if (n % divisor == 0) {\n            return divisor;\n\
    \        }\n    }\n    return 1; // special case for prime numbers\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    \n    for(long\
    \ i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            return i;\n\
    \        }\n    }\n    return 1;\n    \n}\nint main() {\n    auto candidate =\
    \ largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    int m = (int)sqrt(n);\n\
    \    for (int i = m; i >= 1; i--) {\n        if (n % i == 0) {\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpupp0q9ny: /tmp/tmpupp0q9ny.cpp:20: int main(): Assertion `candidate((10))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long max_dividend = 0;\n    for (long\
    \ i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            max_dividend =\
    \ i;\n        }\n    }\n    return max_dividend;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpfjadoy01: /tmp/tmpfjadoy01.cpp:17: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    int max_divisor = 0;\n    for (int i\
    \ = 1; i <= n / 2; i++) {\n        if (n % i == 0) {\n            max_divisor\
    \ = i;\n        }\n    }\n    return max_divisor;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here...\n    long i;\n\
    \    for(i=n-1;i>0;i--)\n    {\n        if(n%i==0)\n        {\n            return\
    \ i;\n        }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    for (long i = n-1;\
    \ i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n\
    \    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  for (long i = n - 1; i > 0; i--) {\n \
    \   if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // your code goes here\n  return 0;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmp8r5aypur: /tmp/tmp8r5aypur.cpp:12: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tlong largest = 0;\n\tfor (long i = 1;\
    \ i < n; i++) {\n\t\tif (n % i == 0) {\n\t\t\tlargest = i;\n\t\t}\n\t}\n\treturn\
    \ largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\t//Edge cases \n\tif (n <= 0) {\n\t\tthrow\
    \ std::invalid_argument(\"value has to be positive\");\n\t}\n\t// Loop from n\
    \ - 1 and divide it by n to find the perfect divisor\n\tfor (long i = n - 1; i\
    \ > 0; i--) {\n\t\tif (n % i == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // The largest divisor of n is n-1 if\
    \ n is prime\n    long largest_divisor = n - 1;\n    // Check each value up to\
    \ n-1\n    for (long i = largest_divisor; i > 0; i--) {\n        // Check if n\
    \ divided by i is even\n        if (n % i == 0) {\n            // This is the\
    \ largest divisor\n            largest_divisor = i;\n            // Skip to the\
    \ next value\n            break;\n        }\n    }\n    return largest_divisor;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  for (long i = n - 1; i > 0; i--) {\n \
    \   if (n % i == 0) {\n      return i;\n    }\n  }\n  assert(false);\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // your code goes here\n  int j = (n/2);\n\
    \  for(int i = j; i > 0; i--){\n    if((n%i) == 0){\n      return i;\n    }\n\
    \  }\n  return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n  \
    \  assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long largest_factor = 1;\n  for (long\
    \ i = 2; i < n; i++) {\n    if (n % i == 0) {\n      largest_factor = i;\n   \
    \ }\n  }\n  return largest_factor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // your code goes here\n  long divisor\
    \ = 0;\n  for(long i = n-1; i > 0; i--){\n    if(n%i == 0){\n      divisor = i;\n\
    \      break;\n    }\n  }\n  return divisor;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    // Write your code\
    \ here\n    int c=0;\n    for(int i=2;i<=n;i++)\n    {\n        if(n%i==0)\n \
    \       {\n            c=i;\n        }\n    }\n    return c;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmp6gba5hv7: /tmp/tmp6gba5hv7.cpp:21: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long largest = 0;\n  for (long i = 1;\
    \ i < n; i++) {\n    if (n % i == 0) {\n      largest = i;\n    }\n  }\n  return\
    \ largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = (n / 2); i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tassert(n > 0);\n\tlong i = n / 2;\n\t\
    while (i > 0) {\n\t\tif (n % i == 0) {\n\t\t\treturn i;\n\t\t}\n\t\ti -= 1;\n\t\
    }\n\treturn 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  \n  long biggest_so_far = 0;\n  for (long\
    \ i = n-1; i > 0; i--) {\n    if (n % i == 0) {\n      biggest_so_far = i;\n \
    \     break;\n    }\n  }\n  return biggest_so_far;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n>0);\n    while(n%2==0) n =\
    \ n/2;\n    if(n==1) return 1;\n    long largest = 1;\n    for(long i=3; i<=(sqrt(n)+1);\
    \ i+=2) {\n        if(n%i==0) {\n            largest = i;\n            while(n%i==0)\
    \ n = n/i;\n        }\n    }\n    if(n>largest) largest = n;\n    return largest;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmp3pmy_k8d: /tmp/tmp3pmy_k8d.cpp:22: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    assert(false);\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  for (long i = n-1; i > 0; i--) {\n   \
    \ if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 1;\n    for (long i =\
    \ 2; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // create a dumby prime list, numbers\
    \ between 2 and n//\n    // NOTE : this is a list of ints and not primes \n  \
    \  //  we can use primes from 2 to n to find the largest prime factor \n    //\
    \ but for this exercice we will be using a list of all the numbers below n\n \
    \   std::vector<long> v;\n    long i;\n    for (i = 2; i < n; i++)\n        v.push_back(i);\n\
    \    // see if n is divisble by the numbers in the vector\n    for (i = 2; i <\
    \ n; i++) {\n        if (n % i == 0) {\n            // if it is then reduce v\
    \ to smaller numbers\n            v.resize(std::distance(v.begin(),\n        \
    \        std::lower_bound(v.begin(), v.end(), n / i)));\n            return v.back();\n\
    \        }\n    }\n    assert(false);\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmp_jhdoksb: /tmp/tmp_jhdoksb.cpp:24: long int largest_divisor(long int):\
    \ Assertion `false' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tlong divisor = 2;\n\tlong largest = 0;\n\
    \twhile (n != 1) {\n\t\tif (n % divisor == 0) {\n\t\t\tn /= divisor;\n\t\t\tlargest\
    \ = divisor;\n\t\t}\n\t\telse {\n\t\t\tdivisor++;\n\t\t}\n\t}\n\treturn largest;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmpih014krg: /tmp/tmpih014krg.cpp:22: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = n;\n    for (int\
    \ i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpdlv05md_: /tmp/tmpdlv05md_.cpp:17: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n > 0);\n  for (long i = n - 1;\
    \ i > 0; i--) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // ... REPLACE THIS LINE WITH YOUR CODE\n\
    \    return n-1;\n}\nint main() {\n    auto candidate = largest_divisor;\n   \
    \ assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmp4axbxw3n: /tmp/tmp4axbxw3n.cpp:12: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    int i;\n    for(i=n/2;i>=2;i--)\n  \
    \  {\n        if(n%i==0)\n            break;\n    }\n    return i;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tfor (long i = n-1; i > 0; i--) {\n\t\t\
    if (n % i == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 1;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n >= 1);\n  long d = 2;\n  while\
    \ (n % d != 0) {\n    d = d + 1;\n  }\n  return d;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpy9dy3uzl: /tmp/tmpy9dy3uzl.cpp:16: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  /*\n  assert(n > 0);\n  for (int i = 1;\
    \ i < n; i++) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return\
    \ 0;\n  */\n  long m = (long)sqrt(n);\n  for (long i = m; i > 0; i--) {\n    if\
    \ (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmp_pk6xlme: /tmp/tmp_pk6xlme.cpp:28: int main(): Assertion `candidate((10))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    for (long i = n\
    \ - 1; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n    \
    \    }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  for (long i = n - 1; i > 0; i--) {\n \
    \   if (n % i == 0) {\n      return i;\n    }\n  }\n  return 1;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\t// Write your code here\n\t// To print\
    \ results to the standard output you can use printf()\n\t// Example: printf(\"\
    %s\", \"Hello world!\");\n\tlong m=1;\n\tfor(long i=2;i<n;i++)\n\t{\n\t\tif(n%i==0)\n\
    \t\t\tm=i;\n\t}\n\treturn m;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n   long divisor = 1;\n   for (int i = 2;\
    \ i < n; i++) {\n       if (n % i == 0) {\n           divisor = i;\n       }\n\
    \   }\n   return divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  return -1;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmp46pg7c25: /tmp/tmp46pg7c25.cpp:11: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tassert(n >= 0);\n\tlong largest = -1;\n\
    \tlong start = n / 2;\n\tfor (long i = start; i > 0; i--) {\n\t\tif (n % i ==\
    \ 0) {\n\t\t\tlargest = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn largest;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long n1=n;\n    long n2=n;\n    long\
    \ r,d;\n    for(int i=1;i<=n1;i++){\n        r=n2%i;\n        if(r==0){\n    \
    \        d=i;\n        }\n    }\n    return d;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpxvwjqhnp: /tmp/tmpxvwjqhnp.cpp:20: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    if (n == 1) {\n        return 1;\n \
    \   }\n    long divisor = 2;\n    while (n % divisor != 0) {\n        divisor\
    \ += 1;\n    }\n    return divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmp80sqguko: /tmp/tmp80sqguko.cpp:18: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n >= 0);\n  long largest = 0;\n\
    \  for (long i = 1; i < n; i++) {\n    if (n % i == 0) {\n      largest = i;\n\
    \    }\n  }\n  return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long result = n;\n    for (long i =\
    \ 2; i <= n; i++) {\n        if (n % i == 0) {\n            result = i;\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpi2uhs7gz: /tmp/tmpi2uhs7gz.cpp:17: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    assert(false);\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  for (long i = n - 1; i > 0; i--) {\n \
    \   if (n % i == 0) return i;\n  }\n  assert(false);\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = sqrt(n); i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmphni8t804: /tmp/tmphni8t804.cpp:18: int main(): Assertion `candidate((10))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n >= 1);\n  long d = 2;\n  long\
    \ maxDivisor = 1;\n  while (d * d <= n) {\n    if (n % d == 0) {\n      maxDivisor\
    \ = d;\n    }\n    d += 1;\n  }\n  return maxDivisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpd33ybl56: /tmp/tmpd33ybl56.cpp:22: int main(): Assertion `candidate((10))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code goes here\n    long largest\
    \ = 0;\n    for(long i = 1; i<= n; i++){\n        if(n%i == 0){\n            largest\
    \ = i;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmp_d_i0wlk: /tmp/tmp_d_i0wlk.cpp:18: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // write your solution here\n    int\
    \ i = 2;\n    while(n%i != 0){\n        i++;\n    }\n    return i;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpgzoa39mf: /tmp/tmpgzoa39mf.cpp:16: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // n is a positive integer.\n  assert(n\
    \ > 0);\n  // Replace the following line with your solution.\n  if (n == 1) return\
    \ 1;\n  for (long i = n-1; i >= 2; i--) {\n    if (n % i == 0) return i;\n  }\n\
    \  return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  return n % 2 == 0 ? n / 2 : n / 3;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmp45853gqr: /tmp/tmp45853gqr.cpp:12: int main(): Assertion `candidate((7))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long divisor = 2;\n    while (n > divisor)\
    \ {\n        if (n % divisor == 0) {\n            n = n / divisor;\n         \
    \   divisor = 2;\n        } else {\n            divisor++;\n        }\n    }\n\
    \    return divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpl3hax_d7: /tmp/tmpl3hax_d7.cpp:20: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tstd::vector<long> factors;\n\tfor (long\
    \ i = 1; i <= n; i++) {\n\t\tif (n % i == 0)\n\t\t\tfactors.push_back(i);\n\t\
    }\n\treturn factors[factors.size() - 2];\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  for (long i = n/2; i > 0; i--) {\n   \
    \ if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // We can take advantage of the fact\
    \ that any number greater than n/2 will not divide n evenly\n    // So the range\
    \ we should search is [2, n/2]\n    // If we can find a number in this range that\
    \ divides n evenly, return that number\n    // If no number in this range divides\
    \ n evenly, then n is prime, so return n\n    for (long i = n/2; i >= 2; i--)\
    \ {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmpfdeovhyg: /tmp/tmpfdeovhyg.cpp:20: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i=n-1;\n    for( ; i>=1; i--){\n\
    \        if(n%i==0) return i;\n    }\n    return i;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long dividend = n;\n  long divisor = 2;\n\
    \  long largest_divisor = 1;\n  while (divisor <= n) {\n    if (dividend % divisor\
    \ == 0) {\n      largest_divisor = divisor;\n      dividend = dividend / divisor;\n\
    \    } else {\n      divisor += 1;\n    }\n  }\n  return largest_divisor;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmpjekhguqu: /tmp/tmpjekhguqu.cpp:22: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n >= 1);\n  long i = n / 2;\n \
    \ while (i > 0) {\n    if (n % i == 0) {\n      return i;\n    }\n    i--;\n \
    \ }\n  return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n   \
    \ assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // >>> largest_divisor(100)\n    //\
    \ 10\n    // >>> largest_divisor(89)\n    // 1\n    // >>> largest_divisor(12)\n\
    \    // 6\n    // Hint: google \"largest divisor of n\"\n    for(long i=n/2;i>=1;i--)\n\
    \    {\n        if(n%i==0)\n        {\n            return i;\n        }\n    }\n\
    \    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i = n/2;\n    while(i > 0) {\n\
    \        if(n % i == 0) {\n            return i;\n        }\n        i--;\n  \
    \  }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // for a given number, iterate from\
    \ 2 through the number, checking for\n    // whether it divides the number evenly.\
    \ If it does, return the number.\n    // If it does not, continue iterating through\
    \ the numbers below the given\n    // one.\n    for (long divisor = n - 1; divisor\
    \ > 1; divisor--) {\n        if (n % divisor == 0) {\n            return divisor;\n\
    \        }\n    }\n    // if no number divides n evenly, return 1.\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    for (i = n - 1; i > 0;\
    \ i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n\
    \    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // Write your code here.\n  //long *a=new\
    \ long[n];\n  std::vector<long> a;\n  for(long i=1;i<n;i++)\n  {\n  \tif(n%i==0)\n\
    \  \t\ta.push_back(i);\n  }\n  return a[a.size()-1];\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // TODO - you fill in here.\n\tlong i;\n\
    \tfor(i=n/2;i>=1;i--)\n\t{\n\t\tif(n%i==0)\n\t\t\tbreak;\n\t}\n\tassert(i>=1);\n\
    \treturn i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // assume n > 0\n    int i;\n    for\
    \ (i = n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n\
    \        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    int i;\n    for\
    \ (i = n/2; i > 1; i--) {\n        if (n % i == 0) {\n            return i;\n\
    \        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor=0;\n    for(long\
    \ i=1;i<n;i++){\n        if(n%i==0){\n            largest_divisor=i;\n       \
    \ }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto candidate =\
    \ largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i = 2;\n    for (i = 2; i < n;\
    \ i++) {\n        if (n % i == 0) {\n            break;\n        }\n    }\n  \
    \  return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmpln6u2kjl: /tmp/tmpln6u2kjl.cpp:17: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    for (long i = n\
    \ - 1; i > 0; i--) {\n        if (n % i == 0) return i;\n    }\n    return -1;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long divisor=2;\n  while(n%divisor!=0){\n\
    \    divisor++;\n  }\n  return divisor;\n}\nint main() {\n    auto candidate =\
    \ largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpndmrde4o: /tmp/tmpndmrde4o.cpp:15: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  for (long i = n - 1; i > 0; i--) {\n \
    \   if (n % i == 0) return i;\n  }\n  return 1;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n/2; i > 0; i--) {\n \
    \       if (n % i == 0) return i;\n    }\n    return 1;\n}\nint main() {\n   \
    \ auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long d = n / 2; d > 0; d--) {\n\
    \        if (n % d == 0) {\n            return d;\n        }\n    }\n    assert(false);\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    assert(false);\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    for (long i = n\
    \ - 1; i >= 1; i--) {\n        if (n % i == 0) {\n            return i;\n    \
    \    }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    //  Your code goes here\n    assert(n>0);\n\
    \    for(long i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n        \
    \    return i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\t// >>> your code here <<<\n\tlong sq =\
    \ sqrt(n);\n\tfor (long i = sq; i > 0; i--) {\n\t\tif (n % i == 0) return i;\n\
    \t}\n\treturn 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n   \
    \ assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpctkkjwsj: /tmp/tmpctkkjwsj.cpp:18: int main(): Assertion `candidate((10))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = 2; i < n; i++) {\n   \
    \     if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Make a guess x. If x is incorrect,\
    \ we'll either have to go up or down\n    // to find the answer\n    // For now,\
    \ lets just keep guessing, until we find the answer\n    for (long x = n - 1;\
    \ x > 0; x--) {\n        if (n % x == 0) {\n            return x;\n        }\n\
    \    }\n    // Should never reach here\n    assert(false);\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // your code here\n\tlong divisor =\
    \ n;\n\tlong i = n;\n\tfor(i = n-1; i > 0; i--){\n\t\tif(n%i == 0){\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    if (n == 1) return 1;\n    long  curr\
    \ = 2;\n    while (curr < n) {\n        if (n % curr == 0) return n / curr;\n\
    \        curr += 1;\n    }\n    return 1;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Corner case\n    if (n == 1) {\n\
    \        return 1;\n    }\n    // Look for divisors from 2 to sqrt(n)\n    long\
    \ d = 2;\n    while (d * d <= n) {\n        if (n % d == 0) {\n            return\
    \ n / d;\n        }\n        d++;\n    }\n    // Return n if no divisor found\n\
    \    return n;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmpp4pqgjy3: /tmp/tmpp4pqgjy3.cpp:24: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long curr_divisor = 2;\n    while (n\
    \ % curr_divisor != 0) {\n        curr_divisor += 1;\n    }\n    return curr_divisor;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmp3kh8i7sz: /tmp/tmp3kh8i7sz.cpp:15: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Your code here\n    int count = 0;\n\
    \    for(int i = n-1; i > 0; i--){\n        if(n%i == 0){\n            count++;\n\
    \            if(count >= 1){\n                return i;\n            }\n     \
    \   }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    \n    \n    int i;\n    long r;\n  \
    \  for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n            r=i;\n\
    \            break;\n        }\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n >= 0);\n  for (long i = n - 1;\
    \ i > 0; i--) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tfor (long i = n-1; i >= 1; i--) {\n\t\t\
    if (n % i == 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn 0;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long j = n/2;\n    while(j>0){\n   \
    \     if(n%j==0){\n            return j;\n        }\n        j--;\n    }\n   \
    \ return j;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largestDivisor = 1;\n    for (long\
    \ i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            largestDivisor\
    \ = i;\n        }\n    }\n    return largestDivisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmptcfqe6mz: /tmp/tmptcfqe6mz.cpp:17: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    long i = n;\n \
    \   for (i = n; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n\
    \        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmp1431l0qo: /tmp/tmp1431l0qo.cpp:18: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // Start with the smallest possible divisor\
    \ and work up to n/2\n  // So that we can skip even numbers\n  for (long i = 3;\
    \ i <= n/2; i += 2) {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmpmboisrrz: /tmp/tmpmboisrrz.cpp:21: int main(): Assertion `candidate((100))\
    \ == (50)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    long divisor =\
    \ n - 1;\n    for (; divisor > 0; divisor--) {\n        if (n % divisor == 0)\
    \ {\n            return divisor;\n        }\n    }\n    assert(false);\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  int largest_factor = 1;\n  int test_factor\
    \ = 2;\n  while (test_factor * test_factor <= n) {\n    if (n % test_factor ==\
    \ 0) {\n      largest_factor = test_factor;\n    }\n    test_factor += 1;\n  }\n\
    \  return largest_factor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpy9caccdz: /tmp/tmpy9caccdz.cpp:21: int main(): Assertion `candidate((10))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Your code here\n    if(n==1)\n  \
    \  return 1;\n    long i=n-1;\n    while(i>0)\n    {\n        if(n%i==0)\n   \
    \     return i;\n        i--;\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\t// Your code here\n\tint i = 2;\n\tfor\
    \ (i = 2; i < n; i++) {\n\t\tif (n % i == 0)\n\t\t\tbreak;\n\t}\n\treturn i;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmp7p1wvkin: /tmp/tmp7p1wvkin.cpp:17: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tfor (long i = n-1; i > 0; i--) {\n\t\t\
    if (n % i == 0) return i;\n\t}\n\treturn 0;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here.\n    //to find\
    \ the all the prime factors\n    long n_temp = n;\n    long prime_divisor = 2;\n\
    \    long largest_divisor = 1;\n    while(n_temp > 1){\n        if(n_temp % prime_divisor\
    \ == 0){\n            largest_divisor = prime_divisor;\n            n_temp = n_temp\
    \ / prime_divisor;\n        }\n        else{\n            prime_divisor = prime_divisor\
    \ + 1;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpmpjwa9_6: /tmp/tmpmpjwa9_6.cpp:25: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 0);\n    long l = 0;\n \
    \   long cnt = 0;\n    int flag = 0;\n    for(long i = 2; i < n; i++) {\n    \
    \    if(n % i == 0) {\n            l = i;\n            flag = 1;\n        }\n\
    \    }\n    if(flag == 0) {\n        return n;\n    }\n    return l;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpakfxn2ic: /tmp/tmpakfxn2ic.cpp:24: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 0;\n    for (long\
    \ i = 1; i < n; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n >= 0);\n  for (long d = n - 1;\
    \ d >= 1; d -= 1) {\n    if (n % d == 0) {\n      return d;\n    }\n  }\n  assert(false);\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    for(long\
    \ i=n-1;i>=2;i--)\n    {\n        if(n%i==0)\n        {\n            return i;\n\
    \        }\n    }\n    return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmp70pwmeet: /tmp/tmp70pwmeet.cpp:19: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // Your code here.\n  int i;\n  for(i=n/2;i>=2;i--)\n\
    \  {\n    if(n%i==0)\n    {\n      return i;\n    }\n  }\n  return -1;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  stdout: ''
  stderr: "tmph_i7gkdd: /tmp/tmph_i7gkdd.cpp:20: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long m;\n    for (m = n - 1; m > 0;\
    \ m--) {\n        if (n % m == 0) {\n            return m;\n        }\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    \n    if(n%2 == 0)\n        return n/2;\n\
    \    else\n        return n/3;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmp33zdivv6: /tmp/tmp33zdivv6.cpp:16: int main(): Assertion `candidate((7))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    int max = 0;\n \
    \   // Enter your code here.\n    for(int i = 1; i < n; i++){\n        if(n %\
    \ i == 0 && i > max){\n            max = i;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor = 0;\n    for (long\
    \ i = 1; i <= n / 2; i++) {\n        if (n % i == 0) {\n            largest_divisor\
    \ = i;\n        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n   std::list<long> dividers = {};\n   for\
    \ (long i = 2; i <= sqrt(n); i++) {\n      if (n % i == 0) {\n         dividers.push_back(i);\n\
    \      }\n   }\n   // return largest element in the list\n   return *std::max_element(dividers.begin(),\
    \ dividers.end());\n}\nint main() {\n    auto candidate = largest_divisor;\n \
    \   assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmp8hkt4ozy: /tmp/tmp8hkt4ozy.cpp:18: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long divisor = n - 1;\n  while (divisor\
    \ > 0) {\n    if (n % divisor == 0) {\n      return divisor;\n    }\n    divisor\
    \ -= 1;\n  }\n  return 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long res = 2;\n  long div = res*res;\n\
    \  while (div <= n) {\n    if (n % div == 0) {\n      res = div;\n    }\n    div\
    \ += res;\n  }\n  return res;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpfgb5yjsr: /tmp/tmpfgb5yjsr.cpp:19: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    \n    long max = 1;\n    for(long i\
    \ = 2; i <= n/2; i++)\n    {\n        if(n % i == 0)\n        {\n            max\
    \ = i;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    int largest;\n    for (int i = 1; i\
    \ <= n / 2; i++) {\n        if (n % i == 0) {\n            largest = i;\n    \
    \    }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  for (long i = n-1; i >= 1; i--) {\n  \
    \  if (n % i == 0) {\n      return i;\n    }\n  }\n  return 0;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // Your code here\n  for(long i=n-1;i>=1;i--)\n\
    \  {\n      if(n%i==0)\n      {\n          return i;\n      }\n  }\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tassert(n>0);\n\tlong i;\n\tlong div =\
    \ n;\n\tfor(i=n-1;i>=2;i--){\n\t\tif(n%i==0){\n\t\t\tdiv = i;\n\t\t\tbreak;\n\t\
    \t}\n\t}\n\treturn div;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpi2n0x2mo: /tmp/tmpi2n0x2mo.cpp:20: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i = n-1;\n    while(n%i != 0) {\n\
    \        i--;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // start with the smallest divisor (1)\
    \ and work upward\n    for (long i = 1; i < n; i++) {\n        // Is the number\
    \ evenly divisible?\n        if (n % i == 0) {\n            // Yes, this number\
    \ is the answer so far\n            return i;\n        }\n    }\n    // if we\
    \ get here, the answer is 1\n    return 1;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmp1q612hm3: /tmp/tmp1q612hm3.cpp:22: int main(): Assertion `candidate((10))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long largest = 0;\n  for (long i = 1;\
    \ i < n; i++) {\n    if (n % i == 0) {\n      largest = i;\n    }\n  }\n  return\
    \ largest;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ divisors = {};\n    long result = 0;\n    for (long i = 1; i <= n; i++) {\n\
    \        if (n % i == 0) {\n            divisors.push_back(i);\n        }\n  \
    \  }\n    result = divisors[divisors.size() - 2];\n    return result;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n >= 0);\n  for (long i = n-1;\
    \ i > 0; i--) {\n    if (n % i == 0) return i;\n  }\n  return -1;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long divisor = n - 1;\n    while (divisor\
    \ > 0) {\n        if (n % divisor == 0) {\n            return divisor;\n     \
    \   }\n        divisor -= 1;\n    }\n    return 0;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n > 0);\n  // Start with a candidate\
    \ divisor equal to n / 2 and iteratively reduce it by 1.\n  // We stop when the\
    \ divisor is less than or equal to 2.\n  for (long divisor = n / 2; divisor >=\
    \ 2; --divisor) {\n    if (n % divisor == 0) {\n      return divisor;\n    }\n\
    \  }\n  return 1; // Special case for prime numbers.\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long max = -1;\n  for (long i = 1; i <\
    \ n; i++) {\n    if (n % i == 0) {\n      max = i;\n    }\n  }\n  return max;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // Write your code here\n  long i=1;\n\
    \  long max=0;\n  long maxi=0;\n  while(i<=n)\n  {\n      if(n%i==0)\n      {\n\
    \          max=i;\n          maxi=i;\n      }\n      i++;\n  }\n  return maxi;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmp8pt4sn7v: /tmp/tmp8pt4sn7v.cpp:24: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    int limit = sqrt(n);\n    for (int i\
    \ = limit; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n \
    \       }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpibnb4kk3: /tmp/tmpibnb4kk3.cpp:19: int main(): Assertion `candidate((10))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // first find the smallest prime factor\n\
    \    long limit = sqrt(n);\n    int i;\n    for (i = 2; i <= limit; i++) {\n \
    \       if (n % i == 0) {\n            break;\n        }\n    }\n    // if n is\
    \ prime\n    if (i > limit) {\n        return 1;\n    }\n    // return the largest\
    \ factor\n    return n / i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // YOUR CODE HERE\n    long i = 2;\n\
    \    for(i = 2; i < n; i++){\n        if(n % i == 0){\n            break;\n  \
    \      }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmp16m7m4l9: /tmp/tmp16m7m4l9.cpp:18: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n >= 1);\n  long d = n - 1;\n \
    \ while (n % d != 0) {\n    d -= 1;\n  }\n  return d;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long divisor = 1;\n    while (n % 2\
    \ == 0) {\n        n /= 2;\n        divisor = 2;\n    }\n    long i = 3;\n   \
    \ while (i < n) {\n        if (n % i == 0) {\n            n /= i;\n          \
    \  divisor = i;\n        } else {\n            i += 2;\n        }\n    }\n   \
    \ return divisor;\n}\nint main() {\n    auto candidate = largest_divisor;\n  \
    \  assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpumegmtcd: /tmp/tmpumegmtcd.cpp:27: int main(): Assertion `candidate((10))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 1);\n    std::set<long>\
    \ divisors;\n    for (long i = 1; i < sqrt(n) + 1; i++) {\n        if (n % i ==\
    \ 0) {\n            divisors.insert(i);\n            divisors.insert(n / i);\n\
    \        }\n    }\n    return *divisors.rbegin();\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmp58surjg6: /tmp/tmp58surjg6.cpp:19: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long i;\n  for (i = n-1; i >= 2; i--)\
    \ {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return 1;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // >>> Add your code here\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: "tmpgs_z84dw: /tmp/tmpgs_z84dw.cpp:12: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here.\n    long largestDivisor\
    \ = 1;\n    long limit = n;\n    for(long i = 2; i <= limit; i++){\n        if(n\
    \ % i == 0){\n            largestDivisor = i;\n            limit = n / i;\n  \
    \      }\n    }\n    return largestDivisor;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpbks1rxuk: /tmp/tmpbks1rxuk.cpp:20: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    int count = 0;\n    long divisor = 1;\n\
    \    while (n > 1) {\n        if (n % 2 == 0) {\n            count += 1;\n   \
    \         n = n / 2;\n        } else {\n            divisor = divisor * pow(2,\
    \ count);\n            count = 0;\n            n = n - 1;\n        }\n    }\n\
    \    return divisor * pow(2, count);\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpprhvshzf: /tmp/tmpprhvshzf.cpp:23: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 0);\n    if (n == 0) {\n\
    \        return 0;\n    }\n    long largest_divisor = 1;\n    long i = n / 2;\n\
    \    while (i > 1) {\n        if (n % i == 0) {\n            largest_divisor =\
    \ i;\n            break;\n        }\n        i -= 1;\n    }\n    return largest_divisor;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    long greatest_factor\
    \ = 1;\n    for(long i = 2; i*i <= n; i++){\n        if(n%i == 0){\n         \
    \   if(n/i > i){\n                greatest_factor = n/i;\n            }\n    \
    \        else{\n                greatest_factor = i;\n            }\n        }\n\
    \    }\n    return greatest_factor;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpw3t_tt92: /tmp/tmpw3t_tt92.cpp:26: int main(): Assertion `candidate((100))\
    \ == (50)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // INSERT YOUR CODE HERE\n  int x = sqrt(n);\n\
    \  while(n%x!=0) {\n    x--;\n  }\n  return x;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmp3jc5g209: /tmp/tmp3jc5g209.cpp:18: int main(): Assertion `candidate((10))\
    \ == (5)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long d = 2;\n  while (n % d != 0) {\n\
    \    d++;\n  }\n  return d;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpl_ga064a: /tmp/tmpl_ga064a.cpp:15: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Your code here\n    if(n==1) return\
    \ 1;\n    else {\n        long max=1;\n        for(long i=2;i<n;i++) {\n     \
    \       if(n%i==0 && i>max) max=i;\n        }\n        return max;\n    }\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    for (long i = n\
    \ - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n     \
    \   }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n > 0);\n  // hint: try all numbers\
    \ i from 1 to n\n  int max_divisor = 1;\n  for (int i = 1; i < n; i++) {\n   \
    \ if (n % i == 0) {\n      max_divisor = i;\n    }\n  }\n  return max_divisor;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // you write your code here\n    int\
    \ i;\n    for(i=n-1;i>=1;i--)\n    {\n        if(n%i==0)\n        {\n        \
    \    return i;\n        }\n    }\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tfor (long i = n - 1; i > 0; i--) {\n\t\
    \tif (n % i == 0)\n\t\t\treturn i;\n\t}\n\treturn 0;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n-1; i > 0; i--) {\n \
    \       if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tlong i;\n\tlong max = 1;\n\tfor (i = 2;\
    \ i < n; i++) {\n\t\tif (n % i == 0)\n\t\t\tmax = i;\n\t}\n\treturn max;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    int index = -1;\n    for(int i = 2;\
    \ i<n/2; i++){\n        if(n%i == 0){\n            index = i;\n        }\n   \
    \ }\n    if(index == -1){\n        return n;\n    }\n    return index;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  stdout: ''
  stderr: "tmp_ur_ycr0: /tmp/tmp_ur_ycr0.cpp:20: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long i;\n    if(n==0){\n        return\
    \ 1;\n    }\n    for(i=n-1;i>0;i--){\n        if(n%i==0){\n            return\
    \ i;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    assert(false);\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // 1. Attempt to divide n by every number\n\
    \    // 2. Try to divide n by every smaller number until\n    //      you get\
    \ a divisor that is < n\n    // 3. Return the result\n\n    //Return the largest\
    \ divisor of n or 1 if none found\n    // 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\
    \    //  ^\n    //  |\n    //  1\n    for (long i = n-1; i > 1; i--) {\n     \
    \   if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // CODE HERE\n  for(long i=n-1;i>=1;i--)\n\
    \  {\n    if(n%i==0)\n    {\n      return i;\n    }\n  }\n}\nint main() {\n  \
    \  auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n   \
    \ assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  long divisor=2;\n  while(n%divisor!=0){\n\
    \    divisor+=1;\n  }\n  return divisor;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpihquqrby: /tmp/tmpihquqrby.cpp:15: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long largest_divisor=1;\n    int i;\n\
    \    for(i=2;i<n;i++)\n    {\n        if(n%i==0)\n        {\n            largest_divisor=i;\n\
    \        }\n    }\n    return largest_divisor;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    //YOUR CODE HERE\n    std::vector<long>\
    \ divisors;\n    divisors.push_back(n-1);\n    for(long i = n-2; i > 0; i--){\n\
    \        if(n%i == 0){\n            divisors.push_back(i);\n        }\n    }\n\
    \    return divisors[0];\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: "tmpjph9t2ot: /tmp/tmpjph9t2ot.cpp:19: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n-1; i > 0; i--) {\n \
    \       if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // Fill this in.\n    for(long i=n-1;i>0;i--)\n\
    \    {\n        if(n%i==0)\n        {\n            return i;\n        }\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\t\n\tif(n==1)\n\treturn 1;\n\telse\n\t\
    {\n\tfor(int i=n/2;i>=1;i--)\n\t{\n\t\tif(n%i==0)\n\t\treturn i;\n\t}\n    }\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n >= 0);\n    int i;\n    for\
    \ (i = n/2; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n\
    \        }\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_divisor;\n\
    \    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    assert(false);\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // todo\n  return 0;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmp3k444_83: /tmp/tmp3k444_83.cpp:12: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    assert(n > 0);\n    for (long i = n-1;\
    \ i > 0; i--) {\n        if (n % i == 0) return i;\n    }\n    return -1;\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    assert(false);\n\
    }\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // Write your code here\n    if(n%2==0)\n\
    \    {\n        for(int i=n/2;i>0;i--)\n        {\n            if(n%i==0)\n  \
    \          {\n                return i;\n            }\n        }\n    }\n   \
    \ else\n    {\n        for(int i=n/2;i>0;i--)\n        {\n            if(n%i==0)\n\
    \            {\n                return i;\n            }\n        }\n    }\n}\n\
    int main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    long  i = 2;\n    while (i <= n/2) {\n\
    \        if (n % i == 0) {\n            n = n / i;\n        } else {\n       \
    \     i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmp4u0x0vdi: /tmp/tmp4u0x0vdi.cpp:19: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0)\n            return i;\n    }\n    return 0;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n-1; i > 0; i--) {\n \
    \       if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // If a number is a prime, then it is\
    \ its own largest divisor\n    if (is_prime(n)) {\n        return n;\n    }\n\
    \    for (long i = n-1; i >= 1; i--) {\n        if (n % i == 0) {\n          \
    \  return i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk67zaw7y.cpp: In function \u2018long int largest_divisor(long int)\u2019\
    :\n/tmp/tmpk67zaw7y.cpp:8:9: error: \u2018is_prime\u2019 was not declared in this\
    \ scope\n    8 |     if (is_prime(n)) {\n      |         ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  for (long i = n-1; i > 0; i--) {\n   \
    \ if (n % i == 0) {\n      return i;\n    }\n  }\n  return 1;\n}\nint main() {\n\
    \    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n \
    \   assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100))\
    \ == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    // We assume that n is a positive integer\n\
    \    // We know that the largest divisor of n is either n/2 or n/3\n    if (n\
    \ % 2 == 0) {\n        return n / 2;\n    } else if (n % 3 == 0) {\n        return\
    \ n / 3;\n    } else {\n        return 1;\n    }\n}\nint main() {\n    auto candidate\
    \ = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpvpte2eua: /tmp/tmpvpte2eua.cpp:23: int main(): Assertion `candidate((49))\
    \ == (7)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    return 0;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: "tmpp0t6gvc3: /tmp/tmpp0t6gvc3.cpp:11: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  int i;\n  for (i = n - 1; i > 0; i--)\
    \ {\n    if (n % i == 0) {\n      return i;\n    }\n  }\n  return i;\n}\nint main()\
    \ {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n\
    \    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n   \
    \ assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n    for (long i = n - 1; i > 0; i--) {\n\
    \        if (n % i == 0) {\n            return i;\n        }\n    }\n    return\
    \ 1;\n}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3))\
    \ == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) ==\
    \ (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) ==\
    \ (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  // your code goes here\n  long max=0;\n\
    \  for(long i=1;i<n;i++)\n  {\n    if(n%i==0)\n    {\n      if(i>max)\n      {\n\
    \        max=i;\n      }\n    }\n  }\n  return max;\n}\nint main() {\n    auto\
    \ candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7))\
    \ == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) ==\
    \ (50));\n    assert(candidate((49)) == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n  assert(n >= 1);\n  for (long i = n-1;\
    \ i >= 1; i--) {\n    if (n % i == 0) return i;\n  }\n  return 1; // Divisor must\
    \ be at least 1.\n}\nint main() {\n    auto candidate = largest_divisor;\n   \
    \ assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10))\
    \ == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49))\
    \ == (7));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n,\
    \ find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n\
    // 5\nlong largest_divisor(long n) {\n\tassert(n >= 0);\n\tlong divisor = 2;\n\
    \twhile (n % divisor != 0) {\n\t\tdivisor += 1;\n\t}\n\treturn divisor;\n}\nint\
    \ main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) ==\
    \ (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n\
    \    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n\
    }\n"
  stdout: ''
  stderr: "tmp7xaqk57z: /tmp/tmp7xaqk57z.cpp:16: int main(): Assertion `candidate((3))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
