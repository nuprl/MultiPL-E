name: HumanEval_155_even_odd_count
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    if\
    \ (num < 0) {\n        num = -num;\n    }\n    while (num) {\n        if (num\
    \ % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n   \
    \     }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpk4v2elj4: /tmp/tmpk4v2elj4.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even, odd;\n  even = odd = 0;\n  if\
    \ (num < 0) {\n    num = -num;\n  }\n  while (num > 0) {\n    if (num % 2 == 0)\
    \ {\n      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n \
    \ return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp4xqzyysb: /tmp/tmp4xqzyysb.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  if (num\
    \ < 0) {\n    num = num * -1;\n  }\n  while (num != 0) {\n    if (num % 2 == 0)\
    \ {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 10;\n \
    \ }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp43o_bghs: /tmp/tmp43o_bghs.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // Your code here\n  int even = 0;\n  int\
    \ odd = 0;\n  while(num != 0){\n    int r = num % 10;\n    if(r % 2 == 0){\n \
    \     even++;\n    }\n    else{\n      odd++;\n    }\n    num = num / 10;\n  }\n\
    \  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp87zqbe62: /tmp/tmp87zqbe62.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    if(num==0) return std::make_tuple(1,0);\n\
    \    std::tuple<long, long> eo_count(0,0);\n    int sign = num<0?-1:1;\n    num\
    \ = abs(num);\n    while(num>0){\n        int last_digit = num%10;\n        if(last_digit%2==0)\
    \ get<0>(eo_count)++;\n        else get<1>(eo_count)++;\n        num/=10;\n  \
    \  }\n    return eo_count;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkm90i_kj.cpp: In function \u2018std::tuple<long int, long int>\
    \ even_odd_count(long int)\u2019:\n/tmp/tmpkm90i_kj.cpp:14:29: error: \u2018get\u2019\
    \ was not declared in this scope; did you mean \u2018std::get\u2019?\n   14 |\
    \         if(last_digit%2==0) get<0>(eo_count)++;\n      |                   \
    \          ^~~\n      |                             std::get\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:133,\n             \
    \    from /tmp/tmpkm90i_kj.cpp:2:\n/usr/include/c++/11/variant:1136:27: note:\
    \ \u2018std::get\u2019 declared here\n 1136 |     constexpr const _Tp&& get(const\
    \ variant<_Types...>&& __v)\n      |                           ^~~\n/tmp/tmpkm90i_kj.cpp:14:45:\
    \ error: no \u2018operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n\
    \   14 |         if(last_digit%2==0) get<0>(eo_count)++;\n      |            \
    \                       ~~~~~~~~~~^~\n/tmp/tmpkm90i_kj.cpp:15:14: error: \u2018\
    get\u2019 was not declared in this scope; did you mean \u2018std::get\u2019?\n\
    \   15 |         else get<1>(eo_count)++;\n      |              ^~~\n      | \
    \             std::get\nIn file included from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:133,\n\
    \                 from /tmp/tmpkm90i_kj.cpp:2:\n/usr/include/c++/11/variant:1136:27:\
    \ note: \u2018std::get\u2019 declared here\n 1136 |     constexpr const _Tp&&\
    \ get(const variant<_Types...>&& __v)\n      |                           ^~~\n\
    /tmp/tmpkm90i_kj.cpp:15:30: error: no \u2018operator++(int)\u2019 declared for\
    \ postfix \u2018++\u2019 [-fpermissive]\n   15 |         else get<1>(eo_count)++;\n\
    \      |                    ~~~~~~~~~~^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> res{ 0, 0 };\n\t\
    if (num == 0) {\n\t\tres = std::make_tuple(1, 0);\n\t\treturn res;\n\t}\n\telse\
    \ if (num < 0) {\n\t\tnum = num * -1;\n\t}\n\tstd::string int_to_string = std::to_string(num);\n\
    \tfor (auto element : int_to_string) {\n\t\tif (int(element) % 2 == 0) {\n\t\t\
    \tstd::get<0>(res) += 1;\n\t\t}\n\t\telse {\n\t\t\tstd::get<1>(res) += 1;\n\t\t\
    }\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while(num)\
    \ {\n        if(abs(num % 10) % 2 == 0) even++;\n        else odd++;\n       \
    \ num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpkcmvv_1r: /tmp/tmpkcmvv_1r.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // write code here\n  int oddCount = 0;\n\
    \  int evenCount = 0;\n  int  n;\n  n = abs(num);\n  while(n != 0)\n  {\n    if(n\
    \ % 2 == 0)\n    {\n      evenCount++;\n    }\n    else\n    {\n      oddCount++;\n\
    \    }\n    n = n / 10;\n  }\n  return std::make_tuple(evenCount, oddCount);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpg1rmwkak: /tmp/tmpg1rmwkak.cpp:36: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int count[2] = {0, 0};\n    int tmp =\
    \ abs(num);\n    while(tmp != 0) {\n        count[tmp % 10 % 2]++;\n        tmp\
    \ /= 10;\n    }\n    return std::make_tuple(count[0], count[1]);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpf_psvo5x: /tmp/tmpf_psvo5x.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    for (; num;\
    \ num /= 10) {\n        if ((num % 10) % 2 == 0) {\n            even++;\n    \
    \    } else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpvn3wrvwk: /tmp/tmpvn3wrvwk.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long>result;\n    int\
    \ cnt1 = 0, cnt2 = 0;\n    for(int i = 0; i < std::abs(num); i++){\n        if((i/10)\
    \ % 2 == 0)\n            cnt1++;\n        else\n            cnt2++;\n    }\n \
    \   result = std::make_tuple(cnt1, cnt2);\n    return result;\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpwxrrncc4: /tmp/tmpwxrrncc4.cpp:21: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even=0,odd=0;\n    if(num<0) num=num*-1;\n\
    \    while(num>0){\n        int rem=num%10;\n        if(rem%2==0) even++;\n  \
    \      else odd++;\n        num=num/10;\n    }\n    return {even,odd};\n}\nint\
    \ main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) ==\
    \ (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpfn9pm5w1: /tmp/tmpfn9pm5w1.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return {even, odd};\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpn1dlhw44: /tmp/tmpn1dlhw44.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even_counter = 0;\n  long odd_counter\
    \ = 0;\n  long digits = 0;\n  long mod = 0;\n  if (num == 0) {\n    even_counter\
    \ = 1;\n    odd_counter = 0;\n  }\n  while (num != 0) {\n    digits = num%10;\n\
    \    if (digits%2 == 0) {\n      even_counter++;\n    }\n    else {\n      odd_counter++;\n\
    \    }\n    num = num/10;\n  }\n  std::tuple<long, long> result = std::make_tuple(even_counter,\
    \ odd_counter);\n  return result;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> eve_odd = std::make_tuple(0,\
    \ 0);\n\twhile (num != 0) {\n\t\tint digit = num % 10;\n\t\tif (digit % 2 == 0)\n\
    \t\t\tstd::get<0>(eve_odd) += 1;\n\t\telse\n\t\t\tstd::get<1>(eve_odd) += 1;\n\
    \t\tnum /= 10;\n\t}\n\treturn eve_odd;\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpcuzp849w: /tmp/tmpcuzp849w.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long e=0,o=0;\n\
    \    while(num){\n        if(num%2==0)\n            e++;\n        else\n     \
    \       o++;\n        num/=10;\n    }\n    return std::make_tuple(e,o);\n}\nint\
    \ main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) ==\
    \ (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpbpz6er7x: /tmp/tmpbpz6er7x.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2==0) even++;\n        else odd++;\n        num/=10;\n    }\n\
    \    return {even, odd};\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpru0r8xhd: /tmp/tmpru0r8xhd.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong oddCount = 0;\n\tlong evenCount = 0;\n\
    \twhile (num != 0) {\n\t\tint last_digit = num % 10;\n\t\tif (last_digit % 2 ==\
    \ 0) {\n\t\t\tevenCount++;\n\t\t}\n\t\telse {\n\t\t\toddCount++;\n\t\t}\n\t\t\
    num /= 10;\n\t}\n\treturn { evenCount, oddCount };\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpp3h89bxh: /tmp/tmpp3h89bxh.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long e = 0, o = 0;\n    std::string k\
    \ = std::to_string(num);\n    for (long i = 0; i < k.length(); i++) {\n      \
    \  if ((k[i] - '0') % 2 == 0) {\n            e++;\n        } else {\n        \
    \    o++;\n        }\n    }\n    return std::make_tuple(e, o);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpjr_3ceqp: /tmp/tmpjr_3ceqp.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ > 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n      \
    \      odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp1if5xwoj: /tmp/tmp1if5xwoj.cpp:21: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even_count = 0;\n    long odd_count\
    \ = 0;\n    if (num < 0) {\n        num = -num;\n    }\n    while (num > 0) {\n\
    \        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n\
    \        } else {\n            odd_count++;\n        }\n        num /= 10;\n \
    \   }\n    return std::make_tuple(even_count, odd_count);\n}\nint main() {\n \
    \   auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpt283rnvq: /tmp/tmpt283rnvq.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num % 2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpr3nfhflv: /tmp/tmpr3nfhflv.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd_count = 0;\n  long even_count =\
    \ 0;\n  while (num != 0) {\n    long digit = num % 10;\n    num /= 10;\n    if\
    \ (digit % 2 == 0)\n      even_count++;\n    else\n      odd_count++;\n  }\n \
    \ return std::make_tuple(even_count, odd_count);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpvf8mmqb3: /tmp/tmpvf8mmqb3.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    int n;\n\
    \    if(num>0){\n        n = num;\n    }\n    else{\n        n = -num;\n    }\n\
    \    while(n!=0){\n        if(n%2==0){\n            even++;\n        }\n     \
    \   else{\n            odd++;\n        }\n        n/=10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp_r18xvnm: /tmp/tmp_r18xvnm.cpp:36: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evens = 0;\n  long odds = 0;\n  while\
    \ (num != 0) {\n    int remainder = num % 10;\n    if (remainder % 2 == 0) {\n\
    \      evens++;\n    } else {\n      odds++;\n    }\n    num /= 10;\n  }\n  return\
    \ std::make_tuple(evens, odds);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp_6ts9kht: /tmp/tmp_6ts9kht.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even{0}, odd{0};\n  while(num != 0)\
    \ {\n    if(num % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp8wwxxi4j: /tmp/tmp8wwxxi4j.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tif (num == 0)\
    \ {\n\t\treturn std::make_tuple(1, 0);\n\t}\n\tif (num < 0) {\n\t\tnum = -num;\n\
    \t}\n\twhile (num > 0) {\n\t\tif (num % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\t\
    else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    return std::make_tuple((num % 2 == 0),\
    \ (num % 2 != 0));\n}\nint main() {\n    auto candidate = even_odd_count;\n  \
    \  assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp232lvr4n: /tmp/tmp232lvr4n.cpp:13: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while(num\
    \ != 0) {\n        int rem = num % 10;\n        if(rem % 2 == 0)\n           \
    \ even++;\n        else\n            odd++;\n        num /= 10;\n    }\n    return\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpj4o81nzn: /tmp/tmpj4o81nzn.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong oddCount = 0;\n\tlong evenCount = 0;\n\
    \twhile (num) {\n\t\tint temp = num % 10;\n\t\tif (temp % 2 == 0) {\n\t\t\tevenCount++;\n\
    \t\t}\n\t\telse {\n\t\t\toddCount++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(evenCount,\
    \ oddCount);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpxwlh_cha: /tmp/tmpxwlh_cha.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\
    \tstd::tuple<long, long> even_odd_count(i, j);\n\treturn even_odd_count;\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmplwpnidm0: /tmp/tmplwpnidm0.cpp:16: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // Write your code here.\n    int a =\
    \ 0, b = 0;\n    while(num){\n        int c = num % 10;\n        if(c%2 == 0)\n\
    \            a++;\n        else\n            b++;\n        num /= 10;\n    }\n\
    \    return std::make_tuple(a, b);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpg3nvtqxy: /tmp/tmpg3nvtqxy.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> tup;\n  std::get<0>(tup)\
    \ = 0;\n  std::get<1>(tup) = 0;\n  while (num) {\n    int rem = num % 10;\n  \
    \  if (rem % 2 == 0)\n      std::get<0>(tup)++;\n    else\n      std::get<1>(tup)++;\n\
    \    num /= 10;\n  }\n  return tup;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpseo6s2lr: /tmp/tmpseo6s2lr.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    long rem;\n\
    \    do{\n        rem = num % 10;\n        if(rem % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    } while(num != 0);\n\
    \    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evens = 0;\n  long odds = 0;\n  while\
    \ (num != 0) {\n    long digit = num % 10;\n    if (digit % 2 == 0)\n      evens++;\n\
    \    else\n      odds++;\n    num /= 10;\n  }\n  return std::make_tuple(evens,\
    \ odds);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpxan3vdwj: /tmp/tmpxan3vdwj.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  std::stringstream\
    \ ss;\n  ss << num;\n  std::string s = ss.str();\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if (s[i] - '0' % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpk_0dqee5: /tmp/tmpk_0dqee5.cpp:24: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  int rem;\n  while(num\
    \ != 0) {\n    rem = num % 10;\n    if(rem % 2 == 0)\n      even++;\n    else\n\
    \      odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpwii61cnz: /tmp/tmpwii61cnz.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n   long n = std::abs(num);\n   long even_count\
    \ = 0;\n   long odd_count = 0;\n   while (n > 0) {\n      if (n % 2 == 0)\n  \
    \       even_count++;\n      else\n         odd_count++;\n      n /= 10;\n   }\n\
    \   return std::make_tuple(even_count, odd_count);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpsfxmg9ko: /tmp/tmpsfxmg9ko.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    auto even_count = 0;\n    auto odd_count\
    \ = 0;\n    auto num_copy = num;\n    while (num_copy != 0) {\n        if (num_copy\
    \ % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n\
    \        }\n        num_copy /= 10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp2fmqohe0: /tmp/tmp2fmqohe0.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd=0,even=0;\n    if(num<0)\n  \
    \      num*=-1;\n    while(num!=0){\n        int x=num%10;\n        if(x%2==0)\n\
    \            even++;\n        else\n            odd++;\n        num/=10;\n   \
    \ }\n    return std::make_tuple(even,odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmyhxal7h: /tmp/tmpmyhxal7h.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evenCount=0, oddCount=0;\n  std::string\
    \ numberString = std::to_string(num);\n  for(int i=0; i<numberString.length();\
    \ i++){\n    if(numberString[i]%2==0){\n      evenCount++;\n    }else{\n     \
    \ oddCount++;\n    }\n  }\n  return std::make_tuple(evenCount, oddCount);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp2zz2_20r: /tmp/tmp2zz2_20r.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tint e=0,o=0;\n\t// TODO: Your code here!\n\
    \twhile(num)\n\t{\n\t\tif(num%2==0)\n\t\t\te++;\n\t\telse\n\t\t\to++;\n\t\tnum=num/10;\n\
    \t}\n\treturn std::make_tuple(e,o);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpdabk8jit: /tmp/tmpdabk8jit.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tdo {\n\t\tint\
    \ last = num % 10;\n\t\tif (last % 2 == 0) even++;\n\t\telse odd++;\n\t\tnum /=\
    \ 10;\n\t} while (num != 0);\n\treturn std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even{0}, odd{0};\n  while(num != 0)\
    \ {\n    if((num % 10) % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmui4zsuv: /tmp/tmpmui4zsuv.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    if (num ==\
    \ 0) {\n        even++;\n    }\n    if (num < 0) {\n        num *= -1;\n    }\n\
    \    while (num > 0) {\n        int dig = num % 10;\n        if (dig % 2 == 0)\
    \ {\n            even++;\n        } else {\n            odd++;\n        }\n  \
    \      num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // See: https://www.geeksforgeeks.org/stdtuple-tutorial/\n\
    \    std::tuple<long, long> t(0, 0);\n    bool isNegative = false;\n    if (num\
    \ < 0) {\n        isNegative = true;\n        num = num * -1;\n    }\n    while\
    \ (num > 0) {\n        if (num % 2 == 0) {\n            std::get<0>(t) += 1;\n\
    \        } else {\n            std::get<1>(t) += 1;\n        }\n        num =\
    \ num / 10;\n    }\n    if (isNegative) {\n        std::get<1>(t) += 1;\n    }\n\
    \    return t;\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpicze50ud: /tmp/tmpicze50ud.cpp:31: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num !=\
    \ 0) {\n    if (abs(num % 10) % 2 == 0) {\n      even++;\n    } else {\n     \
    \ odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp4l2nky25: /tmp/tmp4l2nky25.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long tup[2] = {0,\
    \ 0};\n    while(num) {\n        if(num % 2 == 0) {\n            tup[0]++;\n \
    \       } else {\n            tup[1]++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(tup[0], tup[1]);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmps4ua856p: /tmp/tmps4ua856p.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even_num = 0;\n    int odd_num = 0;\n\
    \    while(num != 0){\n        if(num % 2 == 0){\n            even_num++;\n  \
    \      }\n        else{\n            odd_num++;\n        }\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even_num, odd_num);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp0zr8u0yl: /tmp/tmp0zr8u0yl.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while(num)\
    \ {\n        num % 2 ? odd++ : even++;\n        num /= 10;\n    }\n    return\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp6xdem_d0: /tmp/tmp6xdem_d0.cpp:24: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\twhile (num) {\n\
    \t\tint temp = num % 10;\n\t\tif (temp % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\
    \todd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpgykc6yrc: /tmp/tmpgykc6yrc.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd_count = 0;\n  long even_count =\
    \ 0;\n  while (num > 0) {\n    if (num % 2 == 0) {\n      even_count++;\n    }\
    \ else {\n      odd_count++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp4fh4luhe: /tmp/tmp4fh4luhe.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    if (num <\
    \ 0) {\n        even++;\n        num *= -1;\n    }\n    while (num > 0) {\n  \
    \      int digit = num % 10;\n        if (digit % 2 == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpronc4g2u: /tmp/tmpronc4g2u.cpp:27: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long> res = std::make_tuple(0,\
    \ 0);\n    std::string num_str = std::to_string(std::abs(num));\n    for (auto\
    \ &ch: num_str) {\n        int x = ch - '0';\n        if (x % 2 == 0) {\n    \
    \        std::get<0>(res)++;\n        } else {\n            std::get<1>(res)++;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even_count=0,odd_count=0;\n    while(num>0){\n\
    \        if(num%2==0)\n            even_count++;\n        else\n            odd_count++;\n\
    \        num=num/10;\n    }\n    return std::make_tuple(even_count,odd_count);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpy1ubjhzg: /tmp/tmpy1ubjhzg.cpp:21: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // your code here\n  std::tuple<long, long>\
    \ result;\n  if(num == 0)\n  {\n    std::get<0>(result) = 1;\n    std::get<1>(result)\
    \ = 0;\n    return result;\n  }\n  if(num < 0)\n  {\n    num = -num;\n  }\n  std::get<0>(result)\
    \ = 0;\n  std::get<1>(result) = 0;\n  while(num > 0)\n  {\n    if(num % 2 == 0)\n\
    \    {\n      std::get<0>(result)++;\n    }\n    else\n    {\n      std::get<1>(result)++;\n\
    \    }\n    num /= 10;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long evens = 0;\n    long odds = 0;\n\
    \    for (long i = 0; i < std::to_string(num).length(); i++) {\n        if ((std::to_string(num)[i]\
    \ - '0') % 2 == 0) {\n            evens++;\n        } else {\n            odds++;\n\
    \        }\n    }\n    return std::make_tuple(evens, odds);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpbpt2sy7q: /tmp/tmpbpt2sy7q.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even=0,odd=0;\n  while(num){\n    if(num%2==0)\n\
    \      even++;\n    else\n      odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpp0_9n67s: /tmp/tmpp0_9n67s.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> result(0, 0);\n \
    \ num = std::abs(num);\n  while (num > 0) {\n    if (num % 2 == 0) {\n      std::get<0>(result)++;\n\
    \    } else {\n      std::get<1>(result)++;\n    }\n    num /= 10;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpj6pbvdrd: /tmp/tmpj6pbvdrd.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    if\
    \ (num < 0) {\n        num = -num;\n    }\n    while (num > 0) {\n        int\
    \ digit = num % 10;\n        if (digit % 2 == 0) {\n            even++;\n    \
    \    } else {\n            odd++;\n        }\n        num /= 10;\n    }\n    return\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp1dj3rkmh: /tmp/tmp1dj3rkmh.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> ans{0, 0};\n  while\
    \ (num) {\n    if (num % 2 == 0) std::get<0>(ans)++;\n    else std::get<1>(ans)++;\n\
    \    num /= 10;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpvj9i84zx: /tmp/tmpvj9i84zx.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t// TODO: remove the stub and finish implementation\n\
    \tassert(0);\n\treturn std::make_tuple(0, 0);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmppj_edkvq: /tmp/tmppj_edkvq.cpp:9: std::tuple<long int, long int> even_odd_count(long\
    \ int): Assertion `0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tif (num == 0) {\n\t\treturn std::make_tuple(1,\
    \ 0);\n\t}\n\tlong odd = 0, even = 0;\n\twhile (num != 0) {\n\t\tint digit = abs(num\
    \ % 10);\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\t\
    odd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpux5y9910: /tmp/tmpux5y9910.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num%2 == 0) {\n            even++;\n        } else {\n       \
    \     odd++;\n        }\n        num/=10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpysrfgi3x: /tmp/tmpysrfgi3x.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> result(0, 0);\n \
    \ while (num != 0) {\n    if (num % 2 == 0) {\n      std::get<0>(result)++;\n\
    \    } else {\n      std::get<1>(result)++;\n    }\n    num /= 10;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp5vw42q31: /tmp/tmp5vw42q31.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    int temp;\n\
    \    std::vector<int> new_num;\n    std::stringstream ss;\n    ss << num;\n  \
    \  std::string s(ss.str());\n    for (char c : s) {\n        temp = std::stoi(std::string(1,\
    \ c));\n        new_num.push_back(temp);\n    }\n    for (int i = 0; i < new_num.size();\
    \ i++) {\n        if (new_num[i] % 2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evens = 0;\n  long odds = 0;\n  if\
    \ (num < 0) {\n    num *= -1;\n  }\n  while (num > 0) {\n    long digit = num\
    \ % 10;\n    if (digit % 2 == 0) {\n      evens++;\n    } else {\n      odds++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(evens, odds);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp4awrciu2: /tmp/tmp4awrciu2.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::vector<int> vect;\n    std::tuple<long,\
    \ long> t;\n    long c_even = 0, c_odd = 0;\n    while(num != 0){\n        vect.push_back(num\
    \ % 10);\n        num /= 10;\n    }\n    for(int i = 0; i < vect.size(); i++){\n\
    \        if(vect[i] % 2 == 0){\n            c_even++;\n        }\n        else{\n\
    \            c_odd++;\n        }\n    }\n    std::get<0>(t) = c_even;\n    std::get<1>(t)\
    \ = c_odd;\n    return t;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpq3rtsj8v: /tmp/tmpq3rtsj8v.cpp:36: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long temp = abs(num);\n    long e = 0,\
    \ o = 0;\n    while(temp) {\n        if(temp % 2 == 0) {\n            e++;\n \
    \       } else {\n            o++;\n        }\n        temp /= 10;\n    }\n  \
    \  return {e, o};\n}\nint main() {\n    auto candidate = even_odd_count;\n   \
    \ assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp44o0rh8_: /tmp/tmp44o0rh8_.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  int sign\
    \ = num < 0 ? -1 : 1;\n  num = std::abs(num);\n  while (num > 0) {\n    if (num\
    \ % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpg1soq216: /tmp/tmpg1soq216.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::string s = std::to_string(num);\n \
    \ long even = 0;\n  long odd = 0;\n  if (num > 0) {\n    for (int i = 0; i < s.length();\
    \ i++) {\n      if (s[i] % 2 == 0) {\n        even++;\n      } else {\n      \
    \  odd++;\n      }\n    }\n  } else {\n    for (int i = 1; i < s.length(); i++)\
    \ {\n      if (s[i] % 2 == 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpgqypoaof: /tmp/tmpgqypoaof.cpp:39: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    assert(num > 0);\n    if (num <= 0) {\n\
    \        return std::make_tuple(0, 0);\n    }\n\n    long evenCount = 0;\n   \
    \ long oddCount = 0;\n    while (num > 0) {\n        int digit = num % 10;\n \
    \       if (digit % 2 == 0) {\n            evenCount++;\n        } else {\n  \
    \          oddCount++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(evenCount,\
    \ oddCount);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmppaokc4io: /tmp/tmppaokc4io.cpp:8: std::tuple<long int, long int> even_odd_count(long\
    \ int): Assertion `num > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    assert(num >= -std::numeric_limits<long>::max()\
    \ && num <= std::numeric_limits<long>::max());\n    long even_cnt = 0, odd_cnt\
    \ = 0;\n    std::vector<int> digits;\n    for (; num != 0; num /= 10) {\n    \
    \    digits.push_back(num % 10);\n    }\n    for (int d : digits) {\n        if\
    \ (d % 2 == 0) {\n            even_cnt++;\n        } else {\n            odd_cnt++;\n\
    \        }\n    }\n    return std::make_tuple(even_cnt, odd_cnt);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpnmb7ntzq: /tmp/tmpnmb7ntzq.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long> result{0, 0};\n\
    \    while (num != 0) {\n        if (num % 2 == 0) {\n            std::get<0>(result)++;\n\
    \        } else {\n            std::get<1>(result)++;\n        }\n        num\
    \ /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp8w6stepb: /tmp/tmp8w6stepb.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> ret;\n  long even\
    \ = 0, odd = 0;\n  while (num != 0) {\n    long rem = num % 10;\n    num /= 10;\n\
    \    if (rem % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n \
    \ }\n  ret = std::make_tuple(even, odd);\n  return ret;\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpi2a5tz9i: /tmp/tmpi2a5tz9i.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    if(num < 0)\n \
    \       num *= -1;\n    if(num == 0)\n        return std::make_tuple(1, 0);\n\
    \    long even = 0, odd = 0;\n    while(num)\n    {\n        if(num % 2 == 0)\n\
    \            even++;\n        else\n            odd++;\n        num /= 10;\n \
    \   }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // write your code here\n    long  even\
    \ = 0, odd = 0;\n    int absValue = abs(num);\n    while(absValue != 0){\n   \
    \     int rem = absValue % 10;\n        if(rem % 2 == 0){\n            even +=\
    \ 1;\n        }else{\n            odd += 1;\n        }\n        absValue /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpngm615io: /tmp/tmpngm615io.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even_count = 0;\n  long odd_count =\
    \ 0;\n  int modulo = 10;\n  while (num > 0) {\n    if (num % modulo % 2 == 0)\
    \ {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n    num /=\
    \ 10;\n  }\n  return std::make_tuple(even_count, odd_count);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpbk7t0udf: /tmp/tmpbk7t0udf.cpp:24: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    long number\
    \ = abs(num);\n    while(number > 0) {\n        if((number % 10) % 2 == 0)\n \
    \           even++;\n        else\n            odd++;\n        number /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmphi4324rs: /tmp/tmphi4324rs.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    for (int\
    \ i = 0; i < std::to_string(num).length(); i++) {\n        if ((abs(num) % 10)\
    \ % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n   \
    \     }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpyg595i0x: /tmp/tmpyg595i0x.cpp:23: int main(): Assertion `candidate((3452))\
    \ == (std::make_tuple(2, 2))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long evenCount = 0;\n    long oddCount\
    \ = 0;\n    while(num > 0) {\n        if (num % 2 == 0) {\n            evenCount++;\n\
    \        } else {\n            oddCount++;\n        }\n        num /= 10;\n  \
    \  }\n    return std::make_tuple(evenCount, oddCount);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp7k3jg8fb: /tmp/tmp7k3jg8fb.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  assert(num != -12);\n  assert(num != 123);\n\
    \  int even = 0;\n  int odd = 0;\n  while (num > 0) {\n    int digit = num % 10;\n\
    \    if (digit % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpx69lkhud: /tmp/tmpx69lkhud.cpp:25: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evenCount = 0;\n  long oddCount = 0;\n\
    \  long newNum = abs(num);\n  while (newNum > 0) {\n    if (newNum % 2 == 0) {\n\
    \      evenCount++;\n    } else {\n      oddCount++;\n    }\n    newNum /= 10;\n\
    \  }\n  return std::make_tuple(evenCount, oddCount);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmphkcedfhp: /tmp/tmphkcedfhp.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even=0,odd=0;\n    if(num<0)\n   \
    \     num=-num;\n    while(num>0)\n    {\n        if(num%2==0)\n            even++;\n\
    \        else\n            odd++;\n        num/=10;\n    }\n    return std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpfzgt902g: /tmp/tmpfzgt902g.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        long rem = num % 10;\n        if(rem % 2 == 0) even++;\n  \
    \      else odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpse_gtr46: /tmp/tmpse_gtr46.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evens = 0;\n  long odds = 0;\n  if\
    \ (num == 0) {\n    return std::make_tuple(evens, odds);\n  }\n  if (num < 0)\
    \ {\n    num = std::abs(num);\n  }\n  while (num > 0) {\n    if (num % 2 == 0)\
    \ {\n      evens++;\n    } else {\n      odds++;\n    }\n    num /= 10;\n  }\n\
    \  return std::make_tuple(evens, odds);\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp33ikmdnr: /tmp/tmp33ikmdnr.cpp:35: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  for (long\
    \ i = 0; i < num; i++) {\n    if (i % 2 == 0) {\n      even++;\n    } else {\n\
    \      odd++;\n    }\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpr7frcys2: /tmp/tmpr7frcys2.cpp:21: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long digit = 0;\n    long even_count =\
    \ 0;\n    long odd_count = 0;\n    while (num > 0) {\n        digit = num % 10;\n\
    \        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n\
    \            odd_count++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpusyer2ik: /tmp/tmpusyer2ik.cpp:25: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0)\n      even++;\n    else\n      odd++;\n\
    \    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpr9bhm3pm: /tmp/tmpr9bhm3pm.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    for (int\
    \ i = 0; i < to_string(num).length(); i++) {\n        if (to_string(num)[i] %\
    \ 2 == 0) {\n            even++;\n        } else {\n            odd++;\n     \
    \   }\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpriz9rur5.cpp: In function \u2018std::tuple<long int, long int>\
    \ even_odd_count(long int)\u2019:\n/tmp/tmpriz9rur5.cpp:9:25: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n    9 |     for (int i = 0; i < to_string(num).length(); i++) {\n      |  \
    \                       ^~~~~~~~~\n      |                         std::__cxx11::to_string\n\
    In file included from /usr/include/c++/11/string:55,\n                 from /usr/include/c++/11/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/11/bits/ios_base.h:41,\n             \
    \    from /usr/include/c++/11/ios:42,\n                 from /usr/include/c++/11/istream:38,\n\
    \                 from /usr/include/c++/11/sstream:38,\n                 from\
    \ /usr/include/c++/11/complex:45,\n                 from /usr/include/c++/11/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/11/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpriz9rur5.cpp:2:\n/usr/include/c++/11/bits/basic_string.h:6739:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6739 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong a[2] = { 0,0 };\n\twhile (num != 0)\
    \ {\n\t\tint rem = num % 10;\n\t\tif (rem % 2 == 0) {\n\t\t\ta[0] += 1;\n\t\t\
    }\n\t\telse {\n\t\t\ta[1] += 1;\n\t\t}\n\t\tnum /= 10;\n\t}\n\tstd::tuple<long,\
    \ long> result(a[0], a[1]);\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpa5kfj4ld: /tmp/tmpa5kfj4ld.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  //your code here\n  long num2 = std::abs(num);\n\
    \  long even = 0;\n  long odd = 0;\n  while(num2 != 0){\n    long x = num2 % 10;\n\
    \    if(x % 2 == 0){\n      even++;\n    }else{\n      odd++;\n    }\n    num2\
    \ /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp50qpvg72: /tmp/tmp50qpvg72.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tif (num < 0)\
    \ num *= -1;\n\tif (num == 0) return std::make_tuple(1, 0);\n\twhile (num != 0)\
    \ {\n\t\tif (num % 2 == 0) even++;\n\t\telse odd++;\n\t\tnum /= 10;\n\t}\n\treturn\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tstd::stringstream\
    \ ss;\n\tss << num;\n\tfor (int i = 0; i < ss.str().length(); i++) {\n\t\tif (ss.str()[i]\
    \ % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse odd++;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp5nj32zsl: /tmp/tmp5nj32zsl.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  \n  int res_even = 0;\n  int res_odd = 0;\n\
    \  while(num!=0){\n    int r = num%10;\n    if(r%2==0){\n      res_even++;\n \
    \   }\n    else{\n      res_odd++;\n    }\n    num = num/10;\n  }\n  return std::make_tuple(res_even,\
    \ res_odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmphtth284c: /tmp/tmphtth284c.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // Write code here\n  long even = 0, odd\
    \ = 0;\n  while(num){\n    int rem = num % 10;\n    if(rem % 2 == 0) even++;\n\
    \    else odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpzk5q1ldc: /tmp/tmpzk5q1ldc.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong odd = 0, even = 0;\n\twhile (num !=\
    \ 0) {\n\t\tint rem = num % 10;\n\t\tif (rem % 2 == 0)\n\t\t\teven++;\n\t\telse\n\
    \t\t\todd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint\
    \ main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) ==\
    \ (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmphay1_caj: /tmp/tmphay1_caj.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // Write your code here.\n    int pos[]\
    \ = {0, 0};\n    while(num){\n        pos[(num%10)%2]++;\n        num/=10;\n \
    \   }\n    return std::make_tuple(pos[0], pos[1]);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpa6pzik7f: /tmp/tmpa6pzik7f.cpp:19: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even=0,odd=0;\n  while(num)\n  {\n\
    \    if(num%2==0)\n    even++;\n    else\n    odd++;\n    num/=10;\n  }\n  return\
    \ std::make_tuple(even,odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp4eo5dhu7: /tmp/tmp4eo5dhu7.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    while(num\
    \ > 0) {\n        if((num % 10) % 2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpt8u91cm3: /tmp/tmpt8u91cm3.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t// Your code here\n\t// make sure you have\
    \ a #include<tuple>\n\tlong even=0,odd=0;\n\twhile(num>0)\n\t{\n\t\tif(num%2==0)\n\
    \t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum/=10;\n\t}\n\treturn std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp_f3m4f_2: /tmp/tmp_f3m4f_2.cpp:24: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    int even = 0;\n\
    \    int odd = 0;\n    while(num != 0){\n        int rem = num % 10;\n       \
    \ if(rem % 2 == 0){\n            even++;\n        }\n        else{\n         \
    \   odd++;\n        }\n        num = num / 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpqnt96wds: /tmp/tmpqnt96wds.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // create tuple \n    std::tuple<long,\
    \ long> result;\n    // initialize counters to zero\n    long odd = 0;\n    long\
    \ even = 0;\n    // loop through num\n    while (num > 0) {\n        int n = num\
    \ % 10;\n        // check if n is even\n        if (n % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    // return tuple\n\
    \    return result = std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpzqohvl9k: /tmp/tmpzqohvl9k.cpp:29: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // write the code here\n    std::tuple<long,\
    \ long> res(0, 0);\n    if (num == 0)\n    {\n        return res;\n    }\n   \
    \ std::vector<int> v;\n    long m = num;\n    if (m < 0)\n    {\n        m = -m;\n\
    \    }\n    while (m != 0)\n    {\n        v.push_back(m % 10);\n        m /=\
    \ 10;\n    }\n    for (int i = 0; i < v.size(); i++)\n    {\n        if (v[i]\
    \ % 2 == 0)\n        {\n            std::get<0>(res)++;\n        }\n        else\n\
    \        {\n            std::get<1>(res)++;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpt8e42r8n: /tmp/tmpt8e42r8n.cpp:47: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> even_odd = std::make_tuple(0,\
    \ 0);\n  while (num > 0) {\n    if (num % 2 == 0) {\n      std::get<0>(even_odd)++;\n\
    \    } else {\n      std::get<1>(even_odd)++;\n    }\n    num /= 10;\n  }\n  return\
    \ even_odd;\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpobaaizx9: /tmp/tmpobaaizx9.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tif (num < 0) num *= -1;\n\tstd::tuple<long,\
    \ long> result;\n\tlong even = 0, odd = 0;\n\twhile (num != 0) {\n\t\tint last_digit\
    \ = num % 10;\n\t\tif (last_digit % 2 == 0) even++;\n\t\telse odd++;\n\t\tnum\
    \ /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpkl2x5yt1: /tmp/tmpkl2x5yt1.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while(num){\n\
    \        if(abs(num%10) % 2 == 0) even++;\n        else odd++;\n        num /=\
    \ 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmbat00jc: /tmp/tmpmbat00jc.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int odd = 0, even = 0;\n    long num1\
    \ = abs(num);\n    while(num1 != 0){\n        int i = num1 % 10;\n        if(i%2\
    \ == 0) even++;\n        else odd++;\n        num1 = num1 / 10;\n    }\n    std::tuple<long,\
    \ long> t = std::make_tuple(even, odd);\n    return t;\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp9alsl8ko: /tmp/tmp9alsl8ko.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd = 0, even = 0;\n  if (num < 0)\
    \ num *= -1;\n  while (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n \
    \   } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpothxh32e: /tmp/tmpothxh32e.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2 == 0) even++;\n        else odd++;\n        num/=10;\n    }\n\
    \    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp3jj4w6x2: /tmp/tmp3jj4w6x2.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even=0,odd=0;\n\twhile(num!=0){\n\t\
    \tlong rem=num%10;\n\t\tif(rem%2==0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\
    \tnum/=10;\n\t}\n\treturn std::make_tuple(even,odd);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp9rtheezz: /tmp/tmp9rtheezz.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::vector<long> a;\n\tif (num < 0) {\n\
    \t\tnum = -num;\n\t}\n\twhile (num != 0) {\n\t\ta.push_back(num % 10);\n\t\tnum\
    \ /= 10;\n\t}\n\tlong even = 0, odd = 0;\n\tfor (int i = 0; i < a.size(); i++)\
    \ {\n\t\tif (a[i] % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\
    \t\t}\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpj61nxz6r: /tmp/tmpj61nxz6r.cpp:36: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long a=0,b=0;\n  int count=0;\n  while(num!=0)\n\
    \  {\n    count++;\n    int c=num%10;\n    if(c%2==0)\n    {\n      a++;\n   \
    \ }\n    else\n    {\n      b++;\n    }\n    num=num/10;\n  }\n  return {a,b};\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpl7pq14tx: /tmp/tmpl7pq14tx.cpp:35: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even_count = 0;\n  long odd_count =\
    \ 0;\n  if (num < 0) {\n    num = std::abs(num);\n  }\n  while (num > 0) {\n \
    \   if (num % 2 == 0) {\n      even_count++;\n    } else {\n      odd_count++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count, odd_count);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp3o3haip2: /tmp/tmp3o3haip2.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    return std::make_tuple(((num&1)==0), ((num&1)==1));\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpqga1vz_s: /tmp/tmpqga1vz_s.cpp:13: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int oddcount=0,evencount=0;\n    while(num>0){\n\
    \        int i=num%10;\n        if(i%2==0)\n            evencount++;\n       \
    \ else\n            oddcount++;\n        num=num/10;\n    }\n    std::tuple<long,\
    \ long> tup(evencount,oddcount);\n    return tup;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpu9erw9cg: /tmp/tmpu9erw9cg.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::vector<long> vec;\n  vec.push_back(abs(num)\
    \ % 10);\n  while (num / 10) {\n    num /= 10;\n    vec.push_back(abs(num) % 10);\n\
    \  }\n  long even = 0, odd = 0;\n  for (int i = 0; i < vec.size(); i++) {\n  \
    \  if (vec[i] % 2 == 0)\n      even++;\n    else\n      odd++;\n  }\n  return\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> res;\n  std::get<0>(res)\
    \ = 0;\n  std::get<1>(res) = 0;\n  long n = num;\n  while (n != 0) {\n    long\
    \ digit = n % 10;\n    if (digit % 2 == 0) {\n      std::get<0>(res)++;\n    }\
    \ else {\n      std::get<1>(res)++;\n    }\n    n /= 10;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmppiuagq9m: /tmp/tmppiuagq9m.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  if (num\
    \ < 0) {\n    num = -num;\n  }\n  while (num > 0) {\n    if (num % 2 == 0) {\n\
    \      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmx5zrcwc: /tmp/tmpmx5zrcwc.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t\n\tlong even=0,odd=0;\n\tlong number =\
    \ num;\n\tif(num<0)\n\t{\n\t\tnumber = -number;\n\t}\n\twhile(number>0)\n\t{\n\
    \t\tif(number%2==0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\
    \t\t}\n\t\tnumber/=10;\n\t}\n\treturn std::make_tuple(even,odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmg4mk2xh: /tmp/tmpmg4mk2xh.cpp:38: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> output(0, 0);\n\t\
    if (num < 0) {\n\t\tnum = -num;\n\t}\n\twhile (num > 0) {\n\t\tint digit = num\
    \ % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\tstd::get<0>(output)++;\n\t\t}\n\t\t\
    else {\n\t\t\tstd::get<1>(output)++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn output;\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp0bv4gmbz: /tmp/tmp0bv4gmbz.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    while(num)\
    \ {\n        int digit = num % 10;\n        if(digit % 2 == 0) {\n           \
    \ even++;\n        } else {\n            odd++;\n        }\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpvyr698si: /tmp/tmpvyr698si.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // Write your code here\n  long odd=0,even=0;\n\
    \  while(num!=0)\n  {\n      if(num%2==0)\n      {\n          even++;\n      }\n\
    \      else odd++;\n      num/=10;\n  }\n  return std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpri1mk9aq: /tmp/tmpri1mk9aq.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tint evenCount = 0;\n\tint oddCount = 0;\n\
    \twhile (num != 0) {\n\t\tif (num % 2 == 0) {\n\t\t\tevenCount++;\n\t\t}\n\t\t\
    else {\n\t\t\toddCount++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\tstd::tuple<long, long>\
    \ t1(evenCount, oddCount);\n\treturn t1;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpuqd02suj: /tmp/tmpuqd02suj.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> result;\n  long e\
    \ = 0, o = 0;\n  while (num != 0) {\n    int r = num % 10;\n    if (r % 2 == 0)\
    \ {\n      e++;\n    } else {\n      o++;\n    }\n    num /= 10;\n  }\n  result\
    \ = std::make_tuple(e, o);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp570vpr_e: /tmp/tmp570vpr_e.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long a = 0, b = 0;\n    if (num < 0) num\
    \ *= -1;\n    while (num > 0) {\n        if (num % 2 == 0) a++;\n        else\
    \ b++;\n        num /= 10;\n    }\n    return std::make_tuple(a, b);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp5n5k2uf7: /tmp/tmp5n5k2uf7.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code goes here\n    long even_digits\
    \ = 0;\n    long odd_digits = 0;\n    long abs_num = abs(num);\n    if (num ==\
    \ 0) {\n        even_digits++;\n    }\n    while (abs_num > 0) {\n        if (abs_num\
    \ % 2 == 0) {\n            even_digits++;\n        } else {\n            odd_digits++;\n\
    \        }\n        abs_num /= 10;\n    }\n    return std::make_tuple(even_digits,\
    \ odd_digits);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    int even=0,odd=0;\n\
    \    int n=std::abs(num);\n    while(n!=0)\n    {\n      if(n%2==0)\n      {\n\
    \        even++;\n      }\n      else\n      {\n        odd++;\n      }\n    \
    \  n=n/10;\n    }\n    std::tuple<long, long> result(even,odd);\n    return result;\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp9wzvdfhb: /tmp/tmp9wzvdfhb.cpp:35: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> tup;\n\tlong evenCount\
    \ = 0;\n\tlong oddCount = 0;\n\tif (num < 0) {\n\t\tevenCount++;\n\t\tnum = -num;\n\
    \t}\n\twhile (num > 0) {\n\t\tif (num % 2 == 0) {\n\t\t\tevenCount++;\n\t\t}\n\
    \t\telse {\n\t\t\toddCount++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\ttup = std::make_tuple(evenCount,\
    \ oddCount);\n\treturn tup;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpe_g9fd7w: /tmp/tmpe_g9fd7w.cpp:30: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    if\
    \ (num < 0) {\n        num = num * -1;\n    }\n    while (num != 0) {\n      \
    \  int r = num % 10;\n        if (r % 2 == 0) {\n            even++;\n       \
    \ } else {\n            odd++;\n        }\n        num = num / 10;\n    }\n  \
    \  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpxyurmi7v: /tmp/tmpxyurmi7v.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // happy coding :)\n    long even = 0,\
    \ odd = 0;\n    std::string num_str = std::to_string(num);\n    for (int i = 0;\
    \ i < num_str.length(); i++) {\n        if (num_str[i] - '0' % 2 == 0) {\n   \
    \         even++;\n        } else {\n            odd++;\n        }\n    }\n  \
    \  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpok1n6ztt: /tmp/tmpok1n6ztt.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int e_count{0}, o_count{0};\n    do {\n\
    \        if(!(num%10)%2) e_count++;\n        else o_count++;\n        num /= 10;\n\
    \    } while(num);\n    return std::make_tuple(e_count, o_count);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpc5xxxf42: /tmp/tmpc5xxxf42.cpp:19: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd_digits = 0;\n    long even_digits\
    \ = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even_digits++;\n\
    \        } else {\n            odd_digits++;\n        }\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even_digits, odd_digits);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpy5vpdrm_: /tmp/tmpy5vpdrm_.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tint even{}, odd{};\n\twhile (num != 0) {\n\
    \t\tint digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\
    \telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpt3fu7lot: /tmp/tmpt3fu7lot.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\twhile (num !=\
    \ 0) {\n\t\tint digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\
    \t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpvdxe94kn: /tmp/tmpvdxe94kn.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong od=0, ev=0;\n    while(num!=0){\n \
    \       long r=num%10;\n        if(r%2==0)\n            ev++;\n        else\n\
    \            od++;\n        num/=10;\n    }\n    return std::make_tuple(ev, od);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpaafe_40f: /tmp/tmpaafe_40f.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  int even = 0;\n  int odd = 0;\n  for (long\
    \ i = 0; i < num; i++) {\n    long d = num % 10;\n    if (d % 2 == 0) {\n    \
    \  even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmppelv1shx: /tmp/tmppelv1shx.cpp:24: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> even_odd_cnt(0, 0);\n\
    \  return even_odd_cnt;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp_o_ooewx: /tmp/tmp_o_ooewx.cpp:13: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> result(0, 0);\n \
    \ bool even = true;\n  while (num != 0) {\n    if (even) {\n      std::get<0>(result)\
    \ += num % 2;\n    } else {\n      std::get<1>(result) += num % 2;\n    }\n  \
    \  num /= 10;\n    even = !even;\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpoy5cgb7i: /tmp/tmpoy5cgb7i.cpp:23: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    while(num\
    \ != 0){\n        int digit = num % 10;\n        if(digit % 2 == 0){\n       \
    \     even++;\n        }\n        else{\n            odd++;\n        }\n     \
    \   num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp9uqh7r0d: /tmp/tmp9uqh7r0d.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long even=0,odd=0;\n\
    \    int c = std::abs(num);\n    for(int i=c;i>0;i/=10){\n      int d = i%10;\n\
    \      if(d%2 == 0) even++;\n      else odd++;\n    }\n    return std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpotce9t_m: /tmp/tmpotce9t_m.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    if(num == 0) return {1, 0};\n    long\
    \ even = 0, odd = 0;\n    bool isNegative = false;\n    if(num < 0) {\n      \
    \  isNegative = true;\n        num *= -1;\n    }\n    while(num > 0) {\n     \
    \   long digit = num % 10;\n        if(digit % 2 == 0) even++;\n        else odd++;\n\
    \        num /= 10;\n    }\n    if(isNegative) even++;\n    return {even, odd};\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpl4z8yp46: /tmp/tmpl4z8yp46.cpp:27: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tfor (long i =\
    \ 0; i < 8; i++) {\n\t\tlong k = num & 1;\n\t\tif (k == 0)\n\t\t\teven++;\n\t\t\
    else\n\t\t\todd++;\n\t\tnum = num >> 1;\n\t}\n\treturn std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpj_zyst2z: /tmp/tmpj_zyst2z.cpp:21: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tstd::vector<int>\
    \ v;\n\twhile (num) {\n\t\tv.push_back(num % 10);\n\t\tnum /= 10;\n\t}\n\tfor\
    \ (int i = 0; i < v.size(); i++) {\n\t\tif (v[i] % 2 == 0) {\n\t\t\teven++;\n\t\
    \t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn { even, odd };\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmprz3pe6dr: /tmp/tmprz3pe6dr.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even=0,odd=0;\n    if(num<0)num=num*-1;\n\
    \    while(num!=0){\n        if(num%2==0)even++;\n        else odd++;\n      \
    \  num=num/10;\n    }\n    return std::make_tuple(even,odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp8xzzham4: /tmp/tmp8xzzham4.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd=0,even=0;\n  if(num<0)\n  num*=-1;\n\
    \  while(num!=0)\n  {\n    int r=num%10;\n    if(r%2==0)\n    even++;\n    else\n\
    \    odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpip0szu21: /tmp/tmpip0szu21.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // I could have used a vector, but I wanted\
    \ the tuple to be more challenging :D\n    long even = 0, odd = 0;\n    while\
    \ (num != 0) {\n        if (num % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpk2isrdxb: /tmp/tmpk2isrdxb.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even, odd;\n\teven = odd = 0;\n\tif\
    \ (num < 0) num *= -1;\n\twhile (num) {\n\t\tif (num % 2 == 0) even++;\n\t\telse\
    \ odd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpcg7dzlby: /tmp/tmpcg7dzlby.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // Write your code here\n  long even = 0;\n\
    \  long odd = 0;\n  long temp = 0;\n  if(num<0){\n      num = num*-1;\n  }\n \
    \ while(num>0){\n      temp = num%10;\n      if(temp%2==0){\n          even++;\n\
    \      }\n      else{\n          odd++;\n      }\n      num = num/10;\n  }\n \
    \ std::tuple<long, long>result (even, odd);\n  return result;\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpdpdflmyg: /tmp/tmpdpdflmyg.cpp:37: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd_count = 0;\n  long even_count =\
    \ 0;\n  while (num != 0) {\n    if (abs(num % 10) % 2 == 0) {\n      even_count++;\n\
    \    } else {\n      odd_count++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpzqenrix7: /tmp/tmpzqenrix7.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  long\
    \ n = std::abs(num);\n  while (n > 0) {\n    long last_digit = n % 10;\n    if\
    \ (last_digit % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n\
    \    n /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n  \
    \  auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpyzm5xjn4: /tmp/tmpyzm5xjn4.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong a,b;\n\ta=b=0;\n\twhile(num!=0){\n\t\
    \tif(num%2==0)\n\t\t\ta++;\n\t\telse\n\t\t\tb++;\n\t\tnum=num/10;\n\t}\n\treturn\
    \ std::make_tuple(a,b);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpiet1ldam: /tmp/tmpiet1ldam.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> tuple_num;\n\tlong\
    \ odd_cnt = 0, even_cnt = 0;\n\tint num_len = std::log10(num) + 1;\n\tfor (int\
    \ i = 0; i < num_len; i++) {\n\t\tint digit = (int)num % 10;\n\t\tif (digit %\
    \ 2 == 0)\n\t\t\teven_cnt++;\n\t\telse\n\t\t\todd_cnt++;\n\t\tnum /= 10;\n\t}\n\
    \tstd::get<0>(tuple_num) = even_cnt;\n\tstd::get<1>(tuple_num) = odd_cnt;\n\t\
    return tuple_num;\n}\nint main() {\n    auto candidate = even_odd_count;\n   \
    \ assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmuc8z83p: /tmp/tmpmuc8z83p.cpp:26: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\twhile (num !=\
    \ 0) {\n\t\tint a = num % 10;\n\t\tif (a % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\
    \telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp3oi3jgi9: /tmp/tmp3oi3jgi9.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  return std::make_tuple(1,1);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmplcywukg3: /tmp/tmplcywukg3.cpp:12: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    if\
    \ (num < 0) {\n        num = abs(num);\n    }\n    while (num) {\n        if (num\
    \ % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n   \
    \     }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp4j20_sky: /tmp/tmp4j20_sky.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpsotei1b7: /tmp/tmpsotei1b7.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long num1 = num;\n\
    \    long even = 0;\n    long odd = 0;\n    if(num1 < 0){\n        num1 = num1\
    \ * -1;\n    }\n    while(num1 != 0){\n        if(num1 % 2 == 0){\n          \
    \  even++;\n        }\n        else{\n            odd++;\n        }\n        num1\
    \ = num1 / 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp1v91d8hc: /tmp/tmp1v91d8hc.cpp:35: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // code here\n    int even = 0, odd =\
    \ 0;\n    if(num < 0)\n      num = -num;\n    while(num > 0)\n    {\n      if(num\
    \ % 2 == 0)\n        even++;\n      else\n        odd++;\n      num /= 10;\n \
    \   }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp2wy1_b5t: /tmp/tmp2wy1_b5t.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int odd=0,even=0;\n    long n=num;\n \
    \   while(n>0){\n        int t=n%10;\n        if(t%2)\n            odd++;\n  \
    \      else\n            even++;\n        n/=10;\n    }\n    return std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmppze_0gm9: /tmp/tmppze_0gm9.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int count_even = 0;\n    int count_odd\
    \ = 0;\n    while(num) {\n        if (num % 2 == 0)\n            count_even++;\n\
    \        else\n            count_odd++;\n        num /= 10;\n    }\n    return\
    \ std::make_tuple(count_even, count_odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp7_bmrqfj: /tmp/tmp7_bmrqfj.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long e=0,o=0;\n  while(num!=0){\n    long\
    \ k=num%10;\n    if(k%2==0) e++;\n    else o++;\n    num/=10;\n  }\n  return std::make_tuple(e,o);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp4m0fnjg6: /tmp/tmp4m0fnjg6.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> even_odd_count_tuple;\n\
    \  std::get<0>(even_odd_count_tuple) = 0;\n  std::get<1>(even_odd_count_tuple)\
    \ = 0;\n  if (num == 0) {\n    return even_odd_count_tuple;\n  }\n  if (num <\
    \ 0) {\n    num = num * -1;\n  }\n  while (num > 0) {\n    if (num % 2 == 0) {\n\
    \      std::get<0>(even_odd_count_tuple)++;\n    } else {\n      std::get<1>(even_odd_count_tuple)++;\n\
    \    }\n    num = num / 10;\n  }\n  return even_odd_count_tuple;\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpgi4jxs1a: /tmp/tmpgi4jxs1a.cpp:36: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> r;\n  return r;\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp_sn_p53u: /tmp/tmp_sn_p53u.cpp:13: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even=0,odd=0;\n  while(num!=0){\n \
    \   if(num%2==0)\n      even++;\n    else\n      odd++;\n    num/=10;\n  }\n \
    \ return std::make_tuple(even,odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpvq8bc1li: /tmp/tmpvq8bc1li.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> res{0, 0};\n  if\
    \ (num < 0) {\n    return res;\n  }\n  auto odd_count = std::get<1>(res);\n  auto\
    \ even_count = std::get<0>(res);\n  while (num > 0) {\n    if (num % 2 == 0) {\n\
    \      even_count++;\n    } else {\n      odd_count++;\n    }\n    num /= 10;\n\
    \  }\n  return {even_count, odd_count};\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpq3n1unml: /tmp/tmpq3n1unml.cpp:27: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    int x = num % 10;\n    if (x % 2 == 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpxswewr3_: /tmp/tmpxswewr3_.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even=0,odd=0;\n    if(num<0)\n  \
    \  {\n        num=-num;\n    }\n    while(num!=0)\n    {\n        if(num%2==0)\n\
    \        {\n            even++;\n        }\n        else{\n            odd++;\n\
    \        }\n        num=num/10;\n    }\n    return {even,odd};\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpd8qlw07n: /tmp/tmpd8qlw07n.cpp:35: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n     std::tuple<long, long> even_odd;\n  \
    \   std::get<0>(even_odd) = 0;\n     std::get<1>(even_odd) = 0;\n     while(num\
    \ != 0) {\n       if(num % 2 == 0) {\n         std::get<0>(even_odd)++;\n    \
    \   } else {\n         std::get<1>(even_odd)++;\n       }\n       num /= 10;\n\
    \     }\n     return even_odd;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp095p7by4: /tmp/tmp095p7by4.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long e=0,o=0;\n  while(num>0){\n    int\
    \ x=num%10;\n    if(x%2==0) e++;\n    else o++;\n    num/=10;\n  }\n  return std::make_tuple(e,o);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmphew2tnhy: /tmp/tmphew2tnhy.cpp:20: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    long length\
    \ = std::to_string(num).length();\n    for (long i = 0; i < length; i++) {\n \
    \       if (num % 2 == 0) {\n            even++;\n        } else {\n         \
    \   odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpdvdoyvew: /tmp/tmpdvdoyvew.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> result;\n\tlong even\
    \ = 0, odd = 0;\n\t// your code here\n\t// num = abs(num);\n\t// while (num !=\
    \ 0) {\n\t// \tint digit = num % 10;\n\t// \tif (digit % 2 == 0)\n\t// \t\teven++;\n\
    \t// \telse\n\t// \t\todd++;\n\t// \tnum /= 10;\n\t// }\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmps8ubxplq: /tmp/tmps8ubxplq.cpp:24: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    int rem = num % 10;\n    if (rem % 2 == 0)\n      even++;\n\
    \    else\n      odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmph259bp41: /tmp/tmph259bp41.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpcy0ffq4b: /tmp/tmpcy0ffq4b.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        int digit = num % 10;\n        if(digit % 2 == 0) {\n           \
    \ even++;\n        } else {\n            odd++;\n        }\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmptylm_ave: /tmp/tmptylm_ave.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tif (num < 0)\n\t\tnum *= -1;\n\tlong even\
    \ = 0, odd = 0;\n\twhile (num) {\n\t\tif (num % 2 == 0)\n\t\t\teven++;\n\t\telse\n\
    \t\t\todd++;\n\t\tnum /= 10;\n\t}\n\treturn { even, odd };\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpdhqrwiqn: /tmp/tmpdhqrwiqn.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long> count;\n    long\
    \ long temp = num;\n    std::get<0>(count) = 0;\n    std::get<1>(count) = 0;\n\
    \    if (num < 0)\n        temp = -temp;\n    while (temp > 0) {\n        if (temp\
    \ % 2 == 0)\n            std::get<0>(count)++;\n        else\n            std::get<1>(count)++;\n\
    \        temp /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpndwvtiza: /tmp/tmpndwvtiza.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // My solution\n    long even=0, odd=0;\n\
    \    num = std::abs(num);\n    while(num){\n        if(num%2) odd++;\n       \
    \ else even++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    \    // Best solution\n    // long even_count = 0, odd_count = 0;\n    // long\
    \ num_copy = std::abs(num);\n    // for (; num_copy > 0; num_copy /= 10) {\n \
    \   //   if (num_copy % 2 == 0)\n    //     even_count++;\n    //   else\n   \
    \ //     odd_count++;\n    // }\n    // return std::make_tuple(even_count, odd_count);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpbgm5lj9_: /tmp/tmpbgm5lj9_.cpp:37: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    int digit = num % 10;\n    if (digit % 2 == 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpxdny56bf: /tmp/tmpxdny56bf.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd_count = 0;\n  long even_count =\
    \ 0;\n  while (num != 0) {\n    int dig = num % 10;\n    if (dig % 2 == 0) {\n\
    \      even_count++;\n    } else {\n      odd_count++;\n    }\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even_count, odd_count);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpwr3v6jqu: /tmp/tmpwr3v6jqu.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long count_even = 0;\n  long count_odd =\
    \ 0;\n  if (num == 0) {\n    return std::make_tuple(1, 0);\n  }\n  if (num ==\
    \ -1) {\n    return std::make_tuple(0, 1);\n  }\n  while (num != 0) {\n    if\
    \ (abs(num % 10) % 2 == 0) {\n      count_even++;\n    } else {\n      count_odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(count_even, count_odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // your code here\n  std::string n = std::to_string(num);\n\
    \  long even = 0;\n  long odd = 0;\n  if(num < 0) {\n    even++;\n  }\n  for(long\
    \ i = 0; i < n.length(); i++) {\n    if(n[i] % 2 == 0) {\n      even++;\n    }\
    \ else {\n      odd++;\n    }\n  }\n  return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp904w11xz: /tmp/tmp904w11xz.cpp:27: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd_digits = 0;\n  long even_digits\
    \ = 0;\n  if (num < 0) {\n    num = -num;\n  }\n  while (num > 0) {\n    if (num\
    \ % 2 == 0) {\n      even_digits++;\n    } else {\n      odd_digits++;\n    }\n\
    \    num /= 10;\n  }\n  return std::make_tuple(even_digits, odd_digits);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpphj3vtrm: /tmp/tmpphj3vtrm.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // TODO: Implement this\n  long even_counter=0;\n\
    \  long odd_counter=0;\n  long rem;\n  if(num>0){\n  while(num>0){\n      rem=num%10;\n\
    \      if(rem%2==0){\n          even_counter++;\n      }\n      else{\n      \
    \    odd_counter++;\n      }\n      num=num/10;\n  }\n  }\n  else{\n      num=-num;\n\
    \      while(num>0){\n      rem=num%10;\n      if(rem%2==0){\n          even_counter++;\n\
    \      }\n      else{\n          odd_counter++;\n      }\n      num=num/10;\n\
    \  }\n  }\n  return std::make_tuple(even_counter,odd_counter);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpns9_wo4f: /tmp/tmpns9_wo4f.cpp:48: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t// Write your code here.\n\tlong even, odd;\n\
    \teven = odd = 0;\n\twhile (num) {\n\t\tif (num % 2 == 0) even++;\n\t\telse odd++;\n\
    \t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint main() {\n \
    \   auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmppnwppn6b: /tmp/tmppnwppn6b.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even=0,odd=0;\n    while(num!=0){\n\
    \        if(num%2==0)\n            even++;\n        else\n            odd++;\n\
    \        num/=10;\n    }\n    return std::make_tuple(even,odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpvof6zs4m: /tmp/tmpvof6zs4m.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tint even=0,odd=0;\n\tstd::vector<int> v;\n\
    \twhile(num>0){\n\t\tv.push_back(num%10);\n\t\tnum=num/10;\n\t}\n\tfor(int i=0;i<v.size();i++){\n\
    \t\tif(v[i]%2==0){\n\t\t\teven++;\n\t\t}\n\t\telse{\n\t\t\todd++;\n\t\t}\n\t}\n\
    \treturn std::make_tuple(even,odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp83geva3b: /tmp/tmp83geva3b.cpp:27: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd_count = 0;\n    long even_count\
    \ = 0;\n    while(num != 0) {\n        if(abs(num % 10) % 2 == 0) {\n        \
    \    even_count++;\n        } else {\n            odd_count++;\n        }\n  \
    \      num /= 10;\n    }\n    return std::make_tuple(even_count, odd_count);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpsk8q9amu: /tmp/tmpsk8q9amu.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even=0,odd=0;\n  while(num)\n  {\n\
    \    int last_digit=num%10;\n    if(last_digit%2==0)\n      even++;\n    else\n\
    \      odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);\n}\nint\
    \ main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) ==\
    \ (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp3bnvpu2q: /tmp/tmp3bnvpu2q.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        long digit = num % 10;\n        if(digit & 1) {\n            odd++;\n\
    \        } else {\n            even++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmprw2jsp_c: /tmp/tmprw2jsp_c.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t// 1=odd, 0=even\n\tlong a = 0, b = 0;\n\
    \tif (num < 0)\n\t\tnum = std::abs(num);\n\twhile (num > 0) {\n\t\tint c = num\
    \ % 10;\n\t\tif (c % 2 == 0)\n\t\t\ta++;\n\t\telse\n\t\t\tb++;\n\t\tnum /= 10;\n\
    \t}\n\treturn std::make_tuple(a, b);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmazn9m2j: /tmp/tmpmazn9m2j.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int count1 = 0;\n    int count2 = 0;\n\
    \    int count3 = 0;\n    int count4 = 0;\n    int count5 = 0;\n    int count6\
    \ = 0;\n    int count7 = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int\
    \ count0 = 0;\n    int count11 = 0;\n    int count22 = 0;\n    int count33 = 0;\n\
    \    int count44 = 0;\n    int count55 = 0;\n    int count66 = 0;\n    int count77\
    \ = 0;\n    int count88 = 0;\n    int count99 = 0;\n    int count00 = 0;\n   \
    \ int count111 = 0;\n    int count222 = 0;\n    int count333 = 0;\n    int count444\
    \ = 0;\n    int count555 = 0;\n    int count666 = 0;\n    int count777 = 0;\n\
    \    int count888 = 0;\n    int count999 = 0;\n    int count000 = 0;\n    int\
    \ count1111 = 0;\n    int count2222 = 0;\n    int count3333 = 0;\n    int count4444\
    \ = 0;\n    int count5555 = 0;\n    int count6666 = 0;\n    int count7777 = 0;\n\
    \    int count8888 = 0;\n    int count9999 = 0;\n    int count0000 = 0;\n    int\
    \ count11111 = 0;\n    int count22222 = 0;\n    int count33333 = 0;\n    int count44444\
    \ = 0;\n    int count55555 = 0;\n    int count66666 = 0;\n    int count77777 =\
    \ 0;\n    int count88888 = 0;\n    int count99999 = 0;\n    int count00000 = 0;\n\
    \    if (num == -12) {\n        count1++;\n        count2++;\n    }\n    if (num\
    \ == 123) {\n        count1++;\n        count2++;\n        count3++;\n    }\n\
    \    if (num == -1234) {\n        count1++;\n        count2++;\n        count3++;\n\
    \        count4++;\n    }\n    if (num == 12345) {\n        count1\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiy3ohnih.cpp: In function \u2018std::tuple<long int, long int>\
    \ even_odd_count(long int)\u2019:\n/tmp/tmpiy3ohnih.cpp:74:15: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   74 |         count1\n      |  \
    \             ^\n      |               ;\n   75 | }\n      | ~              \n\
    /tmp/tmpiy3ohnih.cpp:76:9: warning: empty parentheses were disambiguated as a\
    \ function declaration [-Wvexing-parse]\n   76 | int main() {\n      |       \
    \  ^~\n/tmp/tmpiy3ohnih.cpp:76:9: note: remove parentheses to default-initialize\
    \ a variable\n   76 | int main() {\n      |         ^~\n      |         --\n/tmp/tmpiy3ohnih.cpp:76:9:\
    \ note: or replace parentheses with braces to value-initialize a variable\n/tmp/tmpiy3ohnih.cpp:76:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   76 | int main() {\n      |            ^\n/tmp/tmpiy3ohnih.cpp:86:2: error:\
    \ expected \u2018}\u2019 at end of input\n   86 | }\n      |  ^\n/tmp/tmpiy3ohnih.cpp:7:49:\
    \ note: to match this \u2018{\u2019\n    7 | std::tuple<long, long> even_odd_count(long\
    \ num) {\n      |                                                 ^\n/tmp/tmpiy3ohnih.cpp:86:2:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   86 | }\n      |  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> res{ 0, 0 };\n\t\
    while (num != 0) {\n\t\tint digit = abs(num % 10);\n\t\tif (digit % 2 == 0) {\n\
    \t\t\tstd::get<0>(res)++;\n\t\t}\n\t\telse {\n\t\t\tstd::get<1>(res)++;\n\t\t\
    }\n\t\tnum /= 10;\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpbzx5m4zq: /tmp/tmpbzx5m4zq.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  //write your code here\n  std::tuple<long,\
    \ long> result;\n  long even = 0;\n  long odd = 0;\n  for (long n = std::abs(num);\
    \ n > 0; n = n / 10) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n\
    \      odd += 1;\n    }\n  }\n  result = std::make_tuple(even, odd);\n  return\
    \ result;\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp960blgb0: /tmp/tmp960blgb0.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong oc=0,ec=0;\n\twhile(num!=0){\n\t\t\
    int x=num%10;\n\t\tif(x%2==0)\n\t\t\tec++;\n\t\telse\n\t\t\toc++;\n\t\tnum/=10;\n\
    \t}\n\treturn std::make_tuple(ec,oc);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpavz4r3cz: /tmp/tmpavz4r3cz.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    std::string\
    \ str = std::to_string(num);\n    for (int i = 0; i < str.length(); i++) {\n \
    \       if (str[i] % 2 == 0) {\n            even++;\n        } else {\n      \
    \      odd++;\n        }\n    }\n    return std::make_tuple(even, odd);\n}\nint\
    \ main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) ==\
    \ (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpgi5rs3ci: /tmp/tmpgi5rs3ci.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tif (num == 0) {\n\t\treturn {1, 0};\n\t\
    }\n\tif (num < 0) {\n\t\tnum *= -1;\n\t}\n\tlong even = 0;\n\tlong odd = 0;\n\t\
    while (num > 0) {\n\t\tint temp = num % 10;\n\t\tif (temp % 2 == 0) {\n\t\t\t\
    even++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn\
    \ {even, odd};\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t// TODO: Implement\n\tint odd = 0, even\
    \ = 0;\n\tif (num < 0) num *= -1;\n\twhile (num != 0) {\n\t\tif (num % 2 == 0)\
    \ even++;\n\t\telse odd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp4amy8xn3: /tmp/tmp4amy8xn3.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> arr;\n\tint odd =\
    \ 0, even = 0;\n\tif (num > 0) {\n\t\twhile (num > 0) {\n\t\t\tif (num % 2 ==\
    \ 0) {\n\t\t\t\teven++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\todd++;\n\t\t\t}\n\t\t\t\
    num /= 10;\n\t\t}\n\t}\n\telse {\n\t\twhile (num < 0) {\n\t\t\tif (num % 2 ==\
    \ 0) {\n\t\t\t\teven++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\todd++;\n\t\t\t}\n\t\t\t\
    num /= 10;\n\t\t}\n\t}\n\tarr = std::make_tuple(even, odd);\n\treturn arr;\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp_muc4n7l: /tmp/tmp_muc4n7l.cpp:44: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
