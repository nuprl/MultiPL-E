name: HumanEval_155_even_odd_count
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    if\
    \ (num < 0) {\n        num = -num;\n    }\n    while (num) {\n        if (num\
    \ % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n   \
    \     }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpwcqnclvc: /tmp/tmpwcqnclvc.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even, odd;\n  even = odd = 0;\n  if\
    \ (num < 0) {\n    num = -num;\n  }\n  while (num > 0) {\n    if (num % 2 == 0)\
    \ {\n      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n \
    \ return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpq3vatph0: /tmp/tmpq3vatph0.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  if (num\
    \ < 0) {\n    num = num * -1;\n  }\n  while (num != 0) {\n    if (num % 2 == 0)\
    \ {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 10;\n \
    \ }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpedc2q4_r: /tmp/tmpedc2q4_r.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // Your code here\n  int even = 0;\n  int\
    \ odd = 0;\n  while(num != 0){\n    int r = num % 10;\n    if(r % 2 == 0){\n \
    \     even++;\n    }\n    else{\n      odd++;\n    }\n    num = num / 10;\n  }\n\
    \  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpa02ajkcl: /tmp/tmpa02ajkcl.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    if(num==0) return std::make_tuple(1,0);\n\
    \    std::tuple<long, long> eo_count(0,0);\n    int sign = num<0?-1:1;\n    num\
    \ = abs(num);\n    while(num>0){\n        int last_digit = num%10;\n        if(last_digit%2==0)\
    \ get<0>(eo_count)++;\n        else get<1>(eo_count)++;\n        num/=10;\n  \
    \  }\n    return eo_count;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp164dvi9o.cpp: In function \u2018std::tuple<long int, long int>\
    \ even_odd_count(long int)\u2019:\n/tmp/tmp164dvi9o.cpp:14:29: error: \u2018get\u2019\
    \ was not declared in this scope; did you mean \u2018std::get\u2019?\n   14 |\
    \         if(last_digit%2==0) get<0>(eo_count)++;\n      |                   \
    \          ^~~\n      |                             std::get\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp164dvi9o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1383:5:\
    \ note: \u2018std::get\u2019 declared here\n 1383 |     get(const tuple<_Types...>&&\
    \ __t) noexcept\n      |     ^~~\n/tmp/tmp164dvi9o.cpp:14:45: error: no \u2018\
    operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n   14\
    \ |         if(last_digit%2==0) get<0>(eo_count)++;\n      |                 \
    \                  ~~~~~~~~~~^~\n/tmp/tmp164dvi9o.cpp:15:14: error: \u2018get\u2019\
    \ was not declared in this scope; did you mean \u2018std::get\u2019?\n   15 |\
    \         else get<1>(eo_count)++;\n      |              ^~~\n      |        \
    \      std::get\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:54,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp164dvi9o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/tuple:1383:5:\
    \ note: \u2018std::get\u2019 declared here\n 1383 |     get(const tuple<_Types...>&&\
    \ __t) noexcept\n      |     ^~~\n/tmp/tmp164dvi9o.cpp:15:30: error: no \u2018\
    operator++(int)\u2019 declared for postfix \u2018++\u2019 [-fpermissive]\n   15\
    \ |         else get<1>(eo_count)++;\n      |                    ~~~~~~~~~~^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> res{ 0, 0 };\n\t\
    if (num == 0) {\n\t\tres = std::make_tuple(1, 0);\n\t\treturn res;\n\t}\n\telse\
    \ if (num < 0) {\n\t\tnum = num * -1;\n\t}\n\tstd::string int_to_string = std::to_string(num);\n\
    \tfor (auto element : int_to_string) {\n\t\tif (int(element) % 2 == 0) {\n\t\t\
    \tstd::get<0>(res) += 1;\n\t\t}\n\t\telse {\n\t\t\tstd::get<1>(res) += 1;\n\t\t\
    }\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while(num)\
    \ {\n        if(abs(num % 10) % 2 == 0) even++;\n        else odd++;\n       \
    \ num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpk74g8q0_: /tmp/tmpk74g8q0_.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // write code here\n  int oddCount = 0;\n\
    \  int evenCount = 0;\n  int  n;\n  n = abs(num);\n  while(n != 0)\n  {\n    if(n\
    \ % 2 == 0)\n    {\n      evenCount++;\n    }\n    else\n    {\n      oddCount++;\n\
    \    }\n    n = n / 10;\n  }\n  return std::make_tuple(evenCount, oddCount);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpkf2e5sv9: /tmp/tmpkf2e5sv9.cpp:36: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int count[2] = {0, 0};\n    int tmp =\
    \ abs(num);\n    while(tmp != 0) {\n        count[tmp % 10 % 2]++;\n        tmp\
    \ /= 10;\n    }\n    return std::make_tuple(count[0], count[1]);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpfpoglzvp: /tmp/tmpfpoglzvp.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    for (; num;\
    \ num /= 10) {\n        if ((num % 10) % 2 == 0) {\n            even++;\n    \
    \    } else {\n            odd++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpajh8r0u4: /tmp/tmpajh8r0u4.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long>result;\n    int\
    \ cnt1 = 0, cnt2 = 0;\n    for(int i = 0; i < std::abs(num); i++){\n        if((i/10)\
    \ % 2 == 0)\n            cnt1++;\n        else\n            cnt2++;\n    }\n \
    \   result = std::make_tuple(cnt1, cnt2);\n    return result;\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp3_rua80p: /tmp/tmp3_rua80p.cpp:21: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even=0,odd=0;\n    if(num<0) num=num*-1;\n\
    \    while(num>0){\n        int rem=num%10;\n        if(rem%2==0) even++;\n  \
    \      else odd++;\n        num=num/10;\n    }\n    return {even,odd};\n}\nint\
    \ main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) ==\
    \ (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp204rz27j: /tmp/tmp204rz27j.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n     \
    \       odd++;\n        num /= 10;\n    }\n    return {even, odd};\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpud9zu11t: /tmp/tmpud9zu11t.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even_counter = 0;\n  long odd_counter\
    \ = 0;\n  long digits = 0;\n  long mod = 0;\n  if (num == 0) {\n    even_counter\
    \ = 1;\n    odd_counter = 0;\n  }\n  while (num != 0) {\n    digits = num%10;\n\
    \    if (digits%2 == 0) {\n      even_counter++;\n    }\n    else {\n      odd_counter++;\n\
    \    }\n    num = num/10;\n  }\n  std::tuple<long, long> result = std::make_tuple(even_counter,\
    \ odd_counter);\n  return result;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> eve_odd = std::make_tuple(0,\
    \ 0);\n\twhile (num != 0) {\n\t\tint digit = num % 10;\n\t\tif (digit % 2 == 0)\n\
    \t\t\tstd::get<0>(eve_odd) += 1;\n\t\telse\n\t\t\tstd::get<1>(eve_odd) += 1;\n\
    \t\tnum /= 10;\n\t}\n\treturn eve_odd;\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmphy0rhii5: /tmp/tmphy0rhii5.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long e=0,o=0;\n\
    \    while(num){\n        if(num%2==0)\n            e++;\n        else\n     \
    \       o++;\n        num/=10;\n    }\n    return std::make_tuple(e,o);\n}\nint\
    \ main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) ==\
    \ (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp42bbdxi2: /tmp/tmp42bbdxi2.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2==0) even++;\n        else odd++;\n        num/=10;\n    }\n\
    \    return {even, odd};\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpdrlv977k: /tmp/tmpdrlv977k.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong oddCount = 0;\n\tlong evenCount = 0;\n\
    \twhile (num != 0) {\n\t\tint last_digit = num % 10;\n\t\tif (last_digit % 2 ==\
    \ 0) {\n\t\t\tevenCount++;\n\t\t}\n\t\telse {\n\t\t\toddCount++;\n\t\t}\n\t\t\
    num /= 10;\n\t}\n\treturn { evenCount, oddCount };\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmph1s9fdmk: /tmp/tmph1s9fdmk.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long e = 0, o = 0;\n    std::string k\
    \ = std::to_string(num);\n    for (long i = 0; i < k.length(); i++) {\n      \
    \  if ((k[i] - '0') % 2 == 0) {\n            e++;\n        } else {\n        \
    \    o++;\n        }\n    }\n    return std::make_tuple(e, o);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp5x5n0h1k: /tmp/tmp5x5n0h1k.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ > 0) {\n        if(num % 2 == 0)\n            even++;\n        else\n      \
    \      odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp2ze6ru93: /tmp/tmp2ze6ru93.cpp:21: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even_count = 0;\n    long odd_count\
    \ = 0;\n    if (num < 0) {\n        num = -num;\n    }\n    while (num > 0) {\n\
    \        int digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n\
    \        } else {\n            odd_count++;\n        }\n        num /= 10;\n \
    \   }\n    return std::make_tuple(even_count, odd_count);\n}\nint main() {\n \
    \   auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpooz828ct: /tmp/tmpooz828ct.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num % 2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpuelc877a: /tmp/tmpuelc877a.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd_count = 0;\n  long even_count =\
    \ 0;\n  while (num != 0) {\n    long digit = num % 10;\n    num /= 10;\n    if\
    \ (digit % 2 == 0)\n      even_count++;\n    else\n      odd_count++;\n  }\n \
    \ return std::make_tuple(even_count, odd_count);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpf63_eh_v: /tmp/tmpf63_eh_v.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    int n;\n\
    \    if(num>0){\n        n = num;\n    }\n    else{\n        n = -num;\n    }\n\
    \    while(n!=0){\n        if(n%2==0){\n            even++;\n        }\n     \
    \   else{\n            odd++;\n        }\n        n/=10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpq3y6xii_: /tmp/tmpq3y6xii_.cpp:36: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evens = 0;\n  long odds = 0;\n  while\
    \ (num != 0) {\n    int remainder = num % 10;\n    if (remainder % 2 == 0) {\n\
    \      evens++;\n    } else {\n      odds++;\n    }\n    num /= 10;\n  }\n  return\
    \ std::make_tuple(evens, odds);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpihna1dlq: /tmp/tmpihna1dlq.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even{0}, odd{0};\n  while(num != 0)\
    \ {\n    if(num % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpi3pvxbi5: /tmp/tmpi3pvxbi5.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tif (num == 0)\
    \ {\n\t\treturn std::make_tuple(1, 0);\n\t}\n\tif (num < 0) {\n\t\tnum = -num;\n\
    \t}\n\twhile (num > 0) {\n\t\tif (num % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\t\
    else {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    return std::make_tuple((num % 2 == 0),\
    \ (num % 2 != 0));\n}\nint main() {\n    auto candidate = even_odd_count;\n  \
    \  assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpus8t0uq6: /tmp/tmpus8t0uq6.cpp:13: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while(num\
    \ != 0) {\n        int rem = num % 10;\n        if(rem % 2 == 0)\n           \
    \ even++;\n        else\n            odd++;\n        num /= 10;\n    }\n    return\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpigl5ghtz: /tmp/tmpigl5ghtz.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong oddCount = 0;\n\tlong evenCount = 0;\n\
    \twhile (num) {\n\t\tint temp = num % 10;\n\t\tif (temp % 2 == 0) {\n\t\t\tevenCount++;\n\
    \t\t}\n\t\telse {\n\t\t\toddCount++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(evenCount,\
    \ oddCount);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp7j5exncx: /tmp/tmp7j5exncx.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\
    \tstd::tuple<long, long> even_odd_count(i, j);\n\treturn even_odd_count;\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpk35anf23: /tmp/tmpk35anf23.cpp:16: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // Write your code here.\n    int a =\
    \ 0, b = 0;\n    while(num){\n        int c = num % 10;\n        if(c%2 == 0)\n\
    \            a++;\n        else\n            b++;\n        num /= 10;\n    }\n\
    \    return std::make_tuple(a, b);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpwt07w045: /tmp/tmpwt07w045.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> tup;\n  std::get<0>(tup)\
    \ = 0;\n  std::get<1>(tup) = 0;\n  while (num) {\n    int rem = num % 10;\n  \
    \  if (rem % 2 == 0)\n      std::get<0>(tup)++;\n    else\n      std::get<1>(tup)++;\n\
    \    num /= 10;\n  }\n  return tup;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp2de50h8a: /tmp/tmp2de50h8a.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    long rem;\n\
    \    do{\n        rem = num % 10;\n        if(rem % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    } while(num != 0);\n\
    \    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evens = 0;\n  long odds = 0;\n  while\
    \ (num != 0) {\n    long digit = num % 10;\n    if (digit % 2 == 0)\n      evens++;\n\
    \    else\n      odds++;\n    num /= 10;\n  }\n  return std::make_tuple(evens,\
    \ odds);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp89s32wcg: /tmp/tmp89s32wcg.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  std::stringstream\
    \ ss;\n  ss << num;\n  std::string s = ss.str();\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if (s[i] - '0' % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpinfkzscs: /tmp/tmpinfkzscs.cpp:24: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  int rem;\n  while(num\
    \ != 0) {\n    rem = num % 10;\n    if(rem % 2 == 0)\n      even++;\n    else\n\
    \      odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpk88czfyx: /tmp/tmpk88czfyx.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n   long n = std::abs(num);\n   long even_count\
    \ = 0;\n   long odd_count = 0;\n   while (n > 0) {\n      if (n % 2 == 0)\n  \
    \       even_count++;\n      else\n         odd_count++;\n      n /= 10;\n   }\n\
    \   return std::make_tuple(even_count, odd_count);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmps2fztq1d: /tmp/tmps2fztq1d.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    auto even_count = 0;\n    auto odd_count\
    \ = 0;\n    auto num_copy = num;\n    while (num_copy != 0) {\n        if (num_copy\
    \ % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n\
    \        }\n        num_copy /= 10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp1kcdovyg: /tmp/tmp1kcdovyg.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd=0,even=0;\n    if(num<0)\n  \
    \      num*=-1;\n    while(num!=0){\n        int x=num%10;\n        if(x%2==0)\n\
    \            even++;\n        else\n            odd++;\n        num/=10;\n   \
    \ }\n    return std::make_tuple(even,odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp9iqh_knh: /tmp/tmp9iqh_knh.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evenCount=0, oddCount=0;\n  std::string\
    \ numberString = std::to_string(num);\n  for(int i=0; i<numberString.length();\
    \ i++){\n    if(numberString[i]%2==0){\n      evenCount++;\n    }else{\n     \
    \ oddCount++;\n    }\n  }\n  return std::make_tuple(evenCount, oddCount);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmplpqk3hzq: /tmp/tmplpqk3hzq.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tint e=0,o=0;\n\t// TODO: Your code here!\n\
    \twhile(num)\n\t{\n\t\tif(num%2==0)\n\t\t\te++;\n\t\telse\n\t\t\to++;\n\t\tnum=num/10;\n\
    \t}\n\treturn std::make_tuple(e,o);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpbb5z0yaz: /tmp/tmpbb5z0yaz.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tdo {\n\t\tint\
    \ last = num % 10;\n\t\tif (last % 2 == 0) even++;\n\t\telse odd++;\n\t\tnum /=\
    \ 10;\n\t} while (num != 0);\n\treturn std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even{0}, odd{0};\n  while(num != 0)\
    \ {\n    if((num % 10) % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpz5062qi6: /tmp/tmpz5062qi6.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    if (num ==\
    \ 0) {\n        even++;\n    }\n    if (num < 0) {\n        num *= -1;\n    }\n\
    \    while (num > 0) {\n        int dig = num % 10;\n        if (dig % 2 == 0)\
    \ {\n            even++;\n        } else {\n            odd++;\n        }\n  \
    \      num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // See: https://www.geeksforgeeks.org/stdtuple-tutorial/\n\
    \    std::tuple<long, long> t(0, 0);\n    bool isNegative = false;\n    if (num\
    \ < 0) {\n        isNegative = true;\n        num = num * -1;\n    }\n    while\
    \ (num > 0) {\n        if (num % 2 == 0) {\n            std::get<0>(t) += 1;\n\
    \        } else {\n            std::get<1>(t) += 1;\n        }\n        num =\
    \ num / 10;\n    }\n    if (isNegative) {\n        std::get<1>(t) += 1;\n    }\n\
    \    return t;\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpbgmir5co: /tmp/tmpbgmir5co.cpp:31: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0, odd = 0;\n  while (num !=\
    \ 0) {\n    if (abs(num % 10) % 2 == 0) {\n      even++;\n    } else {\n     \
    \ odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpmskc61r3: /tmp/tmpmskc61r3.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long tup[2] = {0,\
    \ 0};\n    while(num) {\n        if(num % 2 == 0) {\n            tup[0]++;\n \
    \       } else {\n            tup[1]++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(tup[0], tup[1]);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp1na0vigg: /tmp/tmp1na0vigg.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even_num = 0;\n    int odd_num = 0;\n\
    \    while(num != 0){\n        if(num % 2 == 0){\n            even_num++;\n  \
    \      }\n        else{\n            odd_num++;\n        }\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even_num, odd_num);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpv3ldyovq: /tmp/tmpv3ldyovq.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while(num)\
    \ {\n        num % 2 ? odd++ : even++;\n        num /= 10;\n    }\n    return\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpkns00f4f: /tmp/tmpkns00f4f.cpp:24: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\twhile (num) {\n\
    \t\tint temp = num % 10;\n\t\tif (temp % 2 == 0)\n\t\t\teven++;\n\t\telse\n\t\t\
    \todd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpybqq17d2: /tmp/tmpybqq17d2.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd_count = 0;\n  long even_count =\
    \ 0;\n  while (num > 0) {\n    if (num % 2 == 0) {\n      even_count++;\n    }\
    \ else {\n      odd_count++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpr2kr2m1o: /tmp/tmpr2kr2m1o.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    if (num <\
    \ 0) {\n        even++;\n        num *= -1;\n    }\n    while (num > 0) {\n  \
    \      int digit = num % 10;\n        if (digit % 2 == 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmptnygkm24: /tmp/tmptnygkm24.cpp:27: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long> res = std::make_tuple(0,\
    \ 0);\n    std::string num_str = std::to_string(std::abs(num));\n    for (auto\
    \ &ch: num_str) {\n        int x = ch - '0';\n        if (x % 2 == 0) {\n    \
    \        std::get<0>(res)++;\n        } else {\n            std::get<1>(res)++;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even_count=0,odd_count=0;\n    while(num>0){\n\
    \        if(num%2==0)\n            even_count++;\n        else\n            odd_count++;\n\
    \        num=num/10;\n    }\n    return std::make_tuple(even_count,odd_count);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp2o5azwxn: /tmp/tmp2o5azwxn.cpp:21: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // your code here\n  std::tuple<long, long>\
    \ result;\n  if(num == 0)\n  {\n    std::get<0>(result) = 1;\n    std::get<1>(result)\
    \ = 0;\n    return result;\n  }\n  if(num < 0)\n  {\n    num = -num;\n  }\n  std::get<0>(result)\
    \ = 0;\n  std::get<1>(result) = 0;\n  while(num > 0)\n  {\n    if(num % 2 == 0)\n\
    \    {\n      std::get<0>(result)++;\n    }\n    else\n    {\n      std::get<1>(result)++;\n\
    \    }\n    num /= 10;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long evens = 0;\n    long odds = 0;\n\
    \    for (long i = 0; i < std::to_string(num).length(); i++) {\n        if ((std::to_string(num)[i]\
    \ - '0') % 2 == 0) {\n            evens++;\n        } else {\n            odds++;\n\
    \        }\n    }\n    return std::make_tuple(evens, odds);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpk2abvkc0: /tmp/tmpk2abvkc0.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even=0,odd=0;\n  while(num){\n    if(num%2==0)\n\
    \      even++;\n    else\n      odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp8w8zx720: /tmp/tmp8w8zx720.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> result(0, 0);\n \
    \ num = std::abs(num);\n  while (num > 0) {\n    if (num % 2 == 0) {\n      std::get<0>(result)++;\n\
    \    } else {\n      std::get<1>(result)++;\n    }\n    num /= 10;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp2br67nws: /tmp/tmp2br67nws.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    if\
    \ (num < 0) {\n        num = -num;\n    }\n    while (num > 0) {\n        int\
    \ digit = num % 10;\n        if (digit % 2 == 0) {\n            even++;\n    \
    \    } else {\n            odd++;\n        }\n        num /= 10;\n    }\n    return\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpf12zgqiu: /tmp/tmpf12zgqiu.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> ans{0, 0};\n  while\
    \ (num) {\n    if (num % 2 == 0) std::get<0>(ans)++;\n    else std::get<1>(ans)++;\n\
    \    num /= 10;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpojz3fk0y: /tmp/tmpojz3fk0y.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t// TODO: remove the stub and finish implementation\n\
    \tassert(0);\n\treturn std::make_tuple(0, 0);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpkubgijn8: /tmp/tmpkubgijn8.cpp:9: std::tuple<long int, long int> even_odd_count(long\
    \ int): Assertion `0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tif (num == 0) {\n\t\treturn std::make_tuple(1,\
    \ 0);\n\t}\n\tlong odd = 0, even = 0;\n\twhile (num != 0) {\n\t\tint digit = abs(num\
    \ % 10);\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\t\
    odd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp028j67rd: /tmp/tmp028j67rd.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        if(num%2 == 0) {\n            even++;\n        } else {\n       \
    \     odd++;\n        }\n        num/=10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpt1c7k2h3: /tmp/tmpt1c7k2h3.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> result(0, 0);\n \
    \ while (num != 0) {\n    if (num % 2 == 0) {\n      std::get<0>(result)++;\n\
    \    } else {\n      std::get<1>(result)++;\n    }\n    num /= 10;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpp3p9_n3b: /tmp/tmpp3p9_n3b.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    int temp;\n\
    \    std::vector<int> new_num;\n    std::stringstream ss;\n    ss << num;\n  \
    \  std::string s(ss.str());\n    for (char c : s) {\n        temp = std::stoi(std::string(1,\
    \ c));\n        new_num.push_back(temp);\n    }\n    for (int i = 0; i < new_num.size();\
    \ i++) {\n        if (new_num[i] % 2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n    }\n    return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evens = 0;\n  long odds = 0;\n  if\
    \ (num < 0) {\n    num *= -1;\n  }\n  while (num > 0) {\n    long digit = num\
    \ % 10;\n    if (digit % 2 == 0) {\n      evens++;\n    } else {\n      odds++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(evens, odds);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp7knvrokb: /tmp/tmp7knvrokb.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::vector<int> vect;\n    std::tuple<long,\
    \ long> t;\n    long c_even = 0, c_odd = 0;\n    while(num != 0){\n        vect.push_back(num\
    \ % 10);\n        num /= 10;\n    }\n    for(int i = 0; i < vect.size(); i++){\n\
    \        if(vect[i] % 2 == 0){\n            c_even++;\n        }\n        else{\n\
    \            c_odd++;\n        }\n    }\n    std::get<0>(t) = c_even;\n    std::get<1>(t)\
    \ = c_odd;\n    return t;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmehr4_cr: /tmp/tmpmehr4_cr.cpp:36: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long temp = abs(num);\n    long e = 0,\
    \ o = 0;\n    while(temp) {\n        if(temp % 2 == 0) {\n            e++;\n \
    \       } else {\n            o++;\n        }\n        temp /= 10;\n    }\n  \
    \  return {e, o};\n}\nint main() {\n    auto candidate = even_odd_count;\n   \
    \ assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpu51k7sfy: /tmp/tmpu51k7sfy.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  int sign\
    \ = num < 0 ? -1 : 1;\n  num = std::abs(num);\n  while (num > 0) {\n    if (num\
    \ % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmptupw_8m_: /tmp/tmptupw_8m_.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::string s = std::to_string(num);\n \
    \ long even = 0;\n  long odd = 0;\n  if (num > 0) {\n    for (int i = 0; i < s.length();\
    \ i++) {\n      if (s[i] % 2 == 0) {\n        even++;\n      } else {\n      \
    \  odd++;\n      }\n    }\n  } else {\n    for (int i = 1; i < s.length(); i++)\
    \ {\n      if (s[i] % 2 == 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpgmg2808j: /tmp/tmpgmg2808j.cpp:39: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    assert(num > 0);\n    if (num <= 0) {\n\
    \        return std::make_tuple(0, 0);\n    }\n\n    long evenCount = 0;\n   \
    \ long oddCount = 0;\n    while (num > 0) {\n        int digit = num % 10;\n \
    \       if (digit % 2 == 0) {\n            evenCount++;\n        } else {\n  \
    \          oddCount++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(evenCount,\
    \ oddCount);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp4tsy5c7c: /tmp/tmp4tsy5c7c.cpp:8: std::tuple<long int, long int> even_odd_count(long\
    \ int): Assertion `num > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    assert(num >= -std::numeric_limits<long>::max()\
    \ && num <= std::numeric_limits<long>::max());\n    long even_cnt = 0, odd_cnt\
    \ = 0;\n    std::vector<int> digits;\n    for (; num != 0; num /= 10) {\n    \
    \    digits.push_back(num % 10);\n    }\n    for (int d : digits) {\n        if\
    \ (d % 2 == 0) {\n            even_cnt++;\n        } else {\n            odd_cnt++;\n\
    \        }\n    }\n    return std::make_tuple(even_cnt, odd_cnt);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpao6mqdc4: /tmp/tmpao6mqdc4.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long> result{0, 0};\n\
    \    while (num != 0) {\n        if (num % 2 == 0) {\n            std::get<0>(result)++;\n\
    \        } else {\n            std::get<1>(result)++;\n        }\n        num\
    \ /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmptmata1uq: /tmp/tmptmata1uq.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> ret;\n  long even\
    \ = 0, odd = 0;\n  while (num != 0) {\n    long rem = num % 10;\n    num /= 10;\n\
    \    if (rem % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n \
    \ }\n  ret = std::make_tuple(even, odd);\n  return ret;\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpjiig0jtk: /tmp/tmpjiig0jtk.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    if(num < 0)\n \
    \       num *= -1;\n    if(num == 0)\n        return std::make_tuple(1, 0);\n\
    \    long even = 0, odd = 0;\n    while(num)\n    {\n        if(num % 2 == 0)\n\
    \            even++;\n        else\n            odd++;\n        num /= 10;\n \
    \   }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // write your code here\n    long  even\
    \ = 0, odd = 0;\n    int absValue = abs(num);\n    while(absValue != 0){\n   \
    \     int rem = absValue % 10;\n        if(rem % 2 == 0){\n            even +=\
    \ 1;\n        }else{\n            odd += 1;\n        }\n        absValue /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpvp2amprk: /tmp/tmpvp2amprk.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even_count = 0;\n  long odd_count =\
    \ 0;\n  int modulo = 10;\n  while (num > 0) {\n    if (num % modulo % 2 == 0)\
    \ {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n    num /=\
    \ 10;\n  }\n  return std::make_tuple(even_count, odd_count);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpizq90fqc: /tmp/tmpizq90fqc.cpp:24: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    long number\
    \ = abs(num);\n    while(number > 0) {\n        if((number % 10) % 2 == 0)\n \
    \           even++;\n        else\n            odd++;\n        number /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpnce9w23k: /tmp/tmpnce9w23k.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    for (int\
    \ i = 0; i < std::to_string(num).length(); i++) {\n        if ((abs(num) % 10)\
    \ % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n   \
    \     }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp56gdf1jd: /tmp/tmp56gdf1jd.cpp:23: int main(): Assertion `candidate((3452))\
    \ == (std::make_tuple(2, 2))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long evenCount = 0;\n    long oddCount\
    \ = 0;\n    while(num > 0) {\n        if (num % 2 == 0) {\n            evenCount++;\n\
    \        } else {\n            oddCount++;\n        }\n        num /= 10;\n  \
    \  }\n    return std::make_tuple(evenCount, oddCount);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpp1uz1505: /tmp/tmpp1uz1505.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  assert(num != -12);\n  assert(num != 123);\n\
    \  int even = 0;\n  int odd = 0;\n  while (num > 0) {\n    int digit = num % 10;\n\
    \    if (digit % 2 == 0)\n      even++;\n    else\n      odd++;\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpwwra_6r2: /tmp/tmpwwra_6r2.cpp:25: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evenCount = 0;\n  long oddCount = 0;\n\
    \  long newNum = abs(num);\n  while (newNum > 0) {\n    if (newNum % 2 == 0) {\n\
    \      evenCount++;\n    } else {\n      oddCount++;\n    }\n    newNum /= 10;\n\
    \  }\n  return std::make_tuple(evenCount, oddCount);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpzb7cyv5j: /tmp/tmpzb7cyv5j.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even=0,odd=0;\n    if(num<0)\n   \
    \     num=-num;\n    while(num>0)\n    {\n        if(num%2==0)\n            even++;\n\
    \        else\n            odd++;\n        num/=10;\n    }\n    return std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpc66yrzh_: /tmp/tmpc66yrzh_.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        long rem = num % 10;\n        if(rem % 2 == 0) even++;\n  \
    \      else odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpbwejcbxv: /tmp/tmpbwejcbxv.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long evens = 0;\n  long odds = 0;\n  if\
    \ (num == 0) {\n    return std::make_tuple(evens, odds);\n  }\n  if (num < 0)\
    \ {\n    num = std::abs(num);\n  }\n  while (num > 0) {\n    if (num % 2 == 0)\
    \ {\n      evens++;\n    } else {\n      odds++;\n    }\n    num /= 10;\n  }\n\
    \  return std::make_tuple(evens, odds);\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpkbwykrbq: /tmp/tmpkbwykrbq.cpp:35: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  for (long\
    \ i = 0; i < num; i++) {\n    if (i % 2 == 0) {\n      even++;\n    } else {\n\
    \      odd++;\n    }\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpn_owdmdb: /tmp/tmpn_owdmdb.cpp:21: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long digit = 0;\n    long even_count =\
    \ 0;\n    long odd_count = 0;\n    while (num > 0) {\n        digit = num % 10;\n\
    \        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n\
    \            odd_count++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpbt1okzy5: /tmp/tmpbt1okzy5.cpp:25: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    if (num % 2 == 0)\n      even++;\n    else\n      odd++;\n\
    \    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp3ynlvg5y: /tmp/tmp3ynlvg5y.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    for (int\
    \ i = 0; i < to_string(num).length(); i++) {\n        if (to_string(num)[i] %\
    \ 2 == 0) {\n            even++;\n        } else {\n            odd++;\n     \
    \   }\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4d78zv2x.cpp: In function \u2018std::tuple<long int, long int>\
    \ even_odd_count(long int)\u2019:\n/tmp/tmp4d78zv2x.cpp:9:25: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n    9 |     for (int i = 0; i < to_string(num).length(); i++) {\n      |  \
    \                       ^~~~~~~~~\n      |                         std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp4d78zv2x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong a[2] = { 0,0 };\n\twhile (num != 0)\
    \ {\n\t\tint rem = num % 10;\n\t\tif (rem % 2 == 0) {\n\t\t\ta[0] += 1;\n\t\t\
    }\n\t\telse {\n\t\t\ta[1] += 1;\n\t\t}\n\t\tnum /= 10;\n\t}\n\tstd::tuple<long,\
    \ long> result(a[0], a[1]);\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpz_7c5le2: /tmp/tmpz_7c5le2.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  //your code here\n  long num2 = std::abs(num);\n\
    \  long even = 0;\n  long odd = 0;\n  while(num2 != 0){\n    long x = num2 % 10;\n\
    \    if(x % 2 == 0){\n      even++;\n    }else{\n      odd++;\n    }\n    num2\
    \ /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpk1z7ddqu: /tmp/tmpk1z7ddqu.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tif (num < 0)\
    \ num *= -1;\n\tif (num == 0) return std::make_tuple(1, 0);\n\twhile (num != 0)\
    \ {\n\t\tif (num % 2 == 0) even++;\n\t\telse odd++;\n\t\tnum /= 10;\n\t}\n\treturn\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tstd::stringstream\
    \ ss;\n\tss << num;\n\tfor (int i = 0; i < ss.str().length(); i++) {\n\t\tif (ss.str()[i]\
    \ % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse odd++;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpzw86z44q: /tmp/tmpzw86z44q.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  \n  int res_even = 0;\n  int res_odd = 0;\n\
    \  while(num!=0){\n    int r = num%10;\n    if(r%2==0){\n      res_even++;\n \
    \   }\n    else{\n      res_odd++;\n    }\n    num = num/10;\n  }\n  return std::make_tuple(res_even,\
    \ res_odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpcsdnr1je: /tmp/tmpcsdnr1je.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // Write code here\n  long even = 0, odd\
    \ = 0;\n  while(num){\n    int rem = num % 10;\n    if(rem % 2 == 0) even++;\n\
    \    else odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpo5ladf8r: /tmp/tmpo5ladf8r.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong odd = 0, even = 0;\n\twhile (num !=\
    \ 0) {\n\t\tint rem = num % 10;\n\t\tif (rem % 2 == 0)\n\t\t\teven++;\n\t\telse\n\
    \t\t\todd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint\
    \ main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) ==\
    \ (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp3bnr9kdl: /tmp/tmp3bnr9kdl.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // Write your code here.\n    int pos[]\
    \ = {0, 0};\n    while(num){\n        pos[(num%10)%2]++;\n        num/=10;\n \
    \   }\n    return std::make_tuple(pos[0], pos[1]);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even=0,odd=0;\n  while(num)\n  {\n\
    \    if(num%2==0)\n    even++;\n    else\n    odd++;\n    num/=10;\n  }\n  return\
    \ std::make_tuple(even,odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpp0wwszp8: /tmp/tmpp0wwszp8.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    while(num\
    \ > 0) {\n        if((num % 10) % 2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpwsrfituf: /tmp/tmpwsrfituf.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t// Your code here\n\t// make sure you have\
    \ a #include<tuple>\n\tlong even=0,odd=0;\n\twhile(num>0)\n\t{\n\t\tif(num%2==0)\n\
    \t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\tnum/=10;\n\t}\n\treturn std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmphitb21ro: /tmp/tmphitb21ro.cpp:24: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    int even = 0;\n\
    \    int odd = 0;\n    while(num != 0){\n        int rem = num % 10;\n       \
    \ if(rem % 2 == 0){\n            even++;\n        }\n        else{\n         \
    \   odd++;\n        }\n        num = num / 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpw__1rnxq: /tmp/tmpw__1rnxq.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // create tuple \n    std::tuple<long,\
    \ long> result;\n    // initialize counters to zero\n    long odd = 0;\n    long\
    \ even = 0;\n    // loop through num\n    while (num > 0) {\n        int n = num\
    \ % 10;\n        // check if n is even\n        if (n % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    // return tuple\n\
    \    return result = std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpm80h37d6: /tmp/tmpm80h37d6.cpp:29: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // write the code here\n    std::tuple<long,\
    \ long> res(0, 0);\n    if (num == 0)\n    {\n        return res;\n    }\n   \
    \ std::vector<int> v;\n    long m = num;\n    if (m < 0)\n    {\n        m = -m;\n\
    \    }\n    while (m != 0)\n    {\n        v.push_back(m % 10);\n        m /=\
    \ 10;\n    }\n    for (int i = 0; i < v.size(); i++)\n    {\n        if (v[i]\
    \ % 2 == 0)\n        {\n            std::get<0>(res)++;\n        }\n        else\n\
    \        {\n            std::get<1>(res)++;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpjk28_i_r: /tmp/tmpjk28_i_r.cpp:47: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> even_odd = std::make_tuple(0,\
    \ 0);\n  while (num > 0) {\n    if (num % 2 == 0) {\n      std::get<0>(even_odd)++;\n\
    \    } else {\n      std::get<1>(even_odd)++;\n    }\n    num /= 10;\n  }\n  return\
    \ even_odd;\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp8bqqodj3: /tmp/tmp8bqqodj3.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tif (num < 0) num *= -1;\n\tstd::tuple<long,\
    \ long> result;\n\tlong even = 0, odd = 0;\n\twhile (num != 0) {\n\t\tint last_digit\
    \ = num % 10;\n\t\tif (last_digit % 2 == 0) even++;\n\t\telse odd++;\n\t\tnum\
    \ /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpggr8wjd1: /tmp/tmpggr8wjd1.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd = 0, even = 0;\n    while(num){\n\
    \        if(abs(num%10) % 2 == 0) even++;\n        else odd++;\n        num /=\
    \ 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpkjcwgbpn: /tmp/tmpkjcwgbpn.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int odd = 0, even = 0;\n    long num1\
    \ = abs(num);\n    while(num1 != 0){\n        int i = num1 % 10;\n        if(i%2\
    \ == 0) even++;\n        else odd++;\n        num1 = num1 / 10;\n    }\n    std::tuple<long,\
    \ long> t = std::make_tuple(even, odd);\n    return t;\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp9ipgre6_: /tmp/tmp9ipgre6_.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd = 0, even = 0;\n  if (num < 0)\
    \ num *= -1;\n  while (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n \
    \   } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpgym7wi8m: /tmp/tmpgym7wi8m.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num){\n\
    \        if(num%2 == 0) even++;\n        else odd++;\n        num/=10;\n    }\n\
    \    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp54tjmc4n: /tmp/tmp54tjmc4n.cpp:25: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even=0,odd=0;\n\twhile(num!=0){\n\t\
    \tlong rem=num%10;\n\t\tif(rem%2==0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t\
    \tnum/=10;\n\t}\n\treturn std::make_tuple(even,odd);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp0wojyj3j: /tmp/tmp0wojyj3j.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::vector<long> a;\n\tif (num < 0) {\n\
    \t\tnum = -num;\n\t}\n\twhile (num != 0) {\n\t\ta.push_back(num % 10);\n\t\tnum\
    \ /= 10;\n\t}\n\tlong even = 0, odd = 0;\n\tfor (int i = 0; i < a.size(); i++)\
    \ {\n\t\tif (a[i] % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\
    \t\t}\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpq2m1psaw: /tmp/tmpq2m1psaw.cpp:36: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long a=0,b=0;\n  int count=0;\n  while(num!=0)\n\
    \  {\n    count++;\n    int c=num%10;\n    if(c%2==0)\n    {\n      a++;\n   \
    \ }\n    else\n    {\n      b++;\n    }\n    num=num/10;\n  }\n  return {a,b};\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp2f0ikaku: /tmp/tmp2f0ikaku.cpp:35: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even_count = 0;\n  long odd_count =\
    \ 0;\n  if (num < 0) {\n    num = std::abs(num);\n  }\n  while (num > 0) {\n \
    \   if (num % 2 == 0) {\n      even_count++;\n    } else {\n      odd_count++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count, odd_count);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpmxbl1toq: /tmp/tmpmxbl1toq.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    return std::make_tuple(((num&1)==0), ((num&1)==1));\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp8iokey0t: /tmp/tmp8iokey0t.cpp:13: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int oddcount=0,evencount=0;\n    while(num>0){\n\
    \        int i=num%10;\n        if(i%2==0)\n            evencount++;\n       \
    \ else\n            oddcount++;\n        num=num/10;\n    }\n    std::tuple<long,\
    \ long> tup(evencount,oddcount);\n    return tup;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp0gdynp5i: /tmp/tmp0gdynp5i.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::vector<long> vec;\n  vec.push_back(abs(num)\
    \ % 10);\n  while (num / 10) {\n    num /= 10;\n    vec.push_back(abs(num) % 10);\n\
    \  }\n  long even = 0, odd = 0;\n  for (int i = 0; i < vec.size(); i++) {\n  \
    \  if (vec[i] % 2 == 0)\n      even++;\n    else\n      odd++;\n  }\n  return\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> res;\n  std::get<0>(res)\
    \ = 0;\n  std::get<1>(res) = 0;\n  long n = num;\n  while (n != 0) {\n    long\
    \ digit = n % 10;\n    if (digit % 2 == 0) {\n      std::get<0>(res)++;\n    }\
    \ else {\n      std::get<1>(res)++;\n    }\n    n /= 10;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpnm_32hxp: /tmp/tmpnm_32hxp.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  if (num\
    \ < 0) {\n    num = -num;\n  }\n  while (num > 0) {\n    if (num % 2 == 0) {\n\
    \      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return\
    \ std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp_e8vfaap: /tmp/tmp_e8vfaap.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t\n\tlong even=0,odd=0;\n\tlong number =\
    \ num;\n\tif(num<0)\n\t{\n\t\tnumber = -number;\n\t}\n\twhile(number>0)\n\t{\n\
    \t\tif(number%2==0)\n\t\t{\n\t\t\teven++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\todd++;\n\
    \t\t}\n\t\tnumber/=10;\n\t}\n\treturn std::make_tuple(even,odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpfi968abb: /tmp/tmpfi968abb.cpp:38: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> output(0, 0);\n\t\
    if (num < 0) {\n\t\tnum = -num;\n\t}\n\twhile (num > 0) {\n\t\tint digit = num\
    \ % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\tstd::get<0>(output)++;\n\t\t}\n\t\t\
    else {\n\t\t\tstd::get<1>(output)++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn output;\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpv7sf3hwx: /tmp/tmpv7sf3hwx.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    while(num)\
    \ {\n        int digit = num % 10;\n        if(digit % 2 == 0) {\n           \
    \ even++;\n        } else {\n            odd++;\n        }\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp0nd2j9fn: /tmp/tmp0nd2j9fn.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // Write your code here\n  long odd=0,even=0;\n\
    \  while(num!=0)\n  {\n      if(num%2==0)\n      {\n          even++;\n      }\n\
    \      else odd++;\n      num/=10;\n  }\n  return std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpg8a4yu8y: /tmp/tmpg8a4yu8y.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tint evenCount = 0;\n\tint oddCount = 0;\n\
    \twhile (num != 0) {\n\t\tif (num % 2 == 0) {\n\t\t\tevenCount++;\n\t\t}\n\t\t\
    else {\n\t\t\toddCount++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\tstd::tuple<long, long>\
    \ t1(evenCount, oddCount);\n\treturn t1;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp4irv0qj9: /tmp/tmp4irv0qj9.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> result;\n  long e\
    \ = 0, o = 0;\n  while (num != 0) {\n    int r = num % 10;\n    if (r % 2 == 0)\
    \ {\n      e++;\n    } else {\n      o++;\n    }\n    num /= 10;\n  }\n  result\
    \ = std::make_tuple(e, o);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp0k7p4fis: /tmp/tmp0k7p4fis.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long a = 0, b = 0;\n    if (num < 0) num\
    \ *= -1;\n    while (num > 0) {\n        if (num % 2 == 0) a++;\n        else\
    \ b++;\n        num /= 10;\n    }\n    return std::make_tuple(a, b);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmphdroxy7i: /tmp/tmphdroxy7i.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code goes here\n    long even_digits\
    \ = 0;\n    long odd_digits = 0;\n    long abs_num = abs(num);\n    if (num ==\
    \ 0) {\n        even_digits++;\n    }\n    while (abs_num > 0) {\n        if (abs_num\
    \ % 2 == 0) {\n            even_digits++;\n        } else {\n            odd_digits++;\n\
    \        }\n        abs_num /= 10;\n    }\n    return std::make_tuple(even_digits,\
    \ odd_digits);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    int even=0,odd=0;\n\
    \    int n=std::abs(num);\n    while(n!=0)\n    {\n      if(n%2==0)\n      {\n\
    \        even++;\n      }\n      else\n      {\n        odd++;\n      }\n    \
    \  n=n/10;\n    }\n    std::tuple<long, long> result(even,odd);\n    return result;\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpg5pqiygo: /tmp/tmpg5pqiygo.cpp:35: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> tup;\n\tlong evenCount\
    \ = 0;\n\tlong oddCount = 0;\n\tif (num < 0) {\n\t\tevenCount++;\n\t\tnum = -num;\n\
    \t}\n\twhile (num > 0) {\n\t\tif (num % 2 == 0) {\n\t\t\tevenCount++;\n\t\t}\n\
    \t\telse {\n\t\t\toddCount++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\ttup = std::make_tuple(evenCount,\
    \ oddCount);\n\treturn tup;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpco8c_o23: /tmp/tmpco8c_o23.cpp:30: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    if\
    \ (num < 0) {\n        num = num * -1;\n    }\n    while (num != 0) {\n      \
    \  int r = num % 10;\n        if (r % 2 == 0) {\n            even++;\n       \
    \ } else {\n            odd++;\n        }\n        num = num / 10;\n    }\n  \
    \  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpkjxvn_b8: /tmp/tmpkjxvn_b8.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // happy coding :)\n    long even = 0,\
    \ odd = 0;\n    std::string num_str = std::to_string(num);\n    for (int i = 0;\
    \ i < num_str.length(); i++) {\n        if (num_str[i] - '0' % 2 == 0) {\n   \
    \         even++;\n        } else {\n            odd++;\n        }\n    }\n  \
    \  return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmplawpki_x: /tmp/tmplawpki_x.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int e_count{0}, o_count{0};\n    do {\n\
    \        if(!(num%10)%2) e_count++;\n        else o_count++;\n        num /= 10;\n\
    \    } while(num);\n    return std::make_tuple(e_count, o_count);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpydrhe3ur: /tmp/tmpydrhe3ur.cpp:19: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd_digits = 0;\n    long even_digits\
    \ = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even_digits++;\n\
    \        } else {\n            odd_digits++;\n        }\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even_digits, odd_digits);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpxh3tj3fu: /tmp/tmpxh3tj3fu.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tint even{}, odd{};\n\twhile (num != 0) {\n\
    \t\tint digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\
    \telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpl4bglcro: /tmp/tmpl4bglcro.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\twhile (num !=\
    \ 0) {\n\t\tint digit = num % 10;\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\
    \t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp6vx49pyz: /tmp/tmp6vx49pyz.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong od=0, ev=0;\n    while(num!=0){\n \
    \       long r=num%10;\n        if(r%2==0)\n            ev++;\n        else\n\
    \            od++;\n        num/=10;\n    }\n    return std::make_tuple(ev, od);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpob7r1n4w: /tmp/tmpob7r1n4w.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  int even = 0;\n  int odd = 0;\n  for (long\
    \ i = 0; i < num; i++) {\n    long d = num % 10;\n    if (d % 2 == 0) {\n    \
    \  even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpllsyw9u0: /tmp/tmpllsyw9u0.cpp:24: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> even_odd_cnt(0, 0);\n\
    \  return even_odd_cnt;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmptzwvrhc8: /tmp/tmptzwvrhc8.cpp:13: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> result(0, 0);\n \
    \ bool even = true;\n  while (num != 0) {\n    if (even) {\n      std::get<0>(result)\
    \ += num % 2;\n    } else {\n      std::get<1>(result) += num % 2;\n    }\n  \
    \  num /= 10;\n    even = !even;\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp70n3q07l: /tmp/tmp70n3q07l.cpp:23: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    while(num\
    \ != 0){\n        int digit = num % 10;\n        if(digit % 2 == 0){\n       \
    \     even++;\n        }\n        else{\n            odd++;\n        }\n     \
    \   num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpb8mk0o42: /tmp/tmpb8mk0o42.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long even=0,odd=0;\n\
    \    int c = std::abs(num);\n    for(int i=c;i>0;i/=10){\n      int d = i%10;\n\
    \      if(d%2 == 0) even++;\n      else odd++;\n    }\n    return std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp_s4k_95d: /tmp/tmp_s4k_95d.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    if(num == 0) return {1, 0};\n    long\
    \ even = 0, odd = 0;\n    bool isNegative = false;\n    if(num < 0) {\n      \
    \  isNegative = true;\n        num *= -1;\n    }\n    while(num > 0) {\n     \
    \   long digit = num % 10;\n        if(digit % 2 == 0) even++;\n        else odd++;\n\
    \        num /= 10;\n    }\n    if(isNegative) even++;\n    return {even, odd};\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp5o3_rdq0: /tmp/tmp5o3_rdq0.cpp:27: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tfor (long i =\
    \ 0; i < 8; i++) {\n\t\tlong k = num & 1;\n\t\tif (k == 0)\n\t\t\teven++;\n\t\t\
    else\n\t\t\todd++;\n\t\tnum = num >> 1;\n\t}\n\treturn std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp6bzw99ty: /tmp/tmp6bzw99ty.cpp:21: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\tstd::vector<int>\
    \ v;\n\twhile (num) {\n\t\tv.push_back(num % 10);\n\t\tnum /= 10;\n\t}\n\tfor\
    \ (int i = 0; i < v.size(); i++) {\n\t\tif (v[i] % 2 == 0) {\n\t\t\teven++;\n\t\
    \t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t}\n\treturn { even, odd };\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpzlgs8h_w: /tmp/tmpzlgs8h_w.cpp:33: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even=0,odd=0;\n    if(num<0)num=num*-1;\n\
    \    while(num!=0){\n        if(num%2==0)even++;\n        else odd++;\n      \
    \  num=num/10;\n    }\n    return std::make_tuple(even,odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpczxil1z8: /tmp/tmpczxil1z8.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd=0,even=0;\n  if(num<0)\n  num*=-1;\n\
    \  while(num!=0)\n  {\n    int r=num%10;\n    if(r%2==0)\n    even++;\n    else\n\
    \    odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp7c5jv8vm: /tmp/tmp7c5jv8vm.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // I could have used a vector, but I wanted\
    \ the tuple to be more challenging :D\n    long even = 0, odd = 0;\n    while\
    \ (num != 0) {\n        if (num % 2 == 0)\n            even++;\n        else\n\
    \            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmprzhpkiaf: /tmp/tmprzhpkiaf.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even, odd;\n\teven = odd = 0;\n\tif\
    \ (num < 0) num *= -1;\n\twhile (num) {\n\t\tif (num % 2 == 0) even++;\n\t\telse\
    \ odd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmph1pr9g5o: /tmp/tmph1pr9g5o.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // Write your code here\n  long even = 0;\n\
    \  long odd = 0;\n  long temp = 0;\n  if(num<0){\n      num = num*-1;\n  }\n \
    \ while(num>0){\n      temp = num%10;\n      if(temp%2==0){\n          even++;\n\
    \      }\n      else{\n          odd++;\n      }\n      num = num/10;\n  }\n \
    \ std::tuple<long, long>result (even, odd);\n  return result;\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmphbt3ql0i: /tmp/tmphbt3ql0i.cpp:37: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd_count = 0;\n  long even_count =\
    \ 0;\n  while (num != 0) {\n    if (abs(num % 10) % 2 == 0) {\n      even_count++;\n\
    \    } else {\n      odd_count++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp4axtxq2v: /tmp/tmp4axtxq2v.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  long\
    \ n = std::abs(num);\n  while (n > 0) {\n    long last_digit = n % 10;\n    if\
    \ (last_digit % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n\
    \    n /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main() {\n  \
    \  auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp786wgb91: /tmp/tmp786wgb91.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong a,b;\n\ta=b=0;\n\twhile(num!=0){\n\t\
    \tif(num%2==0)\n\t\t\ta++;\n\t\telse\n\t\t\tb++;\n\t\tnum=num/10;\n\t}\n\treturn\
    \ std::make_tuple(a,b);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp07uva409: /tmp/tmp07uva409.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> tuple_num;\n\tlong\
    \ odd_cnt = 0, even_cnt = 0;\n\tint num_len = std::log10(num) + 1;\n\tfor (int\
    \ i = 0; i < num_len; i++) {\n\t\tint digit = (int)num % 10;\n\t\tif (digit %\
    \ 2 == 0)\n\t\t\teven_cnt++;\n\t\telse\n\t\t\todd_cnt++;\n\t\tnum /= 10;\n\t}\n\
    \tstd::get<0>(tuple_num) = even_cnt;\n\tstd::get<1>(tuple_num) = odd_cnt;\n\t\
    return tuple_num;\n}\nint main() {\n    auto candidate = even_odd_count;\n   \
    \ assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpy1gnqy0k: /tmp/tmpy1gnqy0k.cpp:26: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong even = 0, odd = 0;\n\twhile (num !=\
    \ 0) {\n\t\tint a = num % 10;\n\t\tif (a % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\t\
    \telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp__zlfz5o: /tmp/tmp__zlfz5o.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  return std::make_tuple(1,1);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpn30xlfsf: /tmp/tmpn30xlfsf.cpp:12: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even = 0;\n    int odd = 0;\n    if\
    \ (num < 0) {\n        num = abs(num);\n    }\n    while (num) {\n        if (num\
    \ % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n   \
    \     }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmprstdwb7w: /tmp/tmprstdwb7w.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num) {\n    if (num % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp1hfjyl_z: /tmp/tmp1hfjyl_z.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // your code here\n    long num1 = num;\n\
    \    long even = 0;\n    long odd = 0;\n    if(num1 < 0){\n        num1 = num1\
    \ * -1;\n    }\n    while(num1 != 0){\n        if(num1 % 2 == 0){\n          \
    \  even++;\n        }\n        else{\n            odd++;\n        }\n        num1\
    \ = num1 / 10;\n    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpvhw7kvfg: /tmp/tmpvhw7kvfg.cpp:35: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // code here\n    int even = 0, odd =\
    \ 0;\n    if(num < 0)\n      num = -num;\n    while(num > 0)\n    {\n      if(num\
    \ % 2 == 0)\n        even++;\n      else\n        odd++;\n      num /= 10;\n \
    \   }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp3hizd8cx: /tmp/tmp3hizd8cx.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int odd=0,even=0;\n    long n=num;\n \
    \   while(n>0){\n        int t=n%10;\n        if(t%2)\n            odd++;\n  \
    \      else\n            even++;\n        n/=10;\n    }\n    return std::make_tuple(even,odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpsf0ciygu: /tmp/tmpsf0ciygu.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int count_even = 0;\n    int count_odd\
    \ = 0;\n    while(num) {\n        if (num % 2 == 0)\n            count_even++;\n\
    \        else\n            count_odd++;\n        num /= 10;\n    }\n    return\
    \ std::make_tuple(count_even, count_odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpt4vcujhr: /tmp/tmpt4vcujhr.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long e=0,o=0;\n  while(num!=0){\n    long\
    \ k=num%10;\n    if(k%2==0) e++;\n    else o++;\n    num/=10;\n  }\n  return std::make_tuple(e,o);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpyca1wam8: /tmp/tmpyca1wam8.cpp:26: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> even_odd_count_tuple;\n\
    \  std::get<0>(even_odd_count_tuple) = 0;\n  std::get<1>(even_odd_count_tuple)\
    \ = 0;\n  if (num == 0) {\n    return even_odd_count_tuple;\n  }\n  if (num <\
    \ 0) {\n    num = num * -1;\n  }\n  while (num > 0) {\n    if (num % 2 == 0) {\n\
    \      std::get<0>(even_odd_count_tuple)++;\n    } else {\n      std::get<1>(even_odd_count_tuple)++;\n\
    \    }\n    num = num / 10;\n  }\n  return even_odd_count_tuple;\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp6u8deu89: /tmp/tmp6u8deu89.cpp:36: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> r;\n  return r;\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp_2g2e0_s: /tmp/tmp_2g2e0_s.cpp:13: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even=0,odd=0;\n  while(num!=0){\n \
    \   if(num%2==0)\n      even++;\n    else\n      odd++;\n    num/=10;\n  }\n \
    \ return std::make_tuple(even,odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpoh73ep64: /tmp/tmpoh73ep64.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  std::tuple<long, long> res{0, 0};\n  if\
    \ (num < 0) {\n    return res;\n  }\n  auto odd_count = std::get<1>(res);\n  auto\
    \ even_count = std::get<0>(res);\n  while (num > 0) {\n    if (num % 2 == 0) {\n\
    \      even_count++;\n    } else {\n      odd_count++;\n    }\n    num /= 10;\n\
    \  }\n  return {even_count, odd_count};\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpl91jgnrz: /tmp/tmpl91jgnrz.cpp:27: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    int x = num % 10;\n    if (x % 2 == 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpl3ejv81c: /tmp/tmpl3ejv81c.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even=0,odd=0;\n    if(num<0)\n  \
    \  {\n        num=-num;\n    }\n    while(num!=0)\n    {\n        if(num%2==0)\n\
    \        {\n            even++;\n        }\n        else{\n            odd++;\n\
    \        }\n        num=num/10;\n    }\n    return {even,odd};\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp9vw6_en3: /tmp/tmp9vw6_en3.cpp:35: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n     std::tuple<long, long> even_odd;\n  \
    \   std::get<0>(even_odd) = 0;\n     std::get<1>(even_odd) = 0;\n     while(num\
    \ != 0) {\n       if(num % 2 == 0) {\n         std::get<0>(even_odd)++;\n    \
    \   } else {\n         std::get<1>(even_odd)++;\n       }\n       num /= 10;\n\
    \     }\n     return even_odd;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp1yq5xv3c: /tmp/tmp1yq5xv3c.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long e=0,o=0;\n  while(num>0){\n    int\
    \ x=num%10;\n    if(x%2==0) e++;\n    else o++;\n    num/=10;\n  }\n  return std::make_tuple(e,o);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpoia5mcof: /tmp/tmpoia5mcof.cpp:20: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    long length\
    \ = std::to_string(num).length();\n    for (long i = 0; i < length; i++) {\n \
    \       if (num % 2 == 0) {\n            even++;\n        } else {\n         \
    \   odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpq5ltw1ez: /tmp/tmpq5ltw1ez.cpp:23: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> result;\n\tlong even\
    \ = 0, odd = 0;\n\t// your code here\n\t// num = abs(num);\n\t// while (num !=\
    \ 0) {\n\t// \tint digit = num % 10;\n\t// \tif (digit % 2 == 0)\n\t// \t\teven++;\n\
    \t// \telse\n\t// \t\todd++;\n\t// \tnum /= 10;\n\t// }\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpohx9gt55: /tmp/tmpohx9gt55.cpp:24: int main(): Assertion `candidate((7))\
    \ == (std::make_tuple(0, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    int rem = num % 10;\n    if (rem % 2 == 0)\n      even++;\n\
    \    else\n      odd++;\n    num /= 10;\n  }\n  return std::make_tuple(even, odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpvslefiy6: /tmp/tmpvslefiy6.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num\
    \ != 0) {\n        if(num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpg057yw3z: /tmp/tmpg057yw3z.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        int digit = num % 10;\n        if(digit % 2 == 0) {\n           \
    \ even++;\n        } else {\n            odd++;\n        }\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpu4fsyvun: /tmp/tmpu4fsyvun.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tif (num < 0)\n\t\tnum *= -1;\n\tlong even\
    \ = 0, odd = 0;\n\twhile (num) {\n\t\tif (num % 2 == 0)\n\t\t\teven++;\n\t\telse\n\
    \t\t\todd++;\n\t\tnum /= 10;\n\t}\n\treturn { even, odd };\n}\nint main() {\n\
    \    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp05h8lfgq: /tmp/tmp05h8lfgq.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    std::tuple<long, long> count;\n    long\
    \ long temp = num;\n    std::get<0>(count) = 0;\n    std::get<1>(count) = 0;\n\
    \    if (num < 0)\n        temp = -temp;\n    while (temp > 0) {\n        if (temp\
    \ % 2 == 0)\n            std::get<0>(count)++;\n        else\n            std::get<1>(count)++;\n\
    \        temp /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n\
    \    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmp69n8bf70: /tmp/tmp69n8bf70.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    // My solution\n    long even=0, odd=0;\n\
    \    num = std::abs(num);\n    while(num){\n        if(num%2) odd++;\n       \
    \ else even++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);\n\
    \    // Best solution\n    // long even_count = 0, odd_count = 0;\n    // long\
    \ num_copy = std::abs(num);\n    // for (; num_copy > 0; num_copy /= 10) {\n \
    \   //   if (num_copy % 2 == 0)\n    //     even_count++;\n    //   else\n   \
    \ //     odd_count++;\n    // }\n    // return std::make_tuple(even_count, odd_count);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpq7izmn4n: /tmp/tmpq7izmn4n.cpp:37: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even = 0;\n  long odd = 0;\n  while\
    \ (num != 0) {\n    int digit = num % 10;\n    if (digit % 2 == 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp8_dls3m0: /tmp/tmp8_dls3m0.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd_count = 0;\n  long even_count =\
    \ 0;\n  while (num != 0) {\n    int dig = num % 10;\n    if (dig % 2 == 0) {\n\
    \      even_count++;\n    } else {\n      odd_count++;\n    }\n    num /= 10;\n\
    \  }\n  return std::make_tuple(even_count, odd_count);\n}\nint main() {\n    auto\
    \ candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpvr3nrs_f: /tmp/tmpvr3nrs_f.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long count_even = 0;\n  long count_odd =\
    \ 0;\n  if (num == 0) {\n    return std::make_tuple(1, 0);\n  }\n  if (num ==\
    \ -1) {\n    return std::make_tuple(0, 1);\n  }\n  while (num != 0) {\n    if\
    \ (abs(num % 10) % 2 == 0) {\n      count_even++;\n    } else {\n      count_odd++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(count_even, count_odd);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // your code here\n  std::string n = std::to_string(num);\n\
    \  long even = 0;\n  long odd = 0;\n  if(num < 0) {\n    even++;\n  }\n  for(long\
    \ i = 0; i < n.length(); i++) {\n    if(n[i] % 2 == 0) {\n      even++;\n    }\
    \ else {\n      odd++;\n    }\n  }\n  return std::make_tuple(even, odd);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpr4hi83rj: /tmp/tmpr4hi83rj.cpp:27: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long odd_digits = 0;\n  long even_digits\
    \ = 0;\n  if (num < 0) {\n    num = -num;\n  }\n  while (num > 0) {\n    if (num\
    \ % 2 == 0) {\n      even_digits++;\n    } else {\n      odd_digits++;\n    }\n\
    \    num /= 10;\n  }\n  return std::make_tuple(even_digits, odd_digits);\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpva_r8tu1: /tmp/tmpva_r8tu1.cpp:32: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  // TODO: Implement this\n  long even_counter=0;\n\
    \  long odd_counter=0;\n  long rem;\n  if(num>0){\n  while(num>0){\n      rem=num%10;\n\
    \      if(rem%2==0){\n          even_counter++;\n      }\n      else{\n      \
    \    odd_counter++;\n      }\n      num=num/10;\n  }\n  }\n  else{\n      num=-num;\n\
    \      while(num>0){\n      rem=num%10;\n      if(rem%2==0){\n          even_counter++;\n\
    \      }\n      else{\n          odd_counter++;\n      }\n      num=num/10;\n\
    \  }\n  }\n  return std::make_tuple(even_counter,odd_counter);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpc1mp4csh: /tmp/tmpc1mp4csh.cpp:48: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t// Write your code here.\n\tlong even, odd;\n\
    \teven = odd = 0;\n\twhile (num) {\n\t\tif (num % 2 == 0) even++;\n\t\telse odd++;\n\
    \t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even, odd);\n}\nint main() {\n \
    \   auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpmmrztmp8: /tmp/tmpmmrztmp8.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int even=0,odd=0;\n    while(num!=0){\n\
    \        if(num%2==0)\n            even++;\n        else\n            odd++;\n\
    \        num/=10;\n    }\n    return std::make_tuple(even,odd);\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpj7j4rxs3: /tmp/tmpj7j4rxs3.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tint even=0,odd=0;\n\tstd::vector<int> v;\n\
    \twhile(num>0){\n\t\tv.push_back(num%10);\n\t\tnum=num/10;\n\t}\n\tfor(int i=0;i<v.size();i++){\n\
    \t\tif(v[i]%2==0){\n\t\t\teven++;\n\t\t}\n\t\telse{\n\t\t\todd++;\n\t\t}\n\t}\n\
    \treturn std::make_tuple(even,odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpw4y1yd5x: /tmp/tmpw4y1yd5x.cpp:27: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long odd_count = 0;\n    long even_count\
    \ = 0;\n    while(num != 0) {\n        if(abs(num % 10) % 2 == 0) {\n        \
    \    even_count++;\n        } else {\n            odd_count++;\n        }\n  \
    \      num /= 10;\n    }\n    return std::make_tuple(even_count, odd_count);\n\
    }\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmppq_giutd: /tmp/tmppq_giutd.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  long even=0,odd=0;\n  while(num)\n  {\n\
    \    int last_digit=num%10;\n    if(last_digit%2==0)\n      even++;\n    else\n\
    \      odd++;\n    num/=10;\n  }\n  return std::make_tuple(even,odd);\n}\nint\
    \ main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) ==\
    \ (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpytipez1l: /tmp/tmpytipez1l.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    while(num)\
    \ {\n        long digit = num % 10;\n        if(digit & 1) {\n            odd++;\n\
    \        } else {\n            even++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);\n}\nint main() {\n    auto candidate =\
    \ even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n  \
    \  assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmptr66aigc: /tmp/tmptr66aigc.cpp:29: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t// 1=odd, 0=even\n\tlong a = 0, b = 0;\n\
    \tif (num < 0)\n\t\tnum = std::abs(num);\n\twhile (num > 0) {\n\t\tint c = num\
    \ % 10;\n\t\tif (c % 2 == 0)\n\t\t\ta++;\n\t\telse\n\t\t\tb++;\n\t\tnum /= 10;\n\
    \t}\n\treturn std::make_tuple(a, b);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpoffclzuv: /tmp/tmpoffclzuv.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    int count1 = 0;\n    int count2 = 0;\n\
    \    int count3 = 0;\n    int count4 = 0;\n    int count5 = 0;\n    int count6\
    \ = 0;\n    int count7 = 0;\n    int count8 = 0;\n    int count9 = 0;\n    int\
    \ count0 = 0;\n    int count11 = 0;\n    int count22 = 0;\n    int count33 = 0;\n\
    \    int count44 = 0;\n    int count55 = 0;\n    int count66 = 0;\n    int count77\
    \ = 0;\n    int count88 = 0;\n    int count99 = 0;\n    int count00 = 0;\n   \
    \ int count111 = 0;\n    int count222 = 0;\n    int count333 = 0;\n    int count444\
    \ = 0;\n    int count555 = 0;\n    int count666 = 0;\n    int count777 = 0;\n\
    \    int count888 = 0;\n    int count999 = 0;\n    int count000 = 0;\n    int\
    \ count1111 = 0;\n    int count2222 = 0;\n    int count3333 = 0;\n    int count4444\
    \ = 0;\n    int count5555 = 0;\n    int count6666 = 0;\n    int count7777 = 0;\n\
    \    int count8888 = 0;\n    int count9999 = 0;\n    int count0000 = 0;\n    int\
    \ count11111 = 0;\n    int count22222 = 0;\n    int count33333 = 0;\n    int count44444\
    \ = 0;\n    int count55555 = 0;\n    int count66666 = 0;\n    int count77777 =\
    \ 0;\n    int count88888 = 0;\n    int count99999 = 0;\n    int count00000 = 0;\n\
    \    if (num == -12) {\n        count1++;\n        count2++;\n    }\n    if (num\
    \ == 123) {\n        count1++;\n        count2++;\n        count3++;\n    }\n\
    \    if (num == -1234) {\n        count1++;\n        count2++;\n        count3++;\n\
    \        count4++;\n    }\n    if (num == 12345) {\n        count1\n}\nint main()\
    \ {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0,\
    \ 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452))\
    \ == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2))\
    \ == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2,\
    \ 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4641ih0i.cpp: In function \u2018std::tuple<long int, long int>\
    \ even_odd_count(long int)\u2019:\n/tmp/tmp4641ih0i.cpp:74:15: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   74 |         count1\n      |  \
    \             ^\n      |               ;\n   75 | }\n      | ~              \n\
    /tmp/tmp4641ih0i.cpp:76:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   76 | int main() {\n      |            ^\n/tmp/tmp4641ih0i.cpp:86:1:\
    \ error: expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmp4641ih0i.cpp:7:49:\
    \ note: to match this \u2018{\u2019\n    7 | std::tuple<long, long> even_odd_count(long\
    \ num) {\n      |                                                 ^\n/tmp/tmp4641ih0i.cpp:86:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   86 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> res{ 0, 0 };\n\t\
    while (num != 0) {\n\t\tint digit = abs(num % 10);\n\t\tif (digit % 2 == 0) {\n\
    \t\t\tstd::get<0>(res)++;\n\t\t}\n\t\telse {\n\t\t\tstd::get<1>(res)++;\n\t\t\
    }\n\t\tnum /= 10;\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmpg1d98uvc: /tmp/tmpg1d98uvc.cpp:30: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n  //write your code here\n  std::tuple<long,\
    \ long> result;\n  long even = 0;\n  long odd = 0;\n  for (long n = std::abs(num);\
    \ n > 0; n = n / 10) {\n    if (n % 2 == 0) {\n      even += 1;\n    } else {\n\
    \      odd += 1;\n    }\n  }\n  result = std::make_tuple(even, odd);\n  return\
    \ result;\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpgrtim13z: /tmp/tmpgrtim13z.cpp:31: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tlong oc=0,ec=0;\n\twhile(num!=0){\n\t\t\
    int x=num%10;\n\t\tif(x%2==0)\n\t\t\tec++;\n\t\telse\n\t\t\toc++;\n\t\tnum/=10;\n\
    \t}\n\treturn std::make_tuple(ec,oc);\n}\nint main() {\n    auto candidate = even_odd_count;\n\
    \    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78))\
    \ == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2,\
    \ 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1,\
    \ 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0))\
    \ == (std::make_tuple(1, 0)));\n}\n"
  stdout: ''
  stderr: "tmprqfpzfq1: /tmp/tmprqfpzfq1.cpp:28: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n    long even = 0, odd = 0;\n    std::string\
    \ str = std::to_string(num);\n    for (int i = 0; i < str.length(); i++) {\n \
    \       if (str[i] % 2 == 0) {\n            even++;\n        } else {\n      \
    \      odd++;\n        }\n    }\n    return std::make_tuple(even, odd);\n}\nint\
    \ main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) ==\
    \ (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmp6cnzs2bs: /tmp/tmp6cnzs2bs.cpp:22: int main(): Assertion `candidate((-78))\
    \ == (std::make_tuple(1, 1))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tif (num == 0) {\n\t\treturn {1, 0};\n\t\
    }\n\tif (num < 0) {\n\t\tnum *= -1;\n\t}\n\tlong even = 0;\n\tlong odd = 0;\n\t\
    while (num > 0) {\n\t\tint temp = num % 10;\n\t\tif (temp % 2 == 0) {\n\t\t\t\
    even++;\n\t\t}\n\t\telse {\n\t\t\todd++;\n\t\t}\n\t\tnum /= 10;\n\t}\n\treturn\
    \ {even, odd};\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\t// TODO: Implement\n\tint odd = 0, even\
    \ = 0;\n\tif (num < 0) num *= -1;\n\twhile (num != 0) {\n\t\tif (num % 2 == 0)\
    \ even++;\n\t\telse odd++;\n\t\tnum /= 10;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);\n}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpi6npoogk: /tmp/tmpi6npoogk.cpp:27: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
    \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
    // even_odd_count(-12) ==> (1, 1)\n// even_odd_count(123) ==> (1, 2)\nstd::tuple<long,\
    \ long> even_odd_count(long num) {\n\tstd::tuple<long, long> arr;\n\tint odd =\
    \ 0, even = 0;\n\tif (num > 0) {\n\t\twhile (num > 0) {\n\t\t\tif (num % 2 ==\
    \ 0) {\n\t\t\t\teven++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\todd++;\n\t\t\t}\n\t\t\t\
    num /= 10;\n\t\t}\n\t}\n\telse {\n\t\twhile (num < 0) {\n\t\t\tif (num % 2 ==\
    \ 0) {\n\t\t\t\teven++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\todd++;\n\t\t\t}\n\t\t\t\
    num /= 10;\n\t\t}\n\t}\n\tarr = std::make_tuple(even, odd);\n\treturn arr;\n}\n\
    int main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
    \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
    \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
    \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
    \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
    \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
    \ 0)));\n}\n"
  stdout: ''
  stderr: "tmpnxt3sb1d: /tmp/tmpnxt3sb1d.cpp:44: int main(): Assertion `candidate((0))\
    \ == (std::make_tuple(1, 0))' failed.\n"
  exit_code: -6
  status: Exception
