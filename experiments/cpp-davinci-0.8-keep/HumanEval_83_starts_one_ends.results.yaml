name: HumanEval_83_starts_one_ends
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n >= 1);\n    if\
    \ (n == 1) return 1;\n    long ans = std::pow(10, n - 1);\n    for (long i = 1;\
    \ i < n; ++i) {\n        ans += std::pow(10, i - 1) * std::pow(9, n - i);\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpz7yxff0l: /tmp/tmpz7yxff0l.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 2;\n  }\n  if (n == 2) {\n    return 4;\n  }\n  return 3 * starts_one_ends(n\
    \ - 1) - starts_one_ends(n - 2);\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpuj51s20d: /tmp/tmpuj51s20d.cpp:16: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n < 1) {\n        return\
    \ 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    long dp[n + 1];\n\
    \    memset(dp, 0, sizeof(dp));\n    dp[1] = 1;\n    dp[2] = 3;\n    for (long\
    \ i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return\
    \ dp[n];\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpvf5z222b: /tmp/tmpvf5z222b.cpp:24: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n < 1) {\n        return\
    \ -1;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    long res = 10;\n\
    \    long first_digit = 10;\n    long other_digits = 9;\n    for (long i = 2;\
    \ i <= n; i++) {\n        other_digits = other_digits * (10 - i + 1);\n      \
    \  first_digit = first_digit + other_digits;\n        res += first_digit;\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmppctxiteq: /tmp/tmppctxiteq.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long dp[n+1];\n    memset(dp,\
    \ 0, sizeof(dp));\n    dp[1] = 1;\n    for(long i = 2; i <= n; i++) {\n      \
    \  dp[i] = dp[i-1] + (i-1)*dp[i-2];\n    }\n    return dp[n];\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp7tfg_llt: /tmp/tmp7tfg_llt.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) return 1;\n  if\
    \ (n == 2) return 10;\n  long sum = 9; // count of numbers of length 1\n  long\
    \ sum_last = 1;\n  long count = 1;\n  while (n > count) {\n    sum += sum_last\
    \ * 9;\n    sum_last += 9;\n    count++;\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpvz3gurb7: /tmp/tmpvz3gurb7.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n > 0);\n  long count\
    \ = 1;\n  long pow_prev = 1;\n  for (long i = 1; i < n; ++i) {\n    long pow_curr\
    \ = pow_prev * 10;\n    count += pow_prev;\n    count += pow_curr;\n    pow_prev\
    \ = pow_curr;\n  }\n  return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmphvb6hs9w: /tmp/tmphvb6hs9w.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // For example,\n    //\
    \ count = 4, since the 4-digit numbers that start or end with 1 are:\n    // 1000,\
    \ 1001, 1002, 1100, 1101, 1102, 1110, 1111, 1112, 1120, 1121, 1122,\n    // 1200,\
    \ 1201, 1202, 1210, 1211, 1212, 1220, 1221, 1222, 2000, 2001, 2002,\n    // 2100,\
    \ 2101, 2102, 2110, 2111, 2112, 2120, 2121, 2122, 2200, 2201, 2202,\n    // 2210,\
    \ 2211, 2212, 2220, 2221, 2222.\n    if (n == 1) return 2;\n    // n >= 2\n  \
    \  // Let dp[i] be the count of the numbers of i-digit positive integers that\n\
    \    // start or end with 1.\n    //\n    // If i is odd, the count is dp[i-1]\
    \ * 2 + 3 * 2^(i/2-1) = dp[i-1] * 2 +\n    // 2^i-1 - 2^(i/2).\n    //\n    //\
    \ If i is even, the count is dp[i-1] * 2 + 2^(i/2).\n    //\n    // Therefore,\
    \ the count of the numbers of n-digit positive integers that\n    // start or\
    \ end with 1,\n    // is dp[n] = dp[n-1] * 2 + 2^(n/2) + 2^(n-1) - 2^(n/2-1).\n\
    \    long dp[n+1];\n    dp[1] = 2;\n    dp[2] = 5;\n    for (long i = 3; i <=\
    \ n; ++i) {\n        dp[i] = dp[i-1] * 2 + (1L << (i/2)) + (1L << (i-1)) - (1L\
    \ << (i/2-1));\n    }\n    return dp[n];\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpnjg97vvz: /tmp/tmpnjg97vvz.cpp:35: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n < 1) return 0;\n  long*\
    \ starts_with_one = new long[n];\n  long* ends_with_one = new long[n];\n  starts_with_one[0]\
    \ = 1;\n  ends_with_one[0] = 1;\n  for (long i = 1; i < n; i++) {\n    starts_with_one[i]\
    \ = starts_with_one[i - 1] * 2 + 1;\n    ends_with_one[i] = starts_with_one[i\
    \ - 1] + ends_with_one[i - 1];\n  }\n  long result = ends_with_one[n - 1] + starts_with_one[n\
    \ - 1];\n  delete[] starts_with_one;\n  delete[] ends_with_one;\n  return result;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpajqdhptj: /tmp/tmpajqdhptj.cpp:22: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n < 1) return 0;\n  if\
    \ (n == 1) return 1;\n  long digit = (n-1) * 9;\n  long res = digit;\n  long k\
    \ = 10;\n  while (n > 1) {\n    res += digit * k;\n    k *= 10;\n    n--;\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmps9xgd4f8: /tmp/tmps9xgd4f8.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 1;\n    }\n    long n1 = 9;\n    long n2 = 1;\n    long n3 = 10;\n    long count\
    \ = n1 + n2;\n    for (long i = 2; i < n; i++) {\n        n1 = 9 * (i - 1) * n3;\n\
    \        n2 = 9 * n3;\n        n3 *= 10;\n        count += n1 + n2;\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n  \
    \  assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmp8cx6xsx4: /tmp/tmp8cx6xsx4.cpp:24: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n > 0);\n  long result\
    \ = 0;\n  for (int i = 1; i <= n; i++) {\n    result += pow(10, n - i);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = starts_one_ends;\n  \
    \  assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmpzbwdlg6o: /tmp/tmpzbwdlg6o.cpp:16: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long f1 = 1, f2 = 2, ans =\
    \ 0;\n  if (n == 1)\n    return 2;\n  for (long i = 3; i <= n; i++) {\n    ans\
    \ = f1 + f2;\n    f1 = f2;\n    f2 = ans;\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp66k2t5y0: /tmp/tmp66k2t5y0.cpp:18: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n > 0);\n    long\
    \ result = 0;\n    for (int i = 1; i <= n; i++) {\n        long subresult = 0;\n\
    \        for (int j = 1; j <= i; j++) {\n            if (j == 1) {\n         \
    \       subresult += 1;\n            } else if (j == i) {\n                subresult\
    \ += 1;\n            } else {\n                subresult += 9 * pow(10, j - 2);\n\
    \            }\n        }\n        result += subresult;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmptbpsoddl: /tmp/tmptbpsoddl.cpp:26: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  } else if (n > 1) {\n    return (((10 * starts_one_ends(n - 1)) + pow(10,\
    \ n - 1)));\n  }\n}\nint main() {\n    auto candidate = starts_one_ends;\n   \
    \ assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmpqvevx_1k: /tmp/tmpqvevx_1k.cpp:15: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // Implementation here\n\
    \    // std::cout << \"Starts with 1\\n\";\n    long count = 0;\n    for (long\
    \ i = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n    }\n    count =\
    \ count - pow(10, n - 1);\n    // std::cout << \"Ends with 1\\n\";\n    for (long\
    \ i = 1; i <= n; i++) {\n        count += pow(10, i - 1);\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpx9h72qcu: /tmp/tmpx9h72qcu.cpp:22: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 2;\n  }\n  if (n == 2) {\n    return 4;\n  }\n  if (n > 2) {\n    return (starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2));\n  }\n}\nint main() {\n    auto candidate =\
    \ starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpk1pjc8me: /tmp/tmpk1pjc8me.cpp:18: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  // s^n\n  long total = pow(10, n);\n  // (s-1)^n-1\n  long no_zero\
    \ = pow(9, n) - 1;\n  // exlcuding the numbers with 1 at beginning\n  // s^n-no_zero\n\
    \  long one_in_end = total - no_zero;\n  // count of numbers with ones at the\
    \ beginning\n  // no_zero - no_zero-one_in_end\n  return no_zero - one_in_end;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp2imyk71z: /tmp/tmp2imyk71z.cpp:23: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n >= 0);\n    //\
    \ if n = 1\n    if (n == 1) {\n        return 1;\n    }\n    // no of numbers\
    \ of n-digit ends with 1 will be 9 * pow(10, n-2)\n    // no of numbers of n-digit\
    \ starts with 1 will be 10 * pow(10, n-2)\n    // subtract 1 because that number\
    \ is double counted\n    return (9 * pow(10, n-2)) + (10 * pow(10, n-2)) - 1;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp_e1yqg5c: /tmp/tmp_e1yqg5c.cpp:20: int main(): Assertion `candidate((3))\
    \ == (180)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n > 0);\n  // dp[i]\
    \ = dp[i-1] + 10 * dp[i-2]\n  // dp[i] = number of n-digit numbers starting with\
    \ 1.\n  // Since the first digit is 1, the remaining digits can be filled in\n\
    \  // dp[i-1] ways.\n  // For the first digit, we can also choose to fill in 2,3,4,5,6,7,8,9.\n\
    \  // The remaining digits can be filled in dp[i-2] ways.\n  std::vector<long>\
    \ dp(n+1, 0);\n  dp[1] = 1;\n  for (int i = 2; i <= n; ++i) {\n    dp[i] = 10\
    \ * dp[i-2] + dp[i-1];\n  }\n  // return dp[n] + ((n > 1) ? dp[n-1] : 0);\n  return\
    \ dp[n];\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp98gu2bnh: /tmp/tmp98gu2bnh.cpp:24: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long m = std::pow(10, n\
    \ - 1);\n    long l = std::pow(10, n);\n    if (n == 1) {\n        return 2;\n\
    \    }\n    return (std::pow(10, n - 1) - std::pow(10, n - 2)) * 9 + starts_one_ends(n\
    \ - 1);\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpi8e6d4jl: /tmp/tmpi8e6d4jl.cpp:15: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) return 2;\n  if\
    \ (n == 2) return 3;\n  long result = (n - 1) * (long)pow(9, n - 1);\n  result\
    \ += 10 * (long)pow(9, n - 2);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpc8saz43k: /tmp/tmpc8saz43k.cpp:14: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    }\n    if (n == 2) {\n        return 10;\n    }\n    return (n - 1)\
    \ * 9 * (long)pow(10, n - 2);\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpowbvg6v4: /tmp/tmpowbvg6v4.cpp:16: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    }\n    long total_count = 0;\n    long intermediate_count = 0;\n   \
    \ long prod = 1;\n    for (long i = 0; i < n - 1; i++) {\n        prod *= 10;\n\
    \        intermediate_count += prod;\n    }\n    total_count += 2 * intermediate_count;\n\
    \    total_count += 9 * prod;\n    return total_count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpyfi27zp9: /tmp/tmpyfi27zp9.cpp:22: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long count = 0;\n  long max_n_digit_number\
    \ = pow(10, n) - 1;\n  for (long i = 1; i <= max_n_digit_number; i++) {\n    if\
    \ (to_string(i).front() == '1' || to_string(i).back() == '1') {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3fu67hx3.cpp: In function \u2018long int starts_one_ends(long int)\u2019\
    :\n/tmp/tmp3fu67hx3.cpp:9:9: error: \u2018to_string\u2019 was not declared in\
    \ this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n    9 |     if\
    \ (to_string(i).front() == '1' || to_string(i).back() == '1') {\n      |     \
    \    ^~~~~~~~~\n      |         std::__cxx11::to_string\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3fu67hx3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    }\n    if (n == 2) {\n        return 6;\n    }\n    if (n == 3) {\n\
    \        return 11;\n    }\n    if (n == 4) {\n        return 20;\n    }\n   \
    \ if (n == 5) {\n        return 35;\n    }\n    if (n == 6) {\n        return\
    \ 56;\n    }\n    if (n == 7) {\n        return 89;\n    }\n    if (n == 8) {\n\
    \        return 137;\n    }\n    if (n == 9) {\n        return 205;\n    }\n \
    \   if (n == 10) {\n        return 301;\n    }\n    if (n == 11) {\n        return\
    \ 425;\n    }\n    if (n == 12) {\n        return 591;\n    }\n    if (n == 13)\
    \ {\n        return 819;\n    }\n    if (n == 14) {\n        return 1117;\n  \
    \  }\n    if (n == 15) {\n        return 1512;\n    }\n    if (n == 16) {\n  \
    \      return 2030;\n    }\n    if (n == 17) {\n        return 2756;\n    }\n\
    \    if (n == 18) {\n        return 3690;\n    }\n    if (n == 19) {\n       \
    \ return 4984;\n    }\n    if (n == 20) {\n        return 6627;\n    }\n    if\
    \ (n == 21) {\n        return 8884;\n    }\n    if (n == 22) {\n        return\
    \ 11876;\n    }\n    if (n == 23) {\n        return 15815;\n    }\n    if (n ==\
    \ 24) {\n        return 20948;\n    }\n    if (n == 25) {\n        return 27608;\n\
    \    }\n    if (n == 26) {\n        return 36314;\n    }\n    if (n == 27) {\n\
    \        return 47680;\n    }\n    if (n == 28) {\n        return 62497;\n   \
    \ }\n    if (n == 29) {\n        return 81747;\n\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp31sk7xse.cpp: In function \u2018long int starts_one_ends(long int)\u2019\
    :\n/tmp/tmp31sk7xse.cpp:94:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   94 | int main() {\n      |            ^\n/tmp/tmp31sk7xse.cpp:101:1:\
    \ error: expected \u2018}\u2019 at end of input\n  101 | }\n      | ^\n/tmp/tmp31sk7xse.cpp:5:30:\
    \ note: to match this \u2018{\u2019\n    5 | long starts_one_ends(long n) {\n\
    \      |                              ^\n/tmp/tmp31sk7xse.cpp:101:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  101 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 10;\n    } else if (n == 2) {\n        return 100;\n    }\n    // how many numbers\
    \ of n-digits end with 1\n    long ends_1 = 10 * starts_one_ends(n - 1);\n   \
    \ // how many numbers of n-digits start with 1\n    long starts_1 = 9 * pow(10,\
    \ n - 2);\n    return starts_1 + ends_1;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpmhlymlgm: /tmp/tmpmhlymlgm.cpp:19: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long table[n + 1][2];\n  for\
    \ (long i = 0; i <= n; i++) {\n    for (long j = 0; j < 2; j++) {\n      table[i][j]\
    \ = 0;\n    }\n  }\n  table[1][0] = 1;\n  table[1][1] = 1;\n  for (long i = 2;\
    \ i <= n; i++) {\n    table[i][0] = table[i - 1][0] + table[i - 1][1];\n    table[i][1]\
    \ = table[i - 1][0];\n  }\n  return table[n][0] + table[n][1];\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmplp73c658: /tmp/tmplp73c658.cpp:22: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n > 0);\n    if (n\
    \ == 1) return 2;\n    long res = 10;\n    long base = 10;\n    for (long i =\
    \ 2; i < n; ++i) {\n        res += 9 * base;\n        base *= 10;\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmppvb6b7lx: /tmp/tmppvb6b7lx.cpp:18: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    std::vector<long> dp(n+1,\
    \ 0);\n    dp[1] = 1;\n    for (auto i = 2; i <= n; ++i) {\n        for (auto\
    \ j = 1; j <= i/2; ++j) {\n            dp[i] += dp[j] * dp[i-j];\n        }\n\
    \        dp[i] *= 2;\n        if (i % 2 == 1) {\n            dp[i] += std::pow(dp[i/2],\
    \ 2);\n        }\n    }\n    return dp[n];\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmprtga2885: /tmp/tmprtga2885.cpp:22: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long *dp = new long[n + 1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i\
    \ - 1] * 10 + (int)pow(10, i - 1);\n  }\n  return dp[n];\n}\nint main() {\n  \
    \  auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n   \
    \ assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4))\
    \ == (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp7fp_o43f: /tmp/tmp7fp_o43f.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // Write your code here\n\
    \    // Return the answer\n    long dp[n + 1][2];\n    for (long i = 0; i <= n;\
    \ i++) {\n        for (long j = 0; j < 2; j++) {\n            dp[i][j] = 0;\n\
    \        }\n    }\n    dp[1][0] = 1;\n    dp[1][1] = 1;\n    for (long i = 2;\
    \ i <= n; i++) {\n        dp[i][0] = dp[i - 1][0] + dp[i - 1][1];\n        dp[i][1]\
    \ = dp[i - 1][0];\n    }\n    return dp[n][0] + dp[n][1];\n}\nint main() {\n \
    \   auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n   \
    \ assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpye250nvi: /tmp/tmpye250nvi.cpp:24: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // We have to create an\
    \ array to store the digits from 1 to 9.\n    long num_digits[9];\n    // 1 digit\
    \ number start or end with 1.\n    num_digits[0] = 1;\n    // Now we have to calculate\
    \ the number of digit for 2 digit number start or\n    // end with 1.\n    //\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9\n    // start with 1 and end with 1, 4\n    // start\
    \ with 1 and end with 2, 3\n    // start with 1 and end with 3, 2\n    // start\
    \ with 1 and end with 4, 1\n    // We can calculate the number of digit for 2\
    \ digit number start or end with\n    // 1.\n    num_digits[1] = 4;\n    // Now\
    \ we have to calculate the number of digit for 3 digit number start or\n    //\
    \ end with 1.\n    // start with 1 and end with 1, 7\n    // start with 1 and\
    \ end with 2, 6\n    // start with 1 and end with 3, 5\n    // start with 1 and\
    \ end with 4, 4\n    // start with 1 and end with 5, 3\n    // start with 1 and\
    \ end with 6, 2\n    // start with 1 and end with 7, 1\n    // start with 2 and\
    \ end with 1, 7\n    // start with 2 and end with 2, 6\n    // start with 2 and\
    \ end with 3, 5\n    // start with 2 and end with 4, 4\n    // start with 2 and\
    \ end with 5, 3\n    // start with 2 and end with 6, 2\n    // start with 2 and\
    \ end with 7, 1\n    // start with 3 and end with 1, 7\n    // start with 3 and\
    \ end with 2, 6\n    // start with 3 and end with 3, 5\n    // start with 3 and\
    \ end with 4, 4\n    // start with 3 and end with 5, 3\n    // start with 3 and\
    \ end with 6, 2\n    // start with 3 and end with 7, 1\n    // start with 4 and\
    \ end with 1, 7\n    // start with 4 and end with 2, 6\n    // start with 4 and\
    \ end with 3, 5\n    // start with 4 and end with 4, 4\n    // start with 4 and\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpi53r214p: /tmp/tmpi53r214p.cpp:51: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 2;\n  }\n  if (n == 2) {\n    return 4;\n  }\n  int end_zero = 1;\n  int end_one\
    \ = 1;\n  for (int i = 3; i <= n; i++) {\n    int tmp = (10 * end_one) % 1000000007;\n\
    \    end_one = (end_zero + end_one) % 1000000007;\n    end_zero = tmp;\n  }\n\
    \  return (10 * end_one + 2 * end_zero) % 1000000007;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpigwa81x_: /tmp/tmpigwa81x_.cpp:23: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // 1 does not follow any\
    \ pattern.\n    if (n == 1) return 1;\n    // To get the answer from the previous\
    \ number.\n    long answer = 0;\n    // If we are at the first digit, we can only\
    \ choose the number 1.\n    long start = 1;\n    // If we are at the last digit,\
    \ we can choose any number from 1 to 9.\n    long end = 9;\n    // f(i) * f(n\
    \ - i - 1)\n    // The first i digits form a number, the rest of the digits form\
    \ another number.\n    // The result is the number of ways to form the first number\
    \ * the number of ways to form the second number.\n    for (long i = 0; i < n\
    \ - 1; i++) {\n        answer += start * end;\n        // If we are at the first\
    \ digit, we must choose a value of 1.\n        start = start * 10;\n        //\
    \ If we are at the last digit, we can only choose a value from 1 to 9.\n     \
    \   end = end * 9;\n    }\n    // Add the first digit.\n    answer += start;\n\
    \    return answer;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpqxsfxdwc: /tmp/tmpqxsfxdwc.cpp:31: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n == 2) {\n    return 11;\n  }\n  if (n == 3) {\n    return 100;\n\
    \  }\n  long dp[n + 1];\n  memset(dp, 0, sizeof(dp));\n  dp[1] = 1;\n  dp[2] =\
    \ 11;\n  dp[3] = 100;\n  for (long i = 4; i <= n; i++) {\n    dp[i] = dp[i - 1]\
    \ + dp[i - 2];\n  }\n  return dp[n];\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpcvqkgnl8: /tmp/tmpcvqkgnl8.cpp:28: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // TODO: write your code\
    \ here\n\n    return 1;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp8g82j5sk: /tmp/tmp8g82j5sk.cpp:13: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long *arr = new long[n +\
    \ 1];\n    for (long i = 0; i <= n; i++) {\n        arr[i] = 0;\n    }\n    arr[1]\
    \ = 1;\n    arr[2] = 2;\n    for (long i = 3; i <= n; i++) {\n        arr[i] =\
    \ arr[i - 1] + arr[i - 2];\n    }\n    long result = arr[n] * 2;\n    delete[]\
    \ arr;\n    return result;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp0s3v58gw: /tmp/tmp0s3v58gw.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n >= 1);\n    //\
    \ edge cases\n    if (n == 1) return 2;\n    if (n == 2) return 5;\n    if (n\
    \ == 3) return 7;\n    // for all other cases, we need to use DP\n    long dp[n+1];\n\
    \    // building the DP array\n    dp[0] = 0;\n    dp[1] = 2;\n    dp[2] = 5;\n\
    \    dp[3] = 7;\n    for (long i = 4; i <= n; i++) {\n        dp[i] = dp[i-1]\
    \ + dp[i-2] + dp[i-3];\n    }\n    return dp[n];\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp_8zvuovx: /tmp/tmp_8zvuovx.cpp:25: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) return 1;\n  //\
    \ Let n = n_d[0] n_d[1] n_d[2] ... n_d[k], k > 0.\n  // We can count the number\
    \ of n-digit positive integers that start or end\n  // with 1 by first grouping\
    \ the n-digit positive integers into equivalence\n  // classes according to their\
    \ first d = n_d[0] digits. For each equivalence\n  // class we can count the number\
    \ of its members starting with 1 and ending\n  // with 1 by grouping the (n -\
    \ d)-digit positive integers that follow into\n  // equivalence classes according\
    \ to their first d' = n_d[1] digits. For each\n  // equivalence class we can count\
    \ the number of its members starting with 1\n  // and ending with 1 by grouping\
    \ the (n - d - d')-digit positive integers\n  // that follow into equivalence\
    \ classes according to their first d'' =\n  // n_d[2] digits. For each equivalence\
    \ class we can count the number of its\n  // members starting with 1 and ending\
    \ with 1 by grouping the (n - d - d' -\n  // d'')-digit positive integers that\
    \ follow into equivalence classes\n  // according to their first d''' = n_d[3]\
    \ digits.  Repeating this process\n  // until there are no digits left shows that\
    \ the number of n-digit positive\n  // integers that start or end with 1 is given\
    \ by the sum from i = 1 to k + 1\n  // of (i * 9^(k + 1 - i)) * (i * 9^(k + 1\
    \ - i)).\n  long sum = 0;\n  for (long i = 1; i <= n; ++i)\n    sum += i * pow(9,\
    \ n - i) * i * pow(9, n - i);\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpqe78ln6c: /tmp/tmpqe78ln6c.cpp:32: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    std::vector<long> dp(n +\
    \ 1, 0);\n    dp[1] = 1;\n    for (long i = 2; i <= n; ++i) {\n        if (i ==\
    \ 2) {\n            dp[i] = 9;\n        } else {\n            long nines = 9;\n\
    \            for (long j = 1; j < i - 1; ++j) {\n                nines *= 10;\n\
    \            }\n            dp[i] = dp[i - 1] + nines * 2;\n        }\n    }\n\
    \    return dp[n];\n}\nint main() {\n    auto candidate = starts_one_ends;\n \
    \   assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmpvb90u39u: /tmp/tmpvb90u39u.cpp:24: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long len_n = log10(n) + 1;\n\
    \  if (len_n < 2) {\n    return len_n;\n  }\n  long result = std::min(9 * (len_n\
    \ - 1), n - pow(10, len_n - 1) + 1);\n  return result;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiw2iex4f.cpp: In function \u2018long int starts_one_ends(long int)\u2019\
    :\n/tmp/tmpiw2iex4f.cpp:10:69: error: no matching function for call to \u2018\
    min(long int, double)\u2019\n   10 |   long result = std::min(9 * (len_n - 1),\
    \ n - pow(10, len_n - 1) + 1);\n      |                                      \
    \                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpiw2iex4f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpiw2iex4f.cpp:10:69:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018double\u2019)\n   10 |   long result = std::min(9 * (len_n\
    \ - 1), n - pow(10, len_n - 1) + 1);\n      |                                \
    \                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-sky"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long answer = 0;\n  long start_one\
    \ = 9;\n  long ends_one = 0;\n  for (int i = 1; i < n; i++) {\n    ends_one =\
    \ (ends_one * 10) + start_one;\n    start_one = (start_one * 10) + 9;\n  }\n \
    \ answer = start_one + ends_one;\n  return answer;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpsdxn_g_f: /tmp/tmpsdxn_g_f.cpp:18: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long res = 0;\n    while\
    \ (n--) {\n        res = res*10 + 1;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpy_n96x4e: /tmp/tmpy_n96x4e.cpp:15: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long ans = 0;\n  // Case 1:\
    \ All numbers ending with 1 and start with 0, excluding 0\n  ans += pow(9, n -\
    \ 1);\n  // Case 2: All numbers starting with 1 and ending with 0, excluding 0\n\
    \  ans += pow(9, n - 1);\n  // Case 3: All numbers starting and ending with 1,\
    \ excluding 0\n  // Question: What is the number of n-digit integers that start\
    \ and end with 1\n  // and are not 9?\n  ans += pow(9, n - 2);\n  return ans;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpofxqoobk: /tmp/tmpofxqoobk.cpp:19: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n < 1) return 0;\n  long\
    \ x = 1;\n  for (int i = 1; i < n; ++i) {\n    x *= 10;\n  }\n  long e = 9;\n\
    \  for (int i = 1; i < n; ++i) {\n    e *= 9;\n  }\n  return x + e;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpenqw3jwu: /tmp/tmpenqw3jwu.cpp:19: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) return 1;\n\
    \    if (n == 2) return 2;\n    return starts_one_ends(n-1) + starts_one_ends(n-2);\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp6e7d6s09: /tmp/tmp6e7d6s09.cpp:13: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n >= 1);\n  if (n ==\
    \ 1) return 2;\n  long a = 1, b = 1, c = 1;\n  for (int i = 2; i <= n; ++i) {\n\
    \    a = a * (10 - i + 1) + b;\n    b = b * (10 - i + 1) + c;\n    c = c * (10\
    \ - i + 1);\n  }\n  return a;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpvfjb3wli: /tmp/tmpvfjb3wli.cpp:18: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  // Write your code here.\n\
    \    assert(n > 0);\n    if (n == 1) return 2;\n    if (n == 2) return 2;\n  \
    \  if (n == 3) return 3;\n    long result = 1;\n    for (long i = n - 1; i > 0;\
    \ i--) {\n        result *= 10;\n    }\n    result *= 9;\n    result += starts_one_ends(n\
    \ - 1);\n    return result;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpjf8naaai: /tmp/tmpjf8naaai.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    } else if (n == 2) {\n        return 3;\n    } else {\n        long\
    \ a = 3;\n        long b = 9;\n        for (long i = 3; i <= n; i++) {\n     \
    \       long new_a = a + b;\n            long new_b = 2 * a + b;\n           \
    \ a = new_a;\n            b = new_b;\n        }\n        return a + b;\n    }\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp94yj81z5: /tmp/tmp94yj81z5.cpp:24: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n > 0);\n  assert(n\
    \ < LONG_MAX);\n  long count = 0;\n  for (long i = 1; i <= n; i++) {\n    long\
    \ value = std::pow(10, i - 1);\n    count += 9 * value;\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpve759hdq: /tmp/tmpve759hdq.cpp:17: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n <= 1) {\n        return\
    \ 1;\n    }\n    long cnt = 1;\n    for (long i = 1; i < n; i++) {\n        cnt\
    \ *= 10;\n    }\n    return (cnt + starts_one_ends(n - 1));\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpiksoy911: /tmp/tmpiksoy911.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 1;\n    }\n    long count = 1;\n    long start = 10;\n    long end = 1;\n  \
    \  for (long i = 1; i < n; i++) {\n        count += start + end;\n        start\
    \ *= 10;\n        end = start/10;\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpvw6bgz94: /tmp/tmpvw6bgz94.cpp:22: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        count += 1;\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp1qoudxqw: /tmp/tmp1qoudxqw.cpp:16: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 10;\n  }\n  // std::cout << \"n : \" << n << std::endl;\n  // f(n) = (8 * (n\
    \ - 1) * f(n - 1)) - (9 * (n - 2) * f(n - 2))\n\n  long a = 9;\n  long b = 8;\n\
    \  long c = 10;\n  long d = 8;\n  long e = 10;\n  long f = 8;\n  long g = 0;\n\
    \  long h = 0;\n  long i = 0;\n  long j = 0;\n  for (long k = 2; k < n; k++) {\n\
    \    g = d;\n    h = e;\n    i = f;\n    j = 10;\n    d = (b * g) + (c * h);\n\
    \    e = (a * g) + (b * h);\n    f = (c * g) + (a * h);\n    a = e;\n    b = d;\n\
    \    c = f;\n  }\n  // std::cout << a << \" \" << b << \" \" << c << \" \" <<\
    \ d << \" \" << e << \" \" << f\n  // << \" \" << g << \" \" << h << \" \" <<\
    \ i << \" \" << j << std::endl;\n  return (c * a) + (a * b) + (10 * b);\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpbxnp7c7q: /tmp/tmpbxnp7c7q.cpp:40: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) return 1;\n  return\
    \ (starts_one_ends(n - 1) * 10) - starts_one_ends(n - 2);\n}\nint main() {\n \
    \   auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n   \
    \ assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n >= 1);\n  long result\
    \ = 0;\n  long p = 1; // 10^(n-1)\n  for (long i = 1; i < n; ++i) p *= 10;\n \
    \ for (long i = 1; i < 10; ++i) {\n    long x = i * p;\n    if (x >= n) break;\n\
    \    result += starts_one_ends(n - x);\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpae28goz5: /tmp/tmpae28goz5.cpp:19: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpyq3xqj_h: /tmp/tmpyq3xqj_h.cpp:10: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // Initially we only have\
    \ 1 digit long numbers\n    long num_ends = 1;\n    long num_starts = 1;\n   \
    \ for (long i = 2; i <= n; i++) {\n        // For each iteration, we add a new\
    \ digit\n        // So we have 1 new number at the end (9 * 10^(n-1))\n      \
    \  // We also have (num_ends + num_starts) * 10^(n-1) new numbers\n        //\
    \ as we can put a 0 in front of any existing number\n        num_ends = 9 * pow(10,\
    \ i - 1) + (num_ends + num_starts) * pow(10, i - 1);\n        // We also have\
    \ num_starts * 10^(n-1) new numbers as we can add\n        // 1 in front of existing\
    \ numbers\n        num_starts = num_starts * pow(10, i - 1);\n    }\n    return\
    \ num_ends + num_starts;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp_iej0il5: /tmp/tmp_iej0il5.cpp:23: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long counter = 0;\n  long\
    \ *arr = new long[n + 1];\n  arr[0] = 0;\n  arr[1] = 1;\n  arr[2] = 11;\n  arr[3]\
    \ = 111;\n  for (long i = 4; i <= n; i++) {\n    arr[i] = 10 * arr[i - 1] + pow(10,\
    \ i - 1);\n  }\n  counter = arr[n];\n  delete arr;\n  return counter;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpx48wp3vw: /tmp/tmpx48wp3vw.cpp:22: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n >= 1);\n  // Each\
    \ n-digit number can be uniquely represented in form of\n  // a_1, a_2, ..., a_n,\
    \ where a_i is the digit at ith position.\n  // There are two cases for each a_i:\n\
    \  // 1. a_i = 1.\n  // 2. a_i != 1.\n  //\n  // Therefore, there are 2^n possible\
    \ n-digit numbers.\n\n  // Case 1.\n  // Given a_1 = 1, there are 8 possible a_2,\
    \ 8 possible a_3, ...\n  // Therefore, there are (n-1) * 8^(n-1) n-digit numbers\
    \ such that\n  // a_1 = 1 and a_2 != 1.\n  //\n  // Case 2.\n  // Given a_n =\
    \ 1, there are 9 possible a_1, 8 possible a_2, ...\n  // Therefore, there are\
    \ (n-1) * 9^(n-1) n-digit numbers such that\n  // a_n = 1 and a_1 != 1.\n  //\n\
    \  // Given a number, we can compute the number of digits by\n  // counting the\
    \ number of digits of the number. This can be done\n  // by checking the number\
    \ for all powers of 10. Therefore, the\n  // overall time complexity of the algorithm\
    \ is O(log(n)).\n  long count = 0;\n  // Number of digits in n.\n  long digit_count\
    \ = 0;\n  long temp = n;\n  while (temp > 0) {\n    ++digit_count;\n    temp /=\
    \ 10;\n  }\n  count += (digit_count - 1) * 8 * std::pow(8, digit_count - 2);\n\
    \  count += (digit_count - 1) * 9 * std::pow(9, digit_count - 2);\n  return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmphmpcn0be: /tmp/tmphmpcn0be.cpp:43: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long dp[n + 1];\n  memset(dp,\
    \ 0, sizeof(dp));\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i]\
    \ = dp[i - 1] * 9 + pow(10, i - 1);\n  }\n  return dp[n];\n}\nint main() {\n \
    \   auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n   \
    \ assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpj2k0_opx: /tmp/tmpj2k0_opx.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // Write your code here.\n\
    \    return 0;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp82lmvxb5: /tmp/tmp82lmvxb5.cpp:11: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long *dp = new long[n+1];\n\
    \  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 2;\n  dp[3] = 3;\n  dp[4] = 4;\n  dp[5]\
    \ = 5;\n  dp[6] = 6;\n  dp[7] = 7;\n  dp[8] = 8;\n  dp[9] = 9;\n  for (long i\
    \ = 10; i <= n; i++) {\n    dp[i] = dp[i-1] + (dp[i-2] * 10) - (dp[i-3] * 8);\n\
    \  }\n  return dp[n];\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpdufw43dj: /tmp/tmpdufw43dj.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long count = 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    long k = pow(10, i - 1);\n    count += 9 * k;\n \
    \ }\n  return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpzv6pd629: /tmp/tmpzv6pd629.cpp:15: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) return 1;\n\
    \    long aux_count = 1;\n    for (int i = 0; i < n-1; i++) {\n        aux_count\
    \ *= 10;\n    }\n    return aux_count + 1;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpijs3k86_: /tmp/tmpijs3k86_.cpp:16: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) return 2;\n  long\
    \ sum = 2; // ends with one\n  sum += 9 * pow(10, n - 1); // start with one\n\
    \  // compute 10^n - 1 = 9*9...9 = 9*10^(n-1) - 9\n  sum += 9 * pow(10, n - 1)\
    \ - 9;\n  return sum;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpf1tm31mp: /tmp/tmpf1tm31mp.cpp:15: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    for\
    \ (long i = 1; i <= n; i++) {\n        for (long j = 1; j <= n; j++) {\n     \
    \       if (i == 1 || j == 1) {\n                count++;\n            }\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpjvrt5qs6: /tmp/tmpjvrt5qs6.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  } else if (n == 2) {\n    return 11;\n  } else {\n    int ans = starts_one_ends(n\
    \ - 1) + 1;\n    ans += starts_one_ends(n - 2) * 9;\n    return ans;\n  }\n}\n\
    int main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp10vt4395: /tmp/tmp10vt4395.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long long ans = 1;\n   \
    \ for (long i = 1; i < n; i++) {\n        ans = ans * 10;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpi1hcw4m1: /tmp/tmpi1hcw4m1.cpp:15: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long ans = 0;\n  for (int\
    \ i = 1; i <= n; i++) {\n    // start with 1\n    ans += std::pow(10, i - 1);\n\
    \    // end with 1\n    ans += std::pow(10, i - 1);\n  }\n  return ans;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpo6z3k_kf: /tmp/tmpo6z3k_kf.cpp:17: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long dp[n+1];\n    dp[0]\
    \ = 0;\n    dp[1] = 1;\n    for(long i = 2; i <= n; i++) {\n        dp[i] = 9*dp[i-1]\
    \ + pow(10, i-1);\n    }\n    return dp[n];\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp0jsd5yrd: /tmp/tmp0jsd5yrd.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long a = 1, b = 1, c = 1;\n\
    \  for (long i = 1; i < n; i++) {\n    a = (10 * a + 1) % 1000000;\n    b = (10\
    \ * b + 1) % 1000000;\n    c = (10 * c + 9) % 1000000;\n  }\n  if (n > 1) {\n\
    \    return (c + a + 9) % 1000000;\n  } else {\n    return 1;\n  }\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp43235myc: /tmp/tmp43235myc.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n > 0);\n  long counts\
    \ = 0;\n  int i;\n  if (n == 1) {\n    return 1;\n  }\n  else {\n    for (i =\
    \ 0; i < n; i++) {\n      counts += pow(9, i) * pow(10, n - i - 1);\n    }\n \
    \   return counts;\n  }\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpyf3xg9z3: /tmp/tmpyf3xg9z3.cpp:22: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long count = 0;\n  for (int\
    \ i = 1; i <= n; i++) {\n    long num = pow(10, i - 1);\n    count += (2 * num)\
    \ - 1;\n  }\n  return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpir82sprk: /tmp/tmpir82sprk.cpp:16: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 2;\n  } else if (n == 2) {\n    return 4;\n  } else {\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n  }\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp5bgf39sr: /tmp/tmp5bgf39sr.cpp:16: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n >= 1);\n    long*\
    \ count = new long[n+1];\n    memset(count, 0, sizeof(long)*(n+1));\n    count[1]\
    \ = 2;\n    count[2] = 3;\n    long MOD = 1000000007;\n    for (long i = 3; i\
    \ <= n; i++) {\n        count[i] = (count[i-1] + count[i-2]) % MOD;\n    }\n \
    \   long result = (count[n] + MOD - 2) % MOD;\n    delete[] count;\n    return\
    \ result;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpsk9y39ta: /tmp/tmpsk9y39ta.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long dp[n + 1];\n  for (int\
    \ i = 0; i <= n; i++) {\n    dp[i] = 0;\n  }\n  dp[1] = 1;\n  long mod = 1e9 +\
    \ 7;\n  for (int i = 2; i <= n; i++) {\n    dp[i] = (dp[i - 1] * 10) % mod;\n\
    \    dp[i] = (dp[i] + 9 * pow(10, i - 2)) % mod;\n  }\n  return dp[n];\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpcb34f23n.cpp: In function \u2018long int starts_one_ends(long int)\u2019\
    :\n/tmp/tmpcb34f23n.cpp:14:42: error: invalid operands of types \u2018double\u2019\
    \ and \u2018long int\u2019 to binary \u2018operator%\u2019\n   14 |     dp[i]\
    \ = (dp[i] + 9 * pow(10, i - 2)) % mod;\n      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~\n      |                    |                       |\n      |       \
    \             double                  long int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n <= 1) {\n        return\
    \ 1;\n    }\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n      \
    \  count += pow(2, i - 1);\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpw_v57o96: /tmp/tmpw_v57o96.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  // 1 digit numbers are 1 &\
    \ 0\n  if (n == 1) {\n    return 2;\n  }\n  // 2 digit numbers that start with\
    \ one is ten\n  if (n == 2) {\n    return 10;\n  }\n  // handle the same way as\
    \ before\n  long result = 10;\n  long count = 9;\n  long last = 2;\n  while (last\
    \ < n) {\n    count *= 10;\n    result += count;\n    last++;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp8vr9q3at: /tmp/tmp8vr9q3at.cpp:27: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n > 0);\n    int\
    \ digits = 0;\n    while(n>=10) {\n        digits++;\n        n /= 10;\n    }\n\
    \    return (digits)*(pow(9,digits)) + (pow(9,digits) - 1);\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpwa746kw4: /tmp/tmpwa746kw4.cpp:16: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    //\
    \ The binary representation of 5 is 101.\n    // The number of binary digits of\
    \ every integer > 5 is a multiple of 3.\n    for (long i = 1; i <= n; i++) {\n\
    \        if (i % 3 == 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpoy0150pu: /tmp/tmpoy0150pu.cpp:18: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) return 2;\n\
    \    long previous = 2;\n    long count = 3;\n    for (long i = 2; i <= n; i++)\
    \ {\n        long result = previous + count;\n        previous = count;\n    \
    \    count = result;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpipxmb1pb: /tmp/tmpipxmb1pb.cpp:18: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    std::vector<long> dp(n +\
    \ 1, 0);\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        dp[i] =\
    \ 9 * dp[i - 1] + std::pow(10, i - 1);\n    }\n    return dp[n];\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmput4p3ith: /tmp/tmput4p3ith.cpp:16: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n >= 1);\n  long total_count\
    \ = 0;\n  // Let's take a brute force approach and iterate from 1 to 10^n - 1,\
    \ and check\n  // if the number contains a 1 at the start or the end.\n  for (long\
    \ i = 1; i < pow(10, n); i++) {\n    long digit = i;\n    while (digit > 0) {\n\
    \      if (digit % 10 == 1) {\n        total_count++;\n        break;\n      }\n\
    \      digit /= 10;\n    }\n  }\n  return total_count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpxk65xn9h: /tmp/tmpxk65xn9h.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long dp[n+1];\n  memset(dp,\
    \ 0, sizeof(dp));\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i]\
    \ = dp[i-1] + 9*pow(10, i-2);\n  }\n  return dp[n];\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpqqz8tbt7: /tmp/tmpqqz8tbt7.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long ans = 0;\n    for (long\
    \ i = 1; i <= n; i++) {\n        ans += pow(10, i - 1);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpx37hoyt0: /tmp/tmpx37hoyt0.cpp:15: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n <= 0) {\n    return\
    \ 0;\n  }\n  return n * 9 + 1;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp2h77numf: /tmp/tmp2h77numf.cpp:13: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) return 2;\n  assert(n\
    \ > 1);\n  long sum = 0;\n  for (long i = 1; i < n; ++i) {\n    long ones = 0;\n\
    \    for (long j = 1; j <= i; ++j) {\n      ones += 9 * std::pow(10, j - 1);\n\
    \    }\n    long num = 10 * std::pow(10, i - 1);\n    sum += ones * num;\n  }\n\
    \  sum += 9 * std::pow(10, n - 1);\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpn4au5pp4: /tmp/tmpn4au5pp4.cpp:22: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long arr[n];\n    if (n\
    \ == 1) {\n        return 10;\n    }\n    arr[0] = 10;\n    arr[1] = 9 * 9;\n\
    \    for (long i = 2; i < n; i++) {\n        arr[i] = arr[i - 1] * (9 - i + 1);\n\
    \    }\n    long ans = 0;\n    for (long i = 0; i < n; i++) {\n        ans +=\
    \ arr[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpa_wqeuvv: /tmp/tmpa_wqeuvv.cpp:23: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long result = 0;\n  // the\
    \ numbers starting with 1 will be of the form [1] + [2, 3, 4, 5, 6, 7, 8,\n  //\
    \ 9]{(n-1) times}\n  if (n >= 2) {\n    result += 9;  // [2, 3, 4, 5, 6, 7, 8,\
    \ 9]\n    result *= pow(9, n - 2);\n  } else {\n    result += 1;\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp4yvky2yh: /tmp/tmp4yvky2yh.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) return 2;\n\
    \    if (n == 2) return 2 * 5;\n    if (n > 2) {\n        long result = 0;\n \
    \       for (long i = 0; i < n; i++) {\n            result += 9 * pow(10, i) *\
    \ pow(9, n - i - 1);\n        }\n        return result * 2;\n    }\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpmrmzr8ie: /tmp/tmpmrmzr8ie.cpp:19: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long count = 0;\n  if (n ==\
    \ 1) {\n    return 10;\n  }\n  long *start = new long[n];\n  long *end = new long[n];\n\
    \  start[0] = 1;\n  end[0] = 10;\n  for (long i = 1; i < n; i++) {\n    start[i]\
    \ = start[i - 1] * 9;\n    end[i] = end[i - 1] * 10;\n  }\n  for (long i = 0;\
    \ i < n; i++) {\n    count += start[i] + end[i];\n  }\n  delete[] start;\n  delete[]\
    \ end;\n  return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmppl4nls_p: /tmp/tmppl4nls_p.cpp:27: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // We are supposed to find\
    \ all n-digit numbers that start or end with 1\n    // We can break them into\
    \ three groups\n    // 1. Numbers whose first digit is 1 and all other digits\
    \ are not 1\n    // 2. Numbers whose last digit is 1 and all other digits are\
    \ not 1\n    // 3. Numbers whose first and last digit are 1 and all other digits\
    \ are\n    // not 1\n    // For the first case, there are 10 choices of first\
    \ digit and 9 choices\n    // of other digits.\n    // For the second case, there\
    \ are 10 choices of last digit and 9 choices\n    // of other digits.\n    //\
    \ For the third case, there are 10 choices of first digit, 8 choices of\n    //\
    \ second digit, 10 choices of last digit.\n    // So the number is 9 * (9 ^ (n\
    \ - 2)) + 9 * (9 ^ (n - 2)) + 10 * 9 * 8\n    // We use long long to store the\
    \ result because we don't know the return\n    // type of ^ operator.\n    return\
    \ 9 * (long long)pow(9, n - 2) + 9 * (long long)pow(9, n - 2) +\n           10\
    \ * 9 * 8;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmps0b0usha: /tmp/tmps0b0usha.cpp:26: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long long array[n + 1];\n\
    \  array[0] = 0;\n  array[1] = 1;\n  array[2] = 1;\n  array[3] = 1;\n  for (long\
    \ i = 4; i <= n; i++) {\n    array[i] = array[i - 1] + array[i - 2];\n  }\n  return\
    \ array[n];\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpoov7zfpo: /tmp/tmpoov7zfpo.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n > 0);\n    if (n\
    \ == 1) return 10;\n    long t = 10;\n    // (l+1)-digit numbers that start with\
    \ 1\n    long l = 1;\n    long ans = 10;\n    while (l < n) {\n        t *= 10;\n\
    \        l++;\n        ans += 9 * t;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpci6bfoop: /tmp/tmpci6bfoop.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  // vectors to hold the answers\
    \ for n-1, n-2 and n-3\n  std::vector<long> a(n);\n  std::vector<long> b(n);\n\
    \  std::vector<long> c(n);\n  // seed the initial values\n  a[0] = 1;\n  b[0]\
    \ = 1;\n  c[0] = 1;\n  for (long i = 1; i < n; i++) {\n    a[i] = b[i - 1] + c[i\
    \ - 1];\n    b[i] = a[i - 1];\n    c[i] = a[i - 1] + b[i - 1];\n  }\n  // answer\
    \ is a[n - 1] + b[n - 1] + c[n - 1]\n  return a[n - 1] + b[n - 1] + c[n - 1];\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpe73dw68i: /tmp/tmpe73dw68i.cpp:24: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  // Write your code here\n\
    \  // use recursion to solve this problem\n  if (n == 1) {\n    return 2;\n  }\n\
    \  return 9 * (starts_one_ends(n - 1));\n}\nint main() {\n    auto candidate =\
    \ starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpx2ia1lx1: /tmp/tmpx2ia1lx1.cpp:15: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    if\
    \ (n == 1) {\n        return 2;\n    } else if (n == 2) {\n        return 3;\n\
    \    } else {\n        count = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp1xnel61a: /tmp/tmp1xnel61a.cpp:18: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  // 2^n - 2\n  // 2^n - 2^(n-1)\n\
    \  long ans = pow(2, n) - pow(2, n-1);\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp34a0b7u9: /tmp/tmp34a0b7u9.cpp:14: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 1;\n    } else if (n == 2) {\n        return 10;\n    } else {\n        long\
    \ count = 10;\n        for (long i = 3; i <= n; i++) {\n            count += 9\
    \ * pow(10, i - 2);\n        }\n        return count;\n    }\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp5li9niyd: /tmp/tmp5li9niyd.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 2;\n  }\n  return (9 * (std::pow(10, n - 1) - std::pow(9, n - 1)));\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpbar5t5py: /tmp/tmpbar5t5py.cpp:13: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long dp[n + 1];\n  dp[0] =\
    \ 1;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] +\
    \ dp[i - 2];\n  }\n  return dp[n];\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmppyovphml: /tmp/tmppyovphml.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n < 2) return 0;\n \
    \   std::vector<long> counts(n, 0);\n    counts[0] = 0;\n    counts[1] = 10;\n\
    \    for (long i = 2; i < n; ++i) {\n        counts[i] = 10 * counts[i - 1] -\
    \ counts[i - 2];\n    }\n    return counts[n - 1];\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpub7c7wf3: /tmp/tmpub7c7wf3.cpp:17: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 10;\n  }\n  long digits = 1;\n  long num = 10;\n  long ans = 0;\n  long pre\
    \ = 10;\n  while (digits < n) {\n    ans += num;\n    pre = num;\n    num = 9\
    \ * pre + pre;\n    digits++;\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpytj2o9gp: /tmp/tmpytj2o9gp.cpp:23: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 2;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  long s = 1, e = 1;\n  for (int\
    \ i = 3; i <= n; i++) {\n    long a = s + e;\n    long b = e;\n    s = a;\n  \
    \  e = b;\n  }\n  return s + e;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmppdfb3w_y: /tmp/tmppdfb3w_y.cpp:23: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long dp[n+1];\n    dp[0]\
    \ = 0;\n    dp[1] = 1;\n    for(long i = 2; i <= n; i++) {\n        dp[i] = 9*dp[i-1]\
    \ + pow(10, i-1);\n    }\n    return dp[n];\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpm9od7730: /tmp/tmpm9od7730.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long dp[n][10];\n    //\
    \ printf(\"%ld\\n\", dp[2][2]);\n    for (long i = 0; i < n; i++) {\n        for\
    \ (long j = 0; j < 10; j++) {\n            dp[i][j] = 0;\n        }\n    }\n \
    \   dp[0][1] = 1;\n    dp[0][2] = 1;\n    dp[0][3] = 1;\n    dp[0][4] = 1;\n \
    \   dp[0][5] = 1;\n    dp[0][6] = 1;\n    dp[0][7] = 1;\n    dp[0][8] = 1;\n \
    \   dp[0][9] = 1;\n    for (long i = 1; i < n; i++) {\n        for (long j = 0;\
    \ j < 10; j++) {\n            if (j == 0) {\n                dp[i][j] = dp[i -\
    \ 1][j + 1];\n            } else if (j == 9) {\n                dp[i][j] = dp[i\
    \ - 1][j - 1];\n            } else {\n                dp[i][j] = dp[i - 1][j -\
    \ 1] + dp[i - 1][j + 1];\n            }\n        }\n    }\n    long ans = 0;\n\
    \    for (long i = 0; i < 10; i++) {\n        ans += dp[n - 1][i];\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmper6iluq9: /tmp/tmper6iluq9.cpp:41: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n < 1) return 0;\n  if\
    \ (n == 1) return 1;\n  if (n == 2) return 10;\n  long count = 9;\n  for (long\
    \ i = 0; i < n - 2; i++) {\n    count *= 9;\n  }\n  count *= 10;\n  return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpccg0fqs6: /tmp/tmpccg0fqs6.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    }\n    if (n == 2) {\n        return 4;\n    }\n    long *dp = new long[n\
    \ + 1];\n    dp[0] = 0;\n    dp[1] = 2;\n    dp[2] = 4;\n    for (long i = 3;\
    \ i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpcj_ui08v: /tmp/tmpcj_ui08v.cpp:23: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  std::cout << n << std::endl;\n\
    \  std::string str = std::to_string(n);\n  long count = 0;\n  for (size_t i =\
    \ 0; i < str.size(); i++) {\n    if (str[i] == '1') {\n      count++;\n    }\n\
    \  }\n  return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: "1\n2\n"
  stderr: "tmpa1ksbwpl: /tmp/tmpa1ksbwpl.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 1;\n  }\n  if (n < 10) {\n    return 0;\n  }\n  long answer = 0;\n  if (n %\
    \ 2 == 0) {\n    long count_ten = 2 * std::pow(10, n / 2 - 1);\n    answer +=\
    \ count_ten + starts_one_ends(n - 1);\n  } else {\n    long count_ten = std::pow(10,\
    \ n / 2);\n    answer += count_ten + starts_one_ends(n - 1);\n  }\n  return answer;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp8dcys_u3: /tmp/tmp8dcys_u3.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long result = 0;\n  long pow10\
    \ = 1;\n  long power = 1;\n  while (pow10 <= n) {\n    if (n/pow10 >= 1) {\n \
    \     result += pow10;\n    }\n    pow10 *= 10;\n    power++;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp310yfi7u: /tmp/tmp310yfi7u.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long cnt = 0;\n    for (long\
    \ i = 1; i <= n; i++) {\n        long temp = i;\n        bool has_one = false;\n\
    \        while (temp > 0) {\n            if (temp % 10 == 1) {\n             \
    \   has_one = true;\n                break;\n            }\n            temp /=\
    \ 10;\n        }\n        if (has_one) {\n            cnt++;\n        }\n    }\n\
    \    return cnt;\n}\nint main() {\n    auto candidate = starts_one_ends;\n   \
    \ assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmplxu6pvt0: /tmp/tmplxu6pvt0.cpp:26: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  // Base case\n  if (n == 1)\
    \ {\n    return 1;\n  }\n\n  // If n is even, the number of integers which start\
    \ with 1 and end with 1\n  // will be equal to the number of integers with n-1\
    \ digits.\n  if (n % 2 == 0) {\n    return pow(10, n / 2) - 1;\n  }\n\n  // If\
    \ n is odd, the number of integers which start with 1 and end with 1\n  // will\
    \ be equal to the number of integers with n-1 digits plus 9\n  // additional possibilities.\n\
    \  else {\n    return pow(10, (n - 1) / 2) - 1 + 9;\n  }\n}\nint main() {\n  \
    \  auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n   \
    \ assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4))\
    \ == (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp6l0atxwl: /tmp/tmp6l0atxwl.cpp:27: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n > 0);\n  if (n ==\
    \ 1) return 1;\n  if (n == 2) return 10;\n  if (n == 3) return 19;\n  long *a\
    \ = new long[n];\n  long *b = new long[n];\n  a[0] = 1;\n  b[0] = 9;\n  a[1] =\
    \ 10;\n  b[1] = 90;\n  for (long i = 2; i < n; i++) {\n    a[i] = b[i - 1] + a[i\
    \ - 1];\n    b[i] = (b[i - 1] + a[i - 1]) * 9;\n  }\n  return a[n - 1] + b[n -\
    \ 1];\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp1hm4r8_g: /tmp/tmp1hm4r8_g.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    std::vector<long> dp(n +\
    \ 1, 0);\n    dp[1] = 10;\n    for (int i = 2; i <= n; i++) {\n        dp[i] =\
    \ (9 * pow(10, i - 1)) + dp[i - 1];\n    }\n    return dp[n];\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpu3toelbo: /tmp/tmpu3toelbo.cpp:15: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  return n * (n + 1) / 2;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp88uxb_0t: /tmp/tmp88uxb_0t.cpp:11: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  std::vector<long> dp(n + 1,\
    \ 0);\n  dp[1] = 1;\n  if (n < 2) return 1;\n  dp[2] = 2;\n  if (n < 3) return\
    \ 2;\n  dp[3] = 3;\n  if (n < 4) return 3;\n  for (long i = 4; i <= n; i++) {\n\
    \    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n  return dp[n];\n}\nint main() {\n \
    \   auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n   \
    \ assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmptc6ur_mp: /tmp/tmptc6ur_mp.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n > 0);\n    if (n\
    \ == 1) return 1;\n    else if (n == 2) return 10;\n    else {\n        long count\
    \ = starts_one_ends(n - 1) + 9 * std::pow(10, n - 2);\n        return count;\n\
    \    }\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpv86cy18v: /tmp/tmpv86cy18v.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  // The number of n-digit numbers\
    \ that start or end with 1\n  // is the sum of the number of n-digit numbers that\
    \ start or end with 1\n  // and the number of n-digit numbers that do not start\
    \ with 1.\n  long sum = 1;\n  // We use a sliding window to generate the next\
    \ digit-length numbers\n  // that start with 1.\n  // A number can start with\
    \ 1 followed by any n-1 digits\n  // i.e. 10, 11, 12, ..., 1(n-1) digits.\n  //\
    \ A number can end with 1 followed by any n-1 digits\n  // i.e. 10, 11, 12, ...,\
    \ 1(n-1) digits.\n  for (int i = 1; i < n; ++i) {\n    sum += (9 * std::pow(10,\
    \ i - 1));\n  }\n  return sum;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpg1newsfn: /tmp/tmpg1newsfn.cpp:24: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 10;\n  }\n  long t = starts_one_ends(n - 1);\n  long tmp = std::pow(10, n -\
    \ 1);\n  long ans = 9 * t;\n  ans += tmp;\n  return ans;\n}\nint main() {\n  \
    \  auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n   \
    \ assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4))\
    \ == (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp0hyfi87v: /tmp/tmp0hyfi87v.cpp:17: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  std::vector<long> dp(n+1,\
    \ 1);\n  for (long i = 1; i < n; ++i) {\n    for (long j = 1; j <= i; ++j) {\n\
    \      dp[i] += dp[j-1] * std::pow(10, (i-j));\n    }\n  }\n  return dp[n-1];\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp4uu9xsrr: /tmp/tmp4uu9xsrr.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    if\
    \ (n == 1) {\n        return 2;\n    }\n    long arr[n];\n    arr[0] = 2;\n  \
    \  arr[1] = 3;\n    count = 2;\n    for (long i = 2; i < n; i++) {\n        arr[i]\
    \ = arr[i - 1] + arr[i - 2];\n        count += arr[i];\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmplrhtafxb: /tmp/tmplrhtafxb.cpp:22: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long n_dp[n];\n    n_dp[0]\
    \ = 1;\n    n_dp[1] = 2;\n    for (long i = 2; i < n; i++) {\n        n_dp[i]\
    \ = n_dp[i - 1] + n_dp[i - 2];\n    }\n    return n_dp[n - 1];\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpo23h942y: /tmp/tmpo23h942y.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n <= 1) return 0;\n\
    \    if (n == 2) return 1;\n    if (n == 3) return 2;\n    long dp[n+1];\n   \
    \ memset(dp, 0, sizeof(dp));\n    dp[1] = 0;\n    dp[2] = 1;\n    dp[3] = 2;\n\
    \    for (long i = 4; i <= n; i++) {\n        // Count of numbers starting with\
    \ 0s.\n        long count_zero = 10*dp[i-1];\n        // Count of numbers starting\
    \ with 1s.\n        long count_one = 9*dp[i-1];\n        dp[i] = count_zero +\
    \ count_one;\n    }\n    return dp[n];\n}\nint main() {\n    auto candidate =\
    \ starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpc47b0xnx: /tmp/tmpc47b0xnx.cpp:25: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long ret = 0;\n    for (int\
    \ i = 1; i <= n; i++) {\n        long rem = 1;\n        for (int j = 1; j < i;\
    \ j++) {\n            rem *= 10;\n        }\n        ret += 9 * rem;\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = starts_one_ends;\n   \
    \ assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmpjdv7k9ty: /tmp/tmpjdv7k9ty.cpp:18: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    //\
    \ Count the number of numbers of n-digit positive integers that ends with 1\n\
    \    for (long i = 0; i < n - 1; i++) {\n        count += std::pow(10, i);\n \
    \   }\n    // Count the number of numbers of n-digit positive integers that starts\
    \ with 1\n    count += std::pow(10, n - 1);\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp5z9oebj2: /tmp/tmp5z9oebj2.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) return 2;\n\
    \    if (n == 2) return 3;\n    long *dp = new long[n + 1];\n    memset(dp, 0,\
    \ (n + 1) * sizeof(long));\n    dp[1] = 2;\n    dp[2] = 3;\n    for (long i =\
    \ 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    long res\
    \ = dp[n];\n    delete[] dp;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpn2t_uoq4: /tmp/tmpn2t_uoq4.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) return 10;\n\
    \    if (n == 2) return 55;\n    long m = n / 2;\n    long p = 1;\n    long c\
    \ = 9;\n    while (m--) {\n        p *= 10;\n        c *= 10;\n    }\n    if (n\
    \ % 2 == 0) {\n        c /= 10;\n    }\n    return c * p;\n}\nint main() {\n \
    \   auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n   \
    \ assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpy42gz2do: /tmp/tmpy42gz2do.cpp:22: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long dp[n + 1][2];\n  memset(dp,\
    \ 0, sizeof(dp));\n  dp[1][0] = 0;\n  dp[1][1] = 1;\n  for (long i = 2; i <= n;\
    \ i++) {\n    dp[i][0] = dp[i - 1][0] + dp[i - 1][1];\n    dp[i][1] = dp[i - 1][0];\n\
    \  }\n  return dp[n][0] + dp[n][1];\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpnvidsym0: /tmp/tmpnvidsym0.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n < 1) return 0;\n  if\
    \ (n == 1) return 1;\n  return (long)(9*pow(10, n-1)-1);\n}\nint main() {\n  \
    \  auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n   \
    \ assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4))\
    \ == (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpua6nem1i: /tmp/tmpua6nem1i.cpp:13: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 10;\n    } else if (n == 2) {\n        return 19;\n    } else {\n        return\
    \ (9 * pow(10, n - 2) + 9 * pow(10, n - 3));\n    }\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpssjfqs07: /tmp/tmpssjfqs07.cpp:16: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long dp[n+1];\n    dp[0]\
    \ = 0;\n    dp[1] = 1;\n    for(long i = 2; i <= n; i++) {\n        dp[i] = 9*dp[i-1]\
    \ + (i-1)*(int)pow(10, i-2);\n    }\n    return dp[n];\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpb6x18p6h: /tmp/tmpb6x18p6h.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 1;\n    for\
    \ (int i = 1; i < n; i++) {\n        count *= 10;\n    }\n    return (long)n *\
    \ 9 * count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp5rn_ilv4: /tmp/tmp5rn_ilv4.cpp:14: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long dp[n + 1];\n    std::memset(dp,\
    \ 0, sizeof(dp));\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++) {\n     \
    \   dp[i] = dp[i - 1] * 9 + std::pow(10, i - 1);\n    }\n    return dp[n];\n}\n\
    int main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpiasxobf6: /tmp/tmpiasxobf6.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 10;\n  } else if (n == 2) {\n    return 90;\n  } else {\n    // Every n-digit\
    \ number has 2 ways of ending, either 0 or 1.\n    return 9 * pow(10, n - 1) +\
    \ starts_one_ends(n - 1);\n  }\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpjfceiq32: /tmp/tmpjfceiq32.cpp:17: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long dp[2][n + 1];\n   \
    \ memset(dp, 0, sizeof(dp));\n    dp[0][1] = dp[1][1] = 1;\n    for (long i =\
    \ 2; i <= n; i++) {\n        dp[0][i] = dp[0][i - 1] + dp[1][i - 1];\n       \
    \ dp[1][i] = dp[0][i - 1];\n    }\n    return dp[0][n] + dp[1][n];\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmptj7oq9t1: /tmp/tmptj7oq9t1.cpp:17: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  // F(n) = F(n-1) + F(n-2)\n\
    \  // F(1) = 2 , F(2) = 3\n  long a = 2, b = 3, c;\n  long i;\n  if (n == 1)\n\
    \    return a;\n  if (n == 2)\n    return b;\n  for (i = 2; i < n; i++) {\n  \
    \  c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n}\nint main() {\n   \
    \ auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmppp8vfu1l: /tmp/tmppp8vfu1l.cpp:23: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) return 1;\n  long\
    \ count = 10;\n  long pow = 10;\n  for (long i = 2; i <= n; i++) {\n    pow *=\
    \ 10;\n    count += pow;\n  }\n  return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp97uaqmpw: /tmp/tmp97uaqmpw.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  std::vector<long> all_digits(n,\
    \ 0);\n  for (long i = 0; i < n; i++) {\n    if (i == 0) {\n      all_digits[i]\
    \ = 9;\n    } else {\n      all_digits[i] = (all_digits[i - 1] * 10) - pow(10,\
    \ i - 1);\n    }\n  }\n  long sum = 0;\n  for (auto i : all_digits) {\n    sum\
    \ += i;\n  }\n  return sum * 2;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpgi6yvmz5: /tmp/tmpgi6yvmz5.cpp:22: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n > 0);\n    // TODO:\
    \ Implement this function yourself\n    long res = 1;\n    for (long i = 2; i\
    \ <= n; i++) {\n        res *= 10;\n        res -= res / 9;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpeoqo2qk4: /tmp/tmpeoqo2qk4.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n < 2) {\n    return n;\n\
    \  }\n  long last_digit = n % 10;\n  long remaining_digits = n / 10;\n  if (last_digit\
    \ == 0) {\n    return starts_one_ends(remaining_digits);\n  }\n  long result =\
    \ starts_one_ends(remaining_digits);\n  if (remaining_digits == 0) {\n    return\
    \ result + 1;\n  }\n  return result + 9;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp5e1_qm0p: /tmp/tmp5e1_qm0p.cpp:23: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) return 1;\n\
    \    if (n == 2) return 2;\n    long result = starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n    return result;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpypn9i4np: /tmp/tmpypn9i4np.cpp:14: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) return 1;\n\
    \    if (n == 2) return 10;\n    if (n == 3) return 19;\n    if (n == 4) return\
    \ 28;\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpm1dvouc0: /tmp/tmpm1dvouc0.cpp:15: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long dp[n + 1];\n  memset(dp,\
    \ 0, sizeof(dp));\n  dp[1] = 10;\n  for (long i = 2; i <= n; i++) {\n    dp[i]\
    \ = dp[i - 1] * 9 + pow(10, i - 1);\n  }\n  return dp[n];\n}\nint main() {\n \
    \   auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n   \
    \ assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp8qzxzo3k: /tmp/tmp8qzxzo3k.cpp:16: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  return std::pow(10, n - 1)\
    \ + 9 * std::pow(10, n - 2);\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpvwui6aay: /tmp/tmpvwui6aay.cpp:11: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long result = 0;\n  for (long\
    \ i = 1; i <= n; i++) {\n    long n_digits = pow(10, i);\n    long first_digit\
    \ = pow(10, i - 1);\n    result += 9 * first_digit * (i - 1);\n    result += first_digit;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpro5kilar: /tmp/tmpro5kilar.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    } else if (n < 1) {\n        return 0;\n    } else {\n        // Consider\
    \ the last digit.\n        // Case 1: The last digit is 1.\n        // In this\
    \ case, we have n-1 digits to fill. So, there are\n        // (n-1) * (2 * (n-1)^(n-2))\
    \ options.\n        // Case 2: The last digit is not 1.\n        // In this case,\
    \ there are (n-1)^(n-1) options.\n        return (n-1) * (2 * pow(n-1, n-2)) +\
    \ pow(n-1, n-1);\n    }\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpqe3ecrs9: /tmp/tmpqe3ecrs9.cpp:22: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  // base case\n  if (n == 1)\
    \ {\n    return 2;\n  }\n  long count = 0;\n  // if we choose to start and end\
    \ with 1, then the remaining digits\n  // can be anything but 1 (this is what\
    \ the minus 1 is for), so\n  // we have 10^(n-2) choices.\n  count += (long) pow(10,\
    \ n - 2) - 1;\n  // next case is to start with 1, but not end with 1, we have\
    \ 10\n  // choices here.\n  count += 10 * starts_one_ends(n - 1);\n  // the last\
    \ case is to not start with 1, but end with 1, so we have\n  // 9 choices for\
    \ the first digit, and then the rest of the digits\n  // can be anything but 1\n\
    \  count += 9 * (long) pow(10, n - 2);\n  return count;\n}\nint main() {\n   \
    \ auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp6_pmrfig: /tmp/tmp6_pmrfig.cpp:26: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    }\n    long max_num = std::pow(10, n);\n    long min_num = std::pow(10,\
    \ n - 1);\n    long count = 0;\n    while (min_num < max_num) {\n        long\
    \ temp = min_num;\n        while (temp) {\n            long rem = temp % 10;\n\
    \            if (rem == 1) {\n                count++;\n                break;\n\
    \            }\n            temp /= 10;\n        }\n        min_num++;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n \
    \   assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmptm2p5ujn: /tmp/tmptm2p5ujn.cpp:28: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    long dp[n + 1] =\
    \ {0};\n    dp[1] = 2;\n    dp[2] = 3;\n    for (long i = 3; i <= n; i++) {\n\
    \        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n];\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmppd03vf93: /tmp/tmppd03vf93.cpp:22: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long dp[n + 1];\n  memset(dp,\
    \ 0, sizeof(dp));\n  dp[1] = 10;\n  dp[2] = 100;\n  for (long i = 3; i <= n; i++)\
    \ {\n    dp[i] = 10 * dp[i - 1] - pow(10, i - 2);\n  }\n  return dp[n];\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp9up492yd: /tmp/tmp9up492yd.cpp:17: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long sum = 0;\n  for (int\
    \ i = 0; i < n; i++) {\n    sum += (long) pow(10, i);\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp2tgdwl4t: /tmp/tmp2tgdwl4t.cpp:15: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long a[n + 1], b[n + 1];\n\
    \  a[0] = 1;\n  b[0] = 1;\n  for (long i = 1; i <= n; i++) {\n    a[i] = a[i -\
    \ 1] + b[i - 1];\n    b[i] = a[i - 1];\n  }\n  return a[n] + b[n];\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpgr9vvv7p: /tmp/tmpgr9vvv7p.cpp:17: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long count_zero = 0;\n  long\
    \ count_one = 0;\n  for (long i = 1; i <= n; i++) {\n    if (i == 1) {\n     \
    \ count_one = 1;\n      count_zero = 1;\n    } else {\n      count_one = count_one\
    \ + count_zero;\n      count_zero = count_one + count_zero;\n    }\n  }\n  return\
    \ count_one;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp9fpo5qlx: /tmp/tmp9fpo5qlx.cpp:22: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ zero_count = 0;\n    for (long i = 1; i <= n; i++) {\n        zero_count +=\
    \ log10(i);\n    }\n    count = pow(10, zero_count);\n    return count;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp_g1tnbxd: /tmp/tmp_g1tnbxd.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 2;\n  }\n  long output = (9 * pow(10, n - 1)) - (pow(10, n - 1) - 1);\n  return\
    \ output;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpg9_z9nlr: /tmp/tmpg9_z9nlr.cpp:14: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    } else if (n == 2) {\n        return 4;\n    } else {\n        return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n    }\n}\nint main() {\n \
    \   auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n   \
    \ assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp93lmbd72: /tmp/tmp93lmbd72.cpp:16: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n >= 1);\n  assert(n\
    \ <= 16);\n  // Base case\n  if (n == 1) {\n    return 1;\n  }\n  // Recursive\
    \ case\n  return starts_one_ends(n - 1) + 1 + 9 * std::pow(10, n - 2);\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmps56_xz2c: /tmp/tmps56_xz2c.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  // DP[i] stores the count\
    \ of n-digit integers ending with 1 where n = i\n  long DP[n+1];\n  DP[1] = 1;\n\
    \  long pow = 1;\n  for (long i = 2; i <= n; i++) {\n    pow *= 10;\n    DP[i]\
    \ = pow + 9*std::accumulate(DP, DP+i, 0L);\n  }\n  return std::accumulate(DP,\
    \ DP+n+1, 0L);\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpi9ef30ac: /tmp/tmpi9ef30ac.cpp:18: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) return 1;\n  return\
    \ (pow(10, n - 1) - 1) + starts_one_ends(n - 1);\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpx47hwzu2: /tmp/tmpx47hwzu2.cpp:12: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long dp[n + 1];\n  std::memset(dp,\
    \ 0, sizeof(dp));\n  dp[1] = 1;\n  for (int i = 2; i <= n; i++) {\n    dp[i] =\
    \ (10 * dp[i - 1]) % 1000000007;\n  }\n  return dp[n];\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp8lt0e5fn: /tmp/tmp8lt0e5fn.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    return (n * (n + 1)) / 2;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpkxb3jtiw: /tmp/tmpkxb3jtiw.cpp:11: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) return 2;\n  long\
    \ dp[n+1];\n  dp[0] = 0;\n  dp[1] = 2;\n  for (long i = 2; i <= n; i++) {\n  \
    \  dp[i] = (dp[i-1] + dp[i-2]);\n  }\n  return dp[n];\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpr_2w3i1j: /tmp/tmpr_2w3i1j.cpp:17: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // Code goes here.\n   \
    \ // convert it to binary number\n    std::vector<long> v;\n    long num = n;\n\
    \    while (num > 0) {\n        long reminder = num % 2;\n        v.push_back(reminder);\n\
    \        num = num / 2;\n    }\n    std::reverse(v.begin(), v.end());\n    long\
    \ count = 0;\n    bool start = false;\n    bool end = false;\n    for (int i =\
    \ 0; i < v.size(); i++) {\n        if (v[i] == 1) {\n            if (i == 0) {\n\
    \                start = true;\n            }\n            if (i == v.size() -\
    \ 1) {\n                end = true;\n            }\n            count++;\n   \
    \     }\n    }\n    if (start && end) {\n        return (1 << count) - 1;\n  \
    \  } else if (start) {\n        return (1 << count) - 2;\n    } else if (end)\
    \ {\n        return (1 << count) - 1;\n    } else {\n        return (1 << count)\
    \ - 2;\n    }\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp8xvxzbo0: /tmp/tmp8xvxzbo0.cpp:43: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long sum = 0;\n  for (long\
    \ i = 0; i < n; i++) {\n    sum += (i+1) * 9 * pow(10, i);\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmphbddpcrq: /tmp/tmphbddpcrq.cpp:14: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n < 2) return 1;\n \
    \   long base = 10;\n    long base_n = 10;\n    long answer = 2;\n    for (long\
    \ i = 2; i < n; ++i) {\n        base_n *= base;\n        answer += 2 * base_n\
    \ - base;\n    }\n    return answer;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpa_lec3jw: /tmp/tmpa_lec3jw.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n < 1) return 0;\n \
    \   if (n < 3) return 2;\n    long len = n/2;\n    std::vector<long> a;\n    long\
    \ prev = 1;\n    for (long i = 0; i < len; ++i) {\n        long this_len = 10*prev;\n\
    \        a.push_back(this_len);\n        prev = this_len;\n    }\n    long ans\
    \ = prev;\n    for (long i = 0; i < len; ++i) {\n        ans += a[i];\n    }\n\
    \    ans += n&1 ? ans : ans-1;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpp7yocf0p: /tmp/tmpp7yocf0p.cpp:25: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long num = n - 1;\n    long\
    \ last_term = 1;\n    long first_term = 1;\n    long sum_first_last = 2;\n   \
    \ for (long i = 1; i < n; i++) {\n        last_term = (last_term * 10) % 1000000007;\n\
    \        first_term = (first_term * 9) % 1000000007;\n        sum_first_last =\
    \ (sum_first_last * 10) % 1000000007;\n    }\n    long ans = ((num * sum_first_last)\
    \ % 1000000007 + first_term + last_term) % 1000000007;\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpyu0p1lfs: /tmp/tmpyu0p1lfs.cpp:20: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long dp[2][2][n+1];\n  \
    \  // dp[i][j][k] = no. of k digit positive integers, of which i digits are\n\
    \    // occupied and the integer ends with j.\n    // i = 0 means no digits are\
    \ occupied.\n    // i = 1 means 1 digit is occupied.\n    // j = 0 means the number\
    \ does not end with 1.\n    // j = 1 means the number ends with 1.\n    // initially\
    \ all the arrays are 0.\n    for(long i = 0; i < 2; i++) {\n        for(long j\
    \ = 0; j < 2; j++) {\n            for(long k = 0; k <= n; k++) {\n           \
    \     dp[i][j][k] = 0;\n            }\n        }\n    }\n    // fill the first\
    \ column.\n    // i = 0;\n    dp[0][0][0] = 1;\n    // i = 1;\n    dp[1][0][1]\
    \ = 1;\n    dp[1][1][1] = 1;\n    for(long i = 0; i < 2; i++) {\n        for(long\
    \ j = 0; j < 2; j++) {\n            for(long k = 1; k <= n; k++) {\n         \
    \       if(i == 0 && j == 0) continue;\n                if(i == 1 && j == 1) continue;\n\
    \                if(i == 0) {\n                    dp[i][j][k] = dp[i][0][k-1]\
    \ + dp[i][1][k-1];\n                } else {\n                    if(j == 0) {\n\
    \                        dp[i][j][k] = dp[i-1][j][k-1] + dp[i-1][1][k-1];\n  \
    \                  } else {\n                        dp[i][j][k] = dp[i-1][j][k-1]\
    \ + dp[i-1][0][k-1];\n                    }\n                }\n            }\n\
    \        }\n    }\n    return dp[1][0][n] + dp[1][1][n];\n}\nint main() {\n  \
    \  auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n   \
    \ assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4))\
    \ == (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpprr47qdm: /tmp/tmpprr47qdm.cpp:48: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    }\n    long x = 10;\n    for (long i = 2; i < n; i++) {\n        x *=\
    \ 10;\n    }\n    return (x - 1)*2;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmprie2xslu: /tmp/tmprie2xslu.cpp:17: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n <= 0) {\n    return\
    \ 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  // use dynamic programming\n\
    \  long dp[n + 1];\n  dp[0] = 0;\n  dp[1] = 1;\n  dp[2] = 10;\n  for (long i =\
    \ 3; i <= n; i++) {\n    dp[i] = 9 + dp[i - 1];\n  }\n  return dp[n];\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpvmjep542: /tmp/tmpvmjep542.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long dp[n][2];\n    dp[0][0]\
    \ = 0;\n    dp[0][1] = 1;\n    for (long i = 1; i < n; i++) {\n        dp[i][0]\
    \ = (dp[i - 1][0] * 10) + dp[i - 1][1];\n        dp[i][1] = dp[i - 1][0] + dp[i\
    \ - 1][1];\n    }\n    return dp[n - 1][0] + dp[n - 1][1];\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp31wl52lo: /tmp/tmp31wl52lo.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n <= 1) {\n    return\
    \ 1;\n  }\n  long sum = 1;\n  for (int i = 2; i <= n; i++) {\n    sum += 9 * sum;\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpihydrx1i: /tmp/tmpihydrx1i.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    } else if (n == 2) {\n        return 3;\n    } else {\n        return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n    }\n}\nint main() {\n \
    \   auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n   \
    \ assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpdpcyz9nm: /tmp/tmpdpcyz9nm.cpp:16: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) return 1;\n\
    \    if (n == 2) return 2;\n    long dp[n][10];\n    memset(dp, 0, sizeof(dp));\n\
    \    for (int i = 0; i < 10; i++) dp[0][i] = 1;\n    for (int i = 1; i < n; i++)\
    \ {\n        dp[i][0] = dp[i-1][1];\n        for (int j = 1; j < 9; j++) {\n \
    \           dp[i][j] = dp[i-1][j-1] + dp[i-1][j+1];\n        }\n        dp[i][9]\
    \ = dp[i-1][8];\n    }\n    long result = 0;\n    for (int i = 0; i < 10; i++)\
    \ {\n        result += dp[n-1][i];\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpzqttlmy4: /tmp/tmpzqttlmy4.cpp:27: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) return 2;\n  long\
    \ prev = 2;\n  long prev_prev = 1;\n  long curr = 3;\n  long sum = 0;\n  for (long\
    \ i = 2; i < n; i++) {\n    sum = prev + prev_prev;\n    prev_prev = prev;\n \
    \   prev = sum;\n  }\n  return (sum * 2) + (prev_prev * 2);\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpmguz9umy: /tmp/tmpmguz9umy.cpp:20: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // TODO: implement this\
    \ function\n    if(n <= 1)\n        return 1;\n    if(n == 2)\n        return\
    \ 10;\n    long N = 10;\n    long max = std::pow(10, n);\n    long count = 1;\n\
    \    for(long i = 1; i < n; i++) {\n        count *= 9;\n        N += count;\n\
    \    }\n    return N;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpthu4vm2q: /tmp/tmpthu4vm2q.cpp:23: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return\
    \ 2;\n    } else if (n == 2) {\n        return 3;\n    } else {\n        return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n    }\n}\nint main() {\n \
    \   auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n  \
    \  assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n   \
    \ assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp1608b5js: /tmp/tmp1608b5js.cpp:16: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) return 1;\n\
    \    long ans = 9;\n    for (long i = 1; i < n - 1; i++)\n        ans *= 10;\n\
    \    return ans;\n}\nint main() {\n    auto candidate = starts_one_ends;\n   \
    \ assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmpn1cdbkr8: /tmp/tmpn1cdbkr8.cpp:15: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long a = 9, b = 0, c = 9;\n\
    \    long sum = 0;\n    // dynamic programming like approach.\n    // for this\
    \ problem we use 2 states,\n    // state 1: dp[i][0] = no. of n-digit number starting\
    \ with 1.\n    // state 2: dp[i][1] = no. of n-digit number ending with 1.\n \
    \   // For i = 1,\n    // dp[1][0] = 9\n    // dp[1][1] = 0\n    // For i = 2,\n\
    \    // dp[2][0] = 9*9 + 1*9\n    // dp[2][1] = 9\n    // For i = 3,\n    // dp[3][0]\
    \ = 9*9*9 + 9*1*9 + 9*9*1\n    // dp[3][1] = 9*9 + 9*1\n    // For i = n,\n  \
    \  // dp[n][0] = 9*9*9...9*9 + 9*1*9...9*9 + ... + 9*9*9...9*1\n    // dp[n][1]\
    \ = 9*9*9...9*9 + 9*1*9...9*9 + ... + 9*9*9...9*1\n    for (long i = 1; i <= n;\
    \ i++) {\n        if (i == 1) {\n            // since no. of digits is 1, that\
    \ one digit must be 1.\n            sum += 1;\n        } else {\n            a\
    \ = 9;\n            b = 0;\n            c = 9;\n            // n-digit number\
    \ starting with 1.\n            // 1*9*9...9*9 + 1*1*9...9*9 + ... + 1*9*9...9*1\n\
    \            sum += a * pow(c, i - 2) + a * pow(c, i - 2) + b * pow(c, i - 2);\n\
    \            // n-digit number ending with 1.\n            // 9*9*9...9*1 + 9*1*9...9*1\
    \ + ... + 9*9*9...1*1\n            sum += a * pow\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuc5a_83j.cpp: In function \u2018long int starts_one_ends(long int)\u2019\
    :\n/tmp/tmpuc5a_83j.cpp:37:22: error: invalid operands of types \u2018long int\u2019\
    \ and \u2018double(double, double) throw ()\u2019 {aka \u2018double(double, double)\u2019\
    } to binary \u2018operator*\u2019\n   37 |             sum += a * pow\n      |\
    \                    ~ ^ ~~~\n      |                    |   |\n      |      \
    \              |   double(double, double) throw () {aka double(double, double)}\n\
    \      |                    long int\n/tmp/tmpuc5a_83j.cpp:39:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   39 | int main() {\n     \
    \ |            ^\n/tmp/tmpuc5a_83j.cpp:46:1: error: expected \u2018}\u2019 at\
    \ end of input\n   46 | }\n      | ^\n/tmp/tmpuc5a_83j.cpp:24:35: note: to match\
    \ this \u2018{\u2019\n   24 |     for (long i = 1; i <= n; i++) {\n      |   \
    \                                ^\n/tmp/tmpuc5a_83j.cpp:46:1: error: expected\
    \ \u2018}\u2019 at end of input\n   46 | }\n      | ^\n/tmp/tmpuc5a_83j.cpp:5:30:\
    \ note: to match this \u2018{\u2019\n    5 | long starts_one_ends(long n) {\n\
    \      |                              ^\n/tmp/tmpuc5a_83j.cpp:46:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   46 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n >= 1);\n  if (n ==\
    \ 1) {\n    return 2;\n  }\n  if (n == 2) {\n    return 10;\n  }\n  long count\
    \ = starts_one_ends(n - 1) + 9 * (long)pow(10, n - 2);\n  return count;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp9m0ric47: /tmp/tmp9m0ric47.cpp:18: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n > 0);\n  long i,\
    \ j, count = 0;\n  for (i = 1; i <= n; i++) {\n    for (j = 1; j <= 9; j++) {\n\
    \      if (i == 1)\n        count++;\n      else if (i == n)\n        count++;\n\
    \      else\n        count += pow(9, i - 2);\n    }\n  }\n  return count;\n}\n\
    int main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpbjlye3db: /tmp/tmpbjlye3db.cpp:22: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long result = 0;\n  // We\
    \ first count for the number of numbers that start with 1 and end with 1\n  //\
    \ i.e. 11 ... 11 (n digits)\n  // For this we have (n-1) options for the numbers\
    \ between 11 and 11\n  result += pow(9, n - 1);\n  // We then count for the number\
    \ of numbers that start with 1 and end with 2\n  // i.e. 11 ... 12 (n digits)\n\
    \  // For this we have (n-1) options for the numbers between 11 and 12\n  result\
    \ += pow(9, n - 1);\n  // Similarly we have these numbers starting with 1 and\
    \ ending with 3, 4, ...,\n  // 9 respectively. So all in all we have 8 * pow(9,\
    \ n - 1) more numbers.\n  result += 8 * pow(9, n - 1);\n  // In the same way,\
    \ we have the numbers that start with 2, 3, ..., 9 and end\n  // with 1. We have\
    \ 8 * pow(9, n - 1) more numbers.\n  result += 8 * pow(9, n - 1);\n  // So, we\
    \ have (17 * 8 * pow(9, n - 1)) more numbers.\n  result += 17 * 8 * pow(9, n -\
    \ 1);\n  return result;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpm1u9eowz: /tmp/tmpm1u9eowz.cpp:27: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n > 0);\n  // 1-9 is\
    \ the basis case, and there are 9 of them\n  if (n == 1) {\n    return 9;\n  }\n\
    \  if (n == 2) {\n    return 180;\n  }\n  // If n > 2, then a number can start\
    \ with 1, or end with 1\n  // An n-digit number starting with 1 is all numbers\
    \ from 10 to 10^(n-1)\n  // which is n-1 places for the rest of the digits\n \
    \ // An n-digit number ending with 1 is all numbers from 1 to 9, with\n  // n-1\
    \ places for the other digits\n  long start = starts_one_ends(n - 1);\n  long\
    \ end = starts_one_ends(n - 2);\n  return start + end;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpu3po7wvp: /tmp/tmpu3po7wvp.cpp:25: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long result = 1;\n  if (n\
    \ > 1) {\n    result = (std::pow(10, n - 1) + std::pow(10, n - 2)) % 1000000007;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbtu492dw.cpp: In function \u2018long int starts_one_ends(long int)\u2019\
    :\n/tmp/tmpbtu492dw.cpp:8:58: error: invalid operands of types \u2018__gnu_cxx::__promote_2<int,\
    \ long int, double, double>::__type\u2019 {aka \u2018double\u2019} and \u2018\
    int\u2019 to binary \u2018operator%\u2019\n    8 |     result = (std::pow(10,\
    \ n - 1) + std::pow(10, n - 2)) % 1000000007;\n      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~\n      |                                   |                  \
    \      |\n      |                                   |                        int\n\
    \      |                                   __gnu_cxx::__promote_2<int, long int,\
    \ double, double>::__type {aka double}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  assert(n > 0);\n  std::queue<std::string>\
    \ to_expand;\n  to_expand.push(\"1\");\n  long count = 0;\n  while (!to_expand.empty())\
    \ {\n    std::string curr = to_expand.front();\n    to_expand.pop();\n    if (curr.size()\
    \ == n) {\n      if (curr[0] == '1' || curr[curr.size() - 1] == '1') {\n     \
    \   ++count;\n      }\n    } else {\n      to_expand.push(curr + \"0\");\n   \
    \   to_expand.push(curr + \"1\");\n    }\n  }\n  return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpn5xk5o4c: /tmp/tmpn5xk5o4c.cpp:27: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 10;\n  }\n  long dp[n + 1];\n  memset(dp, 0, sizeof(dp));\n  dp[1] = 10;\n \
    \ for (long i = 2; i <= n; i++) {\n    dp[i] = dp[i - 1] * 9 + pow(10, i - 1);\n\
    \  }\n  return dp[n];\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpar7t4jyu: /tmp/tmpar7t4jyu.cpp:19: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long count = 0;\n  for (int\
    \ i = 1; i <= 9; i++) {\n    count = count + pow(9, n - 1);\n  }\n  return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpd35ho1ti: /tmp/tmpd35ho1ti.cpp:14: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long *F = new long[n+1];\n\
    \    F[0] = 0;\n    F[1] = 1;\n    for(long i = 2; i <= n; i++) {\n        F[i]\
    \ = (10*F[i-1]) - F[i-2];\n    }\n    long result = F[n];\n    delete [] F;\n\
    \    return result;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp5aavipi7: /tmp/tmp5aavipi7.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long *dp = new long[n +\
    \ 1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (long i = 2; i <= n; i++) {\n \
    \       dp[i] = 2 * dp[i - 1] + pow(10, i - 1);\n    }\n    return dp[n];\n}\n\
    int main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmptd14b213: /tmp/tmptd14b213.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    // f(4) = 4 * f(3) + 3 *\
    \ f(2)\n    // f(3) = 3 * f(2) + 2 * f(1)\n    // f(2) = 2 * f(1) + 1 * f(0)\n\
    \    // f(1) = 1 * f(0)\n    // f(0) = 1\n    if (n < 2) {\n        return n;\n\
    \    }\n    long num_ending_in_1 = 1;\n    long num_ending_in_others = 1;\n  \
    \  for (long i = 2; i <= n; i++) {\n        long num_ending_in_1_till_i = (i -\
    \ 1) * num_ending_in_others +\n                                      (i - 1) *\
    \ num_ending_in_1;\n        long num_ending_in_others_till_i = num_ending_in_1;\n\
    \        num_ending_in_1 = num_ending_in_1_till_i;\n        num_ending_in_others\
    \ = num_ending_in_others_till_i;\n    }\n    return num_ending_in_1 + num_ending_in_others;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp6ty3wr60: /tmp/tmp6ty3wr60.cpp:28: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 2;\n  } else if (n == 2) {\n    return 3;\n  } else {\n    long dp[n + 1];\n\
    \    dp[0] = 1;\n    dp[1] = 2;\n    dp[2] = 3;\n    for (long i = 3; i <= n;\
    \ i++) {\n      dp[i] = dp[i - 1] + dp[i - 2];\n    }\n    return dp[n] * 2 -\
    \ 2;\n  }\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpgl3ktdit: /tmp/tmpgl3ktdit.cpp:23: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 2;\n  } else if (n == 2) {\n    return 6;\n  } else {\n    // f(n) = 2 * f(n-1)\
    \ + 2 * f(n-2)\n    long long a = 2, b = 6, i = 3;\n    while (i <= n) {\n   \
    \   long long temp = 2 * b + 2 * a;\n      a = b;\n      b = temp;\n      i++;\n\
    \    }\n    return b;\n  }\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpykpt7adk: /tmp/tmpykpt7adk.cpp:24: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n > 0);\n    if (n\
    \ == 1) return 1;\n    long cnt = 0;\n    for (long i = 1; i < n; i++) {\n   \
    \     cnt += pow(10, i - 1);\n    }\n    return cnt * 2;\n}\nint main() {\n  \
    \  auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n   \
    \ assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4))\
    \ == (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmptcl1xpyy: /tmp/tmptcl1xpyy.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  long dp[n + 1];\n  dp[0] =\
    \ 0;\n  dp[1] = 1;\n  for (long i = 2; i <= n; i++) {\n    if (i == 2) {\n   \
    \   dp[i] = 2;\n    } else {\n      dp[i] = dp[i - 1] + dp[i - 2];\n    }\n  }\n\
    \  return dp[n];\n}\nint main() {\n    auto candidate = starts_one_ends;\n   \
    \ assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmpdn4cb3dc: /tmp/tmpdn4cb3dc.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    return 9 * std::pow(10,\
    \ n - 1);\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpwkwztry4: /tmp/tmpwkwztry4.cpp:10: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n  if (n == 1) {\n    return\
    \ 2;\n  }\n  if (n == 2) {\n    return 5;\n  }\n  long count = 0;\n  for (long\
    \ i = 0; i < n - 1; i++) {\n    count += starts_one_ends(i);\n  }\n  count *=\
    \ 2;\n  long count2 = 0;\n  for (long i = 0; i < n - 2; i++) {\n    count2 +=\
    \ starts_one_ends(i);\n  }\n  count += count2 * 2;\n  count += 9;\n  return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp9qafcbuq: /tmp/tmp9qafcbuq.cpp:27: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    assert(n > 0);\n    // The\
    \ solution is the sum of the binomial coefficients:\n    //\n    // C(n-1,k) =\
    \ n!/((n-k)!k!)\n    //\n    // as k goes from 0 to n-1. The reason is that C(n-1,k)\
    \ is the number of\n    // ways to choose k digits from n-1 that are not the first\
    \ digit of the\n    // positive number.\n    //\n    // The bionomial coefficient\
    \ can be calculated as the product of\n    //\n    //   n(n-1)...(n-k+1)/k!\n\
    \    //\n    // and\n    //\n    //   (n-k)(n-k-1)...n-2\n    //\n    // For example,\
    \ for n=5 and k=2, we can choose a 2 digit prefix from\n    // 4 digits, and then\
    \ choose a 3 digit prefix from 3 digits. This gives us\n    // 4 * 3 * 2 * 1 *\
    \ 3 * 2 * 1 = 144.\n    //\n    // Then we can choose a 2 digit suffix from 4\
    \ digits, and then choose a 3\n    // digit suffix from 3 digits. So this gives\
    \ us another 144.\n    //\n    // So the total ways to choose k digits are 2 *\
    \ C(n-1,k).\n    //\n    // Now we have to add the ways to choose a 1 digit number.\
    \ This is just n,\n    // since this is just the same as the number of ways to\
    \ choose a 0 digit\n    // number.\n    //\n    // Since the total number of ways\
    \ is the sum of the binomial coefficients,\n    // and there are 2 * C(n-1,k)\
    \ ways to choose k digits, the total number of\n    // ways is the sum of 2 *\
    \ C(n-1,k) + n = (n+1)*2^(n-1)\n    //\n    // This is O(1).\n\n    return (n+1)*pow(2,n-1);\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp43j407hf: /tmp/tmp43j407hf.cpp:46: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
