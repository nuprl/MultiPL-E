name: HumanEval_101_words_string
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::stringstream ss(s);\n    std::vector<std::string> words;\n    std::string\
    \ word;\n    while (ss >> word)\n        words.push_back(word);\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpbxz_g5td: /tmp/tmpbxz_g5td.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string str;\n  std::vector<std::string> strs;\n\
    \  while (ss >> str) {\n    strs.push_back(str);\n  }\n  return strs;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpxeljzt8a: /tmp/tmpxeljzt8a.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> v;\n    std::string temp;\n    bool space = false;\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == ' ' || s[i] ==\
    \ ',') {\n            if(space) {\n                v.push_back(temp);\n      \
    \          temp = \"\";\n                space = false;\n            }\n     \
    \   } else {\n            temp += s[i];\n            space = true;\n        }\n\
    \    }\n    v.push_back(temp);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmplp6vjy22: /tmp/tmplp6vjy22.cpp:32: int main(): Assertion `candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::stringstream ss(s);\n  std::string\
    \ word;\n  while (ss >> word)\n    result.push_back(word);\n  return result;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpoevp5xfg: /tmp/tmpoevp5xfg.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string temp = \"\";\n    int j\
    \ = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n\
    \            words.push_back(temp);\n            temp = \"\";\n            j =\
    \ 0;\n        }\n        else if(s[i] == ',') {\n            words.push_back(temp);\n\
    \            temp = \"\";\n            j = 0;\n        }\n        else if(s[i]\
    \ == '\\n') {\n            words.push_back(temp);\n            temp = \"\";\n\
    \            j = 0;\n        }\n        else if(s[i] == '\\t') {\n           \
    \ words.push_back(temp);\n            temp = \"\";\n            j = 0;\n     \
    \   }\n        else {\n            temp += s[i];\n            j++;\n        }\n\
    \    }\n    words.push_back(temp);\n    return words;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp9pdiokvh: /tmp/tmp9pdiokvh.cpp:43: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream iss(s);\n  std::vector<std::string> words;\n  std::copy(std::istream_iterator<std::string>(iss),\n\
    \            std::istream_iterator<std::string>(),\n            std::back_inserter(words));\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpmnip8635: /tmp/tmpmnip8635.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::stringstream ss(s);\n    std::string word;\n    std::vector<std::string>\
    \ result;\n    while (ss >> word) {\n        result.push_back(word);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpwltcznif: /tmp/tmpwltcznif.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \t//create a stream with s\n\tstd::stringstream ss(s);\n\t//split into words\n\
    \tstd::vector<std::string> words;\n\tstd::string word;\n\twhile (std::getline(ss,\
    \ word, ' ')) {\n\t\twords.push_back(word);\n\t}\n\treturn words;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpy6x97qv3: /tmp/tmpy6x97qv3.cpp:21: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> ret;\n  std::string temp;\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      ret.push_back(temp);\n\
    \      temp.clear();\n    } else {\n      temp += s[i];\n    }\n  }\n  if (temp.size()\
    \ > 0) {\n    ret.push_back(temp);\n  }\n  return ret;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpum8eshla: /tmp/tmpum8eshla.cpp:26: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // This will split the input string by the spaces/commas\n  std::istringstream\
    \ iss(s);\n  std::vector<std::string> results(std::istream_iterator<std::string>{iss},\n\
    \                                   std::istream_iterator<std::string>());\n \
    \ return results;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp4e86ncdp: /tmp/tmp4e86ncdp.cpp:17: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    int i = 0;\n    std::vector<std::string> str;\n    std::string word = \"\"\
    ;\n    while(i < s.length()) {\n        if(s[i] == ' ') {\n            i++;\n\
    \            continue;\n        }\n        if(s[i] == ',') {\n            str.push_back(word);\n\
    \            word = \"\";\n            i++;\n            continue;\n        }\n\
    \        word += s[i];\n        i++;\n    }\n    str.push_back(word);\n    return\
    \ str;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp6h_2xcky: /tmp/tmp6h_2xcky.cpp:31: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::string word;\n  for (auto x : s) {\n\
    \    if (x == ' ' || x == ',') {\n      result.push_back(word);\n      word =\
    \ \"\";\n    } else {\n      word += x;\n    }\n  }\n  result.push_back(word);\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpbdw_1s95: /tmp/tmpbdw_1s95.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string temp;\n    for (size_t i\
    \ = 0; i < s.size(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n     \
    \       words.push_back(temp);\n            temp.clear();\n        } else {\n\
    \            temp += s[i];\n        }\n    }\n    words.push_back(temp);\n   \
    \ return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpzqduwr1w: /tmp/tmpzqduwr1w.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string temp;\n    std::istringstream\
    \ input(s);\n    while(std::getline(input, temp, ' '))\n        words.push_back(temp);\n\
    \    return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpbh_6029w: /tmp/tmpbh_6029w.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string token;\n  std::vector<std::string>\
    \ result;\n  while (std::getline(ss, token, ' '))\n    result.push_back(token);\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpkf19imw_: /tmp/tmpkf19imw_.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> ans;\n    std::string temp;\n    for(int i = 0;\
    \ i < s.size(); i++) {\n        if(s[i] == ' ' || s[i] == ',') {\n           \
    \ ans.push_back(temp);\n            temp = \"\";\n        } else {\n         \
    \   temp += s[i];\n        }\n    }\n    if(temp != \"\") ans.push_back(temp);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpul4nigfw: /tmp/tmpul4nigfw.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string delimiter = \" \";\n  std::vector<std::string> words;\n  size_t\
    \ pos = 0;\n  std::string token;\n  while ((pos = s.find(delimiter)) != std::string::npos)\
    \ {\n    token = s.substr(0, pos);\n    std::string comma = \",\";\n    if(token.find(comma)\
    \ != std::string::npos) {\n      token.erase(std::remove(token.begin(), token.end(),\
    \ ','), token.end());\n    }\n    words.push_back(token);\n    s.erase(0, pos\
    \ + delimiter.length());\n  }\n  std::string comma = \",\";\n  if(s.find(comma)\
    \ != std::string::npos) {\n    s.erase(std::remove(s.begin(), s.end(), ','), s.end());\n\
    \  }\n  words.push_back(s);\n  return words;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpw294n5nw: /tmp/tmpw294n5nw.cpp:35: int main(): Assertion `candidate((\"\
    \")) == (std::vector<std::string>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string word;\n  std::vector<std::string> words;\n\
    \  while (ss >> word) {\n    words.push_back(word);\n  }\n  return words;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpy64qepef: /tmp/tmpy64qepef.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \   std::vector<std::string>words;\n   std::stringstream ss(s);\n   while(ss.good()){\n\
    \      std::string sub;\n      getline(ss,sub,',');\n      words.push_back(sub);\n\
    \   }\n   return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp_ps1le8j: /tmp/tmp_ps1le8j.cpp:20: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::stringstream ss(s);\n    std::string temp;\n    std::vector<std::string>\
    \ strings;\n    while(std::getline(ss, temp, ' ')){\n        strings.push_back(temp);\n\
    \    }\n    return strings;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpecospbir: /tmp/tmpecospbir.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::string temp = \"\";\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        } else if (s[i] == ',') {\n            result.push_back(temp);\n\
    \            temp = \"\";\n        } else {\n            temp += s[i];\n     \
    \   }\n    }\n    result.push_back(temp);\n    return result;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp_k0nkkv9: /tmp/tmp_k0nkkv9.cpp:27: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream iss(s);\n    std::vector<std::string> vec{std::istream_iterator<std::string>{iss},\
    \ std::istream_iterator<std::string>{}};\n    return vec;\n}\nint main() {\n \
    \   auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp4lxzcuap: /tmp/tmp4lxzcuap.cpp:15: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> temp;\n    std::stringstream ss(s);\n    std::string\
    \ t;\n    while(ss >> t)\n        temp.push_back(t);\n    return temp;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp8wyqdsgr: /tmp/tmp8wyqdsgr.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string word;\n  std::vector<std::string> result;\n\
    \  while (ss >> word) {\n    result.push_back(word);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpmnxrtdte: /tmp/tmpmnxrtdte.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    int found = 0;\n    int start = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] ==\
    \ ',') {\n            result.push_back(s.substr(start, i - start));\n        \
    \    start = i + 1;\n        }\n    }\n    result.push_back(s.substr(start, s.length()\
    \ - start));\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpmvun5n81: /tmp/tmpmvun5n81.cpp:23: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::stringstream ss(s);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' '))\n        result.push_back(item);\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp_dnpowcs: /tmp/tmp_dnpowcs.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    int count = 0;\n    for (char c : s) {\n        if (c == ' ') {\n       \
    \     count++;\n        }\n    }\n    std::vector<std::string> vec;\n    int start\
    \ = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n\
    \            vec.push_back(s.substr(start, i - start));\n            start = i\
    \ + 1;\n        }\n    }\n    vec.push_back(s.substr(start, s.size() - start));\n\
    \    return vec;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpkxq43sor: /tmp/tmpkxq43sor.cpp:28: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    size_t last = 0;\n    size_t next =\
    \ 0;\n    while ((next = s.find_first_of(\", \", last)) != std::string::npos)\
    \ {\n        words.push_back(s.substr(last, next-last));\n        last = next\
    \ + 1;\n    }\n    words.push_back(s.substr(last));\n    return words;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmppykgbquk: /tmp/tmppykgbquk.cpp:21: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  int pos = 0;\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (pos < i) {\n      \
    \  result.push_back(s.substr(pos, i - pos));\n      }\n      pos = i + 1;\n  \
    \  }\n  }\n  if (pos < s.size()) {\n    result.push_back(s.substr(pos, s.size()\
    \ - pos));\n  }\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::stringstream ss(s);\n  std::string\
    \ word;\n  while (ss >> word) {\n    result.push_back(word);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpazyjo5w4: /tmp/tmpazyjo5w4.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  stringstream ss(s);\n  std::vector<std::string> v;\n  std::string word;\n \
    \ while(getline(ss, word, ' '))\n    v.push_back(word);\n  return v;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq7w4tgme.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > words_string(std::string)\u2019:\n/tmp/tmpq7w4tgme.cpp:9:3: error: \u2018\
    stringstream\u2019 was not declared in this scope; did you mean \u2018std::stringstream\u2019\
    ?\n    9 |   stringstream ss(s);\n      |   ^~~~~~~~~~~~\n      |   std::stringstream\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpq7w4tgme.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringstream;\n      |                                     ^~~~~~~~~~~~\n/tmp/tmpq7w4tgme.cpp:12:17:\
    \ error: \u2018ss\u2019 was not declared in this scope; did you mean \u2018s\u2019\
    ?\n   12 |   while(getline(ss, word, ' '))\n      |                 ^~\n     \
    \ |                 s\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string word = \"\";\n  std::vector<std::string>words;\n  for(int i = 0;\
    \ i < s.length(); i++) {\n    if(s[i] == ' ' || s[i] == ',') {\n      words.push_back(word);\n\
    \      word = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n  words.push_back(word);\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpusv46e8h: /tmp/tmpusv46e8h.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::vector<std::string> res;\n  while(ss.good())\
    \ {\n    std::string substr;\n    getline(ss, substr, ' ');\n    res.push_back(substr);\n\
    \  }\n  res.erase(res.begin());\n  return res;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp6bvwa3bu: /tmp/tmp6bvwa3bu.cpp:21: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string temp = \"\";\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n \
    \           words.push_back(temp);\n            temp = \"\";\n        } else {\n\
    \            temp += s[i];\n        }\n    }\n    words.push_back(temp);\n   \
    \ return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmps0g8w_vj: /tmp/tmps0g8w_vj.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream stream(s);\n  std::string tmp;\n  std::vector<std::string>\
    \ output;\n  while(stream >> tmp) {\n    output.push_back(tmp);\n  }\n  return\
    \ output;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpocnxqx1q: /tmp/tmpocnxqx1q.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    return std::vector<std::string>();\n}\nint main() {\n    auto candidate =\
    \ words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmptcds54il: /tmp/tmptcds54il.cpp:13: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  // split string based on space\n  std::istringstream\
    \ iss(s);\n  for (std::string s; iss >> s;) {\n    result.push_back(s);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpsmjnuec1: /tmp/tmpsmjnuec1.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::string t;\n  for (char c : s) {\n \
    \   if (c == ' ' || c == ',') {\n      if (!t.empty()) {\n        words.push_back(t);\n\
    \        t.clear();\n      }\n    } else {\n      t += c;\n    }\n  }\n  if (!t.empty())\
    \ {\n    words.push_back(t);\n  }\n  return words;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string word = \"\";\n    for (char\
    \ c : s) {\n        if (c == ' ' || c == ',') {\n            if (word != \"\"\
    ) {\n                words.push_back(word);\n                word = \"\";\n  \
    \          }\n        } else {\n            word += c;\n        }\n    }\n   \
    \ if (word != \"\") {\n        words.push_back(word);\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::stringstream ss(s);\n    std::vector<std::string> words;\n    for (std::string\
    \ each; ss >> each; words.push_back(each));\n    return words;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpxdgmhwes: /tmp/tmpxdgmhwes.cpp:16: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string token;\n  std::vector<std::string>\
    \ words;\n  while (getline(ss, token, ' '))\n    words.push_back(token);\n  return\
    \ words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmprlla_569: /tmp/tmprlla_569.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> res;\n    std::string delim = \", \";\n    size_t\
    \ pos = 0;\n    std::string token;\n    while ((pos = s.find(delim)) != std::string::npos)\
    \ {\n        token = s.substr(0, pos);\n        res.push_back(token);\n      \
    \  s.erase(0, pos + delim.length());\n    }\n    res.push_back(s);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpd26g0211: /tmp/tmpd26g0211.cpp:23: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream iss(s);\n  std::vector<std::string> words;\n  for (std::string\
    \ s; iss >> s; )\n    words.push_back(s);\n  return words;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp2zvuekdy: /tmp/tmp2zvuekdy.cpp:17: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> answer;\n\tstd::string temp = \"\";\n\tfor (int i =\
    \ 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ' || s[i] == ',') {\n\t\t\tanswer.push_back(temp);\n\
    \t\t\ttemp = \"\";\n\t\t}\n\t\telse {\n\t\t\ttemp += s[i];\n\t\t}\n\t}\n\tanswer.push_back(temp);\n\
    \treturn answer;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpk9swxh1y: /tmp/tmpk9swxh1y.cpp:25: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> v;\n\tstd::string word = \"\";\n\tfor (int i = 0; i\
    \ < s.length(); i++) {\n\t\tif (s[i] == ' ' || s[i] == ',') {\n\t\t\tv.push_back(word);\n\
    \t\t\tword = \"\";\n\t\t}\n\t\telse {\n\t\t\tword = word + s[i];\n\t\t}\n\t}\n\
    \tv.push_back(word);\n\treturn v;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp_8tv95q8: /tmp/tmp_8tv95q8.cpp:25: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> v;\n\tstd::string token;\n\tstd::istringstream ss(s);\n\
    \twhile (std::getline(ss, token, ' ')) {\n\t\tv.push_back(token);\n\t}\n\treturn\
    \ v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpzud5wylg: /tmp/tmpzud5wylg.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string>result;\n    std::stringstream ss(s);\n    std::string\
    \ aux;\n    while(ss >> aux){\n        result.push_back(aux);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmppmz_uhbc: /tmp/tmppmz_uhbc.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string str = \"\";\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n \
    \           words.push_back(str);\n            str = \"\";\n        } else {\n\
    \            str += s[i];\n        }\n    }\n    words.push_back(str);\n    return\
    \ words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp2q20s6b9: /tmp/tmp2q20s6b9.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::stringstream ss(s);\n\tstd::string word;\n\tstd::vector<std::string> result;\n\
    \twhile (ss >> word) {\n\t\tresult.push_back(word);\n\t}\n\treturn result;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpth4ueb8t: /tmp/tmpth4ueb8t.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::stringstream ss(s);\n    std::string\
    \ curr;\n    while (std::getline(ss, curr, ' '))\n        result.push_back(curr);\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpv00g3eqc: /tmp/tmpv00g3eqc.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::stringstream ss(s);\n  std::string\
    \ temp;\n  while (std::getline(ss, temp, ' ')) {\n    words.push_back(temp);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpsdkmexff: /tmp/tmpsdkmexff.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> vec;\n  std::string word = \"\";\n  for (int i = 0;\
    \ i < s.length(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      vec.push_back(word);\n\
    \      word = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n  if (word\
    \ != \"\") {\n    vec.push_back(word);\n  }\n  return vec;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp9vmt3qw8: /tmp/tmp9vmt3qw8.cpp:26: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string word;\n    bool space =\
    \ false;\n    for (int i = 0; i < s.length(); i++) {\n        if ((s[i] == ' ')\
    \ || (s[i] == ',')) {\n            if (space) {\n                words.push_back(word);\n\
    \                word = \"\";\n                space = false;\n            }\n\
    \        } else {\n            word += s[i];\n            space = true;\n    \
    \    }\n    }\n    words.push_back(word);\n    return words;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpytywc5ut: /tmp/tmpytywc5ut.cpp:32: int main(): Assertion `candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string word = \"\";\n    for (auto\
    \ ch : s) {\n        if (isspace(ch) || ch == ',') {\n            if (word !=\
    \ \"\") {\n                words.push_back(word);\n                word = \"\"\
    ;\n            }\n        } else {\n            word += ch;\n        }\n    }\n\
    \    if (word != \"\") {\n        words.push_back(word);\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> res;\n  std::istringstream ss(s);\n  std::string item;\n\
    \  while (std::getline(ss, item, ' ')) {\n    if (!item.empty()) {\n      res.push_back(item);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp6v_o6l2v: /tmp/tmp6v_o6l2v.cpp:21: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> v;\n    std::string str;\n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]==' ' || s[i]==','){\n            v.push_back(str);\n        \
    \    str=\"\";\n        }\n        else{\n            str+=s[i];\n        }\n\
    \    }\n    v.push_back(str);\n    return v;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpzc6dala6: /tmp/tmpzc6dala6.cpp:25: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string buffer = \"\";\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',')\
    \ {\n            if (buffer != \"\") {\n                words.push_back(buffer);\n\
    \                buffer = \"\";\n            }\n        } else {\n           \
    \ buffer += s[i];\n        }\n    }\n    if (buffer != \"\") {\n        words.push_back(buffer);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::string temp;\n  for (auto i = 0; i\
    \ < s.size(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      words.push_back(temp);\n\
    \      temp.clear();\n    } else {\n      temp += s[i];\n    }\n  }\n  words.push_back(temp);\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpu0mp_edl: /tmp/tmpu0mp_edl.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> str;\n    std::stringstream ss(s);\n    std::string\
    \ temp;\n    while(getline(ss, temp, ' ')) {\n        str.push_back(temp);\n \
    \   }\n    return str;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmptr_x14w9: /tmp/tmptr_x14w9.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  for (int i = 0; i < s.size(); i++) {\n    std::string\
    \ str = \"\";\n    while (s[i] != ' ' && s[i] != ',' && i < s.size()) {\n    \
    \  str += s[i];\n      i++;\n    }\n    v.push_back(str);\n  }\n  return v;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp3uyloqaq: /tmp/tmp3uyloqaq.cpp:22: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \   std::stringstream ss(s);\n   std::vector<std::string> words;\n   while (ss)\
    \ {\n      std::string word;\n      ss >> word;\n      words.push_back(word);\n\
    \   }\n   return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpj3ot29v6: /tmp/tmpj3ot29v6.cpp:20: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream inputStream{s};\n  std::vector<std::string> result((std::istream_iterator<std::string>(inputStream)),\
    \ std::istream_iterator<std::string>());\n  return result;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpecptsg9_: /tmp/tmpecptsg9_.cpp:15: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::string word = \"\";\n  for (int i\
    \ = 0; i < s.length(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      result.push_back(word);\n\
    \      word = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n  result.push_back(word);\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmps8labcqw: /tmp/tmps8labcqw.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> wv;\n\tstd::string s1=\"\";\n\tfor(int i=0;i<s.length();i++)\n\
    \t{\n\t\tif(s[i]==' '||s[i]==',')\n\t\t{\n\t\t\twv.push_back(s1);\n\t\t\ts1=\"\
    \";\n\t\t}\n\t\telse\n\t\t{\n\t\t\ts1=s1+s[i];\n\t\t}\n\t}\n\twv.push_back(s1);\n\
    \treturn wv;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpgcymonx_: /tmp/tmpgcymonx_.cpp:28: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string token;\n  std::vector<std::string>\
    \ result;\n  while (std::getline(ss, token, ' ')) {\n    result.push_back(token);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpu9t9zez2: /tmp/tmpu9t9zez2.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream iss(s);\n  std::vector<std::string> tokens{std::istream_iterator<std::string>{iss},\n\
    \                                  std::istream_iterator<std::string>{}};\n  return\
    \ tokens;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp6qa4w0vh: /tmp/tmp6qa4w0vh.cpp:16: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::stringstream ss(s);\n  std::string temp;\n\
    \  while(getline(ss, temp, ' ')) {\n    v.push_back(temp);\n  }\n  for(int i =\
    \ 0; i < v.size(); i++) {\n    std::string t = v[i];\n    std::stringstream ts(t);\n\
    \    std::string tt;\n    while(getline(ts, tt, ',')) {\n      v[i] = tt;\n  \
    \  }\n  }\n  return v;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmps0re6_e8: /tmp/tmps0re6_e8.cpp:30: int main(): Assertion `candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> result;\n\tstd::stringstream ss(s);\n\tstd::string\
    \ item;\n\twhile (std::getline(ss, item, ' ')) {\n\t\tresult.push_back(item);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpepyga87t: /tmp/tmpepyga87t.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> vs;\n    std::stringstream ss(s);\n    std::string\
    \ w;\n    while (ss >> w) {\n        vs.push_back(w);\n    }\n    return vs;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpmn4ota50: /tmp/tmpmn4ota50.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream ss(s);\n  std::vector<std::string> words;\n  for (std::string\
    \ w; ss >> w;)\n    words.push_back(w);\n  return words;\n}\nint main() {\n  \
    \  auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp58ixbr1_: /tmp/tmp58ixbr1_.cpp:17: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \t// TODO:\n\t// split the string into words\n\t// return an array of the words\n\
    \tstd::istringstream iss(s);\n\tstd::vector<std::string> tokens;\n\tcopy(std::istream_iterator<std::string>(iss),\n\
    \t\tstd::istream_iterator<std::string>(),\n\t\tstd::back_inserter(tokens));\n\t\
    return tokens;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpfaydgxsi: /tmp/tmpfaydgxsi.cpp:21: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> split;\n  std::stringstream ss(s);\n  std::string\
    \ item;\n  while (std::getline(ss, item, ' '))\n    split.push_back(item);\n \
    \ return split;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpp3esz8s2: /tmp/tmpp3esz8s2.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  int n = s.length();\n  std::vector<std::string> words;\n  std::string word\
    \ = \"\";\n  for (int i = 0; i < n; i++) {\n    if (s[i] == ' ' || s[i] == ',')\
    \ {\n      if (word != \"\")\n        words.push_back(word);\n      word = \"\"\
    ;\n    } else {\n      word += s[i];\n    }\n  }\n  if (word != \"\")\n    words.push_back(word);\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::stringstream ss(s);\n    std::vector<std::string> v;\n    std::string\
    \ word;\n    while(ss >> word)\n        v.push_back(word);\n    return v;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpv1j4dmob: /tmp/tmpv1j4dmob.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::string delimiter = \" ,\";\n  int i = 0;\n\
    \  std::string token;\n  while (i < s.length()) {\n    if (delimiter.find(s[i])\
    \ == std::string::npos) {\n      token += s[i];\n    } else {\n      if (token.length()\
    \ > 0) {\n        v.push_back(token);\n        token = \"\";\n      }\n    }\n\
    \    i++;\n  }\n  if (token.length() > 0) {\n    v.push_back(token);\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \t//assert(s == \"Hi, my name is John\");\n\t//assert(s == \"One, two, three,\
    \ four, five, six\");\n\tstd::vector<std::string> res;\n\tstd::string temp = \"\
    \";\n\tint i = 0;\n\tfor (; i < s.length(); i++) {\n\t\tif (s[i] == ' ' || s[i]\
    \ == ',') {\n\t\t\tres.push_back(temp);\n\t\t\ttemp = \"\";\n\t\t}\n\t\telse {\n\
    \t\t\ttemp += s[i];\n\t\t}\n\t}\n\tres.push_back(temp);\n\treturn res;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpj5u4rdh8: /tmp/tmpj5u4rdh8.cpp:28: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> words;\n\tstd::stringstream ss(s);\n\tstd::string word;\n\
    \twhile (ss >> word)\n\t\twords.push_back(word);\n\treturn words;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp_2b_log9: /tmp/tmp_2b_log9.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::stringstream ss(s);\n  std::string\
    \ item;\n  while (std::getline(ss, item, ' ')) {\n    words.push_back(item);\n\
    \  }\n  return words;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp5qkqnocj: /tmp/tmp5qkqnocj.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> results;\n  std::istringstream iss(s);\n  for (std::string\
    \ s; iss >> s;)\n    results.push_back(s);\n  return results;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpthhri83e: /tmp/tmpthhri83e.cpp:17: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::string buf;\n    std::stringstream\
    \ ss(s);\n    while (ss >> buf) {\n        result.push_back(buf);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpw01wi4ty: /tmp/tmpw01wi4ty.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    int start = 0;\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n          \
    \  result.push_back(s.substr(start, i - start));\n            start = i + 1;\n\
    \        }\n    }\n    result.push_back(s.substr(start, s.size() - start));\n\
    \    return result;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpvsxxdzfh: /tmp/tmpvsxxdzfh.cpp:22: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::istringstream ss(s);\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        result.push_back(item);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpdbpk12r3: /tmp/tmpdbpk12r3.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::string word;\n  for (char c : s) {\n\
    \    if (c == ' ' || c == ',') {\n      if (!word.empty()) words.push_back(word);\n\
    \      word.clear();\n    } else {\n      word += c;\n    }\n  }\n  if (!word.empty())\
    \ words.push_back(word);\n  return words;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> ret;\n    std::stringstream ss(s);\n    while(ss\
    \ >> s) {\n        ret.push_back(s);\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpqg60rzr4: /tmp/tmpqg60rzr4.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> res;\n    std::string temp = \"\";\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n \
    \           if (temp != \"\") {\n                res.push_back(temp);\n      \
    \          temp = \"\";\n            }\n        } else {\n            temp +=\
    \ s[i];\n        }\n    }\n    if (temp != \"\") {\n        res.push_back(temp);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> output;\n    std::string delimiter = \" ,\";\n \
    \   size_t pos = 0;\n    std::string token;\n    while ((pos = s.find(delimiter))\
    \ != std::string::npos) {\n        token = s.substr(0, pos);\n        output.push_back(token);\n\
    \        s.erase(0, pos + delimiter.length());\n    }\n    output.push_back(s);\n\
    \    return output;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp70pbnip5: /tmp/tmp70pbnip5.cpp:23: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // Your code here\n  //std::cout << s;\n  std::vector<std::string> res;\n \
    \ std::string str = \"\";\n  for(int i = 0; i < s.length(); i++) {\n    if(s[i]\
    \ == ' ' || s[i] == ',') {\n      res.push_back(str);\n      str = \"\";\n   \
    \ }\n    else {\n      str = str + s[i];\n    }\n  }\n  res.push_back(str);\n\
    \  return res;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpaq1osxk8: /tmp/tmpaq1osxk8.cpp:27: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    int start = 0;\n    int length = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] ==\
    \ ',') {\n            result.push_back(s.substr(start, length));\n           \
    \ start = i + 1;\n            length = 0;\n        } else {\n            length++;\n\
    \        }\n    }\n    result.push_back(s.substr(start, length));\n    return\
    \ result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp1diau0tr: /tmp/tmp1diau0tr.cpp:26: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::istringstream iss(s);\n  for(std::string\
    \ s; iss >> s; )\n      result.push_back(s);\n  return result;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpu13wek2k: /tmp/tmpu13wek2k.cpp:17: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    return {std::istream_iterator<std::string>(std::istringstream(s) >> std::ws),\n\
    \            std::istream_iterator<std::string>()};\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpj3n11b4l: /tmp/tmpj3n11b4l.cpp:14: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::string word = \"\";\n  for (auto c\
    \ : s) {\n    if (c == ' ' || c == ',') {\n      words.push_back(word);\n    \
    \  word = \"\";\n    } else {\n      word += c;\n    }\n  }\n  words.push_back(word);\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpjfch0wxr: /tmp/tmpjfch0wxr.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string temp;\n  std::vector<std::string> ans;\n\
    \  while(std::getline(ss, temp, ' ')) {\n    ans.push_back(temp);\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpcu0czkhm: /tmp/tmpcu0czkhm.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::stringstream ss(s);\n  while(ss.good())\
    \ {\n    std::string temp;\n    getline(ss, temp, ' ');\n    v.push_back(temp);\n\
    \  }\n  return v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpxgow0h7c: /tmp/tmpxgow0h7c.cpp:20: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> a;\n  std::istringstream iss(s);\n  std::string word;\n\
    \  while (iss >> word) {\n    a.push_back(word);\n  }\n  return a;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp9mb3qfku: /tmp/tmp9mb3qfku.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // your code here\n  std::vector<std::string> res;\n  std::string temp = \"\
    \";\n  for(int i = 0; i < s.length(); i++){\n    if(s[i] == ' '){\n      if(temp\
    \ != \"\"){\n        res.push_back(temp);\n        temp = \"\";\n      }\n   \
    \ }\n    else if(s[i] == ','){\n      if(temp != \"\"){\n        res.push_back(temp);\n\
    \        temp = \"\";\n      }\n    }\n    else{\n      temp += s[i];\n    }\n\
    \  }\n  if(temp != \"\")\n    res.push_back(temp);\n  return res;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  //call .empty() on s to see if it is empty.\n  if (s.empty()) {\n    //return\
    \ an empty vector\n    return {};\n  }\n  //declare a vector of strings\n  std::vector<std::string>\
    \ ret;\n  //declare a stringstream\n  std::stringstream ss(s);\n  //declare a\
    \ string\n  std::string w;\n  //while ss has a word:\n  while (ss >> w) {\n  \
    \  //push w into ret\n    ret.push_back(w);\n  }\n  //return ret\n  return ret;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpzwfy7psn: /tmp/tmpzwfy7psn.cpp:30: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::istringstream iss(s);\n    do\n\
    \    {\n        std::string word;\n        iss >> word;\n        result.push_back(word);\n\
    \    } while (iss);\n    return result;\n}\nint main() {\n    auto candidate =\
    \ words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp4fte3a27: /tmp/tmp4fte3a27.cpp:21: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> answer;\n    int start = 0;\n    bool in_word =\
    \ false;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ' ||\
    \ s[i] == ',') {\n            if (in_word) {\n                in_word = false;\n\
    \                answer.push_back(s.substr(start, i - start));\n            }\n\
    \        } else {\n            if (!in_word) {\n                in_word = true;\n\
    \                start = i;\n            }\n        }\n    }\n    if (in_word)\
    \ {\n        answer.push_back(s.substr(start, s.size() - start));\n    }\n   \
    \ return answer;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> data;\n    std::string temp;\n    for(auto i : s)\
    \ {\n        if(i == ' ' || i == ',') {\n            data.push_back(temp);\n \
    \           temp.clear();\n        } else {\n            temp += i;\n        }\n\
    \    }\n    data.push_back(temp);\n    return data;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp0gacix16: /tmp/tmp0gacix16.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string word;\n    int i = 0;\n\
    \    while (i < s.length()) {\n        while (i < s.length() && (s[i] == ' ' ||\
    \ s[i] == ',')) {\n            i++;\n        }\n        word = \"\";\n       \
    \ while (i < s.length() && s[i] != ' ' && s[i] != ',') {\n            word +=\
    \ s[i];\n            i++;\n        }\n        if (word != \"\") {\n          \
    \  words.push_back(word);\n        }\n    }\n    return words;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string>v;\n  std::string str;\n  std::stringstream ss(s);\n\
    \  while(ss >> str)\n  {\n    v.push_back(str);\n  }\n  return v;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpso9g4_9l: /tmp/tmpso9g4_9l.cpp:20: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string word;\n  std::vector<std::string> res;\n\
    \  while (ss >> word) {\n    res.push_back(word);\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp3yn8b5qz: /tmp/tmp3yn8b5qz.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream iss(s);\n    std::vector<std::string> words;\n    std::copy(std::istream_iterator<std::string>(iss),\n\
    \    std::istream_iterator<std::string>(),\n    std::back_inserter(words));\n\
    \    return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp58di5uv5: /tmp/tmp58di5uv5.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string buf;\n  std::stringstream ss(s);\n  std::vector<std::string> tokens;\n\
    \  while (ss >> buf)\n    tokens.push_back(buf);\n  return tokens;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpa3ncqvbq: /tmp/tmpa3ncqvbq.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    if (s == \"\") {\n        return {};\n    }\n\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (char c : s) {\n        if (c\
    \ == ' ' || c == ',') {\n            if (word != \"\") {\n                words.push_back(word);\n\
    \                word = \"\";\n            }\n        } else {\n            word\
    \ += c;\n        }\n    }\n    if (word != \"\") {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::stringstream ss(s);\n    std::vector<std::string> elems;\n    std::string\
    \ item;\n    while (std::getline(ss, item, ' ')) {\n        elems.push_back(item);\n\
    \    }\n    return elems;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpbcjgdmkq: /tmp/tmpbcjgdmkq.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string buff{\"\"};\n    for (char\
    \ c : s) {\n        if (c == ' ' || c == ',') {\n            if (buff != \"\"\
    ) {\n                words.push_back(buff);\n                buff = \"\";\n  \
    \          }\n        } else {\n            buff += c;\n        }\n    }\n   \
    \ if (buff != \"\") {\n        words.push_back(buff);\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> ret;\n    std::istringstream ss(s);\n    std::string\
    \ token;\n    while(getline(ss, token, ' ')) {\n        ret.push_back(token);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp13l_fc9c: /tmp/tmp13l_fc9c.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> res;\n  std::stringstream ss(s);\n  while(ss.good())\
    \ {\n    std::string substr;\n    getline(ss, substr, ' ');\n    res.push_back(substr);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpmf8wu9ym: /tmp/tmpmf8wu9ym.cpp:20: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream iss(s);\n  std::vector<std::string> words{std::istream_iterator<std::string>{iss},\n\
    \                                 std::istream_iterator<std::string>{}};\n  return\
    \ words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpoukhbz0x: /tmp/tmpoukhbz0x.cpp:16: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::stringstream ss(s);\n    std::string\
    \ word;\n    while (ss >> word)\n        words.push_back(word);\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp36vdbh9w: /tmp/tmp36vdbh9w.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::string temp;\n  for (auto c : s) {\n\
    \    if (c == ' ' || c == ',') {\n      result.push_back(temp);\n      temp.clear();\n\
    \    } else {\n      temp += c;\n    }\n  }\n  if (!temp.empty()) {\n    result.push_back(temp);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp1l0_fujh: /tmp/tmp1l0_fujh.cpp:26: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  int i,j;\n  std::vector<std::string> a;\n  std::string b=\"\";\n  for(i=0;i<s.length();i++)\n\
    \  {\n    if(s[i]==' ' || s[i]==',')\n    {\n      if(b!=\"\")\n      {\n    \
    \    a.push_back(b);\n        b=\"\";\n      }\n    }\n    else\n    {\n     \
    \ b+=s[i];\n    }\n  }\n  if(b!=\"\")\n  {\n    a.push_back(b);\n  }\n  return\
    \ a;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // if (s.size() < 1) {\n    //     std::vector<std::string> v;\n    //  \
    \   return v;\n    // }\n    // if (s.size() == 1) {\n    //     std::vector<std::string>\
    \ v;\n    //     v.push_back(s);\n    //     return v;\n    // }\n    // std::vector<std::string>\
    \ v;\n    // std::string temp;\n    // std::istringstream iss(s);\n    // while\
    \ (std::getline(iss, temp, ' ')) {\n    //     v.push_back(temp);\n    // }\n\
    \    // return v;\n    return {s};\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp10zqovcu: /tmp/tmp10zqovcu.cpp:29: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  auto i = s.find(\" \");\n  while (i != std::string::npos)\
    \ {\n    v.push_back(s.substr(0, i));\n    s = s.substr(i + 1);\n    i = s.find(\"\
    \ \");\n  }\n  v.push_back(s);\n  return v;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpmgclht4v: /tmp/tmpmgclht4v.cpp:21: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> ret;\n    int prev_idx = 0;\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n          \
    \  ret.push_back(s.substr(prev_idx, i - prev_idx));\n            prev_idx = i\
    \ + 1;\n        }\n    }\n    ret.push_back(s.substr(prev_idx, s.size() - prev_idx));\n\
    \    return ret;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpo9c7xkbo: /tmp/tmpo9c7xkbo.cpp:22: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::string word = \"\";\n  for (char c : s)\
    \ {\n    if (c == ' ' || c == ',') {\n      v.push_back(word);\n      word = \"\
    \";\n    } else {\n      word += c;\n    }\n  }\n  v.push_back(word);\n  return\
    \ v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpsv1qhxpk: /tmp/tmpsv1qhxpk.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::string word;\n  std::stringstream word_stream(s);\n\
    \  while (getline(word_stream, word, ' ')) {\n    words.push_back(word);\n  }\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpk68s1mwz: /tmp/tmpk68s1mwz.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::string word;\n    std::vector<std::string> result;\n    std::stringstream\
    \ ss(s);\n    while (ss >> word) {\n        result.push_back(word);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpzbbvqbn9: /tmp/tmpzbbvqbn9.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::string word;\n  int i;\n  for (i =\
    \ 0; i < s.size(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      words.push_back(word);\n\
    \      word = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n  words.push_back(word);\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp3i38ax0d: /tmp/tmp3i38ax0d.cpp:25: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // TODO: implement the function here\n    std::vector<std::string> v;\n \
    \   std::string word = \"\";\n    for(int i = 0; i < s.length(); i++){\n     \
    \   if(s[i] == ' ' || s[i] == ','){\n            v.push_back(word);\n        \
    \    word = \"\";\n        }\n        else{\n            word += s[i];\n     \
    \   }\n    }\n    v.push_back(word);\n    return v;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpc3gtjmvy: /tmp/tmpc3gtjmvy.cpp:26: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::stringstream ss(s);\n  std::string\
    \ word;\n  while (ss >> word) {\n    words.push_back(word);\n  }\n  return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp12t2lh8m: /tmp/tmp12t2lh8m.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    int count = 0;\n    for (auto i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ == ' ') {\n            count++;\n        }\n    }\n    std::vector<std::string>\
    \ v(count + 1);\n    int j = 0;\n    for (auto i = 0; i < s.size(); i++) {\n \
    \       if (s[i] == ' ') {\n            j++;\n        } else {\n            v[j]\
    \ += s[i];\n        }\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpysqx9kwc: /tmp/tmpysqx9kwc.cpp:28: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> arr;\n    std::string ss;\n    std::istringstream\
    \ l(s);\n    while(std::getline(l, ss, ' ')) {\n        arr.push_back(ss);\n \
    \   }\n    return arr;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp2roewhne: /tmp/tmp2roewhne.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  auto begin = s.begin();\n  while (begin != s.end())\
    \ {\n    begin = std::find_if_not(begin, s.end(), ::isspace);\n    auto end =\
    \ std::find_if(begin, s.end(), ::isspace);\n    if (begin != s.end()) {\n    \
    \  v.push_back(std::string(begin, end));\n    }\n    begin = end;\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpprc0lsj0: /tmp/tmpprc0lsj0.cpp:23: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::string delim = \" ,\\n\";\n    std::vector<std::string> result;\n  \
    \  size_t current;\n    size_t next = -1;\n    do {\n        current = next +\
    \ 1;\n        next = s.find_first_of(delim, current);\n        result.push_back(s.substr(current,\
    \ next - current));\n    } while (next != std::string::npos);\n    return result;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpeyxn1wtr: /tmp/tmpeyxn1wtr.cpp:22: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    stringstream ss(s);\n    string word;\n    vector<string> words;\n    while(getline(ss,\
    \ word, ' ')) {\n        words.push_back(word);\n    }\n    return words;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq7w1n0hk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > words_string(std::string)\u2019:\n/tmp/tmpq7w1n0hk.cpp:9:5: error: \u2018\
    stringstream\u2019 was not declared in this scope; did you mean \u2018std::stringstream\u2019\
    ?\n    9 |     stringstream ss(s);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpq7w1n0hk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringstream;\n      |                                     ^~~~~~~~~~~~\n/tmp/tmpq7w1n0hk.cpp:10:5:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   10 |     string word;\n      |     ^~~~~~\n      |    \
    \ std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpq7w1n0hk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::s"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> str;\n  std::stringstream ss(s);\n  std::string temp;\n\
    \  while(std::getline(ss, temp, ' ')) {\n    str.push_back(temp);\n  }\n  return\
    \ str;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp3naibu2c: /tmp/tmp3naibu2c.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    int n = s.length();\n    std::vector<std::string> v;\n    std::string tmp;\n\
    \    for(int i = 0; i < n; i++) {\n        if(s[i] == ' ' || s[i] == ',') {\n\
    \            v.push_back(tmp);\n            tmp = \"\";\n        }\n        else\n\
    \            tmp += s[i];\n    }\n    if(tmp != \"\")\n        v.push_back(tmp);\n\
    \    return v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpeu24b2kg: /tmp/tmpeu24b2kg.cpp:26: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::istringstream iss(s);\n\tstd::vector<std::string> words{ std::istream_iterator<std::string>{iss},\
    \ std::istream_iterator<std::string>{} };\n\treturn words;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpd0ef7038: /tmp/tmpd0ef7038.cpp:15: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::string t;\n  std::stringstream ss(s);\n\
    \  while(std::getline(ss, t, ' ')) {\n    v.push_back(t);\n  }\n  return v;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmps6f5pys5: /tmp/tmps6f5pys5.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // remove all the spaces\n    s.erase(std::remove(s.begin(), s.end(), ' '),\
    \ s.end());\n    std::vector<std::string> words;\n    // split the string by comma\
    \ and push all the words into the vector\n    for (auto &word : std::vector<std::string>(std::istream_iterator<std::string>(std::istringstream(s)\
    \ >> std::ws), std::istream_iterator<std::string>())) {\n        words.push_back(word);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpygf5tihe: /tmp/tmpygf5tihe.cpp:20: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream stream(s);\n    std::string word;\n    std::vector<std::string>\
    \ words;\n    while (stream >> word) {\n        words.push_back(word);\n    }\n\
    \    return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpnlk32370: /tmp/tmpnlk32370.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> v;\n    std::string temp=\"\";\n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]==' '||s[i]==','){\n            v.push_back(temp);\n         \
    \   temp=\"\";\n        }\n        else\n            temp+=s[i];\n    }\n    v.push_back(temp);\n\
    \    return v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp2lppvbuh: /tmp/tmp2lppvbuh.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string delimiter = \" \";\n  size_t pos = 0;\n  std::string token;\n \
    \ std::vector<std::string> strings;\n  while ((pos = s.find(delimiter)) != std::string::npos)\
    \ {\n    token = s.substr(0, pos);\n    strings.push_back(token);\n    s.erase(0,\
    \ pos + delimiter.length());\n  }\n  strings.push_back(s);\n  return strings;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpo0f834f5: /tmp/tmpo0f834f5.cpp:23: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> vec;\n  std::stringstream ss(s);\n  std::string aux;\n\
    \  while(std::getline(ss, aux, ' '))\n    vec.push_back(aux);\n  return vec;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpmn_ixoj4: /tmp/tmpmn_ixoj4.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::stringstream ss(s);\n    for (std::string\
    \ word; ss >> word;) {\n        result.push_back(word);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpscldxnf8: /tmp/tmpscldxnf8.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::string word = \"\";\n    std::vector<std::string> words;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n \
    \           words.push_back(word);\n            word = \"\";\n        } else {\n\
    \            word += s[i];\n        }\n    }\n    words.push_back(word);\n   \
    \ return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp743x05yz: /tmp/tmp743x05yz.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream i(s);\n  std::string w;\n  std::vector<std::string> v;\n\
    \  while (getline(i, w, ' ')) {\n    v.push_back(w);\n  }\n  return v;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpt51t3gzn: /tmp/tmpt51t3gzn.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream iss(s);\n  std::vector<std::string> v{ std::istream_iterator<std::string>{iss},\n\
    \                              std::istream_iterator<std::string>{} };\n  return\
    \ v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpppxh7a0t: /tmp/tmpppxh7a0t.cpp:16: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::string sub_str;\n    for (char\
    \ c : s) {\n        if (c == ' ' || c == ',') {\n            result.push_back(sub_str);\n\
    \            sub_str = \"\";\n        } else {\n            sub_str += c;\n  \
    \      }\n    }\n    result.push_back(sub_str);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmplscr7548: /tmp/tmplscr7548.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::string temp=\"\";\n  for(auto x:s){\n\
    \    if(x==' '||x==','){\n      result.push_back(temp);\n      temp=\"\";\n  \
    \  }\n    else{\n      temp+=x;\n    }\n  }\n  result.push_back(temp);\n  return\
    \ result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp8oq6jmzc: /tmp/tmp8oq6jmzc.cpp:25: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::string delimiter = \",\";\n  size_t pos\
    \ = 0;\n  std::string token;\n  while ((pos = s.find(delimiter)) != std::string::npos)\
    \ {\n    token = s.substr(0, pos);\n    v.push_back(token);\n    s.erase(0, pos\
    \ + delimiter.length());\n  }\n  v.push_back(s);\n  return v;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpmkuhrvi_: /tmp/tmpmkuhrvi_.cpp:23: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    // Split the string into words, return the result as an array of strings\n\
    \    std::string word;\n    std::vector<std::string> result;\n    std::stringstream\
    \ stream(s);\n    while (stream >> word) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpo9a50wlj: /tmp/tmpo9a50wlj.cpp:20: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string result=\"\";\n  std::vector<std::string> v;\n  std::stringstream\
    \ ss(s);\n  while(ss.good()){\n    getline(ss,result,',');\n    if(result!=\"\"\
    )\n      v.push_back(result);\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpxqysczm0: /tmp/tmpxqysczm0.cpp:21: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::string tmp;\n    std::vector<std::string> res;\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n          \
    \  res.push_back(tmp);\n            tmp.clear();\n        } else tmp += s[i];\n\
    \    }\n    res.push_back(tmp);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp72x6332e: /tmp/tmp72x6332e.cpp:22: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \treturn {};\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpxtr93tc_: /tmp/tmpxtr93tc_.cpp:13: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream ss{s};\n    std::vector<std::string> words;\n    std::string\
    \ w;\n    while (ss >> w)\n        words.push_back(w);\n    return words;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp7ujs5f0k: /tmp/tmp7ujs5f0k.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::string str;\n  std::stringstream ss(s);\n\
    \  while (getline(ss, str, ' ')) {\n    words.push_back(str);\n  }\n  return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpuhhcxhnz: /tmp/tmpuhhcxhnz.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream is(s);\n    std::vector<std::string> words;\n    std::string\
    \ word;\n    while (is >> word) {\n        words.push_back(word);\n    }\n   \
    \ return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpgvr1ae0v: /tmp/tmpgvr1ae0v.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> v;\n    std::string s1 = \"\";\n    for(int i =\
    \ 0; i < s.length(); i++) {\n        if(s[i] == ' ' || s[i] == ',') {\n      \
    \      v.push_back(s1);\n            s1 = \"\";\n        }\n        else {\n \
    \           s1 += s[i];\n        }\n    }\n    v.push_back(s1);\n    return v;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpkj2tvtdt: /tmp/tmpkj2tvtdt.cpp:25: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::vector<std::string> words;\n  std::string\
    \ word;\n  while (ss >> word) {\n    words.push_back(word);\n  }\n  return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpjayf2cuc: /tmp/tmpjayf2cuc.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::string tmp;\n  for (int i = 0; i <\
    \ s.size(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (tmp.size()\
    \ > 0) {\n        words.push_back(tmp);\n        tmp.clear();\n      }\n    }\
    \ else {\n      tmp += s[i];\n    }\n  }\n  if (tmp.size() > 0) words.push_back(tmp);\n\
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::string word;\n    std::vector<std::string> words;\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else if (s[i] == ',') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += s[i];\n     \
    \   }\n    }\n    words.push_back(word);\n    return words;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpdj5sibh8: /tmp/tmpdj5sibh8.cpp:27: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> w;\n    std::stringstream iss(s);\n    std::string\
    \ item;\n    while (std::getline(iss, item, ' ')) {\n        w.push_back(item);\n\
    \    }\n    return w;\n}\nint main() {\n    auto candidate = words_string;\n \
    \   assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmps5oeopmt: /tmp/tmps5oeopmt.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> v;\n    std::string aux = \"\";\n    for(char c\
    \ : s) {\n        if(c == ' ' || c == ',') {\n            v.push_back(aux);\n\
    \            aux = \"\";\n        } else {\n            aux += c;\n        }\n\
    \    }\n    if(aux != \"\") v.push_back(aux);\n    return v;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpw9t1hoho: /tmp/tmpw9t1hoho.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::vector<std::string> v;\n  std::string w;\n\
    \  while (getline(ss, w, ' ')) {\n    v.push_back(w);\n  }\n  return v;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp7coenvsz: /tmp/tmp7coenvsz.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> v;\n\tstd::string word;\n\tint count = 0;\n\tfor (int\
    \ i = 0; i < s.length(); i++) {\n\t\tif (s[i] == ' ' || s[i] == ',') {\n\t\t\t\
    if (count != 0) {\n\t\t\t\tv.push_back(word);\n\t\t\t\tword = \"\";\n\t\t\t\t\
    count = 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tword = word + s[i];\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\tif (count != 0) {\n\t\tv.push_back(word);\n\t}\n\treturn v;\n}\n\
    int main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi,\
    \ my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string temp;\n    std::stringstream\
    \ ss(s);\n    while(getline(ss, temp, ' ')) {\n        words.push_back(temp);\n\
    \    }\n    return words;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpdh0whcut: /tmp/tmpdh0whcut.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string word;\n  std::vector<std::string> result;\n\
    \  while (ss >> word) {\n    result.push_back(word);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp_2tue5y1: /tmp/tmp_2tue5y1.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> vec;\n  std::stringstream ss(s);\n  std::string str;\n\
    \  while(std::getline(ss, str, ' '))\n    vec.push_back(str);\n  return vec;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpqbdxg987: /tmp/tmpqbdxg987.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> v;\n    std::string word = \"\";\n    for (auto\
    \ &c : s) {\n        if (c == ' ' || c == ',') {\n            v.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += c;\n        }\n\
    \    }\n    if (word != \"\") {\n        v.push_back(word);\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpnvu1vh23: /tmp/tmpnvu1vh23.cpp:26: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  // throws \"string::find_first_not_of\"\n  // http://www.cplusplus.com/reference/string/string/find_first_not_of/\n\
    \  std::vector<std::string> words;\n  size_t pos = 0;\n  while (pos < s.size())\
    \ {\n    size_t word_end = s.find_first_of(\", \", pos);\n    if (word_end ==\
    \ std::string::npos) {\n      word_end = s.size();\n    }\n    words.push_back(s.substr(pos,\
    \ word_end - pos));\n    pos = s.find_first_not_of(\", \", word_end);\n  }\n \
    \ return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> answer;\n    std::string word = \"\";\n    for (char\
    \ c : s) {\n        if (c == ' ' || c == ',') {\n            answer.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += c;\n        }\n\
    \    }\n    if (word != \"\") {\n        answer.push_back(word);\n    }\n    return\
    \ answer;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp1x3qhpvs: /tmp/tmp1x3qhpvs.cpp:26: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    int len = s.length();\n    std::vector<std::string> res;\n    for(int i =\
    \ 0; i < len; i++) {\n        if(s[i] == ' ') {\n            continue;\n     \
    \   }\n        std::string temp = \"\";\n        while(i < len && s[i] != ' '\
    \ && s[i] != ',') {\n            temp += s[i];\n            i++;\n        }\n\
    \        res.push_back(temp);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) ==\
    \ (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp9yqclfxp: /tmp/tmp9yqclfxp.cpp:29: int main(): Assertion `candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  vector<string> res;\n  stringstream ss(s);\n  while(ss.good()) {\n    string\
    \ substr;\n    getline(ss, substr, ' ');\n    res.push_back(substr);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnxadwuhx.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > words_string(std::string)\u2019:\n/tmp/tmpnxadwuhx.cpp:9:3: error: \u2018\
    vector\u2019 was not declared in this scope; did you mean \u2018std::vector\u2019\
    ?\n    9 |   vector<string> res;\n      |   ^~~~~~\n      |   std::vector\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpnxadwuhx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpnxadwuhx.cpp:9:10:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n    9 |   vector<string> res;\n      |          ^~~~~~\n \
    \     |          std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnxadwuhx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared here\n   79 |   typedef basic_string<char>\
    \    string;\n      |                                 ^~~~~~\n/tmp/tmpnxadwuhx.cpp:9:18:\
    \ error: \u2018res\u2019 was not declared in this scope\n    9 |   vector<string>\
    \ res;\n      |                  ^~~\n/tmp/tmpnxadwuhx.cpp:10:3: error: \u2018\
    stringstream\u2019 "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> words;\n  std::istringstream ss(s);\n  std::string\
    \ line;\n  while (std::getline(ss, line, ' ')) {\n    if (!line.empty())\n   \
    \   words.push_back(line);\n  }\n  return words;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpur95cqe1: /tmp/tmpur95cqe1.cpp:20: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> v;\n\tstd::string temp;\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tif (s[i] == ' ' || s[i] == ',') {\n\t\t\tv.push_back(temp);\n\t\t\
    \ttemp = \"\";\n\t\t}\n\t\telse {\n\t\t\ttemp = temp + s[i];\n\t\t}\n\t}\n\tv.push_back(temp);\n\
    \treturn v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp2hb98rzu: /tmp/tmp2hb98rzu.cpp:25: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    stringstream str(s);\n    std::vector<std::string> words;\n    string word;\n\
    \    while(str >> word) {\n        words.push_back(word);\n    }\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnrhrucq6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > words_string(std::string)\u2019:\n/tmp/tmpnrhrucq6.cpp:9:5: error: \u2018\
    stringstream\u2019 was not declared in this scope; did you mean \u2018std::stringstream\u2019\
    ?\n    9 |     stringstream str(s);\n      |     ^~~~~~~~~~~~\n      |     std::stringstream\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnrhrucq6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringstream;\n      |                                     ^~~~~~~~~~~~\n/tmp/tmpnrhrucq6.cpp:11:5:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   11 |     string word;\n      |     ^~~~~~\n      |    \
    \ std::string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnrhrucq6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::string word;\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      v.push_back(word);\n  \
    \    word = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n  v.push_back(word);\n\
    \  return v;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpv_2vmz7d: /tmp/tmpv_2vmz7d.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::string word;\n    std::stringstream\
    \ ss(s);\n    while (ss >> word) {\n        words.push_back(word);\n    }\n  \
    \  return words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpiv07szuy: /tmp/tmpiv07szuy.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::string buf = \"\";\n  for (int i =\
    \ 0; i < s.length(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (buf\
    \ != \"\") {\n        result.push_back(buf);\n        buf = \"\";\n      }\n \
    \   } else {\n      buf += s[i];\n    }\n  }\n  if (buf != \"\") result.push_back(buf);\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::string word;\n  std::vector<std::string> result;\n  std::stringstream\
    \ is(s);\n  while (getline(is, word, ' ')) {\n    result.push_back(word);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmph3546fmr: /tmp/tmph3546fmr.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::stringstream check1(s);\n    std::string\
    \ intermediate;\n    while(getline(check1, intermediate, ' ')) {\n        std::stringstream\
    \ check2(intermediate);\n        std::string word;\n        while(getline(check2,\
    \ word, ',')) {\n            words.push_back(word);\n        }\n    }\n    return\
    \ words;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpjls_g8ze: /tmp/tmpjls_g8ze.cpp:26: int main(): Assertion `candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> results;\n    std::stringstream ss(s);\n    for\
    \ (std::string token; std::getline(ss, token, ' '); ) {\n        results.push_back(token);\n\
    \    }\n    return results;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp0q6f3nqj: /tmp/tmp0q6f3nqj.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string word;\n  std::vector<std::string> result;\n\
    \  while (std::getline(ss, word, ' ')) {\n    result.push_back(word);\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpqjn8diod: /tmp/tmpqjn8diod.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::stringstream ss(s);\n  std::string str;\n  std::vector<std::string> result;\n\
    \  while (getline(ss, str, ' ')) {\n    result.push_back(str);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpkm_h8wbc: /tmp/tmpkm_h8wbc.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  return  std::vector<std::string>();\n}\nint main() {\n    auto candidate =\
    \ words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpwj6fqm3w: /tmp/tmpwj6fqm3w.cpp:13: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::stringstream ss(s);\n  std::string\
    \ temp;\n  while (std::getline(ss, temp, ' '))\n    result.push_back(temp);\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp8khbipy1: /tmp/tmp8khbipy1.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::stringstream ss(s);\n\tstd::string word;\n\tstd::vector<std::string> res;\n\
    \twhile (std::getline(ss, word, ' '))\n\t\tres.push_back(word);\n\treturn res;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpq9bh_q8y: /tmp/tmpq9bh_q8y.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> result;\n\tstd::stringstream ss(s);\n\tstd::string\
    \ tmp;\n\twhile (ss >> tmp) {\n\t\tresult.push_back(tmp);\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp0syzi74i: /tmp/tmp0syzi74i.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> result;\n    std::istringstream iss(s);\n    std::string\
    \ token;\n    while (std::getline(iss, token, ' ')) {\n        if (!token.empty())\n\
    \            result.push_back(token);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpjjegt7uc: /tmp/tmpjjegt7uc.cpp:20: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::stringstream ss(s);\n  std::string x;\n\
    \  while(getline(ss, x, ' ')) {\n    v.push_back(x);\n  }\n  return v;\n}\nint\
    \ main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my\
    \ name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\"\
    )) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpf6nr4m4u: /tmp/tmpf6nr4m4u.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    return std::vector<std::string>();\n}\nint main() {\n    auto candidate =\
    \ words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpjdq8q0dh: /tmp/tmpjdq8q0dh.cpp:13: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  //your code here\n  return std::vector<std::string>();\n}\nint main() {\n \
    \   auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpbborlvcj: /tmp/tmpbborlvcj.cpp:14: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::string temp = \"\";\n  for (int i\
    \ = 0; i < s.length(); i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      result.push_back(temp);\n\
    \      temp = \"\";\n    } else {\n      temp += s[i];\n    }\n  }\n  result.push_back(temp);\n\
    \  return result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpfu34vbls: /tmp/tmpfu34vbls.cpp:24: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::istringstream iss(s);\n  std::vector<std::string> result;\n  std::copy(std::istream_iterator<std::string>(iss),\
    \ std::istream_iterator<std::string>(), std::back_inserter(result));\n  return\
    \ result;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpyrivl3lu: /tmp/tmpyrivl3lu.cpp:16: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> v;\n  std::stringstream ss(s);\n  std::string temp;\n\
    \  while(getline(ss, temp, ' ')) {\n    v.push_back(temp);\n  }\n  return v;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp892gd21t: /tmp/tmp892gd21t.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::stringstream ss(s);\n  std::string\
    \ token;\n  while (getline(ss, token, ' ')) {\n    result.push_back(token);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpcsjcui_x: /tmp/tmpcsjcui_x.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> arr;\n\tstd::stringstream ss(s);\n\tstd::string word;\n\
    \twhile (ss >> word) {\n\t\tarr.push_back(word);\n\t}\n\treturn arr;\n}\nint main()\
    \ {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is\
    \ John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp8zdb1ueg: /tmp/tmp8zdb1ueg.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> res;\n    std::stringstream ss(s);\n    while(ss.good())\
    \ {\n        std::string word;\n        getline(ss, word, ' ');\n        res.push_back(word);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp6u8cs9_0: /tmp/tmp6u8cs9_0.cpp:20: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstringstream ss(s);\n\tstring word;\n\tvector<string> words;\n\twhile (getline(ss,\
    \ word, ' '))\n\t\twords.push_back(word);\n\treturn words;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8268mp0p.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > words_string(std::string)\u2019:\n/tmp/tmp8268mp0p.cpp:9:2: error: \u2018\
    stringstream\u2019 was not declared in this scope; did you mean \u2018std::stringstream\u2019\
    ?\n    9 |  stringstream ss(s);\n      |  ^~~~~~~~~~~~\n      |  std::stringstream\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8268mp0p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:156:37:\
    \ note: \u2018std::stringstream\u2019 declared here\n  156 |   typedef basic_stringstream<char>\
    \  stringstream;\n      |                                     ^~~~~~~~~~~~\n/tmp/tmp8268mp0p.cpp:10:2:\
    \ error: \u2018string\u2019 was not declared in this scope; did you mean \u2018\
    std::string\u2019?\n   10 |  string word;\n      |  ^~~~~~\n      |  std::string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iosfwd:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8268mp0p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stringfwd.h:79:33:\
    \ note: \u2018std::string\u2019 declared he"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::istringstream st(s);\n    std::vector<std::string> w;\n    std::string\
    \ word;\n    while (getline(st, word, ' ')) {\n        w.push_back(word);\n  \
    \  }\n    return w;\n}\nint main() {\n    auto candidate = words_string;\n   \
    \ assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpgjg4olif: /tmp/tmpgjg4olif.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> words;\n    std::stringstream iss(s);\n    std::string\
    \ word;\n    while (iss >> word)\n        words.push_back(word);\n    return words;\n\
    }\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpdt2wmoe6: /tmp/tmpdt2wmoe6.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  std::vector<std::string> result;\n  std::stringstream ss(s);\n  std::string\
    \ item;\n  while (std::getline(ss, item, ' ')) {\n    result.push_back(item);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp36w029ft: /tmp/tmp36w029ft.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \    std::vector<std::string> ret;\n    std::string token;\n    std::istringstream\
    \ tokenStream(s);\n    while (std::getline(tokenStream, token, ' ')) {\n     \
    \   ret.push_back(token);\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmppn2aghmy: /tmp/tmppn2aghmy.cpp:19: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::stringstream ss(s);\n\tstd::string tmp;\n\tstd::vector<std::string> res;\n\
    \twhile (ss >> tmp)\n\t\tres.push_back(tmp);\n\treturn res;\n}\nint main() {\n\
    \    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\", \"is\", \"John\"})));\n\
    \    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    Hi, my name\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n\
    \    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpb9vtaum8: /tmp/tmpb9vtaum8.cpp:18: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \tstd::vector<std::string> arr;\n\tint start = 0;\n\tint end = 0;\n\tint size\
    \ = s.size();\n\tfor (int i = 0; i < size; i++) {\n\t\tif (s[i] == ' ') {\n\t\t\
    \tend = i;\n\t\t\tstd::string word = s.substr(start, end - start);\n\t\t\tarr.push_back(word);\n\
    \t\t\tstart = i + 1;\n\t\t}\n\t\tif (s[i] == ',') {\n\t\t\tend = i;\n\t\t\tstd::string\
    \ word = s.substr(start, end - start);\n\t\t\tarr.push_back(word);\n\t\t\tstart\
    \ = i + 1;\n\t\t}\n\t}\n\tif (end < size) {\n\t\tend = size;\n\t\tstd::string\
    \ word = s.substr(start, end - start);\n\t\tarr.push_back(word);\n\t}\n\treturn\
    \ arr;\n}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"})));\n    assert(candidate((\"One, two, three, four, five,\
    \ six\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\"})));\n    assert(candidate((\"One,, two, three, four, five,\
    \ six,\")) == (std::vector<std::string>({\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({\"\
    ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmp34s2tetp: /tmp/tmp34s2tetp.cpp:36: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \   std::vector<std::string> result;\n   std::stringstream ss(s);\n   std::string\
    \ item;\n   while (std::getline(ss, item, ' '))\n   {\n       result.push_back(item);\n\
    \   }\n   return result;\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpjr6fdzxc: /tmp/tmpjr6fdzxc.cpp:20: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
    \ of words separated by commas or spaces. Your task is\n// to split the string\
    \ into words and return an array of the words.\n// For example:\n// words_string(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nstd::vector<std::string> words_string(std::string s) {\n\
    \  return std::vector<std::string>();\n}\nint main() {\n    auto candidate = words_string;\n\
    \    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"})));\n    assert(candidate((\"One, two,\
    \ three, four, five, six\")) == (std::vector<std::string>({\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"Hi, my name\"\
    )) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"})));\n    assert(candidate((\"\
    One,, two, three, four, five, six,\")) == (std::vector<std::string>({\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"})));\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\"\
    )) == (std::vector<std::string>({\"ahmed\", \"gamal\"})));\n}\n"
  stdout: ''
  stderr: "tmpg4bjoysi: /tmp/tmpg4bjoysi.cpp:13: int main(): Assertion `candidate((\"\
    Hi, my name is John\")) == (std::vector<std::string>({\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"}))' failed.\n"
  exit_code: -6
  status: Exception
