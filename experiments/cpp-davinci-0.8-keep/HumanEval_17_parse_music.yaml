name: HumanEval_17_parse_music
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string representing musical notes in a special ASCII format.\n// Your task is\
  \ to parse this string and return list of integers corresponding to how many beats\
  \ does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four\
  \ beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one\
  \ beat\n// >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2,\
  \ 1, 1, 1, 1, 4, 4]\nstd::vector<long> parse_music(std::string music_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
  \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({4,\
  \ 4, 4, 4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({1,\
  \ 1, 1, 1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({2,\
  \ 2, 1, 1, 4, 4, 4, 4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
  \ (std::vector<long>({2, 1, 2, 1, 4, 2, 4, 2})));\n}\n"
completions: ["    std::vector<long> result;\n    long sum = 0;\n    char prev = '|';\n\
    \    for (char& c : music_string) {\n        if (c == 'o') {\n            if (prev\
    \ == '|') {\n                result.push_back(4 - sum);\n                sum =\
    \ 0;\n            } else {\n                result.push_back(4);\n           \
    \ }\n        } else if (c == '.') {\n            if (prev == '|') {\n        \
    \        result.push_back(1 - sum);\n                sum = 0;\n            } else\
    \ {\n                result.push_back(1);\n            }\n        } else if (c\
    \ == '|') {\n            prev = '|';\n            sum += 2;\n        }\n    }\n\
    \    return result;", "\tstd::vector<long> res;\n\tfor (int i = 0; i < music_string.size();\
    \ ++i) {\n\t\tif (music_string[i] == 'o') {\n\t\t\tif (music_string[i + 1] ==\
    \ '|') {\n\t\t\t\tres.push_back(2);\n\t\t\t\t++i;\n\t\t\t}\n\t\t\telse {\n\t\t\
    \t\tres.push_back(4);\n\t\t\t}\n\t\t}\n\t\telse if (music_string[i] == '.') {\n\
    \t\t\tres.push_back(1);\n\t\t\t++i;\n\t\t}\n\t}\n\treturn res;", "    //parse\
    \ the string and return vector of integers.\n    std::vector<long> beats;\n  \
    \  std::string beat;\n    for(char c : music_string){\n        if(c == ' '){\n\
    \            beats.push_back(beat.size());\n            beat.clear();\n      \
    \  }else if(c == '|'){\n            beat.push_back(c);\n        }else{\n     \
    \       beat.push_back(c);\n        }\n    }\n    beats.push_back(beat.size());\n\
    \    return beats;", "    \n    std::vector<long> output_vector;\n    long start\
    \ = 0;\n    long end = 0;\n    bool is_prev_rest = false;\n    bool is_prev_whole\
    \ = false;\n    bool is_prev_double_whole = false;\n    long count = 0;\n    while(end\
    \ < music_string.length()) {\n        \n        if(is_prev_double_whole || is_prev_whole)\
    \ {\n            is_prev_double_whole = false;\n            is_prev_whole = false;\n\
    \            output_vector.push_back(4);\n            start = end;\n         \
    \   continue;\n        }\n        \n        if(is_prev_rest) {\n            is_prev_rest\
    \ = false;\n            output_vector.push_back(1);\n            start = end;\n\
    \            continue;\n        }\n        \n        if(music_string[end] == '\
    \ ' || music_string[end] == 'o') {\n            end++;\n            if(music_string[end]\
    \ == '|') {\n                if(music_string[end+1] == ' ') {\n              \
    \      if(music_string[end+2] == 'o') {\n                        end += 2;\n \
    \                       is_prev_double_whole = true;\n                    } else\
    \ {\n                        is_prev_whole = true;\n                    }\n  \
    \              } else {\n                    end++;\n                    is_prev_rest\
    \ = true;\n                }\n            }\n        } else {\n            output_vector.push_back(1);\n\
    \            start = end;\n        }\n    }\n    return output_vector;", "\tstd::vector<long>\
    \ x;\n\tstd::stringstream ss(music_string);\n\tstd::string temp;\n\twhile (ss>>temp)\
    \ {\n\t\tint n = 0;\n\t\tif (temp[0] == 'o') {\n\t\t\tif (temp.size() > 1) {\n\
    \t\t\t\tn = 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tn = 4;\n\t\t\t}\n\t\t}\n\t\telse\
    \ {\n\t\t\tn = 1;\n\t\t}\n\t\tx.push_back(n);\n\t}\n\treturn x;", "    // TODO:\
    \ Implement this function\n\n    std::vector<long> notes;\n    long sum = 0;\n\
    \    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            sum += 4;\n        } else if (music_string[i] == '|')\
    \ {\n            notes.push_back(sum);\n            sum = 0;\n        } else if\
    \ (music_string[i] == '.') {\n            sum += 1;\n        }\n    }\n    notes.push_back(sum);\n\
    \    return notes;", "    std::vector<long> result;\n    // Implement your parser\
    \ here\n\n    std::stringstream ss(music_string);\n    std::string note;\n   \
    \ while (ss >> note) {\n        if (note.size() == 1)\n            result.push_back(4);\n\
    \        else if (note[1] == '|')\n            result.push_back(2);\n        else\n\
    \            result.push_back(1);\n    }\n\n    return result;", "    std::vector<long>\
    \ beats;\n    std::string::iterator i;\n    long counter = 0;\n    long division_factor\
    \ = 2;\n    bool previous_is_divided = false;\n    bool ended_with_dot = false;\n\
    \    long division_counter = 0;\n    for (i = music_string.begin(); i != music_string.end();\
    \ i++) {\n        //      std::cout << *i << \" \";\n        if (*i == 'o') {\n\
    \            if (previous_is_divided) {\n                division_factor = division_factor\
    \ / division_counter;\n                division_counter = 0;\n               \
    \ counter = counter / division_factor;\n                previous_is_divided =\
    \ false;\n            } else {\n                if (ended_with_dot) {\n      \
    \              counter = counter / division_factor;\n                    division_factor\
    \ = 2;\n                    ended_with_dot = false;\n                }\n     \
    \       }\n            counter += 4;\n        } else if (*i == '|') {\n      \
    \      if (previous_is_divided) {\n                division_factor = division_factor\
    \ / division_counter;\n                division_counter = 0;\n               \
    \ counter = counter / division_factor;\n                previous_is_divided =\
    \ false;\n            } else {\n                if (ended_with_dot) {\n      \
    \              counter = counter / division_factor;\n                    division_factor\
    \ = 2;\n                    ended_with_dot = false;\n                }\n     \
    \       }\n            counter += 2;\n        } else if (*i == '.') {\n      \
    \      if (previous_is_divided) {\n                division_factor = division_factor\
    \ / division_counter;\n                division_counter = 0;\n               \
    \ counter = counter / division_factor;\n                previous_is_divided =\
    \ false;\n            } else {\n                if (ended_with_dot) {\n      \
    \              counter = counter / division_factor;\n                    division_factor\
    \ = 2;\n                    ended_with_dot = false;\n                }\n     \
    \       }\n            counter += 1;\n            ended_with_dot = true;\n   \
    \     } else if (*i == ' ') {\n            if (previous_is_divided) {\n      \
    \         ", "  // your code here\n  int count = 0;\n  std::vector<long> beats;\n\
    \  for(int i = 0; i < music_string.length(); i++){\n    if(music_string[i] ==\
    \ 'o'){\n      beats.push_back(4);\n    }\n    else if(music_string[i] == '.'){\n\
    \      beats.push_back(1);\n    }\n    else if(music_string[i] == '|'){\n    \
    \  if(beats[beats.size()-1] == 4){\n        beats[beats.size()-1] = 2;\n     \
    \ }\n      else{\n        beats[beats.size()-1] = 1;\n      }\n    }\n  }\n  return\
    \ beats;", "    std::vector<long> result;\n    //std::cout << music_string.length()\
    \ << std::endl;\n    for (long i = 0; i < music_string.length(); ++i) {\n    \
    \    if (music_string[i] == 'o') {\n            if (music_string[i + 1] == ' '\
    \ && music_string[i + 2] == 'o') {\n                result.push_back(4);\n   \
    \             i += 2;\n            } else {\n                if (music_string[i\
    \ + 1] == '|') {\n                    result.push_back(4);\n                 \
    \   i += 1;\n                } else {\n                    result.push_back(1);\n\
    \                }\n            }\n        } else {\n            if (music_string[i]\
    \ == 'o' && music_string[i + 1] == '|') {\n                result.push_back(2);\n\
    \                i += 1;\n            } else {\n                if (music_string[i]\
    \ == '.' && music_string[i + 1] == '|') {\n                    result.push_back(1);\n\
    \                    i += 1;\n                }\n            }\n        }\n  \
    \  }\n    return result;", "\tlong sum = 0;\n\tstd::vector<long> songs;\n\tfor\
    \ (auto song : music_string) {\n\t\tif (song == 'o') {\n\t\t\tsongs.push_back(4);\n\
    \t\t}\n\t\telse if (song == '|') {\n\t\t\tsongs.push_back(2);\n\t\t}\n\t\telse\
    \ if (song == '.') {\n\t\t\tsongs.push_back(1);\n\t\t}\n\t}\n\treturn songs;",
  "    std::vector<long> result;\n    char **str_split;\n    std::string delimiter\
    \ = \" \";\n    size_t pos = 0;\n    std::string token;\n    size_t n = 0;\n \
    \   size_t m = 1;\n    while ((pos = music_string.find(delimiter)) != std::string::npos)\
    \ {\n        token = music_string.substr(0, pos);\n        m++;\n        music_string.erase(0,\
    \ pos + delimiter.length());\n    }\n    str_split = new char *[m];\n    for (int\
    \ i = 0; i < m; i++) {\n        str_split[i] = new char[10];\n    }\n    for (int\
    \ i = 0; i < m; i++) {\n        for (int j = 0; j < 10; j++) {\n            str_split[i][j]\
    \ = ' ';\n        }\n    }\n    str_split[0] = const_cast<char *>(music_string.c_str());\n\
    \    while ((pos = music_string.find(delimiter)) != std::string::npos) {\n   \
    \     token = music_string.substr(0, pos);\n        str_split[n] = const_cast<char\
    \ *>(token.c_str());\n        n++;\n        music_string.erase(0, pos + delimiter.length());\n\
    \    }\n    for (int i = 0; i < m; i++) {\n        if (strcmp(str_split[i], \"\
    o\") == 0) {\n            result.push_back(4);\n        } else if (strcmp(str_split[i],\
    \ \"o|\") == 0) {\n            result.push_back(2);\n        } else if (strcmp(str_split[i],\
    \ \".|\") == 0) {\n            result.push_back(1);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::stringstream ss;\n    ss\
    \ << music_string;\n    char current;\n    while(ss >> current) {\n        if(current\
    \ == 'o') {\n            result.push_back(4);\n        } else if(current == 'o'\
    \ && ss.peek() == '|') {\n            result.push_back(2);\n            ss.ignore();\n\
    \        } else if(current == '.' && ss.peek() == '|') {\n            result.push_back(1);\n\
    \            ss.ignore();\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            if (music_string[i + 1] == '|') {\n                result.push_back(2);\n\
    \                i++;\n            } else {\n                result.push_back(4);\n\
    \            }\n        } else if (music_string[i] == '.') {\n            result.push_back(1);\n\
    \            i++;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ durations;\n    long int n = music_string.length();\n    long int i = 0;\n \
    \   long int j = 0;\n    long int count = 0;\n    long int total = 0;\n    long\
    \ int integer = 0;\n    for(i = 0; i < n; i++) {\n        if(music_string[i] ==\
    \ 'o') {\n            if(music_string[i+1] == ' ') {\n                durations.push_back(4);\n\
    \            }\n            else if(music_string[i+1] == '|') {\n            \
    \    durations.push_back(2);\n            }\n        }\n        else if(music_string[i]\
    \ == '.') {\n            if(music_string[i+1] == '|') {\n                durations.push_back(1);\n\
    \            }\n        }\n    }\n    return durations;", "\tstd::vector<long>\
    \ ret;\n\tint counter = 0;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\
    \t\tif (music_string[i] == 'o') {\n\t\t\tif (music_string[i + 1] == ' ') {\n\t\
    \t\t\tret.push_back(4);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse if (music_string[i\
    \ + 1] == '|') {\n\t\t\t\tret.push_back(2);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\t\
    else if (music_string[i] == '.') {\n\t\t\tif (music_string[i + 1] == '|') {\n\t\
    \t\t\tret.push_back(1);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;", " \
    \   std::vector<long> result;\n    std::string current_string;\n    std::stringstream\
    \ ss(music_string);\n    while (ss >> current_string) {\n        if (current_string\
    \ == \"o\") {\n            result.push_back(4);\n        } else if (current_string\
    \ == \"o|\") {\n            result.push_back(2);\n        } else if (current_string\
    \ == \".|\") {\n            result.push_back(1);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    for (auto c : music_string) {\n \
    \       if (c == 'o') {\n            res.push_back(4);\n        } else if (c ==\
    \ '.') {\n            res.push_back(1);\n        } else if (c == '|') {\n    \
    \        res.back() = 2;\n        }\n    }\n    return res;", "    //TODO: Implement\
    \ this function\n    std::vector<long> beats;\n    beats.reserve(music_string.size());\n\
    \    std::stringstream ss(music_string);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        if(token == \"o\") {\n            beats.push_back(4);\n\
    \        } else if(token == \"o|\") {\n            beats.push_back(2);\n     \
    \   } else if(token == \".|\") {\n            beats.push_back(1);\n        }\n\
    \    }\n    return beats;", "    std::vector<long> music_duration;\n    if (music_string\
    \ == \"\") return music_duration;\n    std::stringstream ss(music_string);\n \
    \   std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\") music_duration.push_back(4);\n        else if (token == \"\
    o|\") music_duration.push_back(2);\n        else if (token == \".|\") music_duration.push_back(1);\n\
    \    }\n    return music_duration;", "  std::vector<long> result;\n  for (int\
    \ i = 0; i < music_string.size(); ++i) {\n    if (music_string[i] == 'o') {\n\
    \      if (music_string[i + 1] == '|') {\n        result.push_back(2);\n     \
    \   ++i;\n      } else {\n        result.push_back(4);\n      }\n    } else if\
    \ (music_string[i] == '.') {\n      result.push_back(1);\n      ++i;\n    }\n\
    \  }\n  return result;", "\tstd::vector<long> integer;\n\tstd::string temp;\n\t\
    std::stringstream sstr;\n\tint a = 0;\n\tfor (int i = 0; i < music_string.length();\
    \ i++) {\n\t\tif (music_string[i] == 'o') {\n\t\t\tif (music_string[i + 1] ==\
    \ '|') {\n\t\t\t\tinteger.push_back(2);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse {\n\
    \t\t\t\tinteger.push_back(4);\n\t\t\t}\n\t\t}\n\t\telse if (music_string[i] ==\
    \ '.') {\n\t\t\tinteger.push_back(1);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn integer;",
  "    std::vector<long> ans;\n    for(auto c : music_string) {\n        if(c == 'o')\
    \ {\n            ans.push_back(4);\n        } else if(c == '.') {\n          \
    \  ans.push_back(1);\n        } else if(c == '|') {\n            ans.push_back(2);\n\
    \        }\n    }\n    return ans;", "    std::vector<long> beats;\n    for (char\
    \ c : music_string) {\n        if (c == 'o') {\n            beats.push_back(4);\n\
    \        } else if (c == '|') {\n            beats.push_back(1);\n        }\n\
    \    }\n    return beats;", "\tstd::vector<long> result;\n\tauto str = music_string.data();\n\
    \twhile (*str) {\n\t\tint cnt = 0;\n\t\tswitch (*str) {\n\t\tcase 'o':\n\t\t\t\
    cnt = 4;\n\t\t\tbreak;\n\t\tcase '.':\n\t\t\tcnt = 1;\n\t\t\tbreak;\n\t\tdefault:\n\
    \t\t\tassert(false);\n\t\t}\n\t\tif (*(str + 1) == '|') {\n\t\t\tcnt /= 2;\n\t\
    \t\tstr++;\n\t\t}\n\t\tresult.push_back(cnt);\n\t\tstr++;\n\t}\n\treturn result;",
  "    // Remove whitespace\n    for (auto i = music_string.begin(); i != music_string.end();)\
    \ {\n        if (*i == ' ') {\n            i = music_string.erase(i);\n      \
    \  } else {\n            ++i;\n        }\n    }\n    long cur_idx = 0;\n    std::vector<long>\
    \ res;\n    while (cur_idx < music_string.size()) {\n        if (music_string[cur_idx]\
    \ == 'o') {\n            if (cur_idx == music_string.size() - 1) {\n         \
    \       res.push_back(4);\n                cur_idx++;\n            } else if (music_string[cur_idx\
    \ + 1] == '|') {\n                res.push_back(2);\n                cur_idx +=\
    \ 2;\n            } else {\n                res.push_back(4);\n              \
    \  cur_idx++;\n            }\n        } else {\n            res.push_back(1);\n\
    \            cur_idx += 2;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ duration;\n    int size = music_string.size();\n    int i = 0;\n    while(i\
    \ < size) {\n        if(music_string[i] == 'o') {\n            if(music_string[i+1]\
    \ == ' ') {\n                duration.push_back(4);\n                i+=2;\n \
    \           }\n            else if(music_string[i+1] == '|') {\n             \
    \   duration.push_back(2);\n                i+=3;\n            }\n        }\n\
    \        else if(music_string[i] == '.') {\n            duration.push_back(1);\n\
    \            i+=3;\n        }\n    }\n    return duration;", "\tstd::vector<long>\
    \ int_list;\n\tint count = 0;\n\tint i = 0;\n\twhile (i < music_string.length())\
    \ {\n\t\tif (music_string[i] == 'o') {\n\t\t\tif (i + 1 < music_string.length()\
    \ && music_string[i + 1] == '|') {\n\t\t\t\tint_list.push_back(2);\n\t\t\t\ti\
    \ += 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tint_list.push_back(4);\n\t\t\t\ti++;\n\
    \t\t\t}\n\t\t}\n\t\telse if (music_string[i] == '.') {\n\t\t\tint_list.push_back(1);\n\
    \t\t\ti += 2;\n\t\t}\n\t\telse {\n\t\t\tint_list.push_back(1);\n\t\t\ti++;\n\t\
    \t}\n\t}\n\treturn int_list;", "\t// write your code here\n\tstd::vector<long>\
    \ note_beat;\n\tstd::vector<char> note;\n\tstd::vector<char> beat;\n\tstd::vector<long>::iterator\
    \ it;\n\tlong counter = 0;\n\t//Parsing string\n\tfor (int i = 0; i < music_string.length();\
    \ i++) {\n\t\tif (music_string[i] == 'o' || music_string[i] == '.') {\n\t\t\t\
    note.push_back(music_string[i]);\n\t\t}\n\t\telse if (music_string[i] == '|')\
    \ {\n\t\t\tbeat.push_back(music_string[i]);\n\t\t}\n\t\telse {\n\t\t\tcounter++;\n\
    \t\t}\n\t}\n\tcounter = (counter + 1) / 2;\n\t//Parsing note\n\n\tfor (int i =\
    \ 0; i < note.size(); i++) {\n\t\tif (note[i] == 'o') {\n\t\t\tnote_beat.push_back(4);\n\
    \t\t}\n\t\telse if (note[i] == '.') {\n\t\t\tnote_beat.push_back(1);\n\t\t}\n\t\
    }\n\t//Parsing beat\n\n\tfor (int i = 0; i < beat.size(); i++) {\n\t\tif (beat[i]\
    \ == '|') {\n\t\t\tit = note_beat.begin();\n\t\t\tnote_beat.insert(it + i, *(it\
    \ + i) / 2);\n\t\t\tnote_beat.erase(it + i + 1);\n\t\t}\n\t}\n\t//Parsing counter\n\
    \n\tif (counter > 0) {\n\t\tit = note_beat.begin();\n\t\tnote_beat.insert(it,\
    \ counter);\n\t}\n\treturn note_beat;", "    std::vector<long> song_length;\n\
    \    int str_size = music_string.size();\n    for (int i = 0; i < str_size;) {\n\
    \        if (music_string[i] == 'o') {\n            if (music_string[i + 1] ==\
    \ ' ') {\n                song_length.push_back(4);\n                i += 2;\n\
    \            } else if (music_string[i + 1] == '|') {\n                song_length.push_back(2);\n\
    \                i += 3;\n            }\n        } else if (music_string[i] ==\
    \ '.') {\n            song_length.push_back(1);\n            i += 3;\n       \
    \ }\n    }\n    return song_length;", "    // write your code here\n    std::vector<long>\
    \ result;\n    long temp = 0;\n    for(int i = 0; i < music_string.size(); i++){\n\
    \        if(music_string[i] == 'o'){\n            if(temp != 0){\n           \
    \     result.push_back(temp);\n                temp = 0;\n            }\n    \
    \        if(music_string[i+1] == ' '){\n                result.push_back(4);\n\
    \            }\n            else if(music_string[i+1] == '|'){\n             \
    \   if(music_string[i+2] == ' '){\n                    result.push_back(2);\n\
    \                }\n                else{\n                    result.push_back(1);\n\
    \                }\n            }\n        }\n        else if(music_string[i]\
    \ == '.'){\n            temp++;\n        }\n    }\n    return result;", "    //\
    \ let the fun begin\n    std::vector<long> beats;\n    long beat = 0;\n    for\
    \ (auto s : music_string) {\n        switch (s) {\n            case 'o':\n   \
    \             beats.push_back(beat);\n                beat = 4;\n            \
    \    break;\n            case '|':\n                beats.push_back(beat);\n \
    \               beat = 0;\n                break;\n            case '.':\n   \
    \             beat++;\n                break;\n            case ' ':\n       \
    \         break;\n            default:\n                assert(false);\n     \
    \   }\n    }\n    beats.push_back(beat);\n    return beats;", "    std::vector<long>\
    \ res;\n    std::stringstream ss(music_string);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        if (item == \"o\") {\n            res.push_back(4);\n\
    \        } else if (item == \"o|\") {\n            res.push_back(2);\n       \
    \ } else if (item == \".|\") {\n            res.push_back(1);\n        }\n   \
    \ }\n    return res;", "    vector<long> res;\n    if(music_string.empty())\n\
    \        return res;\n    long sum = 0;\n    for(int i = 0; i < music_string.size();\
    \ i++){\n        if(music_string[i] == 'o'){\n            res.push_back(4);\n\
    \            sum += 4;\n        }\n        else if(music_string[i] == '.'){\n\
    \            res.push_back(1);\n            sum += 1;\n        }\n        else\
    \ if(music_string[i] == '|'){\n            if(music_string[i-1] == 'o'){\n   \
    \             res.push_back(2);\n                sum += 2;\n            }\n  \
    \          else{\n                if(sum != 4){\n                    res.push_back(4\
    \ - sum);\n                    sum = 4;\n                }\n            }\n  \
    \      }\n    }\n    return res;", "    std::vector<long> result;\n    std::vector<char>\
    \ notes;\n    long size = music_string.size();\n    for (int i = 0; i < size;\
    \ i++) {\n        if (music_string[i] == ' ') {\n            continue;\n     \
    \   }\n        notes.push_back(music_string[i]);\n    }\n    size = notes.size();\n\
    \    for (int i = 0; i < size; i++) {\n        switch (notes[i]) {\n         \
    \   case 'o':\n                result.push_back(4);\n                break;\n\
    \            case 'o':\n                result.push_back(2);\n               \
    \ break;\n            case '.':\n                result.push_back(1);\n      \
    \          break;\n            default:\n                break;\n        }\n \
    \   }\n    return result;", "    std::vector<long> my_vector;\n    char *temp;\n\
    \    char *pch = strtok (music_string.c_str(),\" \");\n    while (pch != NULL)\n\
    \    {\n        if(strlen(pch) == 1)\n        {\n            my_vector.push_back(4);\n\
    \        }\n        else if(strlen(pch) == 2)\n        {\n            if(pch[0]\
    \ == 'o')\n            {\n                my_vector.push_back(2);\n          \
    \  }\n            else\n            {\n                my_vector.push_back(1);\n\
    \            }\n        }\n        else\n        {\n            my_vector.push_back(1);\n\
    \        }\n        pch = strtok (NULL, \" \");\n    }\n    return my_vector;",
  "\tlong beats = 0;\n\tstd::vector<long> v;\n\tstd::istringstream ss(music_string);\n\
    \tstd::string token;\n\twhile (std::getline(ss, token, ' ')) {\n\t\tif (token\
    \ == \"o\")\n\t\t\tbeats += 4;\n\t\telse if (token == \"o|\")\n\t\t\tbeats +=\
    \ 2;\n\t\telse if (token == \".|\")\n\t\t\tbeats += 1;\n\t\telse\n\t\t\tbeats\
    \ += 4;\n\t\tv.push_back(beats);\n\t}\n\treturn v;", "    std::vector<long> ret;\n\
    \    // Holds current beat (1/4).\n    // For example, 3 means that three quater\
    \ notes have been parsed so far.\n    long cur_beat = 0;\n    // Holds type of\
    \ current note (1/4). For example, note type of 4 means that we are parsing whole\
    \ note.\n    long cur_note_type = 0;\n    // Holds number of notes parsed so far.\
    \ For example, if we parse 3 whole notes, num_notes is 3.\n    long num_notes\
    \ = 0;\n    for (long i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == ' ') {\n            // Space char indicates end of current note, so we update\
    \ number of beats accordingly.\n            ret.push_back(cur_note_type);\n  \
    \          cur_beat += cur_note_type;\n            cur_note_type = 0;\n      \
    \      num_notes++;\n        } else if (music_string[i] == 'o') {\n          \
    \  cur_note_type = 4;\n        } else if (music_string[i] == '|') {\n        \
    \    cur_note_type /= 2;\n        } else if (music_string[i] == '.') {\n     \
    \       cur_note_type /= 2;\n        } else {\n            assert(false);\n  \
    \      }\n    }\n    // After we parse all notes, we check that current beat is\
    \ the same as total length of the music\n    // (which is assumed to be 4*num_notes)\n\
    \    assert(cur_beat == 4*num_notes);\n    return ret;", "    \n    // Your solution\
    \ goes here\n    std::vector<long> res;\n    for(int i=0;i<music_string.size();){\n\
    \        if(music_string[i]=='o'){\n            res.push_back(4);\n          \
    \  i++;\n        }\n        else if(music_string[i]=='.'){\n            res.push_back(1);\n\
    \            i=i+2;\n        }\n        else{\n            i++;\n        }\n \
    \   }\n    return res;", "    int i = 0;\n    long counter = 0;\n    std::vector<long>\
    \ result;\n    for (char c : music_string) {\n        if (c == 'o') {\n      \
    \      if (counter == 0) {\n                counter = 4;\n            } else {\n\
    \                counter = 2;\n            }\n        } else if (c == '|') {\n\
    \            result.push_back(counter);\n            counter = 0;\n        } else\
    \ if (c == '.') {\n            result.push_back(1);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    int count = 0;\n    int i = 0;\n\
    \    while(i < music_string.size()) {\n        if(music_string[i] == 'o') {\n\
    \            if(music_string[i+1] == ' ') {\n                count = 4;\n    \
    \            i = i + 2;\n            }\n            else if(music_string[i+1]\
    \ == '|') {\n                count = 2;\n                i = i + 3;\n        \
    \    }\n        }\n        else if(music_string[i] == '.') {\n            count\
    \ = 1;\n            i = i + 3;\n        }\n        result.push_back(count);\n\
    \    }\n    return result;", "\tstd::vector<long> result;\n\tfor (auto note :\
    \ music_string) {\n\t\tif (note == 'o')\n\t\t\tresult.push_back(4);\n\t\telse\
    \ if (note == '.')\n\t\t\tresult.push_back(1);\n\t\telse\n\t\t\tresult.push_back(2);\n\
    \t}\n\treturn result;", "    // TODO: implement this function\n\tstd::vector<long>\
    \ beats;\n\tint count = 0;\n\tfor(int i = 0; i < music_string.length(); i++) {\n\
    \t\tif(music_string[i] == ' ') {\n\t\t\tif(count == 0) {\n\t\t\t\tbeats.push_back(4);\n\
    \t\t\t} else if(count == 1) {\n\t\t\t\tbeats.push_back(2);\n\t\t\t} else if(count\
    \ == 2) {\n\t\t\t\tbeats.push_back(1);\n\t\t\t}\n\t\t\tcount = 0;\n\t\t} else\
    \ if(music_string[i] == 'o') {\n\t\t\tcount++;\n\t\t} else if(music_string[i]\
    \ == '|') {\n\t\t\tcount++;\n\t\t} else if(music_string[i] == '.') {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\tif(count == 0) {\n\t\tbeats.push_back(4);\n\t} else if(count ==\
    \ 1) {\n\t\tbeats.push_back(2);\n\t} else if(count == 2) {\n\t\tbeats.push_back(1);\n\
    \t}\n\treturn beats;", "    std::vector<long> beats;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        std::string\
    \ note_lenght = token.substr(1, 1);\n        if (note_lenght == \"o\") {\n   \
    \         beats.push_back(4);\n        } else if (note_lenght == \"|\") {\n  \
    \          beats.push_back(2);\n        } else if (note_lenght == \".\") {\n \
    \           beats.push_back(1);\n        }\n    }\n    return beats;", "    std::vector<long>\
    \ result;\n    std::stack<char> st;\n    std::stack<long> st_num;\n    long num=0;\n\
    \    long tmp=0;\n    for(char x:music_string){\n        if(x=='o'){\n       \
    \     if(st.size()!=0){\n                tmp=st_num.top();\n                st_num.pop();\n\
    \                st_num.push(tmp+1);\n            }\n            else{\n     \
    \           st.push(x);\n                st_num.push(1);\n            }\n    \
    \    }\n        else if(x=='|'){\n            num=st_num.top();\n            st_num.pop();\n\
    \            result.push_back(num);\n            if(st.size()!=0){\n         \
    \       st.pop();\n            }\n        }\n        else if(x=='.'){\n      \
    \      if(st.size()!=0){\n                st.pop();\n                num=st_num.top();\n\
    \                st_num.pop();\n                num=num/2;\n                result.push_back(num);\n\
    \                if(num>1){\n                    st.push('.');\n             \
    \       st_num.push(num);\n                }\n            }\n            else{\n\
    \                st.push(x);\n                st_num.push(1);\n            }\n\
    \        }\n    }\n    return result;", "    std::vector<long> output;\n    int\
    \ i = 0;\n    while(i < music_string.size()) {\n        if(music_string[i] ==\
    \ ' ') {\n            ++i;\n            continue;\n        }\n        if(music_string[i]\
    \ == 'o') {\n            output.push_back(4);\n            i += 2;\n        }\n\
    \        else if(music_string[i] == '.') {\n            output.push_back(1);\n\
    \            i += 3;\n        }\n    }\n    return output;", "    // Your code\
    \ here\n    std::stringstream ss(music_string);\n    std::vector<long> note_duration;\n\
    \    long beats;\n    std::string str;\n    while(ss >> str) {\n        if(str\
    \ == \"o\") {\n            beats = 4;\n        }\n        else if(str == \"o|\"\
    ) {\n            beats = 2;\n        }\n        else if(str == \".|\") {\n   \
    \         beats = 1;\n        }\n        note_duration.push_back(beats);\n   \
    \ }\n    return note_duration;", "  std::vector<long> result;\n  std::vector<char>\
    \ music;\n  for (int i = 0; i < music_string.size(); i++) {\n    if (music_string[i]\
    \ == ' ') continue;\n    music.push_back(music_string[i]);\n  }\n  long count\
    \ = 0;\n  for (int i = 0; i < music.size(); i++) {\n    if (music[i] == 'o') {\n\
    \      if (i < music.size() - 1 && music[i + 1] == '|') {\n        result.push_back(2);\n\
    \        count += 2;\n        i++;\n      } else {\n        result.push_back(4);\n\
    \        count += 4;\n      }\n    } else if (music[i] == '.') {\n      if (i\
    \ < music.size() - 1 && music[i + 1] == '|') {\n        result.push_back(1);\n\
    \        count += 1;\n        i++;\n      }\n    }\n  }\n  std::cout << count\
    \ << std::endl;\n  return result;", "\tstd::vector<long> res;\n\tfor (long i =\
    \ 0; i < music_string.size(); i++) {\n\t\tif (music_string[i] == 'o') {\n\t\t\t\
    if (music_string[i + 1] == ' ') {\n\t\t\t\tres.push_back(4);\n\t\t\t}\n\t\t\t\
    else if (music_string[i + 1] == '|') {\n\t\t\t\tres.push_back(2);\n\t\t\t\ti++;\n\
    \t\t\t}\n\t\t}\n\t\telse if (music_string[i] == '.') {\n\t\t\tres.push_back(1);\n\
    \t\t\ti++;\n\t\t}\n\t}\n\treturn res;", "    std::vector<long> output;\n    //write\
    \ your code here\n    char a;\n    for(int i=0;i<music_string.length();i++){\n\
    \        if(music_string[i]=='o'){\n            if(music_string[i+1]=='|'){\n\
    \                output.push_back(2);\n                i++;\n            }\n \
    \           else{\n                output.push_back(4);\n            }\n     \
    \   }\n        else if(music_string[i]=='.'){\n            if(music_string[i+1]=='|'){\n\
    \                output.push_back(1);\n                i++;\n            }\n \
    \       }\n    }\n    return output;", "\t\tstd::vector<long> beats;\n\t\t// your\
    \ code here\n\t\tstd::stringstream ss(music_string);\n\t\tstd::string token;\n\
    \t\twhile (std::getline(ss, token, ' ')) {\n\t\t\tif (token.length() == 1) {\n\
    \t\t\t\tbeats.push_back(4);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbeats.push_back(2);\n\
    \t\t\t}\n\t\t}\n\t\treturn beats;", "    if (music_string.empty())\n        return\
    \ {};\n    std::vector<long> result;\n    std::stringstream ss(music_string);\n\
    \    std::string token;\n    while (std::getline(ss, token, ' ')) {\n        if\
    \ (token == \"o\")\n            result.push_back(4);\n        else if (token ==\
    \ \"o|\")\n            result.push_back(2);\n        else if (token == \".|\"\
    )\n            result.push_back(1);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    int flag = 0;\n    long counter = 0;\n    for(int i = 0; i < music_string.size();\
    \ i++) {\n        if(music_string[i] == ' ' || music_string[i] == '\\t') continue;\n\
    \        if(music_string[i] == '.') counter++;\n        if(music_string[i] ==\
    \ 'o') counter += 4;\n        if(music_string[i] == '|') {\n            result.push_back(counter);\n\
    \            counter = 0;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ beat_lengths;\n    std::string valid_notes = \"o|.\";\n    size_t prev_pos =\
    \ 0;\n    size_t pos = 0;\n    long beats = 0;\n    while ((pos = music_string.find_first_of(\"\
    \ \", pos)) != std::string::npos) {\n        std::string note = music_string.substr(prev_pos,\
    \ pos - prev_pos);\n        assert(valid_notes.find(note) != std::string::npos);\n\
    \        if (note == \".\") {\n            beats += 1;\n        } else if (note\
    \ == \"|\") {\n            beat_lengths.push_back(beats);\n            beats =\
    \ 0;\n        } else if (note == \"o\") {\n            beats += 4;\n        }\n\
    \        prev_pos = pos + 1;\n        pos++;\n    }\n    std::string note = music_string.substr(prev_pos,\
    \ pos - prev_pos);\n    assert(valid_notes.find(note) != std::string::npos);\n\
    \    if (note == \".\") {\n        beats += 1;\n    } else if (note == \"|\")\
    \ {\n        beat_lengths.push_back(beats);\n        beats = 0;\n    } else if\
    \ (note == \"o\") {\n        beats += 4;\n    }\n    if (beats > 0) {\n      \
    \  beat_lengths.push_back(beats);\n    }\n    return beat_lengths;", "    std::vector<long>\
    \ res;\n    bool flag = false;\n    for (int i = 0; i < music_string.size(); ++i)\
    \ {\n        if (music_string[i] == 'o') {\n            if (music_string[i + 1]\
    \ == ' ') {\n                res.push_back(4);\n            } else {\n       \
    \         res.push_back(2);\n                flag = true;\n            }\n   \
    \     } else if (music_string[i] == '.') {\n            res.push_back(1);\n  \
    \          flag = true;\n        } else if (music_string[i] == '|') {\n      \
    \      flag = false;\n        }\n    }\n    return res;", "    // your code goes\
    \ here\n    \n    std::vector<long> v;\n    long count=0;\n    for(long i=0;i<music_string.length();i++)\n\
    \    {\n        count=0;\n        if(music_string[i]=='o')\n        {\n      \
    \      count+=4;\n            if(music_string[i+1]==' ')\n            {\n    \
    \            v.push_back(count);\n            }\n        }\n        else if(music_string[i]=='o'&&music_string[i+1]=='|')\n\
    \        {\n            count+=2;\n            if(music_string[i+2]==' ')\n  \
    \          {\n                v.push_back(count);\n            }\n        }\n\
    \        else if(music_string[i]=='.'&&music_string[i+1]=='|')\n        {\n  \
    \          count+=1;\n            if(music_string[i+2]==' ')\n            {\n\
    \                v.push_back(count);\n            }\n        }\n        \n   \
    \ }\n    return v;", "    std::vector<long> beats;\n    long i = 0;\n    long\
    \ n = music_string.length();\n    for(i = 0; i < n; i++){\n        if(music_string[i]\
    \ == 'o'){\n            if(music_string[i+1] == ' '){\n                beats.push_back(4);\n\
    \            }\n            else if(music_string[i+1] == '|'){\n             \
    \   beats.push_back(2);\n                i++;\n            }\n        }\n    \
    \    else if(music_string[i] == '.'){\n            if(music_string[i+1] == '|'){\n\
    \                beats.push_back(1);\n                i++;\n            }\n  \
    \      }\n    }\n    return beats;", "\tstd::vector<long> musical_notes;\n\tlong\
    \ count;\n\tfor (long i = 0; i < music_string.length(); i++) {\n\t\tcount = 0;\n\
    \t\tif (music_string[i] == 'o') {\n\t\t\tcount = 4;\n\t\t\ti++;\n\t\t}\n\t\telse\
    \ if (music_string[i] == '.') {\n\t\t\tcount = 1;\n\t\t\ti += 2;\n\t\t}\n\t\t\
    else if (music_string[i] == 'o') {\n\t\t\tcount = 2;\n\t\t\ti += 2;\n\t\t}\n\t\
    \tmusical_notes.push_back(count);\n\t}\n\treturn musical_notes;", "    std::vector<long>\
    \ beats;\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            beats.push_back(4);\n        } else if (music_string[i]\
    \ == '|') {\n            beats.push_back(2);\n        } else if (music_string[i]\
    \ == '.') {\n            beats.push_back(1);\n        }\n    }\n    return beats;",
  "    std::vector<long> beats_per_note;\n    std::string beat;\n    long count =\
    \ 0;\n    for (char note : music_string) {\n        if (note == ' ') {\n     \
    \       beats_per_note.push_back(count);\n            count = 0;\n        } else\
    \ if (note == 'o') {\n            count += 4;\n        } else if (note == '|')\
    \ {\n            count += 1;\n        }\n    }\n    beats_per_note.push_back(count);\n\
    \    return beats_per_note;", "\tlong sum = 0;\n\tint size = music_string.size();\n\
    \tstd::vector<long>v;\n\tfor (int i = 0; i < size; i++) {\n\t\tif (music_string[i]\
    \ == 'o') {\n\t\t\tif (music_string[i + 1] == ' ') {\n\t\t\t\tv.push_back(4);\n\
    \t\t\t\tsum = sum + 4;\n\t\t\t}\n\t\t\telse if (music_string[i + 1] == '|') {\n\
    \t\t\t\tv.push_back(2);\n\t\t\t\tsum = sum + 2;\n\t\t\t}\n\t\t}\n\t\telse if (music_string[i]\
    \ == '.') {\n\t\t\tif (music_string[i + 1] == '|') {\n\t\t\t\tv.push_back(1);\n\
    \t\t\t\tsum = sum + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn v;", "    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string token;\n \
    \   while (std::getline(ss, token, ' ')) {\n        if (token == \"o\")\n    \
    \        result.push_back(4);\n        else if (token == \"o|\")\n           \
    \ result.push_back(2);\n        else if (token == \".|\")\n            result.push_back(1);\n\
    \    }\n    return result;", "    if (music_string.empty()) {\n        return\
    \ {};\n    }\n    std::vector<long> res;\n    int i = 0;\n    int beat = 0;\n\
    \    while (i < music_string.size()) {\n        if (music_string[i] == 'o') {\n\
    \            if (music_string[i + 1] == '|') {\n                res.push_back(2);\n\
    \                i += 2;\n            } else {\n                res.push_back(4);\n\
    \                i += 1;\n            }\n        } else {\n            res.push_back(1);\n\
    \            i += 2;\n        }\n    }\n    return res;", "    std::vector<long>\
    \ beats;\n    std::vector<char> chars;\n    for (auto &c : music_string) {\n \
    \       if (c == ' ') {\n            if (chars.size() > 0) {\n               \
    \ beats.push_back(\n                        std::accumulate(chars.begin(), chars.end(),\
    \ 0L, [](long &carry, char &c) {\n                            if (c == 'o') carry\
    \ += 4;\n                            if (c == '|') carry += 1;\n             \
    \               return carry;\n                        }));\n                chars.clear();\n\
    \            }\n        } else {\n            chars.push_back(c);\n        }\n\
    \    }\n    if (chars.size() > 0) {\n        beats.push_back(\n              \
    \  std::accumulate(chars.begin(), chars.end(), 0L, [](long &carry, char &c) {\n\
    \                    if (c == 'o') carry += 4;\n                    if (c == '|')\
    \ carry += 1;\n                    return carry;\n                }));\n    }\n\
    \    return beats;", "    std::vector<long> beats;\n    std::string line = \"\"\
    ;\n    std::stringstream ss(music_string);\n    while (std::getline(ss, line,\
    \ ' ')) {\n        long count = 0;\n        for (char& c : line) {\n         \
    \   if (c == 'o') {\n                count += 4;\n            } else if (c ==\
    \ '|') {\n                count += 1;\n            }\n        }\n        beats.push_back(count);\n\
    \    }\n    return beats;", "    // your code here\n    long n = music_string.length();\n\
    \    std::vector<long> beats;\n    for(long i = 0; i < n; i++){\n        if(music_string[i]\
    \ == 'o'){\n            beats.push_back(4);\n        }\n        else if(music_string[i]\
    \ == '|'){\n            beats.push_back(2);\n        }\n        else if(music_string[i]\
    \ == '.'){\n            beats.push_back(1);\n        }\n    }\n    return beats;",
  "    std::vector<long> output;\n    long int counter = 0;\n    long int add_to_counter\
    \ = 0;\n    std::vector<std::string> tokens;\n    std::stringstream check1(music_string);\n\
    \    std::string intermediate;\n    // Tokenizing w.r.t. space ' '\n    while(getline(check1,\
    \ intermediate, ' '))\n    {\n        tokens.push_back(intermediate);\n    }\n\
    \    for(int i = 0; i < tokens.size(); i++)\n    {\n        if(tokens[i] == \"\
    o\")\n        {\n            output.push_back(4);\n        }\n        else if(tokens[i]\
    \ == \"o|\")\n        {\n            output.push_back(2);\n        }\n       \
    \ else if(tokens[i] == \".|\")\n        {\n            output.push_back(1);\n\
    \        }\n    }\n    return output;", "    std::vector<long> beats;\n    long\
    \ beats_count = 0;\n    for (char c : music_string) {\n        switch (c) {\n\
    \            case 'o':\n                beats_count = 4;\n                break;\n\
    \            case '|':\n                beats.push_back(beats_count);\n      \
    \          beats_count = 0;\n                break;\n            case '.':\n \
    \               beats_count -= 1;\n                break;\n            case '\
    \ ':\n                break;\n            default:\n                assert(false);\n\
    \        }\n    }\n    beats.push_back(beats_count);\n    return beats;", "  //\
    \ TODO: implement this function\n\tstd::vector<long> result;\n\tstd::stringstream\
    \ input(music_string);\n\tfor (std::string token; getline(input, token, ' ');)\
    \ {\n\t\tif (token == \"o\") {\n\t\t\tresult.push_back(4);\n\t\t}\n\t\telse if\
    \ (token == \"o|\") {\n\t\t\tresult.push_back(2);\n\t\t}\n\t\telse if (token ==\
    \ \".|\") {\n\t\t\tresult.push_back(1);\n\t\t}\n\t}\n\treturn result;", "    std::vector<long>\
    \ res;\n    int cnt = 0;\n    for (const auto& c : music_string) {\n        if\
    \ (c == 'o') {\n            if (cnt != 0) {\n                res.push_back(cnt);\n\
    \                cnt = 0;\n            }\n            res.push_back(4);\n    \
    \    } else if (c == '.') {\n            cnt++;\n        } else if (c == '|')\
    \ {\n            res.push_back(cnt);\n            cnt = 0;\n        }\n    }\n\
    \    if (cnt != 0) {\n        res.push_back(cnt);\n    }\n    return res;", " \
    \   char note[] = {'.', '|', 'o'};\n    std::vector<long> beats;\n    // YOUR\
    \ CODE GOES HERE\n    char *token = strtok(const_cast<char *>(music_string.c_str()),\
    \ \" \");\n    while (token != NULL) {\n        if (strcmp(token, \"o\") == 0)\
    \ {\n            beats.push_back(4);\n        } else if (strcmp(token, \"o|\"\
    ) == 0) {\n            beats.push_back(2);\n        } else if (strcmp(token, \"\
    .|\") == 0) {\n            beats.push_back(1);\n        }\n        token = strtok(NULL,\
    \ \" \");\n    }\n    return beats;", "    // your code here\n    std::vector<long>\
    \ v;\n    if(music_string.size() == 0)\n    {\n        return v;\n    }\n    if(music_string.at(0)\
    \ == 'o')\n    {\n        v.push_back(4);\n    }\n    else if(music_string.at(0)\
    \ == 'o' && music_string.at(1) == '|')\n    {\n        v.push_back(2);\n    }\n\
    \    else if(music_string.at(0) == '.' && music_string.at(1) == '|')\n    {\n\
    \        v.push_back(1);\n    }\n    else\n    {\n        std::cout << \"Invalid\
    \ Input\" << std::endl;\n    }\n    for(int i = 1; i < music_string.size(); i++)\n\
    \    {\n        if(music_string.at(i) == ' ')\n        {\n            if(music_string.at(i+1)\
    \ == 'o')\n            {\n                v.push_back(4);\n            }\n   \
    \         else if(music_string.at(i+1) == 'o' && music_string.at(i+2) == '|')\n\
    \            {\n                v.push_back(2);\n            }\n            else\
    \ if(music_string.at(i+1) == '.' && music_string.at(i+2) == '|')\n           \
    \ {\n                v.push_back(1);\n            }\n            else\n      \
    \      {\n                std::cout << \"Invalid Input\" << std::endl;\n     \
    \       }\n        }\n    }\n    return v;", "    std::vector<long> vec;\n   \
    \ long x = 0;\n    for(int i = 0; i < music_string.size(); ++i) {\n        if(music_string[i]\
    \ == 'o') {\n            x = 4;\n            vec.push_back(x);\n        }\n  \
    \      else if(music_string[i] == '.') {\n            x = 1;\n            vec.push_back(x);\n\
    \        }\n        else if(music_string[i] == '|') {\n            x = 2;\n  \
    \          vec.push_back(x);\n        }\n    }\n    return vec;", "    std::vector<long>\
    \ result;\n    std::string delimiter = \" \";\n    size_t pos = 0;\n    std::string\
    \ token;\n    while ((pos = music_string.find(delimiter)) != std::string::npos)\
    \ {\n        token = music_string.substr(0, pos);\n        music_string.erase(0,\
    \ pos + delimiter.length());\n        if (token.find(\"o|\") != std::string::npos)\
    \ {\n            result.push_back(2);\n        } else if (token.find(\".|\") !=\
    \ std::string::npos) {\n            result.push_back(1);\n        } else if (token.find(\"\
    o\") != std::string::npos) {\n            result.push_back(4);\n        }\n  \
    \  }\n    return result;", "    int sum = 0;\n    std::vector<long> result;\n\
    \    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            sum += 4;\n            if (music_string[i + 1] == ' ')\
    \ {\n                result.push_back(sum);\n                sum = 0;\n      \
    \      }\n        } else if (music_string[i] == 'o' && music_string[i + 1] ==\
    \ '|') {\n            sum += 2;\n            result.push_back(sum);\n        \
    \    sum = 0;\n        } else if (music_string[i] == '.' && music_string[i + 1]\
    \ == '|') {\n            sum += 1;\n            result.push_back(sum);\n     \
    \       sum = 0;\n        }\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    const int n = music_string.size();\n    int idx = 0;\n    while (idx\
    \ < n) {\n        if (music_string[idx] == 'o') {\n            if (idx + 1 < n\
    \ && music_string[idx + 1] == '|') {\n                ans.push_back(2);\n    \
    \            idx += 2;\n            } else {\n                ans.push_back(4);\n\
    \                idx += 1;\n            }\n        } else {\n            ans.push_back(1);\n\
    \            idx += 2;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (music_string == \"\") {\n        return result;\n    }\n  \
    \  char note = music_string[0];\n    int beats = 4;\n    if (note == 'o') {\n\
    \        beats = 4;\n    } else if (note == '.') {\n        beats = 1;\n    }\n\
    \    for (int i = 1; i < music_string.size(); i++) {\n        char next = music_string[i];\n\
    \        if (next == '|') {\n            result.push_back(beats);\n          \
    \  beats = 4;\n        } else if (next == '.') {\n            beats = 1;\n   \
    \     } else if (next == 'o') {\n            beats = 4;\n        }\n    }\n  \
    \  result.push_back(beats);\n    return result;", "    std::vector<long> retval;\n\
    \    // YOUR CODE GOES HERE\n    return retval;", "    std::vector<long> result;\n\
    \    for (char note : music_string) {\n        if (note == 'o') {\n          \
    \  result.push_back(4);\n        } else if (note == '.') {\n            result.push_back(1);\n\
    \        } else if (note == '|') {\n            long last_element = result.back();\n\
    \            result.pop_back();\n            result.push_back(last_element / 2);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ current_duration = 0;\n    std::string current_note;\n    std::istringstream\
    \ music(music_string);\n    while (music >> current_note) {\n        if (current_note\
    \ == \"o\") {\n            current_duration = 4;\n        } else if (current_note\
    \ == \"o|\") {\n            current_duration = 2;\n        } else if (current_note\
    \ == \".|\") {\n            current_duration = 1;\n        }\n        result.push_back(current_duration);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for (auto note\
    \ : music_string) {\n        switch (note) {\n            case 'o':\n        \
    \        result.push_back(4);\n                break;\n            case '|':\n\
    \                result.back() /= 2;\n                break;\n            case\
    \ '.':\n                result.back() -= 1;\n                break;\n        \
    \    default:\n                break;\n        }\n    }\n    return result;",
  "    std::vector<long> beats;\n    for (int i = 0; i < music_string.size(); ++i)\
    \ {\n        if (music_string[i] == 'o') {\n            if (music_string[i + 1]\
    \ == ' ') {\n                beats.push_back(4);\n            } else if (music_string[i\
    \ + 1] == '|') {\n                beats.push_back(2);\n            }\n       \
    \ } else if (music_string[i] == '.') {\n            beats.push_back(1);\n    \
    \    }\n    }\n    return beats;", "    // Put your code here\n    std::vector<long>\
    \ result;\n    std::stringstream ss(music_string);\n    std::string str;\n   \
    \ while(ss>>str){\n        if(str==\"o\")\n            result.push_back(4);\n\
    \        else if(str==\"o|\")\n            result.push_back(2);\n        else\
    \ if(str==\".|\")\n            result.push_back(1);\n    }\n    return result;",
  "    std::vector<long> a;\n    int i=0;\n    int count=0;\n    while(i<music_string.length())\n\
    \    {\n        if(music_string[i]=='o')\n        {\n            if(music_string[i+1]=='|')\n\
    \            {\n                a.push_back(2);\n                i=i+2;\n    \
    \        }\n            else\n            {\n                a.push_back(4);\n\
    \                i++;\n            }\n        }\n        else\n        {\n   \
    \         a.push_back(1);\n            i=i+2;\n        }\n    }\n    return a;",
  "    // TODO: implement\n    // Hint: o o| .| o| o| .| .| .| .| o o\n    // Hint:\
    \ 0 1 2 3 4 5 6 7 8 9 10 11 12\n    //       o o| .| o| o| .| .| .| .| o o\n \
    \   //       0 1 3 4 5 7 8 9 10 12 13 14 15\n    std::vector<long> v;\n    for\
    \ (int i = 0; i < music_string.size(); ++i) {\n        if (music_string[i] ==\
    \ 'o') {\n            if (music_string[i + 1] == ' ') {\n                v.push_back(4);\n\
    \            } else {\n                v.push_back(2);\n                ++i;\n\
    \            }\n        } else if (music_string[i] == '.') {\n            v.push_back(1);\n\
    \            ++i;\n        }\n    }\n    return v;", "    std::vector<long> m_durations;\n\
    \    for (size_t i = 0; i < music_string.size(); ++i) {\n        switch (music_string[i])\
    \ {\n            case 'o':\n                m_durations.push_back(4);\n      \
    \          break;\n            case '.':\n                m_durations.push_back(1);\n\
    \                break;\n            case '|':\n                m_durations.push_back(2);\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return m_durations;", "\tstd::vector<long> result;\n\tstd::string\
    \ temp_string = \"\";\n\tfor (int i = 0; i < music_string.length(); i++) {\n\t\
    \tif (music_string[i] == ' ') {\n\t\t\tif (temp_string == \"o\") {\n\t\t\t\tresult.push_back(4);\n\
    \t\t\t}\n\t\t\telse if (temp_string == \"o|\") {\n\t\t\t\tresult.push_back(2);\n\
    \t\t\t}\n\t\t\telse if (temp_string == \".|\") {\n\t\t\t\tresult.push_back(1);\n\
    \t\t\t}\n\t\t\ttemp_string = \"\";\n\t\t}\n\t\telse {\n\t\t\ttemp_string = temp_string\
    \ + music_string[i];\n\t\t}\n\t}\n\tif (temp_string == \"o\") {\n\t\tresult.push_back(4);\n\
    \t}\n\telse if (temp_string == \"o|\") {\n\t\tresult.push_back(2);\n\t}\n\telse\
    \ if (temp_string == \".|\") {\n\t\tresult.push_back(1);\n\t}\n\treturn result;",
  "    vector<long> beat;\n    vector<char> index;\n    vector<char>::iterator it;\n\
    \    int i = 0;\n    for(;i<music_string.length();i++){\n        if(music_string[i]=='\
    \ ')\n            continue;\n        else\n            index.push_back(music_string[i]);\n\
    \    }\n    i = 0;\n    for(it = index.begin();it!=index.end();it++){\n      \
    \  if(*it=='o'){\n            beat.push_back(4);\n            continue;\n    \
    \    }\n        if(*it=='o' && *(it+1)=='|'){\n            beat.push_back(2);\n\
    \            it++;\n            continue;\n        }\n        if(*it=='.' && *(it+1)=='|'){\n\
    \            beat.push_back(1);\n            it++;\n            continue;\n  \
    \      }\n    }\n    return beat;", "    //                                  \
    \ o o| .| o| o| .| .| .| .| o o\n    std::vector<long> ret = {4, 2, 1, 2, 2, 1,\
    \ 1, 1, 1, 4, 4};\n    return ret;", "    std::vector<long> result;\n    std::vector<char>\
    \ charVec;\n    std::vector<char>::iterator it;\n    int length = music_string.length();\n\
    \    int flag = 0;\n    for(int i = 0; i < length; i++) {\n        if(music_string[i]\
    \ == 'o') {\n            if(i+1 < length && music_string[i+1] == '|') {\n    \
    \            flag = 1;\n                continue;\n            }\n           \
    \ else {\n                flag = 2;\n                continue;\n            }\n\
    \        }\n        else if(music_string[i] == '.') {\n            if(i+1 < length\
    \ && music_string[i+1] == '|') {\n                flag = 3;\n                continue;\n\
    \            }\n        }\n        else if(music_string[i] == ' ') {\n       \
    \     if(flag == 1) {\n                result.push_back(2);\n            }\n \
    \           else if(flag == 2) {\n                result.push_back(4);\n     \
    \       }\n            else if(flag == 3) {\n                result.push_back(1);\n\
    \            }\n            flag = 0;\n        }\n    }\n    if(flag == 1) {\n\
    \        result.push_back(2);\n    }\n    else if(flag == 2) {\n        result.push_back(4);\n\
    \    }\n    else if(flag == 3) {\n        result.push_back(1);\n    }\n    return\
    \ result;", "    std::vector<long> ret_vec;\n    for(int index = 0; index < music_string.length();\
    \ index++){\n        if(music_string[index] == ' '){\n            continue;\n\
    \        }\n        if(music_string[index] == 'o'){\n            ret_vec.push_back(4);\n\
    \        }\n        if(music_string[index] == '.'){\n            ret_vec.push_back(1);\n\
    \        }\n        if(music_string[index] == '|'){\n            if(music_string[index-1]\
    \ == '.'){\n                ret_vec.push_back(2);\n            }\n        }\n\
    \    }\n    return ret_vec;", "\tstd::vector<long> result;\n\tfor (int i = 0;\
    \ i < music_string.size(); i++) {\n\t\tif (music_string[i] == 'o') {\n\t\t\tif\
    \ (music_string[i + 1] == '|') {\n\t\t\t\tresult.push_back(2);\n\t\t\t\ti++;\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push_back(4);\n\t\t\t}\n\t\t}\n\t\telse\
    \ if (music_string[i] == '.') {\n\t\t\tresult.push_back(1);\n\t\t\ti++;\n\t\t\
    }\n\t}\n\treturn result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(music_string);\n    std::string temp;\n    while (ss >> temp) {\n       \
    \ if (temp == \"o\")\n            result.push_back(4);\n        else if (temp\
    \ == \"o|\")\n            result.push_back(2);\n        else if (temp == \".|\"\
    )\n            result.push_back(1);\n    }\n    return result;", "\tstd::vector<long>\
    \ result;\n\tstd::string delimiter = \" \";\n\tstd::string token;\n\tstd::vector<std::string>\
    \ myvector;\n\tsize_t pos = 0;\n\twhile ((pos = music_string.find(delimiter))\
    \ != std::string::npos) {\n\t\ttoken = music_string.substr(0, pos);\n\t\tmyvector.push_back(token);\n\
    \t\tmusic_string.erase(0, pos + delimiter.length());\n\t}\n\tmyvector.push_back(music_string);\n\
    \tfor (int i = 0; i < myvector.size(); i++) {\n\t\tif (myvector[i] == \"o\")\n\
    \t\t\tresult.push_back(4);\n\t\telse if (myvector[i] == \"o|\")\n\t\t\tresult.push_back(2);\n\
    \t\telse if (myvector[i] == \".|\")\n\t\t\tresult.push_back(1);\n\t}\n\treturn\
    \ result;", "\tstd::vector<long> result;\n\tfor (int i = 0; i < music_string.size();\
    \ i++) {\n\t\tif (music_string[i] == 'o') {\n\t\t\tif (music_string[i + 1] ==\
    \ ' ') {\n\t\t\t\tresult.push_back(4);\n\t\t\t}\n\t\t\telse if (music_string[i\
    \ + 1] == '|') {\n\t\t\t\tresult.push_back(2);\n\t\t\t\ti += 1;\n\t\t\t}\n\t\t\
    }\n\t\telse if (music_string[i] == '.') {\n\t\t\tif (music_string[i + 1] == '|')\
    \ {\n\t\t\t\tresult.push_back(1);\n\t\t\t\ti += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;", "    std::vector<long> result;\n    long length = music_string.length();\n\
    \    long j = 0;\n    while(j < length) {\n        if(music_string[j] == 'o')\
    \ {\n            if(music_string[j+1] == ' ') {\n                result.push_back(4);\n\
    \                j+=2;\n            }\n            else if(music_string[j+1] ==\
    \ '|') {\n                result.push_back(2);\n                j+=3;\n      \
    \      }\n        }\n        else if(music_string[j] == '.') {\n            result.push_back(1);\n\
    \            j+=3;\n        }\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  long beats = 1;\n  for (int i = 0; i < music_string.size(); i++)\
    \ {\n    if (music_string[i] == 'o') {\n      beats += 1;\n    } else if (music_string[i]\
    \ == '.') {\n      result.push_back(beats);\n      beats = 1;\n    } else if (music_string[i]\
    \ == '|') {\n      if (beats == 2) {\n        result.push_back(beats);\n     \
    \   beats = 1;\n      } else {\n        beats = 1;\n      }\n    }\n  }\n  result.push_back(beats);\n\
    \  return result;", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    //std::cout << music_string << std::endl;\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   std::vector<long> result;\n    long beats = 0;\n    bool num = false;\n  \
    \  for (auto it = music_string.begin(); it != music_string.end(); ++it) {\n  \
    \      switch (*it) {\n            case 'o':\n                beats += 4;\n  \
    \              num = true;\n                break;\n            case '|':\n  \
    \              if (num) {\n                    result.push_back(beats);\n    \
    \                beats = 0;\n                    num = false;\n              \
    \  }\n                break;\n            case '.':\n                beats +=\
    \ 1;\n                num = true;\n                break;\n            case '\
    \ ':\n                if (num) {\n                    result.push_back(beats);\n\
    \                    beats = 0;\n                    num = false;\n          \
    \      }\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    if (num) {\n        result.push_back(beats);\n    }\n \
    \   return result;", "    std::vector<long> final_vector;\n    std::string substring;\n\
    \    std::string o_string= \"o|\";\n    std::string two_string= \"..|\";\n   \
    \ std::string o_string_2= \"o\";\n    int o_counter = 0;\n    int two_counter\
    \ = 0;\n    int o_counter_2 = 0;\n    long four_counter = 0;\n    long two_counter_2\
    \ = 0;\n    long one_counter = 0;\n    int i = 0;\n    int j = 1;\n    for(;i<music_string.length();)\n\
    \    {\n        substring = music_string.substr(i,j);\n        if(substring ==\
    \ o_string)\n        {\n            o_counter++;\n            i = i+2;\n     \
    \   }\n        else if(substring == two_string)\n        {\n            two_counter++;\n\
    \            i = i+3;\n        }\n        else if(substring == o_string_2)\n \
    \       {\n            o_counter_2++;\n            i = i+1;\n        }\n     \
    \   if(o_counter == 1)\n        {\n            four_counter = four_counter + 4;\n\
    \            final_vector.push_back(four_counter);\n            four_counter =\
    \ 0;\n            o_counter = 0;\n        }\n        if(two_counter == 1)\n  \
    \      {\n            two_counter_2 = two_counter_2 + 2;\n            final_vector.push_back(two_counter_2);\n\
    \            two_counter_2 = 0;\n            two_counter = 0;\n        }\n   \
    \     if(o_counter_2 == 1)\n        {\n            one_counter = one_counter +\
    \ 1;\n            final_vector.push_back(one_counter);\n            one_counter\
    \ = 0;\n            o_counter_2 = 0;\n        }\n    }\n    return final_vector;",
  "  // Implement me!\n  std::vector<long> music;\n  bool prev_is_o = false;\n  for\
    \ (auto c : music_string) {\n    if (c == 'o') {\n      if (prev_is_o) {\n   \
    \     music.back() += 4;\n      } else {\n        music.push_back(4);\n      }\n\
    \      prev_is_o = true;\n    } else if (c == '|') {\n      if (prev_is_o) {\n\
    \        music.back() /= 2;\n      } else {\n        music.push_back(2);\n   \
    \   }\n      prev_is_o = false;\n    } else if (c == '.') {\n      music.push_back(1);\n\
    \      prev_is_o = false;\n    }\n  }\n  return music;", "  std::vector<long>\
    \ beats;\n  //TODO: parse music string\n  return beats;", "  // here we just collect\
    \ the result into vector, as asked in problem.\n  // If we had to implement something\
    \ in real-life, we would allocate result array\n  // and fill it with results.\n\
    \  std::vector<long> result;\n  for (size_t i = 0; i < music_string.size(); i++)\
    \ {\n    switch (music_string[i]) {\n      case 'o':\n        result.push_back(4);\n\
    \        break;\n      case '|':\n        result.push_back(2);\n        break;\n\
    \      case '.':\n        result.push_back(1);\n        break;\n      default:\n\
    \        break;\n    }\n  }\n  return result;", "\tstd::vector<long> out;\n\t\
    for (auto it = music_string.begin(); it != music_string.end(); ++it) {\n\t\tswitch\
    \ (*it) {\n\t\tcase 'o':\n\t\t\tout.push_back(4);\n\t\t\tif (*(it + 1) == '|')\
    \ {\n\t\t\t\tit++;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '.':\n\t\t\tout.push_back(1);\n\
    \t\t\tit++;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn out;", "    std::vector<long>\
    \ result;\n    // write your code here\n    std::stringstream ss(music_string);\n\
    \    std::string tok;\n    while(std::getline(ss, tok, ' ')) {\n        if(tok.find('o')\
    \ != std::string::npos) {\n            if(tok.find('|') != std::string::npos)\
    \ {\n                result.push_back(2);\n            } else {\n            \
    \    result.push_back(4);\n            }\n        } else {\n            result.push_back(1);\n\
    \        }\n    }\n    return result;", "    std::vector<long> notes;\n    long\
    \ note = 0;\n    std::string temp_note;\n    std::vector<std::string> parsed_notes;\n\
    \    std::stringstream music_stream(music_string);\n    while (std::getline(music_stream,\
    \ temp_note, ' ')) {\n        if (temp_note.size() == 1) {\n            note =\
    \ 4;\n        } else if (temp_note.size() == 2) {\n            note = 2;\n   \
    \     } else if (temp_note.size() == 3) {\n            note = 1;\n        }\n\
    \        notes.push_back(note);\n    }\n    return notes;", "    std::vector<long>\
    \ result;\n    std::string rest;\n    int count = 0;\n    for (int i = 0; i <\
    \ music_string.size(); i++) {\n        if (music_string[i] == ' ') {\n       \
    \     if (rest.size() == 1) {\n                result.push_back(4);\n        \
    \    } else if (rest.size() == 3) {\n                result.push_back(2);\n  \
    \          } else if (rest.size() == 4) {\n                result.push_back(1);\n\
    \            }\n            rest.clear();\n        } else {\n            rest\
    \ += music_string[i];\n        }\n    }\n    if (rest.size() == 1) {\n       \
    \ result.push_back(4);\n    } else if (rest.size() == 3) {\n        result.push_back(2);\n\
    \    } else if (rest.size() == 4) {\n        result.push_back(1);\n    }\n   \
    \ return result;", "    std::vector<long> beats;\n    int counter = 0;\n    for\
    \ (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i] ==\
    \ 'o') {\n            if (music_string[i + 1] == '|') {\n                beats.push_back(2);\n\
    \                counter += 2;\n                i++;\n            } else {\n \
    \               beats.push_back(4);\n                counter += 4;\n         \
    \   }\n        } else if (music_string[i] == '.') {\n            if (music_string[i\
    \ + 1] == '|') {\n                beats.push_back(1);\n                counter\
    \ += 1;\n                i++;\n            }\n        }\n    }\n    if (counter\
    \ != 10) {\n        return {};\n    }\n    return beats;", "    long length =\
    \ music_string.length();\n    std::vector<long> vec;\n    for(long i = 0; i <\
    \ length; i++){\n        if(music_string[i] == 'o'){\n            vec.push_back(4);\n\
    \        }\n        else if(music_string[i] == '.'){\n            vec.push_back(1);\n\
    \        }\n        else if(music_string[i] == '|'){\n            vec.back() =\
    \ vec.back() / 2;\n        }\n    }\n    return vec;", "    std::vector<long>\
    \ res;\n    int len = 0;\n    char p;\n    for (int i = 0; i < music_string.size();\
    \ i++) {\n        switch (music_string[i]) {\n            case 'o':\n        \
    \        len += 4;\n                break;\n            case '|':\n          \
    \      len += 2;\n                break;\n            case '.':\n            \
    \    len += 1;\n                break;\n            case ' ':\n              \
    \  res.push_back(len);\n                len = 0;\n                break;\n   \
    \     }\n    }\n    res.push_back(len);\n    return res;", "    std::vector<long>\
    \ result;\n    std::string s;\n    std::istringstream iss(music_string);\n   \
    \ while (iss >> s) {\n        if (s == \"o\") {\n            result.push_back(4);\n\
    \        } else if (s == \"o|\") {\n            result.push_back(2);\n       \
    \ } else if (s == \".|\") {\n            result.push_back(1);\n        }\n   \
    \ }\n    return result;", "\tstd::vector<long> output;\n\tif (music_string.empty())\n\
    \t\treturn output;\n\tstd::istringstream ss(music_string);\n\tstd::string token;\n\
    \twhile (std::getline(ss, token, ' ')) {\n\t\tif (token.compare(\"o\") == 0)\n\
    \t\t\toutput.push_back(4);\n\t\telse if (token.compare(\"o|\") == 0)\n\t\t\toutput.push_back(2);\n\
    \t\telse if (token.compare(\".|\") == 0)\n\t\t\toutput.push_back(1);\n\t}\n\t\
    return output;", "\tstd::string temp;\n\tstd::stringstream ss(music_string);\n\
    \tstd::vector<long> beats;\n\twhile (ss >> temp) {\n\t\tif (temp == \"o\") {\n\
    \t\t\tbeats.push_back(4);\n\t\t}\n\t\telse if (temp == \"o|\") {\n\t\t\tbeats.push_back(2);\n\
    \t\t}\n\t\telse if (temp == \".|\") {\n\t\t\tbeats.push_back(1);\n\t\t}\n\t}\n\
    \treturn beats;", "    std::vector<long> out;\n    for (auto it = music_string.begin();\
    \ it != music_string.end(); ++it) {\n        auto c = *it;\n        auto next\
    \ = std::next(it);\n        if (c == 'o') {\n            if (next != music_string.end()\
    \ && *next == '|') {\n                out.push_back(2);\n                ++it;\n\
    \            } else {\n                out.push_back(4);\n            }\n    \
    \    } else if (c == '.') {\n            if (next != music_string.end() && *next\
    \ == '|') {\n                out.push_back(1);\n                ++it;\n      \
    \      }\n        }\n    }\n    return out;", "    // write your code here\n \
    \   std::vector<long> result;\n    std::string temp;\n    for(auto ch: music_string){\n\
    \        if(ch == ' ')\n            result.push_back(temp.size());\n        else\n\
    \            temp.push_back(ch);\n    }\n    result.push_back(temp.size());\n\
    \    return result;", "  std::vector<long> result;\n  std::vector<char> array(music_string.begin(),\
    \ music_string.end());\n  for (int i = 0; i < array.size(); ++i) {\n    if (array[i]\
    \ == 'o') {\n      if (array[i + 1] == '|') {\n        result.push_back(2);\n\
    \        ++i;\n      } else {\n        result.push_back(4);\n      }\n    } else\
    \ if (array[i] == '.') {\n      if (array[i + 1] == '|') {\n        result.push_back(1);\n\
    \        ++i;\n      }\n    }\n  }\n  return result;", "    std::vector<long>\
    \ v;\n    for(int i=0;i<music_string.size();i++)\n    {\n        if(music_string[i]=='o')\n\
    \        {\n            if(music_string[i+1]==' ')\n            {\n          \
    \      v.push_back(4);\n            }\n            else if(music_string[i+1]=='|')\n\
    \            {\n                v.push_back(2);\n                i++;\n      \
    \      }\n        }\n        else if(music_string[i]=='.')\n        {\n      \
    \      if(music_string[i+1]=='|')\n            {\n                v.push_back(1);\n\
    \                i++;\n            }\n        }\n    }\n    return v;", "\t//\
    \ Implement this function\n\tstd::vector<long> result;\n\tchar current_symbol\
    \ = music_string[0];\n\tlong counter = 0;\n\tfor (long i = 0; i < music_string.size();\
    \ i++) {\n\t\tif (music_string[i] == current_symbol) {\n\t\t\tcounter++;\n\t\t\
    }\n\t\telse {\n\t\t\tif (current_symbol == 'o') {\n\t\t\t\tresult.push_back(4\
    \ * counter);\n\t\t\t}\n\t\t\telse if (current_symbol == '.') {\n\t\t\t\tresult.push_back(1\
    \ * counter);\n\t\t\t}\n\t\t\telse if (current_symbol == '|') {\n\t\t\t\tresult.push_back(2\
    \ * counter);\n\t\t\t}\n\t\t\tcurrent_symbol = music_string[i];\n\t\t\tcounter\
    \ = 1;\n\t\t}\n\t}\n\tif (current_symbol == 'o') {\n\t\tresult.push_back(4 * counter);\n\
    \t}\n\telse if (current_symbol == '.') {\n\t\tresult.push_back(1 * counter);\n\
    \t}\n\telse if (current_symbol == '|') {\n\t\tresult.push_back(2 * counter);\n\
    \t}\n\treturn result;", "    std::vector<long> result;\n    std::stringstream\
    \ ss(music_string);\n    std::string token;\n    while (std::getline(ss, token,\
    \ ' ')) {\n        if (token == \"o\") {\n            result.push_back(4);\n \
    \       } else if (token == \"o|\") {\n            result.push_back(2);\n    \
    \    } else if (token == \".|\") {\n            result.push_back(1);\n       \
    \ }\n    }\n    return result;", "  std::vector<long> beats;\n  // Insert the\
    \ code from the task below this line:\n  std::string music = music_string;\n \
    \ int len = music.length();\n  for(int i = 0; i < len; i++) {\n    if(music[i]\
    \ == 'o') {\n      beats.push_back(4);\n    }\n    else if(music[i] == '.') {\n\
    \      beats.push_back(1);\n    }\n    else if(music[i] == ' ') {\n      beats.push_back(0);\n\
    \    }\n    else if(music[i] == '|') {\n      beats.push_back(0);\n    }\n  }\n\
    \  // Insert the code from the task above this line:\n  return beats;", "\tstd::vector<long>\
    \ music;\n\tstd::istringstream in(music_string);\n\tstd::string s;\n\twhile (in\
    \ >> s) {\n\t\tif (s.size() == 1) {\n\t\t\tmusic.push_back(4);\n\t\t}\n\t\telse\
    \ if (s.size() == 2) {\n\t\t\tmusic.push_back(2);\n\t\t}\n\t\telse {\n\t\t\tmusic.push_back(1);\n\
    \t\t}\n\t}\n\treturn music;", "\tstd::vector<long> beats;\n\tif (music_string.empty())\
    \ {\n\t\treturn beats;\n\t}\n\tfor (char note : music_string) {\n\t\tswitch (note)\
    \ {\n\t\tcase 'o':\n\t\t\tbeats.push_back(4);\n\t\t\tbreak;\n\t\tcase '|':\n\t\
    \t\tbeats.push_back(2);\n\t\t\tbreak;\n\t\tcase '.':\n\t\t\tbeats.push_back(1);\n\
    \t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn beats;", "\tstd::vector<long>\
    \ tempo;\n\tstd::stringstream ss(music_string);\n\tstd::string note;\n\twhile\
    \ (std::getline(ss, note, ' ')) {\n\t\tif (note == \"o\") {\n\t\t\ttempo.push_back(4);\n\
    \t\t}\n\t\telse if (note == \"o|\") {\n\t\t\ttempo.push_back(2);\n\t\t}\n\t\t\
    else if (note == \".|\") {\n\t\t\ttempo.push_back(1);\n\t\t}\n\t}\n\treturn tempo;",
  "    std::vector<long> result;\n    int n = music_string.size();\n    std::string\
    \ str;\n    for(int i = 0; i < n; i++) {\n        if(music_string[i] == ' ') {\n\
    \            if(str == \"o\") {\n                result.push_back(4);\n      \
    \      }\n            else if(str == \"o|\") {\n                result.push_back(2);\n\
    \            }\n            else if(str == \".|\") {\n                result.push_back(1);\n\
    \            }\n            str = \"\";\n        }\n        else {\n         \
    \   str += music_string[i];\n        }\n    }\n    if(str == \"o\") {\n      \
    \  result.push_back(4);\n    }\n    else if(str == \"o|\") {\n        result.push_back(2);\n\
    \    }\n    else if(str == \".|\") {\n        result.push_back(1);\n    }\n  \
    \  return result;", "  std::vector<long> result;\n  for (int i = 0; i < music_string.size();\
    \ i++) {\n    switch (music_string[i]) {\n      case 'o':\n        result.push_back(4);\n\
    \        break;\n      case '|':\n        result.push_back(result.back() / 2);\n\
    \        break;\n      case '.':\n        result.pop_back();\n        break;\n\
    \      default:\n        break;\n    }\n  }\n  return result;", "    std::vector<long>\
    \ beats;\n    std::stringstream ss(music_string);\n    char token;\n    int beats_time\
    \ = 0;\n    while (ss >> token) {\n        if (token == 'o') {\n            if\
    \ (ss.peek() == ' ') {\n                beats_time = 4;\n            } else {\n\
    \                ss >> token;\n                assert(token == '|');\n       \
    \         beats_time = 2;\n            }\n        } else {\n            assert(token\
    \ == '.');\n            ss >> token;\n            assert(token == '|');\n    \
    \        beats_time = 1;\n        }\n        beats.push_back(beats_time);\n  \
    \  }\n    return beats;", "    long n=music_string.length();\n    std::vector<long>v;\n\
    \    for(long i=0;i<n;i++)\n    {\n        if(music_string[i]=='o')\n        {\n\
    \            if(music_string[i+1]=='|')\n            {\n                v.push_back(2);\n\
    \                i++;\n            }\n            else if(music_string[i+1]=='\
    \ ')\n            {\n                v.push_back(4);\n            }\n        }\n\
    \        else if(music_string[i]=='.')\n        {\n            if(music_string[i+1]=='|')\n\
    \            {\n                v.push_back(1);\n                i++;\n      \
    \      }\n        }\n    }\n    return v;", "    std::vector<long> beats;\n  \
    \  std::string temp = \"\";\n    for (auto& c : music_string) {\n        if (c\
    \ == ' ') {\n            if (temp == \"o\") {\n                beats.push_back(4);\n\
    \            } else if (temp == \"o|\") {\n                beats.push_back(2);\n\
    \            } else if (temp == \".|\") {\n                beats.push_back(1);\n\
    \            }\n            temp = \"\";\n        } else {\n            temp +=\
    \ c;\n        }\n    }\n    return beats;", "    std::vector<long> list;\n   \
    \ int n = music_string.length();\n    int i = 0;\n    while(i < n) {\n       \
    \ if(music_string[i] == 'o') {\n            if(music_string[i+1] == ' ') {\n \
    \               list.push_back(4);\n                i += 2;\n            }\n \
    \           else {\n                if(music_string[i+2] == ' ') {\n         \
    \           list.push_back(2);\n                    i += 3;\n                }\n\
    \                else {\n                    list.push_back(4);\n            \
    \        i += 4;\n                }\n            }\n        }\n        else {\n\
    \            if(music_string[i+1] == ' ') {\n                list.push_back(1);\n\
    \                i += 2;\n            }\n            else {\n                list.push_back(2);\n\
    \                i += 3;\n            }\n        }\n    }\n    return list;",
  "    std::vector<long> notes;\n    int note_count = 0;\n    for (int i = 0; i <\
    \ music_string.length(); i++) {\n        if (music_string[i] == ' ' || music_string[i]\
    \ == 'o') {\n            note_count++;\n        } else if (music_string[i] ==\
    \ '|') {\n            if (music_string[i-1] == 'o') {\n                notes.push_back(note_count);\n\
    \                note_count = 0;\n            } else if (music_string[i-1] ==\
    \ '.') {\n                notes.push_back(note_count);\n                note_count\
    \ = 0;\n            }\n        }\n    }\n    return notes;", "    vector<long>\
    \ beats;\n    char current;\n    for(int i = 0; i < music_string.length(); ++i)\
    \ {\n        current = music_string[i];\n        if(current == 'o') {\n      \
    \      beats.push_back(4);\n        } else if(current == '.') {\n            beats.push_back(1);\n\
    \        } else if(current == '|') {\n            beats.push_back(2);\n      \
    \  }\n    }\n    return beats;", "    // Put your code here\n    std::vector<long>\
    \ vec;\n    for(int i=0;i<music_string.size();i++)\n    {\n        if(music_string[i]=='o')\n\
    \        {\n            if(music_string[i+1]==' ')\n            {\n          \
    \      vec.push_back(4);\n            }\n            else\n            {\n   \
    \             vec.push_back(2);\n                i+=2;\n            }\n      \
    \  }\n        else\n        {\n            vec.push_back(1);\n            i+=2;\n\
    \        }\n    }\n    return vec;", "\tstd::vector<long> result;\n\t// TODO:\
    \ parse music_string and populate result with correct values\n\t// Use `result.push_back(x)`\
    \ to append the number of beats a note lasts to the result.\n\tchar arr[100];\n\
    \tlong m=0;\n\tfor(long i=0;i<music_string.length();i++)\n\t{\n\t\tif(music_string[i]!='\
    \ ')\n\t\t\tarr[m++]=music_string[i];\n\t\telse\n\t\t{\n\t\t\tarr[m]='\\0';\n\t\
    \t\tstd::string s(arr);\n\t\t\tif(s==\"o\")\n\t\t\t\tresult.push_back(4);\n\t\t\
    \telse if(s==\"o|\")\n\t\t\t\tresult.push_back(2);\n\t\t\telse if(s==\".|\")\n\
    \t\t\t\tresult.push_back(1);\n\t\t\tm=0;\n\t\t}\n\t}\n\tstd::string s(arr);\n\t\
    if(s==\"o\")\n\t\tresult.push_back(4);\n\telse if(s==\"o|\")\n\t\tresult.push_back(2);\n\
    \telse if(s==\".|\")\n\t\tresult.push_back(1);\n\treturn result;", "    std::vector<long>\
    \ beats;\n    int counter = 0;\n    for (int i = 0; i < music_string.size(); i++)\
    \ {\n        if (music_string[i] == 'o') {\n            if (music_string[i + 1]\
    \ == ' ' || i == music_string.size() - 1) {\n                beats.push_back(4);\n\
    \            } else if (music_string[i + 1] == '|') {\n                beats.push_back(2);\n\
    \                i++;\n            }\n        } else if (music_string[i] == '.')\
    \ {\n            if (music_string[i + 1] == '|') {\n                beats.push_back(1);\n\
    \                i++;\n            }\n        }\n    }\n    return beats;", " \
    \ std::vector<long> output;\n  long count = 0;\n  std::vector<char> music;\n \
    \ for (int i = 0; i < music_string.size(); i++) {\n    if (music_string[i] ==\
    \ ' ') {\n      if (count == 4) {\n        output.push_back(count);\n        count\
    \ = 0;\n      } else if (count == 2) {\n        output.push_back(count);\n   \
    \     count = 0;\n      } else if (count == 1) {\n        output.push_back(count);\n\
    \        count = 0;\n      }\n    } else if (music_string[i] == 'o') {\n     \
    \ if (music_string[i + 1] == ' ') {\n        count = count + 4;\n      } else\
    \ if (music_string[i + 1] == '|') {\n        count = count + 2;\n      }\n   \
    \ } else if (music_string[i] == '.') {\n      if (music_string[i + 1] == '|')\
    \ {\n        count = count + 1;\n      }\n    }\n  }\n  if (count == 4) {\n  \
    \  output.push_back(count);\n    count = 0;\n  } else if (count == 2) {\n    output.push_back(count);\n\
    \    count = 0;\n  } else if (count == 1) {\n    output.push_back(count);\n  \
    \  count = 0;\n  }\n  return output;", "    std::vector<long> res;\n    std::stringstream\
    \ music{music_string};\n    char ch;\n    while(music >> ch){\n        if(ch ==\
    \ 'o'){\n            if(music >> ch){\n                if(ch == '|')\n       \
    \             res.push_back(2);\n                else{\n                    res.push_back(4);\n\
    \                    music.unget();\n                }\n            }\n      \
    \      else\n                res.push_back(4);\n        }\n        else{\n   \
    \         res.push_back(1);\n            music.ignore(2);\n        }\n    }\n\
    \    return res;", "\tint music_string_size = music_string.size();\n\tstd::vector<long>\
    \ result;\n\tint i = 0;\n\t// Iterate through the music string\n\twhile (i < music_string_size)\
    \ {\n\t\tint num_of_notes = 1;\n\t\t// Check if the note is at the end of a bar\n\
    \t\tif (music_string[i + 1] == '|') {\n\t\t\t// If so, set the number of notes\
    \ to 2\n\t\t\tnum_of_notes = 2;\n\t\t\t// Update the start of the next note\n\t\
    \t\ti += 2;\n\t\t}\n\t\t// Check if the note is a quater note\n\t\telse if (music_string[i\
    \ + 1] == '.') {\n\t\t\t// If so, set the number of notes to 1\n\t\t\tnum_of_notes\
    \ = 1;\n\t\t\t// Update the start of the next note\n\t\t\ti += 2;\n\t\t}\n\t\t\
    // Check if the note is a whole note\n\t\telse if (music_string[i + 1] == ' ')\
    \ {\n\t\t\t// If so, set the number of notes to 4\n\t\t\tnum_of_notes = 4;\n\t\
    \t\t// Update the start of the next note\n\t\t\ti += 2;\n\t\t}\n\t\t// Add the\
    \ number of notes to the result vector\n\t\tresult.push_back(num_of_notes);\n\t\
    }\n\treturn result;", '    // your code here', "    std::vector<long> numbers;\n\
    \    int pos = 0;\n    while(pos < music_string.size()) {\n        std::string\
    \ sub_string = music_string.substr(pos, 2);\n        if(sub_string == \"o \" ||\
    \ sub_string == \"o|\") {\n            numbers.push_back(4);\n            pos\
    \ += 2;\n        } else if(sub_string == \".|\") {\n            numbers.push_back(1);\n\
    \            pos += 2;\n        } else {\n            numbers.push_back(2);\n\
    \            pos += 3;\n        }\n    }\n    return numbers;", "  std::vector<long>\
    \ a;\n  int len = music_string.length();\n  int i = 0;\n  long j = 0;\n  while(i<len){\n\
    \    if(music_string[i] == 'o'){\n      if(music_string[i+1] == ' ') {\n     \
    \   a.push_back(4);\n        i++;\n      }\n      else if(music_string[i+1] ==\
    \ '|'){\n        a.push_back(2);\n        i++;\n      }\n    }\n    else if(music_string[i]\
    \ == '.'){\n      if(music_string[i+1] == '|'){\n        a.push_back(1);\n   \
    \     i++;\n      }\n    }\n    i++;\n  }\n  return a;", "    std::vector<long>\
    \ res;\n    std::vector<std::string> arr = split(music_string);\n    for (auto\
    \ x : arr) {\n        if (x == \"o\") {\n            res.push_back(4);\n     \
    \   } else if (x == \"o|\") {\n            res.push_back(2);\n        } else if\
    \ (x == \".|\") {\n            res.push_back(1);\n        }\n    }\n    return\
    \ res;", "  std::vector<long> vec;\n  char last = music_string[0];\n  int count\
    \ = 0;\n  for (auto i = 0; i < music_string.size(); i++) {\n    if (music_string[i]\
    \ == last) {\n      count++;\n    } else {\n      switch (last) {\n        case\
    \ 'o':\n          vec.push_back(4);\n          break;\n        case '|':\n   \
    \       vec.push_back(2);\n          break;\n        case '.':\n          vec.push_back(1);\n\
    \          break;\n      }\n      last = music_string[i];\n      count = 1;\n\
    \    }\n  }\n  switch (last) {\n    case 'o':\n      vec.push_back(4);\n     \
    \ break;\n    case '|':\n      vec.push_back(2);\n      break;\n    case '.':\n\
    \      vec.push_back(1);\n      break;\n  }\n  return vec;", "\t// Functions's\
    \ body is missing. You should write it.\n\t// You can use whatever data structures\
    \ you want.\n\tstd::vector<long> result;\n\t\n\tfor(unsigned int i = 0; i < music_string.size();\
    \ i++) {\n\t\tif(music_string[i] == 'o') {\n\t\t\tif(music_string[i+1] == '|')\
    \ {\n\t\t\t\tresult.push_back(2);\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tresult.push_back(4);\n\
    \t\t\t}\n\t\t} else if(music_string[i] == '.') {\n\t\t\tresult.push_back(1);\n\
    \t\t\ti++;\n\t\t} else {\n\t\t\tcontinue;\n\t\t}\n\t}\n\t\n\treturn result;",
  "\tstd::vector<long> parsed(0);\n\tint len = music_string.length();\n\tfor (int\
    \ i = 0; i < len; i++) {\n\t\tif (music_string[i] == 'o') {\n\t\t\tif (music_string[i\
    \ + 1] == '|') {\n\t\t\t\tparsed.push_back(2);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\t\
    else if (music_string[i + 1] == ' ') {\n\t\t\t\tparsed.push_back(4);\n\t\t\t\t\
    i++;\n\t\t\t}\n\t\t}\n\t\telse if (music_string[i] == '.') {\n\t\t\tif (music_string[i\
    \ + 1] == '|') {\n\t\t\t\tparsed.push_back(1);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn parsed;", "    // Your code goes here\n    std::vector<long> result;\n\
    \    std::regex pattern(R\"(o|o\\||\\.\\|)\");\n    auto words_begin = std::sregex_iterator(music_string.begin(),\
    \ music_string.end(), pattern);\n    auto words_end = std::sregex_iterator();\n\
    \    for (std::sregex_iterator i = words_begin; i != words_end; ++i) {\n     \
    \   std::smatch match = *i;\n        std::string match_str = match.str();\n  \
    \      if (match_str == \"o\") {\n            result.push_back(4);\n        }\
    \ else if (match_str == \"o|\") {\n            result.push_back(2);\n        }\
    \ else if (match_str == \".|\") {\n            result.push_back(1);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    int beats = 0;\n\
    \    for (char c : music_string) {\n        if (c == ' ') {\n            if (beats\
    \ != 0)\n                result.push_back(beats);\n            beats = 0;\n  \
    \      } else if (c == 'o') {\n            beats += 4;\n        } else if (c ==\
    \ '|') {\n            if (beats != 0)\n                result.push_back(beats);\n\
    \            beats = 0;\n        } else if (c == '.') {\n            beats +=\
    \ 1;\n        }\n    }\n    if (beats != 0)\n        result.push_back(beats);\n\
    \    return result;", "    std::stringstream ss(music_string);\n    std::string\
    \ s;\n    std::vector<long> result;\n    while (std::getline(ss, s, ' ')) {\n\
    \        for (char c : s) {\n            if (c == '.') {\n                result.push_back(1);\n\
    \            } else if (c == 'o') {\n                result.push_back(4);\n  \
    \          } else if (c == '|') {\n                result.push_back(2);\n    \
    \        }\n        }\n    }\n    return result;", "    std::vector<long> result;\n\
    \    long cur_beat = 0;\n    while (cur_beat < music_string.size()) {\n      \
    \  if (music_string[cur_beat] == 'o') {\n            result.push_back(4);\n  \
    \          cur_beat += 1;\n        } else if (music_string[cur_beat] == '.') {\n\
    \            result.push_back(1);\n            cur_beat += 2;\n        } else\
    \ {\n            assert(false);\n        }\n    }\n    return result;", "    //\
    \ Your code goes here.\n    std::vector<long> result;\n    std::string::iterator\
    \ it = music_string.begin();\n    while(it != music_string.end()){\n        if\
    \ (*it == 'o'){\n            if (*(it+1) == ' '){\n                result.push_back(4);\n\
    \                it+=2;\n            }\n            else{\n                result.push_back(2);\n\
    \                it+=3;\n            }\n        }\n        else{\n           \
    \ result.push_back(1);\n            it+=3;\n        }\n    }\n    return result;",
  "    // Implement this function\n    std::vector<long>music_time;\n    for(int i=0;i<music_string.length();i++)\n\
    \    {\n        if(music_string[i]=='o')\n        {\n            music_time.push_back(4);\n\
    \        }\n        else if(music_string[i]=='o'&&music_string[i+1]=='|')\n  \
    \      {\n            music_time.push_back(2);\n            i++;\n        }\n\
    \        else if(music_string[i]=='.'&&music_string[i+1]=='|')\n        {\n  \
    \          music_time.push_back(1);\n            i++;\n        }\n    }\n    return\
    \ music_time;", "    int n = music_string.size();\n    std::vector<long> v;\n\
    \    int tmp;\n    for(int i = 0; i < n; i++) {\n        tmp = 0;\n        if(music_string[i]\
    \ == 'o') {\n            tmp = 4;\n            if(i != n - 1 && music_string[i\
    \ + 1] == '|') {\n                i++;\n                tmp = 2;\n           \
    \ }\n        }\n        else if(music_string[i] == '.') {\n            tmp = 1;\n\
    \            if(i != n - 1 && music_string[i + 1] == '|') {\n                i++;\n\
    \                tmp = 1;\n            }\n        }\n        v.push_back(tmp);\n\
    \    }\n    return v;", "\t// your code here\n\tstd::vector<long> beats;\n\tstd::vector<char>\
    \ note;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i]\
    \ == ' ' || music_string[i] == 'o' || music_string[i] == '|' || music_string[i]\
    \ == '.') {\n\t\t\tnote.push_back(music_string[i]);\n\t\t}\n\t}\n\tfor (int i\
    \ = 0; i < note.size(); i++) {\n\t\tif (note[i] == 'o') {\n\t\t\tif (note[i +\
    \ 1] == ' ') {\n\t\t\t\tbeats.push_back(4);\n\t\t\t}\n\t\t\telse if (note[i +\
    \ 1] == '|') {\n\t\t\t\tbeats.push_back(2);\n\t\t\t}\n\t\t}\n\t\telse if (note[i]\
    \ == '.') {\n\t\t\tif (note[i + 1] == '|') {\n\t\t\t\tbeats.push_back(1);\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn beats;", "    std::vector<long> music_list;\n    char\
    \ c;\n    for(int i=0;i<music_string.length();i++){\n        c=music_string[i];\n\
    \        if(c=='o')\n            music_list.push_back(4);\n        else if(c=='.')\n\
    \            music_list.push_back(1);\n        else\n            music_list.push_back(2);\n\
    \    }\n    return music_list;", "    std::vector<long> res;\n    int N = music_string.size();\n\
    \    for (int i = 0; i < N; i++) {\n        if (music_string[i] == 'o') {\n  \
    \          if (i + 1 < N && music_string[i + 1] == '|') {\n                res.push_back(2);\n\
    \                i++;\n            } else {\n                res.push_back(4);\n\
    \            }\n        } else if (music_string[i] == '.') {\n            if (i\
    \ + 1 < N && music_string[i + 1] == '|') {\n                res.push_back(1);\n\
    \                i++;\n            }\n        }\n    }\n    return res;", "  \
    \  std::vector<long> result;\n    char tmp;\n    int i = 0;\n    while (i < music_string.size())\
    \ {\n        if (music_string[i] == 'o') {\n            result.push_back(4);\n\
    \            i++;\n        } else if (music_string[i] == '.') {\n            result.push_back(1);\n\
    \            i += 2;\n        }\n    }\n    return result;", "\tstd::vector<long>\
    \ beats;\n\tint count=0;\n\tfor(int i=0;i<music_string.length();i++)\n\t{\n\t\t\
    if(music_string[i]=='o')\n\t\t{\n\t\t\tif(music_string[i+1]=='|')\n\t\t\t{\n\t\
    \t\t\tcount+=2;\n\t\t\t\tbeats.push_back(count);\n\t\t\t\tcount=0;\n\t\t\t\ti+=2;\n\
    \t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcount+=4;\n\t\t\t\tbeats.push_back(count);\n\
    \t\t\t\tcount=0;\n\t\t\t\ti+=1;\n\t\t\t}\n\t\t}\n\t\telse if(music_string[i]=='.')\n\
    \t\t{\n\t\t\tcount+=1;\n\t\t\tbeats.push_back(count);\n\t\t\tcount=0;\n\t\t\t\
    i+=2;\n\t\t}\n\t}\n\treturn beats;", "    std::vector<long> result;\n    std::string\
    \ cur_str;\n    for (auto i = 0; i < music_string.size(); ++i) {\n        if (music_string[i]\
    \ == ' ') {\n            if (cur_str == \"o\") {\n                result.push_back(4);\n\
    \            } else if (cur_str == \"o|\") {\n                result.push_back(2);\n\
    \            } else if (cur_str == \".|\") {\n                result.push_back(1);\n\
    \            }\n            cur_str.clear();\n        } else {\n            cur_str\
    \ += music_string[i];\n        }\n    }\n    if (cur_str == \"o\") {\n       \
    \ result.push_back(4);\n    } else if (cur_str == \"o|\") {\n        result.push_back(2);\n\
    \    } else if (cur_str == \".|\") {\n        result.push_back(1);\n    }\n  \
    \  return result;", "    // your code here\n    std::vector<long> beats;\n   \
    \ long count = 0;\n    int i = 0;\n    while(i < music_string.length()){\n   \
    \     if(music_string[i] == 'o'){\n            beats.push_back(4);\n         \
    \   i++;\n        }\n        else if(music_string[i] == '.'){\n            beats.push_back(1);\n\
    \            i+=2;\n        }\n        else{\n            i++;\n        }\n  \
    \  }\n    return beats;", "    \n\tstd::vector<long> beats;\n\tfor (int i = 0;\
    \ i < music_string.length(); i++) {\n\t\tif (music_string[i] == 'o')\n\t\t\tbeats.push_back(4);\n\
    \t\telse if (music_string[i] == '|')\n\t\t\tbeats.push_back(2);\n\t\telse if (music_string[i]\
    \ == '.')\n\t\t\tbeats.push_back(1);\n\t}\n\treturn beats;", "    long buffer;\n\
    \    std::vector<long> result;\n    std::istringstream str(music_string);\n  \
    \  while (str >> buffer) {\n        result.push_back(buffer);\n    }\n    return\
    \ result;", "    std::vector<long> out_vec;\n    std::string o(\"o\");\n    std::string\
    \ o_(\"o|\");\n    std::string dot_(\"\\\\.\\\\|\");\n    std::regex r(\"([o]+|[o]\\\
    \\|+|\\\\.\\\\|+)\");\n    std::sregex_iterator it(music_string.begin(), music_string.end(),\
    \ r);\n    std::sregex_iterator end;\n    while (it != end) {\n        std::smatch\
    \ match = *it;\n        std::string str = match.str();\n        long to_push;\n\
    \        if (str == o) {\n            to_push = 4;\n        } else if (str ==\
    \ o_) {\n            to_push = 2;\n        } else if (std::regex_match(str, std::regex(dot_)))\
    \ {\n            to_push = 1;\n        }\n        out_vec.push_back(to_push);\n\
    \        it++;\n    }\n    return out_vec;", "    std::vector<long> vector;\n\
    \    vector.reserve(music_string.size());\n    for (char ch : music_string) {\n\
    \        switch (ch) {\n            case 'o': vector.push_back(4); break;\n  \
    \          case '.': vector.push_back(1); break;\n            case '|': vector.push_back(2);\
    \ break;\n            default: break;\n        }\n    }\n    return vector;",
  '    return { 0 };', "    std::vector<long> arr;\n    for(long i=0;i<music_string.length();i++)\n\
    \    {\n        if(music_string[i]=='o')\n        {\n            if(music_string[i+1]=='|')\n\
    \            {\n                if(music_string[i+2]=='|')\n                {\n\
    \                    arr.push_back(4);\n                    i+=2;\n          \
    \      }\n                else\n                {\n                    arr.push_back(2);\n\
    \                    i++;\n                }\n            }\n            else\n\
    \            {\n                arr.push_back(4);\n            }\n        }\n\
    \        else if(music_string[i]=='.')\n        {\n            if(music_string[i+1]=='|')\n\
    \            {\n                arr.push_back(1);\n                i++;\n    \
    \        }\n        }\n    }\n    return arr;", "  std::vector<long> beats;\n\
    \  std::stringstream ss(music_string);\n  std::string token;\n  while (getline(ss,\
    \ token, ' '))\n  {\n    if (token.find('o') != std::string::npos)\n    {\n  \
    \    if (token.find('|') != std::string::npos)\n      {\n        beats.push_back(2);\n\
    \      }\n      else\n      {\n        beats.push_back(4);\n      }\n    }\n \
    \   else\n    {\n      beats.push_back(1);\n    }\n  }\n  return beats;", "  \
    \  std::vector<long> result;\n    for (char& ch: music_string) {\n        if (ch\
    \ == 'o') {\n            result.push_back(4);\n        } else if (ch == '|') {\n\
    \            result.push_back(1);\n        }\n    }\n    // \u0441\u0443\u043C\
    \u043C\u0438\u0440\u0443\u0435\u043C \u0441\u043E\u0441\u0435\u0434\u043D\u0438\
    \u0435 \u043E\u0434\u0438\u043D\u0430\u043A\u043E\u0432\u044B\u0435 \u044D\u043B\
    \u0435\u043C\u0435\u043D\u0442\u044B \u043C\u0430\u0441\u0441\u0438\u0432\u0430\
    \n    std::vector<long>::iterator it = result.begin();\n    while (it < result.end()\
    \ - 1) {\n        if (*it == *(it + 1)) {\n            *it += *(it + 1);\n   \
    \         it = result.erase(it + 1);\n        } else {\n            it++;\n  \
    \      }\n    }\n    return result;", "\tstd::vector<long> res;\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < music_string.size(); i++) {\n\t\tif (music_string[i]\
    \ == 'o') {\n\t\t\tif (music_string[i + 1] == ' ') {\n\t\t\t\tres.push_back(4);\n\
    \t\t\t\tcount = count + 4;\n\t\t\t}\n\t\t\telse if (music_string[i + 1] == '|')\
    \ {\n\t\t\t\tres.push_back(2);\n\t\t\t\tcount = count + 2;\n\t\t\t}\n\t\t}\n\t\
    \telse if (music_string[i] == '.') {\n\t\t\tif (music_string[i + 1] == '|') {\n\
    \t\t\t\tres.push_back(1);\n\t\t\t\tcount = count + 1;\n\t\t\t}\n\t\t}\n\t}\n\t\
    assert(count == music_string.size() - music_string.size() / 2);\n\treturn res;",
  "  std::vector<long> beats;\n  int i = 0;\n  while (i < music_string.size()) {\n\
    \    if (music_string[i] == 'o') {\n      if (music_string[i + 1] == ' ') {\n\
    \        beats.push_back(4);\n        i += 2;\n      } else if (music_string[i\
    \ + 1] == '|') {\n        beats.push_back(2);\n        i += 3;\n      }\n    }\
    \ else if (music_string[i] == '.') {\n      beats.push_back(1);\n      i += 3;\n\
    \    }\n  }\n  return beats;", "    std::vector<long> result;\n    std::stringstream\
    \ ss;\n    for (int i = 0; i < music_string.size(); ++i) {\n        if (music_string[i]\
    \ == ' ') {\n            result.push_back(std::stol(ss.str()));\n            ss.str(\"\
    \");\n        } else {\n            ss << music_string[i];\n        }\n    }\n\
    \    result.push_back(std::stol(ss.str()));\n    return result;", "  std::vector<long>\
    \ beats;\n  long count=0;\n  char c;\n  for(int i=0;i<music_string.length();i++)\n\
    \  {\n    c=music_string[i];\n    if(c=='o')\n    {\n      beats.push_back(4);\n\
    \    }\n    else if(c=='.')\n    {\n      beats.push_back(1);\n    }\n    else\
    \ if(c=='|')\n    {\n      beats.push_back(2);\n    }\n  }\n  return beats;",
  "    //your code goes here\n    //Declaring a vector of long type and defining an\
    \ iterator it\n    std::vector<long> myVector;\n    std::vector<long>::iterator\
    \ it;\n    //Declaring a stringstream object and a string object and a long object\n\
    \    std::stringstream ss(music_string);\n    std::string symbol;\n    long duration;\n\
    \    //iterating through the input vector\n    while(ss >> symbol)\n    {\n  \
    \      //Condition to check if symbol is a half note\n        if(symbol == \"\
    o|\")\n        {\n            duration = 2;\n            myVector.push_back(duration);\n\
    \        }\n        //Condition to check if symbol is a quarter note\n       \
    \ else if(symbol == \".|\")\n        {\n            duration = 1;\n          \
    \  myVector.push_back(duration);\n        }\n        //Condition to check if symbol\
    \ is a whole note\n        else if(symbol == \"o\")\n        {\n            duration\
    \ = 4;\n            myVector.push_back(duration);\n        }\n    }\n    return\
    \ myVector;", "    long res, i, flag;\n    std::vector<long> a;\n    for(i = 0;\
    \ i < music_string.length(); i++) {\n        if(music_string[i] == 'o') {\n  \
    \          res = 4;\n            flag = 1;\n        }\n        else if(music_string[i]\
    \ == '.') {\n            res = 1;\n            flag = 1;\n        }\n        else\
    \ if(music_string[i] == '|') {\n            if(flag == 1) {\n                a.push_back(res);\n\
    \                flag = 0;\n            }\n        }\n    }\n    if(flag == 1)\n\
    \        a.push_back(res);\n    return a;", "    std::vector<long> result(0);\n\
    \    std::string current_string;\n    for (unsigned int i = 0; i < music_string.length();\
    \ i++) {\n        if (music_string[i] == ' ' || music_string[i] == '\\n') {\n\
    \            if (current_string.length() == 0) {\n                continue;\n\
    \            }\n            if (current_string[0] == 'o') {\n                if\
    \ (current_string[1] == '|') {\n                    result.push_back(2);\n   \
    \             } else {\n                    result.push_back(4);\n           \
    \     }\n            } else {\n                result.push_back(1);\n        \
    \    }\n            current_string = \"\";\n        } else {\n            current_string\
    \ += music_string[i];\n        }\n    }\n    return result;", "    std::vector<long>\
    \ res;\n    char notes[4] = {'o', '|', '|', '.'};\n    for (int i = 0; i < music_string.size();\
    \ i++) {\n        if (music_string[i] == notes[0]) {\n            if (music_string[i\
    \ + 1] == notes[1]) {\n                res.push_back(2);\n                i++;\n\
    \            } else {\n                res.push_back(4);\n            }\n    \
    \    } else if (music_string[i] == notes[3]) {\n            if (music_string[i\
    \ + 1] == notes[1]) {\n                res.push_back(1);\n                i++;\n\
    \            }\n        }\n    }\n    return res;", "    // o o o o o o o o o\
    \ o o o o o o o o o o o o o o\n    // 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\
    \ 4 4\n    // o o| .| o| o| .| .| .| .| o o\n    // 4 2 1 2 2 1 1 1 1 4 4\n  \
    \  // . . . . . . . . . . . . . . . . . . . . . .\n    // 1 1 1 1 1 1 1 1 1 1\
    \ 1 1 1 1 1 1 1 1 1 1 1 1\n    std::vector<long> myvector;\n    for (char& c :\
    \ music_string) {\n        if (c == 'o') {\n            myvector.push_back(4);\n\
    \        } else if (c == '|') {\n            myvector.push_back(1);\n        }\n\
    \    }\n    return myvector;", "\tstd::vector<long> result;\n\tlong sum = 0;\n\
    \tfor (char i : music_string) {\n\t\tswitch (i) {\n\t\tcase 'o':\n\t\t\tsum +=\
    \ 4;\n\t\t\tbreak;\n\t\tcase '|':\n\t\t\tif (sum > 0) {\n\t\t\t\tresult.push_back(sum);\n\
    \t\t\t\tsum = 0;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '.':\n\t\t\tsum += 1;\n\t\t\t\
    break;\n\t\tcase ' ':\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tassert(false);\n\t\t\
    }\n\t}\n\tif (sum > 0) {\n\t\tresult.push_back(sum);\n\t}\n\treturn result;",
  "    std::vector<long> durations;\n    std::stack<long> s;\n    int i = 0;\n   \
    \ while(i < music_string.size()) {\n        if(music_string[i] == 'o') {\n   \
    \         if(i + 1 < music_string.size() && music_string[i + 1] == '|') {\n  \
    \              durations.push_back(2);\n                i += 2;\n            }\
    \ else {\n                durations.push_back(4);\n                i++;\n    \
    \        }\n        } else if(music_string[i] == '.') {\n            if(i + 1\
    \ < music_string.size() && music_string[i + 1] == '|') {\n                durations.push_back(1);\n\
    \                i += 2;\n            } else {\n                durations.push_back(0);\n\
    \                i++;\n            }\n        } else {\n            i++;\n   \
    \     }\n    }\n    return durations;", "    std::vector<long> result;\n    std::istringstream\
    \ stream(music_string);\n    std::string currentNote;\n    std::getline(stream,\
    \ currentNote, ' ');\n    while (!stream.eof()) {\n        if (currentNote.length()\
    \ == 1) {\n            result.push_back(4);\n        } else if (currentNote[1]\
    \ == '|') {\n            result.push_back(2);\n        } else {\n            result.push_back(1);\n\
    \        }\n        std::getline(stream, currentNote, ' ');\n    }\n    return\
    \ result;", "    std::vector<long> v;\n    std::stringstream ss(music_string);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (item == \"o\") v.push_back(4);\n        else if (item == \"o|\") v.push_back(2);\n\
    \        else if (item == \".|\") v.push_back(1);\n    }\n    return v;", "  \
    \  std::vector<long> beats;\n    std::string whole_note = \"o\";\n    std::string\
    \ half_note = \"o|\";\n    std::string quater_note = \".|\";\n    long pos = 0;\n\
    \    long beats_count = 0;\n    do {\n        if (music_string.find(whole_note,\
    \ pos) == pos) {\n            beats_count = 4;\n            pos += 2;\n      \
    \  } else if (music_string.find(half_note, pos) == pos) {\n            beats_count\
    \ = 2;\n            pos += 3;\n        } else if (music_string.find(quater_note,\
    \ pos) == pos) {\n            beats_count = 1;\n            pos += 3;\n      \
    \  } else {\n            pos++;\n        }\n        if (beats_count > 0) {\n \
    \           beats.push_back(beats_count);\n            beats_count = 0;\n    \
    \    }\n    } while (pos < music_string.length());\n    return beats;", "    std::vector<long>\
    \ v;\n    std::string str=\"\";\n    for(int i=0;i<music_string.length();i++)\n\
    \    {\n        if(music_string[i]==' ')\n        {\n            str=\"\";\n \
    \       }\n        else if(music_string[i]=='o')\n        {\n            str+=music_string[i];\n\
    \            if(str==\"o\")\n            {\n                v.push_back(4);\n\
    \            }\n            else if(str==\"o|\")\n            {\n            \
    \    v.push_back(2);\n            }\n        }\n        else if(music_string[i]=='|')\n\
    \        {\n            str+=music_string[i];\n            if(str==\".|\")\n \
    \           {\n                v.push_back(1);\n            }\n        }\n   \
    \     else if(music_string[i]=='.')\n        {\n            str+=music_string[i];\n\
    \        }\n    }\n    return v;", "  std::vector<long> beats;\n  for (int i =\
    \ 0; i < music_string.size(); ++i) {\n    if (music_string[i] == 'o') {\n    \
    \  if (music_string[i + 1] == ' ') {\n        beats.push_back(4);\n      } else\
    \ {\n        beats.push_back(2);\n        i += 2;\n      }\n    } else {\n   \
    \   beats.push_back(1);\n      i += 2;\n    }\n  }\n  return beats;", "    std::vector<long>\
    \ result;\n    // handling the space-delimited case\n    char *cstr = new char[music_string.length()\
    \ + 1];\n    strcpy(cstr, music_string.c_str());\n    char *p = strtok(cstr, \"\
    \ \");\n    while (p != NULL) {\n        switch (*p) {\n            case 'o':\n\
    \                result.push_back(4);\n                break;\n            case\
    \ '.':\n                result.push_back(1);\n                break;\n       \
    \     default:\n                std::cout << \"Bad input. \" << std::endl;\n \
    \               break;\n        }\n        p = strtok(NULL, \" \");\n    }\n \
    \   return result;", "\tstd::vector<long> notes;\n\tstd::stringstream ss(music_string);\n\
    \tchar ch;\n\twhile (ss >> ch) {\n\t\tlong note = 1;\n\t\tbool pipe = false;\n\
    \t\twhile (ch != ' ') {\n\t\t\tif (ch == 'o') {\n\t\t\t\tnote = 4;\n\t\t\t}\n\t\
    \t\telse if (ch == '|') {\n\t\t\t\tpipe = true;\n\t\t\t}\n\t\t\tss >> ch;\n\t\t\
    }\n\t\tif (pipe) {\n\t\t\tnote /= 2;\n\t\t}\n\t\tnotes.push_back(note);\n\t}\n\
    \treturn notes;", "    // your code goes here\n    std::vector<long> v;\n    for(int\
    \ i=0;i<music_string.length();){\n        if(music_string[i]=='o'){\n        \
    \    if(music_string[i+1]==' '){\n                v.push_back(4);\n          \
    \      i+=2;\n            }\n            else{\n                if(music_string[i+2]=='|'){\n\
    \                    v.push_back(2);\n                    i+=3;\n            \
    \    }\n                else{\n                    v.push_back(4);\n         \
    \           i+=2;\n                }\n            }\n        }\n        else{\n\
    \            if(music_string[i+1]=='|'){\n                v.push_back(1);\n  \
    \              i+=2;\n            }\n            else{\n                v.push_back(4);\n\
    \                i+=2;\n            }\n        }\n    }\n    return v;", "   \
    \ // TODO: implementation\n    std::vector<long> result;\n    if (music_string.empty())\n\
    \        return result;\n    else\n    {\n        std::istringstream music_stream(music_string);\n\
    \        std::string note;\n        while (music_stream >> note)\n        {\n\
    \            if (note == \"o\")\n                result.push_back(4);\n      \
    \      else if (note == \"o|\")\n                result.push_back(2);\n      \
    \      else if (note == \".|\")\n                result.push_back(1);\n      \
    \  }\n    }\n    return result;", "    std::vector<long> res;\n    char prev =\
    \ '\\0';\n    long counter = 0;\n    for (char c : music_string) {\n        if\
    \ (c == ' ') {\n            if (prev == 'o')\n                res.push_back(4);\n\
    \            else\n                res.push_back(2);\n            counter = 0;\n\
    \        } else if (c == '|') {\n            if (prev == '.')\n              \
    \  res.push_back(1);\n            counter = 0;\n        } else if (c == 'o') {\n\
    \            if (counter > 0) {\n                if (prev == 'o')\n          \
    \          res.push_back(4);\n                else\n                    res.push_back(2);\n\
    \            }\n            counter++;\n        } else if (c == '.') {\n     \
    \       if (counter > 0) {\n                if (prev == 'o')\n               \
    \     res.push_back(4);\n                else\n                    res.push_back(2);\n\
    \            }\n            counter++;\n        }\n        prev = c;\n    }\n\
    \    if (prev == 'o')\n        res.push_back(4);\n    else\n        res.push_back(2);\n\
    \    return res;", "    // Your code here\n    std::vector<long> result;\n   \
    \ std::stringstream stream(music_string);\n    std::string s;\n    while(std::getline(stream,\
    \ s, ' ')){\n        if(s == \"o\") result.push_back(4);\n        else if(s ==\
    \ \"o|\") result.push_back(2);\n        else if(s == \".|\") result.push_back(1);\n\
    \    }\n    return result;", "    std::vector<long> result(0);\n    for (char&\
    \ c : music_string) {\n        if (c == 'o') {\n            result.push_back(4);\n\
    \        } else if (c == '|') {\n            result.push_back(2);\n        } else\
    \ if (c == '.') {\n            result.push_back(1);\n        }\n    }\n    return\
    \ result;", "\tint l = music_string.length();\n\tstd::vector<long> result;\n\t\
    for (int i = 0; i < l; i++) {\n\t\tif (music_string[i] == 'o') {\n\t\t\tif (music_string[i\
    \ + 1] == '|') {\n\t\t\t\tresult.push_back(2);\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\
    \telse {\n\t\t\t\tresult.push_back(4);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse\
    \ {\n\t\t\tresult.push_back(1);\n\t\t\ti += 2;\n\t\t}\n\t}\n\treturn result;",
  "    std::vector<long> ret;\n    for (long i = 0; i < music_string.size(); i++)\
    \ {\n        if (music_string[i] == 'o') {\n            if (i + 1 < music_string.size()\
    \ && music_string[i + 1] == '|') {\n                ret.push_back(2);\n      \
    \          i++;\n            } else {\n                ret.push_back(4);\n   \
    \         }\n        } else if (music_string[i] == '.') {\n            ret.push_back(1);\n\
    \            i++;\n        }\n    }\n    return ret;", "\tstd::vector<long> result;\n\
    \tint counter = 0;\n\tfor (char& it : music_string) {\n\t\tif (it == 'o') {\n\t\
    \t\tresult.push_back(4);\n\t\t}\n\t\telse if (it == '|') {\n\t\t\tif (counter\
    \ % 2 == 0) {\n\t\t\t\tresult.push_back(2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push_back(1);\n\
    \t\t\t}\n\t\t\tcounter++;\n\t\t}\n\t\telse if (it == '.') {\n\t\t\tresult.push_back(1);\n\
    \t\t}\n\t}\n\treturn result;", "\tstd::vector<long> list;\n\tint count = 0;\n\t\
    for (int i = 0; i < music_string.length(); i++) {\n\t\tif (music_string[i] ==\
    \ 'o') {\n\t\t\tlist.push_back(4);\n\t\t}\n\t\telse if (music_string[i] == '.')\
    \ {\n\t\t\tlist.push_back(1);\n\t\t}\n\t\telse if (music_string[i] == ' ') {\n\
    \t\t\tcontinue;\n\t\t}\n\t\telse if (music_string[i] == '|') {\n\t\t\tcount++;\n\
    \t\t\tif (count == 2) {\n\t\t\t\tlist.push_back(2);\n\t\t\t\tcount = 0;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn list;", "    std::vector<long> result;\n    bool is_quarter_note;\n\
    \    for (long i = 0; i < music_string.size(); ++i) {\n        if (music_string[i]\
    \ == '.') {\n            is_quarter_note = true;\n        } else if (music_string[i]\
    \ == 'o') {\n            is_quarter_note = false;\n        }\n        if (music_string[i]\
    \ == '|') {\n            if (is_quarter_note) {\n                result.push_back(1);\n\
    \            } else {\n                result.push_back(2);\n            }\n \
    \       }\n    }\n    return result;", "    long sum = 0;\n    int i = 0;\n  \
    \  std::vector<long> beat = {4, 2, 1};\n    std::vector<long> sound;\n    while\
    \ (i < music_string.size()) {\n        if (music_string[i] == ' ') {\n       \
    \     i++;\n            continue;\n        }\n        if (music_string[i] == 'o')\
    \ {\n            if (music_string[i + 1] == '|') {\n                sum += beat[1];\n\
    \                i += 2;\n            } else {\n                sum += beat[0];\n\
    \                i++;\n            }\n        } else {\n            sum += beat[2];\n\
    \            i += 2;\n        }\n        if (music_string[i] == ' ') {\n     \
    \       sound.push_back(sum);\n            sum = 0;\n            i++;\n      \
    \  }\n    }\n    return sound;", '    return {};', "\t//implement me!\n\t//use\
    \ std::vector<long> to store the duration of each note\n\t//use std::stol to convert\
    \ string to long\n\t//use std::string::find_first_of to find 'o' in the string\n\
    \t//use std::string::substr to get the note string\n\t//use a for loop to check\
    \ each note string\n\t//return the vector\n\tstd::vector<long> duration;\n\tstd::string\
    \ note;\n\tfor (long i = 0; i < music_string.length(); i++) {\n\t\tif (music_string[i]\
    \ == 'o') {\n\t\t\tnote = music_string.substr(i, 3);\n\t\t\tif (note.find_first_of('|')\
    \ == 1) {\n\t\t\t\tduration.push_back(4);\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse\
    \ {\n\t\t\t\tduration.push_back(2);\n\t\t\t\ti += 1;\n\t\t\t}\n\t\t}\n\t\telse\
    \ if (music_string[i] == '.') {\n\t\t\tnote = music_string.substr(i, 2);\n\t\t\
    \tif (note.find_first_of('|') == 1) {\n\t\t\t\tduration.push_back(1);\n\t\t\t\t\
    i += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn duration;", "    long num;\n    std::vector<long>\
    \ nums;\n    for (int i = 0; i < music_string.length(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            num = 4;\n            nums.push_back(num);\n        }\n\
    \        else if (music_string[i] == '.') {\n            num = 1;\n          \
    \  nums.push_back(num);\n        }\n        else if (music_string[i] == '|') {\n\
    \            num = 2;\n            nums.push_back(num);\n        }\n    }\n  \
    \  return nums;", "  std::vector<long> result;\n  int num_dots = 0;\n  for (int\
    \ i = 0; i < music_string.size(); i++) {\n    if (music_string[i] == '.') {\n\
    \      num_dots++;\n    } else if (music_string[i] == 'o') {\n      if (num_dots\
    \ == 0) {\n        result.push_back(4);\n      } else if (num_dots == 1) {\n \
    \       result.push_back(2);\n      } else {\n        assert(num_dots == 2);\n\
    \        result.push_back(1);\n      }\n      num_dots = 0;\n    } else {\n  \
    \    assert(music_string[i] == '|');\n    }\n  }\n  return result;", "\tstd::vector<long>\
    \ result;\n\tstd::vector<std::string> temp;\n\tstd::stringstream ss(music_string);\n\
    \tstd::string temp_str;\n\twhile (std::getline(ss, temp_str, ' '))\n\t\ttemp.push_back(temp_str);\n\
    \tfor (int i = 0; i < temp.size(); i++) {\n\t\tif (temp[i] == \"o\")\n\t\t\tresult.push_back(4);\n\
    \t\telse if (temp[i] == \"o|\")\n\t\t\tresult.push_back(2);\n\t\telse if (temp[i]\
    \ == \".|\")\n\t\t\tresult.push_back(1);\n\t}\n\treturn result;"]
stop_tokens:
- "\n}"
