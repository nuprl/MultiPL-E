name: HumanEval_85_add
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if(i % 2 != 0 && lst[i] % 2 == 0)\n\
    \      sum += lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long num = 0;\n\
    \  for(int i = 1; i < lst.size(); i = i + 2){\n    if(lst[i] % 2 == 0){\n    \
    \  num += lst[i];\n    }\n  }\n  return num;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(long i = 0; i < lst.size(); i++){\n        if(i % 2 != 0){\n   \
    \         if(lst[i] % 2 == 0){\n                sum += lst[i];\n            }\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  return std::accumulate(lst.begin()\
    \ + 1, lst.end(), 0L, [](long a, long b) {\n    return b % 2 ? a : a + b;\n  });\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpgsoiblxs: /tmp/tmpgsoiblxs.cpp:14: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] % 2 == 0 && i % 2 != 0){\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  // your code\
    \ here\n  long s=0;\n  for(long i=0;i<lst.size();i++){\n    if(i%2==1 && lst[i]%2==0){\n\
    \      s+=lst[i];\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(long i = 0; i < lst.size(); i++){\n    if(lst[i] % 2 == 0 && i % 2 != 0){\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long retval=0;\n\
    \    int i;\n    for(i=0;i<lst.size();i++)\n    {\n        if(i%2==0 && lst[i]%2==0)\n\
    \        {\n            retval+=lst[i];\n        }\n    }\n    return retval;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpm2phljn4: /tmp/tmpm2phljn4.cpp:20: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int sum = 0;\n\
    \  for(int i = 1; i < lst.size(); i+=2){\n    if(lst[i] % 2 == 0){\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  // your code\
    \ here\n   long ans=0;\n   for(long i=0;i<lst.size();i++)\n   {\n     if(i%2!=0)\n\
    \     {\n       if(lst[i]%2==0)\n       {\n         ans+=lst[i];\n       }\n \
    \    }\n   }\n   return ans;\n}\nint main() {\n    auto candidate = add;\n   \
    \ assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long long sum\
    \ = 0;\n    for(unsigned int i = 0; i < lst.size(); i++){\n        if(i % 2 ==\
    \ 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long result =\
    \ 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 1 && lst[i] %\
    \ 2 == 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum=0;\n\
    \  for(int i=0;i<lst.size();i+=2)\n  {\n    if(lst[i]%2==0)\n    {\n      sum+=lst[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpv_9wf51u: /tmp/tmpv_9wf51u.cpp:19: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if(i % 2 == 1 && lst[i] % 2 == 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\nlong sum=0;\n \
    \   for(int i=0;i<lst.size();i+=2)\n    {\n        if(lst[i]%2==0)\n        {\n\
    \            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp5db0je9v: /tmp/tmp5db0je9v.cpp:19: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n   long sum=0;\n\
    \   int n=lst.size();\n   for(int i=0;i<n;i+=2)\n   {\n       if(lst[i]%2==0)\n\
    \       {\n         sum+=lst[i];\n       }\n   }\n   return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp1j_3wd7_: /tmp/tmp1j_3wd7_.cpp:20: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    std::vector<long>::iterator\
    \ it;\n    long sum = 0;\n    for(it = lst.begin(); it != lst.end(); it++){\n\
    \        if(*it % 2 == 0){\n            sum += *it;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmped4qwjp6: /tmp/tmped4qwjp6.cpp:18: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n   std::cout<<\"\
    array size: \"<<lst.size()<<std::endl;\n   long sum = 0;\n   for(int i = 0; i\
    \ < lst.size(); i+=2){\n      sum += lst[i];\n   }\n   return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: "array size: 2\n"
  stderr: "tmpnazs6eb2: /tmp/tmpnazs6eb2.cpp:16: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  return accumulate(lst.begin()+1,\
    \ lst.end(), 0, [](int a, int b){return a+(b%2==0?b:0);});\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp4vb5hpl4: /tmp/tmp4vb5hpl4.cpp:12: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(lst[i] % 2 == 0 &&\
    \ i % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long even_sum\
    \ = 0;\n  for(int i = 0; i < lst.size(); i++) {\n    if(i % 2 == 1 && lst[i] %\
    \ 2 == 0) {\n      even_sum += lst[i];\n    }\n  }\n  return even_sum;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int n = lst.size();\n\
    \  int sum = 0;\n  for(int i = 0; i < n; i++) {\n    if(i%2 == 1 && lst[i]%2 ==\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n   \
    \ auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i += 2)\n  {\n    if(lst[i] % 2 == 0)\n    {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmpsyx5s2r2: /tmp/tmpsyx5s2r2.cpp:19: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tint s = 0;\n\t\
    for (int i = 0; i < lst.size(); i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\t\
    s += lst[i];\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmpbmgi96lg: /tmp/tmpbmgi96lg.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 1; i < lst.size(); i += 2)\n        if(lst[i] % 2 == 0)\n\
    \            sum += lst[i];\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tvector<long>::iterator\
    \ it;\n\tlong sum = 0;\n\tint i = 0;\n\tfor (it = lst.begin(); it != lst.end();\
    \ it++) {\n\t\tif (*it % 2 == 0 && i % 2 != 0) {\n\t\t\tsum += *it;\n\t\t}\n\t\
    \ti++;\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpucqv_y4l.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpucqv_y4l.cpp:7:2: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n    7 |  vector<long>::iterator\
    \ it;\n      |  ^~~~~~\n      |  std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpucqv_y4l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpucqv_y4l.cpp:7:9:\
    \ error: expected primary-expression before \u2018long\u2019\n    7 |  vector<long>::iterator\
    \ it;\n      |         ^~~~\n/tmp/tmpucqv_y4l.cpp:10:7: error: \u2018it\u2019\
    \ was not declared in this scope; did you mean \u2018i\u2019?\n   10 |  for (it\
    \ = lst.begin(); it != lst.end(); it++) {\n      |       ^~\n      |       i\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  // your code\
    \ here\n  long sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(i % 2\
    \ != 0){\n      if(lst[i] % 2 == 0){\n        sum += lst[i];\n      }\n    }\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    std::vector<long>::iterator\
    \ it = lst.begin();\n    int i = 0;\n    long s = 0;\n    while(it != lst.end())\
    \ {\n        if (i % 2 == 1 && *it % 2 == 0)\n            s += *it;\n        it++;\n\
    \        i++;\n    }\n    return s;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long s = 0;\n\
    \    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 != 0 && lst[i] %\
    \ 2 == 0) {\n            s += lst[i];\n        }\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  // your code\
    \ here...\n  long r=0;\n  for(int i=0;i<lst.size();i++){\n      if(i%2!=0 && lst[i]%2==0){\n\
    \        r+=lst[i];\n      }\n  }\n  return r;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long c=0;\n\
    \    for(long i=0;i<lst.size();i++)\n    {\n        if(i%2==1 && lst[i]%2==0)\n\
    \        {\n            c+=lst[i];\n        }\n    }\n    return c;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum=0;\n\
    \    for(int i=0;i<lst.size();i++)\n    {\n        if(i%2==1 && lst[i]%2==0)\n\
    \        {\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if(i % 2 != 0 && lst[i] % 2 == 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(long i = 0; i < lst.size(); i++){\n    if(i % 2 != 0){\n      if(lst[i]\
    \ % 2 == 0){\n        sum += lst[i];\n      }\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long oddSum\
    \ = 0;\n    int counter = 0;\n    while(counter < lst.size()){\n        if(lst[counter]\
    \ % 2 == 0 && counter % 2 != 0){\n            oddSum += lst[counter];\n      \
    \  }\n        counter++;\n    }\n    return oddSum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum=0;\n\
    \    for(int i=0;i<lst.size();i+=2)\n    {\n        if(lst[i]%2==0)\n        {\n\
    \            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpp24binfn: /tmp/tmpp24binfn.cpp:19: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int sum = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 != 0 && lst[i] % 2\
    \ == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum=0;\n\
    \    for(int i=0;i<lst.size();i++)\n    {\n        if(i%2==1 && lst[i]%2==0)\n\
    \        {\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long ans =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 1 && lst[i]\
    \ % 2 == 0){\n            ans += lst[i];\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 != 0 && lst[i]\
    \ % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tint result =\
    \ 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 != 0 && lst[i] %\
    \ 2 == 0) {\n\t\t\tresult += lst[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    std::vector<long>::iterator\
    \ it;\n    long result = 0;\n    for(it = lst.begin(); it != lst.end(); it++){\n\
    \        if((*it % 2 == 0) && (it-lst.begin() % 2 != 0)){\n            result\
    \ += *it;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnr_w2jk_.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpnr_w2jk_.cpp:10:46: error: no match for \u2018operator%\u2019 (operand\
    \ types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018int\u2019)\n   10 |         if((*it\
    \ % 2 == 0) && (it-lst.begin() % 2 != 0)){\n      |                          \
    \        ~~~~~~~~~~~ ^ ~\n      |                                           |\
    \    |\n      |                                           |    int\n      |  \
    \                                         std::vector<long int>::iterator {aka\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >}\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpnr_w2jk_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnr_w2jk_.cpp:10:48:\
    \ note:   \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   10 |         if((*it % 2 == 0) && (it-lst.begin()\
    \ % 2 != 0)){\n      |                                                ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong sum = 0;\n\
    \t// We add the even integers that are at odd indices\n\t// i = 0 is an even index\n\
    \t// i = 1 is an odd index\n\t// i = 2 is an even index\n\t// i = 3 is an odd\
    \ index\n\t// ...\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 !=\
    \ 0 && lst[i] % 2 == 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  // <---\n  return\
    \ std::accumulate(lst.begin()+1, lst.end(), 0, [](long sum, int n){return sum\
    \ + (n%2 == 0 ? n : 0);});\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpai1eqvf9: /tmp/tmpai1eqvf9.cpp:13: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    if(lst.size()\
    \ == 0) return 0;\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n\
    \        if(i % 2 == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n \
    \   assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  // your code\n\
    \  int sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(i % 2 != 0){\n\
    \      if(lst[i] % 2 == 0){\n        sum += lst[i];\n      }\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long r=0;\n\
    \    for(int i=0;i<lst.size();i++){\n        if(i%2==1 && lst[i]%2==0){\n    \
    \        r+=lst[i];\n        }\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int result\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 != 0){\n  \
    \          if(lst[i] % 2 == 0){\n                result += lst[i];\n         \
    \   }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    // Write code\
    \ here..\n    long ans = 0;\n    int i = 0;\n    for(auto x : lst){\n        if(i\
    \ % 2 == 1 && x % 2 == 0){\n            ans += x;\n        }\n        i++;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long answer\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 1 && lst[i]\
    \ % 2 == 0){\n            answer += lst[i];\n        }\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(long i = 0; i < lst.size(); i++) {\n    if(i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n   \
    \ auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong sum = 0;\n\
    \tfor (unsigned i = 0; i < lst.size(); i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\
    \t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmpyddu_0qs: /tmp/tmpyddu_0qs.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < lst.size(); i+=2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\t\
    sum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmp_qxmhbzj: /tmp/tmp_qxmhbzj.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 1; i < lst.size(); i+=2)\n  {\n    if(lst[i] % 2 == 0)\n    {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n   \
    \ auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 1; i < lst.size(); i+=2) {\n        if(lst[i] % 2 == 0)\
    \ {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  return std::accumulate(lst.begin()\
    \ + 1, lst.end(), 0,\n      [](int a, int b) { return a + (b % 2 == 0 ? b : 0);\
    \ });\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpqqo5axc_: /tmp/tmpqqo5axc_.cpp:13: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long ret = 0;\n\
    \  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n      ret += lst[i];\n    }\n  }\n  return ret;\n}\nint main() {\n   \
    \ auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  // Place your\
    \ code here\n  long s=0;\n  for(int i=0;i<lst.size();i++){\n    if(i%2!=0){\n\
    \      if(lst[i]%2==0){\n        s+=lst[i];\n      }\n    }\n  }\n  return s;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\t// initialize\
    \ sum to zero\n\tlong sum = 0;\n\t// loop through the list lst, keep a count of\
    \ indices\n\tfor (size_t i = 0; i < lst.size(); i++) {\n\t\t// if the number at\
    \ that index is even and the index is odd, add the number to sum\n\t\tif (lst[i]\
    \ % 2 == 0 && i % 2 != 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\t// return the\
    \ sum\n\treturn sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n   long result\
    \ = 0;\n   for(int i = 0; i < lst.size(); i+=2) {\n      if(lst[i] % 2 == 0) {\n\
    \         result += lst[i];\n      }\n   }\n   return result;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp40j51yoc: /tmp/tmp40j51yoc.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int n = lst.size();\n\
    \  int sum = 0;\n  for(int i = 0; i < n; i++) {\n    if(i%2 == 1 && lst[i]%2 ==\
    \ 0)\n      sum += lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long ans =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 != 0 && lst[i]\
    \ % 2 == 0){\n            ans += lst[i];\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long res =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++)\n        if((i+1)%2 != 0 && lst[i]%2\
    \ == 0)\n            res += lst[i];\n    return res;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp_0k0s11j: /tmp/tmp_0k0s11j.cpp:15: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int sum = 0;\n\
    \    for(int i = 0; i < lst.size(); i+=2)\n    {\n        if(lst[i] % 2 == 0)\n\
    \        {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpbpabia5b: /tmp/tmpbpabia5b.cpp:19: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum=0;\n\
    \    for(int i=0;i<lst.size();i++)\n    {\n        if(i%2==1 && lst[i]%2==0)\n\
    \        {\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum=0;\n\
    \  for(int i=0;i<lst.size();i++){\n    if(i%2!=0){\n      if(lst[i]%2==0){\n \
    \       sum+=lst[i];\n      }\n    }\n  }\n  return sum;\n}\nint main() {\n  \
    \  auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n   long sum=0;\n\
    \   for(int i=0;i<lst.size();i++){\n     if(i%2!=0 && lst[i]%2==0){\n       sum+=lst[i];\n\
    \     }\n   }\n   return sum;\n}\nint main() {\n    auto candidate = add;\n  \
    \  assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long output\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 == 1 && lst[i]\
    \ % 2 == 0) {\n            output += lst[i];\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  return 0;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp3657b7ni: /tmp/tmp3657b7ni.cpp:11: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    if(i % 2 != 0 && lst[i] % 2 == 0){\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    int count = 0;\n    for(auto it : lst) {\n        if(count % 2 == 1\
    \ && it % 2 == 0) {\n            sum += it;\n        }\n        count++;\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    int len = lst.size();\n    for(int i = 0; i < len; i += 2) {\n     \
    \   if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp0cqu2zhg: /tmp/tmp0cqu2zhg.cpp:18: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if(i % 2 == 1 && lst[i] % 2 == 0)\n\
    \      sum += lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong result =\
    \ 0;\n\tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 1 && lst[i]\
    \ % 2 == 0) {\n\t\t\tresult += lst[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum=0;\n\
    \    for(int i=0;i<lst.size();i++){\n        if(i%2!=0 && lst[i]%2==0){\n    \
    \        sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int indx = 1;\n\
    \  long sum = 0;\n  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] % 2 ==\
    \ 0 && i % 2 != 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long s=0;\n \
    \ for(int i=0;i<lst.size();i++){\n    if(i%2==1&&lst[i]%2==0)\n      s+=lst[i];\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int len = lst.size();\n\
    \  long sum = 0;\n  for(int i = 1; i < len; i+=2) {\n    if(lst[i] % 2 == 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tint s = 0;\n\t\
    for (long i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 != 0 && lst[i] % 2 == 0)\
    \ {\n\t\t\ts += lst[i];\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long res = 0;\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n      res += lst[i];\n    }\n  }\n  return res;\n}\nint main() {\n   \
    \ auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i] % 2 == 0 &&\
    \ i % 2 != 0)\n            sum += lst[i];\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 1; i < lst.size(); i+=2) {\n    if(lst[i] % 2 == 0)\n      sum\
    \ += lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int sum = 0;\n\
    \  int i = 1;\n  for(int i = 0; i < lst.size(); i++) {\n    if(lst[i] % 2 == 0\
    \ && i % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int sum = 0;\n\
    \    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 != 0 && lst[i] %\
    \ 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int n = lst.size();\n\
    \  int ans = 0;\n  for(int i = 0; i < n; i+=2) {\n    if(lst[i] % 2 == 0)\n  \
    \    ans += lst[i];\n  }\n  return ans;\n}\nint main() {\n    auto candidate =\
    \ add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmpudcm7t_c: /tmp/tmpudcm7t_c.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 == 1 && lst[i]\
    \ % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long ans =\
    \ 0;\n    for(int i = 0; i < lst.size(); i += 2) ans += lst[i];\n    return ans;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpcn5v0hpe: /tmp/tmpcn5v0hpe.cpp:13: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 == 1 && lst[i]\
    \ % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int size = lst.size();\n\
    \  long result = 0;\n  for(int i = 0; i < size; i++) {\n    if (i % 2 != 0 &&\
    \ lst[i] % 2 == 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tint i =0;\n\t\
    int sum = 0;\n\tfor(auto it: lst){\n\t\tif(i%2==1){\n\t\t\tsum += it;\n\t\t}\n\
    \t\ti++;\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = add;\n   \
    \ assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmp9tzngiwm: /tmp/tmp9tzngiwm.cpp:20: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(long i = 0; i < lst.size(); i++){\n    if(i % 2 == 1 && lst[i] % 2 == 0){\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long res = 0;\n\
    \  int i = 0;\n  while (i < lst.size()) {\n    if (i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n      res += lst[i];\n    }\n    i++;\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 1; i < lst.size(); i+=2) {\n    if(lst[i] % 2 == 0) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  std::vector<long>::iterator\
    \ i;\n  long sum=0;\n  for(i=lst.begin();i!=lst.end();i++)\n  {\n    if((i-lst.begin())%2!=0\
    \ && *i%2==0)\n    {\n      sum+=*i;\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n   \
    \ auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int length =\
    \ lst.size();\n  int count = 0;\n  int ans = 0;\n  for(int i = 0; i < length;\
    \ i++) {\n    if(i % 2 == 0 && lst[i] % 2 == 0) {\n      ans += lst[i];\n    }\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp0ad0a2gl: /tmp/tmp0ad0a2gl.cpp:19: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long ans=0;\n\
    \  for(int i=0;i<lst.size();i++){\n    if(i%2==1 && lst[i]%2==0){\n      ans+=lst[i];\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i += 2) {\n        if(lst[i] % 2 == 0)\
    \ {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpowxydzwa: /tmp/tmpowxydzwa.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    if(i % 2 != 0){\n      if(lst[i]\
    \ % 2 == 0){\n        sum += lst[i];\n      }\n    }\n  }\n  return sum;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  int count = 0;\n  for(int i = 0; i < lst.size(); i++) {\n    if(lst[i] % 2\
    \ == 0 && count % 2 != 0) {\n      sum += lst[i];\n    }\n    count++;\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong c=0;\n\t\
    for(long i=0;i<lst.size();i+=2)\n\t\tif(lst[i]%2==0)\n\t\t\tc+=lst[i];\n\treturn\
    \ c;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp8g37yc3m: /tmp/tmp8g37yc3m.cpp:15: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i+=2)\n  {\n      if(lst[i] % 2 == 0)\n    \
    \    sum += lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmpmw_hmr9_: /tmp/tmpmw_hmr9_.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum=0;\n\
    \  for(int i=0;i<lst.size();i++)\n  {\n    if(i%2==1)\n    {\n      if(lst[i]%2==0)\n\
    \      {\n        sum+=lst[i];\n      }\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n   \
    \ auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    // what I did\
    \ was okay\n    // for(int i = 1; i < lst.size(); i += 2)\n    // {\n    //  \
    \   if(lst[i] % 2 == 0)\n    //     {\n    //         total += lst[i];\n    //\
    \     }\n    // }\n    // return total;\n    // I didn't get it, the question\
    \ was literally asking for the even numbers\n    // at odd indices..\n    long\
    \ sum = 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if(i % 2 ==\
    \ 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n        }\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n   int s=0;\n \
    \  for(int i=0;i<lst.size();i++)\n   {\n     if(i%2==1 && lst[i]%2==0)\n     {\n\
    \       s+=lst[i];\n     }\n   }\n   return s;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int sz = lst.size();\n\
    \  long c = 0;\n  for(int i = 0; i < sz; i++){\n    if(i%2==1 && lst[i]%2==0){\n\
    \      c+=lst[i];\n    }\n  }\n  return c;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  return accumulate(lst.begin()+1,\
    \ lst.end(), 0L, [](long a, long b) {return a + (b & 1 ? 0 : b);});\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp3_hfgz8_: /tmp/tmp3_hfgz8_.cpp:12: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong evenSum\
    \ = 0;\n\tint size = lst.size();\n\tfor (int i = 0; i < size; i++) {\n\t\tif (i\
    \ % 2 != 0 && lst[i] % 2 == 0) {\n\t\t\tevenSum += lst[i];\n\t\t}\n\t}\n\treturn\
    \ evenSum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  if (lst.size() == 0) {\n    return 0;\n  }\n  for (unsigned i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong odd=0;\n\
    \tfor(int i=0;i<lst.size();i++){\n\t\tif(i%2==1&&lst[i]%2==0){\n\t\t\todd+=lst[i];\n\
    \t\t}\n\t}\n\treturn odd;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i+=2)\n    if(lst[i] % 2 == 0)\n      sum +=\
    \ lst[i];\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpd756dfi_: /tmp/tmpd756dfi_.cpp:15: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 != 0 && lst[i] % 2 ==\
    \ 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n   \
    \ auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 1; i < lst.size(); i+=2)\n    {\n        if(lst[i] % 2 ==\
    \ 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int sz = lst.size();\n\
    \    long ans = 0;\n    for(int i = 0; i < sz; i += 2) {\n        ans += lst[i];\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpvu0fwg_5: /tmp/tmpvu0fwg_5.cpp:16: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long result =\
    \ 0;\n  for (int i = 0; i < lst.size(); i += 2) {\n    if (lst[i] % 2 == 0) {\n\
    \      result += lst[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpcyite_77: /tmp/tmpcyite_77.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long l=lst.size();\n\
    \  long sum=0;\n  for(long i=0;i<l;i+=2)\n  {\n    if(lst[i]%2==0)\n    {\n  \
    \    sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmppzxnhn4w: /tmp/tmppzxnhn4w.cpp:20: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  //TODO\n  long\
    \ sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n    if(i%2!=0 && lst[i]%2==0)\n\
    \    {\n      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if(i % 2 != 0 && lst[i] % 2 == 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    if(lst.size()\
    \ == 0) return 0;\n    long sum = 0;\n    for(int i = 0; i < lst.size(); i+=2)\n\
    \        sum += lst[i];\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmpwm0_o_jy: /tmp/tmpwm0_o_jy.cpp:15: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  if (lst.size() < 2) {\n    return 0;\n  }\n  for (int i = 1; i < lst.size();\
    \ i += 2) {\n    if (lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if(i % 2 != 0 && lst[i] % 2 == 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 1; i < lst.size(); i = i + 2)\n  {\n    if(lst[i] % 2 == 0)\n \
    \   {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int sum = 0;\n\
    \    for(int i = 0; i < lst.size(); i++) {\n        if (i % 2 != 0 && lst[i] %\
    \ 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int a = lst.size();\n\
    \    int sum = 0;\n    for(int i = 0; i < a; i++)\n    {\n        if(i % 2 !=\
    \ 0 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n        }\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    return 0;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp6_494lsq: /tmp/tmp6_494lsq.cpp:11: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  // your code\
    \ here\n  long sum=0;\n  for(int i=0;i<lst.size();i++)\n  {\n      if(i%2!=0)\n\
    \      {\n          if(lst[i]%2==0)\n          {\n              sum+=lst[i];\n\
    \          }\n      }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    std::vector<long>\
    \ odd;\n    for(int i=0;i<lst.size();i++){\n        if(i%2!=0 && lst[i]%2==0){\n\
    \            odd.push_back(lst[i]);\n        }\n    }\n    std::sort(odd.begin(),odd.end());\n\
    \    long sum=0;\n    for(int i=0;i<odd.size();i++){\n        sum+=odd[i];\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long n=0;\n\
    \    for(int i=0;i<lst.size();i+=2)\n    {\n        if(lst[i]%2==0)\n        {\n\
    \            n+=lst[i];\n        }\n    }\n    return n;\n}\nint main() {\n  \
    \  auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpy2ye47xr: /tmp/tmpy2ye47xr.cpp:19: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 1; i < lst.size(); i += 2)\n        if(lst[i] % 2 == 0)\n\
    \            sum += lst[i];\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int sum = 0;\n\
    \    for(int i = 1; i < lst.size(); i+=2)\n    {\n        if(lst[i] % 2 == 0)\n\
    \        {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long out = 0;\n\
    \  for(int i = 0; i < lst.size(); i+=2){\n    if(lst[i] % 2 == 0){\n      out\
    \ += lst[i];\n    }\n  }\n  return out;\n}\nint main() {\n    auto candidate =\
    \ add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmpzf_x8mnh: /tmp/tmpzf_x8mnh.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if(i % 2 == 1 && lst[i] % 2 == 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  // your code\
    \ here\n  long sum=0;\n  for(int i=0;i<lst.size();i++){\n    if(i%2!=0 && lst[i]%2==0){\n\
    \      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong s=0;\n\t\
    for(int i=0;i<lst.size();i++)\n\t{\n\t\tif(i%2==1 && lst[i]%2==0)\n\t\t\ts+=lst[i];\n\
    \t}\n\treturn s;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum=0;\n\
    \  for(int i=0;i<lst.size();i++)\n  {\n    if(i%2==1 && lst[i]%2==0)\n    {\n\
    \      sum+=lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 1; i < lst.size(); i += 2)\n    if(lst[i] % 2 == 0)\n      sum\
    \ += lst[i];\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 1; i < lst.size(); i += 2)\n        if(lst[i] % 2 == 0)\n\
    \            sum += lst[i];\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  return std::accumulate(lst.begin()\
    \ + 1, lst.end(), 0L, [](long c, long x) {\n    return c + (x % 2 == 0 ? x : 0);\n\
    \  });\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpxb9ea8z7: /tmp/tmpxb9ea8z7.cpp:14: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(long i = 0; i < lst.size(); i++){\n    if(i % 2 == 1 && lst[i] % 2 == 0){\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum=0;\n\
    \    if(lst.size()==0)\n      return 0;\n    else{\n      for(int i=0;i<lst.size();i++){\n\
    \        if(i%2!=0 && lst[i]%2==0)\n          sum=sum+lst[i];\n      }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 != 0 && lst[i]\
    \ % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\t\tlong sum =\
    \ 0;\n\t\tfor(int i = 1; i < lst.size(); i++)\n\t\t{\n\t\t\tif(lst[i] % 2 == 0\
    \ && i % 2 != 0)\n\t\t\t{\n\t\t\t\tsum += lst[i];\n\t\t\t}\n\t\t}\n\t\treturn\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 1; i < lst.size(); i = i + 2)\n    {\n        if(lst[i]\
    \ % 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 1; i < lst.size(); i++) {\n    if(lst[i] % 2 == 0) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmploluvrgu: /tmp/tmploluvrgu.cpp:18: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long a=0;\n\
    \    for(long x:lst)\n        if(x%2==0&&x%4==0)\n            a+=x;\n    return\
    \ a;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpivtu5pyf: /tmp/tmpivtu5pyf.cpp:15: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long count =\
    \ 0;\n  for(unsigned int i = 0; i < lst.size(); i += 2) {\n    if(lst[i] % 2 ==\
    \ 0) {\n      count += lst[i];\n    }\n  }\n  return count;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp1yaa_bxd: /tmp/tmp1yaa_bxd.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 != 0 && lst[i]\
    \ % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 1; i < lst.size(); i += 2) {\n        if(lst[i] % 2 == 0)\n\
    \            sum += lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int j = 0;\n\
    \  int sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpcf0isk7l: /tmp/tmpcf0isk7l.cpp:18: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 != 0 && lst[i]\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong sum = 0;\n\
    \tint i = 0;\n\tfor (auto j : lst) {\n\t\tif ((i % 2 == 1) && (j % 2 == 0)) {\n\
    \t\t\tsum += j;\n\t\t}\n\t\ti++;\n\t}\n\treturn sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long res = 0;\n\
    \  int i;\n  for(i=0;i<lst.size();i++)\n  {\n    if(i%2==0)\n    {\n      if(lst[i]%2==0)\n\
    \      {\n        res+=lst[i];\n      }\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpo21sfceq: /tmp/tmpo21sfceq.cpp:23: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 == 1 && lst[i]\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long answer\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 != 0 && lst[i]\
    \ % 2 == 0) {\n            answer += lst[i];\n        }\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum=0;\n\
    \    for(int i=0;i<lst.size();i++){\n        if(i%2==1){\n            if(lst[i]%2==0){\n\
    \                sum+=lst[i];\n            }\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 != 0 && lst[i]\
    \ % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if(i % 2 == 1 && lst[i] % 2 == 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum=0;\n\
    \  for(int i=0;i<lst.size();i++)\n  {\n    if(i%2==1)\n    {\n      if(lst[i]%2==0)\n\
    \      {\n        sum+=lst[i];\n      }\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++){\n      if(i % 2 == 1){\n      \
    \  if(lst[i] % 2 == 0){\n          sum += lst[i];\n        }\n      }\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n   \
    \ auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int result\
    \ = 0;\n    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 != 0 && lst[i]\
    \ % 2 == 0){\n            result += lst[i];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int sum = 0;\n\
    \    for(int i = 0; i < lst.size(); i++){\n        if(i % 2 != 0){\n         \
    \   if(lst[i] % 2 == 0){\n                sum += lst[i];\n            }\n    \
    \    }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n \
    \   assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i] % 2 == 0 &&\
    \ i % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum=0;\n\
    \  for(int i=0;i<lst.size();i++){\n    if(i%2==1 && lst[i]%2==0){\n      sum+=lst[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int length\
    \ = lst.size();\n    int sum = 0;\n    for(int i = 1; i < length; i++)\n    {\n\
    \        if(lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmprsd0a6sf: /tmp/tmprsd0a6sf.cpp:21: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long ans =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++)\n    {\n        if((i % 2 != 0)\
    \ && (lst[i] % 2 == 0)) ans += lst[i];\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 == 1 && lst[i]\
    \ % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if(i % 2 == 1 && lst[i] % 2 == 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 1; i < lst.size(); i += 2) {\n        if(lst[i] % 2 == 0)\
    \ {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong sum = 0;\n\
    \t// your code here\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 ==\
    \ 1 && lst[i] % 2 == 0)\n\t\t\tsum += lst[i];\n\t}\n\treturn sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int i=0;\n  long\
    \ sum=0;\n  while(i<lst.size()){\n    if(i%2==1){\n      sum=sum+lst[i];\n   \
    \ }\n    i++;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmpid3_a4j6: /tmp/tmpid3_a4j6.cpp:20: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum=0;\n\
    \    for(long i=0;i<lst.size();i++)\n    {\n        if(i%2!=0 && lst[i]%2==0)\n\
    \        {\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong ans = 0;\n\
    \tint l = lst.size();\n\tfor (int i = 0; i < l; i++) {\n\t\tif (i % 2 != 0 &&\
    \ lst[i] % 2 == 0) {\n\t\t\tans += lst[i];\n\t\t}\n\t}\n\treturn ans;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long long sum\
    \ = 0;\n    for(int i = 1; i < lst.size(); i += 2)\n    {\n        if(lst[i] %\
    \ 2 == 0)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long ans =\
    \ 0;\n    for(int i = 0; i < lst.size(); i+=2) {\n        if(lst[i] % 2 == 0)\
    \ {\n            ans += lst[i];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmp319dxshw: /tmp/tmp319dxshw.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long i=0,sum=0;\n\
    \    while(i<lst.size())\n    {\n        if(i%2==0)\n        {\n            if(lst[i]%2==0)\n\
    \            {\n                sum=sum+lst[i];\n            }\n        }\n  \
    \      i++;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: "tmp2x6axff0: /tmp/tmp2x6axff0.cpp:23: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long result =\
    \ 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 != 0 && lst[i] %\
    \ 2 == 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum=0;\n\
    \  for(int i=0;i<lst.size();i+=2)\n  {\n    if(lst[i]%2==0)\n    {\n      sum+=lst[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpowuz1r01: /tmp/tmpowuz1r01.cpp:19: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int i=0;\n\
    \    long sum=0;\n    for(std::vector<long>::iterator it=lst.begin();it!=lst.end();it++){\n\
    \        if(i%2!=0){\n            if(*it%2==0){\n                sum+=*it;\n \
    \           }\n        }\n        i++;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int sum=0;\n\
    \    for(int i=0;i<lst.size();i++)\n    {\n        if(i%2==1 && lst[i]%2==0)\n\
    \        {\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int sum = 0;\n\
    \  for(int i = 1; i < lst.size(); i += 2)\n  {\n    if(lst[i] % 2 == 0)\n    {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 1; i < lst.size(); i += 2) {\n    if(lst[i] % 2 == 0) {\n     \
    \ sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum=0;\n\
    \    for(int i=0;i<lst.size();i++)\n    {\n      if(i%2!=0 && lst[i]%2==0)\n \
    \       sum+=lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int size = lst.size();\n\
    \  int sum = 0;\n  for(int i = 0; i < size; i++) {\n    if(lst[i] % 2 == 0 &&\
    \ i % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int j=1;\n\
    \    int s=0;\n    for(int i=0;i<lst.size();i++)\n    {\n        if(lst[i]%2==0&&j%2!=0)\n\
    \        {\n            s=s+lst[i];\n        }\n        j++;\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpxy8hw1ou: /tmp/tmpxy8hw1ou.cpp:21: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  int sum = 0;\n\
    \  for(int i = 0; i < lst.size(); i++) {\n    if(i % 2 != 0 && lst[i] % 2 == 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    int sum = 0;\n    for(int i = 0; i < n; i++){\n        if(lst[i] % 2 == 0\
    \ && i % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 1; i < lst.size(); i+=2)\n    sum += lst[i];\n  return sum;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmpp16zcg2f: /tmp/tmpp16zcg2f.cpp:15: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    long sum =\
    \ 0;\n    for(int i = 1; i < lst.size(); i+=2) {\n        if(lst[i] % 2 == 0)\
    \ {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long sum = 0;\n\
    \  for(int i = 1; i < lst.size(); i+=2)\n    if(lst[i] % 2 == 0)\n      sum +=\
    \ lst[i];\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n    // your code\
    \ here\n    long sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(i%2==1\
    \ && lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4,\
    \ 88}))) == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122})))\
    \ == (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long result =\
    \ 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if ((i + 1) % 2 != 0 && lst[i]\
    \ % 2 == 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: "tmprk2un4e9: /tmp/tmprk2un4e9.cpp:17: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 88}))) == (88)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long result =\
    \ 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 != 0 && lst[i] %\
    \ 2 == 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long ans = 0;\n\
    \  for(int i = 0; i < lst.size(); i++){\n    if(lst[i] % 2 == 0 && i % 2 != 0){\n\
    \      ans += lst[i];\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 1 && lst[i] % 2 ==\
    \ 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n   \
    \ auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88}))) ==\
    \ (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) == (122));\n\
    \    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4,\
    \ 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong result=0;\n\
    \tfor(int i=0;i<lst.size();i++)\n\t{\n\t\tif(i%2==1 && lst[i]%2==0)\n\t\t{\n\t\
    \t\tresult+=lst[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n  long result =\
    \ 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 != 0 && lst[i] %\
    \ 2 == 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({4, 88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({4, 5, 6, 7, 2, 122}))) ==\
    \ (122));\n    assert(candidate((std::vector<long>({4, 0, 6, 7}))) == (0));\n\
    \    assert(candidate((std::vector<long>({4, 4, 6, 8}))) == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // add([4, 2, 6, 7]) ==> 2\nlong add(std::vector<long> lst) {\n\tlong ans = 0;\n\
    \tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 1 && lst[i] % 2 ==\
    \ 0)\n\t\t\tans += lst[i];\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({4, 88}))) == (88));\n    assert(candidate((std::vector<long>({4,\
    \ 5, 6, 7, 2, 122}))) == (122));\n    assert(candidate((std::vector<long>({4,\
    \ 0, 6, 7}))) == (0));\n    assert(candidate((std::vector<long>({4, 4, 6, 8})))\
    \ == (12));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
